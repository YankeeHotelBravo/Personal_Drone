
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800eb90  0800eb90  0001eb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800eff4  0800eff4  0001eff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800effc  0800effc  0001effc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f000  0800f000  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  0800f004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000344  240001ec  0800f1f0  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000530  0800f1f0  00020530  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002959f  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f36  00000000  00000000  000497b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c8  00000000  00000000  0004d6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001668  00000000  00000000  0004edb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038bf2  00000000  00000000  00050420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c9fb  00000000  00000000  00089012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166688  00000000  00000000  000a5a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020c095  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006fb4  00000000  00000000  0020c0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800eb78 	.word	0x0800eb78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	0800eb78 	.word	0x0800eb78

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15f;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4603      	mov	r3, r0
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	460b      	mov	r3, r1
 800069c:	70bb      	strb	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d81b      	bhi.n	80006e0 <MPU9250_Init+0x58>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <MPU9250_Init+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d1 	.word	0x080006d1
 80006bc:	080006d9 	.word	0x080006d9
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <MPU9250_Init+0x1b0>)
 80006c2:	4a5e      	ldr	r2, [pc, #376]	; (800083c <MPU9250_Init+0x1b4>)
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e00c      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <MPU9250_Init+0x1b0>)
 80006ca:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <MPU9250_Init+0x1b8>)
 80006cc:	601a      	str	r2, [r3, #0]
		break;
 80006ce:	e008      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80006d0:	4b59      	ldr	r3, [pc, #356]	; (8000838 <MPU9250_Init+0x1b0>)
 80006d2:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <MPU9250_Init+0x1bc>)
 80006d4:	601a      	str	r2, [r3, #0]
		break;
 80006d6:	e004      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80006d8:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MPU9250_Init+0x1b0>)
 80006da:	4a5b      	ldr	r2, [pc, #364]	; (8000848 <MPU9250_Init+0x1c0>)
 80006dc:	601a      	str	r2, [r3, #0]
		break;
 80006de:	e000      	b.n	80006e2 <MPU9250_Init+0x5a>
	default:
		break;
 80006e0:	bf00      	nop
	}

	switch(Acc_FS)
 80006e2:	78bb      	ldrb	r3, [r7, #2]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81f      	bhi.n	8000728 <MPU9250_Init+0xa0>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MPU9250_Init+0x68>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	08000715 	.word	0x08000715
 80006fc:	0800071f 	.word	0x0800071f
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000700:	4b52      	ldr	r3, [pc, #328]	; (800084c <MPU9250_Init+0x1c4>)
 8000702:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000706:	601a      	str	r2, [r3, #0]
		break;
 8000708:	e00f      	b.n	800072a <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <MPU9250_Init+0x1c4>)
 800070c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000710:	601a      	str	r2, [r3, #0]
		break;
 8000712:	e00a      	b.n	800072a <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 8000714:	4b4d      	ldr	r3, [pc, #308]	; (800084c <MPU9250_Init+0x1c4>)
 8000716:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e005      	b.n	800072a <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <MPU9250_Init+0x1c4>)
 8000720:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000724:	601a      	str	r2, [r3, #0]
		break;
 8000726:	e000      	b.n	800072a <MPU9250_Init+0xa2>
	default:
		break;
 8000728:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MPU9250_Init+0x1c8>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2275      	movs	r2, #117	; 0x75
 800073a:	21d0      	movs	r1, #208	; 0xd0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f004 ff85 	bl	800564c <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 8000742:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MPU9250_Init+0x1c8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b71      	cmp	r3, #113	; 0x71
 8000748:	d171      	bne.n	800082e <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <MPU9250_Init+0x1cc>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <MPU9250_Init+0x1cc>)
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	2219      	movs	r2, #25
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f004 fe5e 	bl	8005424 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f001 fc6d 	bl	8002048 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 800076e:	4a39      	ldr	r2, [pc, #228]	; (8000854 <MPU9250_Init+0x1cc>)
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MPU9250_Init+0x1cc>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	221a      	movs	r2, #26
 8000784:	21d0      	movs	r1, #208	; 0xd0
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f004 fe4c 	bl	8005424 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f001 fc5b 	bl	8002048 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MPU9250_Init+0x1cc>)
 800079a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MPU9250_Init+0x1cc>)
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	221b      	movs	r2, #27
 80007ac:	21d0      	movs	r1, #208	; 0xd0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f004 fe38 	bl	8005424 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007b4:	200a      	movs	r0, #10
 80007b6:	f001 fc47 	bl	8002048 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80007ba:	78bb      	ldrb	r3, [r7, #2]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MPU9250_Init+0x1cc>)
 80007c2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MPU9250_Init+0x1cc>)
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	221c      	movs	r2, #28
 80007d4:	21d0      	movs	r1, #208	; 0xd0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f004 fe24 	bl	8005424 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007dc:	200a      	movs	r0, #10
 80007de:	f001 fc33 	bl	8002048 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MPU9250_Init+0x1cc>)
 80007e4:	7c3b      	ldrb	r3, [r7, #16]
 80007e6:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MPU9250_Init+0x1cc>)
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	221d      	movs	r2, #29
 80007f8:	21d0      	movs	r1, #208	; 0xd0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f004 fe12 	bl	8005424 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f001 fc21 	bl	8002048 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MPU9250_Init+0x1cc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MPU9250_Init+0x1cc>)
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	226b      	movs	r2, #107	; 0x6b
 800081c:	21d0      	movs	r1, #208	; 0xd0
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f004 fe00 	bl	8005424 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f001 fc0f 	bl	8002048 <HAL_Delay>

		return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <MPU9250_Init+0x1a8>
	}
	else
	{
		return 0;
 800082e:	2300      	movs	r3, #0
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000000 	.word	0x24000000
 800083c:	43030000 	.word	0x43030000
 8000840:	42830000 	.word	0x42830000
 8000844:	42033333 	.word	0x42033333
 8000848:	41833333 	.word	0x41833333
 800084c:	24000004 	.word	0x24000004
 8000850:	24000278 	.word	0x24000278
 8000854:	24000220 	.word	0x24000220

08000858 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af04      	add	r7, sp, #16
 800085e:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	226a      	movs	r2, #106	; 0x6a
 8000876:	21d0      	movs	r1, #208	; 0xd0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f004 fdd3 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f001 fbe2 	bl	8002048 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	2237      	movs	r2, #55	; 0x37
 800089a:	21d0      	movs	r1, #208	; 0xd0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f004 fdc1 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f001 fbd0 	bl	8002048 <HAL_Delay>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	24000220 	.word	0x24000220

080008b4 <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af04      	add	r7, sp, #16
 80008ba:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MPU9250_Master+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MPU9250_Master+0xa0>)
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2237      	movs	r2, #55	; 0x37
 80008d2:	21d0      	movs	r1, #208	; 0xd0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f004 fda5 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f001 fbb4 	bl	8002048 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MPU9250_Master+0xa0>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MPU9250_Master+0xa0>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	226a      	movs	r2, #106	; 0x6a
 80008f6:	21d0      	movs	r1, #208	; 0xd0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f004 fd93 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f001 fba2 	bl	8002048 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MPU9250_Master+0xa0>)
 8000906:	220d      	movs	r2, #13
 8000908:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MPU9250_Master+0xa0>)
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	2224      	movs	r2, #36	; 0x24
 800091a:	21d0      	movs	r1, #208	; 0xd0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f004 fd81 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000922:	200a      	movs	r0, #10
 8000924:	f001 fb90 	bl	8002048 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MPU9250_Master+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2301      	movs	r3, #1
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MPU9250_Master+0xa0>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	226b      	movs	r2, #107	; 0x6b
 800093e:	21d0      	movs	r1, #208	; 0xd0
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f004 fd6f 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f001 fb7e 	bl	8002048 <HAL_Delay>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000220 	.word	0x24000220

08000958 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *Datastruct)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000964:	2216      	movs	r2, #22
 8000966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	220a      	movs	r2, #10
 8000978:	2118      	movs	r1, #24
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f004 fd52 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f001 fb61 	bl	8002048 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2303      	movs	r3, #3
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	2210      	movs	r2, #16
 8000996:	2118      	movs	r1, #24
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f004 fe57 	bl	800564c <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800099e:	200a      	movs	r0, #10
 80009a0:	f001 fb52 	bl	8002048 <HAL_Delay>

	Datastruct->ASAX = MPU9250_rx_buf[0];
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Datastruct->ASAY = MPU9250_rx_buf[1];
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Datastruct->ASAZ = MPU9250_rx_buf[2];
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009ba:	789a      	ldrb	r2, [r3, #2]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2303      	movs	r3, #3
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2200      	movs	r2, #0
 80009d2:	2118      	movs	r1, #24
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f004 fe39 	bl	800564c <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f001 fb34 	bl	8002048 <HAL_Delay>

	if(AK8963_WAI == 0b01001000)
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b48      	cmp	r3, #72	; 0x48
 80009e6:	d101      	bne.n	80009ec <MPU9250_AK8963_Setup+0x94>
	{
		return 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <MPU9250_AK8963_Setup+0x96>
	}
	else return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24000220 	.word	0x24000220
 80009fc:	2400027c 	.word	0x2400027c
 8000a00:	24000208 	.word	0x24000208

08000a04 <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a0e:	228c      	movs	r2, #140	; 0x8c
 8000a10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2225      	movs	r2, #37	; 0x25
 8000a22:	21d0      	movs	r1, #208	; 0xd0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f004 fcfd 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f001 fb0c 	bl	8002048 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000a36:	2364      	movs	r3, #100	; 0x64
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2226      	movs	r2, #38	; 0x26
 8000a46:	21d0      	movs	r1, #208	; 0xd0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f004 fceb 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f001 fafa 	bl	8002048 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a56:	2287      	movs	r2, #135	; 0x87
 8000a58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	2227      	movs	r2, #39	; 0x27
 8000a6a:	21d0      	movs	r1, #208	; 0xd0
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f004 fcd9 	bl	8005424 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a72:	200a      	movs	r0, #10
 8000a74:	f001 fae8 	bl	8002048 <HAL_Delay>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24000220 	.word	0x24000220

08000a84 <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MPU9250_Read_All+0x24>)
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2301      	movs	r3, #1
 8000a96:	223b      	movs	r2, #59	; 0x3b
 8000a98:	21d0      	movs	r1, #208	; 0xd0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f004 fef0 	bl	8005880 <HAL_I2C_Mem_Read_DMA>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2400027c 	.word	0x2400027c
 8000aac:	00000000 	.word	0x00000000

08000ab0 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000ab8:	4bb7      	ldr	r3, [pc, #732]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	4bb5      	ldr	r3, [pc, #724]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000ace:	4bb2      	ldr	r3, [pc, #712]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	4bb0      	ldr	r3, [pc, #704]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad8:	78db      	ldrb	r3, [r3, #3]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000aec:	4baa      	ldr	r3, [pc, #680]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	4ba8      	ldr	r3, [pc, #672]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	425b      	negs	r3, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000b0a:	4ba3      	ldr	r3, [pc, #652]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b0c:	7a1b      	ldrb	r3, [r3, #8]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b14:	7a5b      	ldrb	r3, [r3, #9]
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000b20:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b22:	7a9b      	ldrb	r3, [r3, #10]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	4b9b      	ldr	r3, [pc, #620]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b2a:	7adb      	ldrb	r3, [r3, #11]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	425b      	negs	r3, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000b3e:	4b96      	ldr	r3, [pc, #600]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b40:	7b1b      	ldrb	r3, [r3, #12]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	4b94      	ldr	r3, [pc, #592]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b48:	7b5b      	ldrb	r3, [r3, #13]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	425b      	negs	r3, r3
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000b5c:	4b8e      	ldr	r3, [pc, #568]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b5e:	7bdb      	ldrb	r3, [r3, #15]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b66:	7b9b      	ldrb	r3, [r3, #14]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	425b      	negs	r3, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000b7a:	4b87      	ldr	r3, [pc, #540]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b7c:	7c5b      	ldrb	r3, [r3, #17]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	4b85      	ldr	r3, [pc, #532]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b84:	7c1b      	ldrb	r3, [r3, #16]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000b90:	4b81      	ldr	r3, [pc, #516]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b92:	7cdb      	ldrb	r3, [r3, #19]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	4b7f      	ldr	r3, [pc, #508]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b9a:	7c9b      	ldrb	r3, [r3, #18]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	861a      	strh	r2, [r3, #48]	; 0x30

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb4:	4b79      	ldr	r3, [pc, #484]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000bb6:	ed93 7a00 	vldr	s14, [r3]
 8000bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc2:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000be2:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000be4:	ed93 7a00 	vldr	s14, [r3]
 8000be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000bf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c10:	4b62      	ldr	r3, [pc, #392]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1e:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000c22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c3e:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c40:	ed93 7a00 	vldr	s14, [r3]
 8000c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c5c:	4b50      	ldr	r3, [pc, #320]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c7a:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c7c:	ed93 7a00 	vldr	s14, [r3]
 8000c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c98:	3b80      	subs	r3, #128	; 0x80
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da00      	bge.n	8000ca0 <MPU9250_Parsing+0x1f0>
 8000c9e:	33ff      	adds	r3, #255	; 0xff
 8000ca0:	121b      	asrs	r3, r3, #8
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	fb03 f302 	mul.w	r3, r3, r2
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000cce:	3b80      	subs	r3, #128	; 0x80
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da00      	bge.n	8000cd6 <MPU9250_Parsing+0x226>
 8000cd4:	33ff      	adds	r3, #255	; 0xff
 8000cd6:	121b      	asrs	r3, r3, #8
 8000cd8:	3301      	adds	r3, #1
 8000cda:	fb03 f302 	mul.w	r3, r3, r2
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000ce8:	ed93 7a00 	vldr	s14, [r3]
 8000cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d04:	3b80      	subs	r3, #128	; 0x80
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da00      	bge.n	8000d0c <MPU9250_Parsing+0x25c>
 8000d0a:	33ff      	adds	r3, #255	; 0xff
 8000d0c:	121b      	asrs	r3, r3, #8
 8000d0e:	3301      	adds	r3, #1
 8000d10:	fb03 f302 	mul.w	r3, r3, r2
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000d1e:	ed93 7a00 	vldr	s14, [r3]
 8000d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	ed93 7a08 	vldr	s14, [r3, #32]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000d74:	ee07 3a90 	vmov	s15, r3
 8000d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000d8c:	e00c      	b.n	8000da8 <MPU9250_Parsing+0x2f8>
 8000d8e:	bf00      	nop
 8000d90:	a252dd11 	.word	0xa252dd11
 8000d94:	3f91df46 	.word	0x3f91df46
 8000d98:	2400027c 	.word	0x2400027c
 8000d9c:	24000000 	.word	0x24000000
 8000da0:	24000004 	.word	0x24000004
 8000da4:	24000008 	.word	0x24000008
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	DataStruct->My -= DataStruct->My_Offset;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <_write+0x24>)
 8000e1e:	f009 fd7b 	bl	800a918 <HAL_UART_Transmit_DMA>
}
 8000e22:	bf00      	nop
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	24000354 	.word	0x24000354

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e36:	f001 f875 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3a:	f000 f87b 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3e:	f000 fa09 	bl	8001254 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e42:	f000 f9df 	bl	8001204 <MX_DMA_Init>
  MX_TIM7_Init();
 8000e46:	f000 f95b 	bl	8001100 <MX_TIM7_Init>
  MX_QUADSPI_Init();
 8000e4a:	f000 f92d 	bl	80010a8 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 8000e4e:	f000 f98d 	bl	800116c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e52:	f000 f8e9 	bl	8001028 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8000e56:	482e      	ldr	r0, [pc, #184]	; (8000f10 <main+0xe0>)
 8000e58:	f009 fa16 	bl	800a288 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8000e5c:	e009      	b.n	8000e72 <main+0x42>
	{
		if(tim1_10ms_flag == 1)
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <main+0xe4>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d105      	bne.n	8000e72 <main+0x42>
		{
			tim1_10ms_flag = 0;
 8000e66:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <main+0xe4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialization Failed \n");
 8000e6c:	482a      	ldr	r0, [pc, #168]	; (8000f18 <main+0xe8>)
 8000e6e:	f00b fe7f 	bl	800cb70 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8000e72:	2303      	movs	r3, #3
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2303      	movs	r3, #3
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	4827      	ldr	r0, [pc, #156]	; (8000f1c <main+0xec>)
 8000e7e:	f7ff fc03 	bl	8000688 <MPU9250_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0ea      	beq.n	8000e5e <main+0x2e>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8000e88:	4824      	ldr	r0, [pc, #144]	; (8000f1c <main+0xec>)
 8000e8a:	f7ff fce5 	bl	8000858 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8000e8e:	e009      	b.n	8000ea4 <main+0x74>
	{
		if(tim1_10ms_flag == 1)
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <main+0xe4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <main+0x74>
		{
			tim1_10ms_flag = 0;
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <main+0xe4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialization Failed \n");
 8000e9e:	4820      	ldr	r0, [pc, #128]	; (8000f20 <main+0xf0>)
 8000ea0:	f00b fe66 	bl	800cb70 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8000ea4:	491f      	ldr	r1, [pc, #124]	; (8000f24 <main+0xf4>)
 8000ea6:	481d      	ldr	r0, [pc, #116]	; (8000f1c <main+0xec>)
 8000ea8:	f7ff fd56 	bl	8000958 <MPU9250_AK8963_Setup>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0ee      	beq.n	8000e90 <main+0x60>
		}
	}
	MPU9250_Master(&hi2c1);
 8000eb2:	481a      	ldr	r0, [pc, #104]	; (8000f1c <main+0xec>)
 8000eb4:	f7ff fcfe 	bl	80008b4 <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8000eb8:	4818      	ldr	r0, [pc, #96]	; (8000f1c <main+0xec>)
 8000eba:	f7ff fda3 	bl	8000a04 <MPU9250_Slave0_Enable>

	//EEPROM
	W25qxx_Init();
 8000ebe:	f000 ff35 	bl	8001d2c <W25qxx_Init>


	while (1)
	{

		if(MPU9250_DRDY == 1)
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <main+0xf8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d105      	bne.n	8000ed6 <main+0xa6>
		{
			MPU9250_DRDY = 0;
 8000eca:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <main+0xf8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
			MPU9250_Parsing(&MPU9250);
 8000ed0:	4814      	ldr	r0, [pc, #80]	; (8000f24 <main+0xf4>)
 8000ed2:	f7ff fded 	bl	8000ab0 <MPU9250_Parsing>
		}

		if(tim1_2ms_flag == 1)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <main+0xfc>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10f      	bne.n	8000efe <main+0xce>
		{
			tim1_2ms_flag = 0;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <main+0xfc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	4811      	ldr	r0, [pc, #68]	; (8000f30 <main+0x100>)
 8000eea:	f004 f9f1 	bl	80052d0 <HAL_GPIO_WritePin>
			MPU9250_Read_All(&hi2c1);
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <main+0xec>)
 8000ef0:	f7ff fdc8 	bl	8000a84 <MPU9250_Read_All>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <main+0x100>)
 8000efa:	f004 f9e9 	bl	80052d0 <HAL_GPIO_WritePin>
		}

		//Print
		if(tim1_10ms_flag == 1)
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <main+0xe4>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d1dd      	bne.n	8000ec2 <main+0x92>
		{
			tim1_10ms_flag = 0;
 8000f06:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <main+0xe4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
		if(MPU9250_DRDY == 1)
 8000f0c:	e7d9      	b.n	8000ec2 <main+0x92>
 8000f0e:	bf00      	nop
 8000f10:	2400045c 	.word	0x2400045c
 8000f14:	24000213 	.word	0x24000213
 8000f18:	0800eb90 	.word	0x0800eb90
 8000f1c:	24000290 	.word	0x24000290
 8000f20:	0800ebb0 	.word	0x0800ebb0
 8000f24:	24000224 	.word	0x24000224
 8000f28:	2400020c 	.word	0x2400020c
 8000f2c:	24000212 	.word	0x24000212
 8000f30:	58020000 	.word	0x58020000

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09c      	sub	sp, #112	; 0x70
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	224c      	movs	r2, #76	; 0x4c
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00b f95c 	bl	800c200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f00b f956 	bl	800c200 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f54:	2002      	movs	r0, #2
 8000f56:	f006 fc1f 	bl	8007798 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	4b30      	ldr	r3, [pc, #192]	; (8001020 <SystemClock_Config+0xec>)
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4a2f      	ldr	r2, [pc, #188]	; (8001020 <SystemClock_Config+0xec>)
 8000f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f68:	6193      	str	r3, [r2, #24]
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <SystemClock_Config+0xec>)
 8000f6c:	699b      	ldr	r3, [r3, #24]
 8000f6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <SystemClock_Config+0xf0>)
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	4a2a      	ldr	r2, [pc, #168]	; (8001024 <SystemClock_Config+0xf0>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <SystemClock_Config+0xf0>)
 8000f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f8c:	bf00      	nop
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <SystemClock_Config+0xec>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f9a:	d1f8      	bne.n	8000f8e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	2302      	movs	r3, #2
 8000fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000fae:	2305      	movs	r3, #5
 8000fb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000fb2:	23c0      	movs	r3, #192	; 0xc0
 8000fb4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 fe02 	bl	8007bdc <HAL_RCC_OscConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fde:	f000 f9ab 	bl	8001338 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe2:	233f      	movs	r3, #63	; 0x3f
 8000fe4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001000:	2340      	movs	r3, #64	; 0x40
 8001002:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2104      	movs	r1, #4
 8001008:	4618      	mov	r0, r3
 800100a:	f007 f9f7 	bl	80083fc <HAL_RCC_ClockConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001014:	f000 f990 	bl	8001338 <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	3770      	adds	r7, #112	; 0x70
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	58024800 	.word	0x58024800
 8001024:	58000400 	.word	0x58000400

08001028 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_I2C1_Init+0x74>)
 800102e:	4a1c      	ldr	r2, [pc, #112]	; (80010a0 <MX_I2C1_Init+0x78>)
 8001030:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_I2C1_Init+0x74>)
 8001034:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <MX_I2C1_Init+0x7c>)
 8001036:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_I2C1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <MX_I2C1_Init+0x74>)
 8001040:	2201      	movs	r2, #1
 8001042:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <MX_I2C1_Init+0x74>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <MX_I2C1_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_I2C1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_I2C1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <MX_I2C1_Init+0x74>)
 8001064:	f004 f94e 	bl	8005304 <HAL_I2C_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800106e:	f000 f963 	bl	8001338 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001072:	2100      	movs	r1, #0
 8001074:	4809      	ldr	r0, [pc, #36]	; (800109c <MX_I2C1_Init+0x74>)
 8001076:	f006 faf7 	bl	8007668 <HAL_I2CEx_ConfigAnalogFilter>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001080:	f000 f95a 	bl	8001338 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001084:	2100      	movs	r1, #0
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_I2C1_Init+0x74>)
 8001088:	f006 fb39 	bl	80076fe <HAL_I2CEx_ConfigDigitalFilter>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001092:	f000 f951 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	24000290 	.word	0x24000290
 80010a0:	40005400 	.word	0x40005400
 80010a4:	00b03fdb 	.word	0x00b03fdb

080010a8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <MX_QUADSPI_Init+0x54>)
 80010b0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010b4:	22ff      	movs	r2, #255	; 0xff
 80010b6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_QUADSPI_Init+0x50>)
 80010e4:	f006 fb92 	bl	800780c <HAL_QSPI_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80010ee:	f000 f923 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	240004a8 	.word	0x240004a8
 80010fc:	52005000 	.word	0x52005000

08001100 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_TIM7_Init+0x64>)
 8001112:	4a15      	ldr	r2, [pc, #84]	; (8001168 <MX_TIM7_Init+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_TIM7_Init+0x64>)
 8001118:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800111c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_TIM7_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_TIM7_Init+0x64>)
 8001126:	2205      	movs	r2, #5
 8001128:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MX_TIM7_Init+0x64>)
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_TIM7_Init+0x64>)
 8001132:	f009 f851 	bl	800a1d8 <HAL_TIM_Base_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800113c:	f000 f8fc 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_TIM7_Init+0x64>)
 800114e:	f009 faed 	bl	800a72c <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001158:	f000 f8ee 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2400045c 	.word	0x2400045c
 8001168:	40001400 	.word	0x40001400

0800116c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001172:	4a23      	ldr	r2, [pc, #140]	; (8001200 <MX_USART1_UART_Init+0x94>)
 8001174:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001176:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001178:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800117c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <MX_USART1_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_USART1_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_USART1_UART_Init+0x90>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b4:	4811      	ldr	r0, [pc, #68]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011b6:	f009 fb5f 	bl	800a878 <HAL_UART_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011c0:	f000 f8ba 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c4:	2100      	movs	r1, #0
 80011c6:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011c8:	f00a ff25 	bl	800c016 <HAL_UARTEx_SetTxFifoThreshold>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011d2:	f000 f8b1 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d6:	2100      	movs	r1, #0
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011da:	f00a ff5a 	bl	800c092 <HAL_UARTEx_SetRxFifoThreshold>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011e4:	f000 f8a8 	bl	8001338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_USART1_UART_Init+0x90>)
 80011ea:	f00a fedb 	bl	800bfa4 <HAL_UARTEx_DisableFifoMode>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011f4:	f000 f8a0 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	24000354 	.word	0x24000354
 8001200:	40011000 	.word	0x40011000

08001204 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_DMA_Init+0x4c>)
 800120c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <MX_DMA_Init+0x4c>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MX_DMA_Init+0x4c>)
 800121c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	200b      	movs	r0, #11
 800122e:	f001 f816 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001232:	200b      	movs	r0, #11
 8001234:	f001 f82d 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	200c      	movs	r0, #12
 800123e:	f001 f80e 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001242:	200c      	movs	r0, #12
 8001244:	f001 f825 	bl	8002292 <HAL_NVIC_EnableIRQ>

}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	58024400 	.word	0x58024400

08001254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <MX_GPIO_Init+0xdc>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a2f      	ldr	r2, [pc, #188]	; (8001330 <MX_GPIO_Init+0xdc>)
 8001272:	f043 0310 	orr.w	r3, r3, #16
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <MX_GPIO_Init+0xdc>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <MX_GPIO_Init+0xdc>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a28      	ldr	r2, [pc, #160]	; (8001330 <MX_GPIO_Init+0xdc>)
 8001290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <MX_GPIO_Init+0xdc>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a20      	ldr	r2, [pc, #128]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ca:	4a19      	ldr	r2, [pc, #100]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d4:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012ea:	f043 0308 	orr.w	r3, r3, #8
 80012ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_GPIO_Init+0xdc>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2102      	movs	r1, #2
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <MX_GPIO_Init+0xe0>)
 8001306:	f003 ffe3 	bl	80052d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800130a:	2302      	movs	r3, #2
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <MX_GPIO_Init+0xe0>)
 8001322:	f003 fe25 	bl	8004f70 <HAL_GPIO_Init>

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	58024400 	.word	0x58024400
 8001334:	58020000 	.word	0x58020000

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_MspInit+0x30>)
 800134c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001350:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_MspInit+0x30>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_MspInit+0x30>)
 800135c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	58024400 	.word	0x58024400

08001378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0b8      	sub	sp, #224	; 0xe0
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	22bc      	movs	r2, #188	; 0xbc
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f00a ff31 	bl	800c200 <memset>
  if(hi2c->Instance==I2C1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a3f      	ldr	r2, [pc, #252]	; (80014a0 <HAL_I2C_MspInit+0x128>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d177      	bne.n	8001498 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013a8:	2308      	movs	r3, #8
 80013aa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4618      	mov	r0, r3
 80013b8:	f007 fbac 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013c2:	f7ff ffb9 	bl	8001338 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HAL_I2C_MspInit+0x12c>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013cc:	4a35      	ldr	r2, [pc, #212]	; (80014a4 <HAL_I2C_MspInit+0x12c>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <HAL_I2C_MspInit+0x12c>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80013e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ec:	2312      	movs	r3, #18
 80013ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013fe:	2304      	movs	r3, #4
 8001400:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001408:	4619      	mov	r1, r3
 800140a:	4827      	ldr	r0, [pc, #156]	; (80014a8 <HAL_I2C_MspInit+0x130>)
 800140c:	f003 fdb0 	bl	8004f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <HAL_I2C_MspInit+0x12c>)
 8001412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001416:	4a23      	ldr	r2, [pc, #140]	; (80014a4 <HAL_I2C_MspInit+0x12c>)
 8001418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800141c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_I2C_MspInit+0x12c>)
 8001422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001430:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <HAL_I2C_MspInit+0x138>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001436:	2221      	movs	r2, #33	; 0x21
 8001438:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_I2C_MspInit+0x134>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800144c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001450:	2200      	movs	r2, #0
 8001452:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <HAL_I2C_MspInit+0x134>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001462:	2200      	movs	r2, #0
 8001464:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001468:	2200      	movs	r2, #0
 800146a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <HAL_I2C_MspInit+0x134>)
 800146e:	f000 ff2b 	bl	80022c8 <HAL_DMA_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8001478:	f7ff ff5e 	bl	8001338 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001480:	63da      	str	r2, [r3, #60]	; 0x3c
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_I2C_MspInit+0x134>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	201f      	movs	r0, #31
 800148e:	f000 fee6 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001492:	201f      	movs	r0, #31
 8001494:	f000 fefd 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	37e0      	adds	r7, #224	; 0xe0
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005400 	.word	0x40005400
 80014a4:	58024400 	.word	0x58024400
 80014a8:	58020400 	.word	0x58020400
 80014ac:	240003e4 	.word	0x240003e4
 80014b0:	40020028 	.word	0x40020028

080014b4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0ba      	sub	sp, #232	; 0xe8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	22bc      	movs	r2, #188	; 0xbc
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f00a fe93 	bl	800c200 <memset>
  if(hqspi->Instance==QUADSPI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a54      	ldr	r2, [pc, #336]	; (8001630 <HAL_QSPI_MspInit+0x17c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	f040 80a0 	bne.w	8001626 <HAL_QSPI_MspInit+0x172>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80014e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	4618      	mov	r0, r3
 80014f6:	f007 fb0d 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8001500:	f7ff ff1a 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001506:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800150a:	4a4a      	ldr	r2, [pc, #296]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001514:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001516:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800151a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001528:	4a42      	ldr	r2, [pc, #264]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001532:	4b40      	ldr	r3, [pc, #256]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001546:	4a3b      	ldr	r2, [pc, #236]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155e:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	4a33      	ldr	r2, [pc, #204]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_QSPI_MspInit+0x180>)
 8001570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800157c:	2304      	movs	r3, #4
 800157e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001594:	2309      	movs	r3, #9
 8001596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800159a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800159e:	4619      	mov	r1, r3
 80015a0:	4825      	ldr	r0, [pc, #148]	; (8001638 <HAL_QSPI_MspInit+0x184>)
 80015a2:	f003 fce5 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015a6:	2304      	movs	r3, #4
 80015a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015be:	2309      	movs	r3, #9
 80015c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015c8:	4619      	mov	r1, r3
 80015ca:	481c      	ldr	r0, [pc, #112]	; (800163c <HAL_QSPI_MspInit+0x188>)
 80015cc:	f003 fcd0 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80015d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80015d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015ea:	2309      	movs	r3, #9
 80015ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <HAL_QSPI_MspInit+0x18c>)
 80015f8:	f003 fcba 	bl	8004f70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015fc:	2340      	movs	r3, #64	; 0x40
 80015fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001614:	230a      	movs	r3, #10
 8001616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800161e:	4619      	mov	r1, r3
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <HAL_QSPI_MspInit+0x188>)
 8001622:	f003 fca5 	bl	8004f70 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	37e8      	adds	r7, #232	; 0xe8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	52005000 	.word	0x52005000
 8001634:	58024400 	.word	0x58024400
 8001638:	58021000 	.word	0x58021000
 800163c:	58020400 	.word	0x58020400
 8001640:	58020c00 	.word	0x58020c00

08001644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_TIM_Base_MspInit+0x48>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d116      	bne.n	8001684 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <HAL_TIM_Base_MspInit+0x4c>)
 8001658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800165c:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <HAL_TIM_Base_MspInit+0x4c>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_TIM_Base_MspInit+0x4c>)
 8001668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2100      	movs	r1, #0
 8001678:	2037      	movs	r0, #55	; 0x37
 800167a:	f000 fdf0 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800167e:	2037      	movs	r0, #55	; 0x37
 8001680:	f000 fe07 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40001400 	.word	0x40001400
 8001690:	58024400 	.word	0x58024400

08001694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b0b8      	sub	sp, #224	; 0xe0
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	22bc      	movs	r2, #188	; 0xbc
 80016b2:	2100      	movs	r1, #0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00a fda3 	bl	800c200 <memset>
  if(huart->Instance==USART1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <HAL_UART_MspInit+0x128>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d177      	bne.n	80017b4 <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4618      	mov	r0, r3
 80016d4:	f007 fa1e 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016de:	f7ff fe2b 	bl	8001338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_UART_MspInit+0x12c>)
 80016e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016e8:	4a35      	ldr	r2, [pc, #212]	; (80017c0 <HAL_UART_MspInit+0x12c>)
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_UART_MspInit+0x12c>)
 80016f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001700:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_UART_MspInit+0x12c>)
 8001702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001706:	4a2e      	ldr	r2, [pc, #184]	; (80017c0 <HAL_UART_MspInit+0x12c>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_UART_MspInit+0x12c>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800171e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001722:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001738:	2304      	movs	r3, #4
 800173a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001742:	4619      	mov	r1, r3
 8001744:	481f      	ldr	r0, [pc, #124]	; (80017c4 <HAL_UART_MspInit+0x130>)
 8001746:	f003 fc13 	bl	8004f70 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 800174a:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_UART_MspInit+0x134>)
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_UART_MspInit+0x138>)
 800174e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_UART_MspInit+0x134>)
 8001752:	222a      	movs	r2, #42	; 0x2a
 8001754:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_UART_MspInit+0x134>)
 8001758:	2240      	movs	r2, #64	; 0x40
 800175a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_UART_MspInit+0x134>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_UART_MspInit+0x134>)
 8001764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001768:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0x134>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HAL_UART_MspInit+0x134>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <HAL_UART_MspInit+0x134>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_UART_MspInit+0x134>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_UART_MspInit+0x134>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001788:	480f      	ldr	r0, [pc, #60]	; (80017c8 <HAL_UART_MspInit+0x134>)
 800178a:	f000 fd9d 	bl	80022c8 <HAL_DMA_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8001794:	f7ff fdd0 	bl	8001338 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <HAL_UART_MspInit+0x134>)
 800179c:	679a      	str	r2, [r3, #120]	; 0x78
 800179e:	4a0a      	ldr	r2, [pc, #40]	; (80017c8 <HAL_UART_MspInit+0x134>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2025      	movs	r0, #37	; 0x25
 80017aa:	f000 fd58 	bl	800225e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ae:	2025      	movs	r0, #37	; 0x25
 80017b0:	f000 fd6f 	bl	8002292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	37e0      	adds	r7, #224	; 0xe0
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40011000 	.word	0x40011000
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58020400 	.word	0x58020400
 80017c8:	240002dc 	.word	0x240002dc
 80017cc:	40020010 	.word	0x40020010

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80017d4:	e7fe      	b.n	80017d4 <NMI_Handler+0x4>

080017d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <MemManage_Handler+0x4>

080017e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <UsageFault_Handler+0x4>

080017ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181c:	f000 fbf4 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}

08001824 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <DMA1_Stream0_IRQHandler+0x10>)
 800182a:	f002 f875 	bl	8003918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	240002dc 	.word	0x240002dc

08001838 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <DMA1_Stream1_IRQHandler+0x10>)
 800183e:	f002 f86b 	bl	8003918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	240003e4 	.word	0x240003e4

0800184c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001850:	4802      	ldr	r0, [pc, #8]	; (800185c <I2C1_EV_IRQHandler+0x10>)
 8001852:	f004 f90d 	bl	8005a70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	24000290 	.word	0x24000290

08001860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <USART1_IRQHandler+0x10>)
 8001866:	f009 f8d7 	bl	800aa18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	24000354 	.word	0x24000354

08001874 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIM7_IRQHandler+0x10>)
 800187a:	f008 fd75 	bl	800a368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2400045c 	.word	0x2400045c

08001888 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d11f      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		tim1_2ms_count++;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018a4:	701a      	strb	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d105      	bne.n	80018ba <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
			tim1_2ms_flag = 1;
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018c4:	701a      	strb	r2, [r3, #0]
		if(tim1_10ms_count == 10)
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b0a      	cmp	r3, #10
 80018cc:	d105      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_10ms_count = 0;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
			tim1_10ms_flag = 1;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40001400 	.word	0x40001400
 80018ec:	24000210 	.word	0x24000210
 80018f0:	24000212 	.word	0x24000212
 80018f4:	24000211 	.word	0x24000211
 80018f8:	24000213 	.word	0x24000213

080018fc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(hi2c->Instance == I2C1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_I2C_MemRxCpltCallback+0x24>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d102      	bne.n	8001914 <HAL_I2C_MemRxCpltCallback+0x18>
  {
	  MPU9250_DRDY = 1;
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40005400 	.word	0x40005400
 8001924:	2400020c 	.word	0x2400020c

08001928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	return 1;
 800192c:	2301      	movs	r3, #1
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_kill>:

int _kill(int pid, int sig)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001942:	f00a fc33 	bl	800c1ac <__errno>
 8001946:	4603      	mov	r3, r0
 8001948:	2216      	movs	r2, #22
 800194a:	601a      	str	r2, [r3, #0]
	return -1;
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_exit>:

void _exit (int status)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001960:	f04f 31ff 	mov.w	r1, #4294967295
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ffe7 	bl	8001938 <_kill>
	while (1) {}		/* Make sure we hang here */
 800196a:	e7fe      	b.n	800196a <_exit+0x12>

0800196c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e00a      	b.n	8001994 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800197e:	f3af 8000 	nop.w
 8001982:	4601      	mov	r1, r0
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	60ba      	str	r2, [r7, #8]
 800198a:	b2ca      	uxtb	r2, r1
 800198c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3301      	adds	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbf0      	blt.n	800197e <_read+0x12>
	}

return len;
 800199c:	687b      	ldr	r3, [r7, #4]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
	return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
 80019c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ce:	605a      	str	r2, [r3, #4]
	return 0;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <_isatty>:

int _isatty(int file)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
	return 1;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f00a fbb4 	bl	800c1ac <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	24080000 	.word	0x24080000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	24000214 	.word	0x24000214
 8001a78:	24000530 	.word	0x24000530

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <SystemInit+0xec>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	4a38      	ldr	r2, [pc, #224]	; (8001b68 <SystemInit+0xec>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <SystemInit+0xf0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d807      	bhi.n	8001aac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <SystemInit+0xf0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 030f 	bic.w	r3, r3, #15
 8001aa4:	4a31      	ldr	r2, [pc, #196]	; (8001b6c <SystemInit+0xf0>)
 8001aa6:	f043 0307 	orr.w	r3, r3, #7
 8001aaa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <SystemInit+0xf4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <SystemInit+0xf4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ab8:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <SystemInit+0xf4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001abe:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <SystemInit+0xf4>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	492b      	ldr	r1, [pc, #172]	; (8001b70 <SystemInit+0xf4>)
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <SystemInit+0xf8>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <SystemInit+0xf0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <SystemInit+0xf0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 030f 	bic.w	r3, r3, #15
 8001ade:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <SystemInit+0xf0>)
 8001ae0:	f043 0307 	orr.w	r3, r3, #7
 8001ae4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <SystemInit+0xf4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <SystemInit+0xf4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <SystemInit+0xf4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <SystemInit+0xf4>)
 8001afa:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <SystemInit+0xfc>)
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <SystemInit+0xf4>)
 8001b00:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <SystemInit+0x100>)
 8001b02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <SystemInit+0xf4>)
 8001b06:	4a1e      	ldr	r2, [pc, #120]	; (8001b80 <SystemInit+0x104>)
 8001b08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <SystemInit+0xf4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <SystemInit+0xf4>)
 8001b12:	4a1b      	ldr	r2, [pc, #108]	; (8001b80 <SystemInit+0x104>)
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <SystemInit+0xf4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <SystemInit+0xf4>)
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <SystemInit+0x104>)
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b22:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <SystemInit+0xf4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <SystemInit+0xf4>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <SystemInit+0xf4>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <SystemInit+0xf4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <SystemInit+0x108>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <SystemInit+0x10c>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b46:	d202      	bcs.n	8001b4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <SystemInit+0x110>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <SystemInit+0x114>)
 8001b50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b54:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b56:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <SystemInit+0xec>)
 8001b58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b5c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00
 8001b6c:	52002000 	.word	0x52002000
 8001b70:	58024400 	.word	0x58024400
 8001b74:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b78:	02020200 	.word	0x02020200
 8001b7c:	01ff0000 	.word	0x01ff0000
 8001b80:	01010280 	.word	0x01010280
 8001b84:	5c001000 	.word	0x5c001000
 8001b88:	ffff0000 	.word	0xffff0000
 8001b8c:	51008108 	.word	0x51008108
 8001b90:	52004000 	.word	0x52004000

08001b94 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
//	HAL_QSPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
	HAL_QSPI_Transmit(&_W25QXX_SPI, &Data, 100);
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	2264      	movs	r2, #100	; 0x64
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <W25qxx_Spi+0x30>)
 8001ba6:	f005 fea5 	bl	80078f4 <HAL_QSPI_Transmit>
	HAL_QSPI_Receive(&_W25QXX_SPI, &ret, 100);
 8001baa:	f107 030f 	add.w	r3, r7, #15
 8001bae:	2264      	movs	r2, #100	; 0x64
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <W25qxx_Spi+0x30>)
 8001bb4:	f005 ff30 	bl	8007a18 <HAL_QSPI_Receive>
	return ret;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	240004a8 	.word	0x240004a8

08001bc8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2140      	movs	r1, #64	; 0x40
 8001be2:	4813      	ldr	r0, [pc, #76]	; (8001c30 <W25qxx_ReadID+0x68>)
 8001be4:	f003 fb74 	bl	80052d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001be8:	209f      	movs	r0, #159	; 0x9f
 8001bea:	f7ff ffd3 	bl	8001b94 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001bee:	20a5      	movs	r0, #165	; 0xa5
 8001bf0:	f7ff ffd0 	bl	8001b94 <W25qxx_Spi>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001bf8:	20a5      	movs	r0, #165	; 0xa5
 8001bfa:	f7ff ffcb 	bl	8001b94 <W25qxx_Spi>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c02:	20a5      	movs	r0, #165	; 0xa5
 8001c04:	f7ff ffc6 	bl	8001b94 <W25qxx_Spi>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	4807      	ldr	r0, [pc, #28]	; (8001c30 <W25qxx_ReadID+0x68>)
 8001c12:	f003 fb5d 	bl	80052d0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	041a      	lsls	r2, r3, #16
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	58020400 	.word	0x58020400

08001c34 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2140      	movs	r1, #64	; 0x40
 8001c3e:	4816      	ldr	r0, [pc, #88]	; (8001c98 <W25qxx_ReadUniqID+0x64>)
 8001c40:	f003 fb46 	bl	80052d0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001c44:	204b      	movs	r0, #75	; 0x4b
 8001c46:	f7ff ffa5 	bl	8001b94 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	71fb      	strb	r3, [r7, #7]
 8001c4e:	e005      	b.n	8001c5c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c50:	20a5      	movs	r0, #165	; 0xa5
 8001c52:	f7ff ff9f 	bl	8001b94 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d9f6      	bls.n	8001c50 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	71bb      	strb	r3, [r7, #6]
 8001c66:	e00b      	b.n	8001c80 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c68:	79bc      	ldrb	r4, [r7, #6]
 8001c6a:	20a5      	movs	r0, #165	; 0xa5
 8001c6c:	f7ff ff92 	bl	8001b94 <W25qxx_Spi>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <W25qxx_ReadUniqID+0x68>)
 8001c76:	4423      	add	r3, r4
 8001c78:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001c7a:	79bb      	ldrb	r3, [r7, #6]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	71bb      	strb	r3, [r7, #6]
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	2b07      	cmp	r3, #7
 8001c84:	d9f0      	bls.n	8001c68 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	2140      	movs	r1, #64	; 0x40
 8001c8a:	4803      	ldr	r0, [pc, #12]	; (8001c98 <W25qxx_ReadUniqID+0x64>)
 8001c8c:	f003 fb20 	bl	80052d0 <HAL_GPIO_WritePin>
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	58020400 	.word	0x58020400
 8001c9c:	240004f4 	.word	0x240004f4

08001ca0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2140      	movs	r1, #64	; 0x40
 8001cb2:	481c      	ldr	r0, [pc, #112]	; (8001d24 <W25qxx_ReadStatusRegister+0x84>)
 8001cb4:	f003 fb0c 	bl	80052d0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d10c      	bne.n	8001cd8 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8001cbe:	2005      	movs	r0, #5
 8001cc0:	f7ff ff68 	bl	8001b94 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001cc4:	20a5      	movs	r0, #165	; 0xa5
 8001cc6:	f7ff ff65 	bl	8001b94 <W25qxx_Spi>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <W25qxx_ReadStatusRegister+0x88>)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001cd6:	e01b      	b.n	8001d10 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d10c      	bne.n	8001cf8 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001cde:	2035      	movs	r0, #53	; 0x35
 8001ce0:	f7ff ff58 	bl	8001b94 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001ce4:	20a5      	movs	r0, #165	; 0xa5
 8001ce6:	f7ff ff55 	bl	8001b94 <W25qxx_Spi>
 8001cea:	4603      	mov	r3, r0
 8001cec:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <W25qxx_ReadStatusRegister+0x88>)
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001cf6:	e00b      	b.n	8001d10 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001cf8:	2015      	movs	r0, #21
 8001cfa:	f7ff ff4b 	bl	8001b94 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001cfe:	20a5      	movs	r0, #165	; 0xa5
 8001d00:	f7ff ff48 	bl	8001b94 <W25qxx_Spi>
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <W25qxx_ReadStatusRegister+0x88>)
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	2140      	movs	r1, #64	; 0x40
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <W25qxx_ReadStatusRegister+0x84>)
 8001d16:	f003 fadb 	bl	80052d0 <HAL_GPIO_WritePin>
	return status;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	58020400 	.word	0x58020400
 8001d28:	240004f4 	.word	0x240004f4

08001d2c <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001d32:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8001d3a:	e002      	b.n	8001d42 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f000 f983 	bl	8002048 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8001d42:	f000 f975 	bl	8002030 <HAL_GetTick>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b63      	cmp	r3, #99	; 0x63
 8001d4a:	d9f7      	bls.n	8001d3c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	485e      	ldr	r0, [pc, #376]	; (8001ecc <W25qxx_Init+0x1a0>)
 8001d52:	f003 fabd 	bl	80052d0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001d56:	2064      	movs	r0, #100	; 0x64
 8001d58:	f000 f976 	bl	8002048 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8001d5c:	f7ff ff34 	bl	8001bc8 <W25qxx_ReadID>
 8001d60:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	3b11      	subs	r3, #17
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d86c      	bhi.n	8001e46 <W25qxx_Init+0x11a>
 8001d6c:	a201      	add	r2, pc, #4	; (adr r2, 8001d74 <W25qxx_Init+0x48>)
 8001d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d72:	bf00      	nop
 8001d74:	08001e39 	.word	0x08001e39
 8001d78:	08001e2b 	.word	0x08001e2b
 8001d7c:	08001e1d 	.word	0x08001e1d
 8001d80:	08001e0f 	.word	0x08001e0f
 8001d84:	08001e01 	.word	0x08001e01
 8001d88:	08001df3 	.word	0x08001df3
 8001d8c:	08001de5 	.word	0x08001de5
 8001d90:	08001dd5 	.word	0x08001dd5
 8001d94:	08001dc5 	.word	0x08001dc5
 8001d98:	08001e47 	.word	0x08001e47
 8001d9c:	08001e47 	.word	0x08001e47
 8001da0:	08001e47 	.word	0x08001e47
 8001da4:	08001e47 	.word	0x08001e47
 8001da8:	08001e47 	.word	0x08001e47
 8001dac:	08001e47 	.word	0x08001e47
 8001db0:	08001db5 	.word	0x08001db5
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001db4:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001db6:	220a      	movs	r2, #10
 8001db8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8001dc2:	e046      	b.n	8001e52 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001dc4:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001dc6:	2209      	movs	r2, #9
 8001dc8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001dca:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8001dd2:	e03e      	b.n	8001e52 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001dd4:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8001dda:	4b3b      	ldr	r3, [pc, #236]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001de0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8001de2:	e036      	b.n	8001e52 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001de6:	2207      	movs	r2, #7
 8001de8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8001dea:	4b37      	ldr	r3, [pc, #220]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8001df0:	e02f      	b.n	8001e52 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8001df2:	4b35      	ldr	r3, [pc, #212]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001df4:	2206      	movs	r2, #6
 8001df6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001df8:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001dfa:	2240      	movs	r2, #64	; 0x40
 8001dfc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8001dfe:	e028      	b.n	8001e52 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8001e00:	4b31      	ldr	r3, [pc, #196]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e02:	2205      	movs	r2, #5
 8001e04:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e08:	2220      	movs	r2, #32
 8001e0a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8001e0c:	e021      	b.n	8001e52 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8001e0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e10:	2204      	movs	r2, #4
 8001e12:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001e14:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e16:	2210      	movs	r2, #16
 8001e18:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8001e1a:	e01a      	b.n	8001e52 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e1e:	2203      	movs	r2, #3
 8001e20:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e24:	2208      	movs	r2, #8
 8001e26:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8001e28:	e013      	b.n	8001e52 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8001e2a:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e32:	2204      	movs	r2, #4
 8001e34:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8001e36:	e00c      	b.n	8001e52 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e40:	2202      	movs	r2, #2
 8001e42:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8001e44:	e005      	b.n	8001e52 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e036      	b.n	8001ec0 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e58:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e60:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e6a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	4a15      	ldr	r2, [pc, #84]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e72:	6912      	ldr	r2, [r2, #16]
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e7a:	8952      	ldrh	r2, [r2, #10]
 8001e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e80:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e82:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e8c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	4a0d      	ldr	r2, [pc, #52]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e94:	6912      	ldr	r2, [r2, #16]
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	0a9b      	lsrs	r3, r3, #10
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001e9e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001ea0:	f7ff fec8 	bl	8001c34 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7ff fefb 	bl	8001ca0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7ff fef8 	bl	8001ca0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	f7ff fef5 	bl	8001ca0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <W25qxx_Init+0x19c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	240004f4 	.word	0x240004f4
 8001ecc:	58020400 	.word	0x58020400

08001ed0 <Reset_Handler>:
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0xe>
 8001ed4:	f7ff fdd2 	bl	8001a7c <SystemInit>
 8001ed8:	480c      	ldr	r0, [pc, #48]	; (8001f0c <LoopFillZerobss+0x12>)
 8001eda:	490d      	ldr	r1, [pc, #52]	; (8001f10 <LoopFillZerobss+0x16>)
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <LoopFillZerobss+0x1a>)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e002      	b.n	8001ee8 <LoopCopyDataInit>

08001ee2 <CopyDataInit>:
 8001ee2:	58d4      	ldr	r4, [r2, r3]
 8001ee4:	50c4      	str	r4, [r0, r3]
 8001ee6:	3304      	adds	r3, #4

08001ee8 <LoopCopyDataInit>:
 8001ee8:	18c4      	adds	r4, r0, r3
 8001eea:	428c      	cmp	r4, r1
 8001eec:	d3f9      	bcc.n	8001ee2 <CopyDataInit>
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <LoopFillZerobss+0x1e>)
 8001ef0:	4c0a      	ldr	r4, [pc, #40]	; (8001f1c <LoopFillZerobss+0x22>)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e001      	b.n	8001efa <LoopFillZerobss>

08001ef6 <FillZerobss>:
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	3204      	adds	r2, #4

08001efa <LoopFillZerobss>:
 8001efa:	42a2      	cmp	r2, r4
 8001efc:	d3fb      	bcc.n	8001ef6 <FillZerobss>
 8001efe:	f00a f95b 	bl	800c1b8 <__libc_init_array>
 8001f02:	f7fe ff95 	bl	8000e30 <main>
 8001f06:	4770      	bx	lr
 8001f08:	24080000 	.word	0x24080000
 8001f0c:	24000000 	.word	0x24000000
 8001f10:	240001ec 	.word	0x240001ec
 8001f14:	0800f004 	.word	0x0800f004
 8001f18:	240001ec 	.word	0x240001ec
 8001f1c:	24000530 	.word	0x24000530

08001f20 <ADC3_IRQHandler>:
 8001f20:	e7fe      	b.n	8001f20 <ADC3_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	f000 f98c 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f30:	f006 fc1a 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_Init+0x68>)
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	0a1b      	lsrs	r3, r3, #8
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	4913      	ldr	r1, [pc, #76]	; (8001f90 <HAL_Init+0x6c>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_Init+0x68>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <HAL_Init+0x6c>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_Init+0x70>)
 8001f66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <HAL_Init+0x74>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f6e:	200f      	movs	r0, #15
 8001f70:	f000 f814 	bl	8001f9c <HAL_InitTick>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e002      	b.n	8001f84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f7e:	f7ff f9e1 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	0800ebd0 	.word	0x0800ebd0
 8001f94:	24000010 	.word	0x24000010
 8001f98:	2400000c 	.word	0x2400000c

08001f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_InitTick+0x60>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e021      	b.n	8001ff4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <HAL_InitTick+0x64>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_InitTick+0x60>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 f971 	bl	80022ae <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 f93b 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	; (8002004 <HAL_InitTick+0x68>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	24000018 	.word	0x24000018
 8002000:	2400000c 	.word	0x2400000c
 8002004:	24000014 	.word	0x24000014

08002008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	24000018 	.word	0x24000018
 800202c:	2400051c 	.word	0x2400051c

08002030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b03      	ldr	r3, [pc, #12]	; (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	2400051c 	.word	0x2400051c

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	24000018 	.word	0x24000018

08002090 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_GetREVID+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0c1b      	lsrs	r3, r3, #16
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	5c001000 	.word	0x5c001000

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <__NVIC_SetPriorityGrouping+0x40>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d6:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <__NVIC_SetPriorityGrouping+0x40>)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	60d3      	str	r3, [r2, #12]
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00
 80020ec:	05fa0000 	.word	0x05fa0000

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <__NVIC_EnableIRQ+0x38>)
 8002126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff29 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800226c:	f7ff ff40 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f7ff ff90 	bl	800219c <NVIC_EncodePriority>
 800227c:	4602      	mov	r2, r0
 800227e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff5f 	bl	8002148 <__NVIC_SetPriority>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b082      	sub	sp, #8
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff33 	bl	800210c <__NVIC_EnableIRQ>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ffa4 	bl	8002204 <SysTick_Config>
 80022bc:	4603      	mov	r3, r0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff feae 	bl	8002030 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e316      	b.n	800290e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a66      	ldr	r2, [pc, #408]	; (8002480 <HAL_DMA_Init+0x1b8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d04a      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_DMA_Init+0x1bc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d045      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a63      	ldr	r2, [pc, #396]	; (8002488 <HAL_DMA_Init+0x1c0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d040      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a62      	ldr	r2, [pc, #392]	; (800248c <HAL_DMA_Init+0x1c4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d03b      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a60      	ldr	r2, [pc, #384]	; (8002490 <HAL_DMA_Init+0x1c8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d036      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a5f      	ldr	r2, [pc, #380]	; (8002494 <HAL_DMA_Init+0x1cc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d031      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a5d      	ldr	r2, [pc, #372]	; (8002498 <HAL_DMA_Init+0x1d0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d02c      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a5c      	ldr	r2, [pc, #368]	; (800249c <HAL_DMA_Init+0x1d4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d027      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a5a      	ldr	r2, [pc, #360]	; (80024a0 <HAL_DMA_Init+0x1d8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d022      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a59      	ldr	r2, [pc, #356]	; (80024a4 <HAL_DMA_Init+0x1dc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d01d      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a57      	ldr	r2, [pc, #348]	; (80024a8 <HAL_DMA_Init+0x1e0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d018      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a56      	ldr	r2, [pc, #344]	; (80024ac <HAL_DMA_Init+0x1e4>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d013      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a54      	ldr	r2, [pc, #336]	; (80024b0 <HAL_DMA_Init+0x1e8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00e      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a53      	ldr	r2, [pc, #332]	; (80024b4 <HAL_DMA_Init+0x1ec>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d009      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <HAL_DMA_Init+0x1f0>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_DMA_Init+0xb8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a50      	ldr	r2, [pc, #320]	; (80024bc <HAL_DMA_Init+0x1f4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_DMA_Init+0xbc>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_DMA_Init+0xbe>
 8002384:	2300      	movs	r3, #0
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 813b 	beq.w	8002602 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a37      	ldr	r2, [pc, #220]	; (8002480 <HAL_DMA_Init+0x1b8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d04a      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a36      	ldr	r2, [pc, #216]	; (8002484 <HAL_DMA_Init+0x1bc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d045      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a34      	ldr	r2, [pc, #208]	; (8002488 <HAL_DMA_Init+0x1c0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d040      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a33      	ldr	r2, [pc, #204]	; (800248c <HAL_DMA_Init+0x1c4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d03b      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a31      	ldr	r2, [pc, #196]	; (8002490 <HAL_DMA_Init+0x1c8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d036      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a30      	ldr	r2, [pc, #192]	; (8002494 <HAL_DMA_Init+0x1cc>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d031      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <HAL_DMA_Init+0x1d0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02c      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a2d      	ldr	r2, [pc, #180]	; (800249c <HAL_DMA_Init+0x1d4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d027      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <HAL_DMA_Init+0x1d8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d022      	beq.n	800243c <HAL_DMA_Init+0x174>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <HAL_DMA_Init+0x1dc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d01d      	beq.n	800243c <HAL_DMA_Init+0x174>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a28      	ldr	r2, [pc, #160]	; (80024a8 <HAL_DMA_Init+0x1e0>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d018      	beq.n	800243c <HAL_DMA_Init+0x174>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a27      	ldr	r2, [pc, #156]	; (80024ac <HAL_DMA_Init+0x1e4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_DMA_Init+0x174>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <HAL_DMA_Init+0x1e8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00e      	beq.n	800243c <HAL_DMA_Init+0x174>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_DMA_Init+0x1ec>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d009      	beq.n	800243c <HAL_DMA_Init+0x174>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a22      	ldr	r2, [pc, #136]	; (80024b8 <HAL_DMA_Init+0x1f0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d004      	beq.n	800243c <HAL_DMA_Init+0x174>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a21      	ldr	r2, [pc, #132]	; (80024bc <HAL_DMA_Init+0x1f4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d108      	bne.n	800244e <HAL_DMA_Init+0x186>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e007      	b.n	800245e <HAL_DMA_Init+0x196>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800245e:	e02f      	b.n	80024c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002460:	f7ff fde6 	bl	8002030 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b05      	cmp	r3, #5
 800246c:	d928      	bls.n	80024c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2203      	movs	r2, #3
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e246      	b.n	800290e <HAL_DMA_Init+0x646>
 8002480:	40020010 	.word	0x40020010
 8002484:	40020028 	.word	0x40020028
 8002488:	40020040 	.word	0x40020040
 800248c:	40020058 	.word	0x40020058
 8002490:	40020070 	.word	0x40020070
 8002494:	40020088 	.word	0x40020088
 8002498:	400200a0 	.word	0x400200a0
 800249c:	400200b8 	.word	0x400200b8
 80024a0:	40020410 	.word	0x40020410
 80024a4:	40020428 	.word	0x40020428
 80024a8:	40020440 	.word	0x40020440
 80024ac:	40020458 	.word	0x40020458
 80024b0:	40020470 	.word	0x40020470
 80024b4:	40020488 	.word	0x40020488
 80024b8:	400204a0 	.word	0x400204a0
 80024bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1c8      	bne.n	8002460 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4b83      	ldr	r3, [pc, #524]	; (80026e8 <HAL_DMA_Init+0x420>)
 80024da:	4013      	ands	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80024e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2b04      	cmp	r3, #4
 8002512:	d107      	bne.n	8002524 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4313      	orrs	r3, r2
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002524:	4b71      	ldr	r3, [pc, #452]	; (80026ec <HAL_DMA_Init+0x424>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b71      	ldr	r3, [pc, #452]	; (80026f0 <HAL_DMA_Init+0x428>)
 800252a:	4013      	ands	r3, r2
 800252c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002530:	d328      	bcc.n	8002584 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b28      	cmp	r3, #40	; 0x28
 8002538:	d903      	bls.n	8002542 <HAL_DMA_Init+0x27a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b2e      	cmp	r3, #46	; 0x2e
 8002540:	d917      	bls.n	8002572 <HAL_DMA_Init+0x2aa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b3e      	cmp	r3, #62	; 0x3e
 8002548:	d903      	bls.n	8002552 <HAL_DMA_Init+0x28a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b42      	cmp	r3, #66	; 0x42
 8002550:	d90f      	bls.n	8002572 <HAL_DMA_Init+0x2aa>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b46      	cmp	r3, #70	; 0x46
 8002558:	d903      	bls.n	8002562 <HAL_DMA_Init+0x29a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b48      	cmp	r3, #72	; 0x48
 8002560:	d907      	bls.n	8002572 <HAL_DMA_Init+0x2aa>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b4e      	cmp	r3, #78	; 0x4e
 8002568:	d905      	bls.n	8002576 <HAL_DMA_Init+0x2ae>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b52      	cmp	r3, #82	; 0x52
 8002570:	d801      	bhi.n	8002576 <HAL_DMA_Init+0x2ae>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_DMA_Init+0x2b0>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002582:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	697a      	ldr	r2, [r7, #20]
 800258a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f023 0307 	bic.w	r3, r3, #7
 800259a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d117      	bne.n	80025de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00e      	beq.n	80025de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f002 fb4b 	bl	8004c5c <DMA_CheckFifoParam>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e197      	b.n	800290e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f002 fa86 	bl	8004af8 <DMA_CalcBaseAndBitshift>
 80025ec:	4603      	mov	r3, r0
 80025ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	223f      	movs	r2, #63	; 0x3f
 80025fa:	409a      	lsls	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e0cd      	b.n	800279e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a3b      	ldr	r2, [pc, #236]	; (80026f4 <HAL_DMA_Init+0x42c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a39      	ldr	r2, [pc, #228]	; (80026f8 <HAL_DMA_Init+0x430>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01d      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a38      	ldr	r2, [pc, #224]	; (80026fc <HAL_DMA_Init+0x434>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a36      	ldr	r2, [pc, #216]	; (8002700 <HAL_DMA_Init+0x438>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a35      	ldr	r2, [pc, #212]	; (8002704 <HAL_DMA_Init+0x43c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a33      	ldr	r2, [pc, #204]	; (8002708 <HAL_DMA_Init+0x440>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a32      	ldr	r2, [pc, #200]	; (800270c <HAL_DMA_Init+0x444>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_DMA_Init+0x38a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a30      	ldr	r2, [pc, #192]	; (8002710 <HAL_DMA_Init+0x448>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_DMA_Init+0x38e>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <HAL_DMA_Init+0x390>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8097 	beq.w	800278c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a24      	ldr	r2, [pc, #144]	; (80026f4 <HAL_DMA_Init+0x42c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d021      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <HAL_DMA_Init+0x430>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01c      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <HAL_DMA_Init+0x434>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d017      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_DMA_Init+0x438>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d012      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_DMA_Init+0x43c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00d      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1c      	ldr	r2, [pc, #112]	; (8002708 <HAL_DMA_Init+0x440>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a1b      	ldr	r2, [pc, #108]	; (800270c <HAL_DMA_Init+0x444>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d003      	beq.n	80026ac <HAL_DMA_Init+0x3e4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_DMA_Init+0x448>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_DMA_Init+0x44c>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b40      	cmp	r3, #64	; 0x40
 80026d4:	d020      	beq.n	8002718 <HAL_DMA_Init+0x450>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b80      	cmp	r3, #128	; 0x80
 80026dc:	d102      	bne.n	80026e4 <HAL_DMA_Init+0x41c>
 80026de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026e2:	e01a      	b.n	800271a <HAL_DMA_Init+0x452>
 80026e4:	2300      	movs	r3, #0
 80026e6:	e018      	b.n	800271a <HAL_DMA_Init+0x452>
 80026e8:	fe10803f 	.word	0xfe10803f
 80026ec:	5c001000 	.word	0x5c001000
 80026f0:	ffff0000 	.word	0xffff0000
 80026f4:	58025408 	.word	0x58025408
 80026f8:	5802541c 	.word	0x5802541c
 80026fc:	58025430 	.word	0x58025430
 8002700:	58025444 	.word	0x58025444
 8002704:	58025458 	.word	0x58025458
 8002708:	5802546c 	.word	0x5802546c
 800270c:	58025480 	.word	0x58025480
 8002710:	58025494 	.word	0x58025494
 8002714:	fffe000f 	.word	0xfffe000f
 8002718:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68d2      	ldr	r2, [r2, #12]
 800271e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002730:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002738:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002740:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002748:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b6e      	ldr	r3, [pc, #440]	; (8002918 <HAL_DMA_Init+0x650>)
 8002760:	4413      	add	r3, r2
 8002762:	4a6e      	ldr	r2, [pc, #440]	; (800291c <HAL_DMA_Init+0x654>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	009a      	lsls	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f002 f9c1 	bl	8004af8 <DMA_CalcBaseAndBitshift>
 8002776:	4603      	mov	r3, r0
 8002778:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2201      	movs	r2, #1
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	e008      	b.n	800279e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2240      	movs	r2, #64	; 0x40
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2203      	movs	r2, #3
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0b7      	b.n	800290e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a5f      	ldr	r2, [pc, #380]	; (8002920 <HAL_DMA_Init+0x658>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d072      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <HAL_DMA_Init+0x65c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d06d      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <HAL_DMA_Init+0x660>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d068      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5a      	ldr	r2, [pc, #360]	; (800292c <HAL_DMA_Init+0x664>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d063      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a59      	ldr	r2, [pc, #356]	; (8002930 <HAL_DMA_Init+0x668>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d05e      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a57      	ldr	r2, [pc, #348]	; (8002934 <HAL_DMA_Init+0x66c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d059      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a56      	ldr	r2, [pc, #344]	; (8002938 <HAL_DMA_Init+0x670>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d054      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a54      	ldr	r2, [pc, #336]	; (800293c <HAL_DMA_Init+0x674>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d04f      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a53      	ldr	r2, [pc, #332]	; (8002940 <HAL_DMA_Init+0x678>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d04a      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a51      	ldr	r2, [pc, #324]	; (8002944 <HAL_DMA_Init+0x67c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d045      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a50      	ldr	r2, [pc, #320]	; (8002948 <HAL_DMA_Init+0x680>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d040      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a4e      	ldr	r2, [pc, #312]	; (800294c <HAL_DMA_Init+0x684>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d03b      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a4d      	ldr	r2, [pc, #308]	; (8002950 <HAL_DMA_Init+0x688>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d036      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a4b      	ldr	r2, [pc, #300]	; (8002954 <HAL_DMA_Init+0x68c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d031      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a4a      	ldr	r2, [pc, #296]	; (8002958 <HAL_DMA_Init+0x690>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d02c      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a48      	ldr	r2, [pc, #288]	; (800295c <HAL_DMA_Init+0x694>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d027      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a47      	ldr	r2, [pc, #284]	; (8002960 <HAL_DMA_Init+0x698>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d022      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a45      	ldr	r2, [pc, #276]	; (8002964 <HAL_DMA_Init+0x69c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01d      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a44      	ldr	r2, [pc, #272]	; (8002968 <HAL_DMA_Init+0x6a0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d018      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a42      	ldr	r2, [pc, #264]	; (800296c <HAL_DMA_Init+0x6a4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a41      	ldr	r2, [pc, #260]	; (8002970 <HAL_DMA_Init+0x6a8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00e      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a3f      	ldr	r2, [pc, #252]	; (8002974 <HAL_DMA_Init+0x6ac>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a3e      	ldr	r2, [pc, #248]	; (8002978 <HAL_DMA_Init+0x6b0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_DMA_Init+0x5c6>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a3c      	ldr	r2, [pc, #240]	; (800297c <HAL_DMA_Init+0x6b4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_DMA_Init+0x5ca>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_DMA_Init+0x5cc>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d032      	beq.n	80028fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f002 fa5b 	bl	8004d54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b80      	cmp	r3, #128	; 0x80
 80028a4:	d102      	bne.n	80028ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <HAL_DMA_Init+0x624>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d80c      	bhi.n	80028ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f002 fad8 	bl	8004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	e008      	b.n	80028fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	a7fdabf8 	.word	0xa7fdabf8
 800291c:	cccccccd 	.word	0xcccccccd
 8002920:	40020010 	.word	0x40020010
 8002924:	40020028 	.word	0x40020028
 8002928:	40020040 	.word	0x40020040
 800292c:	40020058 	.word	0x40020058
 8002930:	40020070 	.word	0x40020070
 8002934:	40020088 	.word	0x40020088
 8002938:	400200a0 	.word	0x400200a0
 800293c:	400200b8 	.word	0x400200b8
 8002940:	40020410 	.word	0x40020410
 8002944:	40020428 	.word	0x40020428
 8002948:	40020440 	.word	0x40020440
 800294c:	40020458 	.word	0x40020458
 8002950:	40020470 	.word	0x40020470
 8002954:	40020488 	.word	0x40020488
 8002958:	400204a0 	.word	0x400204a0
 800295c:	400204b8 	.word	0x400204b8
 8002960:	58025408 	.word	0x58025408
 8002964:	5802541c 	.word	0x5802541c
 8002968:	58025430 	.word	0x58025430
 800296c:	58025444 	.word	0x58025444
 8002970:	58025458 	.word	0x58025458
 8002974:	5802546c 	.word	0x5802546c
 8002978:	58025480 	.word	0x58025480
 800297c:	58025494 	.word	0x58025494

08002980 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e226      	b.n	8002dea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_DMA_Start_IT+0x2a>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e21f      	b.n	8002dea <HAL_DMA_Start_IT+0x46a>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	f040 820a 	bne.w	8002dd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a68      	ldr	r2, [pc, #416]	; (8002b74 <HAL_DMA_Start_IT+0x1f4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d04a      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a66      	ldr	r2, [pc, #408]	; (8002b78 <HAL_DMA_Start_IT+0x1f8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d045      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a65      	ldr	r2, [pc, #404]	; (8002b7c <HAL_DMA_Start_IT+0x1fc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d040      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a63      	ldr	r2, [pc, #396]	; (8002b80 <HAL_DMA_Start_IT+0x200>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d03b      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a62      	ldr	r2, [pc, #392]	; (8002b84 <HAL_DMA_Start_IT+0x204>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d036      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a60      	ldr	r2, [pc, #384]	; (8002b88 <HAL_DMA_Start_IT+0x208>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d031      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5f      	ldr	r2, [pc, #380]	; (8002b8c <HAL_DMA_Start_IT+0x20c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d02c      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5d      	ldr	r2, [pc, #372]	; (8002b90 <HAL_DMA_Start_IT+0x210>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d027      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5c      	ldr	r2, [pc, #368]	; (8002b94 <HAL_DMA_Start_IT+0x214>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d022      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a5a      	ldr	r2, [pc, #360]	; (8002b98 <HAL_DMA_Start_IT+0x218>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a59      	ldr	r2, [pc, #356]	; (8002b9c <HAL_DMA_Start_IT+0x21c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d018      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a57      	ldr	r2, [pc, #348]	; (8002ba0 <HAL_DMA_Start_IT+0x220>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a56      	ldr	r2, [pc, #344]	; (8002ba4 <HAL_DMA_Start_IT+0x224>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d00e      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a54      	ldr	r2, [pc, #336]	; (8002ba8 <HAL_DMA_Start_IT+0x228>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a53      	ldr	r2, [pc, #332]	; (8002bac <HAL_DMA_Start_IT+0x22c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d004      	beq.n	8002a6e <HAL_DMA_Start_IT+0xee>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a51      	ldr	r2, [pc, #324]	; (8002bb0 <HAL_DMA_Start_IT+0x230>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <HAL_DMA_Start_IT+0x100>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e007      	b.n	8002a90 <HAL_DMA_Start_IT+0x110>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f001 fe82 	bl	80047a0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a34      	ldr	r2, [pc, #208]	; (8002b74 <HAL_DMA_Start_IT+0x1f4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d04a      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a33      	ldr	r2, [pc, #204]	; (8002b78 <HAL_DMA_Start_IT+0x1f8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d045      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a31      	ldr	r2, [pc, #196]	; (8002b7c <HAL_DMA_Start_IT+0x1fc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d040      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a30      	ldr	r2, [pc, #192]	; (8002b80 <HAL_DMA_Start_IT+0x200>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d03b      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <HAL_DMA_Start_IT+0x204>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d036      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <HAL_DMA_Start_IT+0x208>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d031      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <HAL_DMA_Start_IT+0x20c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02c      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <HAL_DMA_Start_IT+0x210>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d027      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <HAL_DMA_Start_IT+0x214>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d022      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <HAL_DMA_Start_IT+0x218>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01d      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <HAL_DMA_Start_IT+0x21c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d018      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a24      	ldr	r2, [pc, #144]	; (8002ba0 <HAL_DMA_Start_IT+0x220>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d013      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_DMA_Start_IT+0x224>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00e      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a21      	ldr	r2, [pc, #132]	; (8002ba8 <HAL_DMA_Start_IT+0x228>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a1f      	ldr	r2, [pc, #124]	; (8002bac <HAL_DMA_Start_IT+0x22c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_DMA_Start_IT+0x1bc>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_DMA_Start_IT+0x230>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_DMA_Start_IT+0x1c0>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_DMA_Start_IT+0x1c2>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d036      	beq.n	8002bb4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 021e 	bic.w	r2, r3, #30
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0216 	orr.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d03e      	beq.n	8002be0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0208 	orr.w	r2, r2, #8
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	e035      	b.n	8002be0 <HAL_DMA_Start_IT+0x260>
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	40020070 	.word	0x40020070
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	400200a0 	.word	0x400200a0
 8002b90:	400200b8 	.word	0x400200b8
 8002b94:	40020410 	.word	0x40020410
 8002b98:	40020428 	.word	0x40020428
 8002b9c:	40020440 	.word	0x40020440
 8002ba0:	40020458 	.word	0x40020458
 8002ba4:	40020470 	.word	0x40020470
 8002ba8:	40020488 	.word	0x40020488
 8002bac:	400204a0 	.word	0x400204a0
 8002bb0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 020e 	bic.w	r2, r3, #14
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 020a 	orr.w	r2, r2, #10
 8002bc6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0204 	orr.w	r2, r2, #4
 8002bde:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a83      	ldr	r2, [pc, #524]	; (8002df4 <HAL_DMA_Start_IT+0x474>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d072      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a82      	ldr	r2, [pc, #520]	; (8002df8 <HAL_DMA_Start_IT+0x478>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d06d      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a80      	ldr	r2, [pc, #512]	; (8002dfc <HAL_DMA_Start_IT+0x47c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d068      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a7f      	ldr	r2, [pc, #508]	; (8002e00 <HAL_DMA_Start_IT+0x480>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d063      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a7d      	ldr	r2, [pc, #500]	; (8002e04 <HAL_DMA_Start_IT+0x484>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d05e      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7c      	ldr	r2, [pc, #496]	; (8002e08 <HAL_DMA_Start_IT+0x488>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d059      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a7a      	ldr	r2, [pc, #488]	; (8002e0c <HAL_DMA_Start_IT+0x48c>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d054      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a79      	ldr	r2, [pc, #484]	; (8002e10 <HAL_DMA_Start_IT+0x490>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d04f      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <HAL_DMA_Start_IT+0x494>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04a      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a76      	ldr	r2, [pc, #472]	; (8002e18 <HAL_DMA_Start_IT+0x498>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d045      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a74      	ldr	r2, [pc, #464]	; (8002e1c <HAL_DMA_Start_IT+0x49c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d040      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a73      	ldr	r2, [pc, #460]	; (8002e20 <HAL_DMA_Start_IT+0x4a0>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d03b      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a71      	ldr	r2, [pc, #452]	; (8002e24 <HAL_DMA_Start_IT+0x4a4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a70      	ldr	r2, [pc, #448]	; (8002e28 <HAL_DMA_Start_IT+0x4a8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d031      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6e      	ldr	r2, [pc, #440]	; (8002e2c <HAL_DMA_Start_IT+0x4ac>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02c      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6d      	ldr	r2, [pc, #436]	; (8002e30 <HAL_DMA_Start_IT+0x4b0>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d027      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6b      	ldr	r2, [pc, #428]	; (8002e34 <HAL_DMA_Start_IT+0x4b4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6a      	ldr	r2, [pc, #424]	; (8002e38 <HAL_DMA_Start_IT+0x4b8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d01d      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a68      	ldr	r2, [pc, #416]	; (8002e3c <HAL_DMA_Start_IT+0x4bc>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d018      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a67      	ldr	r2, [pc, #412]	; (8002e40 <HAL_DMA_Start_IT+0x4c0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_DMA_Start_IT+0x4c4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a64      	ldr	r2, [pc, #400]	; (8002e48 <HAL_DMA_Start_IT+0x4c8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a62      	ldr	r2, [pc, #392]	; (8002e4c <HAL_DMA_Start_IT+0x4cc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_DMA_Start_IT+0x350>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a61      	ldr	r2, [pc, #388]	; (8002e50 <HAL_DMA_Start_IT+0x4d0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Start_IT+0x354>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_DMA_Start_IT+0x356>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01a      	beq.n	8002d10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d007      	beq.n	8002d10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a37      	ldr	r2, [pc, #220]	; (8002df4 <HAL_DMA_Start_IT+0x474>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d04a      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a36      	ldr	r2, [pc, #216]	; (8002df8 <HAL_DMA_Start_IT+0x478>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d045      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <HAL_DMA_Start_IT+0x47c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d040      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <HAL_DMA_Start_IT+0x480>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d03b      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a31      	ldr	r2, [pc, #196]	; (8002e04 <HAL_DMA_Start_IT+0x484>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d036      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a30      	ldr	r2, [pc, #192]	; (8002e08 <HAL_DMA_Start_IT+0x488>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d031      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2e      	ldr	r2, [pc, #184]	; (8002e0c <HAL_DMA_Start_IT+0x48c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d02c      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2d      	ldr	r2, [pc, #180]	; (8002e10 <HAL_DMA_Start_IT+0x490>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d027      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <HAL_DMA_Start_IT+0x494>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d022      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <HAL_DMA_Start_IT+0x498>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01d      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_DMA_Start_IT+0x49c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d018      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <HAL_DMA_Start_IT+0x4a0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d013      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a25      	ldr	r2, [pc, #148]	; (8002e24 <HAL_DMA_Start_IT+0x4a4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00e      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <HAL_DMA_Start_IT+0x4a8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d009      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_DMA_Start_IT+0x4ac>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_DMA_Start_IT+0x430>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <HAL_DMA_Start_IT+0x4b0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <HAL_DMA_Start_IT+0x442>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e012      	b.n	8002de8 <HAL_DMA_Start_IT+0x468>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e009      	b.n	8002de8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40020010 	.word	0x40020010
 8002df8:	40020028 	.word	0x40020028
 8002dfc:	40020040 	.word	0x40020040
 8002e00:	40020058 	.word	0x40020058
 8002e04:	40020070 	.word	0x40020070
 8002e08:	40020088 	.word	0x40020088
 8002e0c:	400200a0 	.word	0x400200a0
 8002e10:	400200b8 	.word	0x400200b8
 8002e14:	40020410 	.word	0x40020410
 8002e18:	40020428 	.word	0x40020428
 8002e1c:	40020440 	.word	0x40020440
 8002e20:	40020458 	.word	0x40020458
 8002e24:	40020470 	.word	0x40020470
 8002e28:	40020488 	.word	0x40020488
 8002e2c:	400204a0 	.word	0x400204a0
 8002e30:	400204b8 	.word	0x400204b8
 8002e34:	58025408 	.word	0x58025408
 8002e38:	5802541c 	.word	0x5802541c
 8002e3c:	58025430 	.word	0x58025430
 8002e40:	58025444 	.word	0x58025444
 8002e44:	58025458 	.word	0x58025458
 8002e48:	5802546c 	.word	0x5802546c
 8002e4c:	58025480 	.word	0x58025480
 8002e50:	58025494 	.word	0x58025494

08002e54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002e5c:	f7ff f8e8 	bl	8002030 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e2dc      	b.n	8003426 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d008      	beq.n	8002e8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2280      	movs	r2, #128	; 0x80
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e2cd      	b.n	8003426 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a76      	ldr	r2, [pc, #472]	; (8003068 <HAL_DMA_Abort+0x214>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04a      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a74      	ldr	r2, [pc, #464]	; (800306c <HAL_DMA_Abort+0x218>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d045      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a73      	ldr	r2, [pc, #460]	; (8003070 <HAL_DMA_Abort+0x21c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d040      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a71      	ldr	r2, [pc, #452]	; (8003074 <HAL_DMA_Abort+0x220>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d03b      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a70      	ldr	r2, [pc, #448]	; (8003078 <HAL_DMA_Abort+0x224>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d036      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6e      	ldr	r2, [pc, #440]	; (800307c <HAL_DMA_Abort+0x228>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d031      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6d      	ldr	r2, [pc, #436]	; (8003080 <HAL_DMA_Abort+0x22c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d02c      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a6b      	ldr	r2, [pc, #428]	; (8003084 <HAL_DMA_Abort+0x230>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d027      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6a      	ldr	r2, [pc, #424]	; (8003088 <HAL_DMA_Abort+0x234>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d022      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a68      	ldr	r2, [pc, #416]	; (800308c <HAL_DMA_Abort+0x238>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d01d      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a67      	ldr	r2, [pc, #412]	; (8003090 <HAL_DMA_Abort+0x23c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d018      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_DMA_Abort+0x240>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d013      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a64      	ldr	r2, [pc, #400]	; (8003098 <HAL_DMA_Abort+0x244>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00e      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a62      	ldr	r2, [pc, #392]	; (800309c <HAL_DMA_Abort+0x248>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d009      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a61      	ldr	r2, [pc, #388]	; (80030a0 <HAL_DMA_Abort+0x24c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d004      	beq.n	8002f2a <HAL_DMA_Abort+0xd6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a5f      	ldr	r2, [pc, #380]	; (80030a4 <HAL_DMA_Abort+0x250>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_DMA_Abort+0xda>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_DMA_Abort+0xdc>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 021e 	bic.w	r2, r2, #30
 8002f42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e00a      	b.n	8002f72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 020e 	bic.w	r2, r2, #14
 8002f6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a3c      	ldr	r2, [pc, #240]	; (8003068 <HAL_DMA_Abort+0x214>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d072      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a3a      	ldr	r2, [pc, #232]	; (800306c <HAL_DMA_Abort+0x218>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d06d      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a39      	ldr	r2, [pc, #228]	; (8003070 <HAL_DMA_Abort+0x21c>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d068      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a37      	ldr	r2, [pc, #220]	; (8003074 <HAL_DMA_Abort+0x220>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d063      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a36      	ldr	r2, [pc, #216]	; (8003078 <HAL_DMA_Abort+0x224>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d05e      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a34      	ldr	r2, [pc, #208]	; (800307c <HAL_DMA_Abort+0x228>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d059      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a33      	ldr	r2, [pc, #204]	; (8003080 <HAL_DMA_Abort+0x22c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d054      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a31      	ldr	r2, [pc, #196]	; (8003084 <HAL_DMA_Abort+0x230>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04f      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a30      	ldr	r2, [pc, #192]	; (8003088 <HAL_DMA_Abort+0x234>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d04a      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a2e      	ldr	r2, [pc, #184]	; (800308c <HAL_DMA_Abort+0x238>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d045      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2d      	ldr	r2, [pc, #180]	; (8003090 <HAL_DMA_Abort+0x23c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d040      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a2b      	ldr	r2, [pc, #172]	; (8003094 <HAL_DMA_Abort+0x240>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d03b      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2a      	ldr	r2, [pc, #168]	; (8003098 <HAL_DMA_Abort+0x244>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d036      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a28      	ldr	r2, [pc, #160]	; (800309c <HAL_DMA_Abort+0x248>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d031      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a27      	ldr	r2, [pc, #156]	; (80030a0 <HAL_DMA_Abort+0x24c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d02c      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a25      	ldr	r2, [pc, #148]	; (80030a4 <HAL_DMA_Abort+0x250>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d027      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <HAL_DMA_Abort+0x254>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d022      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a22      	ldr	r2, [pc, #136]	; (80030ac <HAL_DMA_Abort+0x258>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01d      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a21      	ldr	r2, [pc, #132]	; (80030b0 <HAL_DMA_Abort+0x25c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d018      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <HAL_DMA_Abort+0x260>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_DMA_Abort+0x264>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d00e      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_DMA_Abort+0x268>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d009      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_DMA_Abort+0x26c>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <HAL_DMA_Abort+0x20e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <HAL_DMA_Abort+0x270>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d132      	bne.n	80030c8 <HAL_DMA_Abort+0x274>
 8003062:	2301      	movs	r3, #1
 8003064:	e031      	b.n	80030ca <HAL_DMA_Abort+0x276>
 8003066:	bf00      	nop
 8003068:	40020010 	.word	0x40020010
 800306c:	40020028 	.word	0x40020028
 8003070:	40020040 	.word	0x40020040
 8003074:	40020058 	.word	0x40020058
 8003078:	40020070 	.word	0x40020070
 800307c:	40020088 	.word	0x40020088
 8003080:	400200a0 	.word	0x400200a0
 8003084:	400200b8 	.word	0x400200b8
 8003088:	40020410 	.word	0x40020410
 800308c:	40020428 	.word	0x40020428
 8003090:	40020440 	.word	0x40020440
 8003094:	40020458 	.word	0x40020458
 8003098:	40020470 	.word	0x40020470
 800309c:	40020488 	.word	0x40020488
 80030a0:	400204a0 	.word	0x400204a0
 80030a4:	400204b8 	.word	0x400204b8
 80030a8:	58025408 	.word	0x58025408
 80030ac:	5802541c 	.word	0x5802541c
 80030b0:	58025430 	.word	0x58025430
 80030b4:	58025444 	.word	0x58025444
 80030b8:	58025458 	.word	0x58025458
 80030bc:	5802546c 	.word	0x5802546c
 80030c0:	58025480 	.word	0x58025480
 80030c4:	58025494 	.word	0x58025494
 80030c8:	2300      	movs	r3, #0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6d      	ldr	r2, [pc, #436]	; (8003298 <HAL_DMA_Abort+0x444>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d04a      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6b      	ldr	r2, [pc, #428]	; (800329c <HAL_DMA_Abort+0x448>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d045      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6a      	ldr	r2, [pc, #424]	; (80032a0 <HAL_DMA_Abort+0x44c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d040      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a68      	ldr	r2, [pc, #416]	; (80032a4 <HAL_DMA_Abort+0x450>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d03b      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a67      	ldr	r2, [pc, #412]	; (80032a8 <HAL_DMA_Abort+0x454>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d036      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a65      	ldr	r2, [pc, #404]	; (80032ac <HAL_DMA_Abort+0x458>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d031      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a64      	ldr	r2, [pc, #400]	; (80032b0 <HAL_DMA_Abort+0x45c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d02c      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a62      	ldr	r2, [pc, #392]	; (80032b4 <HAL_DMA_Abort+0x460>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d027      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a61      	ldr	r2, [pc, #388]	; (80032b8 <HAL_DMA_Abort+0x464>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5f      	ldr	r2, [pc, #380]	; (80032bc <HAL_DMA_Abort+0x468>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01d      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5e      	ldr	r2, [pc, #376]	; (80032c0 <HAL_DMA_Abort+0x46c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d018      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a5c      	ldr	r2, [pc, #368]	; (80032c4 <HAL_DMA_Abort+0x470>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5b      	ldr	r2, [pc, #364]	; (80032c8 <HAL_DMA_Abort+0x474>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00e      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a59      	ldr	r2, [pc, #356]	; (80032cc <HAL_DMA_Abort+0x478>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <HAL_DMA_Abort+0x47c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_DMA_Abort+0x32a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a56      	ldr	r2, [pc, #344]	; (80032d4 <HAL_DMA_Abort+0x480>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d108      	bne.n	8003190 <HAL_DMA_Abort+0x33c>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e007      	b.n	80031a0 <HAL_DMA_Abort+0x34c>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031a0:	e013      	b.n	80031ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a2:	f7fe ff45 	bl	8002030 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d90c      	bls.n	80031ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2203      	movs	r2, #3
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e12d      	b.n	8003426 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e5      	bne.n	80031a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a2f      	ldr	r2, [pc, #188]	; (8003298 <HAL_DMA_Abort+0x444>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d04a      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2d      	ldr	r2, [pc, #180]	; (800329c <HAL_DMA_Abort+0x448>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d045      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a2c      	ldr	r2, [pc, #176]	; (80032a0 <HAL_DMA_Abort+0x44c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d040      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a2a      	ldr	r2, [pc, #168]	; (80032a4 <HAL_DMA_Abort+0x450>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d03b      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a29      	ldr	r2, [pc, #164]	; (80032a8 <HAL_DMA_Abort+0x454>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d036      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a27      	ldr	r2, [pc, #156]	; (80032ac <HAL_DMA_Abort+0x458>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d031      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a26      	ldr	r2, [pc, #152]	; (80032b0 <HAL_DMA_Abort+0x45c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d02c      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a24      	ldr	r2, [pc, #144]	; (80032b4 <HAL_DMA_Abort+0x460>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d027      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a23      	ldr	r2, [pc, #140]	; (80032b8 <HAL_DMA_Abort+0x464>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a21      	ldr	r2, [pc, #132]	; (80032bc <HAL_DMA_Abort+0x468>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01d      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <HAL_DMA_Abort+0x46c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d018      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <HAL_DMA_Abort+0x470>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1d      	ldr	r2, [pc, #116]	; (80032c8 <HAL_DMA_Abort+0x474>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <HAL_DMA_Abort+0x478>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <HAL_DMA_Abort+0x47c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_DMA_Abort+0x422>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_DMA_Abort+0x480>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_DMA_Abort+0x426>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_DMA_Abort+0x428>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d02b      	beq.n	80032d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	223f      	movs	r2, #63	; 0x3f
 8003290:	409a      	lsls	r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	609a      	str	r2, [r3, #8]
 8003296:	e02a      	b.n	80032ee <HAL_DMA_Abort+0x49a>
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	2201      	movs	r2, #1
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a4f      	ldr	r2, [pc, #316]	; (8003430 <HAL_DMA_Abort+0x5dc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d072      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a4d      	ldr	r2, [pc, #308]	; (8003434 <HAL_DMA_Abort+0x5e0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d06d      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a4c      	ldr	r2, [pc, #304]	; (8003438 <HAL_DMA_Abort+0x5e4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d068      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a4a      	ldr	r2, [pc, #296]	; (800343c <HAL_DMA_Abort+0x5e8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d063      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a49      	ldr	r2, [pc, #292]	; (8003440 <HAL_DMA_Abort+0x5ec>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d05e      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a47      	ldr	r2, [pc, #284]	; (8003444 <HAL_DMA_Abort+0x5f0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d059      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a46      	ldr	r2, [pc, #280]	; (8003448 <HAL_DMA_Abort+0x5f4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d054      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a44      	ldr	r2, [pc, #272]	; (800344c <HAL_DMA_Abort+0x5f8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d04f      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a43      	ldr	r2, [pc, #268]	; (8003450 <HAL_DMA_Abort+0x5fc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04a      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a41      	ldr	r2, [pc, #260]	; (8003454 <HAL_DMA_Abort+0x600>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d045      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a40      	ldr	r2, [pc, #256]	; (8003458 <HAL_DMA_Abort+0x604>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d040      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a3e      	ldr	r2, [pc, #248]	; (800345c <HAL_DMA_Abort+0x608>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d03b      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a3d      	ldr	r2, [pc, #244]	; (8003460 <HAL_DMA_Abort+0x60c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d036      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3b      	ldr	r2, [pc, #236]	; (8003464 <HAL_DMA_Abort+0x610>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d031      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a3a      	ldr	r2, [pc, #232]	; (8003468 <HAL_DMA_Abort+0x614>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d02c      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a38      	ldr	r2, [pc, #224]	; (800346c <HAL_DMA_Abort+0x618>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d027      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a37      	ldr	r2, [pc, #220]	; (8003470 <HAL_DMA_Abort+0x61c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a35      	ldr	r2, [pc, #212]	; (8003474 <HAL_DMA_Abort+0x620>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01d      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a34      	ldr	r2, [pc, #208]	; (8003478 <HAL_DMA_Abort+0x624>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a32      	ldr	r2, [pc, #200]	; (800347c <HAL_DMA_Abort+0x628>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a31      	ldr	r2, [pc, #196]	; (8003480 <HAL_DMA_Abort+0x62c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2f      	ldr	r2, [pc, #188]	; (8003484 <HAL_DMA_Abort+0x630>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2e      	ldr	r2, [pc, #184]	; (8003488 <HAL_DMA_Abort+0x634>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_DMA_Abort+0x58a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	; (800348c <HAL_DMA_Abort+0x638>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d101      	bne.n	80033e2 <HAL_DMA_Abort+0x58e>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_DMA_Abort+0x590>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d015      	beq.n	8003414 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003408:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003412:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40020010 	.word	0x40020010
 8003434:	40020028 	.word	0x40020028
 8003438:	40020040 	.word	0x40020040
 800343c:	40020058 	.word	0x40020058
 8003440:	40020070 	.word	0x40020070
 8003444:	40020088 	.word	0x40020088
 8003448:	400200a0 	.word	0x400200a0
 800344c:	400200b8 	.word	0x400200b8
 8003450:	40020410 	.word	0x40020410
 8003454:	40020428 	.word	0x40020428
 8003458:	40020440 	.word	0x40020440
 800345c:	40020458 	.word	0x40020458
 8003460:	40020470 	.word	0x40020470
 8003464:	40020488 	.word	0x40020488
 8003468:	400204a0 	.word	0x400204a0
 800346c:	400204b8 	.word	0x400204b8
 8003470:	58025408 	.word	0x58025408
 8003474:	5802541c 	.word	0x5802541c
 8003478:	58025430 	.word	0x58025430
 800347c:	58025444 	.word	0x58025444
 8003480:	58025458 	.word	0x58025458
 8003484:	5802546c 	.word	0x5802546c
 8003488:	58025480 	.word	0x58025480
 800348c:	58025494 	.word	0x58025494

08003490 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e205      	b.n	80038ae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d004      	beq.n	80034b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e1fa      	b.n	80038ae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a8c      	ldr	r2, [pc, #560]	; (80036f0 <HAL_DMA_Abort_IT+0x260>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d04a      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a8b      	ldr	r2, [pc, #556]	; (80036f4 <HAL_DMA_Abort_IT+0x264>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d045      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a89      	ldr	r2, [pc, #548]	; (80036f8 <HAL_DMA_Abort_IT+0x268>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d040      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a88      	ldr	r2, [pc, #544]	; (80036fc <HAL_DMA_Abort_IT+0x26c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d03b      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a86      	ldr	r2, [pc, #536]	; (8003700 <HAL_DMA_Abort_IT+0x270>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d036      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a85      	ldr	r2, [pc, #532]	; (8003704 <HAL_DMA_Abort_IT+0x274>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d031      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a83      	ldr	r2, [pc, #524]	; (8003708 <HAL_DMA_Abort_IT+0x278>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d02c      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a82      	ldr	r2, [pc, #520]	; (800370c <HAL_DMA_Abort_IT+0x27c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d027      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a80      	ldr	r2, [pc, #512]	; (8003710 <HAL_DMA_Abort_IT+0x280>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d022      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a7f      	ldr	r2, [pc, #508]	; (8003714 <HAL_DMA_Abort_IT+0x284>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d01d      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a7d      	ldr	r2, [pc, #500]	; (8003718 <HAL_DMA_Abort_IT+0x288>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d018      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a7c      	ldr	r2, [pc, #496]	; (800371c <HAL_DMA_Abort_IT+0x28c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d013      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a7a      	ldr	r2, [pc, #488]	; (8003720 <HAL_DMA_Abort_IT+0x290>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00e      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a79      	ldr	r2, [pc, #484]	; (8003724 <HAL_DMA_Abort_IT+0x294>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d009      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a77      	ldr	r2, [pc, #476]	; (8003728 <HAL_DMA_Abort_IT+0x298>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_DMA_Abort_IT+0xc8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a76      	ldr	r2, [pc, #472]	; (800372c <HAL_DMA_Abort_IT+0x29c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_DMA_Abort_IT+0xcc>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_DMA_Abort_IT+0xce>
 800355c:	2300      	movs	r3, #0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d065      	beq.n	800362e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2204      	movs	r2, #4
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a60      	ldr	r2, [pc, #384]	; (80036f0 <HAL_DMA_Abort_IT+0x260>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d04a      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5e      	ldr	r2, [pc, #376]	; (80036f4 <HAL_DMA_Abort_IT+0x264>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d045      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5d      	ldr	r2, [pc, #372]	; (80036f8 <HAL_DMA_Abort_IT+0x268>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d040      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5b      	ldr	r2, [pc, #364]	; (80036fc <HAL_DMA_Abort_IT+0x26c>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d03b      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5a      	ldr	r2, [pc, #360]	; (8003700 <HAL_DMA_Abort_IT+0x270>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d036      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_DMA_Abort_IT+0x274>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d031      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a57      	ldr	r2, [pc, #348]	; (8003708 <HAL_DMA_Abort_IT+0x278>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d02c      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a55      	ldr	r2, [pc, #340]	; (800370c <HAL_DMA_Abort_IT+0x27c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d027      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a54      	ldr	r2, [pc, #336]	; (8003710 <HAL_DMA_Abort_IT+0x280>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a52      	ldr	r2, [pc, #328]	; (8003714 <HAL_DMA_Abort_IT+0x284>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01d      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a51      	ldr	r2, [pc, #324]	; (8003718 <HAL_DMA_Abort_IT+0x288>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d018      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a4f      	ldr	r2, [pc, #316]	; (800371c <HAL_DMA_Abort_IT+0x28c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a4e      	ldr	r2, [pc, #312]	; (8003720 <HAL_DMA_Abort_IT+0x290>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a4c      	ldr	r2, [pc, #304]	; (8003724 <HAL_DMA_Abort_IT+0x294>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a4b      	ldr	r2, [pc, #300]	; (8003728 <HAL_DMA_Abort_IT+0x298>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_DMA_Abort_IT+0x17a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a49      	ldr	r2, [pc, #292]	; (800372c <HAL_DMA_Abort_IT+0x29c>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d108      	bne.n	800361c <HAL_DMA_Abort_IT+0x18c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	e147      	b.n	80038ac <HAL_DMA_Abort_IT+0x41c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e13e      	b.n	80038ac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 020e 	bic.w	r2, r2, #14
 800363c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2b      	ldr	r2, [pc, #172]	; (80036f0 <HAL_DMA_Abort_IT+0x260>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d04a      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a29      	ldr	r2, [pc, #164]	; (80036f4 <HAL_DMA_Abort_IT+0x264>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d045      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a28      	ldr	r2, [pc, #160]	; (80036f8 <HAL_DMA_Abort_IT+0x268>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d040      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a26      	ldr	r2, [pc, #152]	; (80036fc <HAL_DMA_Abort_IT+0x26c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d03b      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a25      	ldr	r2, [pc, #148]	; (8003700 <HAL_DMA_Abort_IT+0x270>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d036      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_DMA_Abort_IT+0x274>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d031      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a22      	ldr	r2, [pc, #136]	; (8003708 <HAL_DMA_Abort_IT+0x278>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d02c      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a20      	ldr	r2, [pc, #128]	; (800370c <HAL_DMA_Abort_IT+0x27c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d027      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1f      	ldr	r2, [pc, #124]	; (8003710 <HAL_DMA_Abort_IT+0x280>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_DMA_Abort_IT+0x284>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01d      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <HAL_DMA_Abort_IT+0x288>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1a      	ldr	r2, [pc, #104]	; (800371c <HAL_DMA_Abort_IT+0x28c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a19      	ldr	r2, [pc, #100]	; (8003720 <HAL_DMA_Abort_IT+0x290>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a17      	ldr	r2, [pc, #92]	; (8003724 <HAL_DMA_Abort_IT+0x294>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a16      	ldr	r2, [pc, #88]	; (8003728 <HAL_DMA_Abort_IT+0x298>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_DMA_Abort_IT+0x24e>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <HAL_DMA_Abort_IT+0x29c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d128      	bne.n	8003730 <HAL_DMA_Abort_IT+0x2a0>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0201 	bic.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e027      	b.n	8003740 <HAL_DMA_Abort_IT+0x2b0>
 80036f0:	40020010 	.word	0x40020010
 80036f4:	40020028 	.word	0x40020028
 80036f8:	40020040 	.word	0x40020040
 80036fc:	40020058 	.word	0x40020058
 8003700:	40020070 	.word	0x40020070
 8003704:	40020088 	.word	0x40020088
 8003708:	400200a0 	.word	0x400200a0
 800370c:	400200b8 	.word	0x400200b8
 8003710:	40020410 	.word	0x40020410
 8003714:	40020428 	.word	0x40020428
 8003718:	40020440 	.word	0x40020440
 800371c:	40020458 	.word	0x40020458
 8003720:	40020470 	.word	0x40020470
 8003724:	40020488 	.word	0x40020488
 8003728:	400204a0 	.word	0x400204a0
 800372c:	400204b8 	.word	0x400204b8
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a5c      	ldr	r2, [pc, #368]	; (80038b8 <HAL_DMA_Abort_IT+0x428>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d072      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a5b      	ldr	r2, [pc, #364]	; (80038bc <HAL_DMA_Abort_IT+0x42c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d06d      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a59      	ldr	r2, [pc, #356]	; (80038c0 <HAL_DMA_Abort_IT+0x430>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d068      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a58      	ldr	r2, [pc, #352]	; (80038c4 <HAL_DMA_Abort_IT+0x434>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d063      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a56      	ldr	r2, [pc, #344]	; (80038c8 <HAL_DMA_Abort_IT+0x438>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d05e      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a55      	ldr	r2, [pc, #340]	; (80038cc <HAL_DMA_Abort_IT+0x43c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d059      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a53      	ldr	r2, [pc, #332]	; (80038d0 <HAL_DMA_Abort_IT+0x440>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d054      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_DMA_Abort_IT+0x444>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d04f      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a50      	ldr	r2, [pc, #320]	; (80038d8 <HAL_DMA_Abort_IT+0x448>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d04a      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a4f      	ldr	r2, [pc, #316]	; (80038dc <HAL_DMA_Abort_IT+0x44c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d045      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a4d      	ldr	r2, [pc, #308]	; (80038e0 <HAL_DMA_Abort_IT+0x450>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d040      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a4c      	ldr	r2, [pc, #304]	; (80038e4 <HAL_DMA_Abort_IT+0x454>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d03b      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a4a      	ldr	r2, [pc, #296]	; (80038e8 <HAL_DMA_Abort_IT+0x458>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d036      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a49      	ldr	r2, [pc, #292]	; (80038ec <HAL_DMA_Abort_IT+0x45c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d031      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a47      	ldr	r2, [pc, #284]	; (80038f0 <HAL_DMA_Abort_IT+0x460>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d02c      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a46      	ldr	r2, [pc, #280]	; (80038f4 <HAL_DMA_Abort_IT+0x464>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d027      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a44      	ldr	r2, [pc, #272]	; (80038f8 <HAL_DMA_Abort_IT+0x468>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d022      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a43      	ldr	r2, [pc, #268]	; (80038fc <HAL_DMA_Abort_IT+0x46c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d01d      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a41      	ldr	r2, [pc, #260]	; (8003900 <HAL_DMA_Abort_IT+0x470>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d018      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a40      	ldr	r2, [pc, #256]	; (8003904 <HAL_DMA_Abort_IT+0x474>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a3e      	ldr	r2, [pc, #248]	; (8003908 <HAL_DMA_Abort_IT+0x478>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00e      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a3d      	ldr	r2, [pc, #244]	; (800390c <HAL_DMA_Abort_IT+0x47c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d009      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a3b      	ldr	r2, [pc, #236]	; (8003910 <HAL_DMA_Abort_IT+0x480>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_DMA_Abort_IT+0x3a0>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a3a      	ldr	r2, [pc, #232]	; (8003914 <HAL_DMA_Abort_IT+0x484>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_DMA_Abort_IT+0x3a4>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_DMA_Abort_IT+0x3a6>
 8003834:	2300      	movs	r3, #0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d028      	beq.n	800388c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003848:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2201      	movs	r2, #1
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003868:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00c      	beq.n	800388c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003880:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800388a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40020010 	.word	0x40020010
 80038bc:	40020028 	.word	0x40020028
 80038c0:	40020040 	.word	0x40020040
 80038c4:	40020058 	.word	0x40020058
 80038c8:	40020070 	.word	0x40020070
 80038cc:	40020088 	.word	0x40020088
 80038d0:	400200a0 	.word	0x400200a0
 80038d4:	400200b8 	.word	0x400200b8
 80038d8:	40020410 	.word	0x40020410
 80038dc:	40020428 	.word	0x40020428
 80038e0:	40020440 	.word	0x40020440
 80038e4:	40020458 	.word	0x40020458
 80038e8:	40020470 	.word	0x40020470
 80038ec:	40020488 	.word	0x40020488
 80038f0:	400204a0 	.word	0x400204a0
 80038f4:	400204b8 	.word	0x400204b8
 80038f8:	58025408 	.word	0x58025408
 80038fc:	5802541c 	.word	0x5802541c
 8003900:	58025430 	.word	0x58025430
 8003904:	58025444 	.word	0x58025444
 8003908:	58025458 	.word	0x58025458
 800390c:	5802546c 	.word	0x5802546c
 8003910:	58025480 	.word	0x58025480
 8003914:	58025494 	.word	0x58025494

08003918 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003924:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <HAL_DMA_IRQHandler+0x1ac>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a67      	ldr	r2, [pc, #412]	; (8003ac8 <HAL_DMA_IRQHandler+0x1b0>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	0a9b      	lsrs	r3, r3, #10
 8003930:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a5f      	ldr	r2, [pc, #380]	; (8003acc <HAL_DMA_IRQHandler+0x1b4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d04a      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5d      	ldr	r2, [pc, #372]	; (8003ad0 <HAL_DMA_IRQHandler+0x1b8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d045      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5c      	ldr	r2, [pc, #368]	; (8003ad4 <HAL_DMA_IRQHandler+0x1bc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d040      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a5a      	ldr	r2, [pc, #360]	; (8003ad8 <HAL_DMA_IRQHandler+0x1c0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d03b      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a59      	ldr	r2, [pc, #356]	; (8003adc <HAL_DMA_IRQHandler+0x1c4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d036      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a57      	ldr	r2, [pc, #348]	; (8003ae0 <HAL_DMA_IRQHandler+0x1c8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d031      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a56      	ldr	r2, [pc, #344]	; (8003ae4 <HAL_DMA_IRQHandler+0x1cc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d02c      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a54      	ldr	r2, [pc, #336]	; (8003ae8 <HAL_DMA_IRQHandler+0x1d0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d027      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a53      	ldr	r2, [pc, #332]	; (8003aec <HAL_DMA_IRQHandler+0x1d4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d022      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a51      	ldr	r2, [pc, #324]	; (8003af0 <HAL_DMA_IRQHandler+0x1d8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01d      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a50      	ldr	r2, [pc, #320]	; (8003af4 <HAL_DMA_IRQHandler+0x1dc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d018      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a4e      	ldr	r2, [pc, #312]	; (8003af8 <HAL_DMA_IRQHandler+0x1e0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a4d      	ldr	r2, [pc, #308]	; (8003afc <HAL_DMA_IRQHandler+0x1e4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00e      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a4b      	ldr	r2, [pc, #300]	; (8003b00 <HAL_DMA_IRQHandler+0x1e8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a4a      	ldr	r2, [pc, #296]	; (8003b04 <HAL_DMA_IRQHandler+0x1ec>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_DMA_IRQHandler+0xd2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a48      	ldr	r2, [pc, #288]	; (8003b08 <HAL_DMA_IRQHandler+0x1f0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_DMA_IRQHandler+0xd6>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_DMA_IRQHandler+0xd8>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 842b 	beq.w	800424c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fa:	f003 031f 	and.w	r3, r3, #31
 80039fe:	2208      	movs	r2, #8
 8003a00:	409a      	lsls	r2, r3
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80a2 	beq.w	8003b50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2e      	ldr	r2, [pc, #184]	; (8003acc <HAL_DMA_IRQHandler+0x1b4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d04a      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2d      	ldr	r2, [pc, #180]	; (8003ad0 <HAL_DMA_IRQHandler+0x1b8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d045      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <HAL_DMA_IRQHandler+0x1bc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d040      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2a      	ldr	r2, [pc, #168]	; (8003ad8 <HAL_DMA_IRQHandler+0x1c0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d03b      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a28      	ldr	r2, [pc, #160]	; (8003adc <HAL_DMA_IRQHandler+0x1c4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d036      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a27      	ldr	r2, [pc, #156]	; (8003ae0 <HAL_DMA_IRQHandler+0x1c8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d031      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <HAL_DMA_IRQHandler+0x1cc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02c      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a24      	ldr	r2, [pc, #144]	; (8003ae8 <HAL_DMA_IRQHandler+0x1d0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d027      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a22      	ldr	r2, [pc, #136]	; (8003aec <HAL_DMA_IRQHandler+0x1d4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d022      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a21      	ldr	r2, [pc, #132]	; (8003af0 <HAL_DMA_IRQHandler+0x1d8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d01d      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1f      	ldr	r2, [pc, #124]	; (8003af4 <HAL_DMA_IRQHandler+0x1dc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d018      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1e      	ldr	r2, [pc, #120]	; (8003af8 <HAL_DMA_IRQHandler+0x1e0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1c      	ldr	r2, [pc, #112]	; (8003afc <HAL_DMA_IRQHandler+0x1e4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1b      	ldr	r2, [pc, #108]	; (8003b00 <HAL_DMA_IRQHandler+0x1e8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a19      	ldr	r2, [pc, #100]	; (8003b04 <HAL_DMA_IRQHandler+0x1ec>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_IRQHandler+0x194>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a18      	ldr	r2, [pc, #96]	; (8003b08 <HAL_DMA_IRQHandler+0x1f0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d12f      	bne.n	8003b0c <HAL_DMA_IRQHandler+0x1f4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf14      	ite	ne
 8003aba:	2301      	movne	r3, #1
 8003abc:	2300      	moveq	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	e02e      	b.n	8003b20 <HAL_DMA_IRQHandler+0x208>
 8003ac2:	bf00      	nop
 8003ac4:	2400000c 	.word	0x2400000c
 8003ac8:	1b4e81b5 	.word	0x1b4e81b5
 8003acc:	40020010 	.word	0x40020010
 8003ad0:	40020028 	.word	0x40020028
 8003ad4:	40020040 	.word	0x40020040
 8003ad8:	40020058 	.word	0x40020058
 8003adc:	40020070 	.word	0x40020070
 8003ae0:	40020088 	.word	0x40020088
 8003ae4:	400200a0 	.word	0x400200a0
 8003ae8:	400200b8 	.word	0x400200b8
 8003aec:	40020410 	.word	0x40020410
 8003af0:	40020428 	.word	0x40020428
 8003af4:	40020440 	.word	0x40020440
 8003af8:	40020458 	.word	0x40020458
 8003afc:	40020470 	.word	0x40020470
 8003b00:	40020488 	.word	0x40020488
 8003b04:	400204a0 	.word	0x400204a0
 8003b08:	400204b8 	.word	0x400204b8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d015      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b48:	f043 0201 	orr.w	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d06e      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a69      	ldr	r2, [pc, #420]	; (8003d10 <HAL_DMA_IRQHandler+0x3f8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d04a      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a67      	ldr	r2, [pc, #412]	; (8003d14 <HAL_DMA_IRQHandler+0x3fc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d045      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a66      	ldr	r2, [pc, #408]	; (8003d18 <HAL_DMA_IRQHandler+0x400>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d040      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a64      	ldr	r2, [pc, #400]	; (8003d1c <HAL_DMA_IRQHandler+0x404>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d03b      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a63      	ldr	r2, [pc, #396]	; (8003d20 <HAL_DMA_IRQHandler+0x408>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d036      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a61      	ldr	r2, [pc, #388]	; (8003d24 <HAL_DMA_IRQHandler+0x40c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d031      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a60      	ldr	r2, [pc, #384]	; (8003d28 <HAL_DMA_IRQHandler+0x410>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d02c      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a5e      	ldr	r2, [pc, #376]	; (8003d2c <HAL_DMA_IRQHandler+0x414>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d027      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a5d      	ldr	r2, [pc, #372]	; (8003d30 <HAL_DMA_IRQHandler+0x418>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d022      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a5b      	ldr	r2, [pc, #364]	; (8003d34 <HAL_DMA_IRQHandler+0x41c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01d      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a5a      	ldr	r2, [pc, #360]	; (8003d38 <HAL_DMA_IRQHandler+0x420>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d018      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a58      	ldr	r2, [pc, #352]	; (8003d3c <HAL_DMA_IRQHandler+0x424>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a57      	ldr	r2, [pc, #348]	; (8003d40 <HAL_DMA_IRQHandler+0x428>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a55      	ldr	r2, [pc, #340]	; (8003d44 <HAL_DMA_IRQHandler+0x42c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a54      	ldr	r2, [pc, #336]	; (8003d48 <HAL_DMA_IRQHandler+0x430>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x2ee>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a52      	ldr	r2, [pc, #328]	; (8003d4c <HAL_DMA_IRQHandler+0x434>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10a      	bne.n	8003c1c <HAL_DMA_IRQHandler+0x304>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf14      	ite	ne
 8003c14:	2301      	movne	r3, #1
 8003c16:	2300      	moveq	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e003      	b.n	8003c24 <HAL_DMA_IRQHandler+0x30c>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00d      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2201      	movs	r2, #1
 8003c32:	409a      	lsls	r2, r3
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3c:	f043 0202 	orr.w	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 808f 	beq.w	8003d78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <HAL_DMA_IRQHandler+0x3f8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d04a      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	; (8003d14 <HAL_DMA_IRQHandler+0x3fc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d045      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a29      	ldr	r2, [pc, #164]	; (8003d18 <HAL_DMA_IRQHandler+0x400>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d040      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a27      	ldr	r2, [pc, #156]	; (8003d1c <HAL_DMA_IRQHandler+0x404>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d03b      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <HAL_DMA_IRQHandler+0x408>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d036      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a24      	ldr	r2, [pc, #144]	; (8003d24 <HAL_DMA_IRQHandler+0x40c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d031      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <HAL_DMA_IRQHandler+0x410>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d02c      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <HAL_DMA_IRQHandler+0x414>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d027      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a20      	ldr	r2, [pc, #128]	; (8003d30 <HAL_DMA_IRQHandler+0x418>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a1e      	ldr	r2, [pc, #120]	; (8003d34 <HAL_DMA_IRQHandler+0x41c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01d      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <HAL_DMA_IRQHandler+0x420>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d018      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <HAL_DMA_IRQHandler+0x424>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1a      	ldr	r2, [pc, #104]	; (8003d40 <HAL_DMA_IRQHandler+0x428>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00e      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <HAL_DMA_IRQHandler+0x42c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d009      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <HAL_DMA_IRQHandler+0x430>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x3e2>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <HAL_DMA_IRQHandler+0x434>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d12a      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x438>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf14      	ite	ne
 8003d08:	2301      	movne	r3, #1
 8003d0a:	2300      	moveq	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e023      	b.n	8003d58 <HAL_DMA_IRQHandler+0x440>
 8003d10:	40020010 	.word	0x40020010
 8003d14:	40020028 	.word	0x40020028
 8003d18:	40020040 	.word	0x40020040
 8003d1c:	40020058 	.word	0x40020058
 8003d20:	40020070 	.word	0x40020070
 8003d24:	40020088 	.word	0x40020088
 8003d28:	400200a0 	.word	0x400200a0
 8003d2c:	400200b8 	.word	0x400200b8
 8003d30:	40020410 	.word	0x40020410
 8003d34:	40020428 	.word	0x40020428
 8003d38:	40020440 	.word	0x40020440
 8003d3c:	40020458 	.word	0x40020458
 8003d40:	40020470 	.word	0x40020470
 8003d44:	40020488 	.word	0x40020488
 8003d48:	400204a0 	.word	0x400204a0
 8003d4c:	400204b8 	.word	0x400204b8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2300      	movs	r3, #0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00d      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2204      	movs	r2, #4
 8003d66:	409a      	lsls	r2, r3
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d70:	f043 0204 	orr.w	r2, r3, #4
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2210      	movs	r2, #16
 8003d82:	409a      	lsls	r2, r3
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80a6 	beq.w	8003eda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a85      	ldr	r2, [pc, #532]	; (8003fa8 <HAL_DMA_IRQHandler+0x690>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d04a      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a83      	ldr	r2, [pc, #524]	; (8003fac <HAL_DMA_IRQHandler+0x694>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d045      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a82      	ldr	r2, [pc, #520]	; (8003fb0 <HAL_DMA_IRQHandler+0x698>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d040      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a80      	ldr	r2, [pc, #512]	; (8003fb4 <HAL_DMA_IRQHandler+0x69c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d03b      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7f      	ldr	r2, [pc, #508]	; (8003fb8 <HAL_DMA_IRQHandler+0x6a0>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d036      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a7d      	ldr	r2, [pc, #500]	; (8003fbc <HAL_DMA_IRQHandler+0x6a4>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d031      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a7c      	ldr	r2, [pc, #496]	; (8003fc0 <HAL_DMA_IRQHandler+0x6a8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d02c      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a7a      	ldr	r2, [pc, #488]	; (8003fc4 <HAL_DMA_IRQHandler+0x6ac>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d027      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a79      	ldr	r2, [pc, #484]	; (8003fc8 <HAL_DMA_IRQHandler+0x6b0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a77      	ldr	r2, [pc, #476]	; (8003fcc <HAL_DMA_IRQHandler+0x6b4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d01d      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a76      	ldr	r2, [pc, #472]	; (8003fd0 <HAL_DMA_IRQHandler+0x6b8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a74      	ldr	r2, [pc, #464]	; (8003fd4 <HAL_DMA_IRQHandler+0x6bc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a73      	ldr	r2, [pc, #460]	; (8003fd8 <HAL_DMA_IRQHandler+0x6c0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a71      	ldr	r2, [pc, #452]	; (8003fdc <HAL_DMA_IRQHandler+0x6c4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a70      	ldr	r2, [pc, #448]	; (8003fe0 <HAL_DMA_IRQHandler+0x6c8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x516>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a6e      	ldr	r2, [pc, #440]	; (8003fe4 <HAL_DMA_IRQHandler+0x6cc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10a      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x52c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e009      	b.n	8003e58 <HAL_DMA_IRQHandler+0x540>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d03e      	beq.n	8003eda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2210      	movs	r2, #16
 8003e66:	409a      	lsls	r2, r3
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d018      	beq.n	8003eac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d108      	bne.n	8003e9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d024      	beq.n	8003eda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	4798      	blx	r3
 8003e98:	e01f      	b.n	8003eda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01b      	beq.n	8003eda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	4798      	blx	r3
 8003eaa:	e016      	b.n	8003eda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0208 	bic.w	r2, r2, #8
 8003ec8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8110 	beq.w	8004110 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	; (8003fa8 <HAL_DMA_IRQHandler+0x690>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d04a      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <HAL_DMA_IRQHandler+0x694>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d045      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <HAL_DMA_IRQHandler+0x698>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d040      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <HAL_DMA_IRQHandler+0x69c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d03b      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a26      	ldr	r2, [pc, #152]	; (8003fb8 <HAL_DMA_IRQHandler+0x6a0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d036      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <HAL_DMA_IRQHandler+0x6a4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d031      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <HAL_DMA_IRQHandler+0x6a8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02c      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a22      	ldr	r2, [pc, #136]	; (8003fc4 <HAL_DMA_IRQHandler+0x6ac>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d027      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a20      	ldr	r2, [pc, #128]	; (8003fc8 <HAL_DMA_IRQHandler+0x6b0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d022      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a1f      	ldr	r2, [pc, #124]	; (8003fcc <HAL_DMA_IRQHandler+0x6b4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d01d      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <HAL_DMA_IRQHandler+0x6b8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d018      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <HAL_DMA_IRQHandler+0x6bc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <HAL_DMA_IRQHandler+0x6c0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_DMA_IRQHandler+0x6c4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a17      	ldr	r2, [pc, #92]	; (8003fe0 <HAL_DMA_IRQHandler+0x6c8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d004      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x678>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <HAL_DMA_IRQHandler+0x6cc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d12b      	bne.n	8003fe8 <HAL_DMA_IRQHandler+0x6d0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	e02a      	b.n	8003ffc <HAL_DMA_IRQHandler+0x6e4>
 8003fa6:	bf00      	nop
 8003fa8:	40020010 	.word	0x40020010
 8003fac:	40020028 	.word	0x40020028
 8003fb0:	40020040 	.word	0x40020040
 8003fb4:	40020058 	.word	0x40020058
 8003fb8:	40020070 	.word	0x40020070
 8003fbc:	40020088 	.word	0x40020088
 8003fc0:	400200a0 	.word	0x400200a0
 8003fc4:	400200b8 	.word	0x400200b8
 8003fc8:	40020410 	.word	0x40020410
 8003fcc:	40020428 	.word	0x40020428
 8003fd0:	40020440 	.word	0x40020440
 8003fd4:	40020458 	.word	0x40020458
 8003fd8:	40020470 	.word	0x40020470
 8003fdc:	40020488 	.word	0x40020488
 8003fe0:	400204a0 	.word	0x400204a0
 8003fe4:	400204b8 	.word	0x400204b8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf14      	ite	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	2300      	moveq	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8087 	beq.w	8004110 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	2220      	movs	r2, #32
 800400c:	409a      	lsls	r2, r3
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b04      	cmp	r3, #4
 800401c:	d139      	bne.n	8004092 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0216 	bic.w	r2, r2, #22
 800402c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800403c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <HAL_DMA_IRQHandler+0x736>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0208 	bic.w	r2, r2, #8
 800405c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	223f      	movs	r2, #63	; 0x3f
 8004068:	409a      	lsls	r2, r3
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 834a 	beq.w	800471c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
          }
          return;
 8004090:	e344      	b.n	800471c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d018      	beq.n	80040d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d108      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d02c      	beq.n	8004110 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	4798      	blx	r3
 80040be:	e027      	b.n	8004110 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d023      	beq.n	8004110 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
 80040d0:	e01e      	b.n	8004110 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10f      	bne.n	8004100 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0210 	bic.w	r2, r2, #16
 80040ee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8306 	beq.w	8004726 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8088 	beq.w	8004238 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2204      	movs	r2, #4
 800412c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a7a      	ldr	r2, [pc, #488]	; (8004320 <HAL_DMA_IRQHandler+0xa08>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d04a      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a79      	ldr	r2, [pc, #484]	; (8004324 <HAL_DMA_IRQHandler+0xa0c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d045      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a77      	ldr	r2, [pc, #476]	; (8004328 <HAL_DMA_IRQHandler+0xa10>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d040      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a76      	ldr	r2, [pc, #472]	; (800432c <HAL_DMA_IRQHandler+0xa14>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d03b      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a74      	ldr	r2, [pc, #464]	; (8004330 <HAL_DMA_IRQHandler+0xa18>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d036      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a73      	ldr	r2, [pc, #460]	; (8004334 <HAL_DMA_IRQHandler+0xa1c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d031      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a71      	ldr	r2, [pc, #452]	; (8004338 <HAL_DMA_IRQHandler+0xa20>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d02c      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a70      	ldr	r2, [pc, #448]	; (800433c <HAL_DMA_IRQHandler+0xa24>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d027      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a6e      	ldr	r2, [pc, #440]	; (8004340 <HAL_DMA_IRQHandler+0xa28>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d022      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6d      	ldr	r2, [pc, #436]	; (8004344 <HAL_DMA_IRQHandler+0xa2c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d01d      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a6b      	ldr	r2, [pc, #428]	; (8004348 <HAL_DMA_IRQHandler+0xa30>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d018      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a6a      	ldr	r2, [pc, #424]	; (800434c <HAL_DMA_IRQHandler+0xa34>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a68      	ldr	r2, [pc, #416]	; (8004350 <HAL_DMA_IRQHandler+0xa38>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00e      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a67      	ldr	r2, [pc, #412]	; (8004354 <HAL_DMA_IRQHandler+0xa3c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d009      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a65      	ldr	r2, [pc, #404]	; (8004358 <HAL_DMA_IRQHandler+0xa40>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x8b8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a64      	ldr	r2, [pc, #400]	; (800435c <HAL_DMA_IRQHandler+0xa44>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d108      	bne.n	80041e2 <HAL_DMA_IRQHandler+0x8ca>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e007      	b.n	80041f2 <HAL_DMA_IRQHandler+0x8da>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3301      	adds	r3, #1
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d307      	bcc.n	800420e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f2      	bne.n	80041f2 <HAL_DMA_IRQHandler+0x8da>
 800420c:	e000      	b.n	8004210 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800420e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2203      	movs	r2, #3
 800422a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800422e:	e003      	b.n	8004238 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 8272 	beq.w	8004726 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4798      	blx	r3
 800424a:	e26c      	b.n	8004726 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a43      	ldr	r2, [pc, #268]	; (8004360 <HAL_DMA_IRQHandler+0xa48>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d022      	beq.n	800429c <HAL_DMA_IRQHandler+0x984>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a42      	ldr	r2, [pc, #264]	; (8004364 <HAL_DMA_IRQHandler+0xa4c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d01d      	beq.n	800429c <HAL_DMA_IRQHandler+0x984>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a40      	ldr	r2, [pc, #256]	; (8004368 <HAL_DMA_IRQHandler+0xa50>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d018      	beq.n	800429c <HAL_DMA_IRQHandler+0x984>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3f      	ldr	r2, [pc, #252]	; (800436c <HAL_DMA_IRQHandler+0xa54>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <HAL_DMA_IRQHandler+0x984>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a3d      	ldr	r2, [pc, #244]	; (8004370 <HAL_DMA_IRQHandler+0xa58>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <HAL_DMA_IRQHandler+0x984>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a3c      	ldr	r2, [pc, #240]	; (8004374 <HAL_DMA_IRQHandler+0xa5c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_DMA_IRQHandler+0x984>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a3a      	ldr	r2, [pc, #232]	; (8004378 <HAL_DMA_IRQHandler+0xa60>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_DMA_IRQHandler+0x984>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a39      	ldr	r2, [pc, #228]	; (800437c <HAL_DMA_IRQHandler+0xa64>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d101      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x988>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_DMA_IRQHandler+0x98a>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 823f 	beq.w	8004726 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2204      	movs	r2, #4
 80042ba:	409a      	lsls	r2, r3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	4013      	ands	r3, r2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80cd 	beq.w	8004460 <HAL_DMA_IRQHandler+0xb48>
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80c7 	beq.w	8004460 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2204      	movs	r2, #4
 80042dc:	409a      	lsls	r2, r3
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d049      	beq.n	8004380 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8210 	beq.w	8004720 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004308:	e20a      	b.n	8004720 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8206 	beq.w	8004720 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800431c:	e200      	b.n	8004720 <HAL_DMA_IRQHandler+0xe08>
 800431e:	bf00      	nop
 8004320:	40020010 	.word	0x40020010
 8004324:	40020028 	.word	0x40020028
 8004328:	40020040 	.word	0x40020040
 800432c:	40020058 	.word	0x40020058
 8004330:	40020070 	.word	0x40020070
 8004334:	40020088 	.word	0x40020088
 8004338:	400200a0 	.word	0x400200a0
 800433c:	400200b8 	.word	0x400200b8
 8004340:	40020410 	.word	0x40020410
 8004344:	40020428 	.word	0x40020428
 8004348:	40020440 	.word	0x40020440
 800434c:	40020458 	.word	0x40020458
 8004350:	40020470 	.word	0x40020470
 8004354:	40020488 	.word	0x40020488
 8004358:	400204a0 	.word	0x400204a0
 800435c:	400204b8 	.word	0x400204b8
 8004360:	58025408 	.word	0x58025408
 8004364:	5802541c 	.word	0x5802541c
 8004368:	58025430 	.word	0x58025430
 800436c:	58025444 	.word	0x58025444
 8004370:	58025458 	.word	0x58025458
 8004374:	5802546c 	.word	0x5802546c
 8004378:	58025480 	.word	0x58025480
 800437c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b00      	cmp	r3, #0
 8004388:	d160      	bne.n	800444c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a8c      	ldr	r2, [pc, #560]	; (80045c0 <HAL_DMA_IRQHandler+0xca8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d04a      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a8a      	ldr	r2, [pc, #552]	; (80045c4 <HAL_DMA_IRQHandler+0xcac>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d045      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a89      	ldr	r2, [pc, #548]	; (80045c8 <HAL_DMA_IRQHandler+0xcb0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d040      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a87      	ldr	r2, [pc, #540]	; (80045cc <HAL_DMA_IRQHandler+0xcb4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d03b      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a86      	ldr	r2, [pc, #536]	; (80045d0 <HAL_DMA_IRQHandler+0xcb8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d036      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a84      	ldr	r2, [pc, #528]	; (80045d4 <HAL_DMA_IRQHandler+0xcbc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d031      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a83      	ldr	r2, [pc, #524]	; (80045d8 <HAL_DMA_IRQHandler+0xcc0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d02c      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a81      	ldr	r2, [pc, #516]	; (80045dc <HAL_DMA_IRQHandler+0xcc4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d027      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a80      	ldr	r2, [pc, #512]	; (80045e0 <HAL_DMA_IRQHandler+0xcc8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d022      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a7e      	ldr	r2, [pc, #504]	; (80045e4 <HAL_DMA_IRQHandler+0xccc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01d      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a7d      	ldr	r2, [pc, #500]	; (80045e8 <HAL_DMA_IRQHandler+0xcd0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d018      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a7b      	ldr	r2, [pc, #492]	; (80045ec <HAL_DMA_IRQHandler+0xcd4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d013      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a7a      	ldr	r2, [pc, #488]	; (80045f0 <HAL_DMA_IRQHandler+0xcd8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d00e      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a78      	ldr	r2, [pc, #480]	; (80045f4 <HAL_DMA_IRQHandler+0xcdc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d009      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a77      	ldr	r2, [pc, #476]	; (80045f8 <HAL_DMA_IRQHandler+0xce0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d004      	beq.n	800442a <HAL_DMA_IRQHandler+0xb12>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a75      	ldr	r2, [pc, #468]	; (80045fc <HAL_DMA_IRQHandler+0xce4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d108      	bne.n	800443c <HAL_DMA_IRQHandler+0xb24>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0208 	bic.w	r2, r2, #8
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	e007      	b.n	800444c <HAL_DMA_IRQHandler+0xb34>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8165 	beq.w	8004720 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800445e:	e15f      	b.n	8004720 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	2202      	movs	r2, #2
 800446a:	409a      	lsls	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	4013      	ands	r3, r2
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80c5 	beq.w	8004600 <HAL_DMA_IRQHandler+0xce8>
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80bf 	beq.w	8004600 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2202      	movs	r2, #2
 800448c:	409a      	lsls	r2, r3
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d018      	beq.n	80044ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 813a 	beq.w	8004724 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044b8:	e134      	b.n	8004724 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8130 	beq.w	8004724 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044cc:	e12a      	b.n	8004724 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d168      	bne.n	80045aa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a38      	ldr	r2, [pc, #224]	; (80045c0 <HAL_DMA_IRQHandler+0xca8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d04a      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a37      	ldr	r2, [pc, #220]	; (80045c4 <HAL_DMA_IRQHandler+0xcac>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d045      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a35      	ldr	r2, [pc, #212]	; (80045c8 <HAL_DMA_IRQHandler+0xcb0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d040      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a34      	ldr	r2, [pc, #208]	; (80045cc <HAL_DMA_IRQHandler+0xcb4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d03b      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a32      	ldr	r2, [pc, #200]	; (80045d0 <HAL_DMA_IRQHandler+0xcb8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d036      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a31      	ldr	r2, [pc, #196]	; (80045d4 <HAL_DMA_IRQHandler+0xcbc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d031      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2f      	ldr	r2, [pc, #188]	; (80045d8 <HAL_DMA_IRQHandler+0xcc0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d02c      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2e      	ldr	r2, [pc, #184]	; (80045dc <HAL_DMA_IRQHandler+0xcc4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d027      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <HAL_DMA_IRQHandler+0xcc8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d022      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <HAL_DMA_IRQHandler+0xccc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d01d      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <HAL_DMA_IRQHandler+0xcd0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d018      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a28      	ldr	r2, [pc, #160]	; (80045ec <HAL_DMA_IRQHandler+0xcd4>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a26      	ldr	r2, [pc, #152]	; (80045f0 <HAL_DMA_IRQHandler+0xcd8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00e      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a25      	ldr	r2, [pc, #148]	; (80045f4 <HAL_DMA_IRQHandler+0xcdc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a23      	ldr	r2, [pc, #140]	; (80045f8 <HAL_DMA_IRQHandler+0xce0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_DMA_IRQHandler+0xc60>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a22      	ldr	r2, [pc, #136]	; (80045fc <HAL_DMA_IRQHandler+0xce4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d108      	bne.n	800458a <HAL_DMA_IRQHandler+0xc72>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0214 	bic.w	r2, r2, #20
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e007      	b.n	800459a <HAL_DMA_IRQHandler+0xc82>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 020a 	bic.w	r2, r2, #10
 8004598:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 80b8 	beq.w	8004724 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045bc:	e0b2      	b.n	8004724 <HAL_DMA_IRQHandler+0xe0c>
 80045be:	bf00      	nop
 80045c0:	40020010 	.word	0x40020010
 80045c4:	40020028 	.word	0x40020028
 80045c8:	40020040 	.word	0x40020040
 80045cc:	40020058 	.word	0x40020058
 80045d0:	40020070 	.word	0x40020070
 80045d4:	40020088 	.word	0x40020088
 80045d8:	400200a0 	.word	0x400200a0
 80045dc:	400200b8 	.word	0x400200b8
 80045e0:	40020410 	.word	0x40020410
 80045e4:	40020428 	.word	0x40020428
 80045e8:	40020440 	.word	0x40020440
 80045ec:	40020458 	.word	0x40020458
 80045f0:	40020470 	.word	0x40020470
 80045f4:	40020488 	.word	0x40020488
 80045f8:	400204a0 	.word	0x400204a0
 80045fc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2208      	movs	r2, #8
 800460a:	409a      	lsls	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4013      	ands	r3, r2
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8088 	beq.w	8004726 <HAL_DMA_IRQHandler+0xe0e>
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8082 	beq.w	8004726 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a41      	ldr	r2, [pc, #260]	; (800472c <HAL_DMA_IRQHandler+0xe14>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d04a      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a3f      	ldr	r2, [pc, #252]	; (8004730 <HAL_DMA_IRQHandler+0xe18>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d045      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3e      	ldr	r2, [pc, #248]	; (8004734 <HAL_DMA_IRQHandler+0xe1c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d040      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <HAL_DMA_IRQHandler+0xe20>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d03b      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a3b      	ldr	r2, [pc, #236]	; (800473c <HAL_DMA_IRQHandler+0xe24>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d036      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a39      	ldr	r2, [pc, #228]	; (8004740 <HAL_DMA_IRQHandler+0xe28>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a38      	ldr	r2, [pc, #224]	; (8004744 <HAL_DMA_IRQHandler+0xe2c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d02c      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a36      	ldr	r2, [pc, #216]	; (8004748 <HAL_DMA_IRQHandler+0xe30>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d027      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a35      	ldr	r2, [pc, #212]	; (800474c <HAL_DMA_IRQHandler+0xe34>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a33      	ldr	r2, [pc, #204]	; (8004750 <HAL_DMA_IRQHandler+0xe38>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01d      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a32      	ldr	r2, [pc, #200]	; (8004754 <HAL_DMA_IRQHandler+0xe3c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a30      	ldr	r2, [pc, #192]	; (8004758 <HAL_DMA_IRQHandler+0xe40>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2f      	ldr	r2, [pc, #188]	; (800475c <HAL_DMA_IRQHandler+0xe44>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a2d      	ldr	r2, [pc, #180]	; (8004760 <HAL_DMA_IRQHandler+0xe48>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a2c      	ldr	r2, [pc, #176]	; (8004764 <HAL_DMA_IRQHandler+0xe4c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_DMA_IRQHandler+0xdaa>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a2a      	ldr	r2, [pc, #168]	; (8004768 <HAL_DMA_IRQHandler+0xe50>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d108      	bne.n	80046d4 <HAL_DMA_IRQHandler+0xdbc>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 021c 	bic.w	r2, r2, #28
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e007      	b.n	80046e4 <HAL_DMA_IRQHandler+0xdcc>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 020e 	bic.w	r2, r2, #14
 80046e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e8:	f003 031f 	and.w	r3, r3, #31
 80046ec:	2201      	movs	r2, #1
 80046ee:	409a      	lsls	r2, r3
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
 800471a:	e004      	b.n	8004726 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800471c:	bf00      	nop
 800471e:	e002      	b.n	8004726 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004724:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004726:	3728      	adds	r7, #40	; 0x28
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40020010 	.word	0x40020010
 8004730:	40020028 	.word	0x40020028
 8004734:	40020040 	.word	0x40020040
 8004738:	40020058 	.word	0x40020058
 800473c:	40020070 	.word	0x40020070
 8004740:	40020088 	.word	0x40020088
 8004744:	400200a0 	.word	0x400200a0
 8004748:	400200b8 	.word	0x400200b8
 800474c:	40020410 	.word	0x40020410
 8004750:	40020428 	.word	0x40020428
 8004754:	40020440 	.word	0x40020440
 8004758:	40020458 	.word	0x40020458
 800475c:	40020470 	.word	0x40020470
 8004760:	40020488 	.word	0x40020488
 8004764:	400204a0 	.word	0x400204a0
 8004768:	400204b8 	.word	0x400204b8

0800476c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800477a:	b2db      	uxtb	r3, r3
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a84      	ldr	r2, [pc, #528]	; (80049d0 <DMA_SetConfig+0x230>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d072      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a82      	ldr	r2, [pc, #520]	; (80049d4 <DMA_SetConfig+0x234>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d06d      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a81      	ldr	r2, [pc, #516]	; (80049d8 <DMA_SetConfig+0x238>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d068      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a7f      	ldr	r2, [pc, #508]	; (80049dc <DMA_SetConfig+0x23c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d063      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a7e      	ldr	r2, [pc, #504]	; (80049e0 <DMA_SetConfig+0x240>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d05e      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a7c      	ldr	r2, [pc, #496]	; (80049e4 <DMA_SetConfig+0x244>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d059      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7b      	ldr	r2, [pc, #492]	; (80049e8 <DMA_SetConfig+0x248>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d054      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a79      	ldr	r2, [pc, #484]	; (80049ec <DMA_SetConfig+0x24c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d04f      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a78      	ldr	r2, [pc, #480]	; (80049f0 <DMA_SetConfig+0x250>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d04a      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a76      	ldr	r2, [pc, #472]	; (80049f4 <DMA_SetConfig+0x254>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d045      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a75      	ldr	r2, [pc, #468]	; (80049f8 <DMA_SetConfig+0x258>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d040      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a73      	ldr	r2, [pc, #460]	; (80049fc <DMA_SetConfig+0x25c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d03b      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a72      	ldr	r2, [pc, #456]	; (8004a00 <DMA_SetConfig+0x260>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d036      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a70      	ldr	r2, [pc, #448]	; (8004a04 <DMA_SetConfig+0x264>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d031      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6f      	ldr	r2, [pc, #444]	; (8004a08 <DMA_SetConfig+0x268>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d02c      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6d      	ldr	r2, [pc, #436]	; (8004a0c <DMA_SetConfig+0x26c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d027      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a6c      	ldr	r2, [pc, #432]	; (8004a10 <DMA_SetConfig+0x270>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a6a      	ldr	r2, [pc, #424]	; (8004a14 <DMA_SetConfig+0x274>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01d      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a69      	ldr	r2, [pc, #420]	; (8004a18 <DMA_SetConfig+0x278>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a67      	ldr	r2, [pc, #412]	; (8004a1c <DMA_SetConfig+0x27c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a66      	ldr	r2, [pc, #408]	; (8004a20 <DMA_SetConfig+0x280>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <DMA_SetConfig+0x10a>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a64      	ldr	r2, [pc, #400]	; (8004a24 <DMA_SetConfig+0x284>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <DMA_SetConfig+0x10a>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a63      	ldr	r2, [pc, #396]	; (8004a28 <DMA_SetConfig+0x288>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <DMA_SetConfig+0x10a>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a61      	ldr	r2, [pc, #388]	; (8004a2c <DMA_SetConfig+0x28c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d101      	bne.n	80048ae <DMA_SetConfig+0x10e>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <DMA_SetConfig+0x110>
 80048ae:	2300      	movs	r3, #0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80048bc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048ce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3e      	ldr	r2, [pc, #248]	; (80049d0 <DMA_SetConfig+0x230>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d04a      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3d      	ldr	r2, [pc, #244]	; (80049d4 <DMA_SetConfig+0x234>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d045      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a3b      	ldr	r2, [pc, #236]	; (80049d8 <DMA_SetConfig+0x238>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d040      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3a      	ldr	r2, [pc, #232]	; (80049dc <DMA_SetConfig+0x23c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d03b      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <DMA_SetConfig+0x240>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d036      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a37      	ldr	r2, [pc, #220]	; (80049e4 <DMA_SetConfig+0x244>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d031      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a35      	ldr	r2, [pc, #212]	; (80049e8 <DMA_SetConfig+0x248>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d02c      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a34      	ldr	r2, [pc, #208]	; (80049ec <DMA_SetConfig+0x24c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d027      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a32      	ldr	r2, [pc, #200]	; (80049f0 <DMA_SetConfig+0x250>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d022      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a31      	ldr	r2, [pc, #196]	; (80049f4 <DMA_SetConfig+0x254>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d01d      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2f      	ldr	r2, [pc, #188]	; (80049f8 <DMA_SetConfig+0x258>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d018      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <DMA_SetConfig+0x25c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2c      	ldr	r2, [pc, #176]	; (8004a00 <DMA_SetConfig+0x260>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00e      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a2b      	ldr	r2, [pc, #172]	; (8004a04 <DMA_SetConfig+0x264>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d009      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <DMA_SetConfig+0x268>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <DMA_SetConfig+0x1d0>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a28      	ldr	r2, [pc, #160]	; (8004a0c <DMA_SetConfig+0x26c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d101      	bne.n	8004974 <DMA_SetConfig+0x1d4>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <DMA_SetConfig+0x1d6>
 8004974:	2300      	movs	r3, #0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d05a      	beq.n	8004a30 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	f003 031f 	and.w	r3, r3, #31
 8004982:	223f      	movs	r2, #63	; 0x3f
 8004984:	409a      	lsls	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004998:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d108      	bne.n	80049bc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049ba:	e087      	b.n	8004acc <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	60da      	str	r2, [r3, #12]
}
 80049cc:	e07e      	b.n	8004acc <DMA_SetConfig+0x32c>
 80049ce:	bf00      	nop
 80049d0:	40020010 	.word	0x40020010
 80049d4:	40020028 	.word	0x40020028
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020058 	.word	0x40020058
 80049e0:	40020070 	.word	0x40020070
 80049e4:	40020088 	.word	0x40020088
 80049e8:	400200a0 	.word	0x400200a0
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	40020440 	.word	0x40020440
 80049fc:	40020458 	.word	0x40020458
 8004a00:	40020470 	.word	0x40020470
 8004a04:	40020488 	.word	0x40020488
 8004a08:	400204a0 	.word	0x400204a0
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	58025408 	.word	0x58025408
 8004a14:	5802541c 	.word	0x5802541c
 8004a18:	58025430 	.word	0x58025430
 8004a1c:	58025444 	.word	0x58025444
 8004a20:	58025458 	.word	0x58025458
 8004a24:	5802546c 	.word	0x5802546c
 8004a28:	58025480 	.word	0x58025480
 8004a2c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <DMA_SetConfig+0x338>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a27      	ldr	r2, [pc, #156]	; (8004adc <DMA_SetConfig+0x33c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <DMA_SetConfig+0x340>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a24      	ldr	r2, [pc, #144]	; (8004ae4 <DMA_SetConfig+0x344>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <DMA_SetConfig+0x348>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a21      	ldr	r2, [pc, #132]	; (8004aec <DMA_SetConfig+0x34c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1f      	ldr	r2, [pc, #124]	; (8004af0 <DMA_SetConfig+0x350>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <DMA_SetConfig+0x2e0>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <DMA_SetConfig+0x354>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d101      	bne.n	8004a84 <DMA_SetConfig+0x2e4>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <DMA_SetConfig+0x2e6>
 8004a84:	2300      	movs	r3, #0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	f003 031f 	and.w	r3, r3, #31
 8004a92:	2201      	movs	r2, #1
 8004a94:	409a      	lsls	r2, r3
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d108      	bne.n	8004abc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	60da      	str	r2, [r3, #12]
}
 8004aba:	e007      	b.n	8004acc <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]
}
 8004acc:	bf00      	nop
 8004ace:	371c      	adds	r7, #28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr
 8004ad8:	58025408 	.word	0x58025408
 8004adc:	5802541c 	.word	0x5802541c
 8004ae0:	58025430 	.word	0x58025430
 8004ae4:	58025444 	.word	0x58025444
 8004ae8:	58025458 	.word	0x58025458
 8004aec:	5802546c 	.word	0x5802546c
 8004af0:	58025480 	.word	0x58025480
 8004af4:	58025494 	.word	0x58025494

08004af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a42      	ldr	r2, [pc, #264]	; (8004c10 <DMA_CalcBaseAndBitshift+0x118>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d04a      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a41      	ldr	r2, [pc, #260]	; (8004c14 <DMA_CalcBaseAndBitshift+0x11c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d045      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <DMA_CalcBaseAndBitshift+0x120>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d040      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a3e      	ldr	r2, [pc, #248]	; (8004c1c <DMA_CalcBaseAndBitshift+0x124>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d03b      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a3c      	ldr	r2, [pc, #240]	; (8004c20 <DMA_CalcBaseAndBitshift+0x128>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d036      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <DMA_CalcBaseAndBitshift+0x12c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d031      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <DMA_CalcBaseAndBitshift+0x130>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d02c      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a38      	ldr	r2, [pc, #224]	; (8004c2c <DMA_CalcBaseAndBitshift+0x134>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d027      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a36      	ldr	r2, [pc, #216]	; (8004c30 <DMA_CalcBaseAndBitshift+0x138>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d022      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a35      	ldr	r2, [pc, #212]	; (8004c34 <DMA_CalcBaseAndBitshift+0x13c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d01d      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <DMA_CalcBaseAndBitshift+0x140>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d018      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a32      	ldr	r2, [pc, #200]	; (8004c3c <DMA_CalcBaseAndBitshift+0x144>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a30      	ldr	r2, [pc, #192]	; (8004c40 <DMA_CalcBaseAndBitshift+0x148>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00e      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2f      	ldr	r2, [pc, #188]	; (8004c44 <DMA_CalcBaseAndBitshift+0x14c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2d      	ldr	r2, [pc, #180]	; (8004c48 <DMA_CalcBaseAndBitshift+0x150>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <DMA_CalcBaseAndBitshift+0xa8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <DMA_CalcBaseAndBitshift+0x154>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <DMA_CalcBaseAndBitshift+0xac>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <DMA_CalcBaseAndBitshift+0xae>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d024      	beq.n	8004bf4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	3b10      	subs	r3, #16
 8004bb2:	4a27      	ldr	r2, [pc, #156]	; (8004c50 <DMA_CalcBaseAndBitshift+0x158>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	4a24      	ldr	r2, [pc, #144]	; (8004c54 <DMA_CalcBaseAndBitshift+0x15c>)
 8004bc4:	5cd3      	ldrb	r3, [r2, r3]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d908      	bls.n	8004be4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4b1f      	ldr	r3, [pc, #124]	; (8004c58 <DMA_CalcBaseAndBitshift+0x160>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	1d1a      	adds	r2, r3, #4
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	659a      	str	r2, [r3, #88]	; 0x58
 8004be2:	e00d      	b.n	8004c00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <DMA_CalcBaseAndBitshift+0x160>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf2:	e005      	b.n	8004c00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40020010 	.word	0x40020010
 8004c14:	40020028 	.word	0x40020028
 8004c18:	40020040 	.word	0x40020040
 8004c1c:	40020058 	.word	0x40020058
 8004c20:	40020070 	.word	0x40020070
 8004c24:	40020088 	.word	0x40020088
 8004c28:	400200a0 	.word	0x400200a0
 8004c2c:	400200b8 	.word	0x400200b8
 8004c30:	40020410 	.word	0x40020410
 8004c34:	40020428 	.word	0x40020428
 8004c38:	40020440 	.word	0x40020440
 8004c3c:	40020458 	.word	0x40020458
 8004c40:	40020470 	.word	0x40020470
 8004c44:	40020488 	.word	0x40020488
 8004c48:	400204a0 	.word	0x400204a0
 8004c4c:	400204b8 	.word	0x400204b8
 8004c50:	aaaaaaab 	.word	0xaaaaaaab
 8004c54:	0800ebe0 	.word	0x0800ebe0
 8004c58:	fffffc00 	.word	0xfffffc00

08004c5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d120      	bne.n	8004cb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d858      	bhi.n	8004d2a <DMA_CheckFifoParam+0xce>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <DMA_CheckFifoParam+0x24>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004c91 	.word	0x08004c91
 8004c84:	08004ca3 	.word	0x08004ca3
 8004c88:	08004c91 	.word	0x08004c91
 8004c8c:	08004d2b 	.word	0x08004d2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d048      	beq.n	8004d2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ca0:	e045      	b.n	8004d2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004caa:	d142      	bne.n	8004d32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cb0:	e03f      	b.n	8004d32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cba:	d123      	bne.n	8004d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d838      	bhi.n	8004d36 <DMA_CheckFifoParam+0xda>
 8004cc4:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <DMA_CheckFifoParam+0x70>)
 8004cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cca:	bf00      	nop
 8004ccc:	08004cdd 	.word	0x08004cdd
 8004cd0:	08004ce3 	.word	0x08004ce3
 8004cd4:	08004cdd 	.word	0x08004cdd
 8004cd8:	08004cf5 	.word	0x08004cf5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
        break;
 8004ce0:	e030      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d025      	beq.n	8004d3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cf2:	e022      	b.n	8004d3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cfc:	d11f      	bne.n	8004d3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004d02:	e01c      	b.n	8004d3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d902      	bls.n	8004d12 <DMA_CheckFifoParam+0xb6>
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d003      	beq.n	8004d18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004d10:	e018      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
        break;
 8004d16:	e015      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
    break;
 8004d28:	e00b      	b.n	8004d42 <DMA_CheckFifoParam+0xe6>
        break;
 8004d2a:	bf00      	nop
 8004d2c:	e00a      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d2e:	bf00      	nop
 8004d30:	e008      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d32:	bf00      	nop
 8004d34:	e006      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d36:	bf00      	nop
 8004d38:	e004      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e002      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <DMA_CheckFifoParam+0xe8>
    break;
 8004d42:	bf00      	nop
    }
  }

  return status;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop

08004d54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a38      	ldr	r2, [pc, #224]	; (8004e48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a36      	ldr	r2, [pc, #216]	; (8004e4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a35      	ldr	r2, [pc, #212]	; (8004e50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a33      	ldr	r2, [pc, #204]	; (8004e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a32      	ldr	r2, [pc, #200]	; (8004e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a30      	ldr	r2, [pc, #192]	; (8004e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a2f      	ldr	r2, [pc, #188]	; (8004e60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d101      	bne.n	8004db6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01a      	beq.n	8004df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	3b08      	subs	r3, #8
 8004dc4:	4a28      	ldr	r2, [pc, #160]	; (8004e68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004de0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 031f 	and.w	r3, r3, #31
 8004de8:	2201      	movs	r2, #1
 8004dea:	409a      	lsls	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004df0:	e024      	b.n	8004e3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	3b10      	subs	r3, #16
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a1c      	ldr	r2, [pc, #112]	; (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d806      	bhi.n	8004e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d902      	bls.n	8004e1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3308      	adds	r3, #8
 8004e18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	461a      	mov	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a16      	ldr	r2, [pc, #88]	; (8004e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004e2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2201      	movs	r2, #1
 8004e36:	409a      	lsls	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	58025408 	.word	0x58025408
 8004e4c:	5802541c 	.word	0x5802541c
 8004e50:	58025430 	.word	0x58025430
 8004e54:	58025444 	.word	0x58025444
 8004e58:	58025458 	.word	0x58025458
 8004e5c:	5802546c 	.word	0x5802546c
 8004e60:	58025480 	.word	0x58025480
 8004e64:	58025494 	.word	0x58025494
 8004e68:	cccccccd 	.word	0xcccccccd
 8004e6c:	16009600 	.word	0x16009600
 8004e70:	58025880 	.word	0x58025880
 8004e74:	aaaaaaab 	.word	0xaaaaaaab
 8004e78:	400204b8 	.word	0x400204b8
 8004e7c:	4002040f 	.word	0x4002040f
 8004e80:	10008200 	.word	0x10008200
 8004e84:	40020880 	.word	0x40020880

08004e88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d04a      	beq.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d847      	bhi.n	8004f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d022      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d01d      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a21      	ldr	r2, [pc, #132]	; (8004f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d013      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1b      	ldr	r2, [pc, #108]	; (8004f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d101      	bne.n	8004ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	461a      	mov	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004f10:	671a      	str	r2, [r3, #112]	; 0x70
 8004f12:	e009      	b.n	8004f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004f26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	58025408 	.word	0x58025408
 8004f44:	5802541c 	.word	0x5802541c
 8004f48:	58025430 	.word	0x58025430
 8004f4c:	58025444 	.word	0x58025444
 8004f50:	58025458 	.word	0x58025458
 8004f54:	5802546c 	.word	0x5802546c
 8004f58:	58025480 	.word	0x58025480
 8004f5c:	58025494 	.word	0x58025494
 8004f60:	1600963f 	.word	0x1600963f
 8004f64:	58025940 	.word	0x58025940
 8004f68:	1000823f 	.word	0x1000823f
 8004f6c:	40020940 	.word	0x40020940

08004f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	; 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f7e:	4b89      	ldr	r3, [pc, #548]	; (80051a4 <HAL_GPIO_Init+0x234>)
 8004f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f82:	e194      	b.n	80052ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	4013      	ands	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8186 	beq.w	80052a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d00b      	beq.n	8004fbc <HAL_GPIO_Init+0x4c>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d007      	beq.n	8004fbc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fb0:	2b11      	cmp	r3, #17
 8004fb2:	d003      	beq.n	8004fbc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b12      	cmp	r3, #18
 8004fba:	d130      	bne.n	800501e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4013      	ands	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 0201 	and.w	r2, r3, #1
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4313      	orrs	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	2203      	movs	r2, #3
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d003      	beq.n	800505e <HAL_GPIO_Init+0xee>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b12      	cmp	r3, #18
 800505c:	d123      	bne.n	80050a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	08da      	lsrs	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3208      	adds	r2, #8
 8005066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800506a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	220f      	movs	r2, #15
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4013      	ands	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	08da      	lsrs	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3208      	adds	r2, #8
 80050a0:	69b9      	ldr	r1, [r7, #24]
 80050a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	2203      	movs	r2, #3
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0203 	and.w	r2, r3, #3
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 80e0 	beq.w	80052a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e8:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <HAL_GPIO_Init+0x238>)
 80050ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ee:	4a2e      	ldr	r2, [pc, #184]	; (80051a8 <HAL_GPIO_Init+0x238>)
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050f8:	4b2b      	ldr	r3, [pc, #172]	; (80051a8 <HAL_GPIO_Init+0x238>)
 80050fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005106:	4a29      	ldr	r2, [pc, #164]	; (80051ac <HAL_GPIO_Init+0x23c>)
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	089b      	lsrs	r3, r3, #2
 800510c:	3302      	adds	r3, #2
 800510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	220f      	movs	r2, #15
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43db      	mvns	r3, r3
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	4013      	ands	r3, r2
 8005128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a20      	ldr	r2, [pc, #128]	; (80051b0 <HAL_GPIO_Init+0x240>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d052      	beq.n	80051d8 <HAL_GPIO_Init+0x268>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1f      	ldr	r2, [pc, #124]	; (80051b4 <HAL_GPIO_Init+0x244>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d031      	beq.n	800519e <HAL_GPIO_Init+0x22e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <HAL_GPIO_Init+0x248>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d02b      	beq.n	800519a <HAL_GPIO_Init+0x22a>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <HAL_GPIO_Init+0x24c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d025      	beq.n	8005196 <HAL_GPIO_Init+0x226>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_GPIO_Init+0x250>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01f      	beq.n	8005192 <HAL_GPIO_Init+0x222>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_GPIO_Init+0x254>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d019      	beq.n	800518e <HAL_GPIO_Init+0x21e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1a      	ldr	r2, [pc, #104]	; (80051c8 <HAL_GPIO_Init+0x258>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_GPIO_Init+0x21a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a19      	ldr	r2, [pc, #100]	; (80051cc <HAL_GPIO_Init+0x25c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00d      	beq.n	8005186 <HAL_GPIO_Init+0x216>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a18      	ldr	r2, [pc, #96]	; (80051d0 <HAL_GPIO_Init+0x260>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d007      	beq.n	8005182 <HAL_GPIO_Init+0x212>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <HAL_GPIO_Init+0x264>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d101      	bne.n	800517e <HAL_GPIO_Init+0x20e>
 800517a:	2309      	movs	r3, #9
 800517c:	e02d      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800517e:	230a      	movs	r3, #10
 8005180:	e02b      	b.n	80051da <HAL_GPIO_Init+0x26a>
 8005182:	2308      	movs	r3, #8
 8005184:	e029      	b.n	80051da <HAL_GPIO_Init+0x26a>
 8005186:	2307      	movs	r3, #7
 8005188:	e027      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800518a:	2306      	movs	r3, #6
 800518c:	e025      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800518e:	2305      	movs	r3, #5
 8005190:	e023      	b.n	80051da <HAL_GPIO_Init+0x26a>
 8005192:	2304      	movs	r3, #4
 8005194:	e021      	b.n	80051da <HAL_GPIO_Init+0x26a>
 8005196:	2303      	movs	r3, #3
 8005198:	e01f      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800519a:	2302      	movs	r3, #2
 800519c:	e01d      	b.n	80051da <HAL_GPIO_Init+0x26a>
 800519e:	2301      	movs	r3, #1
 80051a0:	e01b      	b.n	80051da <HAL_GPIO_Init+0x26a>
 80051a2:	bf00      	nop
 80051a4:	58000080 	.word	0x58000080
 80051a8:	58024400 	.word	0x58024400
 80051ac:	58000400 	.word	0x58000400
 80051b0:	58020000 	.word	0x58020000
 80051b4:	58020400 	.word	0x58020400
 80051b8:	58020800 	.word	0x58020800
 80051bc:	58020c00 	.word	0x58020c00
 80051c0:	58021000 	.word	0x58021000
 80051c4:	58021400 	.word	0x58021400
 80051c8:	58021800 	.word	0x58021800
 80051cc:	58021c00 	.word	0x58021c00
 80051d0:	58022000 	.word	0x58022000
 80051d4:	58022400 	.word	0x58022400
 80051d8:	2300      	movs	r3, #0
 80051da:	69fa      	ldr	r2, [r7, #28]
 80051dc:	f002 0203 	and.w	r2, r2, #3
 80051e0:	0092      	lsls	r2, r2, #2
 80051e2:	4093      	lsls	r3, r2
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051ea:	4938      	ldr	r1, [pc, #224]	; (80052cc <HAL_GPIO_Init+0x35c>)
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	089b      	lsrs	r3, r3, #2
 80051f0:	3302      	adds	r3, #2
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	43db      	mvns	r3, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4013      	ands	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d003      	beq.n	800521c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	43db      	mvns	r3, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4013      	ands	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	43db      	mvns	r3, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4013      	ands	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800527a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	43db      	mvns	r3, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4013      	ands	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80052a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	3301      	adds	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f ae63 	bne.w	8004f84 <HAL_GPIO_Init+0x14>
  }
}
 80052be:	bf00      	nop
 80052c0:	bf00      	nop
 80052c2:	3724      	adds	r7, #36	; 0x24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	58000400 	.word	0x58000400

080052d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	807b      	strh	r3, [r7, #2]
 80052dc:	4613      	mov	r3, r2
 80052de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052e0:	787b      	ldrb	r3, [r7, #1]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052e6:	887a      	ldrh	r2, [r7, #2]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052ec:	e003      	b.n	80052f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052ee:	887b      	ldrh	r3, [r7, #2]
 80052f0:	041a      	lsls	r2, r3, #16
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	619a      	str	r2, [r3, #24]
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e07f      	b.n	8005416 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fc f824 	bl	8001378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2224      	movs	r2, #36	; 0x24
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005354:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005364:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d107      	bne.n	800537e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	e006      	b.n	800538c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800538a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d104      	bne.n	800539e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800539c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b1d      	ldr	r3, [pc, #116]	; (8005420 <HAL_I2C_Init+0x11c>)
 80053aa:	430b      	orrs	r3, r1
 80053ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	ea42 0103 	orr.w	r1, r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	430a      	orrs	r2, r1
 80053d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	69d9      	ldr	r1, [r3, #28]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1a      	ldr	r2, [r3, #32]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f042 0201 	orr.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	02008000 	.word	0x02008000

08005424 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	4608      	mov	r0, r1
 800542e:	4611      	mov	r1, r2
 8005430:	461a      	mov	r2, r3
 8005432:	4603      	mov	r3, r0
 8005434:	817b      	strh	r3, [r7, #10]
 8005436:	460b      	mov	r3, r1
 8005438:	813b      	strh	r3, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b20      	cmp	r3, #32
 8005448:	f040 80f9 	bne.w	800563e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_I2C_Mem_Write+0x34>
 8005452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800545e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e0ed      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_I2C_Mem_Write+0x4e>
 800546e:	2302      	movs	r3, #2
 8005470:	e0e6      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800547a:	f7fc fdd9 	bl	8002030 <HAL_GetTick>
 800547e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	2319      	movs	r3, #25
 8005486:	2201      	movs	r2, #1
 8005488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f001 fed9 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e0d1      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2221      	movs	r2, #33	; 0x21
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2240      	movs	r2, #64	; 0x40
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054c4:	88f8      	ldrh	r0, [r7, #6]
 80054c6:	893a      	ldrh	r2, [r7, #8]
 80054c8:	8979      	ldrh	r1, [r7, #10]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	4603      	mov	r3, r0
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 ff19 	bl	800630c <I2C_RequestMemoryWrite>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0a9      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2bff      	cmp	r3, #255	; 0xff
 80054f4:	d90e      	bls.n	8005514 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	22ff      	movs	r2, #255	; 0xff
 80054fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005500:	b2da      	uxtb	r2, r3
 8005502:	8979      	ldrh	r1, [r7, #10]
 8005504:	2300      	movs	r3, #0
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f001 ffbb 	bl	8007488 <I2C_TransferConfig>
 8005512:	e00f      	b.n	8005534 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005522:	b2da      	uxtb	r2, r3
 8005524:	8979      	ldrh	r1, [r7, #10]
 8005526:	2300      	movs	r3, #0
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f001 ffaa 	bl	8007488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f001 fec3 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e07b      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554c:	781a      	ldrb	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d034      	beq.n	80055ec <HAL_I2C_Mem_Write+0x1c8>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d130      	bne.n	80055ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	2200      	movs	r2, #0
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f001 fe55 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e04d      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	2bff      	cmp	r3, #255	; 0xff
 80055ac:	d90e      	bls.n	80055cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	22ff      	movs	r2, #255	; 0xff
 80055b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	8979      	ldrh	r1, [r7, #10]
 80055bc:	2300      	movs	r3, #0
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f001 ff5f 	bl	8007488 <I2C_TransferConfig>
 80055ca:	e00f      	b.n	80055ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	8979      	ldrh	r1, [r7, #10]
 80055de:	2300      	movs	r3, #0
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f001 ff4e 	bl	8007488 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d19e      	bne.n	8005534 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f001 fea2 	bl	8007344 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e01a      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2220      	movs	r2, #32
 8005610:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6859      	ldr	r1, [r3, #4]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <HAL_I2C_Mem_Write+0x224>)
 800561e:	400b      	ands	r3, r1
 8005620:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e000      	b.n	8005640 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3718      	adds	r7, #24
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	fe00e800 	.word	0xfe00e800

0800564c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	4603      	mov	r3, r0
 800565c:	817b      	strh	r3, [r7, #10]
 800565e:	460b      	mov	r3, r1
 8005660:	813b      	strh	r3, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b20      	cmp	r3, #32
 8005670:	f040 80fd 	bne.w	800586e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_I2C_Mem_Read+0x34>
 800567a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0f1      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_I2C_Mem_Read+0x4e>
 8005696:	2302      	movs	r3, #2
 8005698:	e0ea      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056a2:	f7fc fcc5 	bl	8002030 <HAL_GetTick>
 80056a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	2319      	movs	r3, #25
 80056ae:	2201      	movs	r2, #1
 80056b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f001 fdc5 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0d5      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2222      	movs	r2, #34	; 0x22
 80056c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a3a      	ldr	r2, [r7, #32]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ec:	88f8      	ldrh	r0, [r7, #6]
 80056ee:	893a      	ldrh	r2, [r7, #8]
 80056f0:	8979      	ldrh	r1, [r7, #10]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4603      	mov	r3, r0
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fe59 	bl	80063b4 <I2C_RequestMemoryRead>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e0ad      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	2bff      	cmp	r3, #255	; 0xff
 800571c:	d90e      	bls.n	800573c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	22ff      	movs	r2, #255	; 0xff
 8005722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005728:	b2da      	uxtb	r2, r3
 800572a:	8979      	ldrh	r1, [r7, #10]
 800572c:	4b52      	ldr	r3, [pc, #328]	; (8005878 <HAL_I2C_Mem_Read+0x22c>)
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f001 fea7 	bl	8007488 <I2C_TransferConfig>
 800573a:	e00f      	b.n	800575c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	b2da      	uxtb	r2, r3
 800574c:	8979      	ldrh	r1, [r7, #10]
 800574e:	4b4a      	ldr	r3, [pc, #296]	; (8005878 <HAL_I2C_Mem_Read+0x22c>)
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f001 fe96 	bl	8007488 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	2200      	movs	r2, #0
 8005764:	2104      	movs	r1, #4
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f001 fd6c 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e07c      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d034      	beq.n	800581c <HAL_I2C_Mem_Read+0x1d0>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d130      	bne.n	800581c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c0:	2200      	movs	r2, #0
 80057c2:	2180      	movs	r1, #128	; 0x80
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f001 fd3d 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e04d      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2bff      	cmp	r3, #255	; 0xff
 80057dc:	d90e      	bls.n	80057fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	22ff      	movs	r2, #255	; 0xff
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	8979      	ldrh	r1, [r7, #10]
 80057ec:	2300      	movs	r3, #0
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f001 fe47 	bl	8007488 <I2C_TransferConfig>
 80057fa:	e00f      	b.n	800581c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	b2da      	uxtb	r2, r3
 800580c:	8979      	ldrh	r1, [r7, #10]
 800580e:	2300      	movs	r3, #0
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f001 fe36 	bl	8007488 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d19a      	bne.n	800575c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f001 fd8a 	bl	8007344 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e01a      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2220      	movs	r2, #32
 8005840:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6859      	ldr	r1, [r3, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	4b0b      	ldr	r3, [pc, #44]	; (800587c <HAL_I2C_Mem_Read+0x230>)
 800584e:	400b      	ands	r3, r1
 8005850:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
  }
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	80002400 	.word	0x80002400
 800587c:	fe00e800 	.word	0xfe00e800

08005880 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08a      	sub	sp, #40	; 0x28
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	461a      	mov	r2, r3
 800588e:	4603      	mov	r3, r0
 8005890:	817b      	strh	r3, [r7, #10]
 8005892:	460b      	mov	r3, r1
 8005894:	813b      	strh	r3, [r7, #8]
 8005896:	4613      	mov	r3, r2
 8005898:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	f040 80d5 	bne.w	8005a52 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_I2C_Mem_Read_DMA+0x34>
 80058ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d105      	bne.n	80058c0 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0c9      	b.n	8005a54 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ce:	d101      	bne.n	80058d4 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80058d0:	2302      	movs	r3, #2
 80058d2:	e0bf      	b.n	8005a54 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_I2C_Mem_Read_DMA+0x62>
 80058de:	2302      	movs	r3, #2
 80058e0:	e0b8      	b.n	8005a54 <HAL_I2C_Mem_Read_DMA+0x1d4>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058ea:	f7fc fba1 	bl	8002030 <HAL_GetTick>
 80058ee:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2222      	movs	r2, #34	; 0x22
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2240      	movs	r2, #64	; 0x40
 80058fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800590a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a51      	ldr	r2, [pc, #324]	; (8005a5c <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8005916:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4a51      	ldr	r2, [pc, #324]	; (8005a60 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 800591c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	2bff      	cmp	r3, #255	; 0xff
 8005926:	d906      	bls.n	8005936 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	22ff      	movs	r2, #255	; 0xff
 800592c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800592e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	e007      	b.n	8005946 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005944:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005946:	88f8      	ldrh	r0, [r7, #6]
 8005948:	893a      	ldrh	r2, [r7, #8]
 800594a:	8979      	ldrh	r1, [r7, #10]
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	2319      	movs	r3, #25
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	4603      	mov	r3, r0
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fd2c 	bl	80063b4 <I2C_RequestMemoryRead>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e072      	b.n	8005a54 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d020      	beq.n	80059b8 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 800597c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005982:	4a39      	ldr	r2, [pc, #228]	; (8005a68 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8005984:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598a:	2200      	movs	r2, #0
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005992:	2200      	movs	r2, #0
 8005994:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3324      	adds	r3, #36	; 0x24
 80059a0:	4619      	mov	r1, r3
 80059a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a8:	f7fc ffea 	bl	8002980 <HAL_DMA_Start_IT>
 80059ac:	4603      	mov	r3, r0
 80059ae:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d139      	bne.n	8005a2a <HAL_I2C_Mem_Read_DMA+0x1aa>
 80059b6:	e013      	b.n	80059e0 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e039      	b.n	8005a54 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	8979      	ldrh	r1, [r7, #10]
 80059e8:	4b20      	ldr	r3, [pc, #128]	; (8005a6c <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f001 fd4a 	bl	8007488 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005a0e:	2110      	movs	r1, #16
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f001 fd67 	bl	80074e4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a24:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e014      	b.n	8005a54 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	f043 0210 	orr.w	r2, r3, #16
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8005a52:	2302      	movs	r3, #2
  }
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3720      	adds	r7, #32
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	ffff0000 	.word	0xffff0000
 8005a60:	08005d67 	.word	0x08005d67
 8005a64:	08006f03 	.word	0x08006f03
 8005a68:	08006f99 	.word	0x08006f99
 8005a6c:	80002400 	.word	0x80002400

08005a70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	68f9      	ldr	r1, [r7, #12]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
  }
}
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
 8005b00:	4613      	mov	r3, r2
 8005b02:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <I2C_Slave_ISR_IT+0x24>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e0ec      	b.n	8005d5e <I2C_Slave_ISR_IT+0x1fe>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <I2C_Slave_ISR_IT+0x4c>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005ba4:	6939      	ldr	r1, [r7, #16]
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fe42 	bl	8006830 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	091b      	lsrs	r3, r3, #4
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d04d      	beq.n	8005c54 <I2C_Slave_ISR_IT+0xf4>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d047      	beq.n	8005c54 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d128      	bne.n	8005c20 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b28      	cmp	r3, #40	; 0x28
 8005bd8:	d108      	bne.n	8005bec <I2C_Slave_ISR_IT+0x8c>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be0:	d104      	bne.n	8005bec <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005be2:	6939      	ldr	r1, [r7, #16]
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f001 f81b 	bl	8006c20 <I2C_ITListenCplt>
 8005bea:	e032      	b.n	8005c52 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b29      	cmp	r3, #41	; 0x29
 8005bf6:	d10e      	bne.n	8005c16 <I2C_Slave_ISR_IT+0xb6>
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bfe:	d00a      	beq.n	8005c16 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2210      	movs	r2, #16
 8005c06:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f001 f956 	bl	8006eba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 fce5 	bl	80065de <I2C_ITSlaveSeqCplt>
 8005c14:	e01d      	b.n	8005c52 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2210      	movs	r2, #16
 8005c1c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c1e:	e096      	b.n	8005d4e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2210      	movs	r2, #16
 8005c26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2c:	f043 0204 	orr.w	r2, r3, #4
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d004      	beq.n	8005c44 <I2C_Slave_ISR_IT+0xe4>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c40:	f040 8085 	bne.w	8005d4e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c48:	4619      	mov	r1, r3
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f001 f83e 	bl	8006ccc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005c50:	e07d      	b.n	8005d4e <I2C_Slave_ISR_IT+0x1ee>
 8005c52:	e07c      	b.n	8005d4e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	089b      	lsrs	r3, r3, #2
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d030      	beq.n	8005cc2 <I2C_Slave_ISR_IT+0x162>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	089b      	lsrs	r3, r3, #2
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d02a      	beq.n	8005cc2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d018      	beq.n	8005ca8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d14f      	bne.n	8005d52 <I2C_Slave_ISR_IT+0x1f2>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cb8:	d04b      	beq.n	8005d52 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 fc8f 	bl	80065de <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005cc0:	e047      	b.n	8005d52 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	08db      	lsrs	r3, r3, #3
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	08db      	lsrs	r3, r3, #3
 8005cd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005cda:	6939      	ldr	r1, [r7, #16]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 fbbd 	bl	800645c <I2C_ITAddrCplt>
 8005ce2:	e037      	b.n	8005d54 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	085b      	lsrs	r3, r3, #1
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d031      	beq.n	8005d54 <I2C_Slave_ISR_IT+0x1f4>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d02b      	beq.n	8005d54 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d018      	beq.n	8005d38 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	781a      	ldrb	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	851a      	strh	r2, [r3, #40]	; 0x28
 8005d36:	e00d      	b.n	8005d54 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d3e:	d002      	beq.n	8005d46 <I2C_Slave_ISR_IT+0x1e6>
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d106      	bne.n	8005d54 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fc49 	bl	80065de <I2C_ITSlaveSeqCplt>
 8005d4c:	e002      	b.n	8005d54 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005d52:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b088      	sub	sp, #32
 8005d6a:	af02      	add	r7, sp, #8
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <I2C_Master_ISR_DMA+0x1a>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e0e1      	b.n	8005f44 <I2C_Master_ISR_DMA+0x1de>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	091b      	lsrs	r3, r3, #4
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d017      	beq.n	8005dc4 <I2C_Master_ISR_DMA+0x5e>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d011      	beq.n	8005dc4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2210      	movs	r2, #16
 8005da6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	f043 0204 	orr.w	r2, r3, #4
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005db4:	2120      	movs	r1, #32
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f001 fb94 	bl	80074e4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f001 f87c 	bl	8006eba <I2C_Flush_TXDR>
 8005dc2:	e0ba      	b.n	8005f3a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	09db      	lsrs	r3, r3, #7
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d072      	beq.n	8005eb6 <I2C_Master_ISR_DMA+0x150>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	099b      	lsrs	r3, r3, #6
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d06c      	beq.n	8005eb6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dea:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d04e      	beq.n	8005e94 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e02:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2bff      	cmp	r3, #255	; 0xff
 8005e0c:	d906      	bls.n	8005e1c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	22ff      	movs	r2, #255	; 0xff
 8005e12:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005e14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	e010      	b.n	8005e3e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e2e:	d003      	beq.n	8005e38 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	e002      	b.n	8005e3e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005e38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e3c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	8a79      	ldrh	r1, [r7, #18]
 8005e46:	2300      	movs	r3, #0
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f001 fb1b 	bl	8007488 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b22      	cmp	r3, #34	; 0x22
 8005e6e:	d108      	bne.n	8005e82 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e80:	e05b      	b.n	8005f3a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e90:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005e92:	e052      	b.n	8005f3a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ea2:	d003      	beq.n	8005eac <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 fb5d 	bl	8006564 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005eaa:	e046      	b.n	8005f3a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005eac:	2140      	movs	r1, #64	; 0x40
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 ff0c 	bl	8006ccc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005eb4:	e041      	b.n	8005f3a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	099b      	lsrs	r3, r3, #6
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d029      	beq.n	8005f16 <I2C_Master_ISR_DMA+0x1b0>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	099b      	lsrs	r3, r3, #6
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d023      	beq.n	8005f16 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d119      	bne.n	8005f0c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee6:	d027      	beq.n	8005f38 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ef0:	d108      	bne.n	8005f04 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f00:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005f02:	e019      	b.n	8005f38 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f000 fb2d 	bl	8006564 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005f0a:	e015      	b.n	8005f38 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f0c:	2140      	movs	r1, #64	; 0x40
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fedc 	bl	8006ccc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005f14:	e010      	b.n	8005f38 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <I2C_Master_ISR_DMA+0x1d4>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fbb3 	bl	800669c <I2C_ITMasterCplt>
 8005f36:	e000      	b.n	8005f3a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005f38:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <I2C_Slave_ISR_DMA+0x24>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e1c8      	b.n	8006302 <I2C_Slave_ISR_DMA+0x3b6>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d009      	beq.n	8005f98 <I2C_Slave_ISR_DMA+0x4c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f000 fc4c 	bl	8006830 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	091b      	lsrs	r3, r3, #4
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8199 	beq.w	80062d8 <I2C_Slave_ISR_DMA+0x38c>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 8192 	beq.w	80062d8 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	0b9b      	lsrs	r3, r3, #14
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	0bdb      	lsrs	r3, r3, #15
 8005fc4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 817e 	beq.w	80062ca <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d07c      	beq.n	80060d0 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	0bdb      	lsrs	r3, r3, #15
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d076      	beq.n	80060d0 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a8d      	ldr	r2, [pc, #564]	; (8006220 <I2C_Slave_ISR_DMA+0x2d4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d059      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a8b      	ldr	r2, [pc, #556]	; (8006224 <I2C_Slave_ISR_DMA+0x2d8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d053      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a89      	ldr	r2, [pc, #548]	; (8006228 <I2C_Slave_ISR_DMA+0x2dc>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d04d      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a87      	ldr	r2, [pc, #540]	; (800622c <I2C_Slave_ISR_DMA+0x2e0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d047      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a85      	ldr	r2, [pc, #532]	; (8006230 <I2C_Slave_ISR_DMA+0x2e4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d041      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a83      	ldr	r2, [pc, #524]	; (8006234 <I2C_Slave_ISR_DMA+0x2e8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d03b      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a81      	ldr	r2, [pc, #516]	; (8006238 <I2C_Slave_ISR_DMA+0x2ec>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d035      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a7f      	ldr	r2, [pc, #508]	; (800623c <I2C_Slave_ISR_DMA+0x2f0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d02f      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a7d      	ldr	r2, [pc, #500]	; (8006240 <I2C_Slave_ISR_DMA+0x2f4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d029      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a7b      	ldr	r2, [pc, #492]	; (8006244 <I2C_Slave_ISR_DMA+0x2f8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d023      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a79      	ldr	r2, [pc, #484]	; (8006248 <I2C_Slave_ISR_DMA+0x2fc>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01d      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a77      	ldr	r2, [pc, #476]	; (800624c <I2C_Slave_ISR_DMA+0x300>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d017      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a75      	ldr	r2, [pc, #468]	; (8006250 <I2C_Slave_ISR_DMA+0x304>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d011      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a73      	ldr	r2, [pc, #460]	; (8006254 <I2C_Slave_ISR_DMA+0x308>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a71      	ldr	r2, [pc, #452]	; (8006258 <I2C_Slave_ISR_DMA+0x30c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d005      	beq.n	80060a2 <I2C_Slave_ISR_DMA+0x156>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a6f      	ldr	r2, [pc, #444]	; (800625c <I2C_Slave_ISR_DMA+0x310>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d109      	bne.n	80060b6 <I2C_Slave_ISR_DMA+0x16a>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	bf0c      	ite	eq
 80060ae:	2301      	moveq	r3, #1
 80060b0:	2300      	movne	r3, #0
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	e008      	b.n	80060c8 <I2C_Slave_ISR_DMA+0x17c>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	bf0c      	ite	eq
 80060c2:	2301      	moveq	r3, #1
 80060c4:	2300      	movne	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80060cc:	2301      	movs	r3, #1
 80060ce:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d07c      	beq.n	80061d2 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	0b9b      	lsrs	r3, r3, #14
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d076      	beq.n	80061d2 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a4d      	ldr	r2, [pc, #308]	; (8006220 <I2C_Slave_ISR_DMA+0x2d4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d059      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a4b      	ldr	r2, [pc, #300]	; (8006224 <I2C_Slave_ISR_DMA+0x2d8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d053      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a49      	ldr	r2, [pc, #292]	; (8006228 <I2C_Slave_ISR_DMA+0x2dc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d04d      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a47      	ldr	r2, [pc, #284]	; (800622c <I2C_Slave_ISR_DMA+0x2e0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d047      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a45      	ldr	r2, [pc, #276]	; (8006230 <I2C_Slave_ISR_DMA+0x2e4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d041      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a43      	ldr	r2, [pc, #268]	; (8006234 <I2C_Slave_ISR_DMA+0x2e8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d03b      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a41      	ldr	r2, [pc, #260]	; (8006238 <I2C_Slave_ISR_DMA+0x2ec>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d035      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a3f      	ldr	r2, [pc, #252]	; (800623c <I2C_Slave_ISR_DMA+0x2f0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d02f      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a3d      	ldr	r2, [pc, #244]	; (8006240 <I2C_Slave_ISR_DMA+0x2f4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d029      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a3b      	ldr	r2, [pc, #236]	; (8006244 <I2C_Slave_ISR_DMA+0x2f8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d023      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a39      	ldr	r2, [pc, #228]	; (8006248 <I2C_Slave_ISR_DMA+0x2fc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d01d      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a37      	ldr	r2, [pc, #220]	; (800624c <I2C_Slave_ISR_DMA+0x300>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d017      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a35      	ldr	r2, [pc, #212]	; (8006250 <I2C_Slave_ISR_DMA+0x304>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d011      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a33      	ldr	r2, [pc, #204]	; (8006254 <I2C_Slave_ISR_DMA+0x308>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00b      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a31      	ldr	r2, [pc, #196]	; (8006258 <I2C_Slave_ISR_DMA+0x30c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d005      	beq.n	80061a4 <I2C_Slave_ISR_DMA+0x258>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a2f      	ldr	r2, [pc, #188]	; (800625c <I2C_Slave_ISR_DMA+0x310>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d109      	bne.n	80061b8 <I2C_Slave_ISR_DMA+0x26c>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bf0c      	ite	eq
 80061b0:	2301      	moveq	r3, #1
 80061b2:	2300      	movne	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	e008      	b.n	80061ca <I2C_Slave_ISR_DMA+0x27e>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 80061ce:	2301      	movs	r3, #1
 80061d0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d148      	bne.n	800626a <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b28      	cmp	r3, #40	; 0x28
 80061e2:	d108      	bne.n	80061f6 <I2C_Slave_ISR_DMA+0x2aa>
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061ea:	d104      	bne.n	80061f6 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fd16 	bl	8006c20 <I2C_ITListenCplt>
 80061f4:	e068      	b.n	80062c8 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b29      	cmp	r3, #41	; 0x29
 8006200:	d12e      	bne.n	8006260 <I2C_Slave_ISR_DMA+0x314>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006208:	d02a      	beq.n	8006260 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2210      	movs	r2, #16
 8006210:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 fe51 	bl	8006eba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f9e0 	bl	80065de <I2C_ITSlaveSeqCplt>
 800621e:	e053      	b.n	80062c8 <I2C_Slave_ISR_DMA+0x37c>
 8006220:	40020010 	.word	0x40020010
 8006224:	40020028 	.word	0x40020028
 8006228:	40020040 	.word	0x40020040
 800622c:	40020058 	.word	0x40020058
 8006230:	40020070 	.word	0x40020070
 8006234:	40020088 	.word	0x40020088
 8006238:	400200a0 	.word	0x400200a0
 800623c:	400200b8 	.word	0x400200b8
 8006240:	40020410 	.word	0x40020410
 8006244:	40020428 	.word	0x40020428
 8006248:	40020440 	.word	0x40020440
 800624c:	40020458 	.word	0x40020458
 8006250:	40020470 	.word	0x40020470
 8006254:	40020488 	.word	0x40020488
 8006258:	400204a0 	.word	0x400204a0
 800625c:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2210      	movs	r2, #16
 8006266:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006268:	e034      	b.n	80062d4 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2210      	movs	r2, #16
 8006270:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006276:	f043 0204 	orr.w	r2, r3, #4
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006284:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <I2C_Slave_ISR_DMA+0x348>
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006292:	d11f      	bne.n	80062d4 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	2b21      	cmp	r3, #33	; 0x21
 8006298:	d002      	beq.n	80062a0 <I2C_Slave_ISR_DMA+0x354>
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b29      	cmp	r3, #41	; 0x29
 800629e:	d103      	bne.n	80062a8 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2221      	movs	r2, #33	; 0x21
 80062a4:	631a      	str	r2, [r3, #48]	; 0x30
 80062a6:	e008      	b.n	80062ba <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
 80062aa:	2b22      	cmp	r3, #34	; 0x22
 80062ac:	d002      	beq.n	80062b4 <I2C_Slave_ISR_DMA+0x368>
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	2b2a      	cmp	r3, #42	; 0x2a
 80062b2:	d102      	bne.n	80062ba <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2222      	movs	r2, #34	; 0x22
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	4619      	mov	r1, r3
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fd03 	bl	8006ccc <I2C_ITError>
      if (treatdmanack == 1U)
 80062c6:	e005      	b.n	80062d4 <I2C_Slave_ISR_DMA+0x388>
 80062c8:	e004      	b.n	80062d4 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2210      	movs	r2, #16
 80062d0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062d2:	e011      	b.n	80062f8 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 80062d4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062d6:	e00f      	b.n	80062f8 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	08db      	lsrs	r3, r3, #3
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d009      	beq.n	80062f8 <I2C_Slave_ISR_DMA+0x3ac>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	08db      	lsrs	r3, r3, #3
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f8b2 	bl	800645c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop

0800630c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	4608      	mov	r0, r1
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	4603      	mov	r3, r0
 800631c:	817b      	strh	r3, [r7, #10]
 800631e:	460b      	mov	r3, r1
 8006320:	813b      	strh	r3, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	b2da      	uxtb	r2, r3
 800632a:	8979      	ldrh	r1, [r7, #10]
 800632c:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <I2C_RequestMemoryWrite+0xa4>)
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f001 f8a7 	bl	8007488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	69b9      	ldr	r1, [r7, #24]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 ffc0 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e02c      	b.n	80063a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d105      	bne.n	8006360 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006354:	893b      	ldrh	r3, [r7, #8]
 8006356:	b2da      	uxtb	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	629a      	str	r2, [r3, #40]	; 0x28
 800635e:	e015      	b.n	800638c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006360:	893b      	ldrh	r3, [r7, #8]
 8006362:	0a1b      	lsrs	r3, r3, #8
 8006364:	b29b      	uxth	r3, r3
 8006366:	b2da      	uxtb	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	69b9      	ldr	r1, [r7, #24]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 ffa6 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e012      	b.n	80063a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006382:	893b      	ldrh	r3, [r7, #8]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2200      	movs	r2, #0
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 ff54 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	80002000 	.word	0x80002000

080063b4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	4608      	mov	r0, r1
 80063be:	4611      	mov	r1, r2
 80063c0:	461a      	mov	r2, r3
 80063c2:	4603      	mov	r3, r0
 80063c4:	817b      	strh	r3, [r7, #10]
 80063c6:	460b      	mov	r3, r1
 80063c8:	813b      	strh	r3, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	8979      	ldrh	r1, [r7, #10]
 80063d4:	4b20      	ldr	r3, [pc, #128]	; (8006458 <I2C_RequestMemoryRead+0xa4>)
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	2300      	movs	r3, #0
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	f001 f854 	bl	8007488 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	69b9      	ldr	r1, [r7, #24]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 ff6d 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e02c      	b.n	800644e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063f4:	88fb      	ldrh	r3, [r7, #6]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d105      	bne.n	8006406 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063fa:	893b      	ldrh	r3, [r7, #8]
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	629a      	str	r2, [r3, #40]	; 0x28
 8006404:	e015      	b.n	8006432 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006406:	893b      	ldrh	r3, [r7, #8]
 8006408:	0a1b      	lsrs	r3, r3, #8
 800640a:	b29b      	uxth	r3, r3
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006414:	69fa      	ldr	r2, [r7, #28]
 8006416:	69b9      	ldr	r1, [r7, #24]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 ff53 	bl	80072c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e012      	b.n	800644e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006428:	893b      	ldrh	r3, [r7, #8]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2200      	movs	r2, #0
 800643a:	2140      	movs	r1, #64	; 0x40
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 ff01 	bl	8007244 <I2C_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	80002000 	.word	0x80002000

0800645c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006472:	2b28      	cmp	r3, #40	; 0x28
 8006474:	d16a      	bne.n	800654c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	0c1b      	lsrs	r3, r3, #16
 800647e:	b2db      	uxtb	r3, r3
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	0c1b      	lsrs	r3, r3, #16
 800648e:	b29b      	uxth	r3, r3
 8006490:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006494:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	b29b      	uxth	r3, r3
 800649e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80064b0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d138      	bne.n	800652c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80064ba:	897b      	ldrh	r3, [r7, #10]
 80064bc:	09db      	lsrs	r3, r3, #7
 80064be:	b29a      	uxth	r2, r3
 80064c0:	89bb      	ldrh	r3, [r7, #12]
 80064c2:	4053      	eors	r3, r2
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	f003 0306 	and.w	r3, r3, #6
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d11c      	bne.n	8006508 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80064ce:	897b      	ldrh	r3, [r7, #10]
 80064d0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d13b      	bne.n	800655c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2208      	movs	r2, #8
 80064f0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064fa:	89ba      	ldrh	r2, [r7, #12]
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7ff faf7 	bl	8005af4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006506:	e029      	b.n	800655c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006508:	893b      	ldrh	r3, [r7, #8]
 800650a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800650c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 f84b 	bl	80075ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800651e:	89ba      	ldrh	r2, [r7, #12]
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff fae5 	bl	8005af4 <HAL_I2C_AddrCallback>
}
 800652a:	e017      	b.n	800655c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800652c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 f83b 	bl	80075ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800653e:	89ba      	ldrh	r2, [r7, #12]
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fad5 	bl	8005af4 <HAL_I2C_AddrCallback>
}
 800654a:	e007      	b.n	800655c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2208      	movs	r2, #8
 8006552:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b21      	cmp	r3, #33	; 0x21
 800657e:	d115      	bne.n	80065ac <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2211      	movs	r2, #17
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006594:	2101      	movs	r1, #1
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 f808 	bl	80075ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff fa7d 	bl	8005aa4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065aa:	e014      	b.n	80065d6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2212      	movs	r2, #18
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80065c0:	2102      	movs	r1, #2
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fff2 	bl	80075ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fa71 	bl	8005ab8 <HAL_I2C_MasterRxCpltCallback>
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	0b9b      	lsrs	r3, r3, #14
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d008      	beq.n	8006614 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	e00d      	b.n	8006630 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	0bdb      	lsrs	r3, r3, #15
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800662e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b29      	cmp	r3, #41	; 0x29
 800663a:	d112      	bne.n	8006662 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2228      	movs	r2, #40	; 0x28
 8006640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2221      	movs	r2, #33	; 0x21
 8006648:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800664a:	2101      	movs	r1, #1
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 ffad 	bl	80075ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f7ff fa36 	bl	8005acc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006660:	e017      	b.n	8006692 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b2a      	cmp	r3, #42	; 0x2a
 800666c:	d111      	bne.n	8006692 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2228      	movs	r2, #40	; 0x28
 8006672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2222      	movs	r2, #34	; 0x22
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800667c:	2102      	movs	r1, #2
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 ff94 	bl	80075ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f7ff fa27 	bl	8005ae0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006692:	bf00      	nop
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2220      	movs	r2, #32
 80066b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b21      	cmp	r3, #33	; 0x21
 80066bc:	d107      	bne.n	80066ce <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80066be:	2101      	movs	r1, #1
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 ff73 	bl	80075ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2211      	movs	r2, #17
 80066ca:	631a      	str	r2, [r3, #48]	; 0x30
 80066cc:	e00c      	b.n	80066e8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b22      	cmp	r3, #34	; 0x22
 80066d8:	d106      	bne.n	80066e8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80066da:	2102      	movs	r1, #2
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 ff65 	bl	80075ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2212      	movs	r2, #18
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6859      	ldr	r1, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b4d      	ldr	r3, [pc, #308]	; (8006828 <I2C_ITMasterCplt+0x18c>)
 80066f4:	400b      	ands	r3, r1
 80066f6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a4a      	ldr	r2, [pc, #296]	; (800682c <I2C_ITMasterCplt+0x190>)
 8006702:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	091b      	lsrs	r3, r3, #4
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2210      	movs	r2, #16
 8006716:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671c:	f043 0204 	orr.w	r2, r3, #4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b60      	cmp	r3, #96	; 0x60
 800672e:	d10b      	bne.n	8006748 <I2C_ITMasterCplt+0xac>
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	089b      	lsrs	r3, r3, #2
 8006734:	f003 0301 	and.w	r3, r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	b2db      	uxtb	r3, r3
 8006744:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006746:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fbb6 	bl	8006eba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006752:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b60      	cmp	r3, #96	; 0x60
 800675e:	d002      	beq.n	8006766 <I2C_ITMasterCplt+0xca>
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d006      	beq.n	8006774 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 faad 	bl	8006ccc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006772:	e054      	b.n	800681e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b21      	cmp	r3, #33	; 0x21
 800677e:	d124      	bne.n	80067ca <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2220      	movs	r2, #32
 8006784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	d10b      	bne.n	80067b2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff f9ba 	bl	8005b24 <HAL_I2C_MemTxCpltCallback>
}
 80067b0:	e035      	b.n	800681e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff f96e 	bl	8005aa4 <HAL_I2C_MasterTxCpltCallback>
}
 80067c8:	e029      	b.n	800681e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b22      	cmp	r3, #34	; 0x22
 80067d4:	d123      	bne.n	800681e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b40      	cmp	r3, #64	; 0x40
 80067ee:	d10b      	bne.n	8006808 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fb f87b 	bl	80018fc <HAL_I2C_MemRxCpltCallback>
}
 8006806:	e00a      	b.n	800681e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff f94d 	bl	8005ab8 <HAL_I2C_MasterRxCpltCallback>
}
 800681e:	bf00      	nop
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	fe00e800 	.word	0xfe00e800
 800682c:	ffff0000 	.word	0xffff0000

08006830 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800684c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2220      	movs	r2, #32
 8006854:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	2b21      	cmp	r3, #33	; 0x21
 800685a:	d002      	beq.n	8006862 <I2C_ITSlaveCplt+0x32>
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	2b29      	cmp	r3, #41	; 0x29
 8006860:	d108      	bne.n	8006874 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006862:	f248 0101 	movw	r1, #32769	; 0x8001
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fea0 	bl	80075ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2221      	movs	r2, #33	; 0x21
 8006870:	631a      	str	r2, [r3, #48]	; 0x30
 8006872:	e00d      	b.n	8006890 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	2b22      	cmp	r3, #34	; 0x22
 8006878:	d002      	beq.n	8006880 <I2C_ITSlaveCplt+0x50>
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b2a      	cmp	r3, #42	; 0x2a
 800687e:	d107      	bne.n	8006890 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006880:	f248 0102 	movw	r1, #32770	; 0x8002
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fe91 	bl	80075ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2222      	movs	r2, #34	; 0x22
 800688e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800689e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6859      	ldr	r1, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4b80      	ldr	r3, [pc, #512]	; (8006aac <I2C_ITSlaveCplt+0x27c>)
 80068ac:	400b      	ands	r3, r1
 80068ae:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fb02 	bl	8006eba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	0b9b      	lsrs	r3, r3, #14
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d07a      	beq.n	80069b8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068d0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 8111 	beq.w	8006afe <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a73      	ldr	r2, [pc, #460]	; (8006ab0 <I2C_ITSlaveCplt+0x280>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d059      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a71      	ldr	r2, [pc, #452]	; (8006ab4 <I2C_ITSlaveCplt+0x284>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d053      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a6f      	ldr	r2, [pc, #444]	; (8006ab8 <I2C_ITSlaveCplt+0x288>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d04d      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a6d      	ldr	r2, [pc, #436]	; (8006abc <I2C_ITSlaveCplt+0x28c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d047      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a6b      	ldr	r2, [pc, #428]	; (8006ac0 <I2C_ITSlaveCplt+0x290>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d041      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a69      	ldr	r2, [pc, #420]	; (8006ac4 <I2C_ITSlaveCplt+0x294>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d03b      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a67      	ldr	r2, [pc, #412]	; (8006ac8 <I2C_ITSlaveCplt+0x298>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d035      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a65      	ldr	r2, [pc, #404]	; (8006acc <I2C_ITSlaveCplt+0x29c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d02f      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a63      	ldr	r2, [pc, #396]	; (8006ad0 <I2C_ITSlaveCplt+0x2a0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d029      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a61      	ldr	r2, [pc, #388]	; (8006ad4 <I2C_ITSlaveCplt+0x2a4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d023      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a5f      	ldr	r2, [pc, #380]	; (8006ad8 <I2C_ITSlaveCplt+0x2a8>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d01d      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a5d      	ldr	r2, [pc, #372]	; (8006adc <I2C_ITSlaveCplt+0x2ac>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d017      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a5b      	ldr	r2, [pc, #364]	; (8006ae0 <I2C_ITSlaveCplt+0x2b0>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d011      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a59      	ldr	r2, [pc, #356]	; (8006ae4 <I2C_ITSlaveCplt+0x2b4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00b      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a57      	ldr	r2, [pc, #348]	; (8006ae8 <I2C_ITSlaveCplt+0x2b8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d005      	beq.n	800699c <I2C_ITSlaveCplt+0x16c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a55      	ldr	r2, [pc, #340]	; (8006aec <I2C_ITSlaveCplt+0x2bc>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d105      	bne.n	80069a8 <I2C_ITSlaveCplt+0x178>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	e004      	b.n	80069b2 <I2C_ITSlaveCplt+0x182>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	8553      	strh	r3, [r2, #42]	; 0x2a
 80069b6:	e0a2      	b.n	8006afe <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	0bdb      	lsrs	r3, r3, #15
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 809c 	beq.w	8006afe <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069d4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 808f 	beq.w	8006afe <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a32      	ldr	r2, [pc, #200]	; (8006ab0 <I2C_ITSlaveCplt+0x280>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d059      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a30      	ldr	r2, [pc, #192]	; (8006ab4 <I2C_ITSlaveCplt+0x284>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d053      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a2e      	ldr	r2, [pc, #184]	; (8006ab8 <I2C_ITSlaveCplt+0x288>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d04d      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a2c      	ldr	r2, [pc, #176]	; (8006abc <I2C_ITSlaveCplt+0x28c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d047      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <I2C_ITSlaveCplt+0x290>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d041      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a28      	ldr	r2, [pc, #160]	; (8006ac4 <I2C_ITSlaveCplt+0x294>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d03b      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a26      	ldr	r2, [pc, #152]	; (8006ac8 <I2C_ITSlaveCplt+0x298>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d035      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a24      	ldr	r2, [pc, #144]	; (8006acc <I2C_ITSlaveCplt+0x29c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d02f      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a22      	ldr	r2, [pc, #136]	; (8006ad0 <I2C_ITSlaveCplt+0x2a0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d029      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a20      	ldr	r2, [pc, #128]	; (8006ad4 <I2C_ITSlaveCplt+0x2a4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d023      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <I2C_ITSlaveCplt+0x2a8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d01d      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1c      	ldr	r2, [pc, #112]	; (8006adc <I2C_ITSlaveCplt+0x2ac>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d017      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1a      	ldr	r2, [pc, #104]	; (8006ae0 <I2C_ITSlaveCplt+0x2b0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d011      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a18      	ldr	r2, [pc, #96]	; (8006ae4 <I2C_ITSlaveCplt+0x2b4>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00b      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <I2C_ITSlaveCplt+0x2b8>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d005      	beq.n	8006aa0 <I2C_ITSlaveCplt+0x270>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a14      	ldr	r2, [pc, #80]	; (8006aec <I2C_ITSlaveCplt+0x2bc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d127      	bne.n	8006af0 <I2C_ITSlaveCplt+0x2c0>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	e026      	b.n	8006afa <I2C_ITSlaveCplt+0x2ca>
 8006aac:	fe00e800 	.word	0xfe00e800
 8006ab0:	40020010 	.word	0x40020010
 8006ab4:	40020028 	.word	0x40020028
 8006ab8:	40020040 	.word	0x40020040
 8006abc:	40020058 	.word	0x40020058
 8006ac0:	40020070 	.word	0x40020070
 8006ac4:	40020088 	.word	0x40020088
 8006ac8:	400200a0 	.word	0x400200a0
 8006acc:	400200b8 	.word	0x400200b8
 8006ad0:	40020410 	.word	0x40020410
 8006ad4:	40020428 	.word	0x40020428
 8006ad8:	40020440 	.word	0x40020440
 8006adc:	40020458 	.word	0x40020458
 8006ae0:	40020470 	.word	0x40020470
 8006ae4:	40020488 	.word	0x40020488
 8006ae8:	400204a0 	.word	0x400204a0
 8006aec:	400204b8 	.word	0x400204b8
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	089b      	lsrs	r3, r3, #2
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d020      	beq.n	8006b4c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f023 0304 	bic.w	r3, r3, #4
 8006b10:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	f043 0204 	orr.w	r2, r3, #4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d010      	beq.n	8006b9a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f8a4 	bl	8006ccc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	2b28      	cmp	r3, #40	; 0x28
 8006b8e:	d141      	bne.n	8006c14 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b90:	6979      	ldr	r1, [r7, #20]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f844 	bl	8006c20 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b98:	e03c      	b.n	8006c14 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ba2:	d014      	beq.n	8006bce <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fd1a 	bl	80065de <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1b      	ldr	r2, [pc, #108]	; (8006c1c <I2C_ITSlaveCplt+0x3ec>)
 8006bae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fe ffa2 	bl	8005b10 <HAL_I2C_ListenCpltCallback>
}
 8006bcc:	e022      	b.n	8006c14 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b22      	cmp	r3, #34	; 0x22
 8006bd8:	d10e      	bne.n	8006bf8 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7fe ff75 	bl	8005ae0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006bf6:	e00d      	b.n	8006c14 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fe ff5c 	bl	8005acc <HAL_I2C_SlaveTxCpltCallback>
}
 8006c14:	bf00      	nop
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	ffff0000 	.word	0xffff0000

08006c20 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a26      	ldr	r2, [pc, #152]	; (8006cc8 <I2C_ITListenCplt+0xa8>)
 8006c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	089b      	lsrs	r3, r3, #2
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d022      	beq.n	8006c9e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d012      	beq.n	8006c9e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	f043 0204 	orr.w	r2, r3, #4
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c9e:	f248 0103 	movw	r1, #32771	; 0x8003
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fc82 	bl	80075ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2210      	movs	r2, #16
 8006cae:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fe ff29 	bl	8005b10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006cbe:	bf00      	nop
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	ffff0000 	.word	0xffff0000

08006ccc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a5d      	ldr	r2, [pc, #372]	; (8006e60 <I2C_ITError+0x194>)
 8006cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	2b28      	cmp	r3, #40	; 0x28
 8006d02:	d005      	beq.n	8006d10 <I2C_ITError+0x44>
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b29      	cmp	r3, #41	; 0x29
 8006d08:	d002      	beq.n	8006d10 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0e:	d10b      	bne.n	8006d28 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006d10:	2103      	movs	r1, #3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fc4a 	bl	80075ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2228      	movs	r2, #40	; 0x28
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a50      	ldr	r2, [pc, #320]	; (8006e64 <I2C_ITError+0x198>)
 8006d24:	635a      	str	r2, [r3, #52]	; 0x34
 8006d26:	e011      	b.n	8006d4c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006d28:	f248 0103 	movw	r1, #32771	; 0x8003
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fc3d 	bl	80075ac <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b60      	cmp	r3, #96	; 0x60
 8006d3c:	d003      	beq.n	8006d46 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d039      	beq.n	8006dce <I2C_ITError+0x102>
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b11      	cmp	r3, #17
 8006d5e:	d002      	beq.n	8006d66 <I2C_ITError+0x9a>
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b21      	cmp	r3, #33	; 0x21
 8006d64:	d133      	bne.n	8006dce <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d74:	d107      	bne.n	8006d86 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d84:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fd fcee 	bl	800476c <HAL_DMA_GetState>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d017      	beq.n	8006dc6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	4a33      	ldr	r2, [pc, #204]	; (8006e68 <I2C_ITError+0x19c>)
 8006d9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fc fb70 	bl	8003490 <HAL_DMA_Abort_IT>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d04d      	beq.n	8006e52 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006dc4:	e045      	b.n	8006e52 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f850 	bl	8006e6c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006dcc:	e041      	b.n	8006e52 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d039      	beq.n	8006e4a <I2C_ITError+0x17e>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b12      	cmp	r3, #18
 8006dda:	d002      	beq.n	8006de2 <I2C_ITError+0x116>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b22      	cmp	r3, #34	; 0x22
 8006de0:	d133      	bne.n	8006e4a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df0:	d107      	bne.n	8006e02 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e00:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fd fcb0 	bl	800476c <HAL_DMA_GetState>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d017      	beq.n	8006e42 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e16:	4a14      	ldr	r2, [pc, #80]	; (8006e68 <I2C_ITError+0x19c>)
 8006e18:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fc fb32 	bl	8003490 <HAL_DMA_Abort_IT>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d011      	beq.n	8006e56 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e40:	e009      	b.n	8006e56 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f812 	bl	8006e6c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e48:	e005      	b.n	8006e56 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f80e 	bl	8006e6c <I2C_TreatErrorCallback>
  }
}
 8006e50:	e002      	b.n	8006e58 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e52:	bf00      	nop
 8006e54:	e000      	b.n	8006e58 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e56:	bf00      	nop
}
 8006e58:	bf00      	nop
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	ffff0000 	.word	0xffff0000
 8006e64:	08005b61 	.word	0x08005b61
 8006e68:	08007209 	.word	0x08007209

08006e6c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b60      	cmp	r3, #96	; 0x60
 8006e7e:	d10e      	bne.n	8006e9e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fe fe58 	bl	8005b4c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e9c:	e009      	b.n	8006eb2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fe fe43 	bl	8005b38 <HAL_I2C_ErrorCallback>
}
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d103      	bne.n	8006ed8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d007      	beq.n	8006ef6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	699a      	ldr	r2, [r3, #24]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0201 	orr.w	r2, r2, #1
 8006ef4:	619a      	str	r2, [r3, #24]
  }
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f1e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006f2a:	2120      	movs	r1, #32
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 fad9 	bl	80074e4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006f32:	e02d      	b.n	8006f90 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006f3c:	441a      	add	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2bff      	cmp	r3, #255	; 0xff
 8006f4a:	d903      	bls.n	8006f54 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	22ff      	movs	r2, #255	; 0xff
 8006f50:	851a      	strh	r2, [r3, #40]	; 0x28
 8006f52:	e004      	b.n	8006f5e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3324      	adds	r3, #36	; 0x24
 8006f68:	4619      	mov	r1, r3
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f74:	f7fb fd04 	bl	8002980 <HAL_DMA_Start_IT>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d004      	beq.n	8006f88 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f7e:	2110      	movs	r1, #16
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f7ff fea3 	bl	8006ccc <I2C_ITError>
}
 8006f86:	e003      	b.n	8006f90 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006f88:	2140      	movs	r1, #64	; 0x40
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 faaa 	bl	80074e4 <I2C_Enable_IRQ>
}
 8006f90:	bf00      	nop
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d076      	beq.n	80070a0 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a83      	ldr	r2, [pc, #524]	; (80071c8 <I2C_DMAError+0x230>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d059      	beq.n	8007072 <I2C_DMAError+0xda>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a81      	ldr	r2, [pc, #516]	; (80071cc <I2C_DMAError+0x234>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d053      	beq.n	8007072 <I2C_DMAError+0xda>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a7f      	ldr	r2, [pc, #508]	; (80071d0 <I2C_DMAError+0x238>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d04d      	beq.n	8007072 <I2C_DMAError+0xda>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a7d      	ldr	r2, [pc, #500]	; (80071d4 <I2C_DMAError+0x23c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d047      	beq.n	8007072 <I2C_DMAError+0xda>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a7b      	ldr	r2, [pc, #492]	; (80071d8 <I2C_DMAError+0x240>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d041      	beq.n	8007072 <I2C_DMAError+0xda>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a79      	ldr	r2, [pc, #484]	; (80071dc <I2C_DMAError+0x244>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d03b      	beq.n	8007072 <I2C_DMAError+0xda>
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a77      	ldr	r2, [pc, #476]	; (80071e0 <I2C_DMAError+0x248>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d035      	beq.n	8007072 <I2C_DMAError+0xda>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a75      	ldr	r2, [pc, #468]	; (80071e4 <I2C_DMAError+0x24c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d02f      	beq.n	8007072 <I2C_DMAError+0xda>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a73      	ldr	r2, [pc, #460]	; (80071e8 <I2C_DMAError+0x250>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d029      	beq.n	8007072 <I2C_DMAError+0xda>
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a71      	ldr	r2, [pc, #452]	; (80071ec <I2C_DMAError+0x254>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d023      	beq.n	8007072 <I2C_DMAError+0xda>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a6f      	ldr	r2, [pc, #444]	; (80071f0 <I2C_DMAError+0x258>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d01d      	beq.n	8007072 <I2C_DMAError+0xda>
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a6d      	ldr	r2, [pc, #436]	; (80071f4 <I2C_DMAError+0x25c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d017      	beq.n	8007072 <I2C_DMAError+0xda>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a6b      	ldr	r2, [pc, #428]	; (80071f8 <I2C_DMAError+0x260>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d011      	beq.n	8007072 <I2C_DMAError+0xda>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a69      	ldr	r2, [pc, #420]	; (80071fc <I2C_DMAError+0x264>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00b      	beq.n	8007072 <I2C_DMAError+0xda>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a67      	ldr	r2, [pc, #412]	; (8007200 <I2C_DMAError+0x268>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d005      	beq.n	8007072 <I2C_DMAError+0xda>
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a65      	ldr	r2, [pc, #404]	; (8007204 <I2C_DMAError+0x26c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d109      	bne.n	8007086 <I2C_DMAError+0xee>
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	bf0c      	ite	eq
 800707e:	2301      	moveq	r3, #1
 8007080:	2300      	movne	r3, #0
 8007082:	b2db      	uxtb	r3, r3
 8007084:	e008      	b.n	8007098 <I2C_DMAError+0x100>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	bf0c      	ite	eq
 8007092:	2301      	moveq	r3, #1
 8007094:	2300      	movne	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800709c:	2301      	movs	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d076      	beq.n	8007196 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a46      	ldr	r2, [pc, #280]	; (80071c8 <I2C_DMAError+0x230>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d059      	beq.n	8007168 <I2C_DMAError+0x1d0>
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a44      	ldr	r2, [pc, #272]	; (80071cc <I2C_DMAError+0x234>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d053      	beq.n	8007168 <I2C_DMAError+0x1d0>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a42      	ldr	r2, [pc, #264]	; (80071d0 <I2C_DMAError+0x238>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d04d      	beq.n	8007168 <I2C_DMAError+0x1d0>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a40      	ldr	r2, [pc, #256]	; (80071d4 <I2C_DMAError+0x23c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d047      	beq.n	8007168 <I2C_DMAError+0x1d0>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a3e      	ldr	r2, [pc, #248]	; (80071d8 <I2C_DMAError+0x240>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d041      	beq.n	8007168 <I2C_DMAError+0x1d0>
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3c      	ldr	r2, [pc, #240]	; (80071dc <I2C_DMAError+0x244>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d03b      	beq.n	8007168 <I2C_DMAError+0x1d0>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a3a      	ldr	r2, [pc, #232]	; (80071e0 <I2C_DMAError+0x248>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d035      	beq.n	8007168 <I2C_DMAError+0x1d0>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a38      	ldr	r2, [pc, #224]	; (80071e4 <I2C_DMAError+0x24c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d02f      	beq.n	8007168 <I2C_DMAError+0x1d0>
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a36      	ldr	r2, [pc, #216]	; (80071e8 <I2C_DMAError+0x250>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d029      	beq.n	8007168 <I2C_DMAError+0x1d0>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a34      	ldr	r2, [pc, #208]	; (80071ec <I2C_DMAError+0x254>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d023      	beq.n	8007168 <I2C_DMAError+0x1d0>
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a32      	ldr	r2, [pc, #200]	; (80071f0 <I2C_DMAError+0x258>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d01d      	beq.n	8007168 <I2C_DMAError+0x1d0>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a30      	ldr	r2, [pc, #192]	; (80071f4 <I2C_DMAError+0x25c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d017      	beq.n	8007168 <I2C_DMAError+0x1d0>
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a2e      	ldr	r2, [pc, #184]	; (80071f8 <I2C_DMAError+0x260>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d011      	beq.n	8007168 <I2C_DMAError+0x1d0>
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a2c      	ldr	r2, [pc, #176]	; (80071fc <I2C_DMAError+0x264>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00b      	beq.n	8007168 <I2C_DMAError+0x1d0>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2a      	ldr	r2, [pc, #168]	; (8007200 <I2C_DMAError+0x268>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d005      	beq.n	8007168 <I2C_DMAError+0x1d0>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a28      	ldr	r2, [pc, #160]	; (8007204 <I2C_DMAError+0x26c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d109      	bne.n	800717c <I2C_DMAError+0x1e4>
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	bf0c      	ite	eq
 8007174:	2301      	moveq	r3, #1
 8007176:	2300      	movne	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	e008      	b.n	800718e <I2C_DMAError+0x1f6>
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	bf0c      	ite	eq
 8007188:	2301      	moveq	r3, #1
 800718a:	2300      	movne	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8007192:	2301      	movs	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fd faf6 	bl	8004788 <HAL_DMA_GetError>
 800719c:	4603      	mov	r3, r0
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d00e      	beq.n	80071c0 <I2C_DMAError+0x228>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071b6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80071b8:	2110      	movs	r1, #16
 80071ba:	68b8      	ldr	r0, [r7, #8]
 80071bc:	f7ff fd86 	bl	8006ccc <I2C_ITError>
  }
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40020010 	.word	0x40020010
 80071cc:	40020028 	.word	0x40020028
 80071d0:	40020040 	.word	0x40020040
 80071d4:	40020058 	.word	0x40020058
 80071d8:	40020070 	.word	0x40020070
 80071dc:	40020088 	.word	0x40020088
 80071e0:	400200a0 	.word	0x400200a0
 80071e4:	400200b8 	.word	0x400200b8
 80071e8:	40020410 	.word	0x40020410
 80071ec:	40020428 	.word	0x40020428
 80071f0:	40020440 	.word	0x40020440
 80071f4:	40020458 	.word	0x40020458
 80071f8:	40020470 	.word	0x40020470
 80071fc:	40020488 	.word	0x40020488
 8007200:	400204a0 	.word	0x400204a0
 8007204:	400204b8 	.word	0x400204b8

08007208 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007214:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	2200      	movs	r2, #0
 8007224:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	2b00      	cmp	r3, #0
 800722c:	d003      	beq.n	8007236 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	2200      	movs	r2, #0
 8007234:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f7ff fe18 	bl	8006e6c <I2C_TreatErrorCallback>
}
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	4613      	mov	r3, r2
 8007252:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007254:	e022      	b.n	800729c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725c:	d01e      	beq.n	800729c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725e:	f7fa fee7 	bl	8002030 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d302      	bcc.n	8007274 <I2C_WaitOnFlagUntilTimeout+0x30>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d113      	bne.n	800729c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007278:	f043 0220 	orr.w	r2, r3, #32
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e00f      	b.n	80072bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4013      	ands	r3, r2
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	79fb      	ldrb	r3, [r7, #7]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d0cd      	beq.n	8007256 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072d0:	e02c      	b.n	800732c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f870 	bl	80073bc <I2C_IsAcknowledgeFailed>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e02a      	b.n	800733c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ec:	d01e      	beq.n	800732c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ee:	f7fa fe9f 	bl	8002030 <HAL_GetTick>
 80072f2:	4602      	mov	r2, r0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d302      	bcc.n	8007304 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d113      	bne.n	800732c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007308:	f043 0220 	orr.w	r2, r3, #32
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2220      	movs	r2, #32
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e007      	b.n	800733c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b02      	cmp	r3, #2
 8007338:	d1cb      	bne.n	80072d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007350:	e028      	b.n	80073a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 f830 	bl	80073bc <I2C_IsAcknowledgeFailed>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e026      	b.n	80073b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007366:	f7fa fe63 	bl	8002030 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	429a      	cmp	r2, r3
 8007374:	d302      	bcc.n	800737c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d113      	bne.n	80073a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007380:	f043 0220 	orr.w	r2, r3, #32
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e007      	b.n	80073b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b20      	cmp	r3, #32
 80073b0:	d1cf      	bne.n	8007352 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d151      	bne.n	800747a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073d6:	e022      	b.n	800741e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d01e      	beq.n	800741e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073e0:	f7fa fe26 	bl	8002030 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d302      	bcc.n	80073f6 <I2C_IsAcknowledgeFailed+0x3a>
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d113      	bne.n	800741e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	f043 0220 	orr.w	r2, r3, #32
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2220      	movs	r2, #32
 8007406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e02e      	b.n	800747c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	f003 0320 	and.w	r3, r3, #32
 8007428:	2b20      	cmp	r3, #32
 800742a:	d1d5      	bne.n	80073d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2210      	movs	r2, #16
 8007432:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2220      	movs	r2, #32
 800743a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f7ff fd3c 	bl	8006eba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6859      	ldr	r1, [r3, #4]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <I2C_IsAcknowledgeFailed+0xc8>)
 800744e:	400b      	ands	r3, r1
 8007450:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007456:	f043 0204 	orr.w	r2, r3, #4
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2220      	movs	r2, #32
 8007462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	fe00e800 	.word	0xfe00e800

08007488 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	607b      	str	r3, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	817b      	strh	r3, [r7, #10]
 8007496:	4613      	mov	r3, r2
 8007498:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	0d5b      	lsrs	r3, r3, #21
 80074a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80074a8:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <I2C_TransferConfig+0x58>)
 80074aa:	430b      	orrs	r3, r1
 80074ac:	43db      	mvns	r3, r3
 80074ae:	ea02 0103 	and.w	r1, r2, r3
 80074b2:	897b      	ldrh	r3, [r7, #10]
 80074b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074b8:	7a7b      	ldrb	r3, [r7, #9]
 80074ba:	041b      	lsls	r3, r3, #16
 80074bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	431a      	orrs	r2, r3
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	03ff63ff 	.word	0x03ff63ff

080074e4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	4a2a      	ldr	r2, [pc, #168]	; (80075a4 <I2C_Enable_IRQ+0xc0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d004      	beq.n	8007508 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007502:	4a29      	ldr	r2, [pc, #164]	; (80075a8 <I2C_Enable_IRQ+0xc4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d11d      	bne.n	8007544 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007508:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800750c:	2b00      	cmp	r3, #0
 800750e:	da03      	bge.n	8007518 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007516:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007518:	887b      	ldrh	r3, [r7, #2]
 800751a:	2b10      	cmp	r3, #16
 800751c:	d103      	bne.n	8007526 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007524:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007526:	887b      	ldrh	r3, [r7, #2]
 8007528:	2b20      	cmp	r3, #32
 800752a:	d103      	bne.n	8007534 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007532:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007534:	887b      	ldrh	r3, [r7, #2]
 8007536:	2b40      	cmp	r3, #64	; 0x40
 8007538:	d125      	bne.n	8007586 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007540:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007542:	e020      	b.n	8007586 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007544:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007548:	2b00      	cmp	r3, #0
 800754a:	da03      	bge.n	8007554 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007552:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007554:	887b      	ldrh	r3, [r7, #2]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007564:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007566:	887b      	ldrh	r3, [r7, #2]
 8007568:	f003 0302 	and.w	r3, r3, #2
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007576:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	2b20      	cmp	r3, #32
 800757c:	d103      	bne.n	8007586 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6819      	ldr	r1, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	430a      	orrs	r2, r1
 8007594:	601a      	str	r2, [r3, #0]
}
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	08005d67 	.word	0x08005d67
 80075a8:	08005f4d 	.word	0x08005f4d

080075ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075bc:	887b      	ldrh	r3, [r7, #2]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00f      	beq.n	80075e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80075cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075da:	2b28      	cmp	r3, #40	; 0x28
 80075dc:	d003      	beq.n	80075e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80075e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075e6:	887b      	ldrh	r3, [r7, #2]
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00f      	beq.n	8007610 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80075f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007604:	2b28      	cmp	r3, #40	; 0x28
 8007606:	d003      	beq.n	8007610 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800760e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007610:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007614:	2b00      	cmp	r3, #0
 8007616:	da03      	bge.n	8007620 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800761e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007620:	887b      	ldrh	r3, [r7, #2]
 8007622:	2b10      	cmp	r3, #16
 8007624:	d103      	bne.n	800762e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800762c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800762e:	887b      	ldrh	r3, [r7, #2]
 8007630:	2b20      	cmp	r3, #32
 8007632:	d103      	bne.n	800763c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f043 0320 	orr.w	r3, r3, #32
 800763a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800763c:	887b      	ldrh	r3, [r7, #2]
 800763e:	2b40      	cmp	r3, #64	; 0x40
 8007640:	d103      	bne.n	800764a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007648:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6819      	ldr	r1, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	43da      	mvns	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	400a      	ands	r2, r1
 800765a:	601a      	str	r2, [r3, #0]
}
 800765c:	bf00      	nop
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b20      	cmp	r3, #32
 800767c:	d138      	bne.n	80076f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007684:	2b01      	cmp	r3, #1
 8007686:	d101      	bne.n	800768c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007688:	2302      	movs	r3, #2
 800768a:	e032      	b.n	80076f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2224      	movs	r2, #36	; 0x24
 8007698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0201 	bic.w	r2, r2, #1
 80076aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6819      	ldr	r1, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	683a      	ldr	r2, [r7, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	e000      	b.n	80076f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076f0:	2302      	movs	r3, #2
  }
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076fe:	b480      	push	{r7}
 8007700:	b085      	sub	sp, #20
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b20      	cmp	r3, #32
 8007712:	d139      	bne.n	8007788 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800771e:	2302      	movs	r3, #2
 8007720:	e033      	b.n	800778a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2224      	movs	r2, #36	; 0x24
 800772e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0201 	bic.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007750:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4313      	orrs	r3, r2
 800775a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	e000      	b.n	800778a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
	...

08007798 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80077a0:	4b19      	ldr	r3, [pc, #100]	; (8007808 <HAL_PWREx_ConfigSupply+0x70>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d00a      	beq.n	80077c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80077ac:	4b16      	ldr	r3, [pc, #88]	; (8007808 <HAL_PWREx_ConfigSupply+0x70>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d001      	beq.n	80077be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e01f      	b.n	80077fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	e01d      	b.n	80077fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80077c2:	4b11      	ldr	r3, [pc, #68]	; (8007808 <HAL_PWREx_ConfigSupply+0x70>)
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f023 0207 	bic.w	r2, r3, #7
 80077ca:	490f      	ldr	r1, [pc, #60]	; (8007808 <HAL_PWREx_ConfigSupply+0x70>)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80077d2:	f7fa fc2d 	bl	8002030 <HAL_GetTick>
 80077d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077d8:	e009      	b.n	80077ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80077da:	f7fa fc29 	bl	8002030 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077e8:	d901      	bls.n	80077ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e007      	b.n	80077fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077ee:	4b06      	ldr	r3, [pc, #24]	; (8007808 <HAL_PWREx_ConfigSupply+0x70>)
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fa:	d1ee      	bne.n	80077da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	58024800 	.word	0x58024800

0800780c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af02      	add	r7, sp, #8
 8007812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007814:	f7fa fc0c 	bl	8002030 <HAL_GetTick>
 8007818:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e05f      	b.n	80078e4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d107      	bne.n	8007840 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7f9 fe3f 	bl	80014b4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007836:	f241 3188 	movw	r1, #5000	; 0x1388
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f989 	bl	8007b52 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	3b01      	subs	r3, #1
 8007850:	021a      	lsls	r2, r3, #8
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	2120      	movs	r1, #32
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f981 	bl	8007b6e <QSPI_WaitFlagStateUntilTimeout>
 800786c:	4603      	mov	r3, r0
 800786e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d135      	bne.n	80078e2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <HAL_QSPI_Init+0xe0>)
 800787e:	4013      	ands	r3, r2
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6852      	ldr	r2, [r2, #4]
 8007884:	0611      	lsls	r1, r2, #24
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	68d2      	ldr	r2, [r2, #12]
 800788a:	4311      	orrs	r1, r2
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	69d2      	ldr	r2, [r2, #28]
 8007890:	4311      	orrs	r1, r2
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6a12      	ldr	r2, [r2, #32]
 8007896:	4311      	orrs	r1, r2
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	430b      	orrs	r3, r1
 800789e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	4b12      	ldr	r3, [pc, #72]	; (80078f0 <HAL_QSPI_Init+0xe4>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6912      	ldr	r2, [r2, #16]
 80078ae:	0411      	lsls	r1, r2, #16
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	6952      	ldr	r2, [r2, #20]
 80078b4:	4311      	orrs	r1, r2
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6992      	ldr	r2, [r2, #24]
 80078ba:	4311      	orrs	r1, r2
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	6812      	ldr	r2, [r2, #0]
 80078c0:	430b      	orrs	r3, r1
 80078c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80078e2:	7afb      	ldrb	r3, [r7, #11]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	00ffff2f 	.word	0x00ffff2f
 80078f0:	ffe0f8fe 	.word	0xffe0f8fe

080078f4 <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08a      	sub	sp, #40	; 0x28
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007904:	f7fa fb94 	bl	8002030 <HAL_GetTick>
 8007908:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	3320      	adds	r3, #32
 8007910:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_QSPI_Transmit+0x2e>
 800791e:	2302      	movs	r3, #2
 8007920:	e076      	b.n	8007a10 <HAL_QSPI_Transmit+0x11c>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b01      	cmp	r3, #1
 8007934:	d165      	bne.n	8007a02 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d056      	beq.n	80079f0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2212      	movs	r2, #18
 8007946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695a      	ldr	r2, [r3, #20]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007976:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8007978:	e01b      	b.n	80079b2 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	2201      	movs	r2, #1
 8007982:	2104      	movs	r1, #4
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f8f2 	bl	8007b6e <QSPI_WaitFlagStateUntilTimeout>
 800798a:	4603      	mov	r3, r0
 800798c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800798e:	7ffb      	ldrb	r3, [r7, #31]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d113      	bne.n	80079bc <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	781a      	ldrb	r2, [r3, #0]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	1e5a      	subs	r2, r3, #1
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1df      	bne.n	800797a <HAL_QSPI_Transmit+0x86>
 80079ba:	e000      	b.n	80079be <HAL_QSPI_Transmit+0xca>
          break;
 80079bc:	bf00      	nop
      }

      if (status == HAL_OK)
 80079be:	7ffb      	ldrb	r3, [r7, #31]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d110      	bne.n	80079e6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	9300      	str	r3, [sp, #0]
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2201      	movs	r2, #1
 80079cc:	2102      	movs	r1, #2
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f8cd 	bl	8007b6e <QSPI_WaitFlagStateUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80079d8:	7ffb      	ldrb	r3, [r7, #31]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d103      	bne.n	80079e6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2202      	movs	r2, #2
 80079e4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079ee:	e00a      	b.n	8007a06 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f4:	f043 0208 	orr.w	r2, r3, #8
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	77fb      	strb	r3, [r7, #31]
 8007a00:	e001      	b.n	8007a06 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007a02:	2302      	movs	r3, #2
 8007a04:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007a0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08a      	sub	sp, #40	; 0x28
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007a28:	f7fa fb02 	bl	8002030 <HAL_GetTick>
 8007a2c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3320      	adds	r3, #32
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_QSPI_Receive+0x36>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e07d      	b.n	8007b4a <HAL_QSPI_Receive+0x132>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d16c      	bne.n	8007b3c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d05d      	beq.n	8007b2a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2222      	movs	r2, #34	; 0x22
 8007a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	1c5a      	adds	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007aa6:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8007ab0:	e01c      	b.n	8007aec <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	2106      	movs	r1, #6
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 f856 	bl	8007b6e <QSPI_WaitFlagStateUntilTimeout>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8007ac6:	7ffb      	ldrb	r3, [r7, #31]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d114      	bne.n	8007af6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	7812      	ldrb	r2, [r2, #0]
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae6:	1e5a      	subs	r2, r3, #1
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1de      	bne.n	8007ab2 <HAL_QSPI_Receive+0x9a>
 8007af4:	e000      	b.n	8007af8 <HAL_QSPI_Receive+0xe0>
          break;
 8007af6:	bf00      	nop
      }

      if (status == HAL_OK)
 8007af8:	7ffb      	ldrb	r3, [r7, #31]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d110      	bne.n	8007b20 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2201      	movs	r2, #1
 8007b06:	2102      	movs	r1, #2
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 f830 	bl	8007b6e <QSPI_WaitFlagStateUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8007b12:	7ffb      	ldrb	r3, [r7, #31]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d103      	bne.n	8007b20 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b28:	e00a      	b.n	8007b40 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2e:	f043 0208 	orr.w	r2, r3, #8
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	77fb      	strb	r3, [r7, #31]
 8007b3a:	e001      	b.n	8007b40 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3720      	adds	r7, #32
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b084      	sub	sp, #16
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	60f8      	str	r0, [r7, #12]
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	603b      	str	r3, [r7, #0]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007b7e:	e01a      	b.n	8007bb6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b86:	d016      	beq.n	8007bb6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b88:	f7fa fa52 	bl	8002030 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d302      	bcc.n	8007b9e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10b      	bne.n	8007bb6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007baa:	f043 0201 	orr.w	r2, r3, #1
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e00e      	b.n	8007bd4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	bf14      	ite	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2300      	moveq	r3, #0
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d1d6      	bne.n	8007b80 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08c      	sub	sp, #48	; 0x30
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e3ff      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0301 	and.w	r3, r3, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 8087 	beq.w	8007d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bfc:	4b99      	ldr	r3, [pc, #612]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c06:	4b97      	ldr	r3, [pc, #604]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d007      	beq.n	8007c22 <HAL_RCC_OscConfig+0x46>
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	2b18      	cmp	r3, #24
 8007c16:	d110      	bne.n	8007c3a <HAL_RCC_OscConfig+0x5e>
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d10b      	bne.n	8007c3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c22:	4b90      	ldr	r3, [pc, #576]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d06c      	beq.n	8007d08 <HAL_RCC_OscConfig+0x12c>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d168      	bne.n	8007d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e3d9      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c42:	d106      	bne.n	8007c52 <HAL_RCC_OscConfig+0x76>
 8007c44:	4b87      	ldr	r3, [pc, #540]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a86      	ldr	r2, [pc, #536]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	e02e      	b.n	8007cb0 <HAL_RCC_OscConfig+0xd4>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10c      	bne.n	8007c74 <HAL_RCC_OscConfig+0x98>
 8007c5a:	4b82      	ldr	r3, [pc, #520]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a81      	ldr	r2, [pc, #516]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	4b7f      	ldr	r3, [pc, #508]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a7e      	ldr	r2, [pc, #504]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	e01d      	b.n	8007cb0 <HAL_RCC_OscConfig+0xd4>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c7c:	d10c      	bne.n	8007c98 <HAL_RCC_OscConfig+0xbc>
 8007c7e:	4b79      	ldr	r3, [pc, #484]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a78      	ldr	r2, [pc, #480]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	4b76      	ldr	r3, [pc, #472]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a75      	ldr	r2, [pc, #468]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	e00b      	b.n	8007cb0 <HAL_RCC_OscConfig+0xd4>
 8007c98:	4b72      	ldr	r3, [pc, #456]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a71      	ldr	r2, [pc, #452]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	4b6f      	ldr	r3, [pc, #444]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a6e      	ldr	r2, [pc, #440]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d013      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb8:	f7fa f9ba 	bl	8002030 <HAL_GetTick>
 8007cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cc0:	f7fa f9b6 	bl	8002030 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b64      	cmp	r3, #100	; 0x64
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e38d      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cd2:	4b64      	ldr	r3, [pc, #400]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d0f0      	beq.n	8007cc0 <HAL_RCC_OscConfig+0xe4>
 8007cde:	e014      	b.n	8007d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce0:	f7fa f9a6 	bl	8002030 <HAL_GetTick>
 8007ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ce8:	f7fa f9a2 	bl	8002030 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b64      	cmp	r3, #100	; 0x64
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e379      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007cfa:	4b5a      	ldr	r3, [pc, #360]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1f0      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x10c>
 8007d06:	e000      	b.n	8007d0a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 80ae 	beq.w	8007e74 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d18:	4b52      	ldr	r3, [pc, #328]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d22:	4b50      	ldr	r3, [pc, #320]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d007      	beq.n	8007d3e <HAL_RCC_OscConfig+0x162>
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	2b18      	cmp	r3, #24
 8007d32:	d13a      	bne.n	8007daa <HAL_RCC_OscConfig+0x1ce>
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	f003 0303 	and.w	r3, r3, #3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d135      	bne.n	8007daa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d3e:	4b49      	ldr	r3, [pc, #292]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <HAL_RCC_OscConfig+0x17a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e34b      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d56:	f7fa f99b 	bl	8002090 <HAL_GetREVID>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d817      	bhi.n	8007d94 <HAL_RCC_OscConfig+0x1b8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	2b40      	cmp	r3, #64	; 0x40
 8007d6a:	d108      	bne.n	8007d7e <HAL_RCC_OscConfig+0x1a2>
 8007d6c:	4b3d      	ldr	r3, [pc, #244]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d74:	4a3b      	ldr	r2, [pc, #236]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d7a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d7c:	e07a      	b.n	8007e74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d7e:	4b39      	ldr	r3, [pc, #228]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	031b      	lsls	r3, r3, #12
 8007d8c:	4935      	ldr	r1, [pc, #212]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d92:	e06f      	b.n	8007e74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d94:	4b33      	ldr	r3, [pc, #204]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	061b      	lsls	r3, r3, #24
 8007da2:	4930      	ldr	r1, [pc, #192]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007da8:	e064      	b.n	8007e74 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d045      	beq.n	8007e3e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007db2:	4b2c      	ldr	r3, [pc, #176]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f023 0219 	bic.w	r2, r3, #25
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	4929      	ldr	r1, [pc, #164]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc4:	f7fa f934 	bl	8002030 <HAL_GetTick>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dca:	e008      	b.n	8007dde <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dcc:	f7fa f930 	bl	8002030 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d901      	bls.n	8007dde <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e307      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dde:	4b21      	ldr	r3, [pc, #132]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0304 	and.w	r3, r3, #4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0f0      	beq.n	8007dcc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dea:	f7fa f951 	bl	8002090 <HAL_GetREVID>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d817      	bhi.n	8007e28 <HAL_RCC_OscConfig+0x24c>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	d108      	bne.n	8007e12 <HAL_RCC_OscConfig+0x236>
 8007e00:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007e08:	4a16      	ldr	r2, [pc, #88]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e0e:	6053      	str	r3, [r2, #4]
 8007e10:	e030      	b.n	8007e74 <HAL_RCC_OscConfig+0x298>
 8007e12:	4b14      	ldr	r3, [pc, #80]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	031b      	lsls	r3, r3, #12
 8007e20:	4910      	ldr	r1, [pc, #64]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	604b      	str	r3, [r1, #4]
 8007e26:	e025      	b.n	8007e74 <HAL_RCC_OscConfig+0x298>
 8007e28:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	061b      	lsls	r3, r3, #24
 8007e36:	490b      	ldr	r1, [pc, #44]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	604b      	str	r3, [r1, #4]
 8007e3c:	e01a      	b.n	8007e74 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e3e:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a08      	ldr	r2, [pc, #32]	; (8007e64 <HAL_RCC_OscConfig+0x288>)
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4a:	f7fa f8f1 	bl	8002030 <HAL_GetTick>
 8007e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e50:	e00a      	b.n	8007e68 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e52:	f7fa f8ed 	bl	8002030 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d903      	bls.n	8007e68 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e2c4      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
 8007e64:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007e68:	4ba4      	ldr	r3, [pc, #656]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1ee      	bne.n	8007e52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0310 	and.w	r3, r3, #16
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 80a9 	beq.w	8007fd4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e82:	4b9e      	ldr	r3, [pc, #632]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e8c:	4b9b      	ldr	r3, [pc, #620]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d007      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x2cc>
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	2b18      	cmp	r3, #24
 8007e9c:	d13a      	bne.n	8007f14 <HAL_RCC_OscConfig+0x338>
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d135      	bne.n	8007f14 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ea8:	4b94      	ldr	r3, [pc, #592]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x2e4>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	69db      	ldr	r3, [r3, #28]
 8007eb8:	2b80      	cmp	r3, #128	; 0x80
 8007eba:	d001      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e296      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ec0:	f7fa f8e6 	bl	8002090 <HAL_GetREVID>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d817      	bhi.n	8007efe <HAL_RCC_OscConfig+0x322>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	2b20      	cmp	r3, #32
 8007ed4:	d108      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x30c>
 8007ed6:	4b89      	ldr	r3, [pc, #548]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ede:	4a87      	ldr	r2, [pc, #540]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007ee0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ee4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ee6:	e075      	b.n	8007fd4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ee8:	4b84      	ldr	r3, [pc, #528]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a1b      	ldr	r3, [r3, #32]
 8007ef4:	069b      	lsls	r3, r3, #26
 8007ef6:	4981      	ldr	r1, [pc, #516]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007efc:	e06a      	b.n	8007fd4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007efe:	4b7f      	ldr	r3, [pc, #508]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	061b      	lsls	r3, r3, #24
 8007f0c:	497b      	ldr	r1, [pc, #492]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f12:	e05f      	b.n	8007fd4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d042      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007f1c:	4b77      	ldr	r3, [pc, #476]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a76      	ldr	r2, [pc, #472]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f28:	f7fa f882 	bl	8002030 <HAL_GetTick>
 8007f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f30:	f7fa f87e 	bl	8002030 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e255      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f42:	4b6e      	ldr	r3, [pc, #440]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0f0      	beq.n	8007f30 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007f4e:	f7fa f89f 	bl	8002090 <HAL_GetREVID>
 8007f52:	4603      	mov	r3, r0
 8007f54:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d817      	bhi.n	8007f8c <HAL_RCC_OscConfig+0x3b0>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d108      	bne.n	8007f76 <HAL_RCC_OscConfig+0x39a>
 8007f64:	4b65      	ldr	r3, [pc, #404]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007f6c:	4a63      	ldr	r2, [pc, #396]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f72:	6053      	str	r3, [r2, #4]
 8007f74:	e02e      	b.n	8007fd4 <HAL_RCC_OscConfig+0x3f8>
 8007f76:	4b61      	ldr	r3, [pc, #388]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	069b      	lsls	r3, r3, #26
 8007f84:	495d      	ldr	r1, [pc, #372]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	604b      	str	r3, [r1, #4]
 8007f8a:	e023      	b.n	8007fd4 <HAL_RCC_OscConfig+0x3f8>
 8007f8c:	4b5b      	ldr	r3, [pc, #364]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	061b      	lsls	r3, r3, #24
 8007f9a:	4958      	ldr	r1, [pc, #352]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60cb      	str	r3, [r1, #12]
 8007fa0:	e018      	b.n	8007fd4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007fa2:	4b56      	ldr	r3, [pc, #344]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a55      	ldr	r2, [pc, #340]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fae:	f7fa f83f 	bl	8002030 <HAL_GetTick>
 8007fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007fb6:	f7fa f83b 	bl	8002030 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e212      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007fc8:	4b4c      	ldr	r3, [pc, #304]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1f0      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d036      	beq.n	800804e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d019      	beq.n	800801c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007fe8:	4b44      	ldr	r3, [pc, #272]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fec:	4a43      	ldr	r2, [pc, #268]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8007fee:	f043 0301 	orr.w	r3, r3, #1
 8007ff2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ff4:	f7fa f81c 	bl	8002030 <HAL_GetTick>
 8007ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ffa:	e008      	b.n	800800e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ffc:	f7fa f818 	bl	8002030 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	2b02      	cmp	r3, #2
 8008008:	d901      	bls.n	800800e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e1ef      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800800e:	4b3b      	ldr	r3, [pc, #236]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8008010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0f0      	beq.n	8007ffc <HAL_RCC_OscConfig+0x420>
 800801a:	e018      	b.n	800804e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800801c:	4b37      	ldr	r3, [pc, #220]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 800801e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008020:	4a36      	ldr	r2, [pc, #216]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8008022:	f023 0301 	bic.w	r3, r3, #1
 8008026:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008028:	f7fa f802 	bl	8002030 <HAL_GetTick>
 800802c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008030:	f7f9 fffe 	bl	8002030 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e1d5      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008042:	4b2e      	ldr	r3, [pc, #184]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8008044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f0      	bne.n	8008030 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d036      	beq.n	80080c8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d019      	beq.n	8008096 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008062:	4b26      	ldr	r3, [pc, #152]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a25      	ldr	r2, [pc, #148]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8008068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800806c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800806e:	f7f9 ffdf 	bl	8002030 <HAL_GetTick>
 8008072:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008074:	e008      	b.n	8008088 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008076:	f7f9 ffdb 	bl	8002030 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d901      	bls.n	8008088 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e1b2      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008088:	4b1c      	ldr	r3, [pc, #112]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d0f0      	beq.n	8008076 <HAL_RCC_OscConfig+0x49a>
 8008094:	e018      	b.n	80080c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008096:	4b19      	ldr	r3, [pc, #100]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a18      	ldr	r2, [pc, #96]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 800809c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80080a2:	f7f9 ffc5 	bl	8002030 <HAL_GetTick>
 80080a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80080aa:	f7f9 ffc1 	bl	8002030 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e198      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80080bc:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <HAL_RCC_OscConfig+0x520>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1f0      	bne.n	80080aa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 8085 	beq.w	80081e0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80080d6:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <HAL_RCC_OscConfig+0x524>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a09      	ldr	r2, [pc, #36]	; (8008100 <HAL_RCC_OscConfig+0x524>)
 80080dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080e2:	f7f9 ffa5 	bl	8002030 <HAL_GetTick>
 80080e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080e8:	e00c      	b.n	8008104 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80080ea:	f7f9 ffa1 	bl	8002030 <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	2b64      	cmp	r3, #100	; 0x64
 80080f6:	d905      	bls.n	8008104 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e178      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
 80080fc:	58024400 	.word	0x58024400
 8008100:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008104:	4b96      	ldr	r3, [pc, #600]	; (8008360 <HAL_RCC_OscConfig+0x784>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0ec      	beq.n	80080ea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d106      	bne.n	8008126 <HAL_RCC_OscConfig+0x54a>
 8008118:	4b92      	ldr	r3, [pc, #584]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800811a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811c:	4a91      	ldr	r2, [pc, #580]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800811e:	f043 0301 	orr.w	r3, r3, #1
 8008122:	6713      	str	r3, [r2, #112]	; 0x70
 8008124:	e02d      	b.n	8008182 <HAL_RCC_OscConfig+0x5a6>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10c      	bne.n	8008148 <HAL_RCC_OscConfig+0x56c>
 800812e:	4b8d      	ldr	r3, [pc, #564]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008132:	4a8c      	ldr	r2, [pc, #560]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008134:	f023 0301 	bic.w	r3, r3, #1
 8008138:	6713      	str	r3, [r2, #112]	; 0x70
 800813a:	4b8a      	ldr	r3, [pc, #552]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	4a89      	ldr	r2, [pc, #548]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008140:	f023 0304 	bic.w	r3, r3, #4
 8008144:	6713      	str	r3, [r2, #112]	; 0x70
 8008146:	e01c      	b.n	8008182 <HAL_RCC_OscConfig+0x5a6>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b05      	cmp	r3, #5
 800814e:	d10c      	bne.n	800816a <HAL_RCC_OscConfig+0x58e>
 8008150:	4b84      	ldr	r3, [pc, #528]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008154:	4a83      	ldr	r2, [pc, #524]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008156:	f043 0304 	orr.w	r3, r3, #4
 800815a:	6713      	str	r3, [r2, #112]	; 0x70
 800815c:	4b81      	ldr	r3, [pc, #516]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800815e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008160:	4a80      	ldr	r2, [pc, #512]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	6713      	str	r3, [r2, #112]	; 0x70
 8008168:	e00b      	b.n	8008182 <HAL_RCC_OscConfig+0x5a6>
 800816a:	4b7e      	ldr	r3, [pc, #504]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	4a7d      	ldr	r2, [pc, #500]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008170:	f023 0301 	bic.w	r3, r3, #1
 8008174:	6713      	str	r3, [r2, #112]	; 0x70
 8008176:	4b7b      	ldr	r3, [pc, #492]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817a:	4a7a      	ldr	r2, [pc, #488]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800817c:	f023 0304 	bic.w	r3, r3, #4
 8008180:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d015      	beq.n	80081b6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800818a:	f7f9 ff51 	bl	8002030 <HAL_GetTick>
 800818e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008190:	e00a      	b.n	80081a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008192:	f7f9 ff4d 	bl	8002030 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	f241 3288 	movw	r2, #5000	; 0x1388
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d901      	bls.n	80081a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e122      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081a8:	4b6e      	ldr	r3, [pc, #440]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80081aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0ee      	beq.n	8008192 <HAL_RCC_OscConfig+0x5b6>
 80081b4:	e014      	b.n	80081e0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b6:	f7f9 ff3b 	bl	8002030 <HAL_GetTick>
 80081ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081bc:	e00a      	b.n	80081d4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081be:	f7f9 ff37 	bl	8002030 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d901      	bls.n	80081d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e10c      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80081d4:	4b63      	ldr	r3, [pc, #396]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80081d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1ee      	bne.n	80081be <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8101 	beq.w	80083ec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80081ea:	4b5e      	ldr	r3, [pc, #376]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081f2:	2b18      	cmp	r3, #24
 80081f4:	f000 80bc 	beq.w	8008370 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	f040 8095 	bne.w	800832c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008202:	4b58      	ldr	r3, [pc, #352]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a57      	ldr	r2, [pc, #348]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800820c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820e:	f7f9 ff0f 	bl	8002030 <HAL_GetTick>
 8008212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008214:	e008      	b.n	8008228 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008216:	f7f9 ff0b 	bl	8002030 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d901      	bls.n	8008228 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e0e2      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008228:	4b4e      	ldr	r3, [pc, #312]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f0      	bne.n	8008216 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008234:	4b4b      	ldr	r3, [pc, #300]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008238:	4b4b      	ldr	r3, [pc, #300]	; (8008368 <HAL_RCC_OscConfig+0x78c>)
 800823a:	4013      	ands	r3, r2
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008244:	0112      	lsls	r2, r2, #4
 8008246:	430a      	orrs	r2, r1
 8008248:	4946      	ldr	r1, [pc, #280]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800824a:	4313      	orrs	r3, r2
 800824c:	628b      	str	r3, [r1, #40]	; 0x28
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	3b01      	subs	r3, #1
 8008254:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825c:	3b01      	subs	r3, #1
 800825e:	025b      	lsls	r3, r3, #9
 8008260:	b29b      	uxth	r3, r3
 8008262:	431a      	orrs	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008268:	3b01      	subs	r3, #1
 800826a:	041b      	lsls	r3, r3, #16
 800826c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008270:	431a      	orrs	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008276:	3b01      	subs	r3, #1
 8008278:	061b      	lsls	r3, r3, #24
 800827a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800827e:	4939      	ldr	r1, [pc, #228]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008280:	4313      	orrs	r3, r2
 8008282:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008284:	4b37      	ldr	r3, [pc, #220]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	4a36      	ldr	r2, [pc, #216]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800828a:	f023 0301 	bic.w	r3, r3, #1
 800828e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008290:	4b34      	ldr	r3, [pc, #208]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008294:	4b35      	ldr	r3, [pc, #212]	; (800836c <HAL_RCC_OscConfig+0x790>)
 8008296:	4013      	ands	r3, r2
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800829c:	00d2      	lsls	r2, r2, #3
 800829e:	4931      	ldr	r1, [pc, #196]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80082a4:	4b2f      	ldr	r3, [pc, #188]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a8:	f023 020c 	bic.w	r2, r3, #12
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b0:	492c      	ldr	r1, [pc, #176]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80082b6:	4b2b      	ldr	r3, [pc, #172]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	f023 0202 	bic.w	r2, r3, #2
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c2:	4928      	ldr	r1, [pc, #160]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80082c8:	4b26      	ldr	r3, [pc, #152]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	4a25      	ldr	r2, [pc, #148]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d4:	4b23      	ldr	r3, [pc, #140]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	4a22      	ldr	r2, [pc, #136]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80082e0:	4b20      	ldr	r3, [pc, #128]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	4a1f      	ldr	r2, [pc, #124]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80082ec:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	4a1c      	ldr	r2, [pc, #112]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082f2:	f043 0301 	orr.w	r3, r3, #1
 80082f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082f8:	4b1a      	ldr	r3, [pc, #104]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a19      	ldr	r2, [pc, #100]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 80082fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008304:	f7f9 fe94 	bl	8002030 <HAL_GetTick>
 8008308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800830a:	e008      	b.n	800831e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800830c:	f7f9 fe90 	bl	8002030 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b02      	cmp	r3, #2
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e067      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800831e:	4b11      	ldr	r3, [pc, #68]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0f0      	beq.n	800830c <HAL_RCC_OscConfig+0x730>
 800832a:	e05f      	b.n	80083ec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800832c:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a0c      	ldr	r2, [pc, #48]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008338:	f7f9 fe7a 	bl	8002030 <HAL_GetTick>
 800833c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008340:	f7f9 fe76 	bl	8002030 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e04d      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008352:	4b04      	ldr	r3, [pc, #16]	; (8008364 <HAL_RCC_OscConfig+0x788>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1f0      	bne.n	8008340 <HAL_RCC_OscConfig+0x764>
 800835e:	e045      	b.n	80083ec <HAL_RCC_OscConfig+0x810>
 8008360:	58024800 	.word	0x58024800
 8008364:	58024400 	.word	0x58024400
 8008368:	fffffc0c 	.word	0xfffffc0c
 800836c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008370:	4b21      	ldr	r3, [pc, #132]	; (80083f8 <HAL_RCC_OscConfig+0x81c>)
 8008372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008374:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008376:	4b20      	ldr	r3, [pc, #128]	; (80083f8 <HAL_RCC_OscConfig+0x81c>)
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	2b01      	cmp	r3, #1
 8008382:	d031      	beq.n	80083e8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f003 0203 	and.w	r2, r3, #3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800838e:	429a      	cmp	r2, r3
 8008390:	d12a      	bne.n	80083e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	091b      	lsrs	r3, r3, #4
 8008396:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800839e:	429a      	cmp	r2, r3
 80083a0:	d122      	bne.n	80083e8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d11a      	bne.n	80083e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	0a5b      	lsrs	r3, r3, #9
 80083b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d111      	bne.n	80083e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	0c1b      	lsrs	r3, r3, #16
 80083c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d108      	bne.n	80083e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	0e1b      	lsrs	r3, r3, #24
 80083da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d001      	beq.n	80083ec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e000      	b.n	80083ee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3730      	adds	r7, #48	; 0x30
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	58024400 	.word	0x58024400

080083fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e19c      	b.n	800874a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008410:	4b8a      	ldr	r3, [pc, #552]	; (800863c <HAL_RCC_ClockConfig+0x240>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 030f 	and.w	r3, r3, #15
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	429a      	cmp	r2, r3
 800841c:	d910      	bls.n	8008440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800841e:	4b87      	ldr	r3, [pc, #540]	; (800863c <HAL_RCC_ClockConfig+0x240>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f023 020f 	bic.w	r2, r3, #15
 8008426:	4985      	ldr	r1, [pc, #532]	; (800863c <HAL_RCC_ClockConfig+0x240>)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	4313      	orrs	r3, r2
 800842c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800842e:	4b83      	ldr	r3, [pc, #524]	; (800863c <HAL_RCC_ClockConfig+0x240>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d001      	beq.n	8008440 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e184      	b.n	800874a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d010      	beq.n	800846e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	4b7b      	ldr	r3, [pc, #492]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008458:	429a      	cmp	r2, r3
 800845a:	d908      	bls.n	800846e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800845c:	4b78      	ldr	r3, [pc, #480]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	4975      	ldr	r1, [pc, #468]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 800846a:	4313      	orrs	r3, r2
 800846c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0308 	and.w	r3, r3, #8
 8008476:	2b00      	cmp	r3, #0
 8008478:	d010      	beq.n	800849c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695a      	ldr	r2, [r3, #20]
 800847e:	4b70      	ldr	r3, [pc, #448]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008486:	429a      	cmp	r2, r3
 8008488:	d908      	bls.n	800849c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800848a:	4b6d      	ldr	r3, [pc, #436]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	496a      	ldr	r1, [pc, #424]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 8008498:	4313      	orrs	r3, r2
 800849a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0310 	and.w	r3, r3, #16
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d010      	beq.n	80084ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	699a      	ldr	r2, [r3, #24]
 80084ac:	4b64      	ldr	r3, [pc, #400]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d908      	bls.n	80084ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80084b8:	4b61      	ldr	r3, [pc, #388]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	495e      	ldr	r1, [pc, #376]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d010      	beq.n	80084f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69da      	ldr	r2, [r3, #28]
 80084da:	4b59      	ldr	r3, [pc, #356]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d908      	bls.n	80084f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80084e6:	4b56      	ldr	r3, [pc, #344]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	4953      	ldr	r1, [pc, #332]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d010      	beq.n	8008526 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	4b4d      	ldr	r3, [pc, #308]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	f003 030f 	and.w	r3, r3, #15
 8008510:	429a      	cmp	r2, r3
 8008512:	d908      	bls.n	8008526 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008514:	4b4a      	ldr	r3, [pc, #296]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f023 020f 	bic.w	r2, r3, #15
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	4947      	ldr	r1, [pc, #284]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 8008522:	4313      	orrs	r3, r2
 8008524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	d055      	beq.n	80085de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008532:	4b43      	ldr	r3, [pc, #268]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	4940      	ldr	r1, [pc, #256]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 8008540:	4313      	orrs	r3, r2
 8008542:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d107      	bne.n	800855c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800854c:	4b3c      	ldr	r3, [pc, #240]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d121      	bne.n	800859c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e0f6      	b.n	800874a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b03      	cmp	r3, #3
 8008562:	d107      	bne.n	8008574 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008564:	4b36      	ldr	r3, [pc, #216]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d115      	bne.n	800859c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e0ea      	b.n	800874a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d107      	bne.n	800858c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800857c:	4b30      	ldr	r3, [pc, #192]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d109      	bne.n	800859c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e0de      	b.n	800874a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800858c:	4b2c      	ldr	r3, [pc, #176]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e0d6      	b.n	800874a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800859c:	4b28      	ldr	r3, [pc, #160]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	f023 0207 	bic.w	r2, r3, #7
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	4925      	ldr	r1, [pc, #148]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ae:	f7f9 fd3f 	bl	8002030 <HAL_GetTick>
 80085b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085b4:	e00a      	b.n	80085cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085b6:	f7f9 fd3b 	bl	8002030 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d901      	bls.n	80085cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e0be      	b.n	800874a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085cc:	4b1c      	ldr	r3, [pc, #112]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	00db      	lsls	r3, r3, #3
 80085da:	429a      	cmp	r2, r3
 80085dc:	d1eb      	bne.n	80085b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d010      	beq.n	800860c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68da      	ldr	r2, [r3, #12]
 80085ee:	4b14      	ldr	r3, [pc, #80]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	f003 030f 	and.w	r3, r3, #15
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d208      	bcs.n	800860c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085fa:	4b11      	ldr	r3, [pc, #68]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	f023 020f 	bic.w	r2, r3, #15
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	490e      	ldr	r1, [pc, #56]	; (8008640 <HAL_RCC_ClockConfig+0x244>)
 8008608:	4313      	orrs	r3, r2
 800860a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800860c:	4b0b      	ldr	r3, [pc, #44]	; (800863c <HAL_RCC_ClockConfig+0x240>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d214      	bcs.n	8008644 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800861a:	4b08      	ldr	r3, [pc, #32]	; (800863c <HAL_RCC_ClockConfig+0x240>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f023 020f 	bic.w	r2, r3, #15
 8008622:	4906      	ldr	r1, [pc, #24]	; (800863c <HAL_RCC_ClockConfig+0x240>)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	4313      	orrs	r3, r2
 8008628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800862a:	4b04      	ldr	r3, [pc, #16]	; (800863c <HAL_RCC_ClockConfig+0x240>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d005      	beq.n	8008644 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e086      	b.n	800874a <HAL_RCC_ClockConfig+0x34e>
 800863c:	52002000 	.word	0x52002000
 8008640:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d010      	beq.n	8008672 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691a      	ldr	r2, [r3, #16]
 8008654:	4b3f      	ldr	r3, [pc, #252]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800865c:	429a      	cmp	r2, r3
 800865e:	d208      	bcs.n	8008672 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008660:	4b3c      	ldr	r3, [pc, #240]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	4939      	ldr	r1, [pc, #228]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 800866e:	4313      	orrs	r3, r2
 8008670:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d010      	beq.n	80086a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	695a      	ldr	r2, [r3, #20]
 8008682:	4b34      	ldr	r3, [pc, #208]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800868a:	429a      	cmp	r2, r3
 800868c:	d208      	bcs.n	80086a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800868e:	4b31      	ldr	r3, [pc, #196]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	492e      	ldr	r1, [pc, #184]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 800869c:	4313      	orrs	r3, r2
 800869e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d010      	beq.n	80086ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	4b28      	ldr	r3, [pc, #160]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d208      	bcs.n	80086ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80086bc:	4b25      	ldr	r3, [pc, #148]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	4922      	ldr	r1, [pc, #136]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d010      	beq.n	80086fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	69da      	ldr	r2, [r3, #28]
 80086de:	4b1d      	ldr	r3, [pc, #116]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d208      	bcs.n	80086fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80086ea:	4b1a      	ldr	r3, [pc, #104]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	4917      	ldr	r1, [pc, #92]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80086fc:	f000 f834 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008700:	4602      	mov	r2, r0
 8008702:	4b14      	ldr	r3, [pc, #80]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	0a1b      	lsrs	r3, r3, #8
 8008708:	f003 030f 	and.w	r3, r3, #15
 800870c:	4912      	ldr	r1, [pc, #72]	; (8008758 <HAL_RCC_ClockConfig+0x35c>)
 800870e:	5ccb      	ldrb	r3, [r1, r3]
 8008710:	f003 031f 	and.w	r3, r3, #31
 8008714:	fa22 f303 	lsr.w	r3, r2, r3
 8008718:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800871a:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <HAL_RCC_ClockConfig+0x358>)
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	4a0d      	ldr	r2, [pc, #52]	; (8008758 <HAL_RCC_ClockConfig+0x35c>)
 8008724:	5cd3      	ldrb	r3, [r2, r3]
 8008726:	f003 031f 	and.w	r3, r3, #31
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	fa22 f303 	lsr.w	r3, r2, r3
 8008730:	4a0a      	ldr	r2, [pc, #40]	; (800875c <HAL_RCC_ClockConfig+0x360>)
 8008732:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008734:	4a0a      	ldr	r2, [pc, #40]	; (8008760 <HAL_RCC_ClockConfig+0x364>)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800873a:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <HAL_RCC_ClockConfig+0x368>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4618      	mov	r0, r3
 8008740:	f7f9 fc2c 	bl	8001f9c <HAL_InitTick>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	58024400 	.word	0x58024400
 8008758:	0800ebd0 	.word	0x0800ebd0
 800875c:	24000010 	.word	0x24000010
 8008760:	2400000c 	.word	0x2400000c
 8008764:	24000014 	.word	0x24000014

08008768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008768:	b480      	push	{r7}
 800876a:	b089      	sub	sp, #36	; 0x24
 800876c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800876e:	4bb3      	ldr	r3, [pc, #716]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008776:	2b18      	cmp	r3, #24
 8008778:	f200 8155 	bhi.w	8008a26 <HAL_RCC_GetSysClockFreq+0x2be>
 800877c:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <HAL_RCC_GetSysClockFreq+0x1c>)
 800877e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008782:	bf00      	nop
 8008784:	080087e9 	.word	0x080087e9
 8008788:	08008a27 	.word	0x08008a27
 800878c:	08008a27 	.word	0x08008a27
 8008790:	08008a27 	.word	0x08008a27
 8008794:	08008a27 	.word	0x08008a27
 8008798:	08008a27 	.word	0x08008a27
 800879c:	08008a27 	.word	0x08008a27
 80087a0:	08008a27 	.word	0x08008a27
 80087a4:	0800880f 	.word	0x0800880f
 80087a8:	08008a27 	.word	0x08008a27
 80087ac:	08008a27 	.word	0x08008a27
 80087b0:	08008a27 	.word	0x08008a27
 80087b4:	08008a27 	.word	0x08008a27
 80087b8:	08008a27 	.word	0x08008a27
 80087bc:	08008a27 	.word	0x08008a27
 80087c0:	08008a27 	.word	0x08008a27
 80087c4:	08008815 	.word	0x08008815
 80087c8:	08008a27 	.word	0x08008a27
 80087cc:	08008a27 	.word	0x08008a27
 80087d0:	08008a27 	.word	0x08008a27
 80087d4:	08008a27 	.word	0x08008a27
 80087d8:	08008a27 	.word	0x08008a27
 80087dc:	08008a27 	.word	0x08008a27
 80087e0:	08008a27 	.word	0x08008a27
 80087e4:	0800881b 	.word	0x0800881b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e8:	4b94      	ldr	r3, [pc, #592]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0320 	and.w	r3, r3, #32
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d009      	beq.n	8008808 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087f4:	4b91      	ldr	r3, [pc, #580]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	08db      	lsrs	r3, r3, #3
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	4a90      	ldr	r2, [pc, #576]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008800:	fa22 f303 	lsr.w	r3, r2, r3
 8008804:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008806:	e111      	b.n	8008a2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008808:	4b8d      	ldr	r3, [pc, #564]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800880a:	61bb      	str	r3, [r7, #24]
    break;
 800880c:	e10e      	b.n	8008a2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800880e:	4b8d      	ldr	r3, [pc, #564]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008810:	61bb      	str	r3, [r7, #24]
    break;
 8008812:	e10b      	b.n	8008a2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008814:	4b8c      	ldr	r3, [pc, #560]	; (8008a48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008816:	61bb      	str	r3, [r7, #24]
    break;
 8008818:	e108      	b.n	8008a2c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800881a:	4b88      	ldr	r3, [pc, #544]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008824:	4b85      	ldr	r3, [pc, #532]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008828:	091b      	lsrs	r3, r3, #4
 800882a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800882e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008830:	4b82      	ldr	r3, [pc, #520]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800883a:	4b80      	ldr	r3, [pc, #512]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883e:	08db      	lsrs	r3, r3, #3
 8008840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	fb02 f303 	mul.w	r3, r2, r3
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008852:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 80e1 	beq.w	8008a20 <HAL_RCC_GetSysClockFreq+0x2b8>
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b02      	cmp	r3, #2
 8008862:	f000 8083 	beq.w	800896c <HAL_RCC_GetSysClockFreq+0x204>
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b02      	cmp	r3, #2
 800886a:	f200 80a1 	bhi.w	80089b0 <HAL_RCC_GetSysClockFreq+0x248>
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_RCC_GetSysClockFreq+0x114>
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d056      	beq.n	8008928 <HAL_RCC_GetSysClockFreq+0x1c0>
 800887a:	e099      	b.n	80089b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800887c:	4b6f      	ldr	r3, [pc, #444]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0320 	and.w	r3, r3, #32
 8008884:	2b00      	cmp	r3, #0
 8008886:	d02d      	beq.n	80088e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008888:	4b6c      	ldr	r3, [pc, #432]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	08db      	lsrs	r3, r3, #3
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	4a6b      	ldr	r2, [pc, #428]	; (8008a40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008894:	fa22 f303 	lsr.w	r3, r2, r3
 8008898:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	ee07 3a90 	vmov	s15, r3
 80088a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b2:	4b62      	ldr	r3, [pc, #392]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80088e2:	e087      	b.n	80089f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008a50 <HAL_RCC_GetSysClockFreq+0x2e8>
 80088f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088f6:	4b51      	ldr	r3, [pc, #324]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	ed97 6a02 	vldr	s12, [r7, #8]
 800890a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 800890e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800891e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008926:	e065      	b.n	80089f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	ee07 3a90 	vmov	s15, r3
 800892e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008932:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008a54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893a:	4b40      	ldr	r3, [pc, #256]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894a:	ed97 6a02 	vldr	s12, [r7, #8]
 800894e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800895e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800896a:	e043      	b.n	80089f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	ee07 3a90 	vmov	s15, r3
 8008972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008976:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008a58 <HAL_RCC_GetSysClockFreq+0x2f0>
 800897a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800897e:	4b2f      	ldr	r3, [pc, #188]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008992:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800899a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800899e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089ae:	e021      	b.n	80089f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	ee07 3a90 	vmov	s15, r3
 80089b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008a54 <HAL_RCC_GetSysClockFreq+0x2ec>
 80089be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c2:	4b1e      	ldr	r3, [pc, #120]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ca:	ee07 3a90 	vmov	s15, r3
 80089ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80089d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008a4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80089da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80089f4:	4b11      	ldr	r3, [pc, #68]	; (8008a3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f8:	0a5b      	lsrs	r3, r3, #9
 80089fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089fe:	3301      	adds	r3, #1
 8008a00:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	ee07 3a90 	vmov	s15, r3
 8008a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a18:	ee17 3a90 	vmov	r3, s15
 8008a1c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008a1e:	e005      	b.n	8008a2c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61bb      	str	r3, [r7, #24]
    break;
 8008a24:	e002      	b.n	8008a2c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008a26:	4b07      	ldr	r3, [pc, #28]	; (8008a44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a28:	61bb      	str	r3, [r7, #24]
    break;
 8008a2a:	bf00      	nop
  }

  return sysclockfreq;
 8008a2c:	69bb      	ldr	r3, [r7, #24]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3724      	adds	r7, #36	; 0x24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop
 8008a3c:	58024400 	.word	0x58024400
 8008a40:	03d09000 	.word	0x03d09000
 8008a44:	003d0900 	.word	0x003d0900
 8008a48:	017d7840 	.word	0x017d7840
 8008a4c:	46000000 	.word	0x46000000
 8008a50:	4c742400 	.word	0x4c742400
 8008a54:	4a742400 	.word	0x4a742400
 8008a58:	4bbebc20 	.word	0x4bbebc20

08008a5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008a62:	f7ff fe81 	bl	8008768 <HAL_RCC_GetSysClockFreq>
 8008a66:	4602      	mov	r2, r0
 8008a68:	4b10      	ldr	r3, [pc, #64]	; (8008aac <HAL_RCC_GetHCLKFreq+0x50>)
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	0a1b      	lsrs	r3, r3, #8
 8008a6e:	f003 030f 	and.w	r3, r3, #15
 8008a72:	490f      	ldr	r1, [pc, #60]	; (8008ab0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a74:	5ccb      	ldrb	r3, [r1, r3]
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a80:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <HAL_RCC_GetHCLKFreq+0x50>)
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	f003 030f 	and.w	r3, r3, #15
 8008a88:	4a09      	ldr	r2, [pc, #36]	; (8008ab0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a8a:	5cd3      	ldrb	r3, [r2, r3]
 8008a8c:	f003 031f 	and.w	r3, r3, #31
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	fa22 f303 	lsr.w	r3, r2, r3
 8008a96:	4a07      	ldr	r2, [pc, #28]	; (8008ab4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a9a:	4a07      	ldr	r2, [pc, #28]	; (8008ab8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008aa0:	4b04      	ldr	r3, [pc, #16]	; (8008ab4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	58024400 	.word	0x58024400
 8008ab0:	0800ebd0 	.word	0x0800ebd0
 8008ab4:	24000010 	.word	0x24000010
 8008ab8:	2400000c 	.word	0x2400000c

08008abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ac0:	f7ff ffcc 	bl	8008a5c <HAL_RCC_GetHCLKFreq>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	4b06      	ldr	r3, [pc, #24]	; (8008ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	091b      	lsrs	r3, r3, #4
 8008acc:	f003 0307 	and.w	r3, r3, #7
 8008ad0:	4904      	ldr	r1, [pc, #16]	; (8008ae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ad2:	5ccb      	ldrb	r3, [r1, r3]
 8008ad4:	f003 031f 	and.w	r3, r3, #31
 8008ad8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	58024400 	.word	0x58024400
 8008ae4:	0800ebd0 	.word	0x0800ebd0

08008ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008aec:	f7ff ffb6 	bl	8008a5c <HAL_RCC_GetHCLKFreq>
 8008af0:	4602      	mov	r2, r0
 8008af2:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	0a1b      	lsrs	r3, r3, #8
 8008af8:	f003 0307 	and.w	r3, r3, #7
 8008afc:	4904      	ldr	r1, [pc, #16]	; (8008b10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008afe:	5ccb      	ldrb	r3, [r1, r3]
 8008b00:	f003 031f 	and.w	r3, r3, #31
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	58024400 	.word	0x58024400
 8008b10:	0800ebd0 	.word	0x0800ebd0

08008b14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b20:	2300      	movs	r3, #0
 8008b22:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d03f      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b38:	d02a      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008b3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008b3e:	d824      	bhi.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b44:	d018      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b4a:	d81e      	bhi.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d003      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b54:	d007      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008b56:	e018      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b58:	4bab      	ldr	r3, [pc, #684]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	4aaa      	ldr	r2, [pc, #680]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b64:	e015      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	2102      	movs	r1, #2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 f9cf 	bl	8009f10 <RCCEx_PLL2_Config>
 8008b72:	4603      	mov	r3, r0
 8008b74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b76:	e00c      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3324      	adds	r3, #36	; 0x24
 8008b7c:	2102      	movs	r1, #2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 fa78 	bl	800a074 <RCCEx_PLL3_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b88:	e003      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b8e:	e000      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b92:	7dfb      	ldrb	r3, [r7, #23]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d109      	bne.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b98:	4b9b      	ldr	r3, [pc, #620]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba4:	4998      	ldr	r1, [pc, #608]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	650b      	str	r3, [r1, #80]	; 0x50
 8008baa:	e001      	b.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d03d      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc0:	2b04      	cmp	r3, #4
 8008bc2:	d826      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008bc4:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bca:	bf00      	nop
 8008bcc:	08008be1 	.word	0x08008be1
 8008bd0:	08008bef 	.word	0x08008bef
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	08008c19 	.word	0x08008c19
 8008bdc:	08008c19 	.word	0x08008c19
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008be0:	4b89      	ldr	r3, [pc, #548]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	4a88      	ldr	r2, [pc, #544]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bec:	e015      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f001 f98b 	bl	8009f10 <RCCEx_PLL2_Config>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008bfe:	e00c      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	3324      	adds	r3, #36	; 0x24
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 fa34 	bl	800a074 <RCCEx_PLL3_Config>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c10:	e003      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
      break;
 8008c16:	e000      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c1a:	7dfb      	ldrb	r3, [r7, #23]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c20:	4b79      	ldr	r3, [pc, #484]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c24:	f023 0207 	bic.w	r2, r3, #7
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2c:	4976      	ldr	r1, [pc, #472]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	650b      	str	r3, [r1, #80]	; 0x50
 8008c32:	e001      	b.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d042      	beq.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4c:	d02b      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c52:	d825      	bhi.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c54:	2bc0      	cmp	r3, #192	; 0xc0
 8008c56:	d028      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008c58:	2bc0      	cmp	r3, #192	; 0xc0
 8008c5a:	d821      	bhi.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c5c:	2b80      	cmp	r3, #128	; 0x80
 8008c5e:	d016      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008c60:	2b80      	cmp	r3, #128	; 0x80
 8008c62:	d81d      	bhi.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008c68:	2b40      	cmp	r3, #64	; 0x40
 8008c6a:	d007      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008c6c:	e018      	b.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c6e:	4b66      	ldr	r3, [pc, #408]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	4a65      	ldr	r2, [pc, #404]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c7a:	e017      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	2100      	movs	r1, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f944 	bl	8009f10 <RCCEx_PLL2_Config>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c8c:	e00e      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3324      	adds	r3, #36	; 0x24
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 f9ed 	bl	800a074 <RCCEx_PLL3_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c9e:	e005      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca4:	e002      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008ca6:	bf00      	nop
 8008ca8:	e000      	b.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008cb2:	4b55      	ldr	r3, [pc, #340]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbe:	4952      	ldr	r1, [pc, #328]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	650b      	str	r3, [r1, #80]	; 0x50
 8008cc4:	e001      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d049      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ce0:	d030      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008ce2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ce6:	d82a      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ce8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cec:	d02c      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008cee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cf2:	d824      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cf8:	d018      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cfe:	d81e      	bhi.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d08:	d007      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008d0a:	e018      	b.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d0c:	4b3e      	ldr	r3, [pc, #248]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	4a3d      	ldr	r2, [pc, #244]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d18:	e017      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	2100      	movs	r1, #0
 8008d20:	4618      	mov	r0, r3
 8008d22:	f001 f8f5 	bl	8009f10 <RCCEx_PLL2_Config>
 8008d26:	4603      	mov	r3, r0
 8008d28:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d2a:	e00e      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	3324      	adds	r3, #36	; 0x24
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f001 f99e 	bl	800a074 <RCCEx_PLL3_Config>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d3c:	e005      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]
      break;
 8008d42:	e002      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008d44:	bf00      	nop
 8008d46:	e000      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d50:	4b2d      	ldr	r3, [pc, #180]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d54:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d5e:	492a      	ldr	r1, [pc, #168]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	658b      	str	r3, [r1, #88]	; 0x58
 8008d64:	e001      	b.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d04c      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d80:	d030      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d86:	d82a      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d8c:	d02c      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008d8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d92:	d824      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d98:	d018      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008d9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d9e:	d81e      	bhi.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008da8:	d007      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008daa:	e018      	b.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dac:	4b16      	ldr	r3, [pc, #88]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db0:	4a15      	ldr	r2, [pc, #84]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008db8:	e017      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f001 f8a5 	bl	8009f10 <RCCEx_PLL2_Config>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008dca:	e00e      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	3324      	adds	r3, #36	; 0x24
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f001 f94e 	bl	800a074 <RCCEx_PLL3_Config>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ddc:	e005      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	75fb      	strb	r3, [r7, #23]
      break;
 8008de2:	e002      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008de4:	bf00      	nop
 8008de6:	e000      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10d      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008df0:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008dfe:	4902      	ldr	r1, [pc, #8]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	658b      	str	r3, [r1, #88]	; 0x58
 8008e04:	e004      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008e06:	bf00      	nop
 8008e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d032      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e20:	2b30      	cmp	r3, #48	; 0x30
 8008e22:	d01c      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008e24:	2b30      	cmp	r3, #48	; 0x30
 8008e26:	d817      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008e28:	2b20      	cmp	r3, #32
 8008e2a:	d00c      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008e2c:	2b20      	cmp	r3, #32
 8008e2e:	d813      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d016      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008e34:	2b10      	cmp	r3, #16
 8008e36:	d10f      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e38:	4baf      	ldr	r3, [pc, #700]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	4aae      	ldr	r2, [pc, #696]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008e44:	e00e      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	2102      	movs	r1, #2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 f85f 	bl	8009f10 <RCCEx_PLL2_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008e56:	e005      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008e5c:	e002      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008e5e:	bf00      	nop
 8008e60:	e000      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d109      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e6a:	4ba3      	ldr	r3, [pc, #652]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e76:	49a0      	ldr	r1, [pc, #640]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e7c:	e001      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7e:	7dfb      	ldrb	r3, [r7, #23]
 8008e80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d047      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e96:	d030      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e9c:	d82a      	bhi.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ea2:	d02c      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008ea4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ea8:	d824      	bhi.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eae:	d018      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eb4:	d81e      	bhi.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ebe:	d007      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008ec0:	e018      	b.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec2:	4b8d      	ldr	r3, [pc, #564]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	4a8c      	ldr	r2, [pc, #560]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ece:	e017      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 f81a 	bl	8009f10 <RCCEx_PLL2_Config>
 8008edc:	4603      	mov	r3, r0
 8008ede:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ee0:	e00e      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	3324      	adds	r3, #36	; 0x24
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f001 f8c3 	bl	800a074 <RCCEx_PLL3_Config>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ef2:	e005      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef8:	e002      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008efa:	bf00      	nop
 8008efc:	e000      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d109      	bne.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f06:	4b7c      	ldr	r3, [pc, #496]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f12:	4979      	ldr	r1, [pc, #484]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	650b      	str	r3, [r1, #80]	; 0x50
 8008f18:	e001      	b.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f1a:	7dfb      	ldrb	r3, [r7, #23]
 8008f1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d049      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f32:	d02e      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f38:	d828      	bhi.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f3e:	d02a      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f44:	d822      	bhi.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f4a:	d026      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008f4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f50:	d81c      	bhi.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f56:	d010      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f5c:	d816      	bhi.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d01d      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f66:	d111      	bne.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 ffce 	bl	8009f10 <RCCEx_PLL2_Config>
 8008f74:	4603      	mov	r3, r0
 8008f76:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f78:	e012      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	3324      	adds	r3, #36	; 0x24
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4618      	mov	r0, r3
 8008f82:	f001 f877 	bl	800a074 <RCCEx_PLL3_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f8a:	e009      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f90:	e006      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f92:	bf00      	nop
 8008f94:	e004      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f96:	bf00      	nop
 8008f98:	e002      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f9a:	bf00      	nop
 8008f9c:	e000      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fa0:	7dfb      	ldrb	r3, [r7, #23]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008fa6:	4b54      	ldr	r3, [pc, #336]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008faa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb2:	4951      	ldr	r1, [pc, #324]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	650b      	str	r3, [r1, #80]	; 0x50
 8008fb8:	e001      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d04b      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fd4:	d02e      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fda:	d828      	bhi.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe0:	d02a      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe6:	d822      	bhi.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008fe8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fec:	d026      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008fee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ff2:	d81c      	bhi.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff8:	d010      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffe:	d816      	bhi.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d01d      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009008:	d111      	bne.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	3304      	adds	r3, #4
 800900e:	2101      	movs	r1, #1
 8009010:	4618      	mov	r0, r3
 8009012:	f000 ff7d 	bl	8009f10 <RCCEx_PLL2_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800901a:	e012      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	2101      	movs	r1, #1
 8009022:	4618      	mov	r0, r3
 8009024:	f001 f826 	bl	800a074 <RCCEx_PLL3_Config>
 8009028:	4603      	mov	r3, r0
 800902a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800902c:	e009      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]
      break;
 8009032:	e006      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009034:	bf00      	nop
 8009036:	e004      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009038:	bf00      	nop
 800903a:	e002      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800903c:	bf00      	nop
 800903e:	e000      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009048:	4b2b      	ldr	r3, [pc, #172]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800904a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009056:	4928      	ldr	r1, [pc, #160]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009058:	4313      	orrs	r3, r2
 800905a:	658b      	str	r3, [r1, #88]	; 0x58
 800905c:	e001      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d02f      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009076:	d00e      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800907c:	d814      	bhi.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d015      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009086:	d10f      	bne.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009088:	4b1b      	ldr	r3, [pc, #108]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	4a1a      	ldr	r2, [pc, #104]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800908e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009094:	e00c      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3304      	adds	r3, #4
 800909a:	2101      	movs	r1, #1
 800909c:	4618      	mov	r0, r3
 800909e:	f000 ff37 	bl	8009f10 <RCCEx_PLL2_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80090a6:	e003      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	75fb      	strb	r3, [r7, #23]
      break;
 80090ac:	e000      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80090ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d109      	bne.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090b6:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c2:	490d      	ldr	r1, [pc, #52]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	650b      	str	r3, [r1, #80]	; 0x50
 80090c8:	e001      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d033      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d81c      	bhi.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	08009123 	.word	0x08009123
 80090ec:	080090fd 	.word	0x080090fd
 80090f0:	0800910b 	.word	0x0800910b
 80090f4:	08009123 	.word	0x08009123
 80090f8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090fc:	4bb8      	ldr	r3, [pc, #736]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	4ab7      	ldr	r2, [pc, #732]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009106:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009108:	e00c      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3304      	adds	r3, #4
 800910e:	2102      	movs	r1, #2
 8009110:	4618      	mov	r0, r3
 8009112:	f000 fefd 	bl	8009f10 <RCCEx_PLL2_Config>
 8009116:	4603      	mov	r3, r0
 8009118:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800911a:	e003      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	75fb      	strb	r3, [r7, #23]
      break;
 8009120:	e000      	b.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d109      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800912a:	4bad      	ldr	r3, [pc, #692]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800912c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800912e:	f023 0203 	bic.w	r2, r3, #3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009136:	49aa      	ldr	r1, [pc, #680]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009138:	4313      	orrs	r3, r2
 800913a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800913c:	e001      	b.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800914a:	2b00      	cmp	r3, #0
 800914c:	f000 8086 	beq.w	800925c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009150:	4ba4      	ldr	r3, [pc, #656]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4aa3      	ldr	r2, [pc, #652]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800915a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800915c:	f7f8 ff68 	bl	8002030 <HAL_GetTick>
 8009160:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009162:	e009      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009164:	f7f8 ff64 	bl	8002030 <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	2b64      	cmp	r3, #100	; 0x64
 8009170:	d902      	bls.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	75fb      	strb	r3, [r7, #23]
        break;
 8009176:	e005      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009178:	4b9a      	ldr	r3, [pc, #616]	; (80093e4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0ef      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009184:	7dfb      	ldrb	r3, [r7, #23]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d166      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800918a:	4b95      	ldr	r3, [pc, #596]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800918c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009194:	4053      	eors	r3, r2
 8009196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800919a:	2b00      	cmp	r3, #0
 800919c:	d013      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800919e:	4b90      	ldr	r3, [pc, #576]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091a8:	4b8d      	ldr	r3, [pc, #564]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ac:	4a8c      	ldr	r2, [pc, #560]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091b4:	4b8a      	ldr	r3, [pc, #552]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b8:	4a89      	ldr	r2, [pc, #548]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80091c0:	4a87      	ldr	r2, [pc, #540]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091d0:	d115      	bne.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d2:	f7f8 ff2d 	bl	8002030 <HAL_GetTick>
 80091d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091d8:	e00b      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091da:	f7f8 ff29 	bl	8002030 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d902      	bls.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	75fb      	strb	r3, [r7, #23]
            break;
 80091f0:	e005      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091f2:	4b7b      	ldr	r3, [pc, #492]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f6:	f003 0302 	and.w	r3, r3, #2
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0ed      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80091fe:	7dfb      	ldrb	r3, [r7, #23]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d126      	bne.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800920a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800920e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009212:	d10d      	bne.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009214:	4b72      	ldr	r3, [pc, #456]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009222:	0919      	lsrs	r1, r3, #4
 8009224:	4b70      	ldr	r3, [pc, #448]	; (80093e8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009226:	400b      	ands	r3, r1
 8009228:	496d      	ldr	r1, [pc, #436]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800922a:	4313      	orrs	r3, r2
 800922c:	610b      	str	r3, [r1, #16]
 800922e:	e005      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009230:	4b6b      	ldr	r3, [pc, #428]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	4a6a      	ldr	r2, [pc, #424]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009236:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800923a:	6113      	str	r3, [r2, #16]
 800923c:	4b68      	ldr	r3, [pc, #416]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800923e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800924a:	4965      	ldr	r1, [pc, #404]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800924c:	4313      	orrs	r3, r2
 800924e:	670b      	str	r3, [r1, #112]	; 0x70
 8009250:	e004      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	75bb      	strb	r3, [r7, #22]
 8009256:	e001      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0301 	and.w	r3, r3, #1
 8009264:	2b00      	cmp	r3, #0
 8009266:	d07e      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800926c:	2b28      	cmp	r3, #40	; 0x28
 800926e:	d867      	bhi.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009270:	a201      	add	r2, pc, #4	; (adr r2, 8009278 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	08009347 	.word	0x08009347
 800927c:	08009341 	.word	0x08009341
 8009280:	08009341 	.word	0x08009341
 8009284:	08009341 	.word	0x08009341
 8009288:	08009341 	.word	0x08009341
 800928c:	08009341 	.word	0x08009341
 8009290:	08009341 	.word	0x08009341
 8009294:	08009341 	.word	0x08009341
 8009298:	0800931d 	.word	0x0800931d
 800929c:	08009341 	.word	0x08009341
 80092a0:	08009341 	.word	0x08009341
 80092a4:	08009341 	.word	0x08009341
 80092a8:	08009341 	.word	0x08009341
 80092ac:	08009341 	.word	0x08009341
 80092b0:	08009341 	.word	0x08009341
 80092b4:	08009341 	.word	0x08009341
 80092b8:	0800932f 	.word	0x0800932f
 80092bc:	08009341 	.word	0x08009341
 80092c0:	08009341 	.word	0x08009341
 80092c4:	08009341 	.word	0x08009341
 80092c8:	08009341 	.word	0x08009341
 80092cc:	08009341 	.word	0x08009341
 80092d0:	08009341 	.word	0x08009341
 80092d4:	08009341 	.word	0x08009341
 80092d8:	08009347 	.word	0x08009347
 80092dc:	08009341 	.word	0x08009341
 80092e0:	08009341 	.word	0x08009341
 80092e4:	08009341 	.word	0x08009341
 80092e8:	08009341 	.word	0x08009341
 80092ec:	08009341 	.word	0x08009341
 80092f0:	08009341 	.word	0x08009341
 80092f4:	08009341 	.word	0x08009341
 80092f8:	08009347 	.word	0x08009347
 80092fc:	08009341 	.word	0x08009341
 8009300:	08009341 	.word	0x08009341
 8009304:	08009341 	.word	0x08009341
 8009308:	08009341 	.word	0x08009341
 800930c:	08009341 	.word	0x08009341
 8009310:	08009341 	.word	0x08009341
 8009314:	08009341 	.word	0x08009341
 8009318:	08009347 	.word	0x08009347
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3304      	adds	r3, #4
 8009320:	2101      	movs	r1, #1
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fdf4 	bl	8009f10 <RCCEx_PLL2_Config>
 8009328:	4603      	mov	r3, r0
 800932a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800932c:	e00c      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3324      	adds	r3, #36	; 0x24
 8009332:	2101      	movs	r1, #1
 8009334:	4618      	mov	r0, r3
 8009336:	f000 fe9d 	bl	800a074 <RCCEx_PLL3_Config>
 800933a:	4603      	mov	r3, r0
 800933c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800933e:	e003      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	75fb      	strb	r3, [r7, #23]
      break;
 8009344:	e000      	b.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009348:	7dfb      	ldrb	r3, [r7, #23]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800934e:	4b24      	ldr	r3, [pc, #144]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009352:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800935a:	4921      	ldr	r1, [pc, #132]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800935c:	4313      	orrs	r3, r2
 800935e:	654b      	str	r3, [r1, #84]	; 0x54
 8009360:	e001      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d03e      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009376:	2b05      	cmp	r3, #5
 8009378:	d820      	bhi.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800937a:	a201      	add	r2, pc, #4	; (adr r2, 8009380 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800937c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009380:	080093c3 	.word	0x080093c3
 8009384:	08009399 	.word	0x08009399
 8009388:	080093ab 	.word	0x080093ab
 800938c:	080093c3 	.word	0x080093c3
 8009390:	080093c3 	.word	0x080093c3
 8009394:	080093c3 	.word	0x080093c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3304      	adds	r3, #4
 800939c:	2101      	movs	r1, #1
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 fdb6 	bl	8009f10 <RCCEx_PLL2_Config>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093a8:	e00c      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	3324      	adds	r3, #36	; 0x24
 80093ae:	2101      	movs	r1, #1
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 fe5f 	bl	800a074 <RCCEx_PLL3_Config>
 80093b6:	4603      	mov	r3, r0
 80093b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80093ba:	e003      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]
      break;
 80093c0:	e000      	b.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80093c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d110      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80093ca:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ce:	f023 0207 	bic.w	r2, r3, #7
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d6:	4902      	ldr	r1, [pc, #8]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	654b      	str	r3, [r1, #84]	; 0x54
 80093dc:	e008      	b.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80093de:	bf00      	nop
 80093e0:	58024400 	.word	0x58024400
 80093e4:	58024800 	.word	0x58024800
 80093e8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ec:	7dfb      	ldrb	r3, [r7, #23]
 80093ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 0304 	and.w	r3, r3, #4
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d039      	beq.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009402:	2b05      	cmp	r3, #5
 8009404:	d820      	bhi.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009406:	a201      	add	r2, pc, #4	; (adr r2, 800940c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940c:	0800944f 	.word	0x0800944f
 8009410:	08009425 	.word	0x08009425
 8009414:	08009437 	.word	0x08009437
 8009418:	0800944f 	.word	0x0800944f
 800941c:	0800944f 	.word	0x0800944f
 8009420:	0800944f 	.word	0x0800944f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	3304      	adds	r3, #4
 8009428:	2101      	movs	r1, #1
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fd70 	bl	8009f10 <RCCEx_PLL2_Config>
 8009430:	4603      	mov	r3, r0
 8009432:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009434:	e00c      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3324      	adds	r3, #36	; 0x24
 800943a:	2101      	movs	r1, #1
 800943c:	4618      	mov	r0, r3
 800943e:	f000 fe19 	bl	800a074 <RCCEx_PLL3_Config>
 8009442:	4603      	mov	r3, r0
 8009444:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009446:	e003      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	75fb      	strb	r3, [r7, #23]
      break;
 800944c:	e000      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800944e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10a      	bne.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009456:	4bb7      	ldr	r3, [pc, #732]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800945a:	f023 0207 	bic.w	r2, r3, #7
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009464:	49b3      	ldr	r1, [pc, #716]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009466:	4313      	orrs	r3, r2
 8009468:	658b      	str	r3, [r1, #88]	; 0x58
 800946a:	e001      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 0320 	and.w	r3, r3, #32
 8009478:	2b00      	cmp	r3, #0
 800947a:	d04b      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009486:	d02e      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800948c:	d828      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009492:	d02a      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009498:	d822      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800949a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800949e:	d026      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80094a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094a4:	d81c      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80094a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094aa:	d010      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80094ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b0:	d816      	bhi.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d01d      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80094b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094ba:	d111      	bne.n	80094e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	3304      	adds	r3, #4
 80094c0:	2100      	movs	r1, #0
 80094c2:	4618      	mov	r0, r3
 80094c4:	f000 fd24 	bl	8009f10 <RCCEx_PLL2_Config>
 80094c8:	4603      	mov	r3, r0
 80094ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094cc:	e012      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3324      	adds	r3, #36	; 0x24
 80094d2:	2102      	movs	r1, #2
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fdcd 	bl	800a074 <RCCEx_PLL3_Config>
 80094da:	4603      	mov	r3, r0
 80094dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80094de:	e009      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
      break;
 80094e4:	e006      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094e6:	bf00      	nop
 80094e8:	e004      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094ea:	bf00      	nop
 80094ec:	e002      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094ee:	bf00      	nop
 80094f0:	e000      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80094f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10a      	bne.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094fa:	4b8e      	ldr	r3, [pc, #568]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80094fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009508:	498a      	ldr	r1, [pc, #552]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800950a:	4313      	orrs	r3, r2
 800950c:	654b      	str	r3, [r1, #84]	; 0x54
 800950e:	e001      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009510:	7dfb      	ldrb	r3, [r7, #23]
 8009512:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951c:	2b00      	cmp	r3, #0
 800951e:	d04b      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009526:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800952a:	d02e      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800952c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009530:	d828      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009536:	d02a      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953c:	d822      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800953e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009542:	d026      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009548:	d81c      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800954a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800954e:	d010      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009554:	d816      	bhi.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d01d      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800955a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800955e:	d111      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3304      	adds	r3, #4
 8009564:	2100      	movs	r1, #0
 8009566:	4618      	mov	r0, r3
 8009568:	f000 fcd2 	bl	8009f10 <RCCEx_PLL2_Config>
 800956c:	4603      	mov	r3, r0
 800956e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009570:	e012      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3324      	adds	r3, #36	; 0x24
 8009576:	2102      	movs	r1, #2
 8009578:	4618      	mov	r0, r3
 800957a:	f000 fd7b 	bl	800a074 <RCCEx_PLL3_Config>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009582:	e009      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	75fb      	strb	r3, [r7, #23]
      break;
 8009588:	e006      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800958a:	bf00      	nop
 800958c:	e004      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800958e:	bf00      	nop
 8009590:	e002      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009592:	bf00      	nop
 8009594:	e000      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009598:	7dfb      	ldrb	r3, [r7, #23]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10a      	bne.n	80095b4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800959e:	4b65      	ldr	r3, [pc, #404]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095ac:	4961      	ldr	r1, [pc, #388]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	658b      	str	r3, [r1, #88]	; 0x58
 80095b2:	e001      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b4:	7dfb      	ldrb	r3, [r7, #23]
 80095b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d04b      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095ce:	d02e      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80095d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80095d4:	d828      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095da:	d02a      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80095dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095e0:	d822      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095e6:	d026      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80095e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80095ec:	d81c      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095f2:	d010      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80095f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095f8:	d816      	bhi.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d01d      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80095fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009602:	d111      	bne.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	2100      	movs	r1, #0
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fc80 	bl	8009f10 <RCCEx_PLL2_Config>
 8009610:	4603      	mov	r3, r0
 8009612:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009614:	e012      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3324      	adds	r3, #36	; 0x24
 800961a:	2102      	movs	r1, #2
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fd29 	bl	800a074 <RCCEx_PLL3_Config>
 8009622:	4603      	mov	r3, r0
 8009624:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009626:	e009      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	75fb      	strb	r3, [r7, #23]
      break;
 800962c:	e006      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800962e:	bf00      	nop
 8009630:	e004      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009632:	bf00      	nop
 8009634:	e002      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009636:	bf00      	nop
 8009638:	e000      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800963a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10a      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009642:	4b3c      	ldr	r3, [pc, #240]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009650:	4938      	ldr	r1, [pc, #224]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009652:	4313      	orrs	r3, r2
 8009654:	658b      	str	r3, [r1, #88]	; 0x58
 8009656:	e001      	b.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0308 	and.w	r3, r3, #8
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01a      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800966e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009672:	d10a      	bne.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	3324      	adds	r3, #36	; 0x24
 8009678:	2102      	movs	r1, #2
 800967a:	4618      	mov	r0, r3
 800967c:	f000 fcfa 	bl	800a074 <RCCEx_PLL3_Config>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800968a:	4b2a      	ldr	r3, [pc, #168]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800968c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009698:	4926      	ldr	r1, [pc, #152]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800969a:	4313      	orrs	r3, r2
 800969c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0310 	and.w	r3, r3, #16
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d01a      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b4:	d10a      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3324      	adds	r3, #36	; 0x24
 80096ba:	2102      	movs	r1, #2
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 fcd9 	bl	800a074 <RCCEx_PLL3_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096cc:	4b19      	ldr	r3, [pc, #100]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80096ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096da:	4916      	ldr	r1, [pc, #88]	; (8009734 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d036      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096f6:	d01f      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80096f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096fc:	d817      	bhi.n	800972e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009706:	d009      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009708:	e011      	b.n	800972e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	3304      	adds	r3, #4
 800970e:	2100      	movs	r1, #0
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fbfd 	bl	8009f10 <RCCEx_PLL2_Config>
 8009716:	4603      	mov	r3, r0
 8009718:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800971a:	e00e      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3324      	adds	r3, #36	; 0x24
 8009720:	2102      	movs	r1, #2
 8009722:	4618      	mov	r0, r3
 8009724:	f000 fca6 	bl	800a074 <RCCEx_PLL3_Config>
 8009728:	4603      	mov	r3, r0
 800972a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800972c:	e005      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	75fb      	strb	r3, [r7, #23]
      break;
 8009732:	e002      	b.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009734:	58024400 	.word	0x58024400
      break;
 8009738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10a      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009740:	4b93      	ldr	r3, [pc, #588]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800974e:	4990      	ldr	r1, [pc, #576]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009750:	4313      	orrs	r3, r2
 8009752:	658b      	str	r3, [r1, #88]	; 0x58
 8009754:	e001      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d033      	beq.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800976c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009770:	d01c      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009772:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009776:	d816      	bhi.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800977c:	d003      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800977e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009782:	d007      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009784:	e00f      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009786:	4b82      	ldr	r3, [pc, #520]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978a:	4a81      	ldr	r2, [pc, #516]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800978c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009792:	e00c      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3324      	adds	r3, #36	; 0x24
 8009798:	2101      	movs	r1, #1
 800979a:	4618      	mov	r0, r3
 800979c:	f000 fc6a 	bl	800a074 <RCCEx_PLL3_Config>
 80097a0:	4603      	mov	r3, r0
 80097a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80097a4:	e003      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	75fb      	strb	r3, [r7, #23]
      break;
 80097aa:	e000      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80097ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ae:	7dfb      	ldrb	r3, [r7, #23]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10a      	bne.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097b4:	4b76      	ldr	r3, [pc, #472]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097c2:	4973      	ldr	r1, [pc, #460]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	654b      	str	r3, [r1, #84]	; 0x54
 80097c8:	e001      	b.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d029      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d003      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80097e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e6:	d007      	beq.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80097e8:	e00f      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ea:	4b69      	ldr	r3, [pc, #420]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ee:	4a68      	ldr	r2, [pc, #416]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80097f6:	e00b      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	3304      	adds	r3, #4
 80097fc:	2102      	movs	r1, #2
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fb86 	bl	8009f10 <RCCEx_PLL2_Config>
 8009804:	4603      	mov	r3, r0
 8009806:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009808:	e002      	b.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	75fb      	strb	r3, [r7, #23]
      break;
 800980e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d109      	bne.n	800982a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009816:	4b5e      	ldr	r3, [pc, #376]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800981a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009822:	495b      	ldr	r1, [pc, #364]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009824:	4313      	orrs	r3, r2
 8009826:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009828:	e001      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800982a:	7dfb      	ldrb	r3, [r7, #23]
 800982c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00a      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3324      	adds	r3, #36	; 0x24
 800983e:	2102      	movs	r1, #2
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fc17 	bl	800a074 <RCCEx_PLL3_Config>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d030      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009860:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009864:	d017      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800986a:	d811      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800986c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009870:	d013      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009876:	d80b      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d010      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800987c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009880:	d106      	bne.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009882:	4b43      	ldr	r3, [pc, #268]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009886:	4a42      	ldr	r2, [pc, #264]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800988c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800988e:	e007      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	75fb      	strb	r3, [r7, #23]
      break;
 8009894:	e004      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009896:	bf00      	nop
 8009898:	e002      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800989a:	bf00      	nop
 800989c:	e000      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800989e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d109      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80098a6:	4b3a      	ldr	r3, [pc, #232]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b2:	4937      	ldr	r1, [pc, #220]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098b4:	4313      	orrs	r3, r2
 80098b6:	654b      	str	r3, [r1, #84]	; 0x54
 80098b8:	e001      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ba:	7dfb      	ldrb	r3, [r7, #23]
 80098bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d008      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098ca:	4b31      	ldr	r3, [pc, #196]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d6:	492e      	ldr	r1, [pc, #184]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d009      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80098e8:	4b29      	ldr	r3, [pc, #164]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80098f6:	4926      	ldr	r1, [pc, #152]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009908:	4b21      	ldr	r3, [pc, #132]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800990a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800990c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009914:	491e      	ldr	r1, [pc, #120]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009916:	4313      	orrs	r3, r2
 8009918:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00d      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009926:	4b1a      	ldr	r3, [pc, #104]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	4a19      	ldr	r2, [pc, #100]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800992c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009930:	6113      	str	r3, [r2, #16]
 8009932:	4b17      	ldr	r3, [pc, #92]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009934:	691a      	ldr	r2, [r3, #16]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800993c:	4914      	ldr	r1, [pc, #80]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800993e:	4313      	orrs	r3, r2
 8009940:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	da08      	bge.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800994a:	4b11      	ldr	r3, [pc, #68]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800994c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800994e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009956:	490e      	ldr	r1, [pc, #56]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009958:	4313      	orrs	r3, r2
 800995a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009968:	4b09      	ldr	r3, [pc, #36]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800996a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009976:	4906      	ldr	r1, [pc, #24]	; (8009990 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009978:	4313      	orrs	r3, r2
 800997a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800997c:	7dbb      	ldrb	r3, [r7, #22]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	e000      	b.n	8009988 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	58024400 	.word	0x58024400

08009994 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009998:	f7ff f860 	bl	8008a5c <HAL_RCC_GetHCLKFreq>
 800999c:	4602      	mov	r2, r0
 800999e:	4b06      	ldr	r3, [pc, #24]	; (80099b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	091b      	lsrs	r3, r3, #4
 80099a4:	f003 0307 	and.w	r3, r3, #7
 80099a8:	4904      	ldr	r1, [pc, #16]	; (80099bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099aa:	5ccb      	ldrb	r3, [r1, r3]
 80099ac:	f003 031f 	and.w	r3, r3, #31
 80099b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	58024400 	.word	0x58024400
 80099bc:	0800ebd0 	.word	0x0800ebd0

080099c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b089      	sub	sp, #36	; 0x24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099c8:	4ba1      	ldr	r3, [pc, #644]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099cc:	f003 0303 	and.w	r3, r3, #3
 80099d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80099d2:	4b9f      	ldr	r3, [pc, #636]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	0b1b      	lsrs	r3, r3, #12
 80099d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099de:	4b9c      	ldr	r3, [pc, #624]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e2:	091b      	lsrs	r3, r3, #4
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80099ea:	4b99      	ldr	r3, [pc, #612]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ee:	08db      	lsrs	r3, r3, #3
 80099f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	fb02 f303 	mul.w	r3, r2, r3
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 8111 	beq.w	8009c30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	f000 8083 	beq.w	8009b1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	f200 80a1 	bhi.w	8009b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d056      	beq.n	8009ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a2a:	e099      	b.n	8009b60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a2c:	4b88      	ldr	r3, [pc, #544]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 0320 	and.w	r3, r3, #32
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d02d      	beq.n	8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a38:	4b85      	ldr	r3, [pc, #532]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	08db      	lsrs	r3, r3, #3
 8009a3e:	f003 0303 	and.w	r3, r3, #3
 8009a42:	4a84      	ldr	r2, [pc, #528]	; (8009c54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
 8009a48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	ee07 3a90 	vmov	s15, r3
 8009a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a62:	4b7b      	ldr	r3, [pc, #492]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a92:	e087      	b.n	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	ee07 3a90 	vmov	s15, r3
 8009a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aa6:	4b6a      	ldr	r3, [pc, #424]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ad6:	e065      	b.n	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aea:	4b59      	ldr	r3, [pc, #356]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009afe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b1a:	e043      	b.n	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2e:	4b48      	ldr	r3, [pc, #288]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b36:	ee07 3a90 	vmov	s15, r3
 8009b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b5e:	e021      	b.n	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	ee07 3a90 	vmov	s15, r3
 8009b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b72:	4b37      	ldr	r3, [pc, #220]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ba2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009ba4:	4b2a      	ldr	r3, [pc, #168]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba8:	0a5b      	lsrs	r3, r3, #9
 8009baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bae:	ee07 3a90 	vmov	s15, r3
 8009bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bca:	ee17 2a90 	vmov	r2, s15
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009bd2:	4b1f      	ldr	r3, [pc, #124]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd6:	0c1b      	lsrs	r3, r3, #16
 8009bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bdc:	ee07 3a90 	vmov	s15, r3
 8009be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009be8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bf8:	ee17 2a90 	vmov	r2, s15
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009c00:	4b13      	ldr	r3, [pc, #76]	; (8009c50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c04:	0e1b      	lsrs	r3, r3, #24
 8009c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c26:	ee17 2a90 	vmov	r2, s15
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c2e:	e008      	b.n	8009c42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	609a      	str	r2, [r3, #8]
}
 8009c42:	bf00      	nop
 8009c44:	3724      	adds	r7, #36	; 0x24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	58024400 	.word	0x58024400
 8009c54:	03d09000 	.word	0x03d09000
 8009c58:	46000000 	.word	0x46000000
 8009c5c:	4c742400 	.word	0x4c742400
 8009c60:	4a742400 	.word	0x4a742400
 8009c64:	4bbebc20 	.word	0x4bbebc20

08009c68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b089      	sub	sp, #36	; 0x24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c70:	4ba1      	ldr	r3, [pc, #644]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c74:	f003 0303 	and.w	r3, r3, #3
 8009c78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009c7a:	4b9f      	ldr	r3, [pc, #636]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7e:	0d1b      	lsrs	r3, r3, #20
 8009c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c86:	4b9c      	ldr	r3, [pc, #624]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8a:	0a1b      	lsrs	r3, r3, #8
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c92:	4b99      	ldr	r3, [pc, #612]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c96:	08db      	lsrs	r3, r3, #3
 8009c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	fb02 f303 	mul.w	r3, r2, r3
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009caa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	f000 8111 	beq.w	8009ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	f000 8083 	beq.w	8009dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	f200 80a1 	bhi.w	8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d056      	beq.n	8009d80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009cd2:	e099      	b.n	8009e08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cd4:	4b88      	ldr	r3, [pc, #544]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0320 	and.w	r3, r3, #32
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d02d      	beq.n	8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ce0:	4b85      	ldr	r3, [pc, #532]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	08db      	lsrs	r3, r3, #3
 8009ce6:	f003 0303 	and.w	r3, r3, #3
 8009cea:	4a84      	ldr	r2, [pc, #528]	; (8009efc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009cec:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	ee07 3a90 	vmov	s15, r3
 8009cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0a:	4b7b      	ldr	r3, [pc, #492]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d3a:	e087      	b.n	8009e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4e:	4b6a      	ldr	r3, [pc, #424]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d56:	ee07 3a90 	vmov	s15, r3
 8009d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d7e:	e065      	b.n	8009e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d92:	4b59      	ldr	r3, [pc, #356]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9a:	ee07 3a90 	vmov	s15, r3
 8009d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dc2:	e043      	b.n	8009e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd6:	4b48      	ldr	r3, [pc, #288]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e06:	e021      	b.n	8009e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	ee07 3a90 	vmov	s15, r3
 8009e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1a:	4b37      	ldr	r3, [pc, #220]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e22:	ee07 3a90 	vmov	s15, r3
 8009e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009e4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	0a5b      	lsrs	r3, r3, #9
 8009e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e56:	ee07 3a90 	vmov	s15, r3
 8009e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e72:	ee17 2a90 	vmov	r2, s15
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009e7a:	4b1f      	ldr	r3, [pc, #124]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	0c1b      	lsrs	r3, r3, #16
 8009e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e84:	ee07 3a90 	vmov	s15, r3
 8009e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ea0:	ee17 2a90 	vmov	r2, s15
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009ea8:	4b13      	ldr	r3, [pc, #76]	; (8009ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eac:	0e1b      	lsrs	r3, r3, #24
 8009eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ece:	ee17 2a90 	vmov	r2, s15
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ed6:	e008      	b.n	8009eea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	609a      	str	r2, [r3, #8]
}
 8009eea:	bf00      	nop
 8009eec:	3724      	adds	r7, #36	; 0x24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	58024400 	.word	0x58024400
 8009efc:	03d09000 	.word	0x03d09000
 8009f00:	46000000 	.word	0x46000000
 8009f04:	4c742400 	.word	0x4c742400
 8009f08:	4a742400 	.word	0x4a742400
 8009f0c:	4bbebc20 	.word	0x4bbebc20

08009f10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f1e:	4b53      	ldr	r3, [pc, #332]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f22:	f003 0303 	and.w	r3, r3, #3
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d101      	bne.n	8009f2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e099      	b.n	800a062 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f2e:	4b4f      	ldr	r3, [pc, #316]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a4e      	ldr	r2, [pc, #312]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009f34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f3a:	f7f8 f879 	bl	8002030 <HAL_GetTick>
 8009f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f40:	e008      	b.n	8009f54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f42:	f7f8 f875 	bl	8002030 <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d901      	bls.n	8009f54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e086      	b.n	800a062 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f54:	4b45      	ldr	r3, [pc, #276]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d1f0      	bne.n	8009f42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f60:	4b42      	ldr	r3, [pc, #264]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	031b      	lsls	r3, r3, #12
 8009f6e:	493f      	ldr	r1, [pc, #252]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	628b      	str	r3, [r1, #40]	; 0x28
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	025b      	lsls	r3, r3, #9
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	431a      	orrs	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	041b      	lsls	r3, r3, #16
 8009f92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f96:	431a      	orrs	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	061b      	lsls	r3, r3, #24
 8009fa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fa4:	4931      	ldr	r1, [pc, #196]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009faa:	4b30      	ldr	r3, [pc, #192]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	492d      	ldr	r1, [pc, #180]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009fbc:	4b2b      	ldr	r3, [pc, #172]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc0:	f023 0220 	bic.w	r2, r3, #32
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	4928      	ldr	r1, [pc, #160]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009fce:	4b27      	ldr	r3, [pc, #156]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd2:	4a26      	ldr	r2, [pc, #152]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009fd4:	f023 0310 	bic.w	r3, r3, #16
 8009fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fde:	4b24      	ldr	r3, [pc, #144]	; (800a070 <RCCEx_PLL2_Config+0x160>)
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	69d2      	ldr	r2, [r2, #28]
 8009fe6:	00d2      	lsls	r2, r2, #3
 8009fe8:	4920      	ldr	r1, [pc, #128]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009fee:	4b1f      	ldr	r3, [pc, #124]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff2:	4a1e      	ldr	r2, [pc, #120]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 8009ff4:	f043 0310 	orr.w	r3, r3, #16
 8009ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d106      	bne.n	800a00e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a000:	4b1a      	ldr	r3, [pc, #104]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 800a002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a004:	4a19      	ldr	r2, [pc, #100]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 800a006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a00a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a00c:	e00f      	b.n	800a02e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d106      	bne.n	800a022 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a014:	4b15      	ldr	r3, [pc, #84]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	4a14      	ldr	r2, [pc, #80]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 800a01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a01e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a020:	e005      	b.n	800a02e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a022:	4b12      	ldr	r3, [pc, #72]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	4a11      	ldr	r2, [pc, #68]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 800a028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a02c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a02e:	4b0f      	ldr	r3, [pc, #60]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a0e      	ldr	r2, [pc, #56]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 800a034:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a03a:	f7f7 fff9 	bl	8002030 <HAL_GetTick>
 800a03e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a040:	e008      	b.n	800a054 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a042:	f7f7 fff5 	bl	8002030 <HAL_GetTick>
 800a046:	4602      	mov	r2, r0
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d901      	bls.n	800a054 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e006      	b.n	800a062 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a054:	4b05      	ldr	r3, [pc, #20]	; (800a06c <RCCEx_PLL2_Config+0x15c>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0f0      	beq.n	800a042 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	58024400 	.word	0x58024400
 800a070:	ffff0007 	.word	0xffff0007

0800a074 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a082:	4b53      	ldr	r3, [pc, #332]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d101      	bne.n	800a092 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e099      	b.n	800a1c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a092:	4b4f      	ldr	r3, [pc, #316]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a4e      	ldr	r2, [pc, #312]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a09c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a09e:	f7f7 ffc7 	bl	8002030 <HAL_GetTick>
 800a0a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0a4:	e008      	b.n	800a0b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a0a6:	f7f7 ffc3 	bl	8002030 <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d901      	bls.n	800a0b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e086      	b.n	800a1c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0b8:	4b45      	ldr	r3, [pc, #276]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1f0      	bne.n	800a0a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a0c4:	4b42      	ldr	r3, [pc, #264]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	051b      	lsls	r3, r3, #20
 800a0d2:	493f      	ldr	r1, [pc, #252]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	628b      	str	r3, [r1, #40]	; 0x28
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	3b01      	subs	r3, #1
 800a0e8:	025b      	lsls	r3, r3, #9
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	431a      	orrs	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	041b      	lsls	r3, r3, #16
 800a0f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	3b01      	subs	r3, #1
 800a102:	061b      	lsls	r3, r3, #24
 800a104:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a108:	4931      	ldr	r1, [pc, #196]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a10e:	4b30      	ldr	r3, [pc, #192]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a112:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	492d      	ldr	r1, [pc, #180]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a11c:	4313      	orrs	r3, r2
 800a11e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a120:	4b2b      	ldr	r3, [pc, #172]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a124:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	4928      	ldr	r1, [pc, #160]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a132:	4b27      	ldr	r3, [pc, #156]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a136:	4a26      	ldr	r2, [pc, #152]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a13c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a13e:	4b24      	ldr	r3, [pc, #144]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a142:	4b24      	ldr	r3, [pc, #144]	; (800a1d4 <RCCEx_PLL3_Config+0x160>)
 800a144:	4013      	ands	r3, r2
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	69d2      	ldr	r2, [r2, #28]
 800a14a:	00d2      	lsls	r2, r2, #3
 800a14c:	4920      	ldr	r1, [pc, #128]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a14e:	4313      	orrs	r3, r2
 800a150:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a152:	4b1f      	ldr	r3, [pc, #124]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	4a1e      	ldr	r2, [pc, #120]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a15c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a164:	4b1a      	ldr	r3, [pc, #104]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	4a19      	ldr	r2, [pc, #100]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a16a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a16e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a170:	e00f      	b.n	800a192 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d106      	bne.n	800a186 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a178:	4b15      	ldr	r3, [pc, #84]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	4a14      	ldr	r2, [pc, #80]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a17e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a182:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a184:	e005      	b.n	800a192 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a186:	4b12      	ldr	r3, [pc, #72]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18a:	4a11      	ldr	r2, [pc, #68]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a18c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a190:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a192:	4b0f      	ldr	r3, [pc, #60]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a0e      	ldr	r2, [pc, #56]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a19c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a19e:	f7f7 ff47 	bl	8002030 <HAL_GetTick>
 800a1a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1a4:	e008      	b.n	800a1b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a1a6:	f7f7 ff43 	bl	8002030 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e006      	b.n	800a1c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1b8:	4b05      	ldr	r3, [pc, #20]	; (800a1d0 <RCCEx_PLL3_Config+0x15c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0f0      	beq.n	800a1a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	58024400 	.word	0x58024400
 800a1d4:	ffff0007 	.word	0xffff0007

0800a1d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e049      	b.n	800a27e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7f7 fa20 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3304      	adds	r3, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4610      	mov	r0, r2
 800a218:	f000 f9ee 	bl	800a5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
	...

0800a288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d001      	beq.n	800a2a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e04f      	b.n	800a340 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68da      	ldr	r2, [r3, #12]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f042 0201 	orr.w	r2, r2, #1
 800a2b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a23      	ldr	r2, [pc, #140]	; (800a34c <HAL_TIM_Base_Start_IT+0xc4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d01d      	beq.n	800a2fe <HAL_TIM_Base_Start_IT+0x76>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ca:	d018      	beq.n	800a2fe <HAL_TIM_Base_Start_IT+0x76>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a1f      	ldr	r2, [pc, #124]	; (800a350 <HAL_TIM_Base_Start_IT+0xc8>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d013      	beq.n	800a2fe <HAL_TIM_Base_Start_IT+0x76>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a1e      	ldr	r2, [pc, #120]	; (800a354 <HAL_TIM_Base_Start_IT+0xcc>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d00e      	beq.n	800a2fe <HAL_TIM_Base_Start_IT+0x76>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a1c      	ldr	r2, [pc, #112]	; (800a358 <HAL_TIM_Base_Start_IT+0xd0>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d009      	beq.n	800a2fe <HAL_TIM_Base_Start_IT+0x76>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a1b      	ldr	r2, [pc, #108]	; (800a35c <HAL_TIM_Base_Start_IT+0xd4>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d004      	beq.n	800a2fe <HAL_TIM_Base_Start_IT+0x76>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a19      	ldr	r2, [pc, #100]	; (800a360 <HAL_TIM_Base_Start_IT+0xd8>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d115      	bne.n	800a32a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	4b17      	ldr	r3, [pc, #92]	; (800a364 <HAL_TIM_Base_Start_IT+0xdc>)
 800a306:	4013      	ands	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2b06      	cmp	r3, #6
 800a30e:	d015      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0xb4>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a316:	d011      	beq.n	800a33c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f042 0201 	orr.w	r2, r2, #1
 800a326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a328:	e008      	b.n	800a33c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f042 0201 	orr.w	r2, r2, #1
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	e000      	b.n	800a33e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a33c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	40010000 	.word	0x40010000
 800a350:	40000400 	.word	0x40000400
 800a354:	40000800 	.word	0x40000800
 800a358:	40000c00 	.word	0x40000c00
 800a35c:	40010400 	.word	0x40010400
 800a360:	40001800 	.word	0x40001800
 800a364:	00010007 	.word	0x00010007

0800a368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d122      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	f003 0302 	and.w	r3, r3, #2
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d11b      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f06f 0202 	mvn.w	r2, #2
 800a394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	f003 0303 	and.w	r3, r3, #3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f905 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a3b0:	e005      	b.n	800a3be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f8f7 	bl	800a5a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f908 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f003 0304 	and.w	r3, r3, #4
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d122      	bne.n	800a418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d11b      	bne.n	800a418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f06f 0204 	mvn.w	r2, #4
 800a3e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2202      	movs	r2, #2
 800a3ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d003      	beq.n	800a406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f8db 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a404:	e005      	b.n	800a412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f8cd 	bl	800a5a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f8de 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	f003 0308 	and.w	r3, r3, #8
 800a422:	2b08      	cmp	r3, #8
 800a424:	d122      	bne.n	800a46c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	f003 0308 	and.w	r3, r3, #8
 800a430:	2b08      	cmp	r3, #8
 800a432:	d11b      	bne.n	800a46c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f06f 0208 	mvn.w	r2, #8
 800a43c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2204      	movs	r2, #4
 800a442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	f003 0303 	and.w	r3, r3, #3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f8b1 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a458:	e005      	b.n	800a466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f8a3 	bl	800a5a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f8b4 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	f003 0310 	and.w	r3, r3, #16
 800a476:	2b10      	cmp	r3, #16
 800a478:	d122      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f003 0310 	and.w	r3, r3, #16
 800a484:	2b10      	cmp	r3, #16
 800a486:	d11b      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f06f 0210 	mvn.w	r2, #16
 800a490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2208      	movs	r2, #8
 800a496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	69db      	ldr	r3, [r3, #28]
 800a49e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f887 	bl	800a5ba <HAL_TIM_IC_CaptureCallback>
 800a4ac:	e005      	b.n	800a4ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f879 	bl	800a5a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f88a 	bl	800a5ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d10e      	bne.n	800a4ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d107      	bne.n	800a4ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f06f 0201 	mvn.w	r2, #1
 800a4e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7f7 f9ce 	bl	8001888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f6:	2b80      	cmp	r3, #128	; 0x80
 800a4f8:	d10e      	bne.n	800a518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a504:	2b80      	cmp	r3, #128	; 0x80
 800a506:	d107      	bne.n	800a518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f99c 	bl	800a850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a526:	d10e      	bne.n	800a546 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a532:	2b80      	cmp	r3, #128	; 0x80
 800a534:	d107      	bne.n	800a546 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a53e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f98f 	bl	800a864 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a550:	2b40      	cmp	r3, #64	; 0x40
 800a552:	d10e      	bne.n	800a572 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a55e:	2b40      	cmp	r3, #64	; 0x40
 800a560:	d107      	bne.n	800a572 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a56a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f838 	bl	800a5e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	f003 0320 	and.w	r3, r3, #32
 800a57c:	2b20      	cmp	r3, #32
 800a57e:	d10e      	bne.n	800a59e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b20      	cmp	r3, #32
 800a58c:	d107      	bne.n	800a59e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f06f 0220 	mvn.w	r2, #32
 800a596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f94f 	bl	800a83c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a59e:	bf00      	nop
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a5ae:	bf00      	nop
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr

0800a5ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a5c2:	bf00      	nop
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b083      	sub	sp, #12
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a40      	ldr	r2, [pc, #256]	; (800a70c <TIM_Base_SetConfig+0x114>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d013      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a616:	d00f      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a3d      	ldr	r2, [pc, #244]	; (800a710 <TIM_Base_SetConfig+0x118>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d00b      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a3c      	ldr	r2, [pc, #240]	; (800a714 <TIM_Base_SetConfig+0x11c>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d007      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a3b      	ldr	r2, [pc, #236]	; (800a718 <TIM_Base_SetConfig+0x120>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d003      	beq.n	800a638 <TIM_Base_SetConfig+0x40>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	4a3a      	ldr	r2, [pc, #232]	; (800a71c <TIM_Base_SetConfig+0x124>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d108      	bne.n	800a64a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a63e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	4313      	orrs	r3, r2
 800a648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a2f      	ldr	r2, [pc, #188]	; (800a70c <TIM_Base_SetConfig+0x114>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d01f      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a658:	d01b      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a2c      	ldr	r2, [pc, #176]	; (800a710 <TIM_Base_SetConfig+0x118>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d017      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a2b      	ldr	r2, [pc, #172]	; (800a714 <TIM_Base_SetConfig+0x11c>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d013      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a2a      	ldr	r2, [pc, #168]	; (800a718 <TIM_Base_SetConfig+0x120>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d00f      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a29      	ldr	r2, [pc, #164]	; (800a71c <TIM_Base_SetConfig+0x124>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d00b      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a28      	ldr	r2, [pc, #160]	; (800a720 <TIM_Base_SetConfig+0x128>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d007      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a27      	ldr	r2, [pc, #156]	; (800a724 <TIM_Base_SetConfig+0x12c>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d003      	beq.n	800a692 <TIM_Base_SetConfig+0x9a>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a26      	ldr	r2, [pc, #152]	; (800a728 <TIM_Base_SetConfig+0x130>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d108      	bne.n	800a6a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	689a      	ldr	r2, [r3, #8]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a10      	ldr	r2, [pc, #64]	; (800a70c <TIM_Base_SetConfig+0x114>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d00f      	beq.n	800a6f0 <TIM_Base_SetConfig+0xf8>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a12      	ldr	r2, [pc, #72]	; (800a71c <TIM_Base_SetConfig+0x124>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d00b      	beq.n	800a6f0 <TIM_Base_SetConfig+0xf8>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a11      	ldr	r2, [pc, #68]	; (800a720 <TIM_Base_SetConfig+0x128>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d007      	beq.n	800a6f0 <TIM_Base_SetConfig+0xf8>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a10      	ldr	r2, [pc, #64]	; (800a724 <TIM_Base_SetConfig+0x12c>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d003      	beq.n	800a6f0 <TIM_Base_SetConfig+0xf8>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4a0f      	ldr	r2, [pc, #60]	; (800a728 <TIM_Base_SetConfig+0x130>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d103      	bne.n	800a6f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	691a      	ldr	r2, [r3, #16]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	615a      	str	r2, [r3, #20]
}
 800a6fe:	bf00      	nop
 800a700:	3714      	adds	r7, #20
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	40010000 	.word	0x40010000
 800a710:	40000400 	.word	0x40000400
 800a714:	40000800 	.word	0x40000800
 800a718:	40000c00 	.word	0x40000c00
 800a71c:	40010400 	.word	0x40010400
 800a720:	40014000 	.word	0x40014000
 800a724:	40014400 	.word	0x40014400
 800a728:	40014800 	.word	0x40014800

0800a72c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a740:	2302      	movs	r3, #2
 800a742:	e068      	b.n	800a816 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2202      	movs	r2, #2
 800a750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a2e      	ldr	r2, [pc, #184]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d004      	beq.n	800a778 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a2d      	ldr	r2, [pc, #180]	; (800a828 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d108      	bne.n	800a78a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a77e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a790:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	4313      	orrs	r3, r2
 800a79a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d01d      	beq.n	800a7ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b6:	d018      	beq.n	800a7ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a1b      	ldr	r2, [pc, #108]	; (800a82c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d013      	beq.n	800a7ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a1a      	ldr	r2, [pc, #104]	; (800a830 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d00e      	beq.n	800a7ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a18      	ldr	r2, [pc, #96]	; (800a834 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d009      	beq.n	800a7ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a13      	ldr	r2, [pc, #76]	; (800a828 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d004      	beq.n	800a7ea <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a14      	ldr	r2, [pc, #80]	; (800a838 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d10c      	bne.n	800a804 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	40010000 	.word	0x40010000
 800a828:	40010400 	.word	0x40010400
 800a82c:	40000400 	.word	0x40000400
 800a830:	40000800 	.word	0x40000800
 800a834:	40000c00 	.word	0x40000c00
 800a838:	40001800 	.word	0x40001800

0800a83c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d101      	bne.n	800a88a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e042      	b.n	800a910 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a890:	2b00      	cmp	r3, #0
 800a892:	d106      	bne.n	800a8a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7f6 fef9 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2224      	movs	r2, #36	; 0x24
 800a8a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0201 	bic.w	r2, r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fb90 	bl	800afe0 <UART_SetConfig>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d101      	bne.n	800a8ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e022      	b.n	800a910 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d002      	beq.n	800a8d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f001 f8e4 	bl	800baa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	689a      	ldr	r2, [r3, #8]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f042 0201 	orr.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f001 f96b 	bl	800bbe4 <UART_CheckIdleState>
 800a90e:	4603      	mov	r3, r0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3708      	adds	r7, #8
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b084      	sub	sp, #16
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	4613      	mov	r3, r2
 800a924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a92c:	2b20      	cmp	r3, #32
 800a92e:	d168      	bne.n	800aa02 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d002      	beq.n	800a93c <HAL_UART_Transmit_DMA+0x24>
 800a936:	88fb      	ldrh	r3, [r7, #6]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d101      	bne.n	800a940 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	e061      	b.n	800aa04 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a946:	2b01      	cmp	r3, #1
 800a948:	d101      	bne.n	800a94e <HAL_UART_Transmit_DMA+0x36>
 800a94a:	2302      	movs	r3, #2
 800a94c:	e05a      	b.n	800aa04 <HAL_UART_Transmit_DMA+0xec>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	88fa      	ldrh	r2, [r7, #6]
 800a960:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	88fa      	ldrh	r2, [r7, #6]
 800a968:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2221      	movs	r2, #33	; 0x21
 800a978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a980:	2b00      	cmp	r3, #0
 800a982:	d02c      	beq.n	800a9de <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a988:	4a20      	ldr	r2, [pc, #128]	; (800aa0c <HAL_UART_Transmit_DMA+0xf4>)
 800a98a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a990:	4a1f      	ldr	r2, [pc, #124]	; (800aa10 <HAL_UART_Transmit_DMA+0xf8>)
 800a992:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a998:	4a1e      	ldr	r2, [pc, #120]	; (800aa14 <HAL_UART_Transmit_DMA+0xfc>)
 800a99a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3328      	adds	r3, #40	; 0x28
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	88fb      	ldrh	r3, [r7, #6]
 800a9b8:	f7f7 ffe2 	bl	8002980 <HAL_DMA_Start_IT>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00d      	beq.n	800a9de <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2210      	movs	r2, #16
 800a9c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e012      	b.n	800aa04 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2240      	movs	r2, #64	; 0x40
 800a9e4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	689a      	ldr	r2, [r3, #8]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a9fc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	e000      	b.n	800aa04 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800aa02:	2302      	movs	r3, #2
  }
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	0800be1d 	.word	0x0800be1d
 800aa10:	0800be6d 	.word	0x0800be6d
 800aa14:	0800be89 	.word	0x0800be89

0800aa18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b088      	sub	sp, #32
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa38:	69fa      	ldr	r2, [r7, #28]
 800aa3a:	f640 030f 	movw	r3, #2063	; 0x80f
 800aa3e:	4013      	ands	r3, r2
 800aa40:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d118      	bne.n	800aa7a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	f003 0320 	and.w	r3, r3, #32
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d013      	beq.n	800aa7a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	f003 0320 	and.w	r3, r3, #32
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d104      	bne.n	800aa66 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d009      	beq.n	800aa7a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f000 8282 	beq.w	800af74 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	4798      	blx	r3
      }
      return;
 800aa78:	e27c      	b.n	800af74 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80ef 	beq.w	800ac60 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	4b73      	ldr	r3, [pc, #460]	; (800ac54 <HAL_UART_IRQHandler+0x23c>)
 800aa86:	4013      	ands	r3, r2
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d105      	bne.n	800aa98 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	4b72      	ldr	r3, [pc, #456]	; (800ac58 <HAL_UART_IRQHandler+0x240>)
 800aa90:	4013      	ands	r3, r2
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 80e4 	beq.w	800ac60 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d010      	beq.n	800aac4 <HAL_UART_IRQHandler+0xac>
 800aaa2:	69bb      	ldr	r3, [r7, #24]
 800aaa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d00b      	beq.n	800aac4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2201      	movs	r2, #1
 800aab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaba:	f043 0201 	orr.w	r2, r3, #1
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d010      	beq.n	800aaf0 <HAL_UART_IRQHandler+0xd8>
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f003 0301 	and.w	r3, r3, #1
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d00b      	beq.n	800aaf0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2202      	movs	r2, #2
 800aade:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aae6:	f043 0204 	orr.w	r2, r3, #4
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	f003 0304 	and.w	r3, r3, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d010      	beq.n	800ab1c <HAL_UART_IRQHandler+0x104>
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00b      	beq.n	800ab1c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2204      	movs	r2, #4
 800ab0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab12:	f043 0202 	orr.w	r2, r3, #2
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	f003 0308 	and.w	r3, r3, #8
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d015      	beq.n	800ab52 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	f003 0320 	and.w	r3, r3, #32
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d104      	bne.n	800ab3a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	4b48      	ldr	r3, [pc, #288]	; (800ac54 <HAL_UART_IRQHandler+0x23c>)
 800ab34:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00b      	beq.n	800ab52 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2208      	movs	r2, #8
 800ab40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab48:	f043 0208 	orr.w	r2, r3, #8
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d011      	beq.n	800ab80 <HAL_UART_IRQHandler+0x168>
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00c      	beq.n	800ab80 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab76:	f043 0220 	orr.w	r2, r3, #32
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f000 81f6 	beq.w	800af78 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	f003 0320 	and.w	r3, r3, #32
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d011      	beq.n	800abba <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	f003 0320 	and.w	r3, r3, #32
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d104      	bne.n	800abaa <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d007      	beq.n	800abba <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abc0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abcc:	2b40      	cmp	r3, #64	; 0x40
 800abce:	d004      	beq.n	800abda <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d031      	beq.n	800ac3e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f001 f8ec 	bl	800bdb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abea:	2b40      	cmp	r3, #64	; 0x40
 800abec:	d123      	bne.n	800ac36 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	689a      	ldr	r2, [r3, #8]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abfc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d013      	beq.n	800ac2e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac0a:	4a14      	ldr	r2, [pc, #80]	; (800ac5c <HAL_UART_IRQHandler+0x244>)
 800ac0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7f8 fc3c 	bl	8003490 <HAL_DMA_Abort_IT>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d017      	beq.n	800ac4e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2c:	e00f      	b.n	800ac4e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f9c0 	bl	800afb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac34:	e00b      	b.n	800ac4e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f9bc 	bl	800afb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac3c:	e007      	b.n	800ac4e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f9b8 	bl	800afb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800ac4c:	e194      	b.n	800af78 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac4e:	bf00      	nop
    return;
 800ac50:	e192      	b.n	800af78 <HAL_UART_IRQHandler+0x560>
 800ac52:	bf00      	nop
 800ac54:	10000001 	.word	0x10000001
 800ac58:	04000120 	.word	0x04000120
 800ac5c:	0800bf09 	.word	0x0800bf09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	f040 810f 	bne.w	800ae88 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	f003 0310 	and.w	r3, r3, #16
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 8109 	beq.w	800ae88 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	f003 0310 	and.w	r3, r3, #16
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 8103 	beq.w	800ae88 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2210      	movs	r2, #16
 800ac88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac94:	2b40      	cmp	r3, #64	; 0x40
 800ac96:	f040 80bb 	bne.w	800ae10 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a96      	ldr	r2, [pc, #600]	; (800aefc <HAL_UART_IRQHandler+0x4e4>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d059      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a94      	ldr	r2, [pc, #592]	; (800af00 <HAL_UART_IRQHandler+0x4e8>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d053      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a92      	ldr	r2, [pc, #584]	; (800af04 <HAL_UART_IRQHandler+0x4ec>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d04d      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a90      	ldr	r2, [pc, #576]	; (800af08 <HAL_UART_IRQHandler+0x4f0>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d047      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a8e      	ldr	r2, [pc, #568]	; (800af0c <HAL_UART_IRQHandler+0x4f4>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d041      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a8c      	ldr	r2, [pc, #560]	; (800af10 <HAL_UART_IRQHandler+0x4f8>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d03b      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a8a      	ldr	r2, [pc, #552]	; (800af14 <HAL_UART_IRQHandler+0x4fc>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d035      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a88      	ldr	r2, [pc, #544]	; (800af18 <HAL_UART_IRQHandler+0x500>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d02f      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a86      	ldr	r2, [pc, #536]	; (800af1c <HAL_UART_IRQHandler+0x504>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d029      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a84      	ldr	r2, [pc, #528]	; (800af20 <HAL_UART_IRQHandler+0x508>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d023      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a82      	ldr	r2, [pc, #520]	; (800af24 <HAL_UART_IRQHandler+0x50c>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d01d      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a80      	ldr	r2, [pc, #512]	; (800af28 <HAL_UART_IRQHandler+0x510>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d017      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a7e      	ldr	r2, [pc, #504]	; (800af2c <HAL_UART_IRQHandler+0x514>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d011      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a7c      	ldr	r2, [pc, #496]	; (800af30 <HAL_UART_IRQHandler+0x518>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d00b      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a7a      	ldr	r2, [pc, #488]	; (800af34 <HAL_UART_IRQHandler+0x51c>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d005      	beq.n	800ad5a <HAL_UART_IRQHandler+0x342>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a78      	ldr	r2, [pc, #480]	; (800af38 <HAL_UART_IRQHandler+0x520>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d105      	bne.n	800ad66 <HAL_UART_IRQHandler+0x34e>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	e004      	b.n	800ad70 <HAL_UART_IRQHandler+0x358>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800ad72:	893b      	ldrh	r3, [r7, #8]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 8101 	beq.w	800af7c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ad80:	893a      	ldrh	r2, [r7, #8]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	f080 80fa 	bcs.w	800af7c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	893a      	ldrh	r2, [r7, #8]
 800ad8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad94:	69db      	ldr	r3, [r3, #28]
 800ad96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9a:	d02b      	beq.n	800adf4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adaa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f022 0201 	bic.w	r2, r2, #1
 800adba:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689a      	ldr	r2, [r3, #8]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adca:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2220      	movs	r2, #32
 800add0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f022 0210 	bic.w	r2, r2, #16
 800ade8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adee:	4618      	mov	r0, r3
 800adf0:	f7f8 f830 	bl	8002e54 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f8dd 	bl	800afc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae0e:	e0b5      	b.n	800af7c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ae28:	b29b      	uxth	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 80a8 	beq.w	800af80 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800ae30:	897b      	ldrh	r3, [r7, #10]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 80a4 	beq.w	800af80 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ae46:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	6899      	ldr	r1, [r3, #8]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	4b3a      	ldr	r3, [pc, #232]	; (800af3c <HAL_UART_IRQHandler+0x524>)
 800ae54:	400b      	ands	r3, r1
 800ae56:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2220      	movs	r2, #32
 800ae5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0210 	bic.w	r2, r2, #16
 800ae7a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae7c:	897b      	ldrh	r3, [r7, #10]
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f8a1 	bl	800afc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae86:	e07b      	b.n	800af80 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00d      	beq.n	800aeae <HAL_UART_IRQHandler+0x496>
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d008      	beq.n	800aeae <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aea4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f001 f85e 	bl	800bf68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aeac:	e06b      	b.n	800af86 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d012      	beq.n	800aede <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aeb8:	69bb      	ldr	r3, [r7, #24]
 800aeba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d104      	bne.n	800aecc <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d008      	beq.n	800aede <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d057      	beq.n	800af84 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	4798      	blx	r3
    }
    return;
 800aedc:	e052      	b.n	800af84 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d02b      	beq.n	800af40 <HAL_UART_IRQHandler+0x528>
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d026      	beq.n	800af40 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f001 f81e 	bl	800bf34 <UART_EndTransmit_IT>
    return;
 800aef8:	e045      	b.n	800af86 <HAL_UART_IRQHandler+0x56e>
 800aefa:	bf00      	nop
 800aefc:	40020010 	.word	0x40020010
 800af00:	40020028 	.word	0x40020028
 800af04:	40020040 	.word	0x40020040
 800af08:	40020058 	.word	0x40020058
 800af0c:	40020070 	.word	0x40020070
 800af10:	40020088 	.word	0x40020088
 800af14:	400200a0 	.word	0x400200a0
 800af18:	400200b8 	.word	0x400200b8
 800af1c:	40020410 	.word	0x40020410
 800af20:	40020428 	.word	0x40020428
 800af24:	40020440 	.word	0x40020440
 800af28:	40020458 	.word	0x40020458
 800af2c:	40020470 	.word	0x40020470
 800af30:	40020488 	.word	0x40020488
 800af34:	400204a0 	.word	0x400204a0
 800af38:	400204b8 	.word	0x400204b8
 800af3c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d008      	beq.n	800af5c <HAL_UART_IRQHandler+0x544>
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af50:	2b00      	cmp	r3, #0
 800af52:	d003      	beq.n	800af5c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f001 f81b 	bl	800bf90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af5a:	e014      	b.n	800af86 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00f      	beq.n	800af86 <HAL_UART_IRQHandler+0x56e>
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	da0c      	bge.n	800af86 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 f805 	bl	800bf7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af72:	e008      	b.n	800af86 <HAL_UART_IRQHandler+0x56e>
      return;
 800af74:	bf00      	nop
 800af76:	e006      	b.n	800af86 <HAL_UART_IRQHandler+0x56e>
    return;
 800af78:	bf00      	nop
 800af7a:	e004      	b.n	800af86 <HAL_UART_IRQHandler+0x56e>
      return;
 800af7c:	bf00      	nop
 800af7e:	e002      	b.n	800af86 <HAL_UART_IRQHandler+0x56e>
      return;
 800af80:	bf00      	nop
 800af82:	e000      	b.n	800af86 <HAL_UART_IRQHandler+0x56e>
    return;
 800af84:	bf00      	nop
  }
}
 800af86:	3720      	adds	r7, #32
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afe0:	b5b0      	push	{r4, r5, r7, lr}
 800afe2:	b08e      	sub	sp, #56	; 0x38
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	689a      	ldr	r2, [r3, #8]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	431a      	orrs	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	431a      	orrs	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	69db      	ldr	r3, [r3, #28]
 800b002:	4313      	orrs	r3, r2
 800b004:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	4bbf      	ldr	r3, [pc, #764]	; (800b30c <UART_SetConfig+0x32c>)
 800b00e:	4013      	ands	r3, r2
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	6812      	ldr	r2, [r2, #0]
 800b014:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b016:	430b      	orrs	r3, r1
 800b018:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	430a      	orrs	r2, r1
 800b02e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4ab5      	ldr	r2, [pc, #724]	; (800b310 <UART_SetConfig+0x330>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d004      	beq.n	800b04a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b046:	4313      	orrs	r3, r2
 800b048:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	689a      	ldr	r2, [r3, #8]
 800b050:	4bb0      	ldr	r3, [pc, #704]	; (800b314 <UART_SetConfig+0x334>)
 800b052:	4013      	ands	r3, r2
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	6812      	ldr	r2, [r2, #0]
 800b058:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b05a:	430b      	orrs	r3, r1
 800b05c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b064:	f023 010f 	bic.w	r1, r3, #15
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	430a      	orrs	r2, r1
 800b072:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4aa7      	ldr	r2, [pc, #668]	; (800b318 <UART_SetConfig+0x338>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d176      	bne.n	800b16c <UART_SetConfig+0x18c>
 800b07e:	4ba7      	ldr	r3, [pc, #668]	; (800b31c <UART_SetConfig+0x33c>)
 800b080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b086:	2b28      	cmp	r3, #40	; 0x28
 800b088:	d86c      	bhi.n	800b164 <UART_SetConfig+0x184>
 800b08a:	a201      	add	r2, pc, #4	; (adr r2, 800b090 <UART_SetConfig+0xb0>)
 800b08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b090:	0800b135 	.word	0x0800b135
 800b094:	0800b165 	.word	0x0800b165
 800b098:	0800b165 	.word	0x0800b165
 800b09c:	0800b165 	.word	0x0800b165
 800b0a0:	0800b165 	.word	0x0800b165
 800b0a4:	0800b165 	.word	0x0800b165
 800b0a8:	0800b165 	.word	0x0800b165
 800b0ac:	0800b165 	.word	0x0800b165
 800b0b0:	0800b13d 	.word	0x0800b13d
 800b0b4:	0800b165 	.word	0x0800b165
 800b0b8:	0800b165 	.word	0x0800b165
 800b0bc:	0800b165 	.word	0x0800b165
 800b0c0:	0800b165 	.word	0x0800b165
 800b0c4:	0800b165 	.word	0x0800b165
 800b0c8:	0800b165 	.word	0x0800b165
 800b0cc:	0800b165 	.word	0x0800b165
 800b0d0:	0800b145 	.word	0x0800b145
 800b0d4:	0800b165 	.word	0x0800b165
 800b0d8:	0800b165 	.word	0x0800b165
 800b0dc:	0800b165 	.word	0x0800b165
 800b0e0:	0800b165 	.word	0x0800b165
 800b0e4:	0800b165 	.word	0x0800b165
 800b0e8:	0800b165 	.word	0x0800b165
 800b0ec:	0800b165 	.word	0x0800b165
 800b0f0:	0800b14d 	.word	0x0800b14d
 800b0f4:	0800b165 	.word	0x0800b165
 800b0f8:	0800b165 	.word	0x0800b165
 800b0fc:	0800b165 	.word	0x0800b165
 800b100:	0800b165 	.word	0x0800b165
 800b104:	0800b165 	.word	0x0800b165
 800b108:	0800b165 	.word	0x0800b165
 800b10c:	0800b165 	.word	0x0800b165
 800b110:	0800b155 	.word	0x0800b155
 800b114:	0800b165 	.word	0x0800b165
 800b118:	0800b165 	.word	0x0800b165
 800b11c:	0800b165 	.word	0x0800b165
 800b120:	0800b165 	.word	0x0800b165
 800b124:	0800b165 	.word	0x0800b165
 800b128:	0800b165 	.word	0x0800b165
 800b12c:	0800b165 	.word	0x0800b165
 800b130:	0800b15d 	.word	0x0800b15d
 800b134:	2301      	movs	r3, #1
 800b136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13a:	e222      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b13c:	2304      	movs	r3, #4
 800b13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b142:	e21e      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b144:	2308      	movs	r3, #8
 800b146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b14a:	e21a      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b14c:	2310      	movs	r3, #16
 800b14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b152:	e216      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b154:	2320      	movs	r3, #32
 800b156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b15a:	e212      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b15c:	2340      	movs	r3, #64	; 0x40
 800b15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b162:	e20e      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b164:	2380      	movs	r3, #128	; 0x80
 800b166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16a:	e20a      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a6b      	ldr	r2, [pc, #428]	; (800b320 <UART_SetConfig+0x340>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d130      	bne.n	800b1d8 <UART_SetConfig+0x1f8>
 800b176:	4b69      	ldr	r3, [pc, #420]	; (800b31c <UART_SetConfig+0x33c>)
 800b178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b17a:	f003 0307 	and.w	r3, r3, #7
 800b17e:	2b05      	cmp	r3, #5
 800b180:	d826      	bhi.n	800b1d0 <UART_SetConfig+0x1f0>
 800b182:	a201      	add	r2, pc, #4	; (adr r2, 800b188 <UART_SetConfig+0x1a8>)
 800b184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b188:	0800b1a1 	.word	0x0800b1a1
 800b18c:	0800b1a9 	.word	0x0800b1a9
 800b190:	0800b1b1 	.word	0x0800b1b1
 800b194:	0800b1b9 	.word	0x0800b1b9
 800b198:	0800b1c1 	.word	0x0800b1c1
 800b19c:	0800b1c9 	.word	0x0800b1c9
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1a6:	e1ec      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b1a8:	2304      	movs	r3, #4
 800b1aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ae:	e1e8      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b1b0:	2308      	movs	r3, #8
 800b1b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1b6:	e1e4      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b1b8:	2310      	movs	r3, #16
 800b1ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1be:	e1e0      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b1c0:	2320      	movs	r3, #32
 800b1c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1c6:	e1dc      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b1c8:	2340      	movs	r3, #64	; 0x40
 800b1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ce:	e1d8      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b1d0:	2380      	movs	r3, #128	; 0x80
 800b1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d6:	e1d4      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a51      	ldr	r2, [pc, #324]	; (800b324 <UART_SetConfig+0x344>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d130      	bne.n	800b244 <UART_SetConfig+0x264>
 800b1e2:	4b4e      	ldr	r3, [pc, #312]	; (800b31c <UART_SetConfig+0x33c>)
 800b1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e6:	f003 0307 	and.w	r3, r3, #7
 800b1ea:	2b05      	cmp	r3, #5
 800b1ec:	d826      	bhi.n	800b23c <UART_SetConfig+0x25c>
 800b1ee:	a201      	add	r2, pc, #4	; (adr r2, 800b1f4 <UART_SetConfig+0x214>)
 800b1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f4:	0800b20d 	.word	0x0800b20d
 800b1f8:	0800b215 	.word	0x0800b215
 800b1fc:	0800b21d 	.word	0x0800b21d
 800b200:	0800b225 	.word	0x0800b225
 800b204:	0800b22d 	.word	0x0800b22d
 800b208:	0800b235 	.word	0x0800b235
 800b20c:	2300      	movs	r3, #0
 800b20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b212:	e1b6      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b214:	2304      	movs	r3, #4
 800b216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b21a:	e1b2      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b21c:	2308      	movs	r3, #8
 800b21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b222:	e1ae      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b224:	2310      	movs	r3, #16
 800b226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b22a:	e1aa      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b22c:	2320      	movs	r3, #32
 800b22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b232:	e1a6      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b234:	2340      	movs	r3, #64	; 0x40
 800b236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23a:	e1a2      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b23c:	2380      	movs	r3, #128	; 0x80
 800b23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b242:	e19e      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a37      	ldr	r2, [pc, #220]	; (800b328 <UART_SetConfig+0x348>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d130      	bne.n	800b2b0 <UART_SetConfig+0x2d0>
 800b24e:	4b33      	ldr	r3, [pc, #204]	; (800b31c <UART_SetConfig+0x33c>)
 800b250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b252:	f003 0307 	and.w	r3, r3, #7
 800b256:	2b05      	cmp	r3, #5
 800b258:	d826      	bhi.n	800b2a8 <UART_SetConfig+0x2c8>
 800b25a:	a201      	add	r2, pc, #4	; (adr r2, 800b260 <UART_SetConfig+0x280>)
 800b25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b260:	0800b279 	.word	0x0800b279
 800b264:	0800b281 	.word	0x0800b281
 800b268:	0800b289 	.word	0x0800b289
 800b26c:	0800b291 	.word	0x0800b291
 800b270:	0800b299 	.word	0x0800b299
 800b274:	0800b2a1 	.word	0x0800b2a1
 800b278:	2300      	movs	r3, #0
 800b27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b27e:	e180      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b280:	2304      	movs	r3, #4
 800b282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b286:	e17c      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b288:	2308      	movs	r3, #8
 800b28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b28e:	e178      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b290:	2310      	movs	r3, #16
 800b292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b296:	e174      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b298:	2320      	movs	r3, #32
 800b29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b29e:	e170      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b2a0:	2340      	movs	r3, #64	; 0x40
 800b2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2a6:	e16c      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b2a8:	2380      	movs	r3, #128	; 0x80
 800b2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ae:	e168      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a1d      	ldr	r2, [pc, #116]	; (800b32c <UART_SetConfig+0x34c>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d142      	bne.n	800b340 <UART_SetConfig+0x360>
 800b2ba:	4b18      	ldr	r3, [pc, #96]	; (800b31c <UART_SetConfig+0x33c>)
 800b2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	2b05      	cmp	r3, #5
 800b2c4:	d838      	bhi.n	800b338 <UART_SetConfig+0x358>
 800b2c6:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <UART_SetConfig+0x2ec>)
 800b2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2cc:	0800b2e5 	.word	0x0800b2e5
 800b2d0:	0800b2ed 	.word	0x0800b2ed
 800b2d4:	0800b2f5 	.word	0x0800b2f5
 800b2d8:	0800b2fd 	.word	0x0800b2fd
 800b2dc:	0800b305 	.word	0x0800b305
 800b2e0:	0800b331 	.word	0x0800b331
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ea:	e14a      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b2ec:	2304      	movs	r3, #4
 800b2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2f2:	e146      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b2f4:	2308      	movs	r3, #8
 800b2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2fa:	e142      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b2fc:	2310      	movs	r3, #16
 800b2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b302:	e13e      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b304:	2320      	movs	r3, #32
 800b306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b30a:	e13a      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b30c:	cfff69f3 	.word	0xcfff69f3
 800b310:	58000c00 	.word	0x58000c00
 800b314:	11fff4ff 	.word	0x11fff4ff
 800b318:	40011000 	.word	0x40011000
 800b31c:	58024400 	.word	0x58024400
 800b320:	40004400 	.word	0x40004400
 800b324:	40004800 	.word	0x40004800
 800b328:	40004c00 	.word	0x40004c00
 800b32c:	40005000 	.word	0x40005000
 800b330:	2340      	movs	r3, #64	; 0x40
 800b332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b336:	e124      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b338:	2380      	movs	r3, #128	; 0x80
 800b33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33e:	e120      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4acc      	ldr	r2, [pc, #816]	; (800b678 <UART_SetConfig+0x698>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d176      	bne.n	800b438 <UART_SetConfig+0x458>
 800b34a:	4bcc      	ldr	r3, [pc, #816]	; (800b67c <UART_SetConfig+0x69c>)
 800b34c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b34e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b352:	2b28      	cmp	r3, #40	; 0x28
 800b354:	d86c      	bhi.n	800b430 <UART_SetConfig+0x450>
 800b356:	a201      	add	r2, pc, #4	; (adr r2, 800b35c <UART_SetConfig+0x37c>)
 800b358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b35c:	0800b401 	.word	0x0800b401
 800b360:	0800b431 	.word	0x0800b431
 800b364:	0800b431 	.word	0x0800b431
 800b368:	0800b431 	.word	0x0800b431
 800b36c:	0800b431 	.word	0x0800b431
 800b370:	0800b431 	.word	0x0800b431
 800b374:	0800b431 	.word	0x0800b431
 800b378:	0800b431 	.word	0x0800b431
 800b37c:	0800b409 	.word	0x0800b409
 800b380:	0800b431 	.word	0x0800b431
 800b384:	0800b431 	.word	0x0800b431
 800b388:	0800b431 	.word	0x0800b431
 800b38c:	0800b431 	.word	0x0800b431
 800b390:	0800b431 	.word	0x0800b431
 800b394:	0800b431 	.word	0x0800b431
 800b398:	0800b431 	.word	0x0800b431
 800b39c:	0800b411 	.word	0x0800b411
 800b3a0:	0800b431 	.word	0x0800b431
 800b3a4:	0800b431 	.word	0x0800b431
 800b3a8:	0800b431 	.word	0x0800b431
 800b3ac:	0800b431 	.word	0x0800b431
 800b3b0:	0800b431 	.word	0x0800b431
 800b3b4:	0800b431 	.word	0x0800b431
 800b3b8:	0800b431 	.word	0x0800b431
 800b3bc:	0800b419 	.word	0x0800b419
 800b3c0:	0800b431 	.word	0x0800b431
 800b3c4:	0800b431 	.word	0x0800b431
 800b3c8:	0800b431 	.word	0x0800b431
 800b3cc:	0800b431 	.word	0x0800b431
 800b3d0:	0800b431 	.word	0x0800b431
 800b3d4:	0800b431 	.word	0x0800b431
 800b3d8:	0800b431 	.word	0x0800b431
 800b3dc:	0800b421 	.word	0x0800b421
 800b3e0:	0800b431 	.word	0x0800b431
 800b3e4:	0800b431 	.word	0x0800b431
 800b3e8:	0800b431 	.word	0x0800b431
 800b3ec:	0800b431 	.word	0x0800b431
 800b3f0:	0800b431 	.word	0x0800b431
 800b3f4:	0800b431 	.word	0x0800b431
 800b3f8:	0800b431 	.word	0x0800b431
 800b3fc:	0800b429 	.word	0x0800b429
 800b400:	2301      	movs	r3, #1
 800b402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b406:	e0bc      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b408:	2304      	movs	r3, #4
 800b40a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b40e:	e0b8      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b410:	2308      	movs	r3, #8
 800b412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b416:	e0b4      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b418:	2310      	movs	r3, #16
 800b41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b41e:	e0b0      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b420:	2320      	movs	r3, #32
 800b422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b426:	e0ac      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b428:	2340      	movs	r3, #64	; 0x40
 800b42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b42e:	e0a8      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b430:	2380      	movs	r3, #128	; 0x80
 800b432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b436:	e0a4      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a90      	ldr	r2, [pc, #576]	; (800b680 <UART_SetConfig+0x6a0>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d130      	bne.n	800b4a4 <UART_SetConfig+0x4c4>
 800b442:	4b8e      	ldr	r3, [pc, #568]	; (800b67c <UART_SetConfig+0x69c>)
 800b444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	2b05      	cmp	r3, #5
 800b44c:	d826      	bhi.n	800b49c <UART_SetConfig+0x4bc>
 800b44e:	a201      	add	r2, pc, #4	; (adr r2, 800b454 <UART_SetConfig+0x474>)
 800b450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b454:	0800b46d 	.word	0x0800b46d
 800b458:	0800b475 	.word	0x0800b475
 800b45c:	0800b47d 	.word	0x0800b47d
 800b460:	0800b485 	.word	0x0800b485
 800b464:	0800b48d 	.word	0x0800b48d
 800b468:	0800b495 	.word	0x0800b495
 800b46c:	2300      	movs	r3, #0
 800b46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b472:	e086      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b474:	2304      	movs	r3, #4
 800b476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b47a:	e082      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b47c:	2308      	movs	r3, #8
 800b47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b482:	e07e      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b484:	2310      	movs	r3, #16
 800b486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b48a:	e07a      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b48c:	2320      	movs	r3, #32
 800b48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b492:	e076      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b494:	2340      	movs	r3, #64	; 0x40
 800b496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b49a:	e072      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b49c:	2380      	movs	r3, #128	; 0x80
 800b49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4a2:	e06e      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a76      	ldr	r2, [pc, #472]	; (800b684 <UART_SetConfig+0x6a4>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d130      	bne.n	800b510 <UART_SetConfig+0x530>
 800b4ae:	4b73      	ldr	r3, [pc, #460]	; (800b67c <UART_SetConfig+0x69c>)
 800b4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4b2:	f003 0307 	and.w	r3, r3, #7
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	d826      	bhi.n	800b508 <UART_SetConfig+0x528>
 800b4ba:	a201      	add	r2, pc, #4	; (adr r2, 800b4c0 <UART_SetConfig+0x4e0>)
 800b4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c0:	0800b4d9 	.word	0x0800b4d9
 800b4c4:	0800b4e1 	.word	0x0800b4e1
 800b4c8:	0800b4e9 	.word	0x0800b4e9
 800b4cc:	0800b4f1 	.word	0x0800b4f1
 800b4d0:	0800b4f9 	.word	0x0800b4f9
 800b4d4:	0800b501 	.word	0x0800b501
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4de:	e050      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b4e0:	2304      	movs	r3, #4
 800b4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4e6:	e04c      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b4e8:	2308      	movs	r3, #8
 800b4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ee:	e048      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b4f0:	2310      	movs	r3, #16
 800b4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4f6:	e044      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b4f8:	2320      	movs	r3, #32
 800b4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4fe:	e040      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b500:	2340      	movs	r3, #64	; 0x40
 800b502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b506:	e03c      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b508:	2380      	movs	r3, #128	; 0x80
 800b50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b50e:	e038      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a5c      	ldr	r2, [pc, #368]	; (800b688 <UART_SetConfig+0x6a8>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d130      	bne.n	800b57c <UART_SetConfig+0x59c>
 800b51a:	4b58      	ldr	r3, [pc, #352]	; (800b67c <UART_SetConfig+0x69c>)
 800b51c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51e:	f003 0307 	and.w	r3, r3, #7
 800b522:	2b05      	cmp	r3, #5
 800b524:	d826      	bhi.n	800b574 <UART_SetConfig+0x594>
 800b526:	a201      	add	r2, pc, #4	; (adr r2, 800b52c <UART_SetConfig+0x54c>)
 800b528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52c:	0800b545 	.word	0x0800b545
 800b530:	0800b54d 	.word	0x0800b54d
 800b534:	0800b555 	.word	0x0800b555
 800b538:	0800b55d 	.word	0x0800b55d
 800b53c:	0800b565 	.word	0x0800b565
 800b540:	0800b56d 	.word	0x0800b56d
 800b544:	2302      	movs	r3, #2
 800b546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b54a:	e01a      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b54c:	2304      	movs	r3, #4
 800b54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b552:	e016      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b554:	2308      	movs	r3, #8
 800b556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b55a:	e012      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b55c:	2310      	movs	r3, #16
 800b55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b562:	e00e      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b564:	2320      	movs	r3, #32
 800b566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b56a:	e00a      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b572:	e006      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b574:	2380      	movs	r3, #128	; 0x80
 800b576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b57a:	e002      	b.n	800b582 <UART_SetConfig+0x5a2>
 800b57c:	2380      	movs	r3, #128	; 0x80
 800b57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a40      	ldr	r2, [pc, #256]	; (800b688 <UART_SetConfig+0x6a8>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	f040 80ef 	bne.w	800b76c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b58e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b592:	2b20      	cmp	r3, #32
 800b594:	dc46      	bgt.n	800b624 <UART_SetConfig+0x644>
 800b596:	2b02      	cmp	r3, #2
 800b598:	f2c0 8081 	blt.w	800b69e <UART_SetConfig+0x6be>
 800b59c:	3b02      	subs	r3, #2
 800b59e:	2b1e      	cmp	r3, #30
 800b5a0:	d87d      	bhi.n	800b69e <UART_SetConfig+0x6be>
 800b5a2:	a201      	add	r2, pc, #4	; (adr r2, 800b5a8 <UART_SetConfig+0x5c8>)
 800b5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a8:	0800b62b 	.word	0x0800b62b
 800b5ac:	0800b69f 	.word	0x0800b69f
 800b5b0:	0800b633 	.word	0x0800b633
 800b5b4:	0800b69f 	.word	0x0800b69f
 800b5b8:	0800b69f 	.word	0x0800b69f
 800b5bc:	0800b69f 	.word	0x0800b69f
 800b5c0:	0800b643 	.word	0x0800b643
 800b5c4:	0800b69f 	.word	0x0800b69f
 800b5c8:	0800b69f 	.word	0x0800b69f
 800b5cc:	0800b69f 	.word	0x0800b69f
 800b5d0:	0800b69f 	.word	0x0800b69f
 800b5d4:	0800b69f 	.word	0x0800b69f
 800b5d8:	0800b69f 	.word	0x0800b69f
 800b5dc:	0800b69f 	.word	0x0800b69f
 800b5e0:	0800b653 	.word	0x0800b653
 800b5e4:	0800b69f 	.word	0x0800b69f
 800b5e8:	0800b69f 	.word	0x0800b69f
 800b5ec:	0800b69f 	.word	0x0800b69f
 800b5f0:	0800b69f 	.word	0x0800b69f
 800b5f4:	0800b69f 	.word	0x0800b69f
 800b5f8:	0800b69f 	.word	0x0800b69f
 800b5fc:	0800b69f 	.word	0x0800b69f
 800b600:	0800b69f 	.word	0x0800b69f
 800b604:	0800b69f 	.word	0x0800b69f
 800b608:	0800b69f 	.word	0x0800b69f
 800b60c:	0800b69f 	.word	0x0800b69f
 800b610:	0800b69f 	.word	0x0800b69f
 800b614:	0800b69f 	.word	0x0800b69f
 800b618:	0800b69f 	.word	0x0800b69f
 800b61c:	0800b69f 	.word	0x0800b69f
 800b620:	0800b691 	.word	0x0800b691
 800b624:	2b40      	cmp	r3, #64	; 0x40
 800b626:	d036      	beq.n	800b696 <UART_SetConfig+0x6b6>
 800b628:	e039      	b.n	800b69e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b62a:	f7fe f9b3 	bl	8009994 <HAL_RCCEx_GetD3PCLK1Freq>
 800b62e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b630:	e03b      	b.n	800b6aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b632:	f107 0314 	add.w	r3, r7, #20
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe f9c2 	bl	80099c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b640:	e033      	b.n	800b6aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b642:	f107 0308 	add.w	r3, r7, #8
 800b646:	4618      	mov	r0, r3
 800b648:	f7fe fb0e 	bl	8009c68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b650:	e02b      	b.n	800b6aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b652:	4b0a      	ldr	r3, [pc, #40]	; (800b67c <UART_SetConfig+0x69c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 0320 	and.w	r3, r3, #32
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d009      	beq.n	800b672 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b65e:	4b07      	ldr	r3, [pc, #28]	; (800b67c <UART_SetConfig+0x69c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	08db      	lsrs	r3, r3, #3
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	4a08      	ldr	r2, [pc, #32]	; (800b68c <UART_SetConfig+0x6ac>)
 800b66a:	fa22 f303 	lsr.w	r3, r2, r3
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b670:	e01b      	b.n	800b6aa <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b672:	4b06      	ldr	r3, [pc, #24]	; (800b68c <UART_SetConfig+0x6ac>)
 800b674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b676:	e018      	b.n	800b6aa <UART_SetConfig+0x6ca>
 800b678:	40011400 	.word	0x40011400
 800b67c:	58024400 	.word	0x58024400
 800b680:	40007800 	.word	0x40007800
 800b684:	40007c00 	.word	0x40007c00
 800b688:	58000c00 	.word	0x58000c00
 800b68c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b690:	4bc4      	ldr	r3, [pc, #784]	; (800b9a4 <UART_SetConfig+0x9c4>)
 800b692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b694:	e009      	b.n	800b6aa <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b69a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b69c:	e005      	b.n	800b6aa <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b6a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 81da 	beq.w	800ba66 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b6:	4abc      	ldr	r2, [pc, #752]	; (800b9a8 <UART_SetConfig+0x9c8>)
 800b6b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6bc:	461a      	mov	r2, r3
 800b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6c4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685a      	ldr	r2, [r3, #4]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	4413      	add	r3, r2
 800b6d0:	6a3a      	ldr	r2, [r7, #32]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d305      	bcc.n	800b6e2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6dc:	6a3a      	ldr	r2, [r7, #32]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d903      	bls.n	800b6ea <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b6e8:	e1bd      	b.n	800ba66 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f04f 0100 	mov.w	r1, #0
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	4aac      	ldr	r2, [pc, #688]	; (800b9a8 <UART_SetConfig+0x9c8>)
 800b6f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	f04f 0300 	mov.w	r3, #0
 800b702:	f7f4 fe45 	bl	8000390 <__aeabi_uldivmod>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4610      	mov	r0, r2
 800b70c:	4619      	mov	r1, r3
 800b70e:	f04f 0200 	mov.w	r2, #0
 800b712:	f04f 0300 	mov.w	r3, #0
 800b716:	020b      	lsls	r3, r1, #8
 800b718:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b71c:	0202      	lsls	r2, r0, #8
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	6849      	ldr	r1, [r1, #4]
 800b722:	0849      	lsrs	r1, r1, #1
 800b724:	4608      	mov	r0, r1
 800b726:	f04f 0100 	mov.w	r1, #0
 800b72a:	1814      	adds	r4, r2, r0
 800b72c:	eb43 0501 	adc.w	r5, r3, r1
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	461a      	mov	r2, r3
 800b736:	f04f 0300 	mov.w	r3, #0
 800b73a:	4620      	mov	r0, r4
 800b73c:	4629      	mov	r1, r5
 800b73e:	f7f4 fe27 	bl	8000390 <__aeabi_uldivmod>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4613      	mov	r3, r2
 800b748:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b750:	d308      	bcc.n	800b764 <UART_SetConfig+0x784>
 800b752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b758:	d204      	bcs.n	800b764 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b760:	60da      	str	r2, [r3, #12]
 800b762:	e180      	b.n	800ba66 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b76a:	e17c      	b.n	800ba66 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	69db      	ldr	r3, [r3, #28]
 800b770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b774:	f040 80bf 	bne.w	800b8f6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800b778:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b77c:	2b20      	cmp	r3, #32
 800b77e:	dc49      	bgt.n	800b814 <UART_SetConfig+0x834>
 800b780:	2b00      	cmp	r3, #0
 800b782:	db7c      	blt.n	800b87e <UART_SetConfig+0x89e>
 800b784:	2b20      	cmp	r3, #32
 800b786:	d87a      	bhi.n	800b87e <UART_SetConfig+0x89e>
 800b788:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <UART_SetConfig+0x7b0>)
 800b78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78e:	bf00      	nop
 800b790:	0800b81b 	.word	0x0800b81b
 800b794:	0800b823 	.word	0x0800b823
 800b798:	0800b87f 	.word	0x0800b87f
 800b79c:	0800b87f 	.word	0x0800b87f
 800b7a0:	0800b82b 	.word	0x0800b82b
 800b7a4:	0800b87f 	.word	0x0800b87f
 800b7a8:	0800b87f 	.word	0x0800b87f
 800b7ac:	0800b87f 	.word	0x0800b87f
 800b7b0:	0800b83b 	.word	0x0800b83b
 800b7b4:	0800b87f 	.word	0x0800b87f
 800b7b8:	0800b87f 	.word	0x0800b87f
 800b7bc:	0800b87f 	.word	0x0800b87f
 800b7c0:	0800b87f 	.word	0x0800b87f
 800b7c4:	0800b87f 	.word	0x0800b87f
 800b7c8:	0800b87f 	.word	0x0800b87f
 800b7cc:	0800b87f 	.word	0x0800b87f
 800b7d0:	0800b84b 	.word	0x0800b84b
 800b7d4:	0800b87f 	.word	0x0800b87f
 800b7d8:	0800b87f 	.word	0x0800b87f
 800b7dc:	0800b87f 	.word	0x0800b87f
 800b7e0:	0800b87f 	.word	0x0800b87f
 800b7e4:	0800b87f 	.word	0x0800b87f
 800b7e8:	0800b87f 	.word	0x0800b87f
 800b7ec:	0800b87f 	.word	0x0800b87f
 800b7f0:	0800b87f 	.word	0x0800b87f
 800b7f4:	0800b87f 	.word	0x0800b87f
 800b7f8:	0800b87f 	.word	0x0800b87f
 800b7fc:	0800b87f 	.word	0x0800b87f
 800b800:	0800b87f 	.word	0x0800b87f
 800b804:	0800b87f 	.word	0x0800b87f
 800b808:	0800b87f 	.word	0x0800b87f
 800b80c:	0800b87f 	.word	0x0800b87f
 800b810:	0800b871 	.word	0x0800b871
 800b814:	2b40      	cmp	r3, #64	; 0x40
 800b816:	d02e      	beq.n	800b876 <UART_SetConfig+0x896>
 800b818:	e031      	b.n	800b87e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b81a:	f7fd f94f 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800b81e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b820:	e033      	b.n	800b88a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b822:	f7fd f961 	bl	8008ae8 <HAL_RCC_GetPCLK2Freq>
 800b826:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b828:	e02f      	b.n	800b88a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b82a:	f107 0314 	add.w	r3, r7, #20
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fe f8c6 	bl	80099c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b838:	e027      	b.n	800b88a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b83a:	f107 0308 	add.w	r3, r7, #8
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fa12 	bl	8009c68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b848:	e01f      	b.n	800b88a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b84a:	4b58      	ldr	r3, [pc, #352]	; (800b9ac <UART_SetConfig+0x9cc>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f003 0320 	and.w	r3, r3, #32
 800b852:	2b00      	cmp	r3, #0
 800b854:	d009      	beq.n	800b86a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b856:	4b55      	ldr	r3, [pc, #340]	; (800b9ac <UART_SetConfig+0x9cc>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	08db      	lsrs	r3, r3, #3
 800b85c:	f003 0303 	and.w	r3, r3, #3
 800b860:	4a53      	ldr	r2, [pc, #332]	; (800b9b0 <UART_SetConfig+0x9d0>)
 800b862:	fa22 f303 	lsr.w	r3, r2, r3
 800b866:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b868:	e00f      	b.n	800b88a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b86a:	4b51      	ldr	r3, [pc, #324]	; (800b9b0 <UART_SetConfig+0x9d0>)
 800b86c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b86e:	e00c      	b.n	800b88a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b870:	4b4c      	ldr	r3, [pc, #304]	; (800b9a4 <UART_SetConfig+0x9c4>)
 800b872:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b874:	e009      	b.n	800b88a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b87a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b87c:	e005      	b.n	800b88a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b87e:	2300      	movs	r3, #0
 800b880:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f000 80ea 	beq.w	800ba66 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b896:	4a44      	ldr	r2, [pc, #272]	; (800b9a8 <UART_SetConfig+0x9c8>)
 800b898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b89c:	461a      	mov	r2, r3
 800b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8a4:	005a      	lsls	r2, r3, #1
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	085b      	lsrs	r3, r3, #1
 800b8ac:	441a      	add	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	2b0f      	cmp	r3, #15
 800b8be:	d916      	bls.n	800b8ee <UART_SetConfig+0x90e>
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8c6:	d212      	bcs.n	800b8ee <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	f023 030f 	bic.w	r3, r3, #15
 800b8d0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d4:	085b      	lsrs	r3, r3, #1
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	f003 0307 	and.w	r3, r3, #7
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b8ea:	60da      	str	r2, [r3, #12]
 800b8ec:	e0bb      	b.n	800ba66 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b8f4:	e0b7      	b.n	800ba66 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	dc4a      	bgt.n	800b994 <UART_SetConfig+0x9b4>
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	f2c0 8086 	blt.w	800ba10 <UART_SetConfig+0xa30>
 800b904:	2b20      	cmp	r3, #32
 800b906:	f200 8083 	bhi.w	800ba10 <UART_SetConfig+0xa30>
 800b90a:	a201      	add	r2, pc, #4	; (adr r2, 800b910 <UART_SetConfig+0x930>)
 800b90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b910:	0800b99b 	.word	0x0800b99b
 800b914:	0800b9b5 	.word	0x0800b9b5
 800b918:	0800ba11 	.word	0x0800ba11
 800b91c:	0800ba11 	.word	0x0800ba11
 800b920:	0800b9bd 	.word	0x0800b9bd
 800b924:	0800ba11 	.word	0x0800ba11
 800b928:	0800ba11 	.word	0x0800ba11
 800b92c:	0800ba11 	.word	0x0800ba11
 800b930:	0800b9cd 	.word	0x0800b9cd
 800b934:	0800ba11 	.word	0x0800ba11
 800b938:	0800ba11 	.word	0x0800ba11
 800b93c:	0800ba11 	.word	0x0800ba11
 800b940:	0800ba11 	.word	0x0800ba11
 800b944:	0800ba11 	.word	0x0800ba11
 800b948:	0800ba11 	.word	0x0800ba11
 800b94c:	0800ba11 	.word	0x0800ba11
 800b950:	0800b9dd 	.word	0x0800b9dd
 800b954:	0800ba11 	.word	0x0800ba11
 800b958:	0800ba11 	.word	0x0800ba11
 800b95c:	0800ba11 	.word	0x0800ba11
 800b960:	0800ba11 	.word	0x0800ba11
 800b964:	0800ba11 	.word	0x0800ba11
 800b968:	0800ba11 	.word	0x0800ba11
 800b96c:	0800ba11 	.word	0x0800ba11
 800b970:	0800ba11 	.word	0x0800ba11
 800b974:	0800ba11 	.word	0x0800ba11
 800b978:	0800ba11 	.word	0x0800ba11
 800b97c:	0800ba11 	.word	0x0800ba11
 800b980:	0800ba11 	.word	0x0800ba11
 800b984:	0800ba11 	.word	0x0800ba11
 800b988:	0800ba11 	.word	0x0800ba11
 800b98c:	0800ba11 	.word	0x0800ba11
 800b990:	0800ba03 	.word	0x0800ba03
 800b994:	2b40      	cmp	r3, #64	; 0x40
 800b996:	d037      	beq.n	800ba08 <UART_SetConfig+0xa28>
 800b998:	e03a      	b.n	800ba10 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b99a:	f7fd f88f 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800b99e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b9a0:	e03c      	b.n	800ba1c <UART_SetConfig+0xa3c>
 800b9a2:	bf00      	nop
 800b9a4:	003d0900 	.word	0x003d0900
 800b9a8:	0800ebe8 	.word	0x0800ebe8
 800b9ac:	58024400 	.word	0x58024400
 800b9b0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b9b4:	f7fd f898 	bl	8008ae8 <HAL_RCC_GetPCLK2Freq>
 800b9b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b9ba:	e02f      	b.n	800ba1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9bc:	f107 0314 	add.w	r3, r7, #20
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fd fffd 	bl	80099c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b9ca:	e027      	b.n	800ba1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b9cc:	f107 0308 	add.w	r3, r7, #8
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fe f949 	bl	8009c68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b9da:	e01f      	b.n	800ba1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9dc:	4b2c      	ldr	r3, [pc, #176]	; (800ba90 <UART_SetConfig+0xab0>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 0320 	and.w	r3, r3, #32
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d009      	beq.n	800b9fc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b9e8:	4b29      	ldr	r3, [pc, #164]	; (800ba90 <UART_SetConfig+0xab0>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	08db      	lsrs	r3, r3, #3
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	4a28      	ldr	r2, [pc, #160]	; (800ba94 <UART_SetConfig+0xab4>)
 800b9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b9fa:	e00f      	b.n	800ba1c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b9fc:	4b25      	ldr	r3, [pc, #148]	; (800ba94 <UART_SetConfig+0xab4>)
 800b9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba00:	e00c      	b.n	800ba1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba02:	4b25      	ldr	r3, [pc, #148]	; (800ba98 <UART_SetConfig+0xab8>)
 800ba04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba06:	e009      	b.n	800ba1c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba0e:	e005      	b.n	800ba1c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ba10:	2300      	movs	r3, #0
 800ba12:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ba1a:	bf00      	nop
    }

    if (pclk != 0U)
 800ba1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d021      	beq.n	800ba66 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba26:	4a1d      	ldr	r2, [pc, #116]	; (800ba9c <UART_SetConfig+0xabc>)
 800ba28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba30:	fbb3 f2f2 	udiv	r2, r3, r2
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	085b      	lsrs	r3, r3, #1
 800ba3a:	441a      	add	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	2b0f      	cmp	r3, #15
 800ba4c:	d908      	bls.n	800ba60 <UART_SetConfig+0xa80>
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba54:	d204      	bcs.n	800ba60 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba5c:	60da      	str	r2, [r3, #12]
 800ba5e:	e002      	b.n	800ba66 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2201      	movs	r2, #1
 800ba72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ba82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3738      	adds	r7, #56	; 0x38
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	58024400 	.word	0x58024400
 800ba94:	03d09000 	.word	0x03d09000
 800ba98:	003d0900 	.word	0x003d0900
 800ba9c:	0800ebe8 	.word	0x0800ebe8

0800baa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00a      	beq.n	800baca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bace:	f003 0302 	and.w	r3, r3, #2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00a      	beq.n	800baec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	430a      	orrs	r2, r1
 800baea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf0:	f003 0304 	and.w	r3, r3, #4
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00a      	beq.n	800bb0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	430a      	orrs	r2, r1
 800bb0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb12:	f003 0308 	and.w	r3, r3, #8
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00a      	beq.n	800bb30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	430a      	orrs	r2, r1
 800bb2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb34:	f003 0310 	and.w	r3, r3, #16
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00a      	beq.n	800bb52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	430a      	orrs	r2, r1
 800bb50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb56:	f003 0320 	and.w	r3, r3, #32
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00a      	beq.n	800bb74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	430a      	orrs	r2, r1
 800bb72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d01a      	beq.n	800bbb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	430a      	orrs	r2, r1
 800bb94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb9e:	d10a      	bne.n	800bbb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	430a      	orrs	r2, r1
 800bbb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00a      	beq.n	800bbd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	430a      	orrs	r2, r1
 800bbd6:	605a      	str	r2, [r3, #4]
  }
}
 800bbd8:	bf00      	nop
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af02      	add	r7, sp, #8
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bbf4:	f7f6 fa1c 	bl	8002030 <HAL_GetTick>
 800bbf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 0308 	and.w	r3, r3, #8
 800bc04:	2b08      	cmp	r3, #8
 800bc06:	d10e      	bne.n	800bc26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 f82f 	bl	800bc7a <UART_WaitOnFlagUntilTimeout>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e025      	b.n	800bc72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b04      	cmp	r3, #4
 800bc32:	d10e      	bne.n	800bc52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f819 	bl	800bc7a <UART_WaitOnFlagUntilTimeout>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d001      	beq.n	800bc52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e00f      	b.n	800bc72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2220      	movs	r2, #32
 800bc56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2220      	movs	r2, #32
 800bc5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	60f8      	str	r0, [r7, #12]
 800bc82:	60b9      	str	r1, [r7, #8]
 800bc84:	603b      	str	r3, [r7, #0]
 800bc86:	4613      	mov	r3, r2
 800bc88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc8a:	e062      	b.n	800bd52 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc92:	d05e      	beq.n	800bd52 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc94:	f7f6 f9cc 	bl	8002030 <HAL_GetTick>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	69ba      	ldr	r2, [r7, #24]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d302      	bcc.n	800bcaa <UART_WaitOnFlagUntilTimeout+0x30>
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d11d      	bne.n	800bce6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bcb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689a      	ldr	r2, [r3, #8]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0201 	bic.w	r2, r2, #1
 800bcc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2220      	movs	r2, #32
 800bcce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2220      	movs	r2, #32
 800bcd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e045      	b.n	800bd72 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 0304 	and.w	r3, r3, #4
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d02e      	beq.n	800bd52 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd02:	d126      	bne.n	800bd52 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	689a      	ldr	r2, [r3, #8]
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f022 0201 	bic.w	r2, r2, #1
 800bd2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	2220      	movs	r2, #32
 800bd32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2220      	movs	r2, #32
 800bd3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2220      	movs	r2, #32
 800bd42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bd4e:	2303      	movs	r3, #3
 800bd50:	e00f      	b.n	800bd72 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	69da      	ldr	r2, [r3, #28]
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	bf0c      	ite	eq
 800bd62:	2301      	moveq	r3, #1
 800bd64:	2300      	movne	r3, #0
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	461a      	mov	r2, r3
 800bd6a:	79fb      	ldrb	r3, [r7, #7]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d08d      	beq.n	800bc8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b083      	sub	sp, #12
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bd90:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	689a      	ldr	r2, [r3, #8]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bda0:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2220      	movs	r2, #32
 800bda6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800bdaa:	bf00      	nop
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bdce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6899      	ldr	r1, [r3, #8]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	4b0f      	ldr	r3, [pc, #60]	; (800be18 <UART_EndRxTransfer+0x60>)
 800bddc:	400b      	ands	r3, r1
 800bdde:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d107      	bne.n	800bdf8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f022 0210 	bic.w	r2, r2, #16
 800bdf6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2220      	movs	r2, #32
 800bdfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800be0c:	bf00      	nop
 800be0e:	370c      	adds	r7, #12
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	effffffe 	.word	0xeffffffe

0800be1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be28:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be32:	d014      	beq.n	800be5e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	689a      	ldr	r2, [r3, #8]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be4a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be5a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be5c:	e002      	b.n	800be64 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800be5e:	68f8      	ldr	r0, [r7, #12]
 800be60:	f7ff f894 	bl	800af8c <HAL_UART_TxCpltCallback>
}
 800be64:	bf00      	nop
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be78:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f7ff f890 	bl	800afa0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be80:	bf00      	nop
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beb0:	2b80      	cmp	r3, #128	; 0x80
 800beb2:	d109      	bne.n	800bec8 <UART_DMAError+0x40>
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	2b21      	cmp	r3, #33	; 0x21
 800beb8:	d106      	bne.n	800bec8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bec2:	6978      	ldr	r0, [r7, #20]
 800bec4:	f7ff ff59 	bl	800bd7a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed2:	2b40      	cmp	r3, #64	; 0x40
 800bed4:	d109      	bne.n	800beea <UART_DMAError+0x62>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b22      	cmp	r3, #34	; 0x22
 800beda:	d106      	bne.n	800beea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	2200      	movs	r2, #0
 800bee0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bee4:	6978      	ldr	r0, [r7, #20]
 800bee6:	f7ff ff67 	bl	800bdb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bef0:	f043 0210 	orr.w	r2, r3, #16
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800befa:	6978      	ldr	r0, [r7, #20]
 800befc:	f7ff f85a 	bl	800afb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf00:	bf00      	nop
 800bf02:	3718      	adds	r7, #24
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f7ff f844 	bl	800afb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf2c:	bf00      	nop
 800bf2e:	3710      	adds	r7, #16
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf4a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2220      	movs	r2, #32
 800bf50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7ff f816 	bl	800af8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr

0800bf90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bf98:	bf00      	nop
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d101      	bne.n	800bfba <HAL_UARTEx_DisableFifoMode+0x16>
 800bfb6:	2302      	movs	r3, #2
 800bfb8:	e027      	b.n	800c00a <HAL_UARTEx_DisableFifoMode+0x66>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2224      	movs	r2, #36	; 0x24
 800bfc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	681a      	ldr	r2, [r3, #0]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f022 0201 	bic.w	r2, r2, #1
 800bfe0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bfe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2220      	movs	r2, #32
 800bffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c008:	2300      	movs	r3, #0
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3714      	adds	r7, #20
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr

0800c016 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b084      	sub	sp, #16
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c026:	2b01      	cmp	r3, #1
 800c028:	d101      	bne.n	800c02e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c02a:	2302      	movs	r3, #2
 800c02c:	e02d      	b.n	800c08a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2201      	movs	r2, #1
 800c032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2224      	movs	r2, #36	; 0x24
 800c03a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f022 0201 	bic.w	r2, r2, #1
 800c054:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	683a      	ldr	r2, [r7, #0]
 800c066:	430a      	orrs	r2, r1
 800c068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f850 	bl	800c110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2220      	movs	r2, #32
 800c07c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b084      	sub	sp, #16
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d101      	bne.n	800c0aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	e02d      	b.n	800c106 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2224      	movs	r2, #36	; 0x24
 800c0b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	681a      	ldr	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f022 0201 	bic.w	r2, r2, #1
 800c0d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f812 	bl	800c110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2220      	movs	r2, #32
 800c0f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
	...

0800c110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d108      	bne.n	800c132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c130:	e031      	b.n	800c196 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c132:	2310      	movs	r3, #16
 800c134:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c136:	2310      	movs	r3, #16
 800c138:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	0e5b      	lsrs	r3, r3, #25
 800c142:	b2db      	uxtb	r3, r3
 800c144:	f003 0307 	and.w	r3, r3, #7
 800c148:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	0f5b      	lsrs	r3, r3, #29
 800c152:	b2db      	uxtb	r3, r3
 800c154:	f003 0307 	and.w	r3, r3, #7
 800c158:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	7b3a      	ldrb	r2, [r7, #12]
 800c15e:	4911      	ldr	r1, [pc, #68]	; (800c1a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c160:	5c8a      	ldrb	r2, [r1, r2]
 800c162:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c166:	7b3a      	ldrb	r2, [r7, #12]
 800c168:	490f      	ldr	r1, [pc, #60]	; (800c1a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c16a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c16c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c170:	b29a      	uxth	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c178:	7bfb      	ldrb	r3, [r7, #15]
 800c17a:	7b7a      	ldrb	r2, [r7, #13]
 800c17c:	4909      	ldr	r1, [pc, #36]	; (800c1a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c17e:	5c8a      	ldrb	r2, [r1, r2]
 800c180:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c184:	7b7a      	ldrb	r2, [r7, #13]
 800c186:	4908      	ldr	r1, [pc, #32]	; (800c1a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c188:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c18a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c18e:	b29a      	uxth	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c196:	bf00      	nop
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	0800ec00 	.word	0x0800ec00
 800c1a8:	0800ec08 	.word	0x0800ec08

0800c1ac <__errno>:
 800c1ac:	4b01      	ldr	r3, [pc, #4]	; (800c1b4 <__errno+0x8>)
 800c1ae:	6818      	ldr	r0, [r3, #0]
 800c1b0:	4770      	bx	lr
 800c1b2:	bf00      	nop
 800c1b4:	2400001c 	.word	0x2400001c

0800c1b8 <__libc_init_array>:
 800c1b8:	b570      	push	{r4, r5, r6, lr}
 800c1ba:	4d0d      	ldr	r5, [pc, #52]	; (800c1f0 <__libc_init_array+0x38>)
 800c1bc:	4c0d      	ldr	r4, [pc, #52]	; (800c1f4 <__libc_init_array+0x3c>)
 800c1be:	1b64      	subs	r4, r4, r5
 800c1c0:	10a4      	asrs	r4, r4, #2
 800c1c2:	2600      	movs	r6, #0
 800c1c4:	42a6      	cmp	r6, r4
 800c1c6:	d109      	bne.n	800c1dc <__libc_init_array+0x24>
 800c1c8:	4d0b      	ldr	r5, [pc, #44]	; (800c1f8 <__libc_init_array+0x40>)
 800c1ca:	4c0c      	ldr	r4, [pc, #48]	; (800c1fc <__libc_init_array+0x44>)
 800c1cc:	f002 fcd4 	bl	800eb78 <_init>
 800c1d0:	1b64      	subs	r4, r4, r5
 800c1d2:	10a4      	asrs	r4, r4, #2
 800c1d4:	2600      	movs	r6, #0
 800c1d6:	42a6      	cmp	r6, r4
 800c1d8:	d105      	bne.n	800c1e6 <__libc_init_array+0x2e>
 800c1da:	bd70      	pop	{r4, r5, r6, pc}
 800c1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e0:	4798      	blx	r3
 800c1e2:	3601      	adds	r6, #1
 800c1e4:	e7ee      	b.n	800c1c4 <__libc_init_array+0xc>
 800c1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ea:	4798      	blx	r3
 800c1ec:	3601      	adds	r6, #1
 800c1ee:	e7f2      	b.n	800c1d6 <__libc_init_array+0x1e>
 800c1f0:	0800effc 	.word	0x0800effc
 800c1f4:	0800effc 	.word	0x0800effc
 800c1f8:	0800effc 	.word	0x0800effc
 800c1fc:	0800f000 	.word	0x0800f000

0800c200 <memset>:
 800c200:	4402      	add	r2, r0
 800c202:	4603      	mov	r3, r0
 800c204:	4293      	cmp	r3, r2
 800c206:	d100      	bne.n	800c20a <memset+0xa>
 800c208:	4770      	bx	lr
 800c20a:	f803 1b01 	strb.w	r1, [r3], #1
 800c20e:	e7f9      	b.n	800c204 <memset+0x4>

0800c210 <__cvt>:
 800c210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c212:	ed2d 8b02 	vpush	{d8}
 800c216:	eeb0 8b40 	vmov.f64	d8, d0
 800c21a:	b085      	sub	sp, #20
 800c21c:	4617      	mov	r7, r2
 800c21e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c220:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c222:	ee18 2a90 	vmov	r2, s17
 800c226:	f025 0520 	bic.w	r5, r5, #32
 800c22a:	2a00      	cmp	r2, #0
 800c22c:	bfb6      	itet	lt
 800c22e:	222d      	movlt	r2, #45	; 0x2d
 800c230:	2200      	movge	r2, #0
 800c232:	eeb1 8b40 	vneglt.f64	d8, d0
 800c236:	2d46      	cmp	r5, #70	; 0x46
 800c238:	460c      	mov	r4, r1
 800c23a:	701a      	strb	r2, [r3, #0]
 800c23c:	d004      	beq.n	800c248 <__cvt+0x38>
 800c23e:	2d45      	cmp	r5, #69	; 0x45
 800c240:	d100      	bne.n	800c244 <__cvt+0x34>
 800c242:	3401      	adds	r4, #1
 800c244:	2102      	movs	r1, #2
 800c246:	e000      	b.n	800c24a <__cvt+0x3a>
 800c248:	2103      	movs	r1, #3
 800c24a:	ab03      	add	r3, sp, #12
 800c24c:	9301      	str	r3, [sp, #4]
 800c24e:	ab02      	add	r3, sp, #8
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	4622      	mov	r2, r4
 800c254:	4633      	mov	r3, r6
 800c256:	eeb0 0b48 	vmov.f64	d0, d8
 800c25a:	f000 fddd 	bl	800ce18 <_dtoa_r>
 800c25e:	2d47      	cmp	r5, #71	; 0x47
 800c260:	d109      	bne.n	800c276 <__cvt+0x66>
 800c262:	07fb      	lsls	r3, r7, #31
 800c264:	d407      	bmi.n	800c276 <__cvt+0x66>
 800c266:	9b03      	ldr	r3, [sp, #12]
 800c268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c26a:	1a1b      	subs	r3, r3, r0
 800c26c:	6013      	str	r3, [r2, #0]
 800c26e:	b005      	add	sp, #20
 800c270:	ecbd 8b02 	vpop	{d8}
 800c274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c276:	2d46      	cmp	r5, #70	; 0x46
 800c278:	eb00 0204 	add.w	r2, r0, r4
 800c27c:	d10c      	bne.n	800c298 <__cvt+0x88>
 800c27e:	7803      	ldrb	r3, [r0, #0]
 800c280:	2b30      	cmp	r3, #48	; 0x30
 800c282:	d107      	bne.n	800c294 <__cvt+0x84>
 800c284:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28c:	bf1c      	itt	ne
 800c28e:	f1c4 0401 	rsbne	r4, r4, #1
 800c292:	6034      	strne	r4, [r6, #0]
 800c294:	6833      	ldr	r3, [r6, #0]
 800c296:	441a      	add	r2, r3
 800c298:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a0:	bf08      	it	eq
 800c2a2:	9203      	streq	r2, [sp, #12]
 800c2a4:	2130      	movs	r1, #48	; 0x30
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d2dc      	bcs.n	800c266 <__cvt+0x56>
 800c2ac:	1c5c      	adds	r4, r3, #1
 800c2ae:	9403      	str	r4, [sp, #12]
 800c2b0:	7019      	strb	r1, [r3, #0]
 800c2b2:	e7f8      	b.n	800c2a6 <__cvt+0x96>

0800c2b4 <__exponent>:
 800c2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2900      	cmp	r1, #0
 800c2ba:	bfb8      	it	lt
 800c2bc:	4249      	neglt	r1, r1
 800c2be:	f803 2b02 	strb.w	r2, [r3], #2
 800c2c2:	bfb4      	ite	lt
 800c2c4:	222d      	movlt	r2, #45	; 0x2d
 800c2c6:	222b      	movge	r2, #43	; 0x2b
 800c2c8:	2909      	cmp	r1, #9
 800c2ca:	7042      	strb	r2, [r0, #1]
 800c2cc:	dd2a      	ble.n	800c324 <__exponent+0x70>
 800c2ce:	f10d 0407 	add.w	r4, sp, #7
 800c2d2:	46a4      	mov	ip, r4
 800c2d4:	270a      	movs	r7, #10
 800c2d6:	46a6      	mov	lr, r4
 800c2d8:	460a      	mov	r2, r1
 800c2da:	fb91 f6f7 	sdiv	r6, r1, r7
 800c2de:	fb07 1516 	mls	r5, r7, r6, r1
 800c2e2:	3530      	adds	r5, #48	; 0x30
 800c2e4:	2a63      	cmp	r2, #99	; 0x63
 800c2e6:	f104 34ff 	add.w	r4, r4, #4294967295
 800c2ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	dcf1      	bgt.n	800c2d6 <__exponent+0x22>
 800c2f2:	3130      	adds	r1, #48	; 0x30
 800c2f4:	f1ae 0502 	sub.w	r5, lr, #2
 800c2f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c2fc:	1c44      	adds	r4, r0, #1
 800c2fe:	4629      	mov	r1, r5
 800c300:	4561      	cmp	r1, ip
 800c302:	d30a      	bcc.n	800c31a <__exponent+0x66>
 800c304:	f10d 0209 	add.w	r2, sp, #9
 800c308:	eba2 020e 	sub.w	r2, r2, lr
 800c30c:	4565      	cmp	r5, ip
 800c30e:	bf88      	it	hi
 800c310:	2200      	movhi	r2, #0
 800c312:	4413      	add	r3, r2
 800c314:	1a18      	subs	r0, r3, r0
 800c316:	b003      	add	sp, #12
 800c318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c322:	e7ed      	b.n	800c300 <__exponent+0x4c>
 800c324:	2330      	movs	r3, #48	; 0x30
 800c326:	3130      	adds	r1, #48	; 0x30
 800c328:	7083      	strb	r3, [r0, #2]
 800c32a:	70c1      	strb	r1, [r0, #3]
 800c32c:	1d03      	adds	r3, r0, #4
 800c32e:	e7f1      	b.n	800c314 <__exponent+0x60>

0800c330 <_printf_float>:
 800c330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c334:	b08b      	sub	sp, #44	; 0x2c
 800c336:	460c      	mov	r4, r1
 800c338:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c33c:	4616      	mov	r6, r2
 800c33e:	461f      	mov	r7, r3
 800c340:	4605      	mov	r5, r0
 800c342:	f001 fca3 	bl	800dc8c <_localeconv_r>
 800c346:	f8d0 b000 	ldr.w	fp, [r0]
 800c34a:	4658      	mov	r0, fp
 800c34c:	f7f3 ffc8 	bl	80002e0 <strlen>
 800c350:	2300      	movs	r3, #0
 800c352:	9308      	str	r3, [sp, #32]
 800c354:	f8d8 3000 	ldr.w	r3, [r8]
 800c358:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c35c:	6822      	ldr	r2, [r4, #0]
 800c35e:	3307      	adds	r3, #7
 800c360:	f023 0307 	bic.w	r3, r3, #7
 800c364:	f103 0108 	add.w	r1, r3, #8
 800c368:	f8c8 1000 	str.w	r1, [r8]
 800c36c:	4682      	mov	sl, r0
 800c36e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c372:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c376:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c5d8 <_printf_float+0x2a8>
 800c37a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c37e:	eeb0 6bc0 	vabs.f64	d6, d0
 800c382:	eeb4 6b47 	vcmp.f64	d6, d7
 800c386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c38a:	dd24      	ble.n	800c3d6 <_printf_float+0xa6>
 800c38c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c394:	d502      	bpl.n	800c39c <_printf_float+0x6c>
 800c396:	232d      	movs	r3, #45	; 0x2d
 800c398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c39c:	4b90      	ldr	r3, [pc, #576]	; (800c5e0 <_printf_float+0x2b0>)
 800c39e:	4891      	ldr	r0, [pc, #580]	; (800c5e4 <_printf_float+0x2b4>)
 800c3a0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c3a4:	bf94      	ite	ls
 800c3a6:	4698      	movls	r8, r3
 800c3a8:	4680      	movhi	r8, r0
 800c3aa:	2303      	movs	r3, #3
 800c3ac:	6123      	str	r3, [r4, #16]
 800c3ae:	f022 0204 	bic.w	r2, r2, #4
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	6022      	str	r2, [r4, #0]
 800c3b6:	9304      	str	r3, [sp, #16]
 800c3b8:	9700      	str	r7, [sp, #0]
 800c3ba:	4633      	mov	r3, r6
 800c3bc:	aa09      	add	r2, sp, #36	; 0x24
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f000 f9d3 	bl	800c76c <_printf_common>
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	f040 808a 	bne.w	800c4e0 <_printf_float+0x1b0>
 800c3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d0:	b00b      	add	sp, #44	; 0x2c
 800c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d6:	eeb4 0b40 	vcmp.f64	d0, d0
 800c3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3de:	d709      	bvc.n	800c3f4 <_printf_float+0xc4>
 800c3e0:	ee10 3a90 	vmov	r3, s1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	bfbc      	itt	lt
 800c3e8:	232d      	movlt	r3, #45	; 0x2d
 800c3ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c3ee:	487e      	ldr	r0, [pc, #504]	; (800c5e8 <_printf_float+0x2b8>)
 800c3f0:	4b7e      	ldr	r3, [pc, #504]	; (800c5ec <_printf_float+0x2bc>)
 800c3f2:	e7d5      	b.n	800c3a0 <_printf_float+0x70>
 800c3f4:	6863      	ldr	r3, [r4, #4]
 800c3f6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c3fa:	9104      	str	r1, [sp, #16]
 800c3fc:	1c59      	adds	r1, r3, #1
 800c3fe:	d13c      	bne.n	800c47a <_printf_float+0x14a>
 800c400:	2306      	movs	r3, #6
 800c402:	6063      	str	r3, [r4, #4]
 800c404:	2300      	movs	r3, #0
 800c406:	9303      	str	r3, [sp, #12]
 800c408:	ab08      	add	r3, sp, #32
 800c40a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c40e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c412:	ab07      	add	r3, sp, #28
 800c414:	6861      	ldr	r1, [r4, #4]
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	6022      	str	r2, [r4, #0]
 800c41a:	f10d 031b 	add.w	r3, sp, #27
 800c41e:	4628      	mov	r0, r5
 800c420:	f7ff fef6 	bl	800c210 <__cvt>
 800c424:	9b04      	ldr	r3, [sp, #16]
 800c426:	9907      	ldr	r1, [sp, #28]
 800c428:	2b47      	cmp	r3, #71	; 0x47
 800c42a:	4680      	mov	r8, r0
 800c42c:	d108      	bne.n	800c440 <_printf_float+0x110>
 800c42e:	1cc8      	adds	r0, r1, #3
 800c430:	db02      	blt.n	800c438 <_printf_float+0x108>
 800c432:	6863      	ldr	r3, [r4, #4]
 800c434:	4299      	cmp	r1, r3
 800c436:	dd41      	ble.n	800c4bc <_printf_float+0x18c>
 800c438:	f1a9 0902 	sub.w	r9, r9, #2
 800c43c:	fa5f f989 	uxtb.w	r9, r9
 800c440:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c444:	d820      	bhi.n	800c488 <_printf_float+0x158>
 800c446:	3901      	subs	r1, #1
 800c448:	464a      	mov	r2, r9
 800c44a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c44e:	9107      	str	r1, [sp, #28]
 800c450:	f7ff ff30 	bl	800c2b4 <__exponent>
 800c454:	9a08      	ldr	r2, [sp, #32]
 800c456:	9004      	str	r0, [sp, #16]
 800c458:	1813      	adds	r3, r2, r0
 800c45a:	2a01      	cmp	r2, #1
 800c45c:	6123      	str	r3, [r4, #16]
 800c45e:	dc02      	bgt.n	800c466 <_printf_float+0x136>
 800c460:	6822      	ldr	r2, [r4, #0]
 800c462:	07d2      	lsls	r2, r2, #31
 800c464:	d501      	bpl.n	800c46a <_printf_float+0x13a>
 800c466:	3301      	adds	r3, #1
 800c468:	6123      	str	r3, [r4, #16]
 800c46a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d0a2      	beq.n	800c3b8 <_printf_float+0x88>
 800c472:	232d      	movs	r3, #45	; 0x2d
 800c474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c478:	e79e      	b.n	800c3b8 <_printf_float+0x88>
 800c47a:	9904      	ldr	r1, [sp, #16]
 800c47c:	2947      	cmp	r1, #71	; 0x47
 800c47e:	d1c1      	bne.n	800c404 <_printf_float+0xd4>
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1bf      	bne.n	800c404 <_printf_float+0xd4>
 800c484:	2301      	movs	r3, #1
 800c486:	e7bc      	b.n	800c402 <_printf_float+0xd2>
 800c488:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c48c:	d118      	bne.n	800c4c0 <_printf_float+0x190>
 800c48e:	2900      	cmp	r1, #0
 800c490:	6863      	ldr	r3, [r4, #4]
 800c492:	dd0b      	ble.n	800c4ac <_printf_float+0x17c>
 800c494:	6121      	str	r1, [r4, #16]
 800c496:	b913      	cbnz	r3, 800c49e <_printf_float+0x16e>
 800c498:	6822      	ldr	r2, [r4, #0]
 800c49a:	07d0      	lsls	r0, r2, #31
 800c49c:	d502      	bpl.n	800c4a4 <_printf_float+0x174>
 800c49e:	3301      	adds	r3, #1
 800c4a0:	440b      	add	r3, r1
 800c4a2:	6123      	str	r3, [r4, #16]
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4a8:	9304      	str	r3, [sp, #16]
 800c4aa:	e7de      	b.n	800c46a <_printf_float+0x13a>
 800c4ac:	b913      	cbnz	r3, 800c4b4 <_printf_float+0x184>
 800c4ae:	6822      	ldr	r2, [r4, #0]
 800c4b0:	07d2      	lsls	r2, r2, #31
 800c4b2:	d501      	bpl.n	800c4b8 <_printf_float+0x188>
 800c4b4:	3302      	adds	r3, #2
 800c4b6:	e7f4      	b.n	800c4a2 <_printf_float+0x172>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e7f2      	b.n	800c4a2 <_printf_float+0x172>
 800c4bc:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c4c0:	9b08      	ldr	r3, [sp, #32]
 800c4c2:	4299      	cmp	r1, r3
 800c4c4:	db05      	blt.n	800c4d2 <_printf_float+0x1a2>
 800c4c6:	6823      	ldr	r3, [r4, #0]
 800c4c8:	6121      	str	r1, [r4, #16]
 800c4ca:	07d8      	lsls	r0, r3, #31
 800c4cc:	d5ea      	bpl.n	800c4a4 <_printf_float+0x174>
 800c4ce:	1c4b      	adds	r3, r1, #1
 800c4d0:	e7e7      	b.n	800c4a2 <_printf_float+0x172>
 800c4d2:	2900      	cmp	r1, #0
 800c4d4:	bfd4      	ite	le
 800c4d6:	f1c1 0202 	rsble	r2, r1, #2
 800c4da:	2201      	movgt	r2, #1
 800c4dc:	4413      	add	r3, r2
 800c4de:	e7e0      	b.n	800c4a2 <_printf_float+0x172>
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	055a      	lsls	r2, r3, #21
 800c4e4:	d407      	bmi.n	800c4f6 <_printf_float+0x1c6>
 800c4e6:	6923      	ldr	r3, [r4, #16]
 800c4e8:	4642      	mov	r2, r8
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	47b8      	blx	r7
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	d12a      	bne.n	800c54a <_printf_float+0x21a>
 800c4f4:	e76a      	b.n	800c3cc <_printf_float+0x9c>
 800c4f6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c4fa:	f240 80e2 	bls.w	800c6c2 <_printf_float+0x392>
 800c4fe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c502:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50a:	d133      	bne.n	800c574 <_printf_float+0x244>
 800c50c:	4a38      	ldr	r2, [pc, #224]	; (800c5f0 <_printf_float+0x2c0>)
 800c50e:	2301      	movs	r3, #1
 800c510:	4631      	mov	r1, r6
 800c512:	4628      	mov	r0, r5
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	f43f af58 	beq.w	800c3cc <_printf_float+0x9c>
 800c51c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c520:	429a      	cmp	r2, r3
 800c522:	db02      	blt.n	800c52a <_printf_float+0x1fa>
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	07d8      	lsls	r0, r3, #31
 800c528:	d50f      	bpl.n	800c54a <_printf_float+0x21a>
 800c52a:	4653      	mov	r3, sl
 800c52c:	465a      	mov	r2, fp
 800c52e:	4631      	mov	r1, r6
 800c530:	4628      	mov	r0, r5
 800c532:	47b8      	blx	r7
 800c534:	3001      	adds	r0, #1
 800c536:	f43f af49 	beq.w	800c3cc <_printf_float+0x9c>
 800c53a:	f04f 0800 	mov.w	r8, #0
 800c53e:	f104 091a 	add.w	r9, r4, #26
 800c542:	9b08      	ldr	r3, [sp, #32]
 800c544:	3b01      	subs	r3, #1
 800c546:	4543      	cmp	r3, r8
 800c548:	dc09      	bgt.n	800c55e <_printf_float+0x22e>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	079b      	lsls	r3, r3, #30
 800c54e:	f100 8108 	bmi.w	800c762 <_printf_float+0x432>
 800c552:	68e0      	ldr	r0, [r4, #12]
 800c554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c556:	4298      	cmp	r0, r3
 800c558:	bfb8      	it	lt
 800c55a:	4618      	movlt	r0, r3
 800c55c:	e738      	b.n	800c3d0 <_printf_float+0xa0>
 800c55e:	2301      	movs	r3, #1
 800c560:	464a      	mov	r2, r9
 800c562:	4631      	mov	r1, r6
 800c564:	4628      	mov	r0, r5
 800c566:	47b8      	blx	r7
 800c568:	3001      	adds	r0, #1
 800c56a:	f43f af2f 	beq.w	800c3cc <_printf_float+0x9c>
 800c56e:	f108 0801 	add.w	r8, r8, #1
 800c572:	e7e6      	b.n	800c542 <_printf_float+0x212>
 800c574:	9b07      	ldr	r3, [sp, #28]
 800c576:	2b00      	cmp	r3, #0
 800c578:	dc3c      	bgt.n	800c5f4 <_printf_float+0x2c4>
 800c57a:	4a1d      	ldr	r2, [pc, #116]	; (800c5f0 <_printf_float+0x2c0>)
 800c57c:	2301      	movs	r3, #1
 800c57e:	4631      	mov	r1, r6
 800c580:	4628      	mov	r0, r5
 800c582:	47b8      	blx	r7
 800c584:	3001      	adds	r0, #1
 800c586:	f43f af21 	beq.w	800c3cc <_printf_float+0x9c>
 800c58a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c58e:	4313      	orrs	r3, r2
 800c590:	d102      	bne.n	800c598 <_printf_float+0x268>
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	07d9      	lsls	r1, r3, #31
 800c596:	d5d8      	bpl.n	800c54a <_printf_float+0x21a>
 800c598:	4653      	mov	r3, sl
 800c59a:	465a      	mov	r2, fp
 800c59c:	4631      	mov	r1, r6
 800c59e:	4628      	mov	r0, r5
 800c5a0:	47b8      	blx	r7
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	f43f af12 	beq.w	800c3cc <_printf_float+0x9c>
 800c5a8:	f04f 0900 	mov.w	r9, #0
 800c5ac:	f104 0a1a 	add.w	sl, r4, #26
 800c5b0:	9b07      	ldr	r3, [sp, #28]
 800c5b2:	425b      	negs	r3, r3
 800c5b4:	454b      	cmp	r3, r9
 800c5b6:	dc01      	bgt.n	800c5bc <_printf_float+0x28c>
 800c5b8:	9b08      	ldr	r3, [sp, #32]
 800c5ba:	e795      	b.n	800c4e8 <_printf_float+0x1b8>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	4652      	mov	r2, sl
 800c5c0:	4631      	mov	r1, r6
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	47b8      	blx	r7
 800c5c6:	3001      	adds	r0, #1
 800c5c8:	f43f af00 	beq.w	800c3cc <_printf_float+0x9c>
 800c5cc:	f109 0901 	add.w	r9, r9, #1
 800c5d0:	e7ee      	b.n	800c5b0 <_printf_float+0x280>
 800c5d2:	bf00      	nop
 800c5d4:	f3af 8000 	nop.w
 800c5d8:	ffffffff 	.word	0xffffffff
 800c5dc:	7fefffff 	.word	0x7fefffff
 800c5e0:	0800ec14 	.word	0x0800ec14
 800c5e4:	0800ec18 	.word	0x0800ec18
 800c5e8:	0800ec20 	.word	0x0800ec20
 800c5ec:	0800ec1c 	.word	0x0800ec1c
 800c5f0:	0800ec24 	.word	0x0800ec24
 800c5f4:	9a08      	ldr	r2, [sp, #32]
 800c5f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	bfa8      	it	ge
 800c5fc:	461a      	movge	r2, r3
 800c5fe:	2a00      	cmp	r2, #0
 800c600:	4691      	mov	r9, r2
 800c602:	dc38      	bgt.n	800c676 <_printf_float+0x346>
 800c604:	2300      	movs	r3, #0
 800c606:	9305      	str	r3, [sp, #20]
 800c608:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c60c:	f104 021a 	add.w	r2, r4, #26
 800c610:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c612:	9905      	ldr	r1, [sp, #20]
 800c614:	9304      	str	r3, [sp, #16]
 800c616:	eba3 0309 	sub.w	r3, r3, r9
 800c61a:	428b      	cmp	r3, r1
 800c61c:	dc33      	bgt.n	800c686 <_printf_float+0x356>
 800c61e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c622:	429a      	cmp	r2, r3
 800c624:	db3c      	blt.n	800c6a0 <_printf_float+0x370>
 800c626:	6823      	ldr	r3, [r4, #0]
 800c628:	07da      	lsls	r2, r3, #31
 800c62a:	d439      	bmi.n	800c6a0 <_printf_float+0x370>
 800c62c:	9a08      	ldr	r2, [sp, #32]
 800c62e:	9b04      	ldr	r3, [sp, #16]
 800c630:	9907      	ldr	r1, [sp, #28]
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	eba2 0901 	sub.w	r9, r2, r1
 800c638:	4599      	cmp	r9, r3
 800c63a:	bfa8      	it	ge
 800c63c:	4699      	movge	r9, r3
 800c63e:	f1b9 0f00 	cmp.w	r9, #0
 800c642:	dc35      	bgt.n	800c6b0 <_printf_float+0x380>
 800c644:	f04f 0800 	mov.w	r8, #0
 800c648:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c64c:	f104 0a1a 	add.w	sl, r4, #26
 800c650:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c654:	1a9b      	subs	r3, r3, r2
 800c656:	eba3 0309 	sub.w	r3, r3, r9
 800c65a:	4543      	cmp	r3, r8
 800c65c:	f77f af75 	ble.w	800c54a <_printf_float+0x21a>
 800c660:	2301      	movs	r3, #1
 800c662:	4652      	mov	r2, sl
 800c664:	4631      	mov	r1, r6
 800c666:	4628      	mov	r0, r5
 800c668:	47b8      	blx	r7
 800c66a:	3001      	adds	r0, #1
 800c66c:	f43f aeae 	beq.w	800c3cc <_printf_float+0x9c>
 800c670:	f108 0801 	add.w	r8, r8, #1
 800c674:	e7ec      	b.n	800c650 <_printf_float+0x320>
 800c676:	4613      	mov	r3, r2
 800c678:	4631      	mov	r1, r6
 800c67a:	4642      	mov	r2, r8
 800c67c:	4628      	mov	r0, r5
 800c67e:	47b8      	blx	r7
 800c680:	3001      	adds	r0, #1
 800c682:	d1bf      	bne.n	800c604 <_printf_float+0x2d4>
 800c684:	e6a2      	b.n	800c3cc <_printf_float+0x9c>
 800c686:	2301      	movs	r3, #1
 800c688:	4631      	mov	r1, r6
 800c68a:	4628      	mov	r0, r5
 800c68c:	9204      	str	r2, [sp, #16]
 800c68e:	47b8      	blx	r7
 800c690:	3001      	adds	r0, #1
 800c692:	f43f ae9b 	beq.w	800c3cc <_printf_float+0x9c>
 800c696:	9b05      	ldr	r3, [sp, #20]
 800c698:	9a04      	ldr	r2, [sp, #16]
 800c69a:	3301      	adds	r3, #1
 800c69c:	9305      	str	r3, [sp, #20]
 800c69e:	e7b7      	b.n	800c610 <_printf_float+0x2e0>
 800c6a0:	4653      	mov	r3, sl
 800c6a2:	465a      	mov	r2, fp
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	47b8      	blx	r7
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	d1be      	bne.n	800c62c <_printf_float+0x2fc>
 800c6ae:	e68d      	b.n	800c3cc <_printf_float+0x9c>
 800c6b0:	9a04      	ldr	r2, [sp, #16]
 800c6b2:	464b      	mov	r3, r9
 800c6b4:	4442      	add	r2, r8
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	47b8      	blx	r7
 800c6bc:	3001      	adds	r0, #1
 800c6be:	d1c1      	bne.n	800c644 <_printf_float+0x314>
 800c6c0:	e684      	b.n	800c3cc <_printf_float+0x9c>
 800c6c2:	9a08      	ldr	r2, [sp, #32]
 800c6c4:	2a01      	cmp	r2, #1
 800c6c6:	dc01      	bgt.n	800c6cc <_printf_float+0x39c>
 800c6c8:	07db      	lsls	r3, r3, #31
 800c6ca:	d537      	bpl.n	800c73c <_printf_float+0x40c>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	4642      	mov	r2, r8
 800c6d0:	4631      	mov	r1, r6
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	47b8      	blx	r7
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	f43f ae78 	beq.w	800c3cc <_printf_float+0x9c>
 800c6dc:	4653      	mov	r3, sl
 800c6de:	465a      	mov	r2, fp
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4628      	mov	r0, r5
 800c6e4:	47b8      	blx	r7
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	f43f ae70 	beq.w	800c3cc <_printf_float+0x9c>
 800c6ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c6f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f8:	d01b      	beq.n	800c732 <_printf_float+0x402>
 800c6fa:	9b08      	ldr	r3, [sp, #32]
 800c6fc:	f108 0201 	add.w	r2, r8, #1
 800c700:	3b01      	subs	r3, #1
 800c702:	4631      	mov	r1, r6
 800c704:	4628      	mov	r0, r5
 800c706:	47b8      	blx	r7
 800c708:	3001      	adds	r0, #1
 800c70a:	d10e      	bne.n	800c72a <_printf_float+0x3fa>
 800c70c:	e65e      	b.n	800c3cc <_printf_float+0x9c>
 800c70e:	2301      	movs	r3, #1
 800c710:	464a      	mov	r2, r9
 800c712:	4631      	mov	r1, r6
 800c714:	4628      	mov	r0, r5
 800c716:	47b8      	blx	r7
 800c718:	3001      	adds	r0, #1
 800c71a:	f43f ae57 	beq.w	800c3cc <_printf_float+0x9c>
 800c71e:	f108 0801 	add.w	r8, r8, #1
 800c722:	9b08      	ldr	r3, [sp, #32]
 800c724:	3b01      	subs	r3, #1
 800c726:	4543      	cmp	r3, r8
 800c728:	dcf1      	bgt.n	800c70e <_printf_float+0x3de>
 800c72a:	9b04      	ldr	r3, [sp, #16]
 800c72c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c730:	e6db      	b.n	800c4ea <_printf_float+0x1ba>
 800c732:	f04f 0800 	mov.w	r8, #0
 800c736:	f104 091a 	add.w	r9, r4, #26
 800c73a:	e7f2      	b.n	800c722 <_printf_float+0x3f2>
 800c73c:	2301      	movs	r3, #1
 800c73e:	4642      	mov	r2, r8
 800c740:	e7df      	b.n	800c702 <_printf_float+0x3d2>
 800c742:	2301      	movs	r3, #1
 800c744:	464a      	mov	r2, r9
 800c746:	4631      	mov	r1, r6
 800c748:	4628      	mov	r0, r5
 800c74a:	47b8      	blx	r7
 800c74c:	3001      	adds	r0, #1
 800c74e:	f43f ae3d 	beq.w	800c3cc <_printf_float+0x9c>
 800c752:	f108 0801 	add.w	r8, r8, #1
 800c756:	68e3      	ldr	r3, [r4, #12]
 800c758:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c75a:	1a5b      	subs	r3, r3, r1
 800c75c:	4543      	cmp	r3, r8
 800c75e:	dcf0      	bgt.n	800c742 <_printf_float+0x412>
 800c760:	e6f7      	b.n	800c552 <_printf_float+0x222>
 800c762:	f04f 0800 	mov.w	r8, #0
 800c766:	f104 0919 	add.w	r9, r4, #25
 800c76a:	e7f4      	b.n	800c756 <_printf_float+0x426>

0800c76c <_printf_common>:
 800c76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c770:	4616      	mov	r6, r2
 800c772:	4699      	mov	r9, r3
 800c774:	688a      	ldr	r2, [r1, #8]
 800c776:	690b      	ldr	r3, [r1, #16]
 800c778:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c77c:	4293      	cmp	r3, r2
 800c77e:	bfb8      	it	lt
 800c780:	4613      	movlt	r3, r2
 800c782:	6033      	str	r3, [r6, #0]
 800c784:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c788:	4607      	mov	r7, r0
 800c78a:	460c      	mov	r4, r1
 800c78c:	b10a      	cbz	r2, 800c792 <_printf_common+0x26>
 800c78e:	3301      	adds	r3, #1
 800c790:	6033      	str	r3, [r6, #0]
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	0699      	lsls	r1, r3, #26
 800c796:	bf42      	ittt	mi
 800c798:	6833      	ldrmi	r3, [r6, #0]
 800c79a:	3302      	addmi	r3, #2
 800c79c:	6033      	strmi	r3, [r6, #0]
 800c79e:	6825      	ldr	r5, [r4, #0]
 800c7a0:	f015 0506 	ands.w	r5, r5, #6
 800c7a4:	d106      	bne.n	800c7b4 <_printf_common+0x48>
 800c7a6:	f104 0a19 	add.w	sl, r4, #25
 800c7aa:	68e3      	ldr	r3, [r4, #12]
 800c7ac:	6832      	ldr	r2, [r6, #0]
 800c7ae:	1a9b      	subs	r3, r3, r2
 800c7b0:	42ab      	cmp	r3, r5
 800c7b2:	dc26      	bgt.n	800c802 <_printf_common+0x96>
 800c7b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7b8:	1e13      	subs	r3, r2, #0
 800c7ba:	6822      	ldr	r2, [r4, #0]
 800c7bc:	bf18      	it	ne
 800c7be:	2301      	movne	r3, #1
 800c7c0:	0692      	lsls	r2, r2, #26
 800c7c2:	d42b      	bmi.n	800c81c <_printf_common+0xb0>
 800c7c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	47c0      	blx	r8
 800c7ce:	3001      	adds	r0, #1
 800c7d0:	d01e      	beq.n	800c810 <_printf_common+0xa4>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	68e5      	ldr	r5, [r4, #12]
 800c7d6:	6832      	ldr	r2, [r6, #0]
 800c7d8:	f003 0306 	and.w	r3, r3, #6
 800c7dc:	2b04      	cmp	r3, #4
 800c7de:	bf08      	it	eq
 800c7e0:	1aad      	subeq	r5, r5, r2
 800c7e2:	68a3      	ldr	r3, [r4, #8]
 800c7e4:	6922      	ldr	r2, [r4, #16]
 800c7e6:	bf0c      	ite	eq
 800c7e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7ec:	2500      	movne	r5, #0
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	bfc4      	itt	gt
 800c7f2:	1a9b      	subgt	r3, r3, r2
 800c7f4:	18ed      	addgt	r5, r5, r3
 800c7f6:	2600      	movs	r6, #0
 800c7f8:	341a      	adds	r4, #26
 800c7fa:	42b5      	cmp	r5, r6
 800c7fc:	d11a      	bne.n	800c834 <_printf_common+0xc8>
 800c7fe:	2000      	movs	r0, #0
 800c800:	e008      	b.n	800c814 <_printf_common+0xa8>
 800c802:	2301      	movs	r3, #1
 800c804:	4652      	mov	r2, sl
 800c806:	4649      	mov	r1, r9
 800c808:	4638      	mov	r0, r7
 800c80a:	47c0      	blx	r8
 800c80c:	3001      	adds	r0, #1
 800c80e:	d103      	bne.n	800c818 <_printf_common+0xac>
 800c810:	f04f 30ff 	mov.w	r0, #4294967295
 800c814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c818:	3501      	adds	r5, #1
 800c81a:	e7c6      	b.n	800c7aa <_printf_common+0x3e>
 800c81c:	18e1      	adds	r1, r4, r3
 800c81e:	1c5a      	adds	r2, r3, #1
 800c820:	2030      	movs	r0, #48	; 0x30
 800c822:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c826:	4422      	add	r2, r4
 800c828:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c82c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c830:	3302      	adds	r3, #2
 800c832:	e7c7      	b.n	800c7c4 <_printf_common+0x58>
 800c834:	2301      	movs	r3, #1
 800c836:	4622      	mov	r2, r4
 800c838:	4649      	mov	r1, r9
 800c83a:	4638      	mov	r0, r7
 800c83c:	47c0      	blx	r8
 800c83e:	3001      	adds	r0, #1
 800c840:	d0e6      	beq.n	800c810 <_printf_common+0xa4>
 800c842:	3601      	adds	r6, #1
 800c844:	e7d9      	b.n	800c7fa <_printf_common+0x8e>
	...

0800c848 <_printf_i>:
 800c848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c84c:	460c      	mov	r4, r1
 800c84e:	4691      	mov	r9, r2
 800c850:	7e27      	ldrb	r7, [r4, #24]
 800c852:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c854:	2f78      	cmp	r7, #120	; 0x78
 800c856:	4680      	mov	r8, r0
 800c858:	469a      	mov	sl, r3
 800c85a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c85e:	d807      	bhi.n	800c870 <_printf_i+0x28>
 800c860:	2f62      	cmp	r7, #98	; 0x62
 800c862:	d80a      	bhi.n	800c87a <_printf_i+0x32>
 800c864:	2f00      	cmp	r7, #0
 800c866:	f000 80d8 	beq.w	800ca1a <_printf_i+0x1d2>
 800c86a:	2f58      	cmp	r7, #88	; 0x58
 800c86c:	f000 80a3 	beq.w	800c9b6 <_printf_i+0x16e>
 800c870:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c874:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c878:	e03a      	b.n	800c8f0 <_printf_i+0xa8>
 800c87a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c87e:	2b15      	cmp	r3, #21
 800c880:	d8f6      	bhi.n	800c870 <_printf_i+0x28>
 800c882:	a001      	add	r0, pc, #4	; (adr r0, 800c888 <_printf_i+0x40>)
 800c884:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c888:	0800c8e1 	.word	0x0800c8e1
 800c88c:	0800c8f5 	.word	0x0800c8f5
 800c890:	0800c871 	.word	0x0800c871
 800c894:	0800c871 	.word	0x0800c871
 800c898:	0800c871 	.word	0x0800c871
 800c89c:	0800c871 	.word	0x0800c871
 800c8a0:	0800c8f5 	.word	0x0800c8f5
 800c8a4:	0800c871 	.word	0x0800c871
 800c8a8:	0800c871 	.word	0x0800c871
 800c8ac:	0800c871 	.word	0x0800c871
 800c8b0:	0800c871 	.word	0x0800c871
 800c8b4:	0800ca01 	.word	0x0800ca01
 800c8b8:	0800c925 	.word	0x0800c925
 800c8bc:	0800c9e3 	.word	0x0800c9e3
 800c8c0:	0800c871 	.word	0x0800c871
 800c8c4:	0800c871 	.word	0x0800c871
 800c8c8:	0800ca23 	.word	0x0800ca23
 800c8cc:	0800c871 	.word	0x0800c871
 800c8d0:	0800c925 	.word	0x0800c925
 800c8d4:	0800c871 	.word	0x0800c871
 800c8d8:	0800c871 	.word	0x0800c871
 800c8dc:	0800c9eb 	.word	0x0800c9eb
 800c8e0:	680b      	ldr	r3, [r1, #0]
 800c8e2:	1d1a      	adds	r2, r3, #4
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	600a      	str	r2, [r1, #0]
 800c8e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c8ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e0a3      	b.n	800ca3c <_printf_i+0x1f4>
 800c8f4:	6825      	ldr	r5, [r4, #0]
 800c8f6:	6808      	ldr	r0, [r1, #0]
 800c8f8:	062e      	lsls	r6, r5, #24
 800c8fa:	f100 0304 	add.w	r3, r0, #4
 800c8fe:	d50a      	bpl.n	800c916 <_printf_i+0xce>
 800c900:	6805      	ldr	r5, [r0, #0]
 800c902:	600b      	str	r3, [r1, #0]
 800c904:	2d00      	cmp	r5, #0
 800c906:	da03      	bge.n	800c910 <_printf_i+0xc8>
 800c908:	232d      	movs	r3, #45	; 0x2d
 800c90a:	426d      	negs	r5, r5
 800c90c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c910:	485e      	ldr	r0, [pc, #376]	; (800ca8c <_printf_i+0x244>)
 800c912:	230a      	movs	r3, #10
 800c914:	e019      	b.n	800c94a <_printf_i+0x102>
 800c916:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c91a:	6805      	ldr	r5, [r0, #0]
 800c91c:	600b      	str	r3, [r1, #0]
 800c91e:	bf18      	it	ne
 800c920:	b22d      	sxthne	r5, r5
 800c922:	e7ef      	b.n	800c904 <_printf_i+0xbc>
 800c924:	680b      	ldr	r3, [r1, #0]
 800c926:	6825      	ldr	r5, [r4, #0]
 800c928:	1d18      	adds	r0, r3, #4
 800c92a:	6008      	str	r0, [r1, #0]
 800c92c:	0628      	lsls	r0, r5, #24
 800c92e:	d501      	bpl.n	800c934 <_printf_i+0xec>
 800c930:	681d      	ldr	r5, [r3, #0]
 800c932:	e002      	b.n	800c93a <_printf_i+0xf2>
 800c934:	0669      	lsls	r1, r5, #25
 800c936:	d5fb      	bpl.n	800c930 <_printf_i+0xe8>
 800c938:	881d      	ldrh	r5, [r3, #0]
 800c93a:	4854      	ldr	r0, [pc, #336]	; (800ca8c <_printf_i+0x244>)
 800c93c:	2f6f      	cmp	r7, #111	; 0x6f
 800c93e:	bf0c      	ite	eq
 800c940:	2308      	moveq	r3, #8
 800c942:	230a      	movne	r3, #10
 800c944:	2100      	movs	r1, #0
 800c946:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c94a:	6866      	ldr	r6, [r4, #4]
 800c94c:	60a6      	str	r6, [r4, #8]
 800c94e:	2e00      	cmp	r6, #0
 800c950:	bfa2      	ittt	ge
 800c952:	6821      	ldrge	r1, [r4, #0]
 800c954:	f021 0104 	bicge.w	r1, r1, #4
 800c958:	6021      	strge	r1, [r4, #0]
 800c95a:	b90d      	cbnz	r5, 800c960 <_printf_i+0x118>
 800c95c:	2e00      	cmp	r6, #0
 800c95e:	d04d      	beq.n	800c9fc <_printf_i+0x1b4>
 800c960:	4616      	mov	r6, r2
 800c962:	fbb5 f1f3 	udiv	r1, r5, r3
 800c966:	fb03 5711 	mls	r7, r3, r1, r5
 800c96a:	5dc7      	ldrb	r7, [r0, r7]
 800c96c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c970:	462f      	mov	r7, r5
 800c972:	42bb      	cmp	r3, r7
 800c974:	460d      	mov	r5, r1
 800c976:	d9f4      	bls.n	800c962 <_printf_i+0x11a>
 800c978:	2b08      	cmp	r3, #8
 800c97a:	d10b      	bne.n	800c994 <_printf_i+0x14c>
 800c97c:	6823      	ldr	r3, [r4, #0]
 800c97e:	07df      	lsls	r7, r3, #31
 800c980:	d508      	bpl.n	800c994 <_printf_i+0x14c>
 800c982:	6923      	ldr	r3, [r4, #16]
 800c984:	6861      	ldr	r1, [r4, #4]
 800c986:	4299      	cmp	r1, r3
 800c988:	bfde      	ittt	le
 800c98a:	2330      	movle	r3, #48	; 0x30
 800c98c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c990:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c994:	1b92      	subs	r2, r2, r6
 800c996:	6122      	str	r2, [r4, #16]
 800c998:	f8cd a000 	str.w	sl, [sp]
 800c99c:	464b      	mov	r3, r9
 800c99e:	aa03      	add	r2, sp, #12
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	f7ff fee2 	bl	800c76c <_printf_common>
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	d14c      	bne.n	800ca46 <_printf_i+0x1fe>
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b0:	b004      	add	sp, #16
 800c9b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b6:	4835      	ldr	r0, [pc, #212]	; (800ca8c <_printf_i+0x244>)
 800c9b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	680e      	ldr	r6, [r1, #0]
 800c9c0:	061f      	lsls	r7, r3, #24
 800c9c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c9c6:	600e      	str	r6, [r1, #0]
 800c9c8:	d514      	bpl.n	800c9f4 <_printf_i+0x1ac>
 800c9ca:	07d9      	lsls	r1, r3, #31
 800c9cc:	bf44      	itt	mi
 800c9ce:	f043 0320 	orrmi.w	r3, r3, #32
 800c9d2:	6023      	strmi	r3, [r4, #0]
 800c9d4:	b91d      	cbnz	r5, 800c9de <_printf_i+0x196>
 800c9d6:	6823      	ldr	r3, [r4, #0]
 800c9d8:	f023 0320 	bic.w	r3, r3, #32
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	2310      	movs	r3, #16
 800c9e0:	e7b0      	b.n	800c944 <_printf_i+0xfc>
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	f043 0320 	orr.w	r3, r3, #32
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	2378      	movs	r3, #120	; 0x78
 800c9ec:	4828      	ldr	r0, [pc, #160]	; (800ca90 <_printf_i+0x248>)
 800c9ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9f2:	e7e3      	b.n	800c9bc <_printf_i+0x174>
 800c9f4:	065e      	lsls	r6, r3, #25
 800c9f6:	bf48      	it	mi
 800c9f8:	b2ad      	uxthmi	r5, r5
 800c9fa:	e7e6      	b.n	800c9ca <_printf_i+0x182>
 800c9fc:	4616      	mov	r6, r2
 800c9fe:	e7bb      	b.n	800c978 <_printf_i+0x130>
 800ca00:	680b      	ldr	r3, [r1, #0]
 800ca02:	6826      	ldr	r6, [r4, #0]
 800ca04:	6960      	ldr	r0, [r4, #20]
 800ca06:	1d1d      	adds	r5, r3, #4
 800ca08:	600d      	str	r5, [r1, #0]
 800ca0a:	0635      	lsls	r5, r6, #24
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	d501      	bpl.n	800ca14 <_printf_i+0x1cc>
 800ca10:	6018      	str	r0, [r3, #0]
 800ca12:	e002      	b.n	800ca1a <_printf_i+0x1d2>
 800ca14:	0671      	lsls	r1, r6, #25
 800ca16:	d5fb      	bpl.n	800ca10 <_printf_i+0x1c8>
 800ca18:	8018      	strh	r0, [r3, #0]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	6123      	str	r3, [r4, #16]
 800ca1e:	4616      	mov	r6, r2
 800ca20:	e7ba      	b.n	800c998 <_printf_i+0x150>
 800ca22:	680b      	ldr	r3, [r1, #0]
 800ca24:	1d1a      	adds	r2, r3, #4
 800ca26:	600a      	str	r2, [r1, #0]
 800ca28:	681e      	ldr	r6, [r3, #0]
 800ca2a:	6862      	ldr	r2, [r4, #4]
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f7f3 fc5e 	bl	80002f0 <memchr>
 800ca34:	b108      	cbz	r0, 800ca3a <_printf_i+0x1f2>
 800ca36:	1b80      	subs	r0, r0, r6
 800ca38:	6060      	str	r0, [r4, #4]
 800ca3a:	6863      	ldr	r3, [r4, #4]
 800ca3c:	6123      	str	r3, [r4, #16]
 800ca3e:	2300      	movs	r3, #0
 800ca40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca44:	e7a8      	b.n	800c998 <_printf_i+0x150>
 800ca46:	6923      	ldr	r3, [r4, #16]
 800ca48:	4632      	mov	r2, r6
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	47d0      	blx	sl
 800ca50:	3001      	adds	r0, #1
 800ca52:	d0ab      	beq.n	800c9ac <_printf_i+0x164>
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	079b      	lsls	r3, r3, #30
 800ca58:	d413      	bmi.n	800ca82 <_printf_i+0x23a>
 800ca5a:	68e0      	ldr	r0, [r4, #12]
 800ca5c:	9b03      	ldr	r3, [sp, #12]
 800ca5e:	4298      	cmp	r0, r3
 800ca60:	bfb8      	it	lt
 800ca62:	4618      	movlt	r0, r3
 800ca64:	e7a4      	b.n	800c9b0 <_printf_i+0x168>
 800ca66:	2301      	movs	r3, #1
 800ca68:	4632      	mov	r2, r6
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	47d0      	blx	sl
 800ca70:	3001      	adds	r0, #1
 800ca72:	d09b      	beq.n	800c9ac <_printf_i+0x164>
 800ca74:	3501      	adds	r5, #1
 800ca76:	68e3      	ldr	r3, [r4, #12]
 800ca78:	9903      	ldr	r1, [sp, #12]
 800ca7a:	1a5b      	subs	r3, r3, r1
 800ca7c:	42ab      	cmp	r3, r5
 800ca7e:	dcf2      	bgt.n	800ca66 <_printf_i+0x21e>
 800ca80:	e7eb      	b.n	800ca5a <_printf_i+0x212>
 800ca82:	2500      	movs	r5, #0
 800ca84:	f104 0619 	add.w	r6, r4, #25
 800ca88:	e7f5      	b.n	800ca76 <_printf_i+0x22e>
 800ca8a:	bf00      	nop
 800ca8c:	0800ec26 	.word	0x0800ec26
 800ca90:	0800ec37 	.word	0x0800ec37

0800ca94 <_puts_r>:
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	460e      	mov	r6, r1
 800ca98:	4605      	mov	r5, r0
 800ca9a:	b118      	cbz	r0, 800caa4 <_puts_r+0x10>
 800ca9c:	6983      	ldr	r3, [r0, #24]
 800ca9e:	b90b      	cbnz	r3, 800caa4 <_puts_r+0x10>
 800caa0:	f001 f856 	bl	800db50 <__sinit>
 800caa4:	69ab      	ldr	r3, [r5, #24]
 800caa6:	68ac      	ldr	r4, [r5, #8]
 800caa8:	b913      	cbnz	r3, 800cab0 <_puts_r+0x1c>
 800caaa:	4628      	mov	r0, r5
 800caac:	f001 f850 	bl	800db50 <__sinit>
 800cab0:	4b2c      	ldr	r3, [pc, #176]	; (800cb64 <_puts_r+0xd0>)
 800cab2:	429c      	cmp	r4, r3
 800cab4:	d120      	bne.n	800caf8 <_puts_r+0x64>
 800cab6:	686c      	ldr	r4, [r5, #4]
 800cab8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800caba:	07db      	lsls	r3, r3, #31
 800cabc:	d405      	bmi.n	800caca <_puts_r+0x36>
 800cabe:	89a3      	ldrh	r3, [r4, #12]
 800cac0:	0598      	lsls	r0, r3, #22
 800cac2:	d402      	bmi.n	800caca <_puts_r+0x36>
 800cac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cac6:	f001 f8e6 	bl	800dc96 <__retarget_lock_acquire_recursive>
 800caca:	89a3      	ldrh	r3, [r4, #12]
 800cacc:	0719      	lsls	r1, r3, #28
 800cace:	d51d      	bpl.n	800cb0c <_puts_r+0x78>
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	b1db      	cbz	r3, 800cb0c <_puts_r+0x78>
 800cad4:	3e01      	subs	r6, #1
 800cad6:	68a3      	ldr	r3, [r4, #8]
 800cad8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cadc:	3b01      	subs	r3, #1
 800cade:	60a3      	str	r3, [r4, #8]
 800cae0:	bb39      	cbnz	r1, 800cb32 <_puts_r+0x9e>
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	da38      	bge.n	800cb58 <_puts_r+0xc4>
 800cae6:	4622      	mov	r2, r4
 800cae8:	210a      	movs	r1, #10
 800caea:	4628      	mov	r0, r5
 800caec:	f000 f848 	bl	800cb80 <__swbuf_r>
 800caf0:	3001      	adds	r0, #1
 800caf2:	d011      	beq.n	800cb18 <_puts_r+0x84>
 800caf4:	250a      	movs	r5, #10
 800caf6:	e011      	b.n	800cb1c <_puts_r+0x88>
 800caf8:	4b1b      	ldr	r3, [pc, #108]	; (800cb68 <_puts_r+0xd4>)
 800cafa:	429c      	cmp	r4, r3
 800cafc:	d101      	bne.n	800cb02 <_puts_r+0x6e>
 800cafe:	68ac      	ldr	r4, [r5, #8]
 800cb00:	e7da      	b.n	800cab8 <_puts_r+0x24>
 800cb02:	4b1a      	ldr	r3, [pc, #104]	; (800cb6c <_puts_r+0xd8>)
 800cb04:	429c      	cmp	r4, r3
 800cb06:	bf08      	it	eq
 800cb08:	68ec      	ldreq	r4, [r5, #12]
 800cb0a:	e7d5      	b.n	800cab8 <_puts_r+0x24>
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	4628      	mov	r0, r5
 800cb10:	f000 f888 	bl	800cc24 <__swsetup_r>
 800cb14:	2800      	cmp	r0, #0
 800cb16:	d0dd      	beq.n	800cad4 <_puts_r+0x40>
 800cb18:	f04f 35ff 	mov.w	r5, #4294967295
 800cb1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb1e:	07da      	lsls	r2, r3, #31
 800cb20:	d405      	bmi.n	800cb2e <_puts_r+0x9a>
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	059b      	lsls	r3, r3, #22
 800cb26:	d402      	bmi.n	800cb2e <_puts_r+0x9a>
 800cb28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb2a:	f001 f8b5 	bl	800dc98 <__retarget_lock_release_recursive>
 800cb2e:	4628      	mov	r0, r5
 800cb30:	bd70      	pop	{r4, r5, r6, pc}
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	da04      	bge.n	800cb40 <_puts_r+0xac>
 800cb36:	69a2      	ldr	r2, [r4, #24]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	dc06      	bgt.n	800cb4a <_puts_r+0xb6>
 800cb3c:	290a      	cmp	r1, #10
 800cb3e:	d004      	beq.n	800cb4a <_puts_r+0xb6>
 800cb40:	6823      	ldr	r3, [r4, #0]
 800cb42:	1c5a      	adds	r2, r3, #1
 800cb44:	6022      	str	r2, [r4, #0]
 800cb46:	7019      	strb	r1, [r3, #0]
 800cb48:	e7c5      	b.n	800cad6 <_puts_r+0x42>
 800cb4a:	4622      	mov	r2, r4
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	f000 f817 	bl	800cb80 <__swbuf_r>
 800cb52:	3001      	adds	r0, #1
 800cb54:	d1bf      	bne.n	800cad6 <_puts_r+0x42>
 800cb56:	e7df      	b.n	800cb18 <_puts_r+0x84>
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	250a      	movs	r5, #10
 800cb5c:	1c5a      	adds	r2, r3, #1
 800cb5e:	6022      	str	r2, [r4, #0]
 800cb60:	701d      	strb	r5, [r3, #0]
 800cb62:	e7db      	b.n	800cb1c <_puts_r+0x88>
 800cb64:	0800ecfc 	.word	0x0800ecfc
 800cb68:	0800ed1c 	.word	0x0800ed1c
 800cb6c:	0800ecdc 	.word	0x0800ecdc

0800cb70 <puts>:
 800cb70:	4b02      	ldr	r3, [pc, #8]	; (800cb7c <puts+0xc>)
 800cb72:	4601      	mov	r1, r0
 800cb74:	6818      	ldr	r0, [r3, #0]
 800cb76:	f7ff bf8d 	b.w	800ca94 <_puts_r>
 800cb7a:	bf00      	nop
 800cb7c:	2400001c 	.word	0x2400001c

0800cb80 <__swbuf_r>:
 800cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb82:	460e      	mov	r6, r1
 800cb84:	4614      	mov	r4, r2
 800cb86:	4605      	mov	r5, r0
 800cb88:	b118      	cbz	r0, 800cb92 <__swbuf_r+0x12>
 800cb8a:	6983      	ldr	r3, [r0, #24]
 800cb8c:	b90b      	cbnz	r3, 800cb92 <__swbuf_r+0x12>
 800cb8e:	f000 ffdf 	bl	800db50 <__sinit>
 800cb92:	4b21      	ldr	r3, [pc, #132]	; (800cc18 <__swbuf_r+0x98>)
 800cb94:	429c      	cmp	r4, r3
 800cb96:	d12b      	bne.n	800cbf0 <__swbuf_r+0x70>
 800cb98:	686c      	ldr	r4, [r5, #4]
 800cb9a:	69a3      	ldr	r3, [r4, #24]
 800cb9c:	60a3      	str	r3, [r4, #8]
 800cb9e:	89a3      	ldrh	r3, [r4, #12]
 800cba0:	071a      	lsls	r2, r3, #28
 800cba2:	d52f      	bpl.n	800cc04 <__swbuf_r+0x84>
 800cba4:	6923      	ldr	r3, [r4, #16]
 800cba6:	b36b      	cbz	r3, 800cc04 <__swbuf_r+0x84>
 800cba8:	6923      	ldr	r3, [r4, #16]
 800cbaa:	6820      	ldr	r0, [r4, #0]
 800cbac:	1ac0      	subs	r0, r0, r3
 800cbae:	6963      	ldr	r3, [r4, #20]
 800cbb0:	b2f6      	uxtb	r6, r6
 800cbb2:	4283      	cmp	r3, r0
 800cbb4:	4637      	mov	r7, r6
 800cbb6:	dc04      	bgt.n	800cbc2 <__swbuf_r+0x42>
 800cbb8:	4621      	mov	r1, r4
 800cbba:	4628      	mov	r0, r5
 800cbbc:	f000 ff34 	bl	800da28 <_fflush_r>
 800cbc0:	bb30      	cbnz	r0, 800cc10 <__swbuf_r+0x90>
 800cbc2:	68a3      	ldr	r3, [r4, #8]
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	60a3      	str	r3, [r4, #8]
 800cbc8:	6823      	ldr	r3, [r4, #0]
 800cbca:	1c5a      	adds	r2, r3, #1
 800cbcc:	6022      	str	r2, [r4, #0]
 800cbce:	701e      	strb	r6, [r3, #0]
 800cbd0:	6963      	ldr	r3, [r4, #20]
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	4283      	cmp	r3, r0
 800cbd6:	d004      	beq.n	800cbe2 <__swbuf_r+0x62>
 800cbd8:	89a3      	ldrh	r3, [r4, #12]
 800cbda:	07db      	lsls	r3, r3, #31
 800cbdc:	d506      	bpl.n	800cbec <__swbuf_r+0x6c>
 800cbde:	2e0a      	cmp	r6, #10
 800cbe0:	d104      	bne.n	800cbec <__swbuf_r+0x6c>
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	f000 ff1f 	bl	800da28 <_fflush_r>
 800cbea:	b988      	cbnz	r0, 800cc10 <__swbuf_r+0x90>
 800cbec:	4638      	mov	r0, r7
 800cbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbf0:	4b0a      	ldr	r3, [pc, #40]	; (800cc1c <__swbuf_r+0x9c>)
 800cbf2:	429c      	cmp	r4, r3
 800cbf4:	d101      	bne.n	800cbfa <__swbuf_r+0x7a>
 800cbf6:	68ac      	ldr	r4, [r5, #8]
 800cbf8:	e7cf      	b.n	800cb9a <__swbuf_r+0x1a>
 800cbfa:	4b09      	ldr	r3, [pc, #36]	; (800cc20 <__swbuf_r+0xa0>)
 800cbfc:	429c      	cmp	r4, r3
 800cbfe:	bf08      	it	eq
 800cc00:	68ec      	ldreq	r4, [r5, #12]
 800cc02:	e7ca      	b.n	800cb9a <__swbuf_r+0x1a>
 800cc04:	4621      	mov	r1, r4
 800cc06:	4628      	mov	r0, r5
 800cc08:	f000 f80c 	bl	800cc24 <__swsetup_r>
 800cc0c:	2800      	cmp	r0, #0
 800cc0e:	d0cb      	beq.n	800cba8 <__swbuf_r+0x28>
 800cc10:	f04f 37ff 	mov.w	r7, #4294967295
 800cc14:	e7ea      	b.n	800cbec <__swbuf_r+0x6c>
 800cc16:	bf00      	nop
 800cc18:	0800ecfc 	.word	0x0800ecfc
 800cc1c:	0800ed1c 	.word	0x0800ed1c
 800cc20:	0800ecdc 	.word	0x0800ecdc

0800cc24 <__swsetup_r>:
 800cc24:	4b32      	ldr	r3, [pc, #200]	; (800ccf0 <__swsetup_r+0xcc>)
 800cc26:	b570      	push	{r4, r5, r6, lr}
 800cc28:	681d      	ldr	r5, [r3, #0]
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	460c      	mov	r4, r1
 800cc2e:	b125      	cbz	r5, 800cc3a <__swsetup_r+0x16>
 800cc30:	69ab      	ldr	r3, [r5, #24]
 800cc32:	b913      	cbnz	r3, 800cc3a <__swsetup_r+0x16>
 800cc34:	4628      	mov	r0, r5
 800cc36:	f000 ff8b 	bl	800db50 <__sinit>
 800cc3a:	4b2e      	ldr	r3, [pc, #184]	; (800ccf4 <__swsetup_r+0xd0>)
 800cc3c:	429c      	cmp	r4, r3
 800cc3e:	d10f      	bne.n	800cc60 <__swsetup_r+0x3c>
 800cc40:	686c      	ldr	r4, [r5, #4]
 800cc42:	89a3      	ldrh	r3, [r4, #12]
 800cc44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc48:	0719      	lsls	r1, r3, #28
 800cc4a:	d42c      	bmi.n	800cca6 <__swsetup_r+0x82>
 800cc4c:	06dd      	lsls	r5, r3, #27
 800cc4e:	d411      	bmi.n	800cc74 <__swsetup_r+0x50>
 800cc50:	2309      	movs	r3, #9
 800cc52:	6033      	str	r3, [r6, #0]
 800cc54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc58:	81a3      	strh	r3, [r4, #12]
 800cc5a:	f04f 30ff 	mov.w	r0, #4294967295
 800cc5e:	e03e      	b.n	800ccde <__swsetup_r+0xba>
 800cc60:	4b25      	ldr	r3, [pc, #148]	; (800ccf8 <__swsetup_r+0xd4>)
 800cc62:	429c      	cmp	r4, r3
 800cc64:	d101      	bne.n	800cc6a <__swsetup_r+0x46>
 800cc66:	68ac      	ldr	r4, [r5, #8]
 800cc68:	e7eb      	b.n	800cc42 <__swsetup_r+0x1e>
 800cc6a:	4b24      	ldr	r3, [pc, #144]	; (800ccfc <__swsetup_r+0xd8>)
 800cc6c:	429c      	cmp	r4, r3
 800cc6e:	bf08      	it	eq
 800cc70:	68ec      	ldreq	r4, [r5, #12]
 800cc72:	e7e6      	b.n	800cc42 <__swsetup_r+0x1e>
 800cc74:	0758      	lsls	r0, r3, #29
 800cc76:	d512      	bpl.n	800cc9e <__swsetup_r+0x7a>
 800cc78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc7a:	b141      	cbz	r1, 800cc8e <__swsetup_r+0x6a>
 800cc7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc80:	4299      	cmp	r1, r3
 800cc82:	d002      	beq.n	800cc8a <__swsetup_r+0x66>
 800cc84:	4630      	mov	r0, r6
 800cc86:	f001 fc11 	bl	800e4ac <_free_r>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	6363      	str	r3, [r4, #52]	; 0x34
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc94:	81a3      	strh	r3, [r4, #12]
 800cc96:	2300      	movs	r3, #0
 800cc98:	6063      	str	r3, [r4, #4]
 800cc9a:	6923      	ldr	r3, [r4, #16]
 800cc9c:	6023      	str	r3, [r4, #0]
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	f043 0308 	orr.w	r3, r3, #8
 800cca4:	81a3      	strh	r3, [r4, #12]
 800cca6:	6923      	ldr	r3, [r4, #16]
 800cca8:	b94b      	cbnz	r3, 800ccbe <__swsetup_r+0x9a>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ccb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccb4:	d003      	beq.n	800ccbe <__swsetup_r+0x9a>
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f001 f813 	bl	800dce4 <__smakebuf_r>
 800ccbe:	89a0      	ldrh	r0, [r4, #12]
 800ccc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccc4:	f010 0301 	ands.w	r3, r0, #1
 800ccc8:	d00a      	beq.n	800cce0 <__swsetup_r+0xbc>
 800ccca:	2300      	movs	r3, #0
 800cccc:	60a3      	str	r3, [r4, #8]
 800ccce:	6963      	ldr	r3, [r4, #20]
 800ccd0:	425b      	negs	r3, r3
 800ccd2:	61a3      	str	r3, [r4, #24]
 800ccd4:	6923      	ldr	r3, [r4, #16]
 800ccd6:	b943      	cbnz	r3, 800ccea <__swsetup_r+0xc6>
 800ccd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccdc:	d1ba      	bne.n	800cc54 <__swsetup_r+0x30>
 800ccde:	bd70      	pop	{r4, r5, r6, pc}
 800cce0:	0781      	lsls	r1, r0, #30
 800cce2:	bf58      	it	pl
 800cce4:	6963      	ldrpl	r3, [r4, #20]
 800cce6:	60a3      	str	r3, [r4, #8]
 800cce8:	e7f4      	b.n	800ccd4 <__swsetup_r+0xb0>
 800ccea:	2000      	movs	r0, #0
 800ccec:	e7f7      	b.n	800ccde <__swsetup_r+0xba>
 800ccee:	bf00      	nop
 800ccf0:	2400001c 	.word	0x2400001c
 800ccf4:	0800ecfc 	.word	0x0800ecfc
 800ccf8:	0800ed1c 	.word	0x0800ed1c
 800ccfc:	0800ecdc 	.word	0x0800ecdc

0800cd00 <quorem>:
 800cd00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd04:	6903      	ldr	r3, [r0, #16]
 800cd06:	690c      	ldr	r4, [r1, #16]
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	4607      	mov	r7, r0
 800cd0c:	f2c0 8081 	blt.w	800ce12 <quorem+0x112>
 800cd10:	3c01      	subs	r4, #1
 800cd12:	f101 0814 	add.w	r8, r1, #20
 800cd16:	f100 0514 	add.w	r5, r0, #20
 800cd1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd1e:	9301      	str	r3, [sp, #4]
 800cd20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd34:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd38:	d331      	bcc.n	800cd9e <quorem+0x9e>
 800cd3a:	f04f 0e00 	mov.w	lr, #0
 800cd3e:	4640      	mov	r0, r8
 800cd40:	46ac      	mov	ip, r5
 800cd42:	46f2      	mov	sl, lr
 800cd44:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd48:	b293      	uxth	r3, r2
 800cd4a:	fb06 e303 	mla	r3, r6, r3, lr
 800cd4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	ebaa 0303 	sub.w	r3, sl, r3
 800cd58:	0c12      	lsrs	r2, r2, #16
 800cd5a:	f8dc a000 	ldr.w	sl, [ip]
 800cd5e:	fb06 e202 	mla	r2, r6, r2, lr
 800cd62:	fa13 f38a 	uxtah	r3, r3, sl
 800cd66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd6a:	fa1f fa82 	uxth.w	sl, r2
 800cd6e:	f8dc 2000 	ldr.w	r2, [ip]
 800cd72:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cd76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd80:	4581      	cmp	r9, r0
 800cd82:	f84c 3b04 	str.w	r3, [ip], #4
 800cd86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cd8a:	d2db      	bcs.n	800cd44 <quorem+0x44>
 800cd8c:	f855 300b 	ldr.w	r3, [r5, fp]
 800cd90:	b92b      	cbnz	r3, 800cd9e <quorem+0x9e>
 800cd92:	9b01      	ldr	r3, [sp, #4]
 800cd94:	3b04      	subs	r3, #4
 800cd96:	429d      	cmp	r5, r3
 800cd98:	461a      	mov	r2, r3
 800cd9a:	d32e      	bcc.n	800cdfa <quorem+0xfa>
 800cd9c:	613c      	str	r4, [r7, #16]
 800cd9e:	4638      	mov	r0, r7
 800cda0:	f001 fa74 	bl	800e28c <__mcmp>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	db24      	blt.n	800cdf2 <quorem+0xf2>
 800cda8:	3601      	adds	r6, #1
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f04f 0c00 	mov.w	ip, #0
 800cdb0:	f858 2b04 	ldr.w	r2, [r8], #4
 800cdb4:	f8d0 e000 	ldr.w	lr, [r0]
 800cdb8:	b293      	uxth	r3, r2
 800cdba:	ebac 0303 	sub.w	r3, ip, r3
 800cdbe:	0c12      	lsrs	r2, r2, #16
 800cdc0:	fa13 f38e 	uxtah	r3, r3, lr
 800cdc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cdc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdd2:	45c1      	cmp	r9, r8
 800cdd4:	f840 3b04 	str.w	r3, [r0], #4
 800cdd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cddc:	d2e8      	bcs.n	800cdb0 <quorem+0xb0>
 800cdde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cde2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cde6:	b922      	cbnz	r2, 800cdf2 <quorem+0xf2>
 800cde8:	3b04      	subs	r3, #4
 800cdea:	429d      	cmp	r5, r3
 800cdec:	461a      	mov	r2, r3
 800cdee:	d30a      	bcc.n	800ce06 <quorem+0x106>
 800cdf0:	613c      	str	r4, [r7, #16]
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	b003      	add	sp, #12
 800cdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfa:	6812      	ldr	r2, [r2, #0]
 800cdfc:	3b04      	subs	r3, #4
 800cdfe:	2a00      	cmp	r2, #0
 800ce00:	d1cc      	bne.n	800cd9c <quorem+0x9c>
 800ce02:	3c01      	subs	r4, #1
 800ce04:	e7c7      	b.n	800cd96 <quorem+0x96>
 800ce06:	6812      	ldr	r2, [r2, #0]
 800ce08:	3b04      	subs	r3, #4
 800ce0a:	2a00      	cmp	r2, #0
 800ce0c:	d1f0      	bne.n	800cdf0 <quorem+0xf0>
 800ce0e:	3c01      	subs	r4, #1
 800ce10:	e7eb      	b.n	800cdea <quorem+0xea>
 800ce12:	2000      	movs	r0, #0
 800ce14:	e7ee      	b.n	800cdf4 <quorem+0xf4>
	...

0800ce18 <_dtoa_r>:
 800ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1c:	ec59 8b10 	vmov	r8, r9, d0
 800ce20:	b095      	sub	sp, #84	; 0x54
 800ce22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce24:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ce26:	9107      	str	r1, [sp, #28]
 800ce28:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ce2c:	4606      	mov	r6, r0
 800ce2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ce30:	9310      	str	r3, [sp, #64]	; 0x40
 800ce32:	b975      	cbnz	r5, 800ce52 <_dtoa_r+0x3a>
 800ce34:	2010      	movs	r0, #16
 800ce36:	f000 ff95 	bl	800dd64 <malloc>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	6270      	str	r0, [r6, #36]	; 0x24
 800ce3e:	b920      	cbnz	r0, 800ce4a <_dtoa_r+0x32>
 800ce40:	4bab      	ldr	r3, [pc, #684]	; (800d0f0 <_dtoa_r+0x2d8>)
 800ce42:	21ea      	movs	r1, #234	; 0xea
 800ce44:	48ab      	ldr	r0, [pc, #684]	; (800d0f4 <_dtoa_r+0x2dc>)
 800ce46:	f001 fc41 	bl	800e6cc <__assert_func>
 800ce4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce4e:	6005      	str	r5, [r0, #0]
 800ce50:	60c5      	str	r5, [r0, #12]
 800ce52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ce54:	6819      	ldr	r1, [r3, #0]
 800ce56:	b151      	cbz	r1, 800ce6e <_dtoa_r+0x56>
 800ce58:	685a      	ldr	r2, [r3, #4]
 800ce5a:	604a      	str	r2, [r1, #4]
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	4093      	lsls	r3, r2
 800ce60:	608b      	str	r3, [r1, #8]
 800ce62:	4630      	mov	r0, r6
 800ce64:	f000 ffd4 	bl	800de10 <_Bfree>
 800ce68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	601a      	str	r2, [r3, #0]
 800ce6e:	f1b9 0300 	subs.w	r3, r9, #0
 800ce72:	bfbb      	ittet	lt
 800ce74:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ce78:	9303      	strlt	r3, [sp, #12]
 800ce7a:	2300      	movge	r3, #0
 800ce7c:	2201      	movlt	r2, #1
 800ce7e:	bfac      	ite	ge
 800ce80:	6023      	strge	r3, [r4, #0]
 800ce82:	6022      	strlt	r2, [r4, #0]
 800ce84:	4b9c      	ldr	r3, [pc, #624]	; (800d0f8 <_dtoa_r+0x2e0>)
 800ce86:	9c03      	ldr	r4, [sp, #12]
 800ce88:	43a3      	bics	r3, r4
 800ce8a:	d11a      	bne.n	800cec2 <_dtoa_r+0xaa>
 800ce8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ce8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ce92:	6013      	str	r3, [r2, #0]
 800ce94:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ce98:	ea53 0308 	orrs.w	r3, r3, r8
 800ce9c:	f000 8512 	beq.w	800d8c4 <_dtoa_r+0xaac>
 800cea0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cea2:	b953      	cbnz	r3, 800ceba <_dtoa_r+0xa2>
 800cea4:	4b95      	ldr	r3, [pc, #596]	; (800d0fc <_dtoa_r+0x2e4>)
 800cea6:	e01f      	b.n	800cee8 <_dtoa_r+0xd0>
 800cea8:	4b95      	ldr	r3, [pc, #596]	; (800d100 <_dtoa_r+0x2e8>)
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	3308      	adds	r3, #8
 800ceae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ceb0:	6013      	str	r3, [r2, #0]
 800ceb2:	9800      	ldr	r0, [sp, #0]
 800ceb4:	b015      	add	sp, #84	; 0x54
 800ceb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceba:	4b90      	ldr	r3, [pc, #576]	; (800d0fc <_dtoa_r+0x2e4>)
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	3303      	adds	r3, #3
 800cec0:	e7f5      	b.n	800ceae <_dtoa_r+0x96>
 800cec2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cec6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ceca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cece:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ced2:	d10b      	bne.n	800ceec <_dtoa_r+0xd4>
 800ced4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ced6:	2301      	movs	r3, #1
 800ced8:	6013      	str	r3, [r2, #0]
 800ceda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f000 84ee 	beq.w	800d8be <_dtoa_r+0xaa6>
 800cee2:	4888      	ldr	r0, [pc, #544]	; (800d104 <_dtoa_r+0x2ec>)
 800cee4:	6018      	str	r0, [r3, #0]
 800cee6:	1e43      	subs	r3, r0, #1
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	e7e2      	b.n	800ceb2 <_dtoa_r+0x9a>
 800ceec:	a913      	add	r1, sp, #76	; 0x4c
 800ceee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cef2:	aa12      	add	r2, sp, #72	; 0x48
 800cef4:	4630      	mov	r0, r6
 800cef6:	f001 fa6d 	bl	800e3d4 <__d2b>
 800cefa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800cefe:	4605      	mov	r5, r0
 800cf00:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cf02:	2900      	cmp	r1, #0
 800cf04:	d047      	beq.n	800cf96 <_dtoa_r+0x17e>
 800cf06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cf08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cf0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf10:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800cf14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cf18:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cf1c:	2400      	movs	r4, #0
 800cf1e:	ec43 2b16 	vmov	d6, r2, r3
 800cf22:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800cf26:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d0d8 <_dtoa_r+0x2c0>
 800cf2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cf2e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d0e0 <_dtoa_r+0x2c8>
 800cf32:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cf36:	eeb0 7b46 	vmov.f64	d7, d6
 800cf3a:	ee06 1a90 	vmov	s13, r1
 800cf3e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800cf42:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d0e8 <_dtoa_r+0x2d0>
 800cf46:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cf4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cf4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf56:	ee16 ba90 	vmov	fp, s13
 800cf5a:	9411      	str	r4, [sp, #68]	; 0x44
 800cf5c:	d508      	bpl.n	800cf70 <_dtoa_r+0x158>
 800cf5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cf62:	eeb4 6b47 	vcmp.f64	d6, d7
 800cf66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6a:	bf18      	it	ne
 800cf6c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cf70:	f1bb 0f16 	cmp.w	fp, #22
 800cf74:	d832      	bhi.n	800cfdc <_dtoa_r+0x1c4>
 800cf76:	4b64      	ldr	r3, [pc, #400]	; (800d108 <_dtoa_r+0x2f0>)
 800cf78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cf7c:	ed93 7b00 	vldr	d7, [r3]
 800cf80:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800cf84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8c:	d501      	bpl.n	800cf92 <_dtoa_r+0x17a>
 800cf8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf92:	2300      	movs	r3, #0
 800cf94:	e023      	b.n	800cfde <_dtoa_r+0x1c6>
 800cf96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cf98:	4401      	add	r1, r0
 800cf9a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800cf9e:	2b20      	cmp	r3, #32
 800cfa0:	bfc3      	ittte	gt
 800cfa2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cfa6:	fa04 f303 	lslgt.w	r3, r4, r3
 800cfaa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800cfae:	f1c3 0320 	rsble	r3, r3, #32
 800cfb2:	bfc6      	itte	gt
 800cfb4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800cfb8:	ea43 0308 	orrgt.w	r3, r3, r8
 800cfbc:	fa08 f303 	lslle.w	r3, r8, r3
 800cfc0:	ee07 3a90 	vmov	s15, r3
 800cfc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cfc8:	3901      	subs	r1, #1
 800cfca:	ed8d 7b00 	vstr	d7, [sp]
 800cfce:	9c01      	ldr	r4, [sp, #4]
 800cfd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfd4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800cfd8:	2401      	movs	r4, #1
 800cfda:	e7a0      	b.n	800cf1e <_dtoa_r+0x106>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfe0:	1a43      	subs	r3, r0, r1
 800cfe2:	1e5a      	subs	r2, r3, #1
 800cfe4:	bf45      	ittet	mi
 800cfe6:	f1c3 0301 	rsbmi	r3, r3, #1
 800cfea:	9305      	strmi	r3, [sp, #20]
 800cfec:	2300      	movpl	r3, #0
 800cfee:	2300      	movmi	r3, #0
 800cff0:	9206      	str	r2, [sp, #24]
 800cff2:	bf54      	ite	pl
 800cff4:	9305      	strpl	r3, [sp, #20]
 800cff6:	9306      	strmi	r3, [sp, #24]
 800cff8:	f1bb 0f00 	cmp.w	fp, #0
 800cffc:	db18      	blt.n	800d030 <_dtoa_r+0x218>
 800cffe:	9b06      	ldr	r3, [sp, #24]
 800d000:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d004:	445b      	add	r3, fp
 800d006:	9306      	str	r3, [sp, #24]
 800d008:	2300      	movs	r3, #0
 800d00a:	9a07      	ldr	r2, [sp, #28]
 800d00c:	2a09      	cmp	r2, #9
 800d00e:	d849      	bhi.n	800d0a4 <_dtoa_r+0x28c>
 800d010:	2a05      	cmp	r2, #5
 800d012:	bfc4      	itt	gt
 800d014:	3a04      	subgt	r2, #4
 800d016:	9207      	strgt	r2, [sp, #28]
 800d018:	9a07      	ldr	r2, [sp, #28]
 800d01a:	f1a2 0202 	sub.w	r2, r2, #2
 800d01e:	bfcc      	ite	gt
 800d020:	2400      	movgt	r4, #0
 800d022:	2401      	movle	r4, #1
 800d024:	2a03      	cmp	r2, #3
 800d026:	d848      	bhi.n	800d0ba <_dtoa_r+0x2a2>
 800d028:	e8df f002 	tbb	[pc, r2]
 800d02c:	3a2c2e0b 	.word	0x3a2c2e0b
 800d030:	9b05      	ldr	r3, [sp, #20]
 800d032:	2200      	movs	r2, #0
 800d034:	eba3 030b 	sub.w	r3, r3, fp
 800d038:	9305      	str	r3, [sp, #20]
 800d03a:	920e      	str	r2, [sp, #56]	; 0x38
 800d03c:	f1cb 0300 	rsb	r3, fp, #0
 800d040:	e7e3      	b.n	800d00a <_dtoa_r+0x1f2>
 800d042:	2200      	movs	r2, #0
 800d044:	9208      	str	r2, [sp, #32]
 800d046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d048:	2a00      	cmp	r2, #0
 800d04a:	dc39      	bgt.n	800d0c0 <_dtoa_r+0x2a8>
 800d04c:	f04f 0a01 	mov.w	sl, #1
 800d050:	46d1      	mov	r9, sl
 800d052:	4652      	mov	r2, sl
 800d054:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d058:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d05a:	2100      	movs	r1, #0
 800d05c:	6079      	str	r1, [r7, #4]
 800d05e:	2004      	movs	r0, #4
 800d060:	f100 0c14 	add.w	ip, r0, #20
 800d064:	4594      	cmp	ip, r2
 800d066:	6879      	ldr	r1, [r7, #4]
 800d068:	d92f      	bls.n	800d0ca <_dtoa_r+0x2b2>
 800d06a:	4630      	mov	r0, r6
 800d06c:	930c      	str	r3, [sp, #48]	; 0x30
 800d06e:	f000 fe8f 	bl	800dd90 <_Balloc>
 800d072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d074:	9000      	str	r0, [sp, #0]
 800d076:	4602      	mov	r2, r0
 800d078:	2800      	cmp	r0, #0
 800d07a:	d149      	bne.n	800d110 <_dtoa_r+0x2f8>
 800d07c:	4b23      	ldr	r3, [pc, #140]	; (800d10c <_dtoa_r+0x2f4>)
 800d07e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d082:	e6df      	b.n	800ce44 <_dtoa_r+0x2c>
 800d084:	2201      	movs	r2, #1
 800d086:	e7dd      	b.n	800d044 <_dtoa_r+0x22c>
 800d088:	2200      	movs	r2, #0
 800d08a:	9208      	str	r2, [sp, #32]
 800d08c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d08e:	eb0b 0a02 	add.w	sl, fp, r2
 800d092:	f10a 0901 	add.w	r9, sl, #1
 800d096:	464a      	mov	r2, r9
 800d098:	2a01      	cmp	r2, #1
 800d09a:	bfb8      	it	lt
 800d09c:	2201      	movlt	r2, #1
 800d09e:	e7db      	b.n	800d058 <_dtoa_r+0x240>
 800d0a0:	2201      	movs	r2, #1
 800d0a2:	e7f2      	b.n	800d08a <_dtoa_r+0x272>
 800d0a4:	2401      	movs	r4, #1
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d0ac:	f04f 3aff 	mov.w	sl, #4294967295
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	46d1      	mov	r9, sl
 800d0b4:	2212      	movs	r2, #18
 800d0b6:	9109      	str	r1, [sp, #36]	; 0x24
 800d0b8:	e7ce      	b.n	800d058 <_dtoa_r+0x240>
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	9208      	str	r2, [sp, #32]
 800d0be:	e7f5      	b.n	800d0ac <_dtoa_r+0x294>
 800d0c0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d0c4:	46d1      	mov	r9, sl
 800d0c6:	4652      	mov	r2, sl
 800d0c8:	e7c6      	b.n	800d058 <_dtoa_r+0x240>
 800d0ca:	3101      	adds	r1, #1
 800d0cc:	6079      	str	r1, [r7, #4]
 800d0ce:	0040      	lsls	r0, r0, #1
 800d0d0:	e7c6      	b.n	800d060 <_dtoa_r+0x248>
 800d0d2:	bf00      	nop
 800d0d4:	f3af 8000 	nop.w
 800d0d8:	636f4361 	.word	0x636f4361
 800d0dc:	3fd287a7 	.word	0x3fd287a7
 800d0e0:	8b60c8b3 	.word	0x8b60c8b3
 800d0e4:	3fc68a28 	.word	0x3fc68a28
 800d0e8:	509f79fb 	.word	0x509f79fb
 800d0ec:	3fd34413 	.word	0x3fd34413
 800d0f0:	0800ec55 	.word	0x0800ec55
 800d0f4:	0800ec6c 	.word	0x0800ec6c
 800d0f8:	7ff00000 	.word	0x7ff00000
 800d0fc:	0800ec51 	.word	0x0800ec51
 800d100:	0800ec48 	.word	0x0800ec48
 800d104:	0800ec25 	.word	0x0800ec25
 800d108:	0800edc8 	.word	0x0800edc8
 800d10c:	0800eccb 	.word	0x0800eccb
 800d110:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d112:	9900      	ldr	r1, [sp, #0]
 800d114:	6011      	str	r1, [r2, #0]
 800d116:	f1b9 0f0e 	cmp.w	r9, #14
 800d11a:	d872      	bhi.n	800d202 <_dtoa_r+0x3ea>
 800d11c:	2c00      	cmp	r4, #0
 800d11e:	d070      	beq.n	800d202 <_dtoa_r+0x3ea>
 800d120:	f1bb 0f00 	cmp.w	fp, #0
 800d124:	f340 80a6 	ble.w	800d274 <_dtoa_r+0x45c>
 800d128:	49ca      	ldr	r1, [pc, #808]	; (800d454 <_dtoa_r+0x63c>)
 800d12a:	f00b 020f 	and.w	r2, fp, #15
 800d12e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d132:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d136:	ed92 7b00 	vldr	d7, [r2]
 800d13a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d13e:	f000 808d 	beq.w	800d25c <_dtoa_r+0x444>
 800d142:	4ac5      	ldr	r2, [pc, #788]	; (800d458 <_dtoa_r+0x640>)
 800d144:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d148:	ed92 6b08 	vldr	d6, [r2, #32]
 800d14c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d150:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d154:	f001 010f 	and.w	r1, r1, #15
 800d158:	2203      	movs	r2, #3
 800d15a:	48bf      	ldr	r0, [pc, #764]	; (800d458 <_dtoa_r+0x640>)
 800d15c:	2900      	cmp	r1, #0
 800d15e:	d17f      	bne.n	800d260 <_dtoa_r+0x448>
 800d160:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d164:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d168:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d16c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d16e:	2900      	cmp	r1, #0
 800d170:	f000 80b2 	beq.w	800d2d8 <_dtoa_r+0x4c0>
 800d174:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d178:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d17c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d184:	f140 80a8 	bpl.w	800d2d8 <_dtoa_r+0x4c0>
 800d188:	f1b9 0f00 	cmp.w	r9, #0
 800d18c:	f000 80a4 	beq.w	800d2d8 <_dtoa_r+0x4c0>
 800d190:	f1ba 0f00 	cmp.w	sl, #0
 800d194:	dd31      	ble.n	800d1fa <_dtoa_r+0x3e2>
 800d196:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d19a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d19e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1a2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d1a6:	3201      	adds	r2, #1
 800d1a8:	4650      	mov	r0, sl
 800d1aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d1ae:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d1b2:	ee07 2a90 	vmov	s15, r2
 800d1b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d1ba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d1be:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d1c2:	9c03      	ldr	r4, [sp, #12]
 800d1c4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d1c8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	f040 8086 	bne.w	800d2de <_dtoa_r+0x4c6>
 800d1d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d1d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d1da:	ec42 1b17 	vmov	d7, r1, r2
 800d1de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e6:	f300 8272 	bgt.w	800d6ce <_dtoa_r+0x8b6>
 800d1ea:	eeb1 7b47 	vneg.f64	d7, d7
 800d1ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f6:	f100 8267 	bmi.w	800d6c8 <_dtoa_r+0x8b0>
 800d1fa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d1fe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d202:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d204:	2a00      	cmp	r2, #0
 800d206:	f2c0 8129 	blt.w	800d45c <_dtoa_r+0x644>
 800d20a:	f1bb 0f0e 	cmp.w	fp, #14
 800d20e:	f300 8125 	bgt.w	800d45c <_dtoa_r+0x644>
 800d212:	4b90      	ldr	r3, [pc, #576]	; (800d454 <_dtoa_r+0x63c>)
 800d214:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d218:	ed93 6b00 	vldr	d6, [r3]
 800d21c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f280 80c3 	bge.w	800d3aa <_dtoa_r+0x592>
 800d224:	f1b9 0f00 	cmp.w	r9, #0
 800d228:	f300 80bf 	bgt.w	800d3aa <_dtoa_r+0x592>
 800d22c:	f040 824c 	bne.w	800d6c8 <_dtoa_r+0x8b0>
 800d230:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d234:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d238:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d23c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d244:	464c      	mov	r4, r9
 800d246:	464f      	mov	r7, r9
 800d248:	f280 8222 	bge.w	800d690 <_dtoa_r+0x878>
 800d24c:	f8dd 8000 	ldr.w	r8, [sp]
 800d250:	2331      	movs	r3, #49	; 0x31
 800d252:	f808 3b01 	strb.w	r3, [r8], #1
 800d256:	f10b 0b01 	add.w	fp, fp, #1
 800d25a:	e21e      	b.n	800d69a <_dtoa_r+0x882>
 800d25c:	2202      	movs	r2, #2
 800d25e:	e77c      	b.n	800d15a <_dtoa_r+0x342>
 800d260:	07cc      	lsls	r4, r1, #31
 800d262:	d504      	bpl.n	800d26e <_dtoa_r+0x456>
 800d264:	ed90 6b00 	vldr	d6, [r0]
 800d268:	3201      	adds	r2, #1
 800d26a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d26e:	1049      	asrs	r1, r1, #1
 800d270:	3008      	adds	r0, #8
 800d272:	e773      	b.n	800d15c <_dtoa_r+0x344>
 800d274:	d02e      	beq.n	800d2d4 <_dtoa_r+0x4bc>
 800d276:	f1cb 0100 	rsb	r1, fp, #0
 800d27a:	4a76      	ldr	r2, [pc, #472]	; (800d454 <_dtoa_r+0x63c>)
 800d27c:	f001 000f 	and.w	r0, r1, #15
 800d280:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d284:	ed92 7b00 	vldr	d7, [r2]
 800d288:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d28c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d290:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d294:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d298:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d29c:	486e      	ldr	r0, [pc, #440]	; (800d458 <_dtoa_r+0x640>)
 800d29e:	1109      	asrs	r1, r1, #4
 800d2a0:	2400      	movs	r4, #0
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	b939      	cbnz	r1, 800d2b6 <_dtoa_r+0x49e>
 800d2a6:	2c00      	cmp	r4, #0
 800d2a8:	f43f af60 	beq.w	800d16c <_dtoa_r+0x354>
 800d2ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d2b4:	e75a      	b.n	800d16c <_dtoa_r+0x354>
 800d2b6:	07cf      	lsls	r7, r1, #31
 800d2b8:	d509      	bpl.n	800d2ce <_dtoa_r+0x4b6>
 800d2ba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d2be:	ed90 7b00 	vldr	d7, [r0]
 800d2c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d2c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d2ca:	3201      	adds	r2, #1
 800d2cc:	2401      	movs	r4, #1
 800d2ce:	1049      	asrs	r1, r1, #1
 800d2d0:	3008      	adds	r0, #8
 800d2d2:	e7e7      	b.n	800d2a4 <_dtoa_r+0x48c>
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	e749      	b.n	800d16c <_dtoa_r+0x354>
 800d2d8:	465f      	mov	r7, fp
 800d2da:	4648      	mov	r0, r9
 800d2dc:	e765      	b.n	800d1aa <_dtoa_r+0x392>
 800d2de:	ec42 1b17 	vmov	d7, r1, r2
 800d2e2:	4a5c      	ldr	r2, [pc, #368]	; (800d454 <_dtoa_r+0x63c>)
 800d2e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d2e8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d2ec:	9a00      	ldr	r2, [sp, #0]
 800d2ee:	1814      	adds	r4, r2, r0
 800d2f0:	9a08      	ldr	r2, [sp, #32]
 800d2f2:	b352      	cbz	r2, 800d34a <_dtoa_r+0x532>
 800d2f4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d2f8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d2fc:	f8dd 8000 	ldr.w	r8, [sp]
 800d300:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d304:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d308:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d30c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d310:	ee14 2a90 	vmov	r2, s9
 800d314:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d318:	3230      	adds	r2, #48	; 0x30
 800d31a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d31e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d326:	f808 2b01 	strb.w	r2, [r8], #1
 800d32a:	d439      	bmi.n	800d3a0 <_dtoa_r+0x588>
 800d32c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d330:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d338:	d472      	bmi.n	800d420 <_dtoa_r+0x608>
 800d33a:	45a0      	cmp	r8, r4
 800d33c:	f43f af5d 	beq.w	800d1fa <_dtoa_r+0x3e2>
 800d340:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d344:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d348:	e7e0      	b.n	800d30c <_dtoa_r+0x4f4>
 800d34a:	f8dd 8000 	ldr.w	r8, [sp]
 800d34e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d352:	4621      	mov	r1, r4
 800d354:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d358:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d35c:	ee14 2a90 	vmov	r2, s9
 800d360:	3230      	adds	r2, #48	; 0x30
 800d362:	f808 2b01 	strb.w	r2, [r8], #1
 800d366:	45a0      	cmp	r8, r4
 800d368:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d36c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d370:	d118      	bne.n	800d3a4 <_dtoa_r+0x58c>
 800d372:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d376:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d37a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d382:	dc4d      	bgt.n	800d420 <_dtoa_r+0x608>
 800d384:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d388:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d390:	f57f af33 	bpl.w	800d1fa <_dtoa_r+0x3e2>
 800d394:	4688      	mov	r8, r1
 800d396:	3901      	subs	r1, #1
 800d398:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d39c:	2b30      	cmp	r3, #48	; 0x30
 800d39e:	d0f9      	beq.n	800d394 <_dtoa_r+0x57c>
 800d3a0:	46bb      	mov	fp, r7
 800d3a2:	e02a      	b.n	800d3fa <_dtoa_r+0x5e2>
 800d3a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d3a8:	e7d6      	b.n	800d358 <_dtoa_r+0x540>
 800d3aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3ae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d3b2:	f8dd 8000 	ldr.w	r8, [sp]
 800d3b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d3ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d3be:	ee15 3a10 	vmov	r3, s10
 800d3c2:	3330      	adds	r3, #48	; 0x30
 800d3c4:	f808 3b01 	strb.w	r3, [r8], #1
 800d3c8:	9b00      	ldr	r3, [sp, #0]
 800d3ca:	eba8 0303 	sub.w	r3, r8, r3
 800d3ce:	4599      	cmp	r9, r3
 800d3d0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d3d4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d3d8:	d133      	bne.n	800d442 <_dtoa_r+0x62a>
 800d3da:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d3de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e6:	dc1a      	bgt.n	800d41e <_dtoa_r+0x606>
 800d3e8:	eeb4 7b46 	vcmp.f64	d7, d6
 800d3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f0:	d103      	bne.n	800d3fa <_dtoa_r+0x5e2>
 800d3f2:	ee15 3a10 	vmov	r3, s10
 800d3f6:	07d9      	lsls	r1, r3, #31
 800d3f8:	d411      	bmi.n	800d41e <_dtoa_r+0x606>
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f000 fd07 	bl	800de10 <_Bfree>
 800d402:	2300      	movs	r3, #0
 800d404:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d406:	f888 3000 	strb.w	r3, [r8]
 800d40a:	f10b 0301 	add.w	r3, fp, #1
 800d40e:	6013      	str	r3, [r2, #0]
 800d410:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d412:	2b00      	cmp	r3, #0
 800d414:	f43f ad4d 	beq.w	800ceb2 <_dtoa_r+0x9a>
 800d418:	f8c3 8000 	str.w	r8, [r3]
 800d41c:	e549      	b.n	800ceb2 <_dtoa_r+0x9a>
 800d41e:	465f      	mov	r7, fp
 800d420:	4643      	mov	r3, r8
 800d422:	4698      	mov	r8, r3
 800d424:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d428:	2a39      	cmp	r2, #57	; 0x39
 800d42a:	d106      	bne.n	800d43a <_dtoa_r+0x622>
 800d42c:	9a00      	ldr	r2, [sp, #0]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d1f7      	bne.n	800d422 <_dtoa_r+0x60a>
 800d432:	9900      	ldr	r1, [sp, #0]
 800d434:	2230      	movs	r2, #48	; 0x30
 800d436:	3701      	adds	r7, #1
 800d438:	700a      	strb	r2, [r1, #0]
 800d43a:	781a      	ldrb	r2, [r3, #0]
 800d43c:	3201      	adds	r2, #1
 800d43e:	701a      	strb	r2, [r3, #0]
 800d440:	e7ae      	b.n	800d3a0 <_dtoa_r+0x588>
 800d442:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d446:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44e:	d1b2      	bne.n	800d3b6 <_dtoa_r+0x59e>
 800d450:	e7d3      	b.n	800d3fa <_dtoa_r+0x5e2>
 800d452:	bf00      	nop
 800d454:	0800edc8 	.word	0x0800edc8
 800d458:	0800eda0 	.word	0x0800eda0
 800d45c:	9908      	ldr	r1, [sp, #32]
 800d45e:	2900      	cmp	r1, #0
 800d460:	f000 80d1 	beq.w	800d606 <_dtoa_r+0x7ee>
 800d464:	9907      	ldr	r1, [sp, #28]
 800d466:	2901      	cmp	r1, #1
 800d468:	f300 80b4 	bgt.w	800d5d4 <_dtoa_r+0x7bc>
 800d46c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d46e:	2900      	cmp	r1, #0
 800d470:	f000 80ac 	beq.w	800d5cc <_dtoa_r+0x7b4>
 800d474:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d478:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d47c:	461c      	mov	r4, r3
 800d47e:	930a      	str	r3, [sp, #40]	; 0x28
 800d480:	9b05      	ldr	r3, [sp, #20]
 800d482:	4413      	add	r3, r2
 800d484:	9305      	str	r3, [sp, #20]
 800d486:	9b06      	ldr	r3, [sp, #24]
 800d488:	2101      	movs	r1, #1
 800d48a:	4413      	add	r3, r2
 800d48c:	4630      	mov	r0, r6
 800d48e:	9306      	str	r3, [sp, #24]
 800d490:	f000 fd7a 	bl	800df88 <__i2b>
 800d494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d496:	4607      	mov	r7, r0
 800d498:	f1b8 0f00 	cmp.w	r8, #0
 800d49c:	dd0d      	ble.n	800d4ba <_dtoa_r+0x6a2>
 800d49e:	9a06      	ldr	r2, [sp, #24]
 800d4a0:	2a00      	cmp	r2, #0
 800d4a2:	dd0a      	ble.n	800d4ba <_dtoa_r+0x6a2>
 800d4a4:	4542      	cmp	r2, r8
 800d4a6:	9905      	ldr	r1, [sp, #20]
 800d4a8:	bfa8      	it	ge
 800d4aa:	4642      	movge	r2, r8
 800d4ac:	1a89      	subs	r1, r1, r2
 800d4ae:	9105      	str	r1, [sp, #20]
 800d4b0:	9906      	ldr	r1, [sp, #24]
 800d4b2:	eba8 0802 	sub.w	r8, r8, r2
 800d4b6:	1a8a      	subs	r2, r1, r2
 800d4b8:	9206      	str	r2, [sp, #24]
 800d4ba:	b303      	cbz	r3, 800d4fe <_dtoa_r+0x6e6>
 800d4bc:	9a08      	ldr	r2, [sp, #32]
 800d4be:	2a00      	cmp	r2, #0
 800d4c0:	f000 80a6 	beq.w	800d610 <_dtoa_r+0x7f8>
 800d4c4:	2c00      	cmp	r4, #0
 800d4c6:	dd13      	ble.n	800d4f0 <_dtoa_r+0x6d8>
 800d4c8:	4639      	mov	r1, r7
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d4d0:	f000 fe16 	bl	800e100 <__pow5mult>
 800d4d4:	462a      	mov	r2, r5
 800d4d6:	4601      	mov	r1, r0
 800d4d8:	4607      	mov	r7, r0
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f000 fd6a 	bl	800dfb4 <__multiply>
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	900a      	str	r0, [sp, #40]	; 0x28
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f000 fc93 	bl	800de10 <_Bfree>
 800d4ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4ee:	4615      	mov	r5, r2
 800d4f0:	1b1a      	subs	r2, r3, r4
 800d4f2:	d004      	beq.n	800d4fe <_dtoa_r+0x6e6>
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	f000 fe02 	bl	800e100 <__pow5mult>
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	2101      	movs	r1, #1
 800d500:	4630      	mov	r0, r6
 800d502:	f000 fd41 	bl	800df88 <__i2b>
 800d506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d508:	2b00      	cmp	r3, #0
 800d50a:	4604      	mov	r4, r0
 800d50c:	f340 8082 	ble.w	800d614 <_dtoa_r+0x7fc>
 800d510:	461a      	mov	r2, r3
 800d512:	4601      	mov	r1, r0
 800d514:	4630      	mov	r0, r6
 800d516:	f000 fdf3 	bl	800e100 <__pow5mult>
 800d51a:	9b07      	ldr	r3, [sp, #28]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	4604      	mov	r4, r0
 800d520:	dd7b      	ble.n	800d61a <_dtoa_r+0x802>
 800d522:	2300      	movs	r3, #0
 800d524:	930a      	str	r3, [sp, #40]	; 0x28
 800d526:	6922      	ldr	r2, [r4, #16]
 800d528:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d52c:	6910      	ldr	r0, [r2, #16]
 800d52e:	f000 fcdb 	bl	800dee8 <__hi0bits>
 800d532:	f1c0 0020 	rsb	r0, r0, #32
 800d536:	9b06      	ldr	r3, [sp, #24]
 800d538:	4418      	add	r0, r3
 800d53a:	f010 001f 	ands.w	r0, r0, #31
 800d53e:	f000 808d 	beq.w	800d65c <_dtoa_r+0x844>
 800d542:	f1c0 0220 	rsb	r2, r0, #32
 800d546:	2a04      	cmp	r2, #4
 800d548:	f340 8086 	ble.w	800d658 <_dtoa_r+0x840>
 800d54c:	f1c0 001c 	rsb	r0, r0, #28
 800d550:	9b05      	ldr	r3, [sp, #20]
 800d552:	4403      	add	r3, r0
 800d554:	9305      	str	r3, [sp, #20]
 800d556:	9b06      	ldr	r3, [sp, #24]
 800d558:	4403      	add	r3, r0
 800d55a:	4480      	add	r8, r0
 800d55c:	9306      	str	r3, [sp, #24]
 800d55e:	9b05      	ldr	r3, [sp, #20]
 800d560:	2b00      	cmp	r3, #0
 800d562:	dd05      	ble.n	800d570 <_dtoa_r+0x758>
 800d564:	4629      	mov	r1, r5
 800d566:	461a      	mov	r2, r3
 800d568:	4630      	mov	r0, r6
 800d56a:	f000 fe23 	bl	800e1b4 <__lshift>
 800d56e:	4605      	mov	r5, r0
 800d570:	9b06      	ldr	r3, [sp, #24]
 800d572:	2b00      	cmp	r3, #0
 800d574:	dd05      	ble.n	800d582 <_dtoa_r+0x76a>
 800d576:	4621      	mov	r1, r4
 800d578:	461a      	mov	r2, r3
 800d57a:	4630      	mov	r0, r6
 800d57c:	f000 fe1a 	bl	800e1b4 <__lshift>
 800d580:	4604      	mov	r4, r0
 800d582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d584:	2b00      	cmp	r3, #0
 800d586:	d06b      	beq.n	800d660 <_dtoa_r+0x848>
 800d588:	4621      	mov	r1, r4
 800d58a:	4628      	mov	r0, r5
 800d58c:	f000 fe7e 	bl	800e28c <__mcmp>
 800d590:	2800      	cmp	r0, #0
 800d592:	da65      	bge.n	800d660 <_dtoa_r+0x848>
 800d594:	2300      	movs	r3, #0
 800d596:	4629      	mov	r1, r5
 800d598:	220a      	movs	r2, #10
 800d59a:	4630      	mov	r0, r6
 800d59c:	f000 fc5a 	bl	800de54 <__multadd>
 800d5a0:	9b08      	ldr	r3, [sp, #32]
 800d5a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d5a6:	4605      	mov	r5, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 8192 	beq.w	800d8d2 <_dtoa_r+0xaba>
 800d5ae:	4639      	mov	r1, r7
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	220a      	movs	r2, #10
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f000 fc4d 	bl	800de54 <__multadd>
 800d5ba:	f1ba 0f00 	cmp.w	sl, #0
 800d5be:	4607      	mov	r7, r0
 800d5c0:	f300 808e 	bgt.w	800d6e0 <_dtoa_r+0x8c8>
 800d5c4:	9b07      	ldr	r3, [sp, #28]
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	dc51      	bgt.n	800d66e <_dtoa_r+0x856>
 800d5ca:	e089      	b.n	800d6e0 <_dtoa_r+0x8c8>
 800d5cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d5ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d5d2:	e751      	b.n	800d478 <_dtoa_r+0x660>
 800d5d4:	f109 34ff 	add.w	r4, r9, #4294967295
 800d5d8:	42a3      	cmp	r3, r4
 800d5da:	bfbf      	itttt	lt
 800d5dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d5de:	1ae3      	sublt	r3, r4, r3
 800d5e0:	18d2      	addlt	r2, r2, r3
 800d5e2:	4613      	movlt	r3, r2
 800d5e4:	bfb7      	itett	lt
 800d5e6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d5e8:	1b1c      	subge	r4, r3, r4
 800d5ea:	4623      	movlt	r3, r4
 800d5ec:	2400      	movlt	r4, #0
 800d5ee:	f1b9 0f00 	cmp.w	r9, #0
 800d5f2:	bfb5      	itete	lt
 800d5f4:	9a05      	ldrlt	r2, [sp, #20]
 800d5f6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d5fa:	eba2 0809 	sublt.w	r8, r2, r9
 800d5fe:	464a      	movge	r2, r9
 800d600:	bfb8      	it	lt
 800d602:	2200      	movlt	r2, #0
 800d604:	e73b      	b.n	800d47e <_dtoa_r+0x666>
 800d606:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d60a:	9f08      	ldr	r7, [sp, #32]
 800d60c:	461c      	mov	r4, r3
 800d60e:	e743      	b.n	800d498 <_dtoa_r+0x680>
 800d610:	461a      	mov	r2, r3
 800d612:	e76f      	b.n	800d4f4 <_dtoa_r+0x6dc>
 800d614:	9b07      	ldr	r3, [sp, #28]
 800d616:	2b01      	cmp	r3, #1
 800d618:	dc18      	bgt.n	800d64c <_dtoa_r+0x834>
 800d61a:	9b02      	ldr	r3, [sp, #8]
 800d61c:	b9b3      	cbnz	r3, 800d64c <_dtoa_r+0x834>
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d624:	b9a2      	cbnz	r2, 800d650 <_dtoa_r+0x838>
 800d626:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d62a:	0d12      	lsrs	r2, r2, #20
 800d62c:	0512      	lsls	r2, r2, #20
 800d62e:	b18a      	cbz	r2, 800d654 <_dtoa_r+0x83c>
 800d630:	9b05      	ldr	r3, [sp, #20]
 800d632:	3301      	adds	r3, #1
 800d634:	9305      	str	r3, [sp, #20]
 800d636:	9b06      	ldr	r3, [sp, #24]
 800d638:	3301      	adds	r3, #1
 800d63a:	9306      	str	r3, [sp, #24]
 800d63c:	2301      	movs	r3, #1
 800d63e:	930a      	str	r3, [sp, #40]	; 0x28
 800d640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d642:	2b00      	cmp	r3, #0
 800d644:	f47f af6f 	bne.w	800d526 <_dtoa_r+0x70e>
 800d648:	2001      	movs	r0, #1
 800d64a:	e774      	b.n	800d536 <_dtoa_r+0x71e>
 800d64c:	2300      	movs	r3, #0
 800d64e:	e7f6      	b.n	800d63e <_dtoa_r+0x826>
 800d650:	9b02      	ldr	r3, [sp, #8]
 800d652:	e7f4      	b.n	800d63e <_dtoa_r+0x826>
 800d654:	920a      	str	r2, [sp, #40]	; 0x28
 800d656:	e7f3      	b.n	800d640 <_dtoa_r+0x828>
 800d658:	d081      	beq.n	800d55e <_dtoa_r+0x746>
 800d65a:	4610      	mov	r0, r2
 800d65c:	301c      	adds	r0, #28
 800d65e:	e777      	b.n	800d550 <_dtoa_r+0x738>
 800d660:	f1b9 0f00 	cmp.w	r9, #0
 800d664:	dc37      	bgt.n	800d6d6 <_dtoa_r+0x8be>
 800d666:	9b07      	ldr	r3, [sp, #28]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	dd34      	ble.n	800d6d6 <_dtoa_r+0x8be>
 800d66c:	46ca      	mov	sl, r9
 800d66e:	f1ba 0f00 	cmp.w	sl, #0
 800d672:	d10d      	bne.n	800d690 <_dtoa_r+0x878>
 800d674:	4621      	mov	r1, r4
 800d676:	4653      	mov	r3, sl
 800d678:	2205      	movs	r2, #5
 800d67a:	4630      	mov	r0, r6
 800d67c:	f000 fbea 	bl	800de54 <__multadd>
 800d680:	4601      	mov	r1, r0
 800d682:	4604      	mov	r4, r0
 800d684:	4628      	mov	r0, r5
 800d686:	f000 fe01 	bl	800e28c <__mcmp>
 800d68a:	2800      	cmp	r0, #0
 800d68c:	f73f adde 	bgt.w	800d24c <_dtoa_r+0x434>
 800d690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d692:	f8dd 8000 	ldr.w	r8, [sp]
 800d696:	ea6f 0b03 	mvn.w	fp, r3
 800d69a:	f04f 0900 	mov.w	r9, #0
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f000 fbb5 	bl	800de10 <_Bfree>
 800d6a6:	2f00      	cmp	r7, #0
 800d6a8:	f43f aea7 	beq.w	800d3fa <_dtoa_r+0x5e2>
 800d6ac:	f1b9 0f00 	cmp.w	r9, #0
 800d6b0:	d005      	beq.n	800d6be <_dtoa_r+0x8a6>
 800d6b2:	45b9      	cmp	r9, r7
 800d6b4:	d003      	beq.n	800d6be <_dtoa_r+0x8a6>
 800d6b6:	4649      	mov	r1, r9
 800d6b8:	4630      	mov	r0, r6
 800d6ba:	f000 fba9 	bl	800de10 <_Bfree>
 800d6be:	4639      	mov	r1, r7
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	f000 fba5 	bl	800de10 <_Bfree>
 800d6c6:	e698      	b.n	800d3fa <_dtoa_r+0x5e2>
 800d6c8:	2400      	movs	r4, #0
 800d6ca:	4627      	mov	r7, r4
 800d6cc:	e7e0      	b.n	800d690 <_dtoa_r+0x878>
 800d6ce:	46bb      	mov	fp, r7
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	4607      	mov	r7, r0
 800d6d4:	e5ba      	b.n	800d24c <_dtoa_r+0x434>
 800d6d6:	9b08      	ldr	r3, [sp, #32]
 800d6d8:	46ca      	mov	sl, r9
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f000 8100 	beq.w	800d8e0 <_dtoa_r+0xac8>
 800d6e0:	f1b8 0f00 	cmp.w	r8, #0
 800d6e4:	dd05      	ble.n	800d6f2 <_dtoa_r+0x8da>
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	4642      	mov	r2, r8
 800d6ea:	4630      	mov	r0, r6
 800d6ec:	f000 fd62 	bl	800e1b4 <__lshift>
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d05d      	beq.n	800d7b4 <_dtoa_r+0x99c>
 800d6f8:	6879      	ldr	r1, [r7, #4]
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f000 fb48 	bl	800dd90 <_Balloc>
 800d700:	4680      	mov	r8, r0
 800d702:	b928      	cbnz	r0, 800d710 <_dtoa_r+0x8f8>
 800d704:	4b82      	ldr	r3, [pc, #520]	; (800d910 <_dtoa_r+0xaf8>)
 800d706:	4602      	mov	r2, r0
 800d708:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d70c:	f7ff bb9a 	b.w	800ce44 <_dtoa_r+0x2c>
 800d710:	693a      	ldr	r2, [r7, #16]
 800d712:	3202      	adds	r2, #2
 800d714:	0092      	lsls	r2, r2, #2
 800d716:	f107 010c 	add.w	r1, r7, #12
 800d71a:	300c      	adds	r0, #12
 800d71c:	f000 fb2a 	bl	800dd74 <memcpy>
 800d720:	2201      	movs	r2, #1
 800d722:	4641      	mov	r1, r8
 800d724:	4630      	mov	r0, r6
 800d726:	f000 fd45 	bl	800e1b4 <__lshift>
 800d72a:	9b00      	ldr	r3, [sp, #0]
 800d72c:	3301      	adds	r3, #1
 800d72e:	9305      	str	r3, [sp, #20]
 800d730:	9b00      	ldr	r3, [sp, #0]
 800d732:	4453      	add	r3, sl
 800d734:	9309      	str	r3, [sp, #36]	; 0x24
 800d736:	9b02      	ldr	r3, [sp, #8]
 800d738:	f003 0301 	and.w	r3, r3, #1
 800d73c:	46b9      	mov	r9, r7
 800d73e:	9308      	str	r3, [sp, #32]
 800d740:	4607      	mov	r7, r0
 800d742:	9b05      	ldr	r3, [sp, #20]
 800d744:	4621      	mov	r1, r4
 800d746:	3b01      	subs	r3, #1
 800d748:	4628      	mov	r0, r5
 800d74a:	9302      	str	r3, [sp, #8]
 800d74c:	f7ff fad8 	bl	800cd00 <quorem>
 800d750:	4603      	mov	r3, r0
 800d752:	3330      	adds	r3, #48	; 0x30
 800d754:	9006      	str	r0, [sp, #24]
 800d756:	4649      	mov	r1, r9
 800d758:	4628      	mov	r0, r5
 800d75a:	930a      	str	r3, [sp, #40]	; 0x28
 800d75c:	f000 fd96 	bl	800e28c <__mcmp>
 800d760:	463a      	mov	r2, r7
 800d762:	4682      	mov	sl, r0
 800d764:	4621      	mov	r1, r4
 800d766:	4630      	mov	r0, r6
 800d768:	f000 fdac 	bl	800e2c4 <__mdiff>
 800d76c:	68c2      	ldr	r2, [r0, #12]
 800d76e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d770:	4680      	mov	r8, r0
 800d772:	bb0a      	cbnz	r2, 800d7b8 <_dtoa_r+0x9a0>
 800d774:	4601      	mov	r1, r0
 800d776:	4628      	mov	r0, r5
 800d778:	f000 fd88 	bl	800e28c <__mcmp>
 800d77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d77e:	4602      	mov	r2, r0
 800d780:	4641      	mov	r1, r8
 800d782:	4630      	mov	r0, r6
 800d784:	920e      	str	r2, [sp, #56]	; 0x38
 800d786:	930a      	str	r3, [sp, #40]	; 0x28
 800d788:	f000 fb42 	bl	800de10 <_Bfree>
 800d78c:	9b07      	ldr	r3, [sp, #28]
 800d78e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d790:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d794:	ea43 0102 	orr.w	r1, r3, r2
 800d798:	9b08      	ldr	r3, [sp, #32]
 800d79a:	430b      	orrs	r3, r1
 800d79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d79e:	d10d      	bne.n	800d7bc <_dtoa_r+0x9a4>
 800d7a0:	2b39      	cmp	r3, #57	; 0x39
 800d7a2:	d029      	beq.n	800d7f8 <_dtoa_r+0x9e0>
 800d7a4:	f1ba 0f00 	cmp.w	sl, #0
 800d7a8:	dd01      	ble.n	800d7ae <_dtoa_r+0x996>
 800d7aa:	9b06      	ldr	r3, [sp, #24]
 800d7ac:	3331      	adds	r3, #49	; 0x31
 800d7ae:	9a02      	ldr	r2, [sp, #8]
 800d7b0:	7013      	strb	r3, [r2, #0]
 800d7b2:	e774      	b.n	800d69e <_dtoa_r+0x886>
 800d7b4:	4638      	mov	r0, r7
 800d7b6:	e7b8      	b.n	800d72a <_dtoa_r+0x912>
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	e7e1      	b.n	800d780 <_dtoa_r+0x968>
 800d7bc:	f1ba 0f00 	cmp.w	sl, #0
 800d7c0:	db06      	blt.n	800d7d0 <_dtoa_r+0x9b8>
 800d7c2:	9907      	ldr	r1, [sp, #28]
 800d7c4:	ea41 0a0a 	orr.w	sl, r1, sl
 800d7c8:	9908      	ldr	r1, [sp, #32]
 800d7ca:	ea5a 0101 	orrs.w	r1, sl, r1
 800d7ce:	d120      	bne.n	800d812 <_dtoa_r+0x9fa>
 800d7d0:	2a00      	cmp	r2, #0
 800d7d2:	ddec      	ble.n	800d7ae <_dtoa_r+0x996>
 800d7d4:	4629      	mov	r1, r5
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	4630      	mov	r0, r6
 800d7da:	9305      	str	r3, [sp, #20]
 800d7dc:	f000 fcea 	bl	800e1b4 <__lshift>
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	4605      	mov	r5, r0
 800d7e4:	f000 fd52 	bl	800e28c <__mcmp>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	9b05      	ldr	r3, [sp, #20]
 800d7ec:	dc02      	bgt.n	800d7f4 <_dtoa_r+0x9dc>
 800d7ee:	d1de      	bne.n	800d7ae <_dtoa_r+0x996>
 800d7f0:	07da      	lsls	r2, r3, #31
 800d7f2:	d5dc      	bpl.n	800d7ae <_dtoa_r+0x996>
 800d7f4:	2b39      	cmp	r3, #57	; 0x39
 800d7f6:	d1d8      	bne.n	800d7aa <_dtoa_r+0x992>
 800d7f8:	9a02      	ldr	r2, [sp, #8]
 800d7fa:	2339      	movs	r3, #57	; 0x39
 800d7fc:	7013      	strb	r3, [r2, #0]
 800d7fe:	4643      	mov	r3, r8
 800d800:	4698      	mov	r8, r3
 800d802:	3b01      	subs	r3, #1
 800d804:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d808:	2a39      	cmp	r2, #57	; 0x39
 800d80a:	d051      	beq.n	800d8b0 <_dtoa_r+0xa98>
 800d80c:	3201      	adds	r2, #1
 800d80e:	701a      	strb	r2, [r3, #0]
 800d810:	e745      	b.n	800d69e <_dtoa_r+0x886>
 800d812:	2a00      	cmp	r2, #0
 800d814:	dd03      	ble.n	800d81e <_dtoa_r+0xa06>
 800d816:	2b39      	cmp	r3, #57	; 0x39
 800d818:	d0ee      	beq.n	800d7f8 <_dtoa_r+0x9e0>
 800d81a:	3301      	adds	r3, #1
 800d81c:	e7c7      	b.n	800d7ae <_dtoa_r+0x996>
 800d81e:	9a05      	ldr	r2, [sp, #20]
 800d820:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d822:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d826:	428a      	cmp	r2, r1
 800d828:	d02b      	beq.n	800d882 <_dtoa_r+0xa6a>
 800d82a:	4629      	mov	r1, r5
 800d82c:	2300      	movs	r3, #0
 800d82e:	220a      	movs	r2, #10
 800d830:	4630      	mov	r0, r6
 800d832:	f000 fb0f 	bl	800de54 <__multadd>
 800d836:	45b9      	cmp	r9, r7
 800d838:	4605      	mov	r5, r0
 800d83a:	f04f 0300 	mov.w	r3, #0
 800d83e:	f04f 020a 	mov.w	r2, #10
 800d842:	4649      	mov	r1, r9
 800d844:	4630      	mov	r0, r6
 800d846:	d107      	bne.n	800d858 <_dtoa_r+0xa40>
 800d848:	f000 fb04 	bl	800de54 <__multadd>
 800d84c:	4681      	mov	r9, r0
 800d84e:	4607      	mov	r7, r0
 800d850:	9b05      	ldr	r3, [sp, #20]
 800d852:	3301      	adds	r3, #1
 800d854:	9305      	str	r3, [sp, #20]
 800d856:	e774      	b.n	800d742 <_dtoa_r+0x92a>
 800d858:	f000 fafc 	bl	800de54 <__multadd>
 800d85c:	4639      	mov	r1, r7
 800d85e:	4681      	mov	r9, r0
 800d860:	2300      	movs	r3, #0
 800d862:	220a      	movs	r2, #10
 800d864:	4630      	mov	r0, r6
 800d866:	f000 faf5 	bl	800de54 <__multadd>
 800d86a:	4607      	mov	r7, r0
 800d86c:	e7f0      	b.n	800d850 <_dtoa_r+0xa38>
 800d86e:	f1ba 0f00 	cmp.w	sl, #0
 800d872:	9a00      	ldr	r2, [sp, #0]
 800d874:	bfcc      	ite	gt
 800d876:	46d0      	movgt	r8, sl
 800d878:	f04f 0801 	movle.w	r8, #1
 800d87c:	4490      	add	r8, r2
 800d87e:	f04f 0900 	mov.w	r9, #0
 800d882:	4629      	mov	r1, r5
 800d884:	2201      	movs	r2, #1
 800d886:	4630      	mov	r0, r6
 800d888:	9302      	str	r3, [sp, #8]
 800d88a:	f000 fc93 	bl	800e1b4 <__lshift>
 800d88e:	4621      	mov	r1, r4
 800d890:	4605      	mov	r5, r0
 800d892:	f000 fcfb 	bl	800e28c <__mcmp>
 800d896:	2800      	cmp	r0, #0
 800d898:	dcb1      	bgt.n	800d7fe <_dtoa_r+0x9e6>
 800d89a:	d102      	bne.n	800d8a2 <_dtoa_r+0xa8a>
 800d89c:	9b02      	ldr	r3, [sp, #8]
 800d89e:	07db      	lsls	r3, r3, #31
 800d8a0:	d4ad      	bmi.n	800d7fe <_dtoa_r+0x9e6>
 800d8a2:	4643      	mov	r3, r8
 800d8a4:	4698      	mov	r8, r3
 800d8a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8aa:	2a30      	cmp	r2, #48	; 0x30
 800d8ac:	d0fa      	beq.n	800d8a4 <_dtoa_r+0xa8c>
 800d8ae:	e6f6      	b.n	800d69e <_dtoa_r+0x886>
 800d8b0:	9a00      	ldr	r2, [sp, #0]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d1a4      	bne.n	800d800 <_dtoa_r+0x9e8>
 800d8b6:	f10b 0b01 	add.w	fp, fp, #1
 800d8ba:	2331      	movs	r3, #49	; 0x31
 800d8bc:	e778      	b.n	800d7b0 <_dtoa_r+0x998>
 800d8be:	4b15      	ldr	r3, [pc, #84]	; (800d914 <_dtoa_r+0xafc>)
 800d8c0:	f7ff bb12 	b.w	800cee8 <_dtoa_r+0xd0>
 800d8c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f47f aaee 	bne.w	800cea8 <_dtoa_r+0x90>
 800d8cc:	4b12      	ldr	r3, [pc, #72]	; (800d918 <_dtoa_r+0xb00>)
 800d8ce:	f7ff bb0b 	b.w	800cee8 <_dtoa_r+0xd0>
 800d8d2:	f1ba 0f00 	cmp.w	sl, #0
 800d8d6:	dc03      	bgt.n	800d8e0 <_dtoa_r+0xac8>
 800d8d8:	9b07      	ldr	r3, [sp, #28]
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	f73f aec7 	bgt.w	800d66e <_dtoa_r+0x856>
 800d8e0:	f8dd 8000 	ldr.w	r8, [sp]
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f7ff fa0a 	bl	800cd00 <quorem>
 800d8ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d8f0:	f808 3b01 	strb.w	r3, [r8], #1
 800d8f4:	9a00      	ldr	r2, [sp, #0]
 800d8f6:	eba8 0202 	sub.w	r2, r8, r2
 800d8fa:	4592      	cmp	sl, r2
 800d8fc:	ddb7      	ble.n	800d86e <_dtoa_r+0xa56>
 800d8fe:	4629      	mov	r1, r5
 800d900:	2300      	movs	r3, #0
 800d902:	220a      	movs	r2, #10
 800d904:	4630      	mov	r0, r6
 800d906:	f000 faa5 	bl	800de54 <__multadd>
 800d90a:	4605      	mov	r5, r0
 800d90c:	e7ea      	b.n	800d8e4 <_dtoa_r+0xacc>
 800d90e:	bf00      	nop
 800d910:	0800eccb 	.word	0x0800eccb
 800d914:	0800ec24 	.word	0x0800ec24
 800d918:	0800ec48 	.word	0x0800ec48

0800d91c <__sflush_r>:
 800d91c:	898a      	ldrh	r2, [r1, #12]
 800d91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d922:	4605      	mov	r5, r0
 800d924:	0710      	lsls	r0, r2, #28
 800d926:	460c      	mov	r4, r1
 800d928:	d458      	bmi.n	800d9dc <__sflush_r+0xc0>
 800d92a:	684b      	ldr	r3, [r1, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	dc05      	bgt.n	800d93c <__sflush_r+0x20>
 800d930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d932:	2b00      	cmp	r3, #0
 800d934:	dc02      	bgt.n	800d93c <__sflush_r+0x20>
 800d936:	2000      	movs	r0, #0
 800d938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d93c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d93e:	2e00      	cmp	r6, #0
 800d940:	d0f9      	beq.n	800d936 <__sflush_r+0x1a>
 800d942:	2300      	movs	r3, #0
 800d944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d948:	682f      	ldr	r7, [r5, #0]
 800d94a:	602b      	str	r3, [r5, #0]
 800d94c:	d032      	beq.n	800d9b4 <__sflush_r+0x98>
 800d94e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d950:	89a3      	ldrh	r3, [r4, #12]
 800d952:	075a      	lsls	r2, r3, #29
 800d954:	d505      	bpl.n	800d962 <__sflush_r+0x46>
 800d956:	6863      	ldr	r3, [r4, #4]
 800d958:	1ac0      	subs	r0, r0, r3
 800d95a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d95c:	b10b      	cbz	r3, 800d962 <__sflush_r+0x46>
 800d95e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d960:	1ac0      	subs	r0, r0, r3
 800d962:	2300      	movs	r3, #0
 800d964:	4602      	mov	r2, r0
 800d966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d968:	6a21      	ldr	r1, [r4, #32]
 800d96a:	4628      	mov	r0, r5
 800d96c:	47b0      	blx	r6
 800d96e:	1c43      	adds	r3, r0, #1
 800d970:	89a3      	ldrh	r3, [r4, #12]
 800d972:	d106      	bne.n	800d982 <__sflush_r+0x66>
 800d974:	6829      	ldr	r1, [r5, #0]
 800d976:	291d      	cmp	r1, #29
 800d978:	d82c      	bhi.n	800d9d4 <__sflush_r+0xb8>
 800d97a:	4a2a      	ldr	r2, [pc, #168]	; (800da24 <__sflush_r+0x108>)
 800d97c:	40ca      	lsrs	r2, r1
 800d97e:	07d6      	lsls	r6, r2, #31
 800d980:	d528      	bpl.n	800d9d4 <__sflush_r+0xb8>
 800d982:	2200      	movs	r2, #0
 800d984:	6062      	str	r2, [r4, #4]
 800d986:	04d9      	lsls	r1, r3, #19
 800d988:	6922      	ldr	r2, [r4, #16]
 800d98a:	6022      	str	r2, [r4, #0]
 800d98c:	d504      	bpl.n	800d998 <__sflush_r+0x7c>
 800d98e:	1c42      	adds	r2, r0, #1
 800d990:	d101      	bne.n	800d996 <__sflush_r+0x7a>
 800d992:	682b      	ldr	r3, [r5, #0]
 800d994:	b903      	cbnz	r3, 800d998 <__sflush_r+0x7c>
 800d996:	6560      	str	r0, [r4, #84]	; 0x54
 800d998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d99a:	602f      	str	r7, [r5, #0]
 800d99c:	2900      	cmp	r1, #0
 800d99e:	d0ca      	beq.n	800d936 <__sflush_r+0x1a>
 800d9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9a4:	4299      	cmp	r1, r3
 800d9a6:	d002      	beq.n	800d9ae <__sflush_r+0x92>
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	f000 fd7f 	bl	800e4ac <_free_r>
 800d9ae:	2000      	movs	r0, #0
 800d9b0:	6360      	str	r0, [r4, #52]	; 0x34
 800d9b2:	e7c1      	b.n	800d938 <__sflush_r+0x1c>
 800d9b4:	6a21      	ldr	r1, [r4, #32]
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	47b0      	blx	r6
 800d9bc:	1c41      	adds	r1, r0, #1
 800d9be:	d1c7      	bne.n	800d950 <__sflush_r+0x34>
 800d9c0:	682b      	ldr	r3, [r5, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d0c4      	beq.n	800d950 <__sflush_r+0x34>
 800d9c6:	2b1d      	cmp	r3, #29
 800d9c8:	d001      	beq.n	800d9ce <__sflush_r+0xb2>
 800d9ca:	2b16      	cmp	r3, #22
 800d9cc:	d101      	bne.n	800d9d2 <__sflush_r+0xb6>
 800d9ce:	602f      	str	r7, [r5, #0]
 800d9d0:	e7b1      	b.n	800d936 <__sflush_r+0x1a>
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9d8:	81a3      	strh	r3, [r4, #12]
 800d9da:	e7ad      	b.n	800d938 <__sflush_r+0x1c>
 800d9dc:	690f      	ldr	r7, [r1, #16]
 800d9de:	2f00      	cmp	r7, #0
 800d9e0:	d0a9      	beq.n	800d936 <__sflush_r+0x1a>
 800d9e2:	0793      	lsls	r3, r2, #30
 800d9e4:	680e      	ldr	r6, [r1, #0]
 800d9e6:	bf08      	it	eq
 800d9e8:	694b      	ldreq	r3, [r1, #20]
 800d9ea:	600f      	str	r7, [r1, #0]
 800d9ec:	bf18      	it	ne
 800d9ee:	2300      	movne	r3, #0
 800d9f0:	eba6 0807 	sub.w	r8, r6, r7
 800d9f4:	608b      	str	r3, [r1, #8]
 800d9f6:	f1b8 0f00 	cmp.w	r8, #0
 800d9fa:	dd9c      	ble.n	800d936 <__sflush_r+0x1a>
 800d9fc:	6a21      	ldr	r1, [r4, #32]
 800d9fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da00:	4643      	mov	r3, r8
 800da02:	463a      	mov	r2, r7
 800da04:	4628      	mov	r0, r5
 800da06:	47b0      	blx	r6
 800da08:	2800      	cmp	r0, #0
 800da0a:	dc06      	bgt.n	800da1a <__sflush_r+0xfe>
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da12:	81a3      	strh	r3, [r4, #12]
 800da14:	f04f 30ff 	mov.w	r0, #4294967295
 800da18:	e78e      	b.n	800d938 <__sflush_r+0x1c>
 800da1a:	4407      	add	r7, r0
 800da1c:	eba8 0800 	sub.w	r8, r8, r0
 800da20:	e7e9      	b.n	800d9f6 <__sflush_r+0xda>
 800da22:	bf00      	nop
 800da24:	20400001 	.word	0x20400001

0800da28 <_fflush_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	690b      	ldr	r3, [r1, #16]
 800da2c:	4605      	mov	r5, r0
 800da2e:	460c      	mov	r4, r1
 800da30:	b913      	cbnz	r3, 800da38 <_fflush_r+0x10>
 800da32:	2500      	movs	r5, #0
 800da34:	4628      	mov	r0, r5
 800da36:	bd38      	pop	{r3, r4, r5, pc}
 800da38:	b118      	cbz	r0, 800da42 <_fflush_r+0x1a>
 800da3a:	6983      	ldr	r3, [r0, #24]
 800da3c:	b90b      	cbnz	r3, 800da42 <_fflush_r+0x1a>
 800da3e:	f000 f887 	bl	800db50 <__sinit>
 800da42:	4b14      	ldr	r3, [pc, #80]	; (800da94 <_fflush_r+0x6c>)
 800da44:	429c      	cmp	r4, r3
 800da46:	d11b      	bne.n	800da80 <_fflush_r+0x58>
 800da48:	686c      	ldr	r4, [r5, #4]
 800da4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0ef      	beq.n	800da32 <_fflush_r+0xa>
 800da52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da54:	07d0      	lsls	r0, r2, #31
 800da56:	d404      	bmi.n	800da62 <_fflush_r+0x3a>
 800da58:	0599      	lsls	r1, r3, #22
 800da5a:	d402      	bmi.n	800da62 <_fflush_r+0x3a>
 800da5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da5e:	f000 f91a 	bl	800dc96 <__retarget_lock_acquire_recursive>
 800da62:	4628      	mov	r0, r5
 800da64:	4621      	mov	r1, r4
 800da66:	f7ff ff59 	bl	800d91c <__sflush_r>
 800da6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da6c:	07da      	lsls	r2, r3, #31
 800da6e:	4605      	mov	r5, r0
 800da70:	d4e0      	bmi.n	800da34 <_fflush_r+0xc>
 800da72:	89a3      	ldrh	r3, [r4, #12]
 800da74:	059b      	lsls	r3, r3, #22
 800da76:	d4dd      	bmi.n	800da34 <_fflush_r+0xc>
 800da78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da7a:	f000 f90d 	bl	800dc98 <__retarget_lock_release_recursive>
 800da7e:	e7d9      	b.n	800da34 <_fflush_r+0xc>
 800da80:	4b05      	ldr	r3, [pc, #20]	; (800da98 <_fflush_r+0x70>)
 800da82:	429c      	cmp	r4, r3
 800da84:	d101      	bne.n	800da8a <_fflush_r+0x62>
 800da86:	68ac      	ldr	r4, [r5, #8]
 800da88:	e7df      	b.n	800da4a <_fflush_r+0x22>
 800da8a:	4b04      	ldr	r3, [pc, #16]	; (800da9c <_fflush_r+0x74>)
 800da8c:	429c      	cmp	r4, r3
 800da8e:	bf08      	it	eq
 800da90:	68ec      	ldreq	r4, [r5, #12]
 800da92:	e7da      	b.n	800da4a <_fflush_r+0x22>
 800da94:	0800ecfc 	.word	0x0800ecfc
 800da98:	0800ed1c 	.word	0x0800ed1c
 800da9c:	0800ecdc 	.word	0x0800ecdc

0800daa0 <std>:
 800daa0:	2300      	movs	r3, #0
 800daa2:	b510      	push	{r4, lr}
 800daa4:	4604      	mov	r4, r0
 800daa6:	e9c0 3300 	strd	r3, r3, [r0]
 800daaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800daae:	6083      	str	r3, [r0, #8]
 800dab0:	8181      	strh	r1, [r0, #12]
 800dab2:	6643      	str	r3, [r0, #100]	; 0x64
 800dab4:	81c2      	strh	r2, [r0, #14]
 800dab6:	6183      	str	r3, [r0, #24]
 800dab8:	4619      	mov	r1, r3
 800daba:	2208      	movs	r2, #8
 800dabc:	305c      	adds	r0, #92	; 0x5c
 800dabe:	f7fe fb9f 	bl	800c200 <memset>
 800dac2:	4b05      	ldr	r3, [pc, #20]	; (800dad8 <std+0x38>)
 800dac4:	6263      	str	r3, [r4, #36]	; 0x24
 800dac6:	4b05      	ldr	r3, [pc, #20]	; (800dadc <std+0x3c>)
 800dac8:	62a3      	str	r3, [r4, #40]	; 0x28
 800daca:	4b05      	ldr	r3, [pc, #20]	; (800dae0 <std+0x40>)
 800dacc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dace:	4b05      	ldr	r3, [pc, #20]	; (800dae4 <std+0x44>)
 800dad0:	6224      	str	r4, [r4, #32]
 800dad2:	6323      	str	r3, [r4, #48]	; 0x30
 800dad4:	bd10      	pop	{r4, pc}
 800dad6:	bf00      	nop
 800dad8:	0800e621 	.word	0x0800e621
 800dadc:	0800e643 	.word	0x0800e643
 800dae0:	0800e67b 	.word	0x0800e67b
 800dae4:	0800e69f 	.word	0x0800e69f

0800dae8 <_cleanup_r>:
 800dae8:	4901      	ldr	r1, [pc, #4]	; (800daf0 <_cleanup_r+0x8>)
 800daea:	f000 b8af 	b.w	800dc4c <_fwalk_reent>
 800daee:	bf00      	nop
 800daf0:	0800da29 	.word	0x0800da29

0800daf4 <__sfmoreglue>:
 800daf4:	b570      	push	{r4, r5, r6, lr}
 800daf6:	1e4a      	subs	r2, r1, #1
 800daf8:	2568      	movs	r5, #104	; 0x68
 800dafa:	4355      	muls	r5, r2
 800dafc:	460e      	mov	r6, r1
 800dafe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800db02:	f000 fd23 	bl	800e54c <_malloc_r>
 800db06:	4604      	mov	r4, r0
 800db08:	b140      	cbz	r0, 800db1c <__sfmoreglue+0x28>
 800db0a:	2100      	movs	r1, #0
 800db0c:	e9c0 1600 	strd	r1, r6, [r0]
 800db10:	300c      	adds	r0, #12
 800db12:	60a0      	str	r0, [r4, #8]
 800db14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db18:	f7fe fb72 	bl	800c200 <memset>
 800db1c:	4620      	mov	r0, r4
 800db1e:	bd70      	pop	{r4, r5, r6, pc}

0800db20 <__sfp_lock_acquire>:
 800db20:	4801      	ldr	r0, [pc, #4]	; (800db28 <__sfp_lock_acquire+0x8>)
 800db22:	f000 b8b8 	b.w	800dc96 <__retarget_lock_acquire_recursive>
 800db26:	bf00      	nop
 800db28:	24000528 	.word	0x24000528

0800db2c <__sfp_lock_release>:
 800db2c:	4801      	ldr	r0, [pc, #4]	; (800db34 <__sfp_lock_release+0x8>)
 800db2e:	f000 b8b3 	b.w	800dc98 <__retarget_lock_release_recursive>
 800db32:	bf00      	nop
 800db34:	24000528 	.word	0x24000528

0800db38 <__sinit_lock_acquire>:
 800db38:	4801      	ldr	r0, [pc, #4]	; (800db40 <__sinit_lock_acquire+0x8>)
 800db3a:	f000 b8ac 	b.w	800dc96 <__retarget_lock_acquire_recursive>
 800db3e:	bf00      	nop
 800db40:	24000523 	.word	0x24000523

0800db44 <__sinit_lock_release>:
 800db44:	4801      	ldr	r0, [pc, #4]	; (800db4c <__sinit_lock_release+0x8>)
 800db46:	f000 b8a7 	b.w	800dc98 <__retarget_lock_release_recursive>
 800db4a:	bf00      	nop
 800db4c:	24000523 	.word	0x24000523

0800db50 <__sinit>:
 800db50:	b510      	push	{r4, lr}
 800db52:	4604      	mov	r4, r0
 800db54:	f7ff fff0 	bl	800db38 <__sinit_lock_acquire>
 800db58:	69a3      	ldr	r3, [r4, #24]
 800db5a:	b11b      	cbz	r3, 800db64 <__sinit+0x14>
 800db5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db60:	f7ff bff0 	b.w	800db44 <__sinit_lock_release>
 800db64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db68:	6523      	str	r3, [r4, #80]	; 0x50
 800db6a:	4b13      	ldr	r3, [pc, #76]	; (800dbb8 <__sinit+0x68>)
 800db6c:	4a13      	ldr	r2, [pc, #76]	; (800dbbc <__sinit+0x6c>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	62a2      	str	r2, [r4, #40]	; 0x28
 800db72:	42a3      	cmp	r3, r4
 800db74:	bf04      	itt	eq
 800db76:	2301      	moveq	r3, #1
 800db78:	61a3      	streq	r3, [r4, #24]
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 f820 	bl	800dbc0 <__sfp>
 800db80:	6060      	str	r0, [r4, #4]
 800db82:	4620      	mov	r0, r4
 800db84:	f000 f81c 	bl	800dbc0 <__sfp>
 800db88:	60a0      	str	r0, [r4, #8]
 800db8a:	4620      	mov	r0, r4
 800db8c:	f000 f818 	bl	800dbc0 <__sfp>
 800db90:	2200      	movs	r2, #0
 800db92:	60e0      	str	r0, [r4, #12]
 800db94:	2104      	movs	r1, #4
 800db96:	6860      	ldr	r0, [r4, #4]
 800db98:	f7ff ff82 	bl	800daa0 <std>
 800db9c:	68a0      	ldr	r0, [r4, #8]
 800db9e:	2201      	movs	r2, #1
 800dba0:	2109      	movs	r1, #9
 800dba2:	f7ff ff7d 	bl	800daa0 <std>
 800dba6:	68e0      	ldr	r0, [r4, #12]
 800dba8:	2202      	movs	r2, #2
 800dbaa:	2112      	movs	r1, #18
 800dbac:	f7ff ff78 	bl	800daa0 <std>
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	61a3      	str	r3, [r4, #24]
 800dbb4:	e7d2      	b.n	800db5c <__sinit+0xc>
 800dbb6:	bf00      	nop
 800dbb8:	0800ec10 	.word	0x0800ec10
 800dbbc:	0800dae9 	.word	0x0800dae9

0800dbc0 <__sfp>:
 800dbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc2:	4607      	mov	r7, r0
 800dbc4:	f7ff ffac 	bl	800db20 <__sfp_lock_acquire>
 800dbc8:	4b1e      	ldr	r3, [pc, #120]	; (800dc44 <__sfp+0x84>)
 800dbca:	681e      	ldr	r6, [r3, #0]
 800dbcc:	69b3      	ldr	r3, [r6, #24]
 800dbce:	b913      	cbnz	r3, 800dbd6 <__sfp+0x16>
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	f7ff ffbd 	bl	800db50 <__sinit>
 800dbd6:	3648      	adds	r6, #72	; 0x48
 800dbd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	d503      	bpl.n	800dbe8 <__sfp+0x28>
 800dbe0:	6833      	ldr	r3, [r6, #0]
 800dbe2:	b30b      	cbz	r3, 800dc28 <__sfp+0x68>
 800dbe4:	6836      	ldr	r6, [r6, #0]
 800dbe6:	e7f7      	b.n	800dbd8 <__sfp+0x18>
 800dbe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dbec:	b9d5      	cbnz	r5, 800dc24 <__sfp+0x64>
 800dbee:	4b16      	ldr	r3, [pc, #88]	; (800dc48 <__sfp+0x88>)
 800dbf0:	60e3      	str	r3, [r4, #12]
 800dbf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dbf6:	6665      	str	r5, [r4, #100]	; 0x64
 800dbf8:	f000 f84c 	bl	800dc94 <__retarget_lock_init_recursive>
 800dbfc:	f7ff ff96 	bl	800db2c <__sfp_lock_release>
 800dc00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dc04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dc08:	6025      	str	r5, [r4, #0]
 800dc0a:	61a5      	str	r5, [r4, #24]
 800dc0c:	2208      	movs	r2, #8
 800dc0e:	4629      	mov	r1, r5
 800dc10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc14:	f7fe faf4 	bl	800c200 <memset>
 800dc18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc20:	4620      	mov	r0, r4
 800dc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc24:	3468      	adds	r4, #104	; 0x68
 800dc26:	e7d9      	b.n	800dbdc <__sfp+0x1c>
 800dc28:	2104      	movs	r1, #4
 800dc2a:	4638      	mov	r0, r7
 800dc2c:	f7ff ff62 	bl	800daf4 <__sfmoreglue>
 800dc30:	4604      	mov	r4, r0
 800dc32:	6030      	str	r0, [r6, #0]
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d1d5      	bne.n	800dbe4 <__sfp+0x24>
 800dc38:	f7ff ff78 	bl	800db2c <__sfp_lock_release>
 800dc3c:	230c      	movs	r3, #12
 800dc3e:	603b      	str	r3, [r7, #0]
 800dc40:	e7ee      	b.n	800dc20 <__sfp+0x60>
 800dc42:	bf00      	nop
 800dc44:	0800ec10 	.word	0x0800ec10
 800dc48:	ffff0001 	.word	0xffff0001

0800dc4c <_fwalk_reent>:
 800dc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc50:	4606      	mov	r6, r0
 800dc52:	4688      	mov	r8, r1
 800dc54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc58:	2700      	movs	r7, #0
 800dc5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc5e:	f1b9 0901 	subs.w	r9, r9, #1
 800dc62:	d505      	bpl.n	800dc70 <_fwalk_reent+0x24>
 800dc64:	6824      	ldr	r4, [r4, #0]
 800dc66:	2c00      	cmp	r4, #0
 800dc68:	d1f7      	bne.n	800dc5a <_fwalk_reent+0xe>
 800dc6a:	4638      	mov	r0, r7
 800dc6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc70:	89ab      	ldrh	r3, [r5, #12]
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d907      	bls.n	800dc86 <_fwalk_reent+0x3a>
 800dc76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	d003      	beq.n	800dc86 <_fwalk_reent+0x3a>
 800dc7e:	4629      	mov	r1, r5
 800dc80:	4630      	mov	r0, r6
 800dc82:	47c0      	blx	r8
 800dc84:	4307      	orrs	r7, r0
 800dc86:	3568      	adds	r5, #104	; 0x68
 800dc88:	e7e9      	b.n	800dc5e <_fwalk_reent+0x12>
	...

0800dc8c <_localeconv_r>:
 800dc8c:	4800      	ldr	r0, [pc, #0]	; (800dc90 <_localeconv_r+0x4>)
 800dc8e:	4770      	bx	lr
 800dc90:	24000170 	.word	0x24000170

0800dc94 <__retarget_lock_init_recursive>:
 800dc94:	4770      	bx	lr

0800dc96 <__retarget_lock_acquire_recursive>:
 800dc96:	4770      	bx	lr

0800dc98 <__retarget_lock_release_recursive>:
 800dc98:	4770      	bx	lr

0800dc9a <__swhatbuf_r>:
 800dc9a:	b570      	push	{r4, r5, r6, lr}
 800dc9c:	460e      	mov	r6, r1
 800dc9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dca2:	2900      	cmp	r1, #0
 800dca4:	b096      	sub	sp, #88	; 0x58
 800dca6:	4614      	mov	r4, r2
 800dca8:	461d      	mov	r5, r3
 800dcaa:	da07      	bge.n	800dcbc <__swhatbuf_r+0x22>
 800dcac:	2300      	movs	r3, #0
 800dcae:	602b      	str	r3, [r5, #0]
 800dcb0:	89b3      	ldrh	r3, [r6, #12]
 800dcb2:	061a      	lsls	r2, r3, #24
 800dcb4:	d410      	bmi.n	800dcd8 <__swhatbuf_r+0x3e>
 800dcb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcba:	e00e      	b.n	800dcda <__swhatbuf_r+0x40>
 800dcbc:	466a      	mov	r2, sp
 800dcbe:	f000 fd45 	bl	800e74c <_fstat_r>
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	dbf2      	blt.n	800dcac <__swhatbuf_r+0x12>
 800dcc6:	9a01      	ldr	r2, [sp, #4]
 800dcc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dccc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dcd0:	425a      	negs	r2, r3
 800dcd2:	415a      	adcs	r2, r3
 800dcd4:	602a      	str	r2, [r5, #0]
 800dcd6:	e7ee      	b.n	800dcb6 <__swhatbuf_r+0x1c>
 800dcd8:	2340      	movs	r3, #64	; 0x40
 800dcda:	2000      	movs	r0, #0
 800dcdc:	6023      	str	r3, [r4, #0]
 800dcde:	b016      	add	sp, #88	; 0x58
 800dce0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dce4 <__smakebuf_r>:
 800dce4:	898b      	ldrh	r3, [r1, #12]
 800dce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dce8:	079d      	lsls	r5, r3, #30
 800dcea:	4606      	mov	r6, r0
 800dcec:	460c      	mov	r4, r1
 800dcee:	d507      	bpl.n	800dd00 <__smakebuf_r+0x1c>
 800dcf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dcf4:	6023      	str	r3, [r4, #0]
 800dcf6:	6123      	str	r3, [r4, #16]
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	6163      	str	r3, [r4, #20]
 800dcfc:	b002      	add	sp, #8
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}
 800dd00:	ab01      	add	r3, sp, #4
 800dd02:	466a      	mov	r2, sp
 800dd04:	f7ff ffc9 	bl	800dc9a <__swhatbuf_r>
 800dd08:	9900      	ldr	r1, [sp, #0]
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	f000 fc1d 	bl	800e54c <_malloc_r>
 800dd12:	b948      	cbnz	r0, 800dd28 <__smakebuf_r+0x44>
 800dd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd18:	059a      	lsls	r2, r3, #22
 800dd1a:	d4ef      	bmi.n	800dcfc <__smakebuf_r+0x18>
 800dd1c:	f023 0303 	bic.w	r3, r3, #3
 800dd20:	f043 0302 	orr.w	r3, r3, #2
 800dd24:	81a3      	strh	r3, [r4, #12]
 800dd26:	e7e3      	b.n	800dcf0 <__smakebuf_r+0xc>
 800dd28:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <__smakebuf_r+0x7c>)
 800dd2a:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd2c:	89a3      	ldrh	r3, [r4, #12]
 800dd2e:	6020      	str	r0, [r4, #0]
 800dd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd34:	81a3      	strh	r3, [r4, #12]
 800dd36:	9b00      	ldr	r3, [sp, #0]
 800dd38:	6163      	str	r3, [r4, #20]
 800dd3a:	9b01      	ldr	r3, [sp, #4]
 800dd3c:	6120      	str	r0, [r4, #16]
 800dd3e:	b15b      	cbz	r3, 800dd58 <__smakebuf_r+0x74>
 800dd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd44:	4630      	mov	r0, r6
 800dd46:	f000 fd13 	bl	800e770 <_isatty_r>
 800dd4a:	b128      	cbz	r0, 800dd58 <__smakebuf_r+0x74>
 800dd4c:	89a3      	ldrh	r3, [r4, #12]
 800dd4e:	f023 0303 	bic.w	r3, r3, #3
 800dd52:	f043 0301 	orr.w	r3, r3, #1
 800dd56:	81a3      	strh	r3, [r4, #12]
 800dd58:	89a0      	ldrh	r0, [r4, #12]
 800dd5a:	4305      	orrs	r5, r0
 800dd5c:	81a5      	strh	r5, [r4, #12]
 800dd5e:	e7cd      	b.n	800dcfc <__smakebuf_r+0x18>
 800dd60:	0800dae9 	.word	0x0800dae9

0800dd64 <malloc>:
 800dd64:	4b02      	ldr	r3, [pc, #8]	; (800dd70 <malloc+0xc>)
 800dd66:	4601      	mov	r1, r0
 800dd68:	6818      	ldr	r0, [r3, #0]
 800dd6a:	f000 bbef 	b.w	800e54c <_malloc_r>
 800dd6e:	bf00      	nop
 800dd70:	2400001c 	.word	0x2400001c

0800dd74 <memcpy>:
 800dd74:	440a      	add	r2, r1
 800dd76:	4291      	cmp	r1, r2
 800dd78:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd7c:	d100      	bne.n	800dd80 <memcpy+0xc>
 800dd7e:	4770      	bx	lr
 800dd80:	b510      	push	{r4, lr}
 800dd82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd8a:	4291      	cmp	r1, r2
 800dd8c:	d1f9      	bne.n	800dd82 <memcpy+0xe>
 800dd8e:	bd10      	pop	{r4, pc}

0800dd90 <_Balloc>:
 800dd90:	b570      	push	{r4, r5, r6, lr}
 800dd92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd94:	4604      	mov	r4, r0
 800dd96:	460d      	mov	r5, r1
 800dd98:	b976      	cbnz	r6, 800ddb8 <_Balloc+0x28>
 800dd9a:	2010      	movs	r0, #16
 800dd9c:	f7ff ffe2 	bl	800dd64 <malloc>
 800dda0:	4602      	mov	r2, r0
 800dda2:	6260      	str	r0, [r4, #36]	; 0x24
 800dda4:	b920      	cbnz	r0, 800ddb0 <_Balloc+0x20>
 800dda6:	4b18      	ldr	r3, [pc, #96]	; (800de08 <_Balloc+0x78>)
 800dda8:	4818      	ldr	r0, [pc, #96]	; (800de0c <_Balloc+0x7c>)
 800ddaa:	2166      	movs	r1, #102	; 0x66
 800ddac:	f000 fc8e 	bl	800e6cc <__assert_func>
 800ddb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ddb4:	6006      	str	r6, [r0, #0]
 800ddb6:	60c6      	str	r6, [r0, #12]
 800ddb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ddba:	68f3      	ldr	r3, [r6, #12]
 800ddbc:	b183      	cbz	r3, 800dde0 <_Balloc+0x50>
 800ddbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddc6:	b9b8      	cbnz	r0, 800ddf8 <_Balloc+0x68>
 800ddc8:	2101      	movs	r1, #1
 800ddca:	fa01 f605 	lsl.w	r6, r1, r5
 800ddce:	1d72      	adds	r2, r6, #5
 800ddd0:	0092      	lsls	r2, r2, #2
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 fb5a 	bl	800e48c <_calloc_r>
 800ddd8:	b160      	cbz	r0, 800ddf4 <_Balloc+0x64>
 800ddda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddde:	e00e      	b.n	800ddfe <_Balloc+0x6e>
 800dde0:	2221      	movs	r2, #33	; 0x21
 800dde2:	2104      	movs	r1, #4
 800dde4:	4620      	mov	r0, r4
 800dde6:	f000 fb51 	bl	800e48c <_calloc_r>
 800ddea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddec:	60f0      	str	r0, [r6, #12]
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d1e4      	bne.n	800ddbe <_Balloc+0x2e>
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	bd70      	pop	{r4, r5, r6, pc}
 800ddf8:	6802      	ldr	r2, [r0, #0]
 800ddfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ddfe:	2300      	movs	r3, #0
 800de00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de04:	e7f7      	b.n	800ddf6 <_Balloc+0x66>
 800de06:	bf00      	nop
 800de08:	0800ec55 	.word	0x0800ec55
 800de0c:	0800ed3c 	.word	0x0800ed3c

0800de10 <_Bfree>:
 800de10:	b570      	push	{r4, r5, r6, lr}
 800de12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de14:	4605      	mov	r5, r0
 800de16:	460c      	mov	r4, r1
 800de18:	b976      	cbnz	r6, 800de38 <_Bfree+0x28>
 800de1a:	2010      	movs	r0, #16
 800de1c:	f7ff ffa2 	bl	800dd64 <malloc>
 800de20:	4602      	mov	r2, r0
 800de22:	6268      	str	r0, [r5, #36]	; 0x24
 800de24:	b920      	cbnz	r0, 800de30 <_Bfree+0x20>
 800de26:	4b09      	ldr	r3, [pc, #36]	; (800de4c <_Bfree+0x3c>)
 800de28:	4809      	ldr	r0, [pc, #36]	; (800de50 <_Bfree+0x40>)
 800de2a:	218a      	movs	r1, #138	; 0x8a
 800de2c:	f000 fc4e 	bl	800e6cc <__assert_func>
 800de30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de34:	6006      	str	r6, [r0, #0]
 800de36:	60c6      	str	r6, [r0, #12]
 800de38:	b13c      	cbz	r4, 800de4a <_Bfree+0x3a>
 800de3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800de3c:	6862      	ldr	r2, [r4, #4]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de44:	6021      	str	r1, [r4, #0]
 800de46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de4a:	bd70      	pop	{r4, r5, r6, pc}
 800de4c:	0800ec55 	.word	0x0800ec55
 800de50:	0800ed3c 	.word	0x0800ed3c

0800de54 <__multadd>:
 800de54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de58:	690e      	ldr	r6, [r1, #16]
 800de5a:	4607      	mov	r7, r0
 800de5c:	4698      	mov	r8, r3
 800de5e:	460c      	mov	r4, r1
 800de60:	f101 0014 	add.w	r0, r1, #20
 800de64:	2300      	movs	r3, #0
 800de66:	6805      	ldr	r5, [r0, #0]
 800de68:	b2a9      	uxth	r1, r5
 800de6a:	fb02 8101 	mla	r1, r2, r1, r8
 800de6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800de72:	0c2d      	lsrs	r5, r5, #16
 800de74:	fb02 c505 	mla	r5, r2, r5, ip
 800de78:	b289      	uxth	r1, r1
 800de7a:	3301      	adds	r3, #1
 800de7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800de80:	429e      	cmp	r6, r3
 800de82:	f840 1b04 	str.w	r1, [r0], #4
 800de86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800de8a:	dcec      	bgt.n	800de66 <__multadd+0x12>
 800de8c:	f1b8 0f00 	cmp.w	r8, #0
 800de90:	d022      	beq.n	800ded8 <__multadd+0x84>
 800de92:	68a3      	ldr	r3, [r4, #8]
 800de94:	42b3      	cmp	r3, r6
 800de96:	dc19      	bgt.n	800decc <__multadd+0x78>
 800de98:	6861      	ldr	r1, [r4, #4]
 800de9a:	4638      	mov	r0, r7
 800de9c:	3101      	adds	r1, #1
 800de9e:	f7ff ff77 	bl	800dd90 <_Balloc>
 800dea2:	4605      	mov	r5, r0
 800dea4:	b928      	cbnz	r0, 800deb2 <__multadd+0x5e>
 800dea6:	4602      	mov	r2, r0
 800dea8:	4b0d      	ldr	r3, [pc, #52]	; (800dee0 <__multadd+0x8c>)
 800deaa:	480e      	ldr	r0, [pc, #56]	; (800dee4 <__multadd+0x90>)
 800deac:	21b5      	movs	r1, #181	; 0xb5
 800deae:	f000 fc0d 	bl	800e6cc <__assert_func>
 800deb2:	6922      	ldr	r2, [r4, #16]
 800deb4:	3202      	adds	r2, #2
 800deb6:	f104 010c 	add.w	r1, r4, #12
 800deba:	0092      	lsls	r2, r2, #2
 800debc:	300c      	adds	r0, #12
 800debe:	f7ff ff59 	bl	800dd74 <memcpy>
 800dec2:	4621      	mov	r1, r4
 800dec4:	4638      	mov	r0, r7
 800dec6:	f7ff ffa3 	bl	800de10 <_Bfree>
 800deca:	462c      	mov	r4, r5
 800decc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ded0:	3601      	adds	r6, #1
 800ded2:	f8c3 8014 	str.w	r8, [r3, #20]
 800ded6:	6126      	str	r6, [r4, #16]
 800ded8:	4620      	mov	r0, r4
 800deda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dede:	bf00      	nop
 800dee0:	0800eccb 	.word	0x0800eccb
 800dee4:	0800ed3c 	.word	0x0800ed3c

0800dee8 <__hi0bits>:
 800dee8:	0c03      	lsrs	r3, r0, #16
 800deea:	041b      	lsls	r3, r3, #16
 800deec:	b9d3      	cbnz	r3, 800df24 <__hi0bits+0x3c>
 800deee:	0400      	lsls	r0, r0, #16
 800def0:	2310      	movs	r3, #16
 800def2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800def6:	bf04      	itt	eq
 800def8:	0200      	lsleq	r0, r0, #8
 800defa:	3308      	addeq	r3, #8
 800defc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800df00:	bf04      	itt	eq
 800df02:	0100      	lsleq	r0, r0, #4
 800df04:	3304      	addeq	r3, #4
 800df06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800df0a:	bf04      	itt	eq
 800df0c:	0080      	lsleq	r0, r0, #2
 800df0e:	3302      	addeq	r3, #2
 800df10:	2800      	cmp	r0, #0
 800df12:	db05      	blt.n	800df20 <__hi0bits+0x38>
 800df14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df18:	f103 0301 	add.w	r3, r3, #1
 800df1c:	bf08      	it	eq
 800df1e:	2320      	moveq	r3, #32
 800df20:	4618      	mov	r0, r3
 800df22:	4770      	bx	lr
 800df24:	2300      	movs	r3, #0
 800df26:	e7e4      	b.n	800def2 <__hi0bits+0xa>

0800df28 <__lo0bits>:
 800df28:	6803      	ldr	r3, [r0, #0]
 800df2a:	f013 0207 	ands.w	r2, r3, #7
 800df2e:	4601      	mov	r1, r0
 800df30:	d00b      	beq.n	800df4a <__lo0bits+0x22>
 800df32:	07da      	lsls	r2, r3, #31
 800df34:	d424      	bmi.n	800df80 <__lo0bits+0x58>
 800df36:	0798      	lsls	r0, r3, #30
 800df38:	bf49      	itett	mi
 800df3a:	085b      	lsrmi	r3, r3, #1
 800df3c:	089b      	lsrpl	r3, r3, #2
 800df3e:	2001      	movmi	r0, #1
 800df40:	600b      	strmi	r3, [r1, #0]
 800df42:	bf5c      	itt	pl
 800df44:	600b      	strpl	r3, [r1, #0]
 800df46:	2002      	movpl	r0, #2
 800df48:	4770      	bx	lr
 800df4a:	b298      	uxth	r0, r3
 800df4c:	b9b0      	cbnz	r0, 800df7c <__lo0bits+0x54>
 800df4e:	0c1b      	lsrs	r3, r3, #16
 800df50:	2010      	movs	r0, #16
 800df52:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df56:	bf04      	itt	eq
 800df58:	0a1b      	lsreq	r3, r3, #8
 800df5a:	3008      	addeq	r0, #8
 800df5c:	071a      	lsls	r2, r3, #28
 800df5e:	bf04      	itt	eq
 800df60:	091b      	lsreq	r3, r3, #4
 800df62:	3004      	addeq	r0, #4
 800df64:	079a      	lsls	r2, r3, #30
 800df66:	bf04      	itt	eq
 800df68:	089b      	lsreq	r3, r3, #2
 800df6a:	3002      	addeq	r0, #2
 800df6c:	07da      	lsls	r2, r3, #31
 800df6e:	d403      	bmi.n	800df78 <__lo0bits+0x50>
 800df70:	085b      	lsrs	r3, r3, #1
 800df72:	f100 0001 	add.w	r0, r0, #1
 800df76:	d005      	beq.n	800df84 <__lo0bits+0x5c>
 800df78:	600b      	str	r3, [r1, #0]
 800df7a:	4770      	bx	lr
 800df7c:	4610      	mov	r0, r2
 800df7e:	e7e8      	b.n	800df52 <__lo0bits+0x2a>
 800df80:	2000      	movs	r0, #0
 800df82:	4770      	bx	lr
 800df84:	2020      	movs	r0, #32
 800df86:	4770      	bx	lr

0800df88 <__i2b>:
 800df88:	b510      	push	{r4, lr}
 800df8a:	460c      	mov	r4, r1
 800df8c:	2101      	movs	r1, #1
 800df8e:	f7ff feff 	bl	800dd90 <_Balloc>
 800df92:	4602      	mov	r2, r0
 800df94:	b928      	cbnz	r0, 800dfa2 <__i2b+0x1a>
 800df96:	4b05      	ldr	r3, [pc, #20]	; (800dfac <__i2b+0x24>)
 800df98:	4805      	ldr	r0, [pc, #20]	; (800dfb0 <__i2b+0x28>)
 800df9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800df9e:	f000 fb95 	bl	800e6cc <__assert_func>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	6144      	str	r4, [r0, #20]
 800dfa6:	6103      	str	r3, [r0, #16]
 800dfa8:	bd10      	pop	{r4, pc}
 800dfaa:	bf00      	nop
 800dfac:	0800eccb 	.word	0x0800eccb
 800dfb0:	0800ed3c 	.word	0x0800ed3c

0800dfb4 <__multiply>:
 800dfb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb8:	4614      	mov	r4, r2
 800dfba:	690a      	ldr	r2, [r1, #16]
 800dfbc:	6923      	ldr	r3, [r4, #16]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	bfb8      	it	lt
 800dfc2:	460b      	movlt	r3, r1
 800dfc4:	460d      	mov	r5, r1
 800dfc6:	bfbc      	itt	lt
 800dfc8:	4625      	movlt	r5, r4
 800dfca:	461c      	movlt	r4, r3
 800dfcc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dfd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dfd4:	68ab      	ldr	r3, [r5, #8]
 800dfd6:	6869      	ldr	r1, [r5, #4]
 800dfd8:	eb0a 0709 	add.w	r7, sl, r9
 800dfdc:	42bb      	cmp	r3, r7
 800dfde:	b085      	sub	sp, #20
 800dfe0:	bfb8      	it	lt
 800dfe2:	3101      	addlt	r1, #1
 800dfe4:	f7ff fed4 	bl	800dd90 <_Balloc>
 800dfe8:	b930      	cbnz	r0, 800dff8 <__multiply+0x44>
 800dfea:	4602      	mov	r2, r0
 800dfec:	4b42      	ldr	r3, [pc, #264]	; (800e0f8 <__multiply+0x144>)
 800dfee:	4843      	ldr	r0, [pc, #268]	; (800e0fc <__multiply+0x148>)
 800dff0:	f240 115d 	movw	r1, #349	; 0x15d
 800dff4:	f000 fb6a 	bl	800e6cc <__assert_func>
 800dff8:	f100 0614 	add.w	r6, r0, #20
 800dffc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e000:	4633      	mov	r3, r6
 800e002:	2200      	movs	r2, #0
 800e004:	4543      	cmp	r3, r8
 800e006:	d31e      	bcc.n	800e046 <__multiply+0x92>
 800e008:	f105 0c14 	add.w	ip, r5, #20
 800e00c:	f104 0314 	add.w	r3, r4, #20
 800e010:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e014:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e018:	9202      	str	r2, [sp, #8]
 800e01a:	ebac 0205 	sub.w	r2, ip, r5
 800e01e:	3a15      	subs	r2, #21
 800e020:	f022 0203 	bic.w	r2, r2, #3
 800e024:	3204      	adds	r2, #4
 800e026:	f105 0115 	add.w	r1, r5, #21
 800e02a:	458c      	cmp	ip, r1
 800e02c:	bf38      	it	cc
 800e02e:	2204      	movcc	r2, #4
 800e030:	9201      	str	r2, [sp, #4]
 800e032:	9a02      	ldr	r2, [sp, #8]
 800e034:	9303      	str	r3, [sp, #12]
 800e036:	429a      	cmp	r2, r3
 800e038:	d808      	bhi.n	800e04c <__multiply+0x98>
 800e03a:	2f00      	cmp	r7, #0
 800e03c:	dc55      	bgt.n	800e0ea <__multiply+0x136>
 800e03e:	6107      	str	r7, [r0, #16]
 800e040:	b005      	add	sp, #20
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	f843 2b04 	str.w	r2, [r3], #4
 800e04a:	e7db      	b.n	800e004 <__multiply+0x50>
 800e04c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e050:	f1ba 0f00 	cmp.w	sl, #0
 800e054:	d020      	beq.n	800e098 <__multiply+0xe4>
 800e056:	f105 0e14 	add.w	lr, r5, #20
 800e05a:	46b1      	mov	r9, r6
 800e05c:	2200      	movs	r2, #0
 800e05e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e062:	f8d9 b000 	ldr.w	fp, [r9]
 800e066:	b2a1      	uxth	r1, r4
 800e068:	fa1f fb8b 	uxth.w	fp, fp
 800e06c:	fb0a b101 	mla	r1, sl, r1, fp
 800e070:	4411      	add	r1, r2
 800e072:	f8d9 2000 	ldr.w	r2, [r9]
 800e076:	0c24      	lsrs	r4, r4, #16
 800e078:	0c12      	lsrs	r2, r2, #16
 800e07a:	fb0a 2404 	mla	r4, sl, r4, r2
 800e07e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e082:	b289      	uxth	r1, r1
 800e084:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e088:	45f4      	cmp	ip, lr
 800e08a:	f849 1b04 	str.w	r1, [r9], #4
 800e08e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e092:	d8e4      	bhi.n	800e05e <__multiply+0xaa>
 800e094:	9901      	ldr	r1, [sp, #4]
 800e096:	5072      	str	r2, [r6, r1]
 800e098:	9a03      	ldr	r2, [sp, #12]
 800e09a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	f1b9 0f00 	cmp.w	r9, #0
 800e0a4:	d01f      	beq.n	800e0e6 <__multiply+0x132>
 800e0a6:	6834      	ldr	r4, [r6, #0]
 800e0a8:	f105 0114 	add.w	r1, r5, #20
 800e0ac:	46b6      	mov	lr, r6
 800e0ae:	f04f 0a00 	mov.w	sl, #0
 800e0b2:	880a      	ldrh	r2, [r1, #0]
 800e0b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e0b8:	fb09 b202 	mla	r2, r9, r2, fp
 800e0bc:	4492      	add	sl, r2
 800e0be:	b2a4      	uxth	r4, r4
 800e0c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e0c4:	f84e 4b04 	str.w	r4, [lr], #4
 800e0c8:	f851 4b04 	ldr.w	r4, [r1], #4
 800e0cc:	f8be 2000 	ldrh.w	r2, [lr]
 800e0d0:	0c24      	lsrs	r4, r4, #16
 800e0d2:	fb09 2404 	mla	r4, r9, r4, r2
 800e0d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e0da:	458c      	cmp	ip, r1
 800e0dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e0e0:	d8e7      	bhi.n	800e0b2 <__multiply+0xfe>
 800e0e2:	9a01      	ldr	r2, [sp, #4]
 800e0e4:	50b4      	str	r4, [r6, r2]
 800e0e6:	3604      	adds	r6, #4
 800e0e8:	e7a3      	b.n	800e032 <__multiply+0x7e>
 800e0ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1a5      	bne.n	800e03e <__multiply+0x8a>
 800e0f2:	3f01      	subs	r7, #1
 800e0f4:	e7a1      	b.n	800e03a <__multiply+0x86>
 800e0f6:	bf00      	nop
 800e0f8:	0800eccb 	.word	0x0800eccb
 800e0fc:	0800ed3c 	.word	0x0800ed3c

0800e100 <__pow5mult>:
 800e100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e104:	4615      	mov	r5, r2
 800e106:	f012 0203 	ands.w	r2, r2, #3
 800e10a:	4606      	mov	r6, r0
 800e10c:	460f      	mov	r7, r1
 800e10e:	d007      	beq.n	800e120 <__pow5mult+0x20>
 800e110:	4c25      	ldr	r4, [pc, #148]	; (800e1a8 <__pow5mult+0xa8>)
 800e112:	3a01      	subs	r2, #1
 800e114:	2300      	movs	r3, #0
 800e116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e11a:	f7ff fe9b 	bl	800de54 <__multadd>
 800e11e:	4607      	mov	r7, r0
 800e120:	10ad      	asrs	r5, r5, #2
 800e122:	d03d      	beq.n	800e1a0 <__pow5mult+0xa0>
 800e124:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e126:	b97c      	cbnz	r4, 800e148 <__pow5mult+0x48>
 800e128:	2010      	movs	r0, #16
 800e12a:	f7ff fe1b 	bl	800dd64 <malloc>
 800e12e:	4602      	mov	r2, r0
 800e130:	6270      	str	r0, [r6, #36]	; 0x24
 800e132:	b928      	cbnz	r0, 800e140 <__pow5mult+0x40>
 800e134:	4b1d      	ldr	r3, [pc, #116]	; (800e1ac <__pow5mult+0xac>)
 800e136:	481e      	ldr	r0, [pc, #120]	; (800e1b0 <__pow5mult+0xb0>)
 800e138:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e13c:	f000 fac6 	bl	800e6cc <__assert_func>
 800e140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e144:	6004      	str	r4, [r0, #0]
 800e146:	60c4      	str	r4, [r0, #12]
 800e148:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e14c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e150:	b94c      	cbnz	r4, 800e166 <__pow5mult+0x66>
 800e152:	f240 2171 	movw	r1, #625	; 0x271
 800e156:	4630      	mov	r0, r6
 800e158:	f7ff ff16 	bl	800df88 <__i2b>
 800e15c:	2300      	movs	r3, #0
 800e15e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e162:	4604      	mov	r4, r0
 800e164:	6003      	str	r3, [r0, #0]
 800e166:	f04f 0900 	mov.w	r9, #0
 800e16a:	07eb      	lsls	r3, r5, #31
 800e16c:	d50a      	bpl.n	800e184 <__pow5mult+0x84>
 800e16e:	4639      	mov	r1, r7
 800e170:	4622      	mov	r2, r4
 800e172:	4630      	mov	r0, r6
 800e174:	f7ff ff1e 	bl	800dfb4 <__multiply>
 800e178:	4639      	mov	r1, r7
 800e17a:	4680      	mov	r8, r0
 800e17c:	4630      	mov	r0, r6
 800e17e:	f7ff fe47 	bl	800de10 <_Bfree>
 800e182:	4647      	mov	r7, r8
 800e184:	106d      	asrs	r5, r5, #1
 800e186:	d00b      	beq.n	800e1a0 <__pow5mult+0xa0>
 800e188:	6820      	ldr	r0, [r4, #0]
 800e18a:	b938      	cbnz	r0, 800e19c <__pow5mult+0x9c>
 800e18c:	4622      	mov	r2, r4
 800e18e:	4621      	mov	r1, r4
 800e190:	4630      	mov	r0, r6
 800e192:	f7ff ff0f 	bl	800dfb4 <__multiply>
 800e196:	6020      	str	r0, [r4, #0]
 800e198:	f8c0 9000 	str.w	r9, [r0]
 800e19c:	4604      	mov	r4, r0
 800e19e:	e7e4      	b.n	800e16a <__pow5mult+0x6a>
 800e1a0:	4638      	mov	r0, r7
 800e1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1a6:	bf00      	nop
 800e1a8:	0800ee90 	.word	0x0800ee90
 800e1ac:	0800ec55 	.word	0x0800ec55
 800e1b0:	0800ed3c 	.word	0x0800ed3c

0800e1b4 <__lshift>:
 800e1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1b8:	460c      	mov	r4, r1
 800e1ba:	6849      	ldr	r1, [r1, #4]
 800e1bc:	6923      	ldr	r3, [r4, #16]
 800e1be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1c2:	68a3      	ldr	r3, [r4, #8]
 800e1c4:	4607      	mov	r7, r0
 800e1c6:	4691      	mov	r9, r2
 800e1c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1cc:	f108 0601 	add.w	r6, r8, #1
 800e1d0:	42b3      	cmp	r3, r6
 800e1d2:	db0b      	blt.n	800e1ec <__lshift+0x38>
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	f7ff fddb 	bl	800dd90 <_Balloc>
 800e1da:	4605      	mov	r5, r0
 800e1dc:	b948      	cbnz	r0, 800e1f2 <__lshift+0x3e>
 800e1de:	4602      	mov	r2, r0
 800e1e0:	4b28      	ldr	r3, [pc, #160]	; (800e284 <__lshift+0xd0>)
 800e1e2:	4829      	ldr	r0, [pc, #164]	; (800e288 <__lshift+0xd4>)
 800e1e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e1e8:	f000 fa70 	bl	800e6cc <__assert_func>
 800e1ec:	3101      	adds	r1, #1
 800e1ee:	005b      	lsls	r3, r3, #1
 800e1f0:	e7ee      	b.n	800e1d0 <__lshift+0x1c>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f100 0114 	add.w	r1, r0, #20
 800e1f8:	f100 0210 	add.w	r2, r0, #16
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	4553      	cmp	r3, sl
 800e200:	db33      	blt.n	800e26a <__lshift+0xb6>
 800e202:	6920      	ldr	r0, [r4, #16]
 800e204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e208:	f104 0314 	add.w	r3, r4, #20
 800e20c:	f019 091f 	ands.w	r9, r9, #31
 800e210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e218:	d02b      	beq.n	800e272 <__lshift+0xbe>
 800e21a:	f1c9 0e20 	rsb	lr, r9, #32
 800e21e:	468a      	mov	sl, r1
 800e220:	2200      	movs	r2, #0
 800e222:	6818      	ldr	r0, [r3, #0]
 800e224:	fa00 f009 	lsl.w	r0, r0, r9
 800e228:	4302      	orrs	r2, r0
 800e22a:	f84a 2b04 	str.w	r2, [sl], #4
 800e22e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e232:	459c      	cmp	ip, r3
 800e234:	fa22 f20e 	lsr.w	r2, r2, lr
 800e238:	d8f3      	bhi.n	800e222 <__lshift+0x6e>
 800e23a:	ebac 0304 	sub.w	r3, ip, r4
 800e23e:	3b15      	subs	r3, #21
 800e240:	f023 0303 	bic.w	r3, r3, #3
 800e244:	3304      	adds	r3, #4
 800e246:	f104 0015 	add.w	r0, r4, #21
 800e24a:	4584      	cmp	ip, r0
 800e24c:	bf38      	it	cc
 800e24e:	2304      	movcc	r3, #4
 800e250:	50ca      	str	r2, [r1, r3]
 800e252:	b10a      	cbz	r2, 800e258 <__lshift+0xa4>
 800e254:	f108 0602 	add.w	r6, r8, #2
 800e258:	3e01      	subs	r6, #1
 800e25a:	4638      	mov	r0, r7
 800e25c:	612e      	str	r6, [r5, #16]
 800e25e:	4621      	mov	r1, r4
 800e260:	f7ff fdd6 	bl	800de10 <_Bfree>
 800e264:	4628      	mov	r0, r5
 800e266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e26a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e26e:	3301      	adds	r3, #1
 800e270:	e7c5      	b.n	800e1fe <__lshift+0x4a>
 800e272:	3904      	subs	r1, #4
 800e274:	f853 2b04 	ldr.w	r2, [r3], #4
 800e278:	f841 2f04 	str.w	r2, [r1, #4]!
 800e27c:	459c      	cmp	ip, r3
 800e27e:	d8f9      	bhi.n	800e274 <__lshift+0xc0>
 800e280:	e7ea      	b.n	800e258 <__lshift+0xa4>
 800e282:	bf00      	nop
 800e284:	0800eccb 	.word	0x0800eccb
 800e288:	0800ed3c 	.word	0x0800ed3c

0800e28c <__mcmp>:
 800e28c:	b530      	push	{r4, r5, lr}
 800e28e:	6902      	ldr	r2, [r0, #16]
 800e290:	690c      	ldr	r4, [r1, #16]
 800e292:	1b12      	subs	r2, r2, r4
 800e294:	d10e      	bne.n	800e2b4 <__mcmp+0x28>
 800e296:	f100 0314 	add.w	r3, r0, #20
 800e29a:	3114      	adds	r1, #20
 800e29c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e2a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e2a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e2a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e2ac:	42a5      	cmp	r5, r4
 800e2ae:	d003      	beq.n	800e2b8 <__mcmp+0x2c>
 800e2b0:	d305      	bcc.n	800e2be <__mcmp+0x32>
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	bd30      	pop	{r4, r5, pc}
 800e2b8:	4283      	cmp	r3, r0
 800e2ba:	d3f3      	bcc.n	800e2a4 <__mcmp+0x18>
 800e2bc:	e7fa      	b.n	800e2b4 <__mcmp+0x28>
 800e2be:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c2:	e7f7      	b.n	800e2b4 <__mcmp+0x28>

0800e2c4 <__mdiff>:
 800e2c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	4611      	mov	r1, r2
 800e2ce:	4620      	mov	r0, r4
 800e2d0:	4617      	mov	r7, r2
 800e2d2:	f7ff ffdb 	bl	800e28c <__mcmp>
 800e2d6:	1e05      	subs	r5, r0, #0
 800e2d8:	d110      	bne.n	800e2fc <__mdiff+0x38>
 800e2da:	4629      	mov	r1, r5
 800e2dc:	4630      	mov	r0, r6
 800e2de:	f7ff fd57 	bl	800dd90 <_Balloc>
 800e2e2:	b930      	cbnz	r0, 800e2f2 <__mdiff+0x2e>
 800e2e4:	4b39      	ldr	r3, [pc, #228]	; (800e3cc <__mdiff+0x108>)
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	f240 2132 	movw	r1, #562	; 0x232
 800e2ec:	4838      	ldr	r0, [pc, #224]	; (800e3d0 <__mdiff+0x10c>)
 800e2ee:	f000 f9ed 	bl	800e6cc <__assert_func>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2fc:	bfa4      	itt	ge
 800e2fe:	463b      	movge	r3, r7
 800e300:	4627      	movge	r7, r4
 800e302:	4630      	mov	r0, r6
 800e304:	6879      	ldr	r1, [r7, #4]
 800e306:	bfa6      	itte	ge
 800e308:	461c      	movge	r4, r3
 800e30a:	2500      	movge	r5, #0
 800e30c:	2501      	movlt	r5, #1
 800e30e:	f7ff fd3f 	bl	800dd90 <_Balloc>
 800e312:	b920      	cbnz	r0, 800e31e <__mdiff+0x5a>
 800e314:	4b2d      	ldr	r3, [pc, #180]	; (800e3cc <__mdiff+0x108>)
 800e316:	4602      	mov	r2, r0
 800e318:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e31c:	e7e6      	b.n	800e2ec <__mdiff+0x28>
 800e31e:	693e      	ldr	r6, [r7, #16]
 800e320:	60c5      	str	r5, [r0, #12]
 800e322:	6925      	ldr	r5, [r4, #16]
 800e324:	f107 0114 	add.w	r1, r7, #20
 800e328:	f104 0914 	add.w	r9, r4, #20
 800e32c:	f100 0e14 	add.w	lr, r0, #20
 800e330:	f107 0210 	add.w	r2, r7, #16
 800e334:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e338:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e33c:	46f2      	mov	sl, lr
 800e33e:	2700      	movs	r7, #0
 800e340:	f859 3b04 	ldr.w	r3, [r9], #4
 800e344:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e348:	fa1f f883 	uxth.w	r8, r3
 800e34c:	fa17 f78b 	uxtah	r7, r7, fp
 800e350:	0c1b      	lsrs	r3, r3, #16
 800e352:	eba7 0808 	sub.w	r8, r7, r8
 800e356:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e35a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e35e:	fa1f f888 	uxth.w	r8, r8
 800e362:	141f      	asrs	r7, r3, #16
 800e364:	454d      	cmp	r5, r9
 800e366:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e36a:	f84a 3b04 	str.w	r3, [sl], #4
 800e36e:	d8e7      	bhi.n	800e340 <__mdiff+0x7c>
 800e370:	1b2b      	subs	r3, r5, r4
 800e372:	3b15      	subs	r3, #21
 800e374:	f023 0303 	bic.w	r3, r3, #3
 800e378:	3304      	adds	r3, #4
 800e37a:	3415      	adds	r4, #21
 800e37c:	42a5      	cmp	r5, r4
 800e37e:	bf38      	it	cc
 800e380:	2304      	movcc	r3, #4
 800e382:	4419      	add	r1, r3
 800e384:	4473      	add	r3, lr
 800e386:	469e      	mov	lr, r3
 800e388:	460d      	mov	r5, r1
 800e38a:	4565      	cmp	r5, ip
 800e38c:	d30e      	bcc.n	800e3ac <__mdiff+0xe8>
 800e38e:	f10c 0203 	add.w	r2, ip, #3
 800e392:	1a52      	subs	r2, r2, r1
 800e394:	f022 0203 	bic.w	r2, r2, #3
 800e398:	3903      	subs	r1, #3
 800e39a:	458c      	cmp	ip, r1
 800e39c:	bf38      	it	cc
 800e39e:	2200      	movcc	r2, #0
 800e3a0:	441a      	add	r2, r3
 800e3a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e3a6:	b17b      	cbz	r3, 800e3c8 <__mdiff+0x104>
 800e3a8:	6106      	str	r6, [r0, #16]
 800e3aa:	e7a5      	b.n	800e2f8 <__mdiff+0x34>
 800e3ac:	f855 8b04 	ldr.w	r8, [r5], #4
 800e3b0:	fa17 f488 	uxtah	r4, r7, r8
 800e3b4:	1422      	asrs	r2, r4, #16
 800e3b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e3ba:	b2a4      	uxth	r4, r4
 800e3bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e3c0:	f84e 4b04 	str.w	r4, [lr], #4
 800e3c4:	1417      	asrs	r7, r2, #16
 800e3c6:	e7e0      	b.n	800e38a <__mdiff+0xc6>
 800e3c8:	3e01      	subs	r6, #1
 800e3ca:	e7ea      	b.n	800e3a2 <__mdiff+0xde>
 800e3cc:	0800eccb 	.word	0x0800eccb
 800e3d0:	0800ed3c 	.word	0x0800ed3c

0800e3d4 <__d2b>:
 800e3d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3d8:	4689      	mov	r9, r1
 800e3da:	2101      	movs	r1, #1
 800e3dc:	ec57 6b10 	vmov	r6, r7, d0
 800e3e0:	4690      	mov	r8, r2
 800e3e2:	f7ff fcd5 	bl	800dd90 <_Balloc>
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	b930      	cbnz	r0, 800e3f8 <__d2b+0x24>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	4b25      	ldr	r3, [pc, #148]	; (800e484 <__d2b+0xb0>)
 800e3ee:	4826      	ldr	r0, [pc, #152]	; (800e488 <__d2b+0xb4>)
 800e3f0:	f240 310a 	movw	r1, #778	; 0x30a
 800e3f4:	f000 f96a 	bl	800e6cc <__assert_func>
 800e3f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e3fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e400:	bb35      	cbnz	r5, 800e450 <__d2b+0x7c>
 800e402:	2e00      	cmp	r6, #0
 800e404:	9301      	str	r3, [sp, #4]
 800e406:	d028      	beq.n	800e45a <__d2b+0x86>
 800e408:	4668      	mov	r0, sp
 800e40a:	9600      	str	r6, [sp, #0]
 800e40c:	f7ff fd8c 	bl	800df28 <__lo0bits>
 800e410:	9900      	ldr	r1, [sp, #0]
 800e412:	b300      	cbz	r0, 800e456 <__d2b+0x82>
 800e414:	9a01      	ldr	r2, [sp, #4]
 800e416:	f1c0 0320 	rsb	r3, r0, #32
 800e41a:	fa02 f303 	lsl.w	r3, r2, r3
 800e41e:	430b      	orrs	r3, r1
 800e420:	40c2      	lsrs	r2, r0
 800e422:	6163      	str	r3, [r4, #20]
 800e424:	9201      	str	r2, [sp, #4]
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	61a3      	str	r3, [r4, #24]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	bf14      	ite	ne
 800e42e:	2202      	movne	r2, #2
 800e430:	2201      	moveq	r2, #1
 800e432:	6122      	str	r2, [r4, #16]
 800e434:	b1d5      	cbz	r5, 800e46c <__d2b+0x98>
 800e436:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e43a:	4405      	add	r5, r0
 800e43c:	f8c9 5000 	str.w	r5, [r9]
 800e440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e444:	f8c8 0000 	str.w	r0, [r8]
 800e448:	4620      	mov	r0, r4
 800e44a:	b003      	add	sp, #12
 800e44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e454:	e7d5      	b.n	800e402 <__d2b+0x2e>
 800e456:	6161      	str	r1, [r4, #20]
 800e458:	e7e5      	b.n	800e426 <__d2b+0x52>
 800e45a:	a801      	add	r0, sp, #4
 800e45c:	f7ff fd64 	bl	800df28 <__lo0bits>
 800e460:	9b01      	ldr	r3, [sp, #4]
 800e462:	6163      	str	r3, [r4, #20]
 800e464:	2201      	movs	r2, #1
 800e466:	6122      	str	r2, [r4, #16]
 800e468:	3020      	adds	r0, #32
 800e46a:	e7e3      	b.n	800e434 <__d2b+0x60>
 800e46c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e474:	f8c9 0000 	str.w	r0, [r9]
 800e478:	6918      	ldr	r0, [r3, #16]
 800e47a:	f7ff fd35 	bl	800dee8 <__hi0bits>
 800e47e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e482:	e7df      	b.n	800e444 <__d2b+0x70>
 800e484:	0800eccb 	.word	0x0800eccb
 800e488:	0800ed3c 	.word	0x0800ed3c

0800e48c <_calloc_r>:
 800e48c:	b513      	push	{r0, r1, r4, lr}
 800e48e:	434a      	muls	r2, r1
 800e490:	4611      	mov	r1, r2
 800e492:	9201      	str	r2, [sp, #4]
 800e494:	f000 f85a 	bl	800e54c <_malloc_r>
 800e498:	4604      	mov	r4, r0
 800e49a:	b118      	cbz	r0, 800e4a4 <_calloc_r+0x18>
 800e49c:	9a01      	ldr	r2, [sp, #4]
 800e49e:	2100      	movs	r1, #0
 800e4a0:	f7fd feae 	bl	800c200 <memset>
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	b002      	add	sp, #8
 800e4a8:	bd10      	pop	{r4, pc}
	...

0800e4ac <_free_r>:
 800e4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4ae:	2900      	cmp	r1, #0
 800e4b0:	d048      	beq.n	800e544 <_free_r+0x98>
 800e4b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4b6:	9001      	str	r0, [sp, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f1a1 0404 	sub.w	r4, r1, #4
 800e4be:	bfb8      	it	lt
 800e4c0:	18e4      	addlt	r4, r4, r3
 800e4c2:	f000 f989 	bl	800e7d8 <__malloc_lock>
 800e4c6:	4a20      	ldr	r2, [pc, #128]	; (800e548 <_free_r+0x9c>)
 800e4c8:	9801      	ldr	r0, [sp, #4]
 800e4ca:	6813      	ldr	r3, [r2, #0]
 800e4cc:	4615      	mov	r5, r2
 800e4ce:	b933      	cbnz	r3, 800e4de <_free_r+0x32>
 800e4d0:	6063      	str	r3, [r4, #4]
 800e4d2:	6014      	str	r4, [r2, #0]
 800e4d4:	b003      	add	sp, #12
 800e4d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4da:	f000 b983 	b.w	800e7e4 <__malloc_unlock>
 800e4de:	42a3      	cmp	r3, r4
 800e4e0:	d90b      	bls.n	800e4fa <_free_r+0x4e>
 800e4e2:	6821      	ldr	r1, [r4, #0]
 800e4e4:	1862      	adds	r2, r4, r1
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	bf04      	itt	eq
 800e4ea:	681a      	ldreq	r2, [r3, #0]
 800e4ec:	685b      	ldreq	r3, [r3, #4]
 800e4ee:	6063      	str	r3, [r4, #4]
 800e4f0:	bf04      	itt	eq
 800e4f2:	1852      	addeq	r2, r2, r1
 800e4f4:	6022      	streq	r2, [r4, #0]
 800e4f6:	602c      	str	r4, [r5, #0]
 800e4f8:	e7ec      	b.n	800e4d4 <_free_r+0x28>
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	b10b      	cbz	r3, 800e504 <_free_r+0x58>
 800e500:	42a3      	cmp	r3, r4
 800e502:	d9fa      	bls.n	800e4fa <_free_r+0x4e>
 800e504:	6811      	ldr	r1, [r2, #0]
 800e506:	1855      	adds	r5, r2, r1
 800e508:	42a5      	cmp	r5, r4
 800e50a:	d10b      	bne.n	800e524 <_free_r+0x78>
 800e50c:	6824      	ldr	r4, [r4, #0]
 800e50e:	4421      	add	r1, r4
 800e510:	1854      	adds	r4, r2, r1
 800e512:	42a3      	cmp	r3, r4
 800e514:	6011      	str	r1, [r2, #0]
 800e516:	d1dd      	bne.n	800e4d4 <_free_r+0x28>
 800e518:	681c      	ldr	r4, [r3, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	6053      	str	r3, [r2, #4]
 800e51e:	4421      	add	r1, r4
 800e520:	6011      	str	r1, [r2, #0]
 800e522:	e7d7      	b.n	800e4d4 <_free_r+0x28>
 800e524:	d902      	bls.n	800e52c <_free_r+0x80>
 800e526:	230c      	movs	r3, #12
 800e528:	6003      	str	r3, [r0, #0]
 800e52a:	e7d3      	b.n	800e4d4 <_free_r+0x28>
 800e52c:	6825      	ldr	r5, [r4, #0]
 800e52e:	1961      	adds	r1, r4, r5
 800e530:	428b      	cmp	r3, r1
 800e532:	bf04      	itt	eq
 800e534:	6819      	ldreq	r1, [r3, #0]
 800e536:	685b      	ldreq	r3, [r3, #4]
 800e538:	6063      	str	r3, [r4, #4]
 800e53a:	bf04      	itt	eq
 800e53c:	1949      	addeq	r1, r1, r5
 800e53e:	6021      	streq	r1, [r4, #0]
 800e540:	6054      	str	r4, [r2, #4]
 800e542:	e7c7      	b.n	800e4d4 <_free_r+0x28>
 800e544:	b003      	add	sp, #12
 800e546:	bd30      	pop	{r4, r5, pc}
 800e548:	24000218 	.word	0x24000218

0800e54c <_malloc_r>:
 800e54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e54e:	1ccd      	adds	r5, r1, #3
 800e550:	f025 0503 	bic.w	r5, r5, #3
 800e554:	3508      	adds	r5, #8
 800e556:	2d0c      	cmp	r5, #12
 800e558:	bf38      	it	cc
 800e55a:	250c      	movcc	r5, #12
 800e55c:	2d00      	cmp	r5, #0
 800e55e:	4606      	mov	r6, r0
 800e560:	db01      	blt.n	800e566 <_malloc_r+0x1a>
 800e562:	42a9      	cmp	r1, r5
 800e564:	d903      	bls.n	800e56e <_malloc_r+0x22>
 800e566:	230c      	movs	r3, #12
 800e568:	6033      	str	r3, [r6, #0]
 800e56a:	2000      	movs	r0, #0
 800e56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e56e:	f000 f933 	bl	800e7d8 <__malloc_lock>
 800e572:	4921      	ldr	r1, [pc, #132]	; (800e5f8 <_malloc_r+0xac>)
 800e574:	680a      	ldr	r2, [r1, #0]
 800e576:	4614      	mov	r4, r2
 800e578:	b99c      	cbnz	r4, 800e5a2 <_malloc_r+0x56>
 800e57a:	4f20      	ldr	r7, [pc, #128]	; (800e5fc <_malloc_r+0xb0>)
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	b923      	cbnz	r3, 800e58a <_malloc_r+0x3e>
 800e580:	4621      	mov	r1, r4
 800e582:	4630      	mov	r0, r6
 800e584:	f000 f83c 	bl	800e600 <_sbrk_r>
 800e588:	6038      	str	r0, [r7, #0]
 800e58a:	4629      	mov	r1, r5
 800e58c:	4630      	mov	r0, r6
 800e58e:	f000 f837 	bl	800e600 <_sbrk_r>
 800e592:	1c43      	adds	r3, r0, #1
 800e594:	d123      	bne.n	800e5de <_malloc_r+0x92>
 800e596:	230c      	movs	r3, #12
 800e598:	6033      	str	r3, [r6, #0]
 800e59a:	4630      	mov	r0, r6
 800e59c:	f000 f922 	bl	800e7e4 <__malloc_unlock>
 800e5a0:	e7e3      	b.n	800e56a <_malloc_r+0x1e>
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	1b5b      	subs	r3, r3, r5
 800e5a6:	d417      	bmi.n	800e5d8 <_malloc_r+0x8c>
 800e5a8:	2b0b      	cmp	r3, #11
 800e5aa:	d903      	bls.n	800e5b4 <_malloc_r+0x68>
 800e5ac:	6023      	str	r3, [r4, #0]
 800e5ae:	441c      	add	r4, r3
 800e5b0:	6025      	str	r5, [r4, #0]
 800e5b2:	e004      	b.n	800e5be <_malloc_r+0x72>
 800e5b4:	6863      	ldr	r3, [r4, #4]
 800e5b6:	42a2      	cmp	r2, r4
 800e5b8:	bf0c      	ite	eq
 800e5ba:	600b      	streq	r3, [r1, #0]
 800e5bc:	6053      	strne	r3, [r2, #4]
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f000 f910 	bl	800e7e4 <__malloc_unlock>
 800e5c4:	f104 000b 	add.w	r0, r4, #11
 800e5c8:	1d23      	adds	r3, r4, #4
 800e5ca:	f020 0007 	bic.w	r0, r0, #7
 800e5ce:	1ac2      	subs	r2, r0, r3
 800e5d0:	d0cc      	beq.n	800e56c <_malloc_r+0x20>
 800e5d2:	1a1b      	subs	r3, r3, r0
 800e5d4:	50a3      	str	r3, [r4, r2]
 800e5d6:	e7c9      	b.n	800e56c <_malloc_r+0x20>
 800e5d8:	4622      	mov	r2, r4
 800e5da:	6864      	ldr	r4, [r4, #4]
 800e5dc:	e7cc      	b.n	800e578 <_malloc_r+0x2c>
 800e5de:	1cc4      	adds	r4, r0, #3
 800e5e0:	f024 0403 	bic.w	r4, r4, #3
 800e5e4:	42a0      	cmp	r0, r4
 800e5e6:	d0e3      	beq.n	800e5b0 <_malloc_r+0x64>
 800e5e8:	1a21      	subs	r1, r4, r0
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	f000 f808 	bl	800e600 <_sbrk_r>
 800e5f0:	3001      	adds	r0, #1
 800e5f2:	d1dd      	bne.n	800e5b0 <_malloc_r+0x64>
 800e5f4:	e7cf      	b.n	800e596 <_malloc_r+0x4a>
 800e5f6:	bf00      	nop
 800e5f8:	24000218 	.word	0x24000218
 800e5fc:	2400021c 	.word	0x2400021c

0800e600 <_sbrk_r>:
 800e600:	b538      	push	{r3, r4, r5, lr}
 800e602:	4d06      	ldr	r5, [pc, #24]	; (800e61c <_sbrk_r+0x1c>)
 800e604:	2300      	movs	r3, #0
 800e606:	4604      	mov	r4, r0
 800e608:	4608      	mov	r0, r1
 800e60a:	602b      	str	r3, [r5, #0]
 800e60c:	f7f3 fa00 	bl	8001a10 <_sbrk>
 800e610:	1c43      	adds	r3, r0, #1
 800e612:	d102      	bne.n	800e61a <_sbrk_r+0x1a>
 800e614:	682b      	ldr	r3, [r5, #0]
 800e616:	b103      	cbz	r3, 800e61a <_sbrk_r+0x1a>
 800e618:	6023      	str	r3, [r4, #0]
 800e61a:	bd38      	pop	{r3, r4, r5, pc}
 800e61c:	2400052c 	.word	0x2400052c

0800e620 <__sread>:
 800e620:	b510      	push	{r4, lr}
 800e622:	460c      	mov	r4, r1
 800e624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e628:	f000 fa3c 	bl	800eaa4 <_read_r>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	bfab      	itete	ge
 800e630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e632:	89a3      	ldrhlt	r3, [r4, #12]
 800e634:	181b      	addge	r3, r3, r0
 800e636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e63a:	bfac      	ite	ge
 800e63c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e63e:	81a3      	strhlt	r3, [r4, #12]
 800e640:	bd10      	pop	{r4, pc}

0800e642 <__swrite>:
 800e642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e646:	461f      	mov	r7, r3
 800e648:	898b      	ldrh	r3, [r1, #12]
 800e64a:	05db      	lsls	r3, r3, #23
 800e64c:	4605      	mov	r5, r0
 800e64e:	460c      	mov	r4, r1
 800e650:	4616      	mov	r6, r2
 800e652:	d505      	bpl.n	800e660 <__swrite+0x1e>
 800e654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e658:	2302      	movs	r3, #2
 800e65a:	2200      	movs	r2, #0
 800e65c:	f000 f898 	bl	800e790 <_lseek_r>
 800e660:	89a3      	ldrh	r3, [r4, #12]
 800e662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e66a:	81a3      	strh	r3, [r4, #12]
 800e66c:	4632      	mov	r2, r6
 800e66e:	463b      	mov	r3, r7
 800e670:	4628      	mov	r0, r5
 800e672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e676:	f000 b817 	b.w	800e6a8 <_write_r>

0800e67a <__sseek>:
 800e67a:	b510      	push	{r4, lr}
 800e67c:	460c      	mov	r4, r1
 800e67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e682:	f000 f885 	bl	800e790 <_lseek_r>
 800e686:	1c43      	adds	r3, r0, #1
 800e688:	89a3      	ldrh	r3, [r4, #12]
 800e68a:	bf15      	itete	ne
 800e68c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e68e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e696:	81a3      	strheq	r3, [r4, #12]
 800e698:	bf18      	it	ne
 800e69a:	81a3      	strhne	r3, [r4, #12]
 800e69c:	bd10      	pop	{r4, pc}

0800e69e <__sclose>:
 800e69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6a2:	f000 b831 	b.w	800e708 <_close_r>
	...

0800e6a8 <_write_r>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	4d07      	ldr	r5, [pc, #28]	; (800e6c8 <_write_r+0x20>)
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	4608      	mov	r0, r1
 800e6b0:	4611      	mov	r1, r2
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	602a      	str	r2, [r5, #0]
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	f7f2 fba6 	bl	8000e08 <_write>
 800e6bc:	1c43      	adds	r3, r0, #1
 800e6be:	d102      	bne.n	800e6c6 <_write_r+0x1e>
 800e6c0:	682b      	ldr	r3, [r5, #0]
 800e6c2:	b103      	cbz	r3, 800e6c6 <_write_r+0x1e>
 800e6c4:	6023      	str	r3, [r4, #0]
 800e6c6:	bd38      	pop	{r3, r4, r5, pc}
 800e6c8:	2400052c 	.word	0x2400052c

0800e6cc <__assert_func>:
 800e6cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6ce:	4614      	mov	r4, r2
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	4b09      	ldr	r3, [pc, #36]	; (800e6f8 <__assert_func+0x2c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	4605      	mov	r5, r0
 800e6d8:	68d8      	ldr	r0, [r3, #12]
 800e6da:	b14c      	cbz	r4, 800e6f0 <__assert_func+0x24>
 800e6dc:	4b07      	ldr	r3, [pc, #28]	; (800e6fc <__assert_func+0x30>)
 800e6de:	9100      	str	r1, [sp, #0]
 800e6e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e6e4:	4906      	ldr	r1, [pc, #24]	; (800e700 <__assert_func+0x34>)
 800e6e6:	462b      	mov	r3, r5
 800e6e8:	f000 f81e 	bl	800e728 <fiprintf>
 800e6ec:	f000 f9f9 	bl	800eae2 <abort>
 800e6f0:	4b04      	ldr	r3, [pc, #16]	; (800e704 <__assert_func+0x38>)
 800e6f2:	461c      	mov	r4, r3
 800e6f4:	e7f3      	b.n	800e6de <__assert_func+0x12>
 800e6f6:	bf00      	nop
 800e6f8:	2400001c 	.word	0x2400001c
 800e6fc:	0800ee9c 	.word	0x0800ee9c
 800e700:	0800eea9 	.word	0x0800eea9
 800e704:	0800eed7 	.word	0x0800eed7

0800e708 <_close_r>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	4d06      	ldr	r5, [pc, #24]	; (800e724 <_close_r+0x1c>)
 800e70c:	2300      	movs	r3, #0
 800e70e:	4604      	mov	r4, r0
 800e710:	4608      	mov	r0, r1
 800e712:	602b      	str	r3, [r5, #0]
 800e714:	f7f3 f947 	bl	80019a6 <_close>
 800e718:	1c43      	adds	r3, r0, #1
 800e71a:	d102      	bne.n	800e722 <_close_r+0x1a>
 800e71c:	682b      	ldr	r3, [r5, #0]
 800e71e:	b103      	cbz	r3, 800e722 <_close_r+0x1a>
 800e720:	6023      	str	r3, [r4, #0]
 800e722:	bd38      	pop	{r3, r4, r5, pc}
 800e724:	2400052c 	.word	0x2400052c

0800e728 <fiprintf>:
 800e728:	b40e      	push	{r1, r2, r3}
 800e72a:	b503      	push	{r0, r1, lr}
 800e72c:	4601      	mov	r1, r0
 800e72e:	ab03      	add	r3, sp, #12
 800e730:	4805      	ldr	r0, [pc, #20]	; (800e748 <fiprintf+0x20>)
 800e732:	f853 2b04 	ldr.w	r2, [r3], #4
 800e736:	6800      	ldr	r0, [r0, #0]
 800e738:	9301      	str	r3, [sp, #4]
 800e73a:	f000 f883 	bl	800e844 <_vfiprintf_r>
 800e73e:	b002      	add	sp, #8
 800e740:	f85d eb04 	ldr.w	lr, [sp], #4
 800e744:	b003      	add	sp, #12
 800e746:	4770      	bx	lr
 800e748:	2400001c 	.word	0x2400001c

0800e74c <_fstat_r>:
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	4d07      	ldr	r5, [pc, #28]	; (800e76c <_fstat_r+0x20>)
 800e750:	2300      	movs	r3, #0
 800e752:	4604      	mov	r4, r0
 800e754:	4608      	mov	r0, r1
 800e756:	4611      	mov	r1, r2
 800e758:	602b      	str	r3, [r5, #0]
 800e75a:	f7f3 f930 	bl	80019be <_fstat>
 800e75e:	1c43      	adds	r3, r0, #1
 800e760:	d102      	bne.n	800e768 <_fstat_r+0x1c>
 800e762:	682b      	ldr	r3, [r5, #0]
 800e764:	b103      	cbz	r3, 800e768 <_fstat_r+0x1c>
 800e766:	6023      	str	r3, [r4, #0]
 800e768:	bd38      	pop	{r3, r4, r5, pc}
 800e76a:	bf00      	nop
 800e76c:	2400052c 	.word	0x2400052c

0800e770 <_isatty_r>:
 800e770:	b538      	push	{r3, r4, r5, lr}
 800e772:	4d06      	ldr	r5, [pc, #24]	; (800e78c <_isatty_r+0x1c>)
 800e774:	2300      	movs	r3, #0
 800e776:	4604      	mov	r4, r0
 800e778:	4608      	mov	r0, r1
 800e77a:	602b      	str	r3, [r5, #0]
 800e77c:	f7f3 f92f 	bl	80019de <_isatty>
 800e780:	1c43      	adds	r3, r0, #1
 800e782:	d102      	bne.n	800e78a <_isatty_r+0x1a>
 800e784:	682b      	ldr	r3, [r5, #0]
 800e786:	b103      	cbz	r3, 800e78a <_isatty_r+0x1a>
 800e788:	6023      	str	r3, [r4, #0]
 800e78a:	bd38      	pop	{r3, r4, r5, pc}
 800e78c:	2400052c 	.word	0x2400052c

0800e790 <_lseek_r>:
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4d07      	ldr	r5, [pc, #28]	; (800e7b0 <_lseek_r+0x20>)
 800e794:	4604      	mov	r4, r0
 800e796:	4608      	mov	r0, r1
 800e798:	4611      	mov	r1, r2
 800e79a:	2200      	movs	r2, #0
 800e79c:	602a      	str	r2, [r5, #0]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	f7f3 f928 	bl	80019f4 <_lseek>
 800e7a4:	1c43      	adds	r3, r0, #1
 800e7a6:	d102      	bne.n	800e7ae <_lseek_r+0x1e>
 800e7a8:	682b      	ldr	r3, [r5, #0]
 800e7aa:	b103      	cbz	r3, 800e7ae <_lseek_r+0x1e>
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	bd38      	pop	{r3, r4, r5, pc}
 800e7b0:	2400052c 	.word	0x2400052c

0800e7b4 <__ascii_mbtowc>:
 800e7b4:	b082      	sub	sp, #8
 800e7b6:	b901      	cbnz	r1, 800e7ba <__ascii_mbtowc+0x6>
 800e7b8:	a901      	add	r1, sp, #4
 800e7ba:	b142      	cbz	r2, 800e7ce <__ascii_mbtowc+0x1a>
 800e7bc:	b14b      	cbz	r3, 800e7d2 <__ascii_mbtowc+0x1e>
 800e7be:	7813      	ldrb	r3, [r2, #0]
 800e7c0:	600b      	str	r3, [r1, #0]
 800e7c2:	7812      	ldrb	r2, [r2, #0]
 800e7c4:	1e10      	subs	r0, r2, #0
 800e7c6:	bf18      	it	ne
 800e7c8:	2001      	movne	r0, #1
 800e7ca:	b002      	add	sp, #8
 800e7cc:	4770      	bx	lr
 800e7ce:	4610      	mov	r0, r2
 800e7d0:	e7fb      	b.n	800e7ca <__ascii_mbtowc+0x16>
 800e7d2:	f06f 0001 	mvn.w	r0, #1
 800e7d6:	e7f8      	b.n	800e7ca <__ascii_mbtowc+0x16>

0800e7d8 <__malloc_lock>:
 800e7d8:	4801      	ldr	r0, [pc, #4]	; (800e7e0 <__malloc_lock+0x8>)
 800e7da:	f7ff ba5c 	b.w	800dc96 <__retarget_lock_acquire_recursive>
 800e7de:	bf00      	nop
 800e7e0:	24000524 	.word	0x24000524

0800e7e4 <__malloc_unlock>:
 800e7e4:	4801      	ldr	r0, [pc, #4]	; (800e7ec <__malloc_unlock+0x8>)
 800e7e6:	f7ff ba57 	b.w	800dc98 <__retarget_lock_release_recursive>
 800e7ea:	bf00      	nop
 800e7ec:	24000524 	.word	0x24000524

0800e7f0 <__sfputc_r>:
 800e7f0:	6893      	ldr	r3, [r2, #8]
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	b410      	push	{r4}
 800e7f8:	6093      	str	r3, [r2, #8]
 800e7fa:	da08      	bge.n	800e80e <__sfputc_r+0x1e>
 800e7fc:	6994      	ldr	r4, [r2, #24]
 800e7fe:	42a3      	cmp	r3, r4
 800e800:	db01      	blt.n	800e806 <__sfputc_r+0x16>
 800e802:	290a      	cmp	r1, #10
 800e804:	d103      	bne.n	800e80e <__sfputc_r+0x1e>
 800e806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e80a:	f7fe b9b9 	b.w	800cb80 <__swbuf_r>
 800e80e:	6813      	ldr	r3, [r2, #0]
 800e810:	1c58      	adds	r0, r3, #1
 800e812:	6010      	str	r0, [r2, #0]
 800e814:	7019      	strb	r1, [r3, #0]
 800e816:	4608      	mov	r0, r1
 800e818:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e81c:	4770      	bx	lr

0800e81e <__sfputs_r>:
 800e81e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e820:	4606      	mov	r6, r0
 800e822:	460f      	mov	r7, r1
 800e824:	4614      	mov	r4, r2
 800e826:	18d5      	adds	r5, r2, r3
 800e828:	42ac      	cmp	r4, r5
 800e82a:	d101      	bne.n	800e830 <__sfputs_r+0x12>
 800e82c:	2000      	movs	r0, #0
 800e82e:	e007      	b.n	800e840 <__sfputs_r+0x22>
 800e830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e834:	463a      	mov	r2, r7
 800e836:	4630      	mov	r0, r6
 800e838:	f7ff ffda 	bl	800e7f0 <__sfputc_r>
 800e83c:	1c43      	adds	r3, r0, #1
 800e83e:	d1f3      	bne.n	800e828 <__sfputs_r+0xa>
 800e840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e844 <_vfiprintf_r>:
 800e844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e848:	460d      	mov	r5, r1
 800e84a:	b09d      	sub	sp, #116	; 0x74
 800e84c:	4614      	mov	r4, r2
 800e84e:	4698      	mov	r8, r3
 800e850:	4606      	mov	r6, r0
 800e852:	b118      	cbz	r0, 800e85c <_vfiprintf_r+0x18>
 800e854:	6983      	ldr	r3, [r0, #24]
 800e856:	b90b      	cbnz	r3, 800e85c <_vfiprintf_r+0x18>
 800e858:	f7ff f97a 	bl	800db50 <__sinit>
 800e85c:	4b89      	ldr	r3, [pc, #548]	; (800ea84 <_vfiprintf_r+0x240>)
 800e85e:	429d      	cmp	r5, r3
 800e860:	d11b      	bne.n	800e89a <_vfiprintf_r+0x56>
 800e862:	6875      	ldr	r5, [r6, #4]
 800e864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e866:	07d9      	lsls	r1, r3, #31
 800e868:	d405      	bmi.n	800e876 <_vfiprintf_r+0x32>
 800e86a:	89ab      	ldrh	r3, [r5, #12]
 800e86c:	059a      	lsls	r2, r3, #22
 800e86e:	d402      	bmi.n	800e876 <_vfiprintf_r+0x32>
 800e870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e872:	f7ff fa10 	bl	800dc96 <__retarget_lock_acquire_recursive>
 800e876:	89ab      	ldrh	r3, [r5, #12]
 800e878:	071b      	lsls	r3, r3, #28
 800e87a:	d501      	bpl.n	800e880 <_vfiprintf_r+0x3c>
 800e87c:	692b      	ldr	r3, [r5, #16]
 800e87e:	b9eb      	cbnz	r3, 800e8bc <_vfiprintf_r+0x78>
 800e880:	4629      	mov	r1, r5
 800e882:	4630      	mov	r0, r6
 800e884:	f7fe f9ce 	bl	800cc24 <__swsetup_r>
 800e888:	b1c0      	cbz	r0, 800e8bc <_vfiprintf_r+0x78>
 800e88a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e88c:	07dc      	lsls	r4, r3, #31
 800e88e:	d50e      	bpl.n	800e8ae <_vfiprintf_r+0x6a>
 800e890:	f04f 30ff 	mov.w	r0, #4294967295
 800e894:	b01d      	add	sp, #116	; 0x74
 800e896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89a:	4b7b      	ldr	r3, [pc, #492]	; (800ea88 <_vfiprintf_r+0x244>)
 800e89c:	429d      	cmp	r5, r3
 800e89e:	d101      	bne.n	800e8a4 <_vfiprintf_r+0x60>
 800e8a0:	68b5      	ldr	r5, [r6, #8]
 800e8a2:	e7df      	b.n	800e864 <_vfiprintf_r+0x20>
 800e8a4:	4b79      	ldr	r3, [pc, #484]	; (800ea8c <_vfiprintf_r+0x248>)
 800e8a6:	429d      	cmp	r5, r3
 800e8a8:	bf08      	it	eq
 800e8aa:	68f5      	ldreq	r5, [r6, #12]
 800e8ac:	e7da      	b.n	800e864 <_vfiprintf_r+0x20>
 800e8ae:	89ab      	ldrh	r3, [r5, #12]
 800e8b0:	0598      	lsls	r0, r3, #22
 800e8b2:	d4ed      	bmi.n	800e890 <_vfiprintf_r+0x4c>
 800e8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8b6:	f7ff f9ef 	bl	800dc98 <__retarget_lock_release_recursive>
 800e8ba:	e7e9      	b.n	800e890 <_vfiprintf_r+0x4c>
 800e8bc:	2300      	movs	r3, #0
 800e8be:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c0:	2320      	movs	r3, #32
 800e8c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e8c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e8ca:	2330      	movs	r3, #48	; 0x30
 800e8cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea90 <_vfiprintf_r+0x24c>
 800e8d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e8d4:	f04f 0901 	mov.w	r9, #1
 800e8d8:	4623      	mov	r3, r4
 800e8da:	469a      	mov	sl, r3
 800e8dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8e0:	b10a      	cbz	r2, 800e8e6 <_vfiprintf_r+0xa2>
 800e8e2:	2a25      	cmp	r2, #37	; 0x25
 800e8e4:	d1f9      	bne.n	800e8da <_vfiprintf_r+0x96>
 800e8e6:	ebba 0b04 	subs.w	fp, sl, r4
 800e8ea:	d00b      	beq.n	800e904 <_vfiprintf_r+0xc0>
 800e8ec:	465b      	mov	r3, fp
 800e8ee:	4622      	mov	r2, r4
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	f7ff ff93 	bl	800e81e <__sfputs_r>
 800e8f8:	3001      	adds	r0, #1
 800e8fa:	f000 80aa 	beq.w	800ea52 <_vfiprintf_r+0x20e>
 800e8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e900:	445a      	add	r2, fp
 800e902:	9209      	str	r2, [sp, #36]	; 0x24
 800e904:	f89a 3000 	ldrb.w	r3, [sl]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f000 80a2 	beq.w	800ea52 <_vfiprintf_r+0x20e>
 800e90e:	2300      	movs	r3, #0
 800e910:	f04f 32ff 	mov.w	r2, #4294967295
 800e914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e918:	f10a 0a01 	add.w	sl, sl, #1
 800e91c:	9304      	str	r3, [sp, #16]
 800e91e:	9307      	str	r3, [sp, #28]
 800e920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e924:	931a      	str	r3, [sp, #104]	; 0x68
 800e926:	4654      	mov	r4, sl
 800e928:	2205      	movs	r2, #5
 800e92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e92e:	4858      	ldr	r0, [pc, #352]	; (800ea90 <_vfiprintf_r+0x24c>)
 800e930:	f7f1 fcde 	bl	80002f0 <memchr>
 800e934:	9a04      	ldr	r2, [sp, #16]
 800e936:	b9d8      	cbnz	r0, 800e970 <_vfiprintf_r+0x12c>
 800e938:	06d1      	lsls	r1, r2, #27
 800e93a:	bf44      	itt	mi
 800e93c:	2320      	movmi	r3, #32
 800e93e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e942:	0713      	lsls	r3, r2, #28
 800e944:	bf44      	itt	mi
 800e946:	232b      	movmi	r3, #43	; 0x2b
 800e948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e94c:	f89a 3000 	ldrb.w	r3, [sl]
 800e950:	2b2a      	cmp	r3, #42	; 0x2a
 800e952:	d015      	beq.n	800e980 <_vfiprintf_r+0x13c>
 800e954:	9a07      	ldr	r2, [sp, #28]
 800e956:	4654      	mov	r4, sl
 800e958:	2000      	movs	r0, #0
 800e95a:	f04f 0c0a 	mov.w	ip, #10
 800e95e:	4621      	mov	r1, r4
 800e960:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e964:	3b30      	subs	r3, #48	; 0x30
 800e966:	2b09      	cmp	r3, #9
 800e968:	d94e      	bls.n	800ea08 <_vfiprintf_r+0x1c4>
 800e96a:	b1b0      	cbz	r0, 800e99a <_vfiprintf_r+0x156>
 800e96c:	9207      	str	r2, [sp, #28]
 800e96e:	e014      	b.n	800e99a <_vfiprintf_r+0x156>
 800e970:	eba0 0308 	sub.w	r3, r0, r8
 800e974:	fa09 f303 	lsl.w	r3, r9, r3
 800e978:	4313      	orrs	r3, r2
 800e97a:	9304      	str	r3, [sp, #16]
 800e97c:	46a2      	mov	sl, r4
 800e97e:	e7d2      	b.n	800e926 <_vfiprintf_r+0xe2>
 800e980:	9b03      	ldr	r3, [sp, #12]
 800e982:	1d19      	adds	r1, r3, #4
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	9103      	str	r1, [sp, #12]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	bfbb      	ittet	lt
 800e98c:	425b      	neglt	r3, r3
 800e98e:	f042 0202 	orrlt.w	r2, r2, #2
 800e992:	9307      	strge	r3, [sp, #28]
 800e994:	9307      	strlt	r3, [sp, #28]
 800e996:	bfb8      	it	lt
 800e998:	9204      	strlt	r2, [sp, #16]
 800e99a:	7823      	ldrb	r3, [r4, #0]
 800e99c:	2b2e      	cmp	r3, #46	; 0x2e
 800e99e:	d10c      	bne.n	800e9ba <_vfiprintf_r+0x176>
 800e9a0:	7863      	ldrb	r3, [r4, #1]
 800e9a2:	2b2a      	cmp	r3, #42	; 0x2a
 800e9a4:	d135      	bne.n	800ea12 <_vfiprintf_r+0x1ce>
 800e9a6:	9b03      	ldr	r3, [sp, #12]
 800e9a8:	1d1a      	adds	r2, r3, #4
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	9203      	str	r2, [sp, #12]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	bfb8      	it	lt
 800e9b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e9b6:	3402      	adds	r4, #2
 800e9b8:	9305      	str	r3, [sp, #20]
 800e9ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eaa0 <_vfiprintf_r+0x25c>
 800e9be:	7821      	ldrb	r1, [r4, #0]
 800e9c0:	2203      	movs	r2, #3
 800e9c2:	4650      	mov	r0, sl
 800e9c4:	f7f1 fc94 	bl	80002f0 <memchr>
 800e9c8:	b140      	cbz	r0, 800e9dc <_vfiprintf_r+0x198>
 800e9ca:	2340      	movs	r3, #64	; 0x40
 800e9cc:	eba0 000a 	sub.w	r0, r0, sl
 800e9d0:	fa03 f000 	lsl.w	r0, r3, r0
 800e9d4:	9b04      	ldr	r3, [sp, #16]
 800e9d6:	4303      	orrs	r3, r0
 800e9d8:	3401      	adds	r4, #1
 800e9da:	9304      	str	r3, [sp, #16]
 800e9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e0:	482c      	ldr	r0, [pc, #176]	; (800ea94 <_vfiprintf_r+0x250>)
 800e9e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e9e6:	2206      	movs	r2, #6
 800e9e8:	f7f1 fc82 	bl	80002f0 <memchr>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d03f      	beq.n	800ea70 <_vfiprintf_r+0x22c>
 800e9f0:	4b29      	ldr	r3, [pc, #164]	; (800ea98 <_vfiprintf_r+0x254>)
 800e9f2:	bb1b      	cbnz	r3, 800ea3c <_vfiprintf_r+0x1f8>
 800e9f4:	9b03      	ldr	r3, [sp, #12]
 800e9f6:	3307      	adds	r3, #7
 800e9f8:	f023 0307 	bic.w	r3, r3, #7
 800e9fc:	3308      	adds	r3, #8
 800e9fe:	9303      	str	r3, [sp, #12]
 800ea00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea02:	443b      	add	r3, r7
 800ea04:	9309      	str	r3, [sp, #36]	; 0x24
 800ea06:	e767      	b.n	800e8d8 <_vfiprintf_r+0x94>
 800ea08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea0c:	460c      	mov	r4, r1
 800ea0e:	2001      	movs	r0, #1
 800ea10:	e7a5      	b.n	800e95e <_vfiprintf_r+0x11a>
 800ea12:	2300      	movs	r3, #0
 800ea14:	3401      	adds	r4, #1
 800ea16:	9305      	str	r3, [sp, #20]
 800ea18:	4619      	mov	r1, r3
 800ea1a:	f04f 0c0a 	mov.w	ip, #10
 800ea1e:	4620      	mov	r0, r4
 800ea20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea24:	3a30      	subs	r2, #48	; 0x30
 800ea26:	2a09      	cmp	r2, #9
 800ea28:	d903      	bls.n	800ea32 <_vfiprintf_r+0x1ee>
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d0c5      	beq.n	800e9ba <_vfiprintf_r+0x176>
 800ea2e:	9105      	str	r1, [sp, #20]
 800ea30:	e7c3      	b.n	800e9ba <_vfiprintf_r+0x176>
 800ea32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea36:	4604      	mov	r4, r0
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e7f0      	b.n	800ea1e <_vfiprintf_r+0x1da>
 800ea3c:	ab03      	add	r3, sp, #12
 800ea3e:	9300      	str	r3, [sp, #0]
 800ea40:	462a      	mov	r2, r5
 800ea42:	4b16      	ldr	r3, [pc, #88]	; (800ea9c <_vfiprintf_r+0x258>)
 800ea44:	a904      	add	r1, sp, #16
 800ea46:	4630      	mov	r0, r6
 800ea48:	f7fd fc72 	bl	800c330 <_printf_float>
 800ea4c:	4607      	mov	r7, r0
 800ea4e:	1c78      	adds	r0, r7, #1
 800ea50:	d1d6      	bne.n	800ea00 <_vfiprintf_r+0x1bc>
 800ea52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea54:	07d9      	lsls	r1, r3, #31
 800ea56:	d405      	bmi.n	800ea64 <_vfiprintf_r+0x220>
 800ea58:	89ab      	ldrh	r3, [r5, #12]
 800ea5a:	059a      	lsls	r2, r3, #22
 800ea5c:	d402      	bmi.n	800ea64 <_vfiprintf_r+0x220>
 800ea5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea60:	f7ff f91a 	bl	800dc98 <__retarget_lock_release_recursive>
 800ea64:	89ab      	ldrh	r3, [r5, #12]
 800ea66:	065b      	lsls	r3, r3, #25
 800ea68:	f53f af12 	bmi.w	800e890 <_vfiprintf_r+0x4c>
 800ea6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea6e:	e711      	b.n	800e894 <_vfiprintf_r+0x50>
 800ea70:	ab03      	add	r3, sp, #12
 800ea72:	9300      	str	r3, [sp, #0]
 800ea74:	462a      	mov	r2, r5
 800ea76:	4b09      	ldr	r3, [pc, #36]	; (800ea9c <_vfiprintf_r+0x258>)
 800ea78:	a904      	add	r1, sp, #16
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	f7fd fee4 	bl	800c848 <_printf_i>
 800ea80:	e7e4      	b.n	800ea4c <_vfiprintf_r+0x208>
 800ea82:	bf00      	nop
 800ea84:	0800ecfc 	.word	0x0800ecfc
 800ea88:	0800ed1c 	.word	0x0800ed1c
 800ea8c:	0800ecdc 	.word	0x0800ecdc
 800ea90:	0800eee2 	.word	0x0800eee2
 800ea94:	0800eeec 	.word	0x0800eeec
 800ea98:	0800c331 	.word	0x0800c331
 800ea9c:	0800e81f 	.word	0x0800e81f
 800eaa0:	0800eee8 	.word	0x0800eee8

0800eaa4 <_read_r>:
 800eaa4:	b538      	push	{r3, r4, r5, lr}
 800eaa6:	4d07      	ldr	r5, [pc, #28]	; (800eac4 <_read_r+0x20>)
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	4608      	mov	r0, r1
 800eaac:	4611      	mov	r1, r2
 800eaae:	2200      	movs	r2, #0
 800eab0:	602a      	str	r2, [r5, #0]
 800eab2:	461a      	mov	r2, r3
 800eab4:	f7f2 ff5a 	bl	800196c <_read>
 800eab8:	1c43      	adds	r3, r0, #1
 800eaba:	d102      	bne.n	800eac2 <_read_r+0x1e>
 800eabc:	682b      	ldr	r3, [r5, #0]
 800eabe:	b103      	cbz	r3, 800eac2 <_read_r+0x1e>
 800eac0:	6023      	str	r3, [r4, #0]
 800eac2:	bd38      	pop	{r3, r4, r5, pc}
 800eac4:	2400052c 	.word	0x2400052c

0800eac8 <__ascii_wctomb>:
 800eac8:	b149      	cbz	r1, 800eade <__ascii_wctomb+0x16>
 800eaca:	2aff      	cmp	r2, #255	; 0xff
 800eacc:	bf85      	ittet	hi
 800eace:	238a      	movhi	r3, #138	; 0x8a
 800ead0:	6003      	strhi	r3, [r0, #0]
 800ead2:	700a      	strbls	r2, [r1, #0]
 800ead4:	f04f 30ff 	movhi.w	r0, #4294967295
 800ead8:	bf98      	it	ls
 800eada:	2001      	movls	r0, #1
 800eadc:	4770      	bx	lr
 800eade:	4608      	mov	r0, r1
 800eae0:	4770      	bx	lr

0800eae2 <abort>:
 800eae2:	b508      	push	{r3, lr}
 800eae4:	2006      	movs	r0, #6
 800eae6:	f000 f82b 	bl	800eb40 <raise>
 800eaea:	2001      	movs	r0, #1
 800eaec:	f7f2 ff34 	bl	8001958 <_exit>

0800eaf0 <_raise_r>:
 800eaf0:	291f      	cmp	r1, #31
 800eaf2:	b538      	push	{r3, r4, r5, lr}
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	460d      	mov	r5, r1
 800eaf8:	d904      	bls.n	800eb04 <_raise_r+0x14>
 800eafa:	2316      	movs	r3, #22
 800eafc:	6003      	str	r3, [r0, #0]
 800eafe:	f04f 30ff 	mov.w	r0, #4294967295
 800eb02:	bd38      	pop	{r3, r4, r5, pc}
 800eb04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb06:	b112      	cbz	r2, 800eb0e <_raise_r+0x1e>
 800eb08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb0c:	b94b      	cbnz	r3, 800eb22 <_raise_r+0x32>
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f000 f830 	bl	800eb74 <_getpid_r>
 800eb14:	462a      	mov	r2, r5
 800eb16:	4601      	mov	r1, r0
 800eb18:	4620      	mov	r0, r4
 800eb1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb1e:	f000 b817 	b.w	800eb50 <_kill_r>
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d00a      	beq.n	800eb3c <_raise_r+0x4c>
 800eb26:	1c59      	adds	r1, r3, #1
 800eb28:	d103      	bne.n	800eb32 <_raise_r+0x42>
 800eb2a:	2316      	movs	r3, #22
 800eb2c:	6003      	str	r3, [r0, #0]
 800eb2e:	2001      	movs	r0, #1
 800eb30:	e7e7      	b.n	800eb02 <_raise_r+0x12>
 800eb32:	2400      	movs	r4, #0
 800eb34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb38:	4628      	mov	r0, r5
 800eb3a:	4798      	blx	r3
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	e7e0      	b.n	800eb02 <_raise_r+0x12>

0800eb40 <raise>:
 800eb40:	4b02      	ldr	r3, [pc, #8]	; (800eb4c <raise+0xc>)
 800eb42:	4601      	mov	r1, r0
 800eb44:	6818      	ldr	r0, [r3, #0]
 800eb46:	f7ff bfd3 	b.w	800eaf0 <_raise_r>
 800eb4a:	bf00      	nop
 800eb4c:	2400001c 	.word	0x2400001c

0800eb50 <_kill_r>:
 800eb50:	b538      	push	{r3, r4, r5, lr}
 800eb52:	4d07      	ldr	r5, [pc, #28]	; (800eb70 <_kill_r+0x20>)
 800eb54:	2300      	movs	r3, #0
 800eb56:	4604      	mov	r4, r0
 800eb58:	4608      	mov	r0, r1
 800eb5a:	4611      	mov	r1, r2
 800eb5c:	602b      	str	r3, [r5, #0]
 800eb5e:	f7f2 feeb 	bl	8001938 <_kill>
 800eb62:	1c43      	adds	r3, r0, #1
 800eb64:	d102      	bne.n	800eb6c <_kill_r+0x1c>
 800eb66:	682b      	ldr	r3, [r5, #0]
 800eb68:	b103      	cbz	r3, 800eb6c <_kill_r+0x1c>
 800eb6a:	6023      	str	r3, [r4, #0]
 800eb6c:	bd38      	pop	{r3, r4, r5, pc}
 800eb6e:	bf00      	nop
 800eb70:	2400052c 	.word	0x2400052c

0800eb74 <_getpid_r>:
 800eb74:	f7f2 bed8 	b.w	8001928 <_getpid>

0800eb78 <_init>:
 800eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7a:	bf00      	nop
 800eb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb7e:	bc08      	pop	{r3}
 800eb80:	469e      	mov	lr, r3
 800eb82:	4770      	bx	lr

0800eb84 <_fini>:
 800eb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb86:	bf00      	nop
 800eb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb8a:	bc08      	pop	{r3}
 800eb8c:	469e      	mov	lr, r3
 800eb8e:	4770      	bx	lr
