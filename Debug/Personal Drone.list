
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08013770  08013770  00023770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013cb0  08013cb0  00023cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013cb8  08013cb8  00023cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013cbc  08013cbc  00023cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08013cc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000520  240001f8  08013eb8  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000718  08013eb8  00030718  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b780  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004529  00000000  00000000  0005b9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b8  00000000  00000000  0005fed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016c0  00000000  00000000  00061688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394d5  00000000  00000000  00062d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f39c  00000000  00000000  0009c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016849a  00000000  00000000  000bb5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00223a53  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007628  00000000  00000000  00223aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013754 	.word	0x08013754

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08013754 	.word	0x08013754

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:

FSiA6B_iBus iBus;
uint8_t iBus_return;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	815a      	strh	r2, [r3, #10]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	825a      	strh	r2, [r3, #18]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	81da      	strh	r2, [r3, #14]

//	iBus->FailSafe = (iBus->SwB == 1500) && (iBus->SwD == 1500);
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af04      	add	r7, sp, #16
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	4608      	mov	r0, r1
 800086a:	4611      	mov	r1, r2
 800086c:	461a      	mov	r2, r3
 800086e:	4603      	mov	r3, r0
 8000870:	70fb      	strb	r3, [r7, #3]
 8000872:	460b      	mov	r3, r1
 8000874:	70bb      	strb	r3, [r7, #2]
 8000876:	4613      	mov	r3, r2
 8000878:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d81b      	bhi.n	80008b8 <MPU9250_Init+0x58>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <MPU9250_Init+0x28>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	08000899 	.word	0x08000899
 800088c:	080008a1 	.word	0x080008a1
 8000890:	080008a9 	.word	0x080008a9
 8000894:	080008b1 	.word	0x080008b1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 8000898:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MPU9250_Init+0x1b0>)
 800089a:	4a5e      	ldr	r2, [pc, #376]	; (8000a14 <MPU9250_Init+0x1b4>)
 800089c:	601a      	str	r2, [r3, #0]
		break;
 800089e:	e00c      	b.n	80008ba <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008a0:	4b5b      	ldr	r3, [pc, #364]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008a2:	4a5d      	ldr	r2, [pc, #372]	; (8000a18 <MPU9250_Init+0x1b8>)
 80008a4:	601a      	str	r2, [r3, #0]
		break;
 80008a6:	e008      	b.n	80008ba <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008a8:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008aa:	4a5c      	ldr	r2, [pc, #368]	; (8000a1c <MPU9250_Init+0x1bc>)
 80008ac:	601a      	str	r2, [r3, #0]
		break;
 80008ae:	e004      	b.n	80008ba <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008b0:	4b57      	ldr	r3, [pc, #348]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008b2:	4a5b      	ldr	r2, [pc, #364]	; (8000a20 <MPU9250_Init+0x1c0>)
 80008b4:	601a      	str	r2, [r3, #0]
		break;
 80008b6:	e000      	b.n	80008ba <MPU9250_Init+0x5a>
	default:
		break;
 80008b8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ba:	78bb      	ldrb	r3, [r7, #2]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d81f      	bhi.n	8000900 <MPU9250_Init+0xa0>
 80008c0:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <MPU9250_Init+0x68>)
 80008c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c6:	bf00      	nop
 80008c8:	080008d9 	.word	0x080008d9
 80008cc:	080008e3 	.word	0x080008e3
 80008d0:	080008ed 	.word	0x080008ed
 80008d4:	080008f7 	.word	0x080008f7
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 80008d8:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008da:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80008de:	601a      	str	r2, [r3, #0]
		break;
 80008e0:	e00f      	b.n	8000902 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008e4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80008e8:	601a      	str	r2, [r3, #0]
		break;
 80008ea:	e00a      	b.n	8000902 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008ee:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80008f2:	601a      	str	r2, [r3, #0]
		break;
 80008f4:	e005      	b.n	8000902 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 80008f6:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008f8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80008fc:	601a      	str	r2, [r3, #0]
		break;
 80008fe:	e000      	b.n	8000902 <MPU9250_Init+0xa2>
	default:
		break;
 8000900:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	2301      	movs	r3, #1
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <MPU9250_Init+0x1c8>)
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	2275      	movs	r2, #117	; 0x75
 8000912:	21d0      	movs	r1, #208	; 0xd0
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f007 fbe5 	bl	80080e4 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <MPU9250_Init+0x1c8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b71      	cmp	r3, #113	; 0x71
 8000920:	d171      	bne.n	8000a06 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000922:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	2301      	movs	r3, #1
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	4b3e      	ldr	r3, [pc, #248]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	2219      	movs	r2, #25
 8000938:	21d0      	movs	r1, #208	; 0xd0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f007 fabe 	bl	8007ebc <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000940:	200a      	movs	r0, #10
 8000942:	f004 f8b3 	bl	8004aac <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000946:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000948:	787b      	ldrb	r3, [r7, #1]
 800094a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	2301      	movs	r3, #1
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	221a      	movs	r2, #26
 800095c:	21d0      	movs	r1, #208	; 0xd0
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f007 faac 	bl	8007ebc <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f004 f8a1 	bl	8004aac <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000972:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	2301      	movs	r3, #1
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MPU9250_Init+0x1cc>)
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2301      	movs	r3, #1
 8000982:	221b      	movs	r2, #27
 8000984:	21d0      	movs	r1, #208	; 0xd0
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f007 fa98 	bl	8007ebc <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800098c:	200a      	movs	r0, #10
 800098e:	f004 f88d 	bl	8004aac <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 8000992:	78bb      	ldrb	r3, [r7, #2]
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MPU9250_Init+0x1cc>)
 800099a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	221c      	movs	r2, #28
 80009ac:	21d0      	movs	r1, #208	; 0xd0
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f007 fa84 	bl	8007ebc <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f004 f879 	bl	8004aac <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009bc:	7c3b      	ldrb	r3, [r7, #16]
 80009be:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009c0:	2364      	movs	r3, #100	; 0x64
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2301      	movs	r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	221d      	movs	r2, #29
 80009d0:	21d0      	movs	r1, #208	; 0xd0
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f007 fa72 	bl	8007ebc <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f004 f867 	bl	8004aac <HAL_Delay>

		MPU9250_tx = 0x00;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	2301      	movs	r3, #1
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	226b      	movs	r2, #107	; 0x6b
 80009f4:	21d0      	movs	r1, #208	; 0xd0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f007 fa60 	bl	8007ebc <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009fc:	200a      	movs	r0, #10
 80009fe:	f004 f855 	bl	8004aac <HAL_Delay>

		return 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000000 	.word	0x24000000
 8000a14:	43030000 	.word	0x43030000
 8000a18:	42830000 	.word	0x42830000
 8000a1c:	42033333 	.word	0x42033333
 8000a20:	41833333 	.word	0x41833333
 8000a24:	24000004 	.word	0x24000004
 8000a28:	240002e1 	.word	0x240002e1
 8000a2c:	24000269 	.word	0x24000269

08000a30 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af04      	add	r7, sp, #16
 8000a36:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2301      	movs	r3, #1
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	226a      	movs	r2, #106	; 0x6a
 8000a4e:	21d0      	movs	r1, #208	; 0xd0
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f007 fa33 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a56:	200a      	movs	r0, #10
 8000a58:	f004 f828 	bl	8004aac <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2237      	movs	r2, #55	; 0x37
 8000a72:	21d0      	movs	r1, #208	; 0xd0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f007 fa21 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f004 f816 	bl	8004aac <HAL_Delay>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000269 	.word	0x24000269

08000a8c <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MPU9250_Master+0xa0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2237      	movs	r2, #55	; 0x37
 8000aaa:	21d0      	movs	r1, #208	; 0xd0
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f007 fa05 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f003 fffa 	bl	8004aac <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aba:	2220      	movs	r2, #32
 8000abc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MPU9250_Master+0xa0>)
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	226a      	movs	r2, #106	; 0x6a
 8000ace:	21d0      	movs	r1, #208	; 0xd0
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f007 f9f3 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f003 ffe8 	bl	8004aac <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MPU9250_Master+0xa0>)
 8000ade:	220d      	movs	r2, #13
 8000ae0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	2224      	movs	r2, #36	; 0x24
 8000af2:	21d0      	movs	r1, #208	; 0xd0
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f007 f9e1 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000afa:	200a      	movs	r0, #10
 8000afc:	f003 ffd6 	bl	8004aac <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MPU9250_Master+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	9302      	str	r3, [sp, #8]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MPU9250_Master+0xa0>)
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	226b      	movs	r2, #107	; 0x6b
 8000b16:	21d0      	movs	r1, #208	; 0xd0
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f007 f9cf 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f003 ffc4 	bl	8004aac <HAL_Delay>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	24000269 	.word	0x24000269

08000b30 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b3a:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <MPU9250_AK8963_Setup+0xa0>)
 8000b3c:	2216      	movs	r2, #22
 8000b3e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2301      	movs	r3, #1
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MPU9250_AK8963_Setup+0xa0>)
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	220a      	movs	r2, #10
 8000b50:	2118      	movs	r1, #24
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f007 f9b2 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f003 ffa7 	bl	8004aac <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	2303      	movs	r3, #3
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MPU9250_AK8963_Setup+0xa4>)
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	2118      	movs	r1, #24
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f007 fab7 	bl	80080e4 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f003 ff98 	bl	8004aac <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MPU9250_AK8963_Setup+0xa4>)
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MPU9250_AK8963_Setup+0xa4>)
 8000b88:	785a      	ldrb	r2, [r3, #1]
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MPU9250_AK8963_Setup+0xa4>)
 8000b92:	789a      	ldrb	r2, [r3, #2]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MPU9250_AK8963_Setup+0xa8>)
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2118      	movs	r1, #24
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f007 fa99 	bl	80080e4 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000bb2:	200a      	movs	r0, #10
 8000bb4:	f003 ff7a 	bl	8004aac <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MPU9250_AK8963_Setup+0xa8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b48      	cmp	r3, #72	; 0x48
 8000bbe:	d101      	bne.n	8000bc4 <MPU9250_AK8963_Setup+0x94>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <MPU9250_AK8963_Setup+0x96>
	return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	24000269 	.word	0x24000269
 8000bd4:	240002e4 	.word	0x240002e4
 8000bd8:	240002e0 	.word	0x240002e0

08000bdc <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000be6:	228c      	movs	r2, #140	; 0x8c
 8000be8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000bea:	2364      	movs	r3, #100	; 0x64
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2225      	movs	r2, #37	; 0x25
 8000bfa:	21d0      	movs	r1, #208	; 0xd0
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f007 f95d 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c02:	200a      	movs	r0, #10
 8000c04:	f003 ff52 	bl	8004aac <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	9302      	str	r3, [sp, #8]
 8000c12:	2301      	movs	r3, #1
 8000c14:	9301      	str	r3, [sp, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	2226      	movs	r2, #38	; 0x26
 8000c1e:	21d0      	movs	r1, #208	; 0xd0
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f007 f94b 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c26:	200a      	movs	r0, #10
 8000c28:	f003 ff40 	bl	8004aac <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000c2e:	2287      	movs	r2, #135	; 0x87
 8000c30:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	9302      	str	r3, [sp, #8]
 8000c36:	2301      	movs	r3, #1
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MPU9250_Slave0_Enable+0x7c>)
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	2227      	movs	r2, #39	; 0x27
 8000c42:	21d0      	movs	r1, #208	; 0xd0
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f007 f939 	bl	8007ebc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f003 ff2e 	bl	8004aac <HAL_Delay>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000269 	.word	0x24000269

08000c5c <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c64:	2314      	movs	r3, #20
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <MPU9250_Read_All+0x24>)
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	223b      	movs	r2, #59	; 0x3b
 8000c70:	21d0      	movs	r1, #208	; 0xd0
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f007 fb50 	bl	8008318 <HAL_I2C_Mem_Read_DMA>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	240002e4 	.word	0x240002e4
 8000c84:	00000000 	.word	0x00000000

08000c88 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000c90:	4bb9      	ldr	r3, [pc, #740]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	4bb7      	ldr	r3, [pc, #732]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000c9a:	785b      	ldrb	r3, [r3, #1]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cae:	4bb2      	ldr	r3, [pc, #712]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	4bb0      	ldr	r3, [pc, #704]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cb8:	78db      	ldrb	r3, [r3, #3]
 8000cba:	b21b      	sxth	r3, r3
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000cc4:	4bac      	ldr	r3, [pc, #688]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cc6:	791b      	ldrb	r3, [r3, #4]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	4baa      	ldr	r3, [pc, #680]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cce:	795b      	ldrb	r3, [r3, #5]
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000cda:	4ba7      	ldr	r3, [pc, #668]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cdc:	7a1b      	ldrb	r3, [r3, #8]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4ba5      	ldr	r3, [pc, #660]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000ce4:	7a5b      	ldrb	r3, [r3, #9]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000cf0:	4ba1      	ldr	r3, [pc, #644]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cf2:	7a9b      	ldrb	r3, [r3, #10]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4b9f      	ldr	r3, [pc, #636]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000cfa:	7adb      	ldrb	r3, [r3, #11]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	425b      	negs	r3, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d0e:	4b9a      	ldr	r3, [pc, #616]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d10:	7b1b      	ldrb	r3, [r3, #12]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	4b98      	ldr	r3, [pc, #608]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d18:	7b5b      	ldrb	r3, [r3, #13]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	425b      	negs	r3, r3
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d2c:	4b92      	ldr	r3, [pc, #584]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d2e:	7bdb      	ldrb	r3, [r3, #15]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	4b90      	ldr	r3, [pc, #576]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d36:	7b9b      	ldrb	r3, [r3, #14]
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	b21b      	sxth	r3, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	425b      	negs	r3, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d4a:	4b8b      	ldr	r3, [pc, #556]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d4c:	7c5b      	ldrb	r3, [r3, #17]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	4b89      	ldr	r3, [pc, #548]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d54:	7c1b      	ldrb	r3, [r3, #16]
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d60:	4b85      	ldr	r3, [pc, #532]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d62:	7cdb      	ldrb	r3, [r3, #19]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	4b83      	ldr	r3, [pc, #524]	; (8000f78 <MPU9250_Parsing+0x2f0>)
 8000d6a:	7c9b      	ldrb	r3, [r3, #18]
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d84:	4b7d      	ldr	r3, [pc, #500]	; (8000f7c <MPU9250_Parsing+0x2f4>)
 8000d86:	ed93 7a00 	vldr	s14, [r3]
 8000d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000da2:	4b76      	ldr	r3, [pc, #472]	; (8000f7c <MPU9250_Parsing+0x2f4>)
 8000da4:	ed93 7a00 	vldr	s14, [r3]
 8000da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000db8:	ee07 3a90 	vmov	s15, r3
 8000dbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dc0:	4b6e      	ldr	r3, [pc, #440]	; (8000f7c <MPU9250_Parsing+0x2f4>)
 8000dc2:	ed93 7a00 	vldr	s14, [r3]
 8000dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dde:	4b68      	ldr	r3, [pc, #416]	; (8000f80 <MPU9250_Parsing+0x2f8>)
 8000de0:	ed93 7a00 	vldr	s14, [r3]
 8000de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000df4:	ee07 3a90 	vmov	s15, r3
 8000df8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dfc:	4b60      	ldr	r3, [pc, #384]	; (8000f80 <MPU9250_Parsing+0x2f8>)
 8000dfe:	ed93 7a00 	vldr	s14, [r3]
 8000e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e1a:	4b59      	ldr	r3, [pc, #356]	; (8000f80 <MPU9250_Parsing+0x2f8>)
 8000e1c:	ed93 7a00 	vldr	s14, [r3]
 8000e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e28:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000f68 <MPU9250_Parsing+0x2e0>
 8000e2c:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000e30:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8000f70 <MPU9250_Parsing+0x2e8>
 8000e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000e48:	461a      	mov	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000e50:	3b80      	subs	r3, #128	; 0x80
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	da00      	bge.n	8000e58 <MPU9250_Parsing+0x1d0>
 8000e56:	33ff      	adds	r3, #255	; 0xff
 8000e58:	121b      	asrs	r3, r3, #8
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	fb03 f302 	mul.w	r3, r3, r2
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e68:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <MPU9250_Parsing+0x2fc>)
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000e86:	3b80      	subs	r3, #128	; 0x80
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da00      	bge.n	8000e8e <MPU9250_Parsing+0x206>
 8000e8c:	33ff      	adds	r3, #255	; 0xff
 8000e8e:	121b      	asrs	r3, r3, #8
 8000e90:	3301      	adds	r3, #1
 8000e92:	fb03 f302 	mul.w	r3, r3, r2
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e9e:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <MPU9250_Parsing+0x2fc>)
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ebc:	3b80      	subs	r3, #128	; 0x80
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da00      	bge.n	8000ec4 <MPU9250_Parsing+0x23c>
 8000ec2:	33ff      	adds	r3, #255	; 0xff
 8000ec4:	121b      	asrs	r3, r3, #8
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	fb03 f302 	mul.w	r3, r3, r2
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MPU9250_Parsing+0x2fc>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	ed93 7a08 	vldr	s14, [r3, #32]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f44:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000f88 <MPU9250_Parsing+0x300>
 8000f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f58:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000f88 <MPU9250_Parsing+0x300>
 8000f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f60:	e014      	b.n	8000f8c <MPU9250_Parsing+0x304>
 8000f62:	bf00      	nop
 8000f64:	f3af 8000 	nop.w
 8000f68:	33333333 	.word	0x33333333
 8000f6c:	3fc33333 	.word	0x3fc33333
 8000f70:	147ae148 	.word	0x147ae148
 8000f74:	3ff147ae 	.word	0x3ff147ae
 8000f78:	240002e4 	.word	0x240002e4
 8000f7c:	24000000 	.word	0x24000000
 8000f80:	24000004 	.word	0x24000004
 8000f84:	24000008 	.word	0x24000008
 8000f88:	3c8efa35 	.word	0x3c8efa35
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f98:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8000f88 <MPU9250_Parsing+0x300>
 8000f9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My -= DataStruct->My_Offset;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8000fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	0000      	movs	r0, r0
	...

08000ff8 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8001000:	4bb1      	ldr	r3, [pc, #708]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	4baf      	ldr	r3, [pc, #700]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	425b      	negs	r3, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21a      	sxth	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 800101e:	4baa      	ldr	r3, [pc, #680]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001020:	789b      	ldrb	r3, [r3, #2]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	4ba8      	ldr	r3, [pc, #672]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001028:	78db      	ldrb	r3, [r3, #3]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b21a      	sxth	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8001034:	4ba4      	ldr	r3, [pc, #656]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	b21a      	sxth	r2, r3
 800103c:	4ba2      	ldr	r3, [pc, #648]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800103e:	795b      	ldrb	r3, [r3, #5]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 800104a:	4b9f      	ldr	r3, [pc, #636]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800104c:	7a1b      	ldrb	r3, [r3, #8]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	4b9d      	ldr	r3, [pc, #628]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001054:	7a5b      	ldrb	r3, [r3, #9]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	b21a      	sxth	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001060:	4b99      	ldr	r3, [pc, #612]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001062:	7a9b      	ldrb	r3, [r3, #10]
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b97      	ldr	r3, [pc, #604]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800106a:	7adb      	ldrb	r3, [r3, #11]
 800106c:	b21b      	sxth	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29b      	uxth	r3, r3
 8001074:	425b      	negs	r3, r3
 8001076:	b29b      	uxth	r3, r3
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 800107e:	4b92      	ldr	r3, [pc, #584]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001080:	7b1b      	ldrb	r3, [r3, #12]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b90      	ldr	r3, [pc, #576]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 8001088:	7b5b      	ldrb	r3, [r3, #13]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21b      	sxth	r3, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	425b      	negs	r3, r3
 8001094:	b29b      	uxth	r3, r3
 8001096:	b21a      	sxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 800109c:	4b8a      	ldr	r3, [pc, #552]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 800109e:	7bdb      	ldrb	r3, [r3, #15]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b88      	ldr	r3, [pc, #544]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010a6:	7b9b      	ldrb	r3, [r3, #14]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	425b      	negs	r3, r3
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010ba:	4b83      	ldr	r3, [pc, #524]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010bc:	7c5b      	ldrb	r3, [r3, #17]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	b21a      	sxth	r2, r3
 80010c2:	4b81      	ldr	r3, [pc, #516]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010c4:	7c1b      	ldrb	r3, [r3, #16]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	4313      	orrs	r3, r2
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010d0:	4b7d      	ldr	r3, [pc, #500]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010d2:	7cdb      	ldrb	r3, [r3, #19]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	4b7b      	ldr	r3, [pc, #492]	; (80012c8 <MPU9250_Parsing_NoOffset+0x2d0>)
 80010da:	7c9b      	ldrb	r3, [r3, #18]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010f4:	4b75      	ldr	r3, [pc, #468]	; (80012cc <MPU9250_Parsing_NoOffset+0x2d4>)
 80010f6:	ed93 7a00 	vldr	s14, [r3]
 80010fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fe:	ed9f 7a74 	vldr	s14, [pc, #464]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 8001102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800111a:	4b6c      	ldr	r3, [pc, #432]	; (80012cc <MPU9250_Parsing_NoOffset+0x2d4>)
 800111c:	ed93 7a00 	vldr	s14, [r3]
 8001120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001124:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 8001128:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001140:	4b62      	ldr	r3, [pc, #392]	; (80012cc <MPU9250_Parsing_NoOffset+0x2d4>)
 8001142:	ed93 7a00 	vldr	s14, [r3]
 8001146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 800114e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	edd3 7a08 	vldr	s15, [r3, #32]
 800115e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 8001162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001172:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001186:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80012d0 <MPU9250_Parsing_NoOffset+0x2d8>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a2:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2dc>)
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011c0:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2dc>)
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2dc>)
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011ec:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80012b8 <MPU9250_Parsing_NoOffset+0x2c0>
 80011f0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80011f4:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80012c0 <MPU9250_Parsing_NoOffset+0x2c8>
 80011f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800120c:	461a      	mov	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001214:	3b80      	subs	r3, #128	; 0x80
 8001216:	2b00      	cmp	r3, #0
 8001218:	da00      	bge.n	800121c <MPU9250_Parsing_NoOffset+0x224>
 800121a:	33ff      	adds	r3, #255	; 0xff
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	3301      	adds	r3, #1
 8001220:	fb03 f302 	mul.w	r3, r3, r2
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122c:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2e0>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800124a:	3b80      	subs	r3, #128	; 0x80
 800124c:	2b00      	cmp	r3, #0
 800124e:	da00      	bge.n	8001252 <MPU9250_Parsing_NoOffset+0x25a>
 8001250:	33ff      	adds	r3, #255	; 0xff
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	3301      	adds	r3, #1
 8001256:	fb03 f302 	mul.w	r3, r3, r2
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2e0>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001280:	3b80      	subs	r3, #128	; 0x80
 8001282:	2b00      	cmp	r3, #0
 8001284:	da00      	bge.n	8001288 <MPU9250_Parsing_NoOffset+0x290>
 8001286:	33ff      	adds	r3, #255	; 0xff
 8001288:	121b      	asrs	r3, r3, #8
 800128a:	3301      	adds	r3, #1
 800128c:	fb03 f302 	mul.w	r3, r3, r2
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2e0>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	f3af 8000 	nop.w
 80012b8:	33333333 	.word	0x33333333
 80012bc:	3fc33333 	.word	0x3fc33333
 80012c0:	147ae148 	.word	0x147ae148
 80012c4:	3ff147ae 	.word	0x3ff147ae
 80012c8:	240002e4 	.word	0x240002e4
 80012cc:	24000000 	.word	0x24000000
 80012d0:	3c8efa35 	.word	0x3c8efa35
 80012d4:	24000004 	.word	0x24000004
 80012d8:	24000008 	.word	0x24000008

080012dc <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0ae      	sub	sp, #184	; 0xb8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80012e6:	edc7 0a08 	vstr	s1, [r7, #32]
 80012ea:	ed87 1a07 	vstr	s2, [r7, #28]
 80012ee:	edc7 1a06 	vstr	s3, [r7, #24]
 80012f2:	ed87 2a05 	vstr	s4, [r7, #20]
 80012f6:	edc7 2a04 	vstr	s5, [r7, #16]
 80012fa:	ed87 3a03 	vstr	s6, [r7, #12]
 80012fe:	edc7 3a02 	vstr	s7, [r7, #8]
 8001302:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001306:	edd7 7a03 	vldr	s15, [r7, #12]
 800130a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	d11d      	bne.n	8001350 <MadgwickAHRSupdate+0x74>
 8001314:	edd7 7a02 	vldr	s15, [r7, #8]
 8001318:	eef5 7a40 	vcmp.f32	s15, #0.0
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d116      	bne.n	8001350 <MadgwickAHRSupdate+0x74>
 8001322:	edd7 7a01 	vldr	s15, [r7, #4]
 8001326:	eef5 7a40 	vcmp.f32	s15, #0.0
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	d10f      	bne.n	8001350 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001330:	edd7 2a04 	vldr	s5, [r7, #16]
 8001334:	ed97 2a05 	vldr	s4, [r7, #20]
 8001338:	edd7 1a06 	vldr	s3, [r7, #24]
 800133c:	ed97 1a07 	vldr	s2, [r7, #28]
 8001340:	edd7 0a08 	vldr	s1, [r7, #32]
 8001344:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001348:	f000 ffd6 	bl	80022f8 <MadgwickAHRSupdateIMU>
		return;
 800134c:	f000 bfb4 	b.w	80022b8 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001350:	4be6      	ldr	r3, [pc, #920]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	eeb1 7a67 	vneg.f32	s14, s15
 800135a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800135e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001362:	4be3      	ldr	r3, [pc, #908]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001364:	edd3 6a00 	vldr	s13, [r3]
 8001368:	edd7 7a08 	vldr	s15, [r7, #32]
 800136c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001370:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001374:	4bdf      	ldr	r3, [pc, #892]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 8001376:	edd3 6a00 	vldr	s13, [r3]
 800137a:	edd7 7a07 	vldr	s15, [r7, #28]
 800137e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001386:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800138a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001392:	4bd9      	ldr	r3, [pc, #868]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001394:	ed93 7a00 	vldr	s14, [r3]
 8001398:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a0:	4bd3      	ldr	r3, [pc, #844]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80013a2:	edd3 6a00 	vldr	s13, [r3]
 80013a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b2:	4bd0      	ldr	r3, [pc, #832]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80013b4:	edd3 6a00 	vldr	s13, [r3]
 80013b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80013bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013cc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80013d0:	4bc9      	ldr	r3, [pc, #804]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013de:	4bc3      	ldr	r3, [pc, #780]	; (80016ec <MadgwickAHRSupdate+0x410>)
 80013e0:	edd3 6a00 	vldr	s13, [r3]
 80013e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f0:	4bc0      	ldr	r3, [pc, #768]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80013f2:	edd3 6a00 	vldr	s13, [r3]
 80013f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001402:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800140e:	4bba      	ldr	r3, [pc, #744]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001410:	ed93 7a00 	vldr	s14, [r3]
 8001414:	edd7 7a07 	vldr	s15, [r7, #28]
 8001418:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141c:	4bb3      	ldr	r3, [pc, #716]	; (80016ec <MadgwickAHRSupdate+0x410>)
 800141e:	edd3 6a00 	vldr	s13, [r3]
 8001422:	edd7 7a08 	vldr	s15, [r7, #32]
 8001426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800142e:	4bb0      	ldr	r3, [pc, #704]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001430:	edd3 6a00 	vldr	s13, [r3]
 8001434:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001440:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001448:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800144c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001458:	d10e      	bne.n	8001478 <MadgwickAHRSupdate+0x19c>
 800145a:	edd7 7a05 	vldr	s15, [r7, #20]
 800145e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	d107      	bne.n	8001478 <MadgwickAHRSupdate+0x19c>
 8001468:	edd7 7a04 	vldr	s15, [r7, #16]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	f000 85a6 	beq.w	8001fc4 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001478:	edd7 7a06 	vldr	s15, [r7, #24]
 800147c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001480:	edd7 7a05 	vldr	s15, [r7, #20]
 8001484:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800148c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001490:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	f001 fb5a 	bl	8002b54 <invSqrt>
 80014a0:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80014a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80014a8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b0:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80014b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80014b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 80014c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80014c8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80014d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f4:	eeb0 0a67 	vmov.f32	s0, s15
 80014f8:	f001 fb2c 	bl	8002b54 <invSqrt>
 80014fc:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001500:	ed97 7a03 	vldr	s14, [r7, #12]
 8001504:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150c:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001510:	ed97 7a02 	vldr	s14, [r7, #8]
 8001514:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001520:	ed97 7a01 	vldr	s14, [r7, #4]
 8001524:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001530:	4b71      	ldr	r3, [pc, #452]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800153a:	ed97 7a03 	vldr	s14, [r7, #12]
 800153e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001542:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001550:	ed97 7a02 	vldr	s14, [r7, #8]
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 800155c:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001566:	ed97 7a01 	vldr	s14, [r7, #4]
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001572:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800157c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001588:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001592:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001596:	4b55      	ldr	r3, [pc, #340]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015a0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80015a4:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015ae:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015bc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80015c0:	4b4d      	ldr	r3, [pc, #308]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015ca:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 80015d8:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001604:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 8001606:	ed93 7a00 	vldr	s14, [r3]
 800160a:	4b38      	ldr	r3, [pc, #224]	; (80016ec <MadgwickAHRSupdate+0x410>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001618:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 800162c:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <MadgwickAHRSupdate+0x41c>)
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001642:	ed93 7a00 	vldr	s14, [r3]
 8001646:	4b29      	ldr	r3, [pc, #164]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001654:	4b25      	ldr	r3, [pc, #148]	; (80016ec <MadgwickAHRSupdate+0x410>)
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001668:	4b20      	ldr	r3, [pc, #128]	; (80016ec <MadgwickAHRSupdate+0x410>)
 800166a:	ed93 7a00 	vldr	s14, [r3]
 800166e:	4b21      	ldr	r3, [pc, #132]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001678:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 800167e:	ed93 7a00 	vldr	s14, [r3]
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 8001692:	ed93 7a00 	vldr	s14, [r3]
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80016b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80016bc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MadgwickAHRSupdate+0x418>)
 80016c6:	edd3 6a00 	vldr	s13, [r3]
 80016ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80016ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MadgwickAHRSupdate+0x414>)
 80016d8:	edd3 6a00 	vldr	s13, [r3]
 80016dc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80016e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e8:	e008      	b.n	80016fc <MadgwickAHRSupdate+0x420>
 80016ea:	bf00      	nop
 80016ec:	24000214 	.word	0x24000214
 80016f0:	24000218 	.word	0x24000218
 80016f4:	2400021c 	.word	0x2400021c
 80016f8:	24000010 	.word	0x24000010
 80016fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001700:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800170c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001710:	edd7 7a02 	vldr	s15, [r7, #8]
 8001714:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001718:	4bf5      	ldr	r3, [pc, #980]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001726:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800172a:	edd7 7a01 	vldr	s15, [r7, #4]
 800172e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001732:	4bf0      	ldr	r3, [pc, #960]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001740:	edd7 6a03 	vldr	s13, [r7, #12]
 8001744:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001750:	edd7 6a03 	vldr	s13, [r7, #12]
 8001754:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001764:	4be3      	ldr	r3, [pc, #908]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001766:	ed93 7a00 	vldr	s14, [r3]
 800176a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800176e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001772:	edd7 6a02 	vldr	s13, [r7, #8]
 8001776:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800177a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001782:	4bdd      	ldr	r3, [pc, #884]	; (8001af8 <MadgwickAHRSupdate+0x81c>)
 8001784:	edd3 6a00 	vldr	s13, [r3]
 8001788:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001790:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001794:	4bd6      	ldr	r3, [pc, #856]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 8001796:	edd3 6a00 	vldr	s13, [r3]
 800179a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800179e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a6:	edd7 6a02 	vldr	s13, [r7, #8]
 80017aa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017b6:	edd7 6a02 	vldr	s13, [r7, #8]
 80017ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c6:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80017ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017d2:	4bc8      	ldr	r3, [pc, #800]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e0:	edd7 6a02 	vldr	s13, [r7, #8]
 80017e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80017f4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017f8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017fc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001800:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800180c:	eeb0 0b47 	vmov.f64	d0, d7
 8001810:	f011 fafe 	bl	8012e10 <sqrt>
 8001814:	eeb0 7b40 	vmov.f64	d7, d0
 8001818:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800181c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001820:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001824:	eeb1 7a67 	vneg.f32	s14, s15
 8001828:	4bb1      	ldr	r3, [pc, #708]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001832:	4bb1      	ldr	r3, [pc, #708]	; (8001af8 <MadgwickAHRSupdate+0x81c>)
 8001834:	edd3 6a00 	vldr	s13, [r3]
 8001838:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800183c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001844:	edd7 6a01 	vldr	s13, [r7, #4]
 8001848:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800184c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001854:	4ba7      	ldr	r3, [pc, #668]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001856:	edd3 6a00 	vldr	s13, [r3]
 800185a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800185e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001866:	edd7 6a01 	vldr	s13, [r7, #4]
 800186a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800186e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001876:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800187a:	edd7 7a02 	vldr	s15, [r7, #8]
 800187e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001882:	4b9c      	ldr	r3, [pc, #624]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001890:	edd7 6a01 	vldr	s13, [r7, #4]
 8001894:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80018a4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 80018b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018bc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 80018c0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018c8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80018cc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80018d0:	eeb1 7a67 	vneg.f32	s14, s15
 80018d4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018dc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80018e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018f4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018f8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018fc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001900:	edd7 7a05 	vldr	s15, [r7, #20]
 8001904:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001908:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001914:	4b76      	ldr	r3, [pc, #472]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 8001916:	edd3 6a00 	vldr	s13, [r3]
 800191a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800191e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001922:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001926:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800192a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800192e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001932:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001936:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800193a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800193e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001942:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001946:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800194a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800194e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001952:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001956:	edd7 7a03 	vldr	s15, [r7, #12]
 800195a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800195e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001962:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001966:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800196a:	eef1 6a67 	vneg.f32	s13, s15
 800196e:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001978:	4b5f      	ldr	r3, [pc, #380]	; (8001af8 <MadgwickAHRSupdate+0x81c>)
 800197a:	ed93 6a00 	vldr	s12, [r3]
 800197e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001982:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001986:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800198a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800198e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001992:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001996:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800199a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800199e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80019a2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019a6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80019aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <MadgwickAHRSupdate+0x814>)
 80019c8:	edd3 6a00 	vldr	s13, [r3]
 80019cc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019d4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80019d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019dc:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019e8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80019ec:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019f0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019f4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019f8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a00:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a04:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001a1c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a20:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a24:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a34:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a40:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a44:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a48:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a54:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <MadgwickAHRSupdate+0x81c>)
 8001a62:	edd3 7a00 	vldr	s15, [r3]
 8001a66:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a6e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a7a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a7e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a86:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <MadgwickAHRSupdate+0x818>)
 8001a9c:	edd3 6a00 	vldr	s13, [r3]
 8001aa0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aa8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001aac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ab0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ab4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ab8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001abc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ac0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ac4:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001ac8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001acc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ad0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ad4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ad8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001adc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aec:	e006      	b.n	8001afc <MadgwickAHRSupdate+0x820>
 8001aee:	bf00      	nop
 8001af0:	24000218 	.word	0x24000218
 8001af4:	2400021c 	.word	0x2400021c
 8001af8:	24000214 	.word	0x24000214
 8001afc:	4bf6      	ldr	r3, [pc, #984]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001afe:	edd3 6a00 	vldr	s13, [r3]
 8001b02:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b0a:	4bf4      	ldr	r3, [pc, #976]	; (8001edc <MadgwickAHRSupdate+0xc00>)
 8001b0c:	ed93 6a00 	vldr	s12, [r3]
 8001b10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b1c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001b20:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b28:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b30:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001b34:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b38:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001b3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b44:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b48:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b58:	4be1      	ldr	r3, [pc, #900]	; (8001ee0 <MadgwickAHRSupdate+0xc04>)
 8001b5a:	edd3 6a00 	vldr	s13, [r3]
 8001b5e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b66:	4bdf      	ldr	r3, [pc, #892]	; (8001ee4 <MadgwickAHRSupdate+0xc08>)
 8001b68:	ed93 6a00 	vldr	s12, [r3]
 8001b6c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b78:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b7c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b84:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b8c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b90:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b94:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ba0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ba4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ba8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bac:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001bc0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001bc4:	eeb1 7a67 	vneg.f32	s14, s15
 8001bc8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bcc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bd0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bd4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bdc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001be8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bec:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001bf0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bf4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bfc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001c00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c08:	4bb3      	ldr	r3, [pc, #716]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c12:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c16:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c1e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c22:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c26:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c2e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c32:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c36:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c42:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c46:	eef1 6a67 	vneg.f32	s13, s15
 8001c4a:	4ba3      	ldr	r3, [pc, #652]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c54:	4ba1      	ldr	r3, [pc, #644]	; (8001edc <MadgwickAHRSupdate+0xc00>)
 8001c56:	ed93 6a00 	vldr	s12, [r3]
 8001c5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c62:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c66:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c6a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c6e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c72:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c76:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c7a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c7e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c82:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c86:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c8a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c8e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c92:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c96:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ca2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001caa:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <MadgwickAHRSupdate+0xc08>)
 8001cac:	edd3 6a00 	vldr	s13, [r3]
 8001cb0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cb8:	4b89      	ldr	r3, [pc, #548]	; (8001ee0 <MadgwickAHRSupdate+0xc04>)
 8001cba:	ed93 6a00 	vldr	s12, [r3]
 8001cbe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cca:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001cce:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001cd2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001cd6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cda:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cde:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001ce2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ce6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001cea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cf2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cf6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cfa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d06:	4b75      	ldr	r3, [pc, #468]	; (8001edc <MadgwickAHRSupdate+0xc00>)
 8001d08:	edd3 6a00 	vldr	s13, [r3]
 8001d0c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d14:	4b70      	ldr	r3, [pc, #448]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001d16:	ed93 6a00 	vldr	s12, [r3]
 8001d1a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d22:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d26:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001d2a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d2e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d32:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d36:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d3a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001d3e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d42:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d46:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d4a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d6e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d72:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d76:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d86:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d92:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d96:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d9a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001da2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001da6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001db6:	eef1 6a67 	vneg.f32	s13, s15
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <MadgwickAHRSupdate+0xc04>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dc4:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <MadgwickAHRSupdate+0xc08>)
 8001dc6:	ed93 6a00 	vldr	s12, [r3]
 8001dca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dd2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dd6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001dda:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001dde:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001de2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001de6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001df2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001df6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dfa:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001dfe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e02:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e06:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e0e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e1a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e1e:	eef1 6a67 	vneg.f32	s13, s15
 8001e22:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <MadgwickAHRSupdate+0xc00>)
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <MadgwickAHRSupdate+0xbfc>)
 8001e2e:	ed93 6a00 	vldr	s12, [r3]
 8001e32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e3e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001e42:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e46:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e4a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e52:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e56:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e5a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e62:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e66:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <MadgwickAHRSupdate+0xc08>)
 8001e7c:	edd3 6a00 	vldr	s13, [r3]
 8001e80:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e88:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e8c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e94:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e9c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ea0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ea4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ea8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001eac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001eb0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001eb4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001eb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ecc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001ed0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ed4:	e008      	b.n	8001ee8 <MadgwickAHRSupdate+0xc0c>
 8001ed6:	bf00      	nop
 8001ed8:	24000218 	.word	0x24000218
 8001edc:	24000010 	.word	0x24000010
 8001ee0:	2400021c 	.word	0x2400021c
 8001ee4:	24000214 	.word	0x24000214
 8001ee8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001eec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ef0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001efc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f10:	eeb0 0a67 	vmov.f32	s0, s15
 8001f14:	f000 fe1e 	bl	8002b54 <invSqrt>
 8001f18:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001f1c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f20:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f28:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001f2c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001f30:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f38:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001f3c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f40:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f48:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001f4c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001f50:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f5c:	4bd8      	ldr	r3, [pc, #864]	; (80022c0 <MadgwickAHRSupdate+0xfe4>)
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f72:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001f76:	4bd2      	ldr	r3, [pc, #840]	; (80022c0 <MadgwickAHRSupdate+0xfe4>)
 8001f78:	ed93 7a00 	vldr	s14, [r3]
 8001f7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f84:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f90:	4bcb      	ldr	r3, [pc, #812]	; (80022c0 <MadgwickAHRSupdate+0xfe4>)
 8001f92:	ed93 7a00 	vldr	s14, [r3]
 8001f96:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001faa:	4bc5      	ldr	r3, [pc, #788]	; (80022c0 <MadgwickAHRSupdate+0xfe4>)
 8001fac:	ed93 7a00 	vldr	s14, [r3]
 8001fb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001fc4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001fc8:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80022c4 <MadgwickAHRSupdate+0xfe8>
 8001fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd0:	4bbd      	ldr	r3, [pc, #756]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	4bbb      	ldr	r3, [pc, #748]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8001fdc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001fe0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001fe4:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80022c4 <MadgwickAHRSupdate+0xfe8>
 8001fe8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fec:	4bb7      	ldr	r3, [pc, #732]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff6:	4bb5      	ldr	r3, [pc, #724]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001ffc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002000:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80022c4 <MadgwickAHRSupdate+0xfe8>
 8002004:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002008:	4bb1      	ldr	r3, [pc, #708]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	4baf      	ldr	r3, [pc, #700]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 8002014:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002018:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800201c:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80022c4 <MadgwickAHRSupdate+0xfe8>
 8002020:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002024:	4bab      	ldr	r3, [pc, #684]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202e:	4ba9      	ldr	r3, [pc, #676]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 8002030:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002034:	4ba4      	ldr	r3, [pc, #656]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8002036:	ed93 7a00 	vldr	s14, [r3]
 800203a:	4ba3      	ldr	r3, [pc, #652]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002044:	4ba1      	ldr	r3, [pc, #644]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002046:	edd3 6a00 	vldr	s13, [r3]
 800204a:	4ba0      	ldr	r3, [pc, #640]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002058:	4b9d      	ldr	r3, [pc, #628]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 800205a:	edd3 6a00 	vldr	s13, [r3]
 800205e:	4b9c      	ldr	r3, [pc, #624]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002068:	ee37 7a27 	vadd.f32	s14, s14, s15
 800206c:	4b99      	ldr	r3, [pc, #612]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 800206e:	edd3 6a00 	vldr	s13, [r3]
 8002072:	4b98      	ldr	r3, [pc, #608]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002080:	eeb0 0a67 	vmov.f32	s0, s15
 8002084:	f000 fd66 	bl	8002b54 <invSqrt>
 8002088:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 800208c:	4b8e      	ldr	r3, [pc, #568]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 800208e:	ed93 7a00 	vldr	s14, [r3]
 8002092:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 800209c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80020a0:	4b8a      	ldr	r3, [pc, #552]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	4b87      	ldr	r3, [pc, #540]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80020b0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80020b4:	4b86      	ldr	r3, [pc, #536]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80020b6:	ed93 7a00 	vldr	s14, [r3]
 80020ba:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c2:	4b83      	ldr	r3, [pc, #524]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80020c4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80020c8:	4b82      	ldr	r3, [pc, #520]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d6:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80020d8:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80020dc:	4b7a      	ldr	r3, [pc, #488]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	4b7a      	ldr	r3, [pc, #488]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ec:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80020ee:	edd3 6a00 	vldr	s13, [r3]
 80020f2:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fc:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002100:	4b72      	ldr	r3, [pc, #456]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002102:	ed93 7a00 	vldr	s14, [r3]
 8002106:	4b71      	ldr	r3, [pc, #452]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002114:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002118:	4b6d      	ldr	r3, [pc, #436]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	4b6c      	ldr	r3, [pc, #432]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212c:	eef0 0a67 	vmov.f32	s1, s15
 8002130:	eeb0 0a46 	vmov.f32	s0, s12
 8002134:	f010 fec8 	bl	8012ec8 <atan2f>
 8002138:	eef0 7a40 	vmov.f32	s15, s0
 800213c:	4b66      	ldr	r3, [pc, #408]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 800213e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002142:	4b62      	ldr	r3, [pc, #392]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002144:	ed93 7a00 	vldr	s14, [r3]
 8002148:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8002154:	edd3 6a00 	vldr	s13, [r3]
 8002158:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002166:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800216a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800216e:	eeb0 0a67 	vmov.f32	s0, s15
 8002172:	f010 fe77 	bl	8012e64 <asinf>
 8002176:	eef0 7a40 	vmov.f32	s15, s0
 800217a:	4b58      	ldr	r3, [pc, #352]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800217c:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002180:	4b52      	ldr	r3, [pc, #328]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 8002182:	ed93 7a00 	vldr	s14, [r3]
 8002186:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002190:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 8002192:	edd3 6a00 	vldr	s13, [r3]
 8002196:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021ac:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 80021ae:	ed93 6a00 	vldr	s12, [r3]
 80021b2:	4b45      	ldr	r3, [pc, #276]	; (80022c8 <MadgwickAHRSupdate+0xfec>)
 80021b4:	edd3 6a00 	vldr	s13, [r3]
 80021b8:	ee26 6a26 	vmul.f32	s12, s12, s13
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80021be:	edd3 5a00 	vldr	s11, [r3]
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <MadgwickAHRSupdate+0xff0>)
 80021c4:	edd3 6a00 	vldr	s13, [r3]
 80021c8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021cc:	ee36 6a26 	vadd.f32	s12, s12, s13
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80021d2:	edd3 5a00 	vldr	s11, [r3]
 80021d6:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <MadgwickAHRSupdate+0xff4>)
 80021d8:	edd3 6a00 	vldr	s13, [r3]
 80021dc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021e0:	ee36 6a66 	vsub.f32	s12, s12, s13
 80021e4:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80021e6:	edd3 5a00 	vldr	s11, [r3]
 80021ea:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <MadgwickAHRSupdate+0xff8>)
 80021ec:	edd3 6a00 	vldr	s13, [r3]
 80021f0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021f4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80021f8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021fc:	eeb0 1b46 	vmov.f64	d1, d6
 8002200:	eeb0 0b47 	vmov.f64	d0, d7
 8002204:	f010 fe00 	bl	8012e08 <atan2>
 8002208:	eeb0 7b40 	vmov.f64	d7, d0
 800220c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002210:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002212:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80022e4 <MadgwickAHRSupdate+0x1008>
 8002220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002224:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 8002226:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 800222a:	4b2c      	ldr	r3, [pc, #176]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022e4 <MadgwickAHRSupdate+0x1008>
 8002234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002238:	4b28      	ldr	r3, [pc, #160]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800223a:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80022e4 <MadgwickAHRSupdate+0x1008>
 8002248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224c:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 800224e:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002252:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 8002254:	ed93 7a00 	vldr	s14, [r3]
 8002258:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <MadgwickAHRSupdate+0x100c>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <MadgwickAHRSupdate+0xffc>)
 8002264:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <MadgwickAHRSupdate+0x1010>)
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MadgwickAHRSupdate+0x1000>)
 800227a:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002280:	ed93 7a00 	vldr	s14, [r3]
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <MadgwickAHRSupdate+0x1014>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002290:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d509      	bpl.n	80022b8 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 80022a6:	edd3 7a00 	vldr	s15, [r3]
 80022aa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022f4 <MadgwickAHRSupdate+0x1018>
 80022ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MadgwickAHRSupdate+0x1004>)
 80022b4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80022b8:	37b8      	adds	r7, #184	; 0xb8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2400000c 	.word	0x2400000c
 80022c4:	3b03126f 	.word	0x3b03126f
 80022c8:	24000010 	.word	0x24000010
 80022cc:	24000214 	.word	0x24000214
 80022d0:	24000218 	.word	0x24000218
 80022d4:	2400021c 	.word	0x2400021c
 80022d8:	240002fc 	.word	0x240002fc
 80022dc:	24000300 	.word	0x24000300
 80022e0:	240002f8 	.word	0x240002f8
 80022e4:	42652ee1 	.word	0x42652ee1
 80022e8:	24000220 	.word	0x24000220
 80022ec:	24000224 	.word	0x24000224
 80022f0:	24000228 	.word	0x24000228
 80022f4:	43b40000 	.word	0x43b40000

080022f8 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b09c      	sub	sp, #112	; 0x70
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8002302:	edc7 0a04 	vstr	s1, [r7, #16]
 8002306:	ed87 1a03 	vstr	s2, [r7, #12]
 800230a:	edc7 1a02 	vstr	s3, [r7, #8]
 800230e:	ed87 2a01 	vstr	s4, [r7, #4]
 8002312:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002316:	4bee      	ldr	r3, [pc, #952]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	eeb1 7a67 	vneg.f32	s14, s15
 8002320:	edd7 7a05 	vldr	s15, [r7, #20]
 8002324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002328:	4bea      	ldr	r3, [pc, #936]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 800232a:	edd3 6a00 	vldr	s13, [r3]
 800232e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800233a:	4be7      	ldr	r3, [pc, #924]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 800233c:	edd3 6a00 	vldr	s13, [r3]
 8002340:	edd7 7a03 	vldr	s15, [r7, #12]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002354:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002358:	4be0      	ldr	r3, [pc, #896]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 800235a:	ed93 7a00 	vldr	s14, [r3]
 800235e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002366:	4bdb      	ldr	r3, [pc, #876]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 8002368:	edd3 6a00 	vldr	s13, [r3]
 800236c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002378:	4bd7      	ldr	r3, [pc, #860]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 800237a:	edd3 6a00 	vldr	s13, [r3]
 800237e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800238e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002392:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002396:	4bd1      	ldr	r3, [pc, #836]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 8002398:	ed93 7a00 	vldr	s14, [r3]
 800239c:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a4:	4bca      	ldr	r3, [pc, #808]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80023a6:	edd3 6a00 	vldr	s13, [r3]
 80023aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80023ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b6:	4bc8      	ldr	r3, [pc, #800]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 80023b8:	edd3 6a00 	vldr	s13, [r3]
 80023bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80023c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80023d4:	4bc1      	ldr	r3, [pc, #772]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 80023d6:	ed93 7a00 	vldr	s14, [r3]
 80023da:	edd7 7a03 	vldr	s15, [r7, #12]
 80023de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e2:	4bbb      	ldr	r3, [pc, #748]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80023e4:	edd3 6a00 	vldr	s13, [r3]
 80023e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f4:	4bb7      	ldr	r3, [pc, #732]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 80023f6:	edd3 6a00 	vldr	s13, [r3]
 80023fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80023fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002406:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002412:	edd7 7a02 	vldr	s15, [r7, #8]
 8002416:	eef5 7a40 	vcmp.f32	s15, #0.0
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	d10e      	bne.n	800243e <MadgwickAHRSupdateIMU+0x146>
 8002420:	edd7 7a01 	vldr	s15, [r7, #4]
 8002424:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	d107      	bne.n	800243e <MadgwickAHRSupdateIMU+0x146>
 800242e:	edd7 7a00 	vldr	s15, [r7]
 8002432:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	f000 81e5 	beq.w	8002808 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800243e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002442:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002446:	edd7 7a01 	vldr	s15, [r7, #4]
 800244a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800244e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002452:	edd7 7a00 	vldr	s15, [r7]
 8002456:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800245a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245e:	eeb0 0a67 	vmov.f32	s0, s15
 8002462:	f000 fb77 	bl	8002b54 <invSqrt>
 8002466:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 800246a:	ed97 7a02 	vldr	s14, [r7, #8]
 800246e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 800247a:	ed97 7a01 	vldr	s14, [r7, #4]
 800247e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002486:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 800248a:	ed97 7a00 	vldr	s14, [r7]
 800248e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800249a:	4b90      	ldr	r3, [pc, #576]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024a4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80024a8:	4b89      	ldr	r3, [pc, #548]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024b2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80024b6:	4b87      	ldr	r3, [pc, #540]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024c0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 80024c4:	4b84      	ldr	r3, [pc, #528]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 80024e4:	4b7a      	ldr	r3, [pc, #488]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80024f6:	4b77      	ldr	r3, [pc, #476]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002504:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8002508:	4b71      	ldr	r3, [pc, #452]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 800250a:	edd3 7a00 	vldr	s15, [r3]
 800250e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002516:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 800251a:	4b6e      	ldr	r3, [pc, #440]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002528:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 800252c:	4b6b      	ldr	r3, [pc, #428]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <MadgwickAHRSupdateIMU+0x3e4>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8002540:	4b63      	ldr	r3, [pc, #396]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002550:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002554:	4b5f      	ldr	r3, [pc, #380]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 8002556:	ed93 7a00 	vldr	s14, [r3]
 800255a:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002568:	4b5b      	ldr	r3, [pc, #364]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	4b5a      	ldr	r3, [pc, #360]	; (80026d8 <MadgwickAHRSupdateIMU+0x3e0>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002578:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800257c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002580:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002588:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800258c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002598:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800259c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80025ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80025bc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80025c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80025cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025dc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80025e0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025e4:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <MadgwickAHRSupdateIMU+0x3d8>)
 80025e6:	edd3 7a00 	vldr	s15, [r3]
 80025ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f2:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80025f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002602:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800260a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800260e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800261a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800261e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002626:	ee37 7a27 	vadd.f32	s14, s14, s15
 800262a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800262e:	edd7 7a00 	vldr	s15, [r7]
 8002632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800263e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002642:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002646:	ee27 7a87 	vmul.f32	s14, s15, s14
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <MadgwickAHRSupdateIMU+0x3dc>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002654:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002658:	edd7 7a02 	vldr	s15, [r7, #8]
 800265c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002664:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002668:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800266c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002674:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002678:	edd7 7a01 	vldr	s15, [r7, #4]
 800267c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002684:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800268c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002690:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002698:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80026a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ac:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80026b0:	edd7 7a00 	vldr	s15, [r7]
 80026b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80026c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026c4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80026c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026cc:	e008      	b.n	80026e0 <MadgwickAHRSupdateIMU+0x3e8>
 80026ce:	bf00      	nop
 80026d0:	24000214 	.word	0x24000214
 80026d4:	24000218 	.word	0x24000218
 80026d8:	2400021c 	.word	0x2400021c
 80026dc:	24000010 	.word	0x24000010
 80026e0:	4be0      	ldr	r3, [pc, #896]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ea:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80026ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026fe:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002702:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002706:	4bd7      	ldr	r3, [pc, #860]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002714:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002718:	edd7 7a01 	vldr	s15, [r7, #4]
 800271c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002724:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002728:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800272c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002730:	edd7 7a08 	vldr	s15, [r7, #32]
 8002734:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800273c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002740:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002748:	edd7 7a06 	vldr	s15, [r7, #24]
 800274c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002754:	eeb0 0a67 	vmov.f32	s0, s15
 8002758:	f000 f9fc 	bl	8002b54 <invSqrt>
 800275c:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8002760:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002764:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8002770:	ed97 7a08 	vldr	s14, [r7, #32]
 8002774:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277c:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002780:	ed97 7a07 	vldr	s14, [r7, #28]
 8002784:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278c:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002790:	ed97 7a06 	vldr	s14, [r7, #24]
 8002794:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279c:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 80027a0:	4bb1      	ldr	r3, [pc, #708]	; (8002a68 <MadgwickAHRSupdateIMU+0x770>)
 80027a2:	ed93 7a00 	vldr	s14, [r3]
 80027a6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80027b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 80027ba:	4bab      	ldr	r3, [pc, #684]	; (8002a68 <MadgwickAHRSupdateIMU+0x770>)
 80027bc:	ed93 7a00 	vldr	s14, [r3]
 80027c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80027c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80027cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 80027d4:	4ba4      	ldr	r3, [pc, #656]	; (8002a68 <MadgwickAHRSupdateIMU+0x770>)
 80027d6:	ed93 7a00 	vldr	s14, [r3]
 80027da:	edd7 7a07 	vldr	s15, [r7, #28]
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80027e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ea:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 80027ee:	4b9e      	ldr	r3, [pc, #632]	; (8002a68 <MadgwickAHRSupdateIMU+0x770>)
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002804:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002808:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800280c:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a6c <MadgwickAHRSupdateIMU+0x774>
 8002810:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002814:	4b96      	ldr	r3, [pc, #600]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	4b94      	ldr	r3, [pc, #592]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002824:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002828:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a6c <MadgwickAHRSupdateIMU+0x774>
 800282c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002830:	4b90      	ldr	r3, [pc, #576]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283a:	4b8e      	ldr	r3, [pc, #568]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 800283c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002840:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002844:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a6c <MadgwickAHRSupdateIMU+0x774>
 8002848:	ee27 7a87 	vmul.f32	s14, s15, s14
 800284c:	4b8a      	ldr	r3, [pc, #552]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	4b88      	ldr	r3, [pc, #544]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002858:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 800285c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002860:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a6c <MadgwickAHRSupdateIMU+0x774>
 8002864:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002868:	4b7e      	ldr	r3, [pc, #504]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002872:	4b7c      	ldr	r3, [pc, #496]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002874:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002878:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 800287a:	ed93 7a00 	vldr	s14, [r3]
 800287e:	4b7c      	ldr	r3, [pc, #496]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002888:	4b7a      	ldr	r3, [pc, #488]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 800288a:	edd3 6a00 	vldr	s13, [r3]
 800288e:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800289c:	4b76      	ldr	r3, [pc, #472]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 800289e:	edd3 6a00 	vldr	s13, [r3]
 80028a2:	4b75      	ldr	r3, [pc, #468]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b0:	4b6c      	ldr	r3, [pc, #432]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 80028b2:	edd3 6a00 	vldr	s13, [r3]
 80028b6:	4b6b      	ldr	r3, [pc, #428]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c4:	eeb0 0a67 	vmov.f32	s0, s15
 80028c8:	f000 f944 	bl	8002b54 <invSqrt>
 80028cc:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80028d0:	4b67      	ldr	r3, [pc, #412]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80028d2:	ed93 7a00 	vldr	s14, [r3]
 80028d6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028de:	4b64      	ldr	r3, [pc, #400]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80028e0:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80028e4:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 80028e6:	ed93 7a00 	vldr	s14, [r3]
 80028ea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f2:	4b60      	ldr	r3, [pc, #384]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 80028f4:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80028f8:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 80028fa:	ed93 7a00 	vldr	s14, [r3]
 80028fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	4b5c      	ldr	r3, [pc, #368]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002908:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800290c:	4b55      	ldr	r3, [pc, #340]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 800290e:	ed93 7a00 	vldr	s14, [r3]
 8002912:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291a:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 800291c:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002930:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002932:	edd3 6a00 	vldr	s13, [r3]
 8002936:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002940:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002944:	4b4b      	ldr	r3, [pc, #300]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002946:	ed93 7a00 	vldr	s14, [r3]
 800294a:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002954:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002958:	ee37 7a67 	vsub.f32	s14, s14, s15
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 800295e:	edd3 6a00 	vldr	s13, [r3]
 8002962:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002970:	eef0 0a67 	vmov.f32	s1, s15
 8002974:	eeb0 0a46 	vmov.f32	s0, s12
 8002978:	f010 faa6 	bl	8012ec8 <atan2f>
 800297c:	eef0 7a40 	vmov.f32	s15, s0
 8002980:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <MadgwickAHRSupdateIMU+0x784>)
 8002982:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002986:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002988:	ed93 7a00 	vldr	s14, [r3]
 800298c:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 8002998:	edd3 6a00 	vldr	s13, [r3]
 800299c:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029aa:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80029ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b2:	eeb0 0a67 	vmov.f32	s0, s15
 80029b6:	f010 fa55 	bl	8012e64 <asinf>
 80029ba:	eef0 7a40 	vmov.f32	s15, s0
 80029be:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <MadgwickAHRSupdateIMU+0x788>)
 80029c0:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 80029c4:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 80029c6:	ed93 7a00 	vldr	s14, [r3]
 80029ca:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 80029cc:	edd3 7a00 	vldr	s15, [r3]
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80029d6:	edd3 6a00 	vldr	s13, [r3]
 80029da:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029f0:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80029f2:	ed93 6a00 	vldr	s12, [r3]
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <MadgwickAHRSupdateIMU+0x778>)
 80029f8:	edd3 6a00 	vldr	s13, [r3]
 80029fc:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002a02:	edd3 5a00 	vldr	s11, [r3]
 8002a06:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <MadgwickAHRSupdateIMU+0x77c>)
 8002a08:	edd3 6a00 	vldr	s13, [r3]
 8002a0c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a10:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002a14:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002a16:	edd3 5a00 	vldr	s11, [r3]
 8002a1a:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <MadgwickAHRSupdateIMU+0x780>)
 8002a1c:	edd3 6a00 	vldr	s13, [r3]
 8002a20:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a24:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002a2a:	edd3 5a00 	vldr	s11, [r3]
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <MadgwickAHRSupdateIMU+0x76c>)
 8002a30:	edd3 6a00 	vldr	s13, [r3]
 8002a34:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a38:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002a3c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002a40:	eeb0 1b46 	vmov.f64	d1, d6
 8002a44:	eeb0 0b47 	vmov.f64	d0, d7
 8002a48:	f010 f9de 	bl	8012e08 <atan2>
 8002a4c:	eeb0 7b40 	vmov.f64	d7, d0
 8002a50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <MadgwickAHRSupdateIMU+0x78c>)
 8002a56:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MadgwickAHRSupdateIMU+0x784>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	e014      	b.n	8002a8c <MadgwickAHRSupdateIMU+0x794>
 8002a62:	bf00      	nop
 8002a64:	2400021c 	.word	0x2400021c
 8002a68:	2400000c 	.word	0x2400000c
 8002a6c:	3b03126f 	.word	0x3b03126f
 8002a70:	24000010 	.word	0x24000010
 8002a74:	24000214 	.word	0x24000214
 8002a78:	24000218 	.word	0x24000218
 8002a7c:	240002fc 	.word	0x240002fc
 8002a80:	24000300 	.word	0x24000300
 8002a84:	240002f8 	.word	0x240002f8
 8002a88:	42652ee1 	.word	0x42652ee1
 8002a8c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002a88 <MadgwickAHRSupdateIMU+0x790>
 8002a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <MadgwickAHRSupdateIMU+0x83c>)
 8002a96:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002a9a:	4b27      	ldr	r3, [pc, #156]	; (8002b38 <MadgwickAHRSupdateIMU+0x840>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b3c <MadgwickAHRSupdateIMU+0x844>
 8002aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <MadgwickAHRSupdateIMU+0x840>)
 8002aaa:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002aae:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b3c <MadgwickAHRSupdateIMU+0x844>
 8002ab8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002abe:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <MadgwickAHRSupdateIMU+0x83c>)
 8002ac4:	ed93 7a00 	vldr	s14, [r3]
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MadgwickAHRSupdateIMU+0x84c>)
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <MadgwickAHRSupdateIMU+0x83c>)
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <MadgwickAHRSupdateIMU+0x840>)
 8002ada:	ed93 7a00 	vldr	s14, [r3]
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <MadgwickAHRSupdateIMU+0x850>)
 8002ae0:	edd3 7a00 	vldr	s15, [r3]
 8002ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MadgwickAHRSupdateIMU+0x840>)
 8002aea:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002af0:	ed93 7a00 	vldr	s14, [r3]
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <MadgwickAHRSupdateIMU+0x854>)
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002b00:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	d400      	bmi.n	8002b16 <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002b14:	e009      	b.n	8002b2a <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b50 <MadgwickAHRSupdateIMU+0x858>
 8002b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <MadgwickAHRSupdateIMU+0x848>)
 8002b26:	edc3 7a00 	vstr	s15, [r3]
}
 8002b2a:	bf00      	nop
 8002b2c:	3770      	adds	r7, #112	; 0x70
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	240002fc 	.word	0x240002fc
 8002b38:	24000300 	.word	0x24000300
 8002b3c:	42652ee1 	.word	0x42652ee1
 8002b40:	240002f8 	.word	0x240002f8
 8002b44:	24000220 	.word	0x24000220
 8002b48:	24000224 	.word	0x24000224
 8002b4c:	24000228 	.word	0x24000228
 8002b50:	43b40000 	.word	0x43b40000

08002b54 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b72:	f107 0310 	add.w	r3, r7, #16
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	105a      	asrs	r2, r3, #1
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <invSqrt+0x74>)
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b98:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ba8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	ee07 3a90 	vmov	s15, r3
}
 8002bba:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	5f3759df 	.word	0x5f3759df

08002bcc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <_write+0x24>)
 8002be2:	f00b fb07 	bl	800e1f4 <HAL_UART_Transmit_DMA>
}
 8002be6:	bf00      	nop
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	24000440 	.word	0x24000440

08002bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf8:	b088      	sub	sp, #32
 8002bfa:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bfc:	f001 fec4 	bl	8004988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c00:	f000 f9b4 	bl	8002f6c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c04:	f000 fa30 	bl	8003068 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c08:	f000 fbde 	bl	80033c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c0c:	f000 fbac 	bl	8003368 <MX_DMA_Init>
  MX_TIM7_Init();
 8002c10:	f000 fadc 	bl	80031cc <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002c14:	f000 fb10 	bl	8003238 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002c18:	f000 fa42 	bl	80030a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c1c:	f000 fa80 	bl	8003120 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c20:	f000 fb56 	bl	80032d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8002c24:	48b8      	ldr	r0, [pc, #736]	; (8002f08 <main+0x314>)
 8002c26:	f00a ff57 	bl	800dad8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	49b7      	ldr	r1, [pc, #732]	; (8002f0c <main+0x318>)
 8002c2e:	48b8      	ldr	r0, [pc, #736]	; (8002f10 <main+0x31c>)
 8002c30:	f00b fa9a 	bl	800e168 <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&huart2, &uart2_rx_data, 1);
 8002c34:	2201      	movs	r2, #1
 8002c36:	49b7      	ldr	r1, [pc, #732]	; (8002f14 <main+0x320>)
 8002c38:	48b7      	ldr	r0, [pc, #732]	; (8002f18 <main+0x324>)
 8002c3a:	f00b fb5b 	bl	800e2f4 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Receiver Check
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002c3e:	e007      	b.n	8002c50 <main+0x5c>
	{
		HAL_Delay(500);
 8002c40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c44:	f001 ff32 	bl	8004aac <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002c48:	2102      	movs	r1, #2
 8002c4a:	48b4      	ldr	r0, [pc, #720]	; (8002f1c <main+0x328>)
 8002c4c:	f005 f88b 	bl	8007d66 <HAL_GPIO_TogglePin>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002c50:	4bb3      	ldr	r3, [pc, #716]	; (8002f20 <main+0x32c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 f901 	bl	8003e5c <Is_iBus_Received>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0ef      	beq.n	8002c40 <main+0x4c>
	}

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c60:	e009      	b.n	8002c76 <main+0x82>
	{
		if(tim1_20ms_flag == 1)
 8002c62:	4bb0      	ldr	r3, [pc, #704]	; (8002f24 <main+0x330>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d105      	bne.n	8002c76 <main+0x82>
		{
			tim1_20ms_flag = 0;
 8002c6a:	4bae      	ldr	r3, [pc, #696]	; (8002f24 <main+0x330>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002c70:	48ad      	ldr	r0, [pc, #692]	; (8002f28 <main+0x334>)
 8002c72:	f00e f8c5 	bl	8010e00 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c76:	2303      	movs	r3, #3
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	2103      	movs	r1, #3
 8002c80:	48aa      	ldr	r0, [pc, #680]	; (8002f2c <main+0x338>)
 8002c82:	f7fd fded 	bl	8000860 <MPU9250_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ea      	beq.n	8002c62 <main+0x6e>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002c8c:	48a7      	ldr	r0, [pc, #668]	; (8002f2c <main+0x338>)
 8002c8e:	f7fd fecf 	bl	8000a30 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002c92:	e009      	b.n	8002ca8 <main+0xb4>
	{
		if(tim1_20ms_flag == 1)
 8002c94:	4ba3      	ldr	r3, [pc, #652]	; (8002f24 <main+0x330>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <main+0xb4>
		{
			tim1_20ms_flag = 0;
 8002c9c:	4ba1      	ldr	r3, [pc, #644]	; (8002f24 <main+0x330>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002ca2:	48a3      	ldr	r0, [pc, #652]	; (8002f30 <main+0x33c>)
 8002ca4:	f00e f8ac 	bl	8010e00 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002ca8:	49a2      	ldr	r1, [pc, #648]	; (8002f34 <main+0x340>)
 8002caa:	48a0      	ldr	r0, [pc, #640]	; (8002f2c <main+0x338>)
 8002cac:	f7fd ff40 	bl	8000b30 <MPU9250_AK8963_Setup>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <main+0xa0>
		}
	}
	MPU9250_Master(&hi2c1);
 8002cb6:	489d      	ldr	r0, [pc, #628]	; (8002f2c <main+0x338>)
 8002cb8:	f7fd fee8 	bl	8000a8c <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002cbc:	489b      	ldr	r0, [pc, #620]	; (8002f2c <main+0x338>)
 8002cbe:	f7fd ff8d 	bl	8000bdc <MPU9250_Slave0_Enable>


	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002cc2:	f001 fb31 	bl	8004328 <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002cc6:	230c      	movs	r3, #12
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2100      	movs	r1, #0
 8002ccc:	489a      	ldr	r0, [pc, #616]	; (8002f38 <main+0x344>)
 8002cce:	f001 fdcf 	bl	8004870 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002cd2:	4b99      	ldr	r3, [pc, #612]	; (8002f38 <main+0x344>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a97      	ldr	r2, [pc, #604]	; (8002f34 <main+0x340>)
 8002cd8:	65d3      	str	r3, [r2, #92]	; 0x5c
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002cda:	4b98      	ldr	r3, [pc, #608]	; (8002f3c <main+0x348>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a95      	ldr	r2, [pc, #596]	; (8002f34 <main+0x340>)
 8002ce0:	6613      	str	r3, [r2, #96]	; 0x60
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002ce2:	4b97      	ldr	r3, [pc, #604]	; (8002f40 <main+0x34c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a93      	ldr	r2, [pc, #588]	; (8002f34 <main+0x340>)
 8002ce8:	6653      	str	r3, [r2, #100]	; 0x64

	while (1)
	{
		Receive_Command();
 8002cea:	f001 f85f 	bl	8003dac <Receive_Command>
		Compass_Calibration(mag_calibration_enable);
 8002cee:	4b95      	ldr	r3, [pc, #596]	; (8002f44 <main+0x350>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fbd0 	bl	8003498 <Compass_Calibration>

		Is_iBus_Received(ibus_rx_cplt_flag);
 8002cf8:	4b89      	ldr	r3, [pc, #548]	; (8002f20 <main+0x32c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 f8ad 	bl	8003e5c <Is_iBus_Received>

		//Read MPU9250 + Motor Control
		if(tim1_2ms_flag == 1)
 8002d02:	4b91      	ldr	r3, [pc, #580]	; (8002f48 <main+0x354>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d133      	bne.n	8002d72 <main+0x17e>
		{
			tim1_2ms_flag = 0;
 8002d0a:	4b8f      	ldr	r3, [pc, #572]	; (8002f48 <main+0x354>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002d10:	4886      	ldr	r0, [pc, #536]	; (8002f2c <main+0x338>)
 8002d12:	f7fd ffa3 	bl	8000c5c <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002d16:	4887      	ldr	r0, [pc, #540]	; (8002f34 <main+0x340>)
 8002d18:	f7fd ffb6 	bl	8000c88 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8002d1c:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <main+0x340>)
 8002d1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d22:	4b84      	ldr	r3, [pc, #528]	; (8002f34 <main+0x340>)
 8002d24:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d28:	4b82      	ldr	r3, [pc, #520]	; (8002f34 <main+0x340>)
 8002d2a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002d2e:	4b81      	ldr	r3, [pc, #516]	; (8002f34 <main+0x340>)
 8002d30:	ed93 6a02 	vldr	s12, [r3, #8]
 8002d34:	4b7f      	ldr	r3, [pc, #508]	; (8002f34 <main+0x340>)
 8002d36:	edd3 5a03 	vldr	s11, [r3, #12]
 8002d3a:	4b7e      	ldr	r3, [pc, #504]	; (8002f34 <main+0x340>)
 8002d3c:	ed93 5a04 	vldr	s10, [r3, #16]
 8002d40:	4b7c      	ldr	r3, [pc, #496]	; (8002f34 <main+0x340>)
 8002d42:	edd3 4a1a 	vldr	s9, [r3, #104]	; 0x68
 8002d46:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <main+0x340>)
 8002d48:	edd3 3a1b 	vldr	s7, [r3, #108]	; 0x6c
 8002d4c:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <main+0x340>)
 8002d4e:	ed93 4a1c 	vldr	s8, [r3, #112]	; 0x70
 8002d52:	eeb0 3a64 	vmov.f32	s6, s9
 8002d56:	eef0 2a45 	vmov.f32	s5, s10
 8002d5a:	eeb0 2a65 	vmov.f32	s4, s11
 8002d5e:	eef0 1a46 	vmov.f32	s3, s12
 8002d62:	eeb0 1a66 	vmov.f32	s2, s13
 8002d66:	eef0 0a47 	vmov.f32	s1, s14
 8002d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6e:	f7fe fab5 	bl	80012dc <MadgwickAHRSupdate>
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 8002d72:	4b6c      	ldr	r3, [pc, #432]	; (8002f24 <main+0x330>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	f040 80c2 	bne.w	8002f00 <main+0x30c>
		{
			tim1_20ms_flag = 0;
 8002d7c:	4b69      	ldr	r3, [pc, #420]	; (8002f24 <main+0x330>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 8002d82:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <main+0x358>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	2b06      	cmp	r3, #6
 8002d8a:	f200 80bb 	bhi.w	8002f04 <main+0x310>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <main+0x1a0>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002db1 	.word	0x08002db1
 8002d98:	08002f05 	.word	0x08002f05
 8002d9c:	08002de3 	.word	0x08002de3
 8002da0:	08002e15 	.word	0x08002e15
 8002da4:	08002e47 	.word	0x08002e47
 8002da8:	08002e79 	.word	0x08002e79
 8002dac:	08002eab 	.word	0x08002eab
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8002db0:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <main+0x35c>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002dba:	4b66      	ldr	r3, [pc, #408]	; (8002f54 <main+0x360>)
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dc4:	4b64      	ldr	r3, [pc, #400]	; (8002f58 <main+0x364>)
 8002dc6:	edd3 6a00 	vldr	s13, [r3]
 8002dca:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002dce:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002dd2:	ed8d 7b00 	vstr	d7, [sp]
 8002dd6:	ec53 2b15 	vmov	r2, r3, d5
 8002dda:	4860      	ldr	r0, [pc, #384]	; (8002f5c <main+0x368>)
 8002ddc:	f00d ff8a 	bl	8010cf4 <iprintf>
 8002de0:	e091      	b.n	8002f06 <main+0x312>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8002de2:	4b54      	ldr	r3, [pc, #336]	; (8002f34 <main+0x340>)
 8002de4:	edd3 7a08 	vldr	s15, [r3, #32]
 8002de8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002dec:	4b51      	ldr	r3, [pc, #324]	; (8002f34 <main+0x340>)
 8002dee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002df2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002df6:	4b4f      	ldr	r3, [pc, #316]	; (8002f34 <main+0x340>)
 8002df8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002dfc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e00:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e04:	ed8d 7b00 	vstr	d7, [sp]
 8002e08:	ec53 2b15 	vmov	r2, r3, d5
 8002e0c:	4853      	ldr	r0, [pc, #332]	; (8002f5c <main+0x368>)
 8002e0e:	f00d ff71 	bl	8010cf4 <iprintf>
 8002e12:	e078      	b.n	8002f06 <main+0x312>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8002e14:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <main+0x340>)
 8002e16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e1a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e1e:	4b45      	ldr	r3, [pc, #276]	; (8002f34 <main+0x340>)
 8002e20:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e28:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <main+0x340>)
 8002e2a:	edd3 6a04 	vldr	s13, [r3, #16]
 8002e2e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e32:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e36:	ed8d 7b00 	vstr	d7, [sp]
 8002e3a:	ec53 2b15 	vmov	r2, r3, d5
 8002e3e:	4847      	ldr	r0, [pc, #284]	; (8002f5c <main+0x368>)
 8002e40:	f00d ff58 	bl	8010cf4 <iprintf>
 8002e44:	e05f      	b.n	8002f06 <main+0x312>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 8002e46:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <main+0x340>)
 8002e48:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002e4c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e50:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <main+0x340>)
 8002e52:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002e56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <main+0x340>)
 8002e5c:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002e60:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e64:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e68:	ed8d 7b00 	vstr	d7, [sp]
 8002e6c:	ec53 2b15 	vmov	r2, r3, d5
 8002e70:	483a      	ldr	r0, [pc, #232]	; (8002f5c <main+0x368>)
 8002e72:	f00d ff3f 	bl	8010cf4 <iprintf>
 8002e76:	e046      	b.n	8002f06 <main+0x312>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <main+0x340>)
 8002e7a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e7e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e82:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <main+0x340>)
 8002e84:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002e88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e8c:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <main+0x340>)
 8002e8e:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8002e92:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e96:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e9a:	ed8d 7b00 	vstr	d7, [sp]
 8002e9e:	ec53 2b15 	vmov	r2, r3, d5
 8002ea2:	482f      	ldr	r0, [pc, #188]	; (8002f60 <main+0x36c>)
 8002ea4:	f00d ff26 	bl	8010cf4 <iprintf>
 8002ea8:	e02d      	b.n	8002f06 <main+0x312>
			case 7: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8002eaa:	4b2e      	ldr	r3, [pc, #184]	; (8002f64 <main+0x370>)
 8002eac:	881b      	ldrh	r3, [r3, #0]
 8002eae:	469c      	mov	ip, r3
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <main+0x370>)
 8002eb2:	885b      	ldrh	r3, [r3, #2]
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <main+0x370>)
 8002eb8:	889b      	ldrh	r3, [r3, #4]
 8002eba:	4698      	mov	r8, r3
 8002ebc:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <main+0x370>)
 8002ebe:	88db      	ldrh	r3, [r3, #6]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <main+0x370>)
 8002ec4:	891b      	ldrh	r3, [r3, #8]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <main+0x370>)
 8002eca:	895b      	ldrh	r3, [r3, #10]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <main+0x370>)
 8002ed0:	8a1b      	ldrh	r3, [r3, #16]
 8002ed2:	461c      	mov	r4, r3
 8002ed4:	4b23      	ldr	r3, [pc, #140]	; (8002f64 <main+0x370>)
 8002ed6:	8a5b      	ldrh	r3, [r3, #18]
 8002ed8:	461d      	mov	r5, r3
 8002eda:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <main+0x370>)
 8002edc:	899b      	ldrh	r3, [r3, #12]
 8002ede:	461e      	mov	r6, r3
 8002ee0:	4b20      	ldr	r3, [pc, #128]	; (8002f64 <main+0x370>)
 8002ee2:	89db      	ldrh	r3, [r3, #14]
 8002ee4:	9306      	str	r3, [sp, #24]
 8002ee6:	9605      	str	r6, [sp, #20]
 8002ee8:	9504      	str	r5, [sp, #16]
 8002eea:	9403      	str	r4, [sp, #12]
 8002eec:	9002      	str	r0, [sp, #8]
 8002eee:	9101      	str	r1, [sp, #4]
 8002ef0:	9200      	str	r2, [sp, #0]
 8002ef2:	4643      	mov	r3, r8
 8002ef4:	4672      	mov	r2, lr
 8002ef6:	4661      	mov	r1, ip
 8002ef8:	481b      	ldr	r0, [pc, #108]	; (8002f68 <main+0x374>)
 8002efa:	f00d fefb 	bl	8010cf4 <iprintf>
 8002efe:	e002      	b.n	8002f06 <main+0x312>
			default: break;
			}
		}
 8002f00:	bf00      	nop
 8002f02:	e6f2      	b.n	8002cea <main+0xf6>
			default: break;
 8002f04:	bf00      	nop
	{
 8002f06:	e6f0      	b.n	8002cea <main+0xf6>
 8002f08:	2400066c 	.word	0x2400066c
 8002f0c:	24000231 	.word	0x24000231
 8002f10:	24000440 	.word	0x24000440
 8002f14:	24000233 	.word	0x24000233
 8002f18:	240005d0 	.word	0x240005d0
 8002f1c:	58020000 	.word	0x58020000
 8002f20:	24000234 	.word	0x24000234
 8002f24:	2400022f 	.word	0x2400022f
 8002f28:	08013770 	.word	0x08013770
 8002f2c:	2400037c 	.word	0x2400037c
 8002f30:	08013784 	.word	0x08013784
 8002f34:	2400026c 	.word	0x2400026c
 8002f38:	24000660 	.word	0x24000660
 8002f3c:	24000664 	.word	0x24000664
 8002f40:	24000668 	.word	0x24000668
 8002f44:	2400022d 	.word	0x2400022d
 8002f48:	2400022e 	.word	0x2400022e
 8002f4c:	2400022c 	.word	0x2400022c
 8002f50:	240002fc 	.word	0x240002fc
 8002f54:	24000300 	.word	0x24000300
 8002f58:	240002f8 	.word	0x240002f8
 8002f5c:	08013798 	.word	0x08013798
 8002f60:	080137b0 	.word	0x080137b0
 8002f64:	24000250 	.word	0x24000250
 8002f68:	080137c4 	.word	0x080137c4

08002f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b09c      	sub	sp, #112	; 0x70
 8002f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f76:	224c      	movs	r2, #76	; 0x4c
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f00d fa6e 	bl	801045c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f80:	1d3b      	adds	r3, r7, #4
 8002f82:	2220      	movs	r2, #32
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f00d fa68 	bl	801045c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f8c:	2002      	movs	r0, #2
 8002f8e:	f007 f959 	bl	800a244 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002f92:	2300      	movs	r3, #0
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	4b32      	ldr	r3, [pc, #200]	; (8003060 <SystemClock_Config+0xf4>)
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	4a31      	ldr	r2, [pc, #196]	; (8003060 <SystemClock_Config+0xf4>)
 8002f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa0:	6193      	str	r3, [r2, #24]
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <SystemClock_Config+0xf4>)
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <SystemClock_Config+0xf8>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <SystemClock_Config+0xf8>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002fb8:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <SystemClock_Config+0xf8>)
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002fc4:	bf00      	nop
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <SystemClock_Config+0xf4>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd2:	d1f8      	bne.n	8002fc6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fe2:	2340      	movs	r3, #64	; 0x40
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fea:	2302      	movs	r3, #2
 8002fec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002fee:	2305      	movs	r3, #5
 8002ff0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002ff2:	23c0      	movs	r3, #192	; 0xc0
 8002ff4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ffe:	2302      	movs	r3, #2
 8003000:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003002:	2308      	movs	r3, #8
 8003004:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003006:	2300      	movs	r3, #0
 8003008:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800300e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003012:	4618      	mov	r0, r3
 8003014:	f007 f950 	bl	800a2b8 <HAL_RCC_OscConfig>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800301e:	f000 fb29 	bl	8003674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003022:	233f      	movs	r3, #63	; 0x3f
 8003024:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003026:	2303      	movs	r3, #3
 8003028:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800302e:	2308      	movs	r3, #8
 8003030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003032:	2340      	movs	r3, #64	; 0x40
 8003034:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003036:	2340      	movs	r3, #64	; 0x40
 8003038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800303a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003040:	2340      	movs	r3, #64	; 0x40
 8003042:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	2104      	movs	r1, #4
 8003048:	4618      	mov	r0, r3
 800304a:	f007 fd45 	bl	800aad8 <HAL_RCC_ClockConfig>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003054:	f000 fb0e 	bl	8003674 <Error_Handler>
  }
}
 8003058:	bf00      	nop
 800305a:	3770      	adds	r7, #112	; 0x70
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	58024800 	.word	0x58024800
 8003064:	58000400 	.word	0x58000400

08003068 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b0b0      	sub	sp, #192	; 0xc0
 800306c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	22bc      	movs	r2, #188	; 0xbc
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f00d f9f1 	bl	801045c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800307a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800307e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8003080:	2300      	movs	r3, #0
 8003082:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	4618      	mov	r0, r3
 8003088:	f008 f8b2 	bl	800b1f0 <HAL_RCCEx_PeriphCLKConfig>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8003092:	f000 faef 	bl	8003674 <Error_Handler>
  }
}
 8003096:	bf00      	nop
 8003098:	37c0      	adds	r7, #192	; 0xc0
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <MX_I2C1_Init+0x74>)
 80030a6:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <MX_I2C1_Init+0x78>)
 80030a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80030aa:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <MX_I2C1_Init+0x74>)
 80030ac:	4a1b      	ldr	r2, [pc, #108]	; (800311c <MX_I2C1_Init+0x7c>)
 80030ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <MX_I2C1_Init+0x74>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <MX_I2C1_Init+0x74>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <MX_I2C1_Init+0x74>)
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <MX_I2C1_Init+0x74>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <MX_I2C1_Init+0x74>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <MX_I2C1_Init+0x74>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <MX_I2C1_Init+0x74>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030da:	480e      	ldr	r0, [pc, #56]	; (8003114 <MX_I2C1_Init+0x74>)
 80030dc:	f004 fe5e 	bl	8007d9c <HAL_I2C_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80030e6:	f000 fac5 	bl	8003674 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030ea:	2100      	movs	r1, #0
 80030ec:	4809      	ldr	r0, [pc, #36]	; (8003114 <MX_I2C1_Init+0x74>)
 80030ee:	f007 f811 	bl	800a114 <HAL_I2CEx_ConfigAnalogFilter>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80030f8:	f000 fabc 	bl	8003674 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030fc:	2100      	movs	r1, #0
 80030fe:	4805      	ldr	r0, [pc, #20]	; (8003114 <MX_I2C1_Init+0x74>)
 8003100:	f007 f853 	bl	800a1aa <HAL_I2CEx_ConfigDigitalFilter>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800310a:	f000 fab3 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2400037c 	.word	0x2400037c
 8003118:	40005400 	.word	0x40005400
 800311c:	00b03fdb 	.word	0x00b03fdb

08003120 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003124:	4b27      	ldr	r3, [pc, #156]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003126:	4a28      	ldr	r2, [pc, #160]	; (80031c8 <MX_SPI1_Init+0xa8>)
 8003128:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <MX_SPI1_Init+0xa4>)
 800312c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003130:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <MX_SPI1_Init+0xa4>)
 800313a:	2207      	movs	r2, #7
 800313c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800313e:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003146:	2200      	movs	r2, #0
 8003148:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <MX_SPI1_Init+0xa4>)
 800314c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003150:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003154:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003158:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800315a:	4b1a      	ldr	r3, [pc, #104]	; (80031c4 <MX_SPI1_Init+0xa4>)
 800315c:	2200      	movs	r2, #0
 800315e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003160:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003162:	2200      	movs	r2, #0
 8003164:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003166:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003168:	2200      	movs	r2, #0
 800316a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800316c:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <MX_SPI1_Init+0xa4>)
 800316e:	2200      	movs	r2, #0
 8003170:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003172:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003174:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003178:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800317a:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <MX_SPI1_Init+0xa4>)
 800317c:	2200      	movs	r2, #0
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003180:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003182:	2200      	movs	r2, #0
 8003184:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003188:	2200      	movs	r2, #0
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800318c:	4b0d      	ldr	r3, [pc, #52]	; (80031c4 <MX_SPI1_Init+0xa4>)
 800318e:	2200      	movs	r2, #0
 8003190:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <MX_SPI1_Init+0xa4>)
 8003194:	2200      	movs	r2, #0
 8003196:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <MX_SPI1_Init+0xa4>)
 800319a:	2200      	movs	r2, #0
 800319c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <MX_SPI1_Init+0xa4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80031a4:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <MX_SPI1_Init+0xa4>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <MX_SPI1_Init+0xa4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <MX_SPI1_Init+0xa4>)
 80031b2:	f009 fb7f 	bl	800c8b4 <HAL_SPI_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80031bc:	f000 fa5a 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	24000548 	.word	0x24000548
 80031c8:	40013000 	.word	0x40013000

080031cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <MX_TIM7_Init+0x64>)
 80031de:	4a15      	ldr	r2, [pc, #84]	; (8003234 <MX_TIM7_Init+0x68>)
 80031e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <MX_TIM7_Init+0x64>)
 80031e4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80031e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <MX_TIM7_Init+0x64>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <MX_TIM7_Init+0x64>)
 80031f2:	2205      	movs	r2, #5
 80031f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031f6:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <MX_TIM7_Init+0x64>)
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80031fc:	480c      	ldr	r0, [pc, #48]	; (8003230 <MX_TIM7_Init+0x64>)
 80031fe:	f00a fc14 	bl	800da2a <HAL_TIM_Base_Init>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003208:	f000 fa34 	bl	8003674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800320c:	2300      	movs	r3, #0
 800320e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	4619      	mov	r1, r3
 8003218:	4805      	ldr	r0, [pc, #20]	; (8003230 <MX_TIM7_Init+0x64>)
 800321a:	f00a feaf 	bl	800df7c <HAL_TIMEx_MasterConfigSynchronization>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003224:	f000 fa26 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2400066c 	.word	0x2400066c
 8003234:	40001400 	.word	0x40001400

08003238 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800323c:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 800323e:	4a23      	ldr	r2, [pc, #140]	; (80032cc <MX_USART1_UART_Init+0x94>)
 8003240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003242:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 8003244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800324a:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003250:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 800325e:	220c      	movs	r2, #12
 8003260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003268:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 800326a:	2200      	movs	r2, #0
 800326c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800326e:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 8003270:	2200      	movs	r2, #0
 8003272:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 8003276:	2200      	movs	r2, #0
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 800327c:	2200      	movs	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003280:	4811      	ldr	r0, [pc, #68]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 8003282:	f00a ff21 	bl	800e0c8 <HAL_UART_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800328c:	f000 f9f2 	bl	8003674 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003290:	2100      	movs	r1, #0
 8003292:	480d      	ldr	r0, [pc, #52]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 8003294:	f00c ffed 	bl	8010272 <HAL_UARTEx_SetTxFifoThreshold>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800329e:	f000 f9e9 	bl	8003674 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032a2:	2100      	movs	r1, #0
 80032a4:	4808      	ldr	r0, [pc, #32]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 80032a6:	f00d f822 	bl	80102ee <HAL_UARTEx_SetRxFifoThreshold>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80032b0:	f000 f9e0 	bl	8003674 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80032b4:	4804      	ldr	r0, [pc, #16]	; (80032c8 <MX_USART1_UART_Init+0x90>)
 80032b6:	f00c ffa3 	bl	8010200 <HAL_UARTEx_DisableFifoMode>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80032c0:	f000 f9d8 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	24000440 	.word	0x24000440
 80032cc:	40011000 	.word	0x40011000

080032d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032d4:	4b22      	ldr	r3, [pc, #136]	; (8003360 <MX_USART2_UART_Init+0x90>)
 80032d6:	4a23      	ldr	r2, [pc, #140]	; (8003364 <MX_USART2_UART_Init+0x94>)
 80032d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032da:	4b21      	ldr	r3, [pc, #132]	; (8003360 <MX_USART2_UART_Init+0x90>)
 80032dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <MX_USART2_UART_Init+0x90>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <MX_USART2_UART_Init+0x90>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <MX_USART2_UART_Init+0x90>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032f4:	4b1a      	ldr	r3, [pc, #104]	; (8003360 <MX_USART2_UART_Init+0x90>)
 80032f6:	220c      	movs	r2, #12
 80032f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <MX_USART2_UART_Init+0x90>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <MX_USART2_UART_Init+0x90>)
 8003302:	2200      	movs	r2, #0
 8003304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <MX_USART2_UART_Init+0x90>)
 8003308:	2200      	movs	r2, #0
 800330a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <MX_USART2_UART_Init+0x90>)
 800330e:	2200      	movs	r2, #0
 8003310:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <MX_USART2_UART_Init+0x90>)
 8003314:	2200      	movs	r2, #0
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003318:	4811      	ldr	r0, [pc, #68]	; (8003360 <MX_USART2_UART_Init+0x90>)
 800331a:	f00a fed5 	bl	800e0c8 <HAL_UART_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003324:	f000 f9a6 	bl	8003674 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003328:	2100      	movs	r1, #0
 800332a:	480d      	ldr	r0, [pc, #52]	; (8003360 <MX_USART2_UART_Init+0x90>)
 800332c:	f00c ffa1 	bl	8010272 <HAL_UARTEx_SetTxFifoThreshold>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003336:	f000 f99d 	bl	8003674 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800333a:	2100      	movs	r1, #0
 800333c:	4808      	ldr	r0, [pc, #32]	; (8003360 <MX_USART2_UART_Init+0x90>)
 800333e:	f00c ffd6 	bl	80102ee <HAL_UARTEx_SetRxFifoThreshold>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003348:	f000 f994 	bl	8003674 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800334c:	4804      	ldr	r0, [pc, #16]	; (8003360 <MX_USART2_UART_Init+0x90>)
 800334e:	f00c ff57 	bl	8010200 <HAL_UARTEx_DisableFifoMode>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003358:	f000 f98c 	bl	8003674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800335c:	bf00      	nop
 800335e:	bd80      	pop	{r7, pc}
 8003360:	240005d0 	.word	0x240005d0
 8003364:	40004400 	.word	0x40004400

08003368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <MX_DMA_Init+0x5c>)
 8003370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003374:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <MX_DMA_Init+0x5c>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <MX_DMA_Init+0x5c>)
 8003380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	200b      	movs	r0, #11
 8003392:	f001 fc96 	bl	8004cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003396:	200b      	movs	r0, #11
 8003398:	f001 fcad 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	200c      	movs	r0, #12
 80033a2:	f001 fc8e 	bl	8004cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80033a6:	200c      	movs	r0, #12
 80033a8:	f001 fca5 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	200d      	movs	r0, #13
 80033b2:	f001 fc86 	bl	8004cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80033b6:	200d      	movs	r0, #13
 80033b8:	f001 fc9d 	bl	8004cf6 <HAL_NVIC_EnableIRQ>

}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	58024400 	.word	0x58024400

080033c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	605a      	str	r2, [r3, #4]
 80033d8:	609a      	str	r2, [r3, #8]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <MX_GPIO_Init+0xc4>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e4:	4a29      	ldr	r2, [pc, #164]	; (800348c <MX_GPIO_Init+0xc4>)
 80033e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ee:	4b27      	ldr	r3, [pc, #156]	; (800348c <MX_GPIO_Init+0xc4>)
 80033f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fc:	4b23      	ldr	r3, [pc, #140]	; (800348c <MX_GPIO_Init+0xc4>)
 80033fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003402:	4a22      	ldr	r2, [pc, #136]	; (800348c <MX_GPIO_Init+0xc4>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800340c:	4b1f      	ldr	r3, [pc, #124]	; (800348c <MX_GPIO_Init+0xc4>)
 800340e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	607b      	str	r3, [r7, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800341a:	4b1c      	ldr	r3, [pc, #112]	; (800348c <MX_GPIO_Init+0xc4>)
 800341c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003420:	4a1a      	ldr	r2, [pc, #104]	; (800348c <MX_GPIO_Init+0xc4>)
 8003422:	f043 0302 	orr.w	r3, r3, #2
 8003426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800342a:	4b18      	ldr	r3, [pc, #96]	; (800348c <MX_GPIO_Init+0xc4>)
 800342c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	603b      	str	r3, [r7, #0]
 8003436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003438:	2200      	movs	r2, #0
 800343a:	2102      	movs	r1, #2
 800343c:	4814      	ldr	r0, [pc, #80]	; (8003490 <MX_GPIO_Init+0xc8>)
 800343e:	f004 fc79 	bl	8007d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003442:	2200      	movs	r2, #0
 8003444:	2140      	movs	r1, #64	; 0x40
 8003446:	4813      	ldr	r0, [pc, #76]	; (8003494 <MX_GPIO_Init+0xcc>)
 8003448:	f004 fc74 	bl	8007d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800344c:	2302      	movs	r3, #2
 800344e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003450:	2301      	movs	r3, #1
 8003452:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	4619      	mov	r1, r3
 8003462:	480b      	ldr	r0, [pc, #44]	; (8003490 <MX_GPIO_Init+0xc8>)
 8003464:	f004 fab6 	bl	80079d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003468:	2340      	movs	r3, #64	; 0x40
 800346a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346c:	2301      	movs	r3, #1
 800346e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	4619      	mov	r1, r3
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_GPIO_Init+0xcc>)
 8003480:	f004 faa8 	bl	80079d4 <HAL_GPIO_Init>

}
 8003484:	bf00      	nop
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	58024400 	.word	0x58024400
 8003490:	58020000 	.word	0x58020000
 8003494:	58020400 	.word	0x58020400

08003498 <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 80034a2:	79fb      	ldrb	r3, [r7, #7]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f040 80d6 	bne.w	8003656 <Compass_Calibration+0x1be>
	{
		for(int i =0;i<5;i++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	e00b      	b.n	80034c8 <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 80034b0:	486b      	ldr	r0, [pc, #428]	; (8003660 <Compass_Calibration+0x1c8>)
 80034b2:	f7fd fbd3 	bl	8000c5c <MPU9250_Read_All>
			HAL_Delay(1);
 80034b6:	2001      	movs	r0, #1
 80034b8:	f001 faf8 	bl	8004aac <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 80034bc:	4869      	ldr	r0, [pc, #420]	; (8003664 <Compass_Calibration+0x1cc>)
 80034be:	f7fd fd9b 	bl	8000ff8 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3301      	adds	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	ddf0      	ble.n	80034b0 <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <Compass_Calibration+0x1cc>)
 80034d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034d2:	4a64      	ldr	r2, [pc, #400]	; (8003664 <Compass_Calibration+0x1cc>)
 80034d4:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mx_Min = MPU9250.Mx;
 80034d6:	4b63      	ldr	r3, [pc, #396]	; (8003664 <Compass_Calibration+0x1cc>)
 80034d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034da:	4a62      	ldr	r2, [pc, #392]	; (8003664 <Compass_Calibration+0x1cc>)
 80034dc:	6453      	str	r3, [r2, #68]	; 0x44
		MPU9250.My_Max = MPU9250.My;
 80034de:	4b61      	ldr	r3, [pc, #388]	; (8003664 <Compass_Calibration+0x1cc>)
 80034e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e2:	4a60      	ldr	r2, [pc, #384]	; (8003664 <Compass_Calibration+0x1cc>)
 80034e4:	6553      	str	r3, [r2, #84]	; 0x54
		MPU9250.My_Min = MPU9250.My;
 80034e6:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <Compass_Calibration+0x1cc>)
 80034e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ea:	4a5e      	ldr	r2, [pc, #376]	; (8003664 <Compass_Calibration+0x1cc>)
 80034ec:	6493      	str	r3, [r2, #72]	; 0x48
		MPU9250.Mz_Max = MPU9250.Mz;
 80034ee:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <Compass_Calibration+0x1cc>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f2:	4a5c      	ldr	r2, [pc, #368]	; (8003664 <Compass_Calibration+0x1cc>)
 80034f4:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mz_Min = MPU9250.Mz;
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <Compass_Calibration+0x1cc>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a5a      	ldr	r2, [pc, #360]	; (8003664 <Compass_Calibration+0x1cc>)
 80034fc:	64d3      	str	r3, [r2, #76]	; 0x4c

		while(mag_calibration_enable != 0)
 80034fe:	e065      	b.n	80035cc <Compass_Calibration+0x134>
		{
			Receive_Command();
 8003500:	f000 fc54 	bl	8003dac <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 8003504:	4856      	ldr	r0, [pc, #344]	; (8003660 <Compass_Calibration+0x1c8>)
 8003506:	f7fd fba9 	bl	8000c5c <MPU9250_Read_All>
			HAL_Delay(1);
 800350a:	2001      	movs	r0, #1
 800350c:	f001 face 	bl	8004aac <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8003510:	4854      	ldr	r0, [pc, #336]	; (8003664 <Compass_Calibration+0x1cc>)
 8003512:	f7fd fd71 	bl	8000ff8 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 8003516:	4b53      	ldr	r3, [pc, #332]	; (8003664 <Compass_Calibration+0x1cc>)
 8003518:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800351c:	4b51      	ldr	r3, [pc, #324]	; (8003664 <Compass_Calibration+0x1cc>)
 800351e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	dd03      	ble.n	8003534 <Compass_Calibration+0x9c>
 800352c:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <Compass_Calibration+0x1cc>)
 800352e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003530:	4a4c      	ldr	r2, [pc, #304]	; (8003664 <Compass_Calibration+0x1cc>)
 8003532:	6513      	str	r3, [r2, #80]	; 0x50
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <Compass_Calibration+0x1cc>)
 8003536:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800353a:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <Compass_Calibration+0x1cc>)
 800353c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003548:	d503      	bpl.n	8003552 <Compass_Calibration+0xba>
 800354a:	4b46      	ldr	r3, [pc, #280]	; (8003664 <Compass_Calibration+0x1cc>)
 800354c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800354e:	4a45      	ldr	r2, [pc, #276]	; (8003664 <Compass_Calibration+0x1cc>)
 8003550:	6453      	str	r3, [r2, #68]	; 0x44

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <Compass_Calibration+0x1cc>)
 8003554:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8003558:	4b42      	ldr	r3, [pc, #264]	; (8003664 <Compass_Calibration+0x1cc>)
 800355a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800355e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003566:	dd03      	ble.n	8003570 <Compass_Calibration+0xd8>
 8003568:	4b3e      	ldr	r3, [pc, #248]	; (8003664 <Compass_Calibration+0x1cc>)
 800356a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356c:	4a3d      	ldr	r2, [pc, #244]	; (8003664 <Compass_Calibration+0x1cc>)
 800356e:	6553      	str	r3, [r2, #84]	; 0x54
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 8003570:	4b3c      	ldr	r3, [pc, #240]	; (8003664 <Compass_Calibration+0x1cc>)
 8003572:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8003576:	4b3b      	ldr	r3, [pc, #236]	; (8003664 <Compass_Calibration+0x1cc>)
 8003578:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800357c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003584:	d503      	bpl.n	800358e <Compass_Calibration+0xf6>
 8003586:	4b37      	ldr	r3, [pc, #220]	; (8003664 <Compass_Calibration+0x1cc>)
 8003588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358a:	4a36      	ldr	r2, [pc, #216]	; (8003664 <Compass_Calibration+0x1cc>)
 800358c:	6493      	str	r3, [r2, #72]	; 0x48

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 800358e:	4b35      	ldr	r3, [pc, #212]	; (8003664 <Compass_Calibration+0x1cc>)
 8003590:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8003594:	4b33      	ldr	r3, [pc, #204]	; (8003664 <Compass_Calibration+0x1cc>)
 8003596:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800359a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800359e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a2:	dd03      	ble.n	80035ac <Compass_Calibration+0x114>
 80035a4:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <Compass_Calibration+0x1cc>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	4a2e      	ldr	r2, [pc, #184]	; (8003664 <Compass_Calibration+0x1cc>)
 80035aa:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 80035ac:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <Compass_Calibration+0x1cc>)
 80035ae:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80035b2:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <Compass_Calibration+0x1cc>)
 80035b4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80035b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c0:	d400      	bmi.n	80035c4 <Compass_Calibration+0x12c>
 80035c2:	e003      	b.n	80035cc <Compass_Calibration+0x134>
 80035c4:	4b27      	ldr	r3, [pc, #156]	; (8003664 <Compass_Calibration+0x1cc>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <Compass_Calibration+0x1cc>)
 80035ca:	64d3      	str	r3, [r2, #76]	; 0x4c
		while(mag_calibration_enable != 0)
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d196      	bne.n	8003500 <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 80035d2:	4b24      	ldr	r3, [pc, #144]	; (8003664 <Compass_Calibration+0x1cc>)
 80035d4:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80035d8:	4b22      	ldr	r3, [pc, #136]	; (8003664 <Compass_Calibration+0x1cc>)
 80035da:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80035de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80035e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ea:	4b1e      	ldr	r3, [pc, #120]	; (8003664 <Compass_Calibration+0x1cc>)
 80035ec:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 80035f0:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <Compass_Calibration+0x1cc>)
 80035f2:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 80035f6:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <Compass_Calibration+0x1cc>)
 80035f8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80035fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003600:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003604:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003608:	4b16      	ldr	r3, [pc, #88]	; (8003664 <Compass_Calibration+0x1cc>)
 800360a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <Compass_Calibration+0x1cc>)
 8003610:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003614:	4b13      	ldr	r3, [pc, #76]	; (8003664 <Compass_Calibration+0x1cc>)
 8003616:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800361a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003622:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <Compass_Calibration+0x1cc>)
 8003628:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 800362c:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <Compass_Calibration+0x1d0>)
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <Compass_Calibration+0x1cc>)
 8003630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003632:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8003634:	4a0d      	ldr	r2, [pc, #52]	; (800366c <Compass_Calibration+0x1d4>)
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <Compass_Calibration+0x1cc>)
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 800363c:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <Compass_Calibration+0x1d8>)
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <Compass_Calibration+0x1cc>)
 8003640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003642:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 8003644:	2000      	movs	r0, #0
 8003646:	f000 ff41 	bl	80044cc <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 800364a:	230c      	movs	r3, #12
 800364c:	2200      	movs	r2, #0
 800364e:	2100      	movs	r1, #0
 8003650:	4805      	ldr	r0, [pc, #20]	; (8003668 <Compass_Calibration+0x1d0>)
 8003652:	f001 f82d 	bl	80046b0 <W25qxx_WriteSector>
	}
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	2400037c 	.word	0x2400037c
 8003664:	2400026c 	.word	0x2400026c
 8003668:	24000660 	.word	0x24000660
 800366c:	24000664 	.word	0x24000664
 8003670:	24000668 	.word	0x24000668

08003674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003678:	b672      	cpsid	i
}
 800367a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800367c:	e7fe      	b.n	800367c <Error_Handler+0x8>
	...

08003680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <HAL_MspInit+0x30>)
 8003688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800368c:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <HAL_MspInit+0x30>)
 800368e:	f043 0302 	orr.w	r3, r3, #2
 8003692:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003696:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_MspInit+0x30>)
 8003698:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	58024400 	.word	0x58024400

080036b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b0b8      	sub	sp, #224	; 0xe0
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036cc:	f107 0310 	add.w	r3, r7, #16
 80036d0:	22bc      	movs	r2, #188	; 0xbc
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f00c fec1 	bl	801045c <memset>
  if(hi2c->Instance==I2C1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a3f      	ldr	r2, [pc, #252]	; (80037dc <HAL_I2C_MspInit+0x128>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d177      	bne.n	80037d4 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036e4:	2308      	movs	r3, #8
 80036e6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	4618      	mov	r0, r3
 80036f4:	f007 fd7c 	bl	800b1f0 <HAL_RCCEx_PeriphCLKConfig>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80036fe:	f7ff ffb9 	bl	8003674 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <HAL_I2C_MspInit+0x12c>)
 8003704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003708:	4a35      	ldr	r2, [pc, #212]	; (80037e0 <HAL_I2C_MspInit+0x12c>)
 800370a:	f043 0302 	orr.w	r3, r3, #2
 800370e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003712:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <HAL_I2C_MspInit+0x12c>)
 8003714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003720:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003724:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003728:	2312      	movs	r3, #18
 800372a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	2300      	movs	r3, #0
 8003736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800373a:	2304      	movs	r3, #4
 800373c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003740:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003744:	4619      	mov	r1, r3
 8003746:	4827      	ldr	r0, [pc, #156]	; (80037e4 <HAL_I2C_MspInit+0x130>)
 8003748:	f004 f944 	bl	80079d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800374c:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_I2C_MspInit+0x12c>)
 800374e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003752:	4a23      	ldr	r2, [pc, #140]	; (80037e0 <HAL_I2C_MspInit+0x12c>)
 8003754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003758:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800375c:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_I2C_MspInit+0x12c>)
 800375e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 800376a:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_I2C_MspInit+0x138>)
 800376e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003770:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 8003772:	2221      	movs	r2, #33	; 0x21
 8003774:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 800377e:	2200      	movs	r2, #0
 8003780:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003782:	4b19      	ldr	r3, [pc, #100]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 8003784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003788:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800378a:	4b17      	ldr	r3, [pc, #92]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 800378c:	2200      	movs	r2, #0
 800378e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 8003792:	2200      	movs	r2, #0
 8003794:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003796:	4b14      	ldr	r3, [pc, #80]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 8003798:	2200      	movs	r2, #0
 800379a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 800379e:	2200      	movs	r2, #0
 80037a0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037a2:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80037a8:	480f      	ldr	r0, [pc, #60]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 80037aa:	f001 fabf 	bl	8004d2c <HAL_DMA_Init>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 80037b4:	f7ff ff5e 	bl	8003674 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80037be:	4a0a      	ldr	r2, [pc, #40]	; (80037e8 <HAL_I2C_MspInit+0x134>)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037c4:	2200      	movs	r2, #0
 80037c6:	2100      	movs	r1, #0
 80037c8:	201f      	movs	r0, #31
 80037ca:	f001 fa7a 	bl	8004cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037ce:	201f      	movs	r0, #31
 80037d0:	f001 fa91 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80037d4:	bf00      	nop
 80037d6:	37e0      	adds	r7, #224	; 0xe0
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40005400 	.word	0x40005400
 80037e0:	58024400 	.word	0x58024400
 80037e4:	58020400 	.word	0x58020400
 80037e8:	240004d0 	.word	0x240004d0
 80037ec:	40020028 	.word	0x40020028

080037f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b0b8      	sub	sp, #224	; 0xe0
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003808:	f107 0310 	add.w	r3, r7, #16
 800380c:	22bc      	movs	r2, #188	; 0xbc
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f00c fe23 	bl	801045c <memset>
  if(hspi->Instance==SPI1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <HAL_SPI_MspInit+0xc0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d142      	bne.n	80038a6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003824:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800382a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	4618      	mov	r0, r3
 8003832:	f007 fcdd 	bl	800b1f0 <HAL_RCCEx_PeriphCLKConfig>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800383c:	f7ff ff1a 	bl	8003674 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003840:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <HAL_SPI_MspInit+0xc4>)
 8003842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003846:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_SPI_MspInit+0xc4>)
 8003848:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800384c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003850:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <HAL_SPI_MspInit+0xc4>)
 8003852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385e:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <HAL_SPI_MspInit+0xc4>)
 8003860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003864:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <HAL_SPI_MspInit+0xc4>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_SPI_MspInit+0xc4>)
 8003870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800387c:	23e0      	movs	r3, #224	; 0xe0
 800387e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003882:	2302      	movs	r3, #2
 8003884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388e:	2300      	movs	r3, #0
 8003890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003894:	2305      	movs	r3, #5
 8003896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800389e:	4619      	mov	r1, r3
 80038a0:	4805      	ldr	r0, [pc, #20]	; (80038b8 <HAL_SPI_MspInit+0xc8>)
 80038a2:	f004 f897 	bl	80079d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038a6:	bf00      	nop
 80038a8:	37e0      	adds	r7, #224	; 0xe0
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40013000 	.word	0x40013000
 80038b4:	58024400 	.word	0x58024400
 80038b8:	58020000 	.word	0x58020000

080038bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0e      	ldr	r2, [pc, #56]	; (8003904 <HAL_TIM_Base_MspInit+0x48>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d116      	bne.n	80038fc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <HAL_TIM_Base_MspInit+0x4c>)
 80038d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d4:	4a0c      	ldr	r2, [pc, #48]	; (8003908 <HAL_TIM_Base_MspInit+0x4c>)
 80038d6:	f043 0320 	orr.w	r3, r3, #32
 80038da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_TIM_Base_MspInit+0x4c>)
 80038e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2100      	movs	r1, #0
 80038f0:	2037      	movs	r0, #55	; 0x37
 80038f2:	f001 f9e6 	bl	8004cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038f6:	2037      	movs	r0, #55	; 0x37
 80038f8:	f001 f9fd 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80038fc:	bf00      	nop
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40001400 	.word	0x40001400
 8003908:	58024400 	.word	0x58024400

0800390c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b0ba      	sub	sp, #232	; 0xe8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003924:	f107 0318 	add.w	r3, r7, #24
 8003928:	22bc      	movs	r2, #188	; 0xbc
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f00c fd95 	bl	801045c <memset>
  if(huart->Instance==USART1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a7e      	ldr	r2, [pc, #504]	; (8003b30 <HAL_UART_MspInit+0x224>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d178      	bne.n	8003a2e <HAL_UART_MspInit+0x122>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800393c:	2301      	movs	r3, #1
 800393e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003946:	f107 0318 	add.w	r3, r7, #24
 800394a:	4618      	mov	r0, r3
 800394c:	f007 fc50 	bl	800b1f0 <HAL_RCCEx_PeriphCLKConfig>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003956:	f7ff fe8d 	bl	8003674 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800395a:	4b76      	ldr	r3, [pc, #472]	; (8003b34 <HAL_UART_MspInit+0x228>)
 800395c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003960:	4a74      	ldr	r2, [pc, #464]	; (8003b34 <HAL_UART_MspInit+0x228>)
 8003962:	f043 0310 	orr.w	r3, r3, #16
 8003966:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800396a:	4b72      	ldr	r3, [pc, #456]	; (8003b34 <HAL_UART_MspInit+0x228>)
 800396c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003978:	4b6e      	ldr	r3, [pc, #440]	; (8003b34 <HAL_UART_MspInit+0x228>)
 800397a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800397e:	4a6d      	ldr	r2, [pc, #436]	; (8003b34 <HAL_UART_MspInit+0x228>)
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003988:	4b6a      	ldr	r3, [pc, #424]	; (8003b34 <HAL_UART_MspInit+0x228>)
 800398a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003996:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800399a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800399e:	2302      	movs	r3, #2
 80039a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80039b0:	2304      	movs	r3, #4
 80039b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ba:	4619      	mov	r1, r3
 80039bc:	485e      	ldr	r0, [pc, #376]	; (8003b38 <HAL_UART_MspInit+0x22c>)
 80039be:	f004 f809 	bl	80079d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80039c2:	4b5e      	ldr	r3, [pc, #376]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039c4:	4a5e      	ldr	r2, [pc, #376]	; (8003b40 <HAL_UART_MspInit+0x234>)
 80039c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80039c8:	4b5c      	ldr	r3, [pc, #368]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039ca:	222a      	movs	r2, #42	; 0x2a
 80039cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039ce:	4b5b      	ldr	r3, [pc, #364]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039d0:	2240      	movs	r2, #64	; 0x40
 80039d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039d4:	4b59      	ldr	r3, [pc, #356]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039da:	4b58      	ldr	r3, [pc, #352]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039e2:	4b56      	ldr	r3, [pc, #344]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039e8:	4b54      	ldr	r3, [pc, #336]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80039ee:	4b53      	ldr	r3, [pc, #332]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039f4:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039fa:	4b50      	ldr	r3, [pc, #320]	; (8003b3c <HAL_UART_MspInit+0x230>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a00:	484e      	ldr	r0, [pc, #312]	; (8003b3c <HAL_UART_MspInit+0x230>)
 8003a02:	f001 f993 	bl	8004d2c <HAL_DMA_Init>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8003a0c:	f7ff fe32 	bl	8003674 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a4a      	ldr	r2, [pc, #296]	; (8003b3c <HAL_UART_MspInit+0x230>)
 8003a14:	679a      	str	r2, [r3, #120]	; 0x78
 8003a16:	4a49      	ldr	r2, [pc, #292]	; (8003b3c <HAL_UART_MspInit+0x230>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2100      	movs	r1, #0
 8003a20:	2025      	movs	r0, #37	; 0x25
 8003a22:	f001 f94e 	bl	8004cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a26:	2025      	movs	r0, #37	; 0x25
 8003a28:	f001 f965 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a2c:	e07c      	b.n	8003b28 <HAL_UART_MspInit+0x21c>
  else if(huart->Instance==USART2)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a44      	ldr	r2, [pc, #272]	; (8003b44 <HAL_UART_MspInit+0x238>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d177      	bne.n	8003b28 <HAL_UART_MspInit+0x21c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a42:	f107 0318 	add.w	r3, r7, #24
 8003a46:	4618      	mov	r0, r3
 8003a48:	f007 fbd2 	bl	800b1f0 <HAL_RCCEx_PeriphCLKConfig>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_UART_MspInit+0x14a>
      Error_Handler();
 8003a52:	f7ff fe0f 	bl	8003674 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a56:	4b37      	ldr	r3, [pc, #220]	; (8003b34 <HAL_UART_MspInit+0x228>)
 8003a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a5c:	4a35      	ldr	r2, [pc, #212]	; (8003b34 <HAL_UART_MspInit+0x228>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a66:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <HAL_UART_MspInit+0x228>)
 8003a68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a74:	4b2f      	ldr	r3, [pc, #188]	; (8003b34 <HAL_UART_MspInit+0x228>)
 8003a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a7a:	4a2e      	ldr	r2, [pc, #184]	; (8003b34 <HAL_UART_MspInit+0x228>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_UART_MspInit+0x228>)
 8003a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a92:	230c      	movs	r3, #12
 8003a94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aaa:	2307      	movs	r3, #7
 8003aac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4824      	ldr	r0, [pc, #144]	; (8003b48 <HAL_UART_MspInit+0x23c>)
 8003ab8:	f003 ff8c 	bl	80079d4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003abe:	4a24      	ldr	r2, [pc, #144]	; (8003b50 <HAL_UART_MspInit+0x244>)
 8003ac0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003ac4:	222b      	movs	r2, #43	; 0x2b
 8003ac6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ac8:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ace:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ada:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003adc:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003ae8:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aee:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003af0:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003af6:	4b15      	ldr	r3, [pc, #84]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003afc:	4813      	ldr	r0, [pc, #76]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003afe:	f001 f915 	bl	8004d2c <HAL_DMA_Init>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_UART_MspInit+0x200>
      Error_Handler();
 8003b08:	f7ff fdb4 	bl	8003674 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003b10:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_UART_MspInit+0x240>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	2026      	movs	r0, #38	; 0x26
 8003b1e:	f001 f8d0 	bl	8004cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b22:	2026      	movs	r0, #38	; 0x26
 8003b24:	f001 f8e7 	bl	8004cf6 <HAL_NVIC_EnableIRQ>
}
 8003b28:	bf00      	nop
 8003b2a:	37e8      	adds	r7, #232	; 0xe8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40011000 	.word	0x40011000
 8003b34:	58024400 	.word	0x58024400
 8003b38:	58020400 	.word	0x58020400
 8003b3c:	240003c8 	.word	0x240003c8
 8003b40:	40020010 	.word	0x40020010
 8003b44:	40004400 	.word	0x40004400
 8003b48:	58020000 	.word	0x58020000
 8003b4c:	24000304 	.word	0x24000304
 8003b50:	40020040 	.word	0x40020040

08003b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003b58:	e7fe      	b.n	8003b58 <NMI_Handler+0x4>

08003b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b5e:	e7fe      	b.n	8003b5e <HardFault_Handler+0x4>

08003b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b64:	e7fe      	b.n	8003b64 <MemManage_Handler+0x4>

08003b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b6a:	e7fe      	b.n	8003b6a <BusFault_Handler+0x4>

08003b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b70:	e7fe      	b.n	8003b70 <UsageFault_Handler+0x4>

08003b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b72:	b480      	push	{r7}
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ba0:	f000 ff64 	bl	8004a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <DMA1_Stream0_IRQHandler+0x10>)
 8003bae:	f002 fbe5 	bl	800637c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	240003c8 	.word	0x240003c8

08003bbc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <DMA1_Stream1_IRQHandler+0x10>)
 8003bc2:	f002 fbdb 	bl	800637c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	240004d0 	.word	0x240004d0

08003bd0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <DMA1_Stream2_IRQHandler+0x10>)
 8003bd6:	f002 fbd1 	bl	800637c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	24000304 	.word	0x24000304

08003be4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003be8:	4802      	ldr	r0, [pc, #8]	; (8003bf4 <I2C1_EV_IRQHandler+0x10>)
 8003bea:	f004 fc8d 	bl	8008508 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	2400037c 	.word	0x2400037c

08003bf8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bfc:	4802      	ldr	r0, [pc, #8]	; (8003c08 <USART1_IRQHandler+0x10>)
 8003bfe:	f00a fbbf 	bl	800e380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	24000440 	.word	0x24000440

08003c0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c10:	4802      	ldr	r0, [pc, #8]	; (8003c1c <USART2_IRQHandler+0x10>)
 8003c12:	f00a fbb5 	bl	800e380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	240005d0 	.word	0x240005d0

08003c20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <TIM7_IRQHandler+0x10>)
 8003c26:	f009 ffc7 	bl	800dbb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	2400066c 	.word	0x2400066c

08003c34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	static unsigned int tim1_2ms_count = 0;
	static unsigned int tim1_20ms_count = 0;

	if(htim->Instance == TIM7)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a13      	ldr	r2, [pc, #76]	; (8003c90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d11d      	bne.n	8003c82 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		tim1_2ms_count++;
 8003c46:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	4a11      	ldr	r2, [pc, #68]	; (8003c94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c4e:	6013      	str	r3, [r2, #0]
		if(tim1_2ms_count == 2)
 8003c50:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d105      	bne.n	8003c64 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			tim1_2ms_count = 0;
 8003c58:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	4a0c      	ldr	r2, [pc, #48]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c6c:	6013      	str	r3, [r2, #0]
		if(tim1_20ms_count == 20)
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b14      	cmp	r3, #20
 8003c74:	d105      	bne.n	8003c82 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			tim1_20ms_count = 0;
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
			tim1_20ms_flag = 1;
 8003c7c:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40001400 	.word	0x40001400
 8003c94:	24000238 	.word	0x24000238
 8003c98:	2400022e 	.word	0x2400022e
 8003c9c:	2400023c 	.word	0x2400023c
 8003ca0:	2400022f 	.word	0x2400022f

08003ca4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]


	if(huart->Instance == USART1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a34      	ldr	r2, [pc, #208]	; (8003d84 <HAL_UART_RxCpltCallback+0xe0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d108      	bne.n	8003cc8 <HAL_UART_RxCpltCallback+0x24>
	{
		uart1_rx_flag = 1;
 8003cb6:	4b34      	ldr	r3, [pc, #208]	; (8003d88 <HAL_UART_RxCpltCallback+0xe4>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4933      	ldr	r1, [pc, #204]	; (8003d8c <HAL_UART_RxCpltCallback+0xe8>)
 8003cc0:	4833      	ldr	r0, [pc, #204]	; (8003d90 <HAL_UART_RxCpltCallback+0xec>)
 8003cc2:	f00a fa51 	bl	800e168 <HAL_UART_Receive_IT>
					ibus_rx_buf[cnt]=uart2_rx_data;
					cnt++;
					break;
				}
	}
}
 8003cc6:	e059      	b.n	8003d7c <HAL_UART_RxCpltCallback+0xd8>
	else if(huart->Instance == USART2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a31      	ldr	r2, [pc, #196]	; (8003d94 <HAL_UART_RxCpltCallback+0xf0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d151      	bne.n	8003d76 <HAL_UART_RxCpltCallback+0xd2>
		uart2_rx_flag = 1;
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_UART_RxCpltCallback+0xf4>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 8003cd8:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b1f      	cmp	r3, #31
 8003cde:	d02e      	beq.n	8003d3e <HAL_UART_RxCpltCallback+0x9a>
 8003ce0:	2b1f      	cmp	r3, #31
 8003ce2:	dc3a      	bgt.n	8003d5a <HAL_UART_RxCpltCallback+0xb6>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <HAL_UART_RxCpltCallback+0x4a>
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d012      	beq.n	8003d12 <HAL_UART_RxCpltCallback+0x6e>
 8003cec:	e035      	b.n	8003d5a <HAL_UART_RxCpltCallback+0xb6>
					if(uart2_rx_data==0x20)
 8003cee:	4b2c      	ldr	r3, [pc, #176]	; (8003da0 <HAL_UART_RxCpltCallback+0xfc>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d141      	bne.n	8003d7a <HAL_UART_RxCpltCallback+0xd6>
						ibus_rx_buf[cnt]=uart2_rx_data;
 8003cf6:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <HAL_UART_RxCpltCallback+0xfc>)
 8003cfe:	7819      	ldrb	r1, [r3, #0]
 8003d00:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <HAL_UART_RxCpltCallback+0x100>)
 8003d02:	5499      	strb	r1, [r3, r2]
						cnt++;
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	4b23      	ldr	r3, [pc, #140]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d0e:	701a      	strb	r2, [r3, #0]
					break;
 8003d10:	e033      	b.n	8003d7a <HAL_UART_RxCpltCallback+0xd6>
					if(uart2_rx_data==0x40)
 8003d12:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <HAL_UART_RxCpltCallback+0xfc>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d10d      	bne.n	8003d36 <HAL_UART_RxCpltCallback+0x92>
						ibus_rx_buf[cnt]=uart2_rx_data;
 8003d1a:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <HAL_UART_RxCpltCallback+0xfc>)
 8003d22:	7819      	ldrb	r1, [r3, #0]
 8003d24:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <HAL_UART_RxCpltCallback+0x100>)
 8003d26:	5499      	strb	r1, [r3, r2]
						cnt++;
 8003d28:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d32:	701a      	strb	r2, [r3, #0]
					break;
 8003d34:	e022      	b.n	8003d7c <HAL_UART_RxCpltCallback+0xd8>
						cnt=0;
 8003d36:	4b19      	ldr	r3, [pc, #100]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
					break;
 8003d3c:	e01e      	b.n	8003d7c <HAL_UART_RxCpltCallback+0xd8>
					ibus_rx_buf[cnt]=uart2_rx_data;
 8003d3e:	4b17      	ldr	r3, [pc, #92]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_UART_RxCpltCallback+0xfc>)
 8003d46:	7819      	ldrb	r1, [r3, #0]
 8003d48:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <HAL_UART_RxCpltCallback+0x100>)
 8003d4a:	5499      	strb	r1, [r3, r2]
					cnt=0;
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
					ibus_rx_cplt_flag = 1;
 8003d52:	4b15      	ldr	r3, [pc, #84]	; (8003da8 <HAL_UART_RxCpltCallback+0x104>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
					break;
 8003d58:	e010      	b.n	8003d7c <HAL_UART_RxCpltCallback+0xd8>
					ibus_rx_buf[cnt]=uart2_rx_data;
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_UART_RxCpltCallback+0xfc>)
 8003d62:	7819      	ldrb	r1, [r3, #0]
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <HAL_UART_RxCpltCallback+0x100>)
 8003d66:	5499      	strb	r1, [r3, r2]
					cnt++;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <HAL_UART_RxCpltCallback+0xf8>)
 8003d72:	701a      	strb	r2, [r3, #0]
					break;
 8003d74:	e002      	b.n	8003d7c <HAL_UART_RxCpltCallback+0xd8>
	}
 8003d76:	bf00      	nop
 8003d78:	e000      	b.n	8003d7c <HAL_UART_RxCpltCallback+0xd8>
					break;
 8003d7a:	bf00      	nop
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40011000 	.word	0x40011000
 8003d88:	24000230 	.word	0x24000230
 8003d8c:	24000231 	.word	0x24000231
 8003d90:	24000440 	.word	0x24000440
 8003d94:	40004400 	.word	0x40004400
 8003d98:	24000232 	.word	0x24000232
 8003d9c:	24000240 	.word	0x24000240
 8003da0:	24000233 	.word	0x24000233
 8003da4:	240006bc 	.word	0x240006bc
 8003da8:	24000234 	.word	0x24000234

08003dac <Receive_Command>:

void Receive_Command(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <Receive_Command+0xa0>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d142      	bne.n	8003e3e <Receive_Command+0x92>
	{
		uart1_rx_flag = 0;
 8003db8:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <Receive_Command+0xa0>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <Receive_Command+0xa4>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	3b31      	subs	r3, #49	; 0x31
 8003dc4:	2b07      	cmp	r3, #7
 8003dc6:	d833      	bhi.n	8003e30 <Receive_Command+0x84>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <Receive_Command+0x24>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003df1 	.word	0x08003df1
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003e01 	.word	0x08003e01
 8003ddc:	08003e09 	.word	0x08003e09
 8003de0:	08003e11 	.word	0x08003e11
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e21 	.word	0x08003e21
 8003dec:	08003e29 	.word	0x08003e29
		{
		case '1': print_mode = 1; break; //Roll, Pitch, Yaw
 8003df0:	4b18      	ldr	r3, [pc, #96]	; (8003e54 <Receive_Command+0xa8>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e023      	b.n	8003e40 <Receive_Command+0x94>
		case '2': print_mode = 2; break; //Alt Raw, Alt Filt
 8003df8:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <Receive_Command+0xa8>)
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	701a      	strb	r2, [r3, #0]
 8003dfe:	e01f      	b.n	8003e40 <Receive_Command+0x94>
		case '3': print_mode = 3; break; //Gyro
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <Receive_Command+0xa8>)
 8003e02:	2203      	movs	r2, #3
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e01b      	b.n	8003e40 <Receive_Command+0x94>
		case '4': print_mode = 4; break; //Accel
 8003e08:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <Receive_Command+0xa8>)
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	701a      	strb	r2, [r3, #0]
 8003e0e:	e017      	b.n	8003e40 <Receive_Command+0x94>
		case '5': print_mode = 5; break; //Mag
 8003e10:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <Receive_Command+0xa8>)
 8003e12:	2205      	movs	r2, #5
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e013      	b.n	8003e40 <Receive_Command+0x94>
		case '6': print_mode = 6; break; //Mag_Offset
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <Receive_Command+0xa8>)
 8003e1a:	2206      	movs	r2, #6
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e00f      	b.n	8003e40 <Receive_Command+0x94>
		case '7': print_mode = 7; break; //Controller Channels
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <Receive_Command+0xa8>)
 8003e22:	2207      	movs	r2, #7
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e00b      	b.n	8003e40 <Receive_Command+0x94>
		case '8': mag_calibration_enable = 1; break; //Mag_Raw
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <Receive_Command+0xac>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	e007      	b.n	8003e40 <Receive_Command+0x94>
		default: print_mode = 0; mag_calibration_enable = 0; break; // Stop Printing
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <Receive_Command+0xa8>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <Receive_Command+0xac>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	e000      	b.n	8003e40 <Receive_Command+0x94>
		}
	}
 8003e3e:	bf00      	nop
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	24000230 	.word	0x24000230
 8003e50:	24000231 	.word	0x24000231
 8003e54:	2400022c 	.word	0x2400022c
 8003e58:	2400022d 	.word	0x2400022d

08003e5c <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
	iBus_return = 0;
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <Is_iBus_Received+0x44>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
	if(ibus_rx_cplt_flag==1)
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d10f      	bne.n	8003e92 <Is_iBus_Received+0x36>
		{
			ibus_rx_cplt_flag=0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	71fb      	strb	r3, [r7, #7]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8003e76:	2120      	movs	r1, #32
 8003e78:	480a      	ldr	r0, [pc, #40]	; (8003ea4 <Is_iBus_Received+0x48>)
 8003e7a:	f7fc fc05 	bl	8000688 <iBus_Check_CHKSUM>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d106      	bne.n	8003e92 <Is_iBus_Received+0x36>
			{
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003e84:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <Is_iBus_Received+0x4c>)
 8003e86:	4807      	ldr	r0, [pc, #28]	; (8003ea4 <Is_iBus_Received+0x48>)
 8003e88:	f7fc fc35 	bl	80006f6 <iBus_Parsing>
				iBus_return = 1;
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <Is_iBus_Received+0x44>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
			}
		}
		return iBus_return;
 8003e92:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <Is_iBus_Received+0x44>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	24000266 	.word	0x24000266
 8003ea4:	240006bc 	.word	0x240006bc
 8003ea8:	24000250 	.word	0x24000250

08003eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
	return 1;
 8003eb0:	2301      	movs	r3, #1
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <_kill>:

int _kill(int pid, int sig)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ec6:	f00c fa9f 	bl	8010408 <__errno>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2216      	movs	r2, #22
 8003ece:	601a      	str	r2, [r3, #0]
	return -1;
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <_exit>:

void _exit (int status)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ffe7 	bl	8003ebc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003eee:	e7fe      	b.n	8003eee <_exit+0x12>

08003ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e00a      	b.n	8003f18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f02:	f3af 8000 	nop.w
 8003f06:	4601      	mov	r1, r0
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	60ba      	str	r2, [r7, #8]
 8003f0e:	b2ca      	uxtb	r2, r1
 8003f10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	3301      	adds	r3, #1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	dbf0      	blt.n	8003f02 <_read+0x12>
	}

return len;
 8003f20:	687b      	ldr	r3, [r7, #4]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
	return -1;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f52:	605a      	str	r2, [r3, #4]
	return 0;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <_isatty>:

int _isatty(int file)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
	return 1;
 8003f6a:	2301      	movs	r3, #1
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
	return 0;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <_sbrk+0x5c>)
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <_sbrk+0x60>)
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fa8:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <_sbrk+0x64>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <_sbrk+0x64>)
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <_sbrk+0x68>)
 8003fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <_sbrk+0x64>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d207      	bcs.n	8003fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fc4:	f00c fa20 	bl	8010408 <__errno>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	220c      	movs	r2, #12
 8003fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fce:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd2:	e009      	b.n	8003fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <_sbrk+0x64>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <_sbrk+0x64>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <_sbrk+0x64>)
 8003fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	24080000 	.word	0x24080000
 8003ff4:	00000400 	.word	0x00000400
 8003ff8:	24000244 	.word	0x24000244
 8003ffc:	24000718 	.word	0x24000718

08004000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004004:	4b39      	ldr	r3, [pc, #228]	; (80040ec <SystemInit+0xec>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	4a38      	ldr	r2, [pc, #224]	; (80040ec <SystemInit+0xec>)
 800400c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004014:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <SystemInit+0xf0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	2b06      	cmp	r3, #6
 800401e:	d807      	bhi.n	8004030 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <SystemInit+0xf0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f023 030f 	bic.w	r3, r3, #15
 8004028:	4a31      	ldr	r2, [pc, #196]	; (80040f0 <SystemInit+0xf0>)
 800402a:	f043 0307 	orr.w	r3, r3, #7
 800402e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004030:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <SystemInit+0xf4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a2f      	ldr	r2, [pc, #188]	; (80040f4 <SystemInit+0xf4>)
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800403c:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <SystemInit+0xf4>)
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004042:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <SystemInit+0xf4>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	492b      	ldr	r1, [pc, #172]	; (80040f4 <SystemInit+0xf4>)
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <SystemInit+0xf8>)
 800404a:	4013      	ands	r3, r2
 800404c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800404e:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <SystemInit+0xf0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d007      	beq.n	800406a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800405a:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <SystemInit+0xf0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 030f 	bic.w	r3, r3, #15
 8004062:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <SystemInit+0xf0>)
 8004064:	f043 0307 	orr.w	r3, r3, #7
 8004068:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <SystemInit+0xf4>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <SystemInit+0xf4>)
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004076:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <SystemInit+0xf4>)
 8004078:	2200      	movs	r2, #0
 800407a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <SystemInit+0xf4>)
 800407e:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <SystemInit+0xfc>)
 8004080:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004082:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <SystemInit+0xf4>)
 8004084:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <SystemInit+0x100>)
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004088:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <SystemInit+0xf4>)
 800408a:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <SystemInit+0x104>)
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800408e:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <SystemInit+0xf4>)
 8004090:	2200      	movs	r2, #0
 8004092:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004094:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <SystemInit+0xf4>)
 8004096:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <SystemInit+0x104>)
 8004098:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <SystemInit+0xf4>)
 800409c:	2200      	movs	r2, #0
 800409e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80040a0:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <SystemInit+0xf4>)
 80040a2:	4a18      	ldr	r2, [pc, #96]	; (8004104 <SystemInit+0x104>)
 80040a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <SystemInit+0xf4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040ac:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <SystemInit+0xf4>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a10      	ldr	r2, [pc, #64]	; (80040f4 <SystemInit+0xf4>)
 80040b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80040b8:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <SystemInit+0xf4>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <SystemInit+0x108>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <SystemInit+0x10c>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ca:	d202      	bcs.n	80040d2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <SystemInit+0x110>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <SystemInit+0x114>)
 80040d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80040d8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80040da:	4b04      	ldr	r3, [pc, #16]	; (80040ec <SystemInit+0xec>)
 80040dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040e0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	e000ed00 	.word	0xe000ed00
 80040f0:	52002000 	.word	0x52002000
 80040f4:	58024400 	.word	0x58024400
 80040f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80040fc:	02020200 	.word	0x02020200
 8004100:	01ff0000 	.word	0x01ff0000
 8004104:	01010280 	.word	0x01010280
 8004108:	5c001000 	.word	0x5c001000
 800410c:	ffff0000 	.word	0xffff0000
 8004110:	51008108 	.word	0x51008108
 8004114:	52004000 	.word	0x52004000

08004118 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af02      	add	r7, sp, #8
 800411e:	4603      	mov	r3, r0
 8004120:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8004122:	f107 020f 	add.w	r2, r7, #15
 8004126:	1df9      	adds	r1, r7, #7
 8004128:	2364      	movs	r3, #100	; 0x64
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	2301      	movs	r3, #1
 800412e:	4804      	ldr	r0, [pc, #16]	; (8004140 <W25qxx_Spi+0x28>)
 8004130:	f009 f8a6 	bl	800d280 <HAL_SPI_TransmitReceive>
	return ret;
 8004134:	7bfb      	ldrb	r3, [r7, #15]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	24000548 	.word	0x24000548

08004144 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	2300      	movs	r3, #0
 8004158:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800415a:	2200      	movs	r2, #0
 800415c:	2140      	movs	r1, #64	; 0x40
 800415e:	4813      	ldr	r0, [pc, #76]	; (80041ac <W25qxx_ReadID+0x68>)
 8004160:	f003 fde8 	bl	8007d34 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004164:	209f      	movs	r0, #159	; 0x9f
 8004166:	f7ff ffd7 	bl	8004118 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800416a:	20a5      	movs	r0, #165	; 0xa5
 800416c:	f7ff ffd4 	bl	8004118 <W25qxx_Spi>
 8004170:	4603      	mov	r3, r0
 8004172:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004174:	20a5      	movs	r0, #165	; 0xa5
 8004176:	f7ff ffcf 	bl	8004118 <W25qxx_Spi>
 800417a:	4603      	mov	r3, r0
 800417c:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800417e:	20a5      	movs	r0, #165	; 0xa5
 8004180:	f7ff ffca 	bl	8004118 <W25qxx_Spi>
 8004184:	4603      	mov	r3, r0
 8004186:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004188:	2201      	movs	r2, #1
 800418a:	2140      	movs	r1, #64	; 0x40
 800418c:	4807      	ldr	r0, [pc, #28]	; (80041ac <W25qxx_ReadID+0x68>)
 800418e:	f003 fdd1 	bl	8007d34 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	041a      	lsls	r2, r3, #16
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	4313      	orrs	r3, r2
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]
	return Temp;
 80041a2:	68fb      	ldr	r3, [r7, #12]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	58020400 	.word	0x58020400

080041b0 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041b6:	2200      	movs	r2, #0
 80041b8:	2140      	movs	r1, #64	; 0x40
 80041ba:	4816      	ldr	r0, [pc, #88]	; (8004214 <W25qxx_ReadUniqID+0x64>)
 80041bc:	f003 fdba 	bl	8007d34 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80041c0:	204b      	movs	r0, #75	; 0x4b
 80041c2:	f7ff ffa9 	bl	8004118 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	71fb      	strb	r3, [r7, #7]
 80041ca:	e005      	b.n	80041d8 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041cc:	20a5      	movs	r0, #165	; 0xa5
 80041ce:	f7ff ffa3 	bl	8004118 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	3301      	adds	r3, #1
 80041d6:	71fb      	strb	r3, [r7, #7]
 80041d8:	79fb      	ldrb	r3, [r7, #7]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d9f6      	bls.n	80041cc <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80041de:	2300      	movs	r3, #0
 80041e0:	71bb      	strb	r3, [r7, #6]
 80041e2:	e00b      	b.n	80041fc <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80041e4:	79bc      	ldrb	r4, [r7, #6]
 80041e6:	20a5      	movs	r0, #165	; 0xa5
 80041e8:	f7ff ff96 	bl	8004118 <W25qxx_Spi>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b09      	ldr	r3, [pc, #36]	; (8004218 <W25qxx_ReadUniqID+0x68>)
 80041f2:	4423      	add	r3, r4
 80041f4:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80041f6:	79bb      	ldrb	r3, [r7, #6]
 80041f8:	3301      	adds	r3, #1
 80041fa:	71bb      	strb	r3, [r7, #6]
 80041fc:	79bb      	ldrb	r3, [r7, #6]
 80041fe:	2b07      	cmp	r3, #7
 8004200:	d9f0      	bls.n	80041e4 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004202:	2201      	movs	r2, #1
 8004204:	2140      	movs	r1, #64	; 0x40
 8004206:	4803      	ldr	r0, [pc, #12]	; (8004214 <W25qxx_ReadUniqID+0x64>)
 8004208:	f003 fd94 	bl	8007d34 <HAL_GPIO_WritePin>
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	bd90      	pop	{r4, r7, pc}
 8004214:	58020400 	.word	0x58020400
 8004218:	240006dc 	.word	0x240006dc

0800421c <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004220:	2200      	movs	r2, #0
 8004222:	2140      	movs	r1, #64	; 0x40
 8004224:	4807      	ldr	r0, [pc, #28]	; (8004244 <W25qxx_WriteEnable+0x28>)
 8004226:	f003 fd85 	bl	8007d34 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800422a:	2006      	movs	r0, #6
 800422c:	f7ff ff74 	bl	8004118 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004230:	2201      	movs	r2, #1
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	4803      	ldr	r0, [pc, #12]	; (8004244 <W25qxx_WriteEnable+0x28>)
 8004236:	f003 fd7d 	bl	8007d34 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800423a:	2001      	movs	r0, #1
 800423c:	f000 fc36 	bl	8004aac <HAL_Delay>
}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}
 8004244:	58020400 	.word	0x58020400

08004248 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	4603      	mov	r3, r0
 8004250:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004256:	2200      	movs	r2, #0
 8004258:	2140      	movs	r1, #64	; 0x40
 800425a:	481c      	ldr	r0, [pc, #112]	; (80042cc <W25qxx_ReadStatusRegister+0x84>)
 800425c:	f003 fd6a 	bl	8007d34 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d10c      	bne.n	8004280 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004266:	2005      	movs	r0, #5
 8004268:	f7ff ff56 	bl	8004118 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800426c:	20a5      	movs	r0, #165	; 0xa5
 800426e:	f7ff ff53 	bl	8004118 <W25qxx_Spi>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004276:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <W25qxx_ReadStatusRegister+0x88>)
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800427e:	e01b      	b.n	80042b8 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d10c      	bne.n	80042a0 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004286:	2035      	movs	r0, #53	; 0x35
 8004288:	f7ff ff46 	bl	8004118 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800428c:	20a5      	movs	r0, #165	; 0xa5
 800428e:	f7ff ff43 	bl	8004118 <W25qxx_Spi>
 8004292:	4603      	mov	r3, r0
 8004294:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004296:	4a0e      	ldr	r2, [pc, #56]	; (80042d0 <W25qxx_ReadStatusRegister+0x88>)
 8004298:	7bfb      	ldrb	r3, [r7, #15]
 800429a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800429e:	e00b      	b.n	80042b8 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80042a0:	2015      	movs	r0, #21
 80042a2:	f7ff ff39 	bl	8004118 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042a6:	20a5      	movs	r0, #165	; 0xa5
 80042a8:	f7ff ff36 	bl	8004118 <W25qxx_Spi>
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80042b0:	4a07      	ldr	r2, [pc, #28]	; (80042d0 <W25qxx_ReadStatusRegister+0x88>)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042b8:	2201      	movs	r2, #1
 80042ba:	2140      	movs	r1, #64	; 0x40
 80042bc:	4803      	ldr	r0, [pc, #12]	; (80042cc <W25qxx_ReadStatusRegister+0x84>)
 80042be:	f003 fd39 	bl	8007d34 <HAL_GPIO_WritePin>
	return status;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	58020400 	.word	0x58020400
 80042d0:	240006dc 	.word	0x240006dc

080042d4 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80042d8:	2001      	movs	r0, #1
 80042da:	f000 fbe7 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042de:	2200      	movs	r2, #0
 80042e0:	2140      	movs	r1, #64	; 0x40
 80042e2:	480f      	ldr	r0, [pc, #60]	; (8004320 <W25qxx_WaitForWriteEnd+0x4c>)
 80042e4:	f003 fd26 	bl	8007d34 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80042e8:	2005      	movs	r0, #5
 80042ea:	f7ff ff15 	bl	8004118 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042ee:	20a5      	movs	r0, #165	; 0xa5
 80042f0:	f7ff ff12 	bl	8004118 <W25qxx_Spi>
 80042f4:	4603      	mov	r3, r0
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <W25qxx_WaitForWriteEnd+0x50>)
 80042fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80042fe:	2001      	movs	r0, #1
 8004300:	f000 fbd4 	bl	8004aac <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004304:	4b07      	ldr	r3, [pc, #28]	; (8004324 <W25qxx_WaitForWriteEnd+0x50>)
 8004306:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ed      	bne.n	80042ee <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004312:	2201      	movs	r2, #1
 8004314:	2140      	movs	r1, #64	; 0x40
 8004316:	4802      	ldr	r0, [pc, #8]	; (8004320 <W25qxx_WaitForWriteEnd+0x4c>)
 8004318:	f003 fd0c 	bl	8007d34 <HAL_GPIO_WritePin>
}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}
 8004320:	58020400 	.word	0x58020400
 8004324:	240006dc 	.word	0x240006dc

08004328 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 800432e:	4b65      	ldr	r3, [pc, #404]	; (80044c4 <W25qxx_Init+0x19c>)
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004336:	e002      	b.n	800433e <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004338:	2001      	movs	r0, #1
 800433a:	f000 fbb7 	bl	8004aac <HAL_Delay>
	while (HAL_GetTick() < 100)
 800433e:	f000 fba9 	bl	8004a94 <HAL_GetTick>
 8004342:	4603      	mov	r3, r0
 8004344:	2b63      	cmp	r3, #99	; 0x63
 8004346:	d9f7      	bls.n	8004338 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004348:	2201      	movs	r2, #1
 800434a:	2140      	movs	r1, #64	; 0x40
 800434c:	485e      	ldr	r0, [pc, #376]	; (80044c8 <W25qxx_Init+0x1a0>)
 800434e:	f003 fcf1 	bl	8007d34 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004352:	2064      	movs	r0, #100	; 0x64
 8004354:	f000 fbaa 	bl	8004aac <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8004358:	f7ff fef4 	bl	8004144 <W25qxx_ReadID>
 800435c:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	3b11      	subs	r3, #17
 8004364:	2b0f      	cmp	r3, #15
 8004366:	d86c      	bhi.n	8004442 <W25qxx_Init+0x11a>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <W25qxx_Init+0x48>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004435 	.word	0x08004435
 8004374:	08004427 	.word	0x08004427
 8004378:	08004419 	.word	0x08004419
 800437c:	0800440b 	.word	0x0800440b
 8004380:	080043fd 	.word	0x080043fd
 8004384:	080043ef 	.word	0x080043ef
 8004388:	080043e1 	.word	0x080043e1
 800438c:	080043d1 	.word	0x080043d1
 8004390:	080043c1 	.word	0x080043c1
 8004394:	08004443 	.word	0x08004443
 8004398:	08004443 	.word	0x08004443
 800439c:	08004443 	.word	0x08004443
 80043a0:	08004443 	.word	0x08004443
 80043a4:	08004443 	.word	0x08004443
 80043a8:	08004443 	.word	0x08004443
 80043ac:	080043b1 	.word	0x080043b1
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80043b0:	4b44      	ldr	r3, [pc, #272]	; (80044c4 <W25qxx_Init+0x19c>)
 80043b2:	220a      	movs	r2, #10
 80043b4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80043b6:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <W25qxx_Init+0x19c>)
 80043b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043bc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80043be:	e046      	b.n	800444e <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80043c0:	4b40      	ldr	r3, [pc, #256]	; (80044c4 <W25qxx_Init+0x19c>)
 80043c2:	2209      	movs	r2, #9
 80043c4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80043c6:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <W25qxx_Init+0x19c>)
 80043c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80043ce:	e03e      	b.n	800444e <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80043d0:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <W25qxx_Init+0x19c>)
 80043d2:	2208      	movs	r2, #8
 80043d4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80043d6:	4b3b      	ldr	r3, [pc, #236]	; (80044c4 <W25qxx_Init+0x19c>)
 80043d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043dc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80043de:	e036      	b.n	800444e <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80043e0:	4b38      	ldr	r3, [pc, #224]	; (80044c4 <W25qxx_Init+0x19c>)
 80043e2:	2207      	movs	r2, #7
 80043e4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80043e6:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <W25qxx_Init+0x19c>)
 80043e8:	2280      	movs	r2, #128	; 0x80
 80043ea:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80043ec:	e02f      	b.n	800444e <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80043ee:	4b35      	ldr	r3, [pc, #212]	; (80044c4 <W25qxx_Init+0x19c>)
 80043f0:	2206      	movs	r2, #6
 80043f2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <W25qxx_Init+0x19c>)
 80043f6:	2240      	movs	r2, #64	; 0x40
 80043f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80043fa:	e028      	b.n	800444e <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80043fc:	4b31      	ldr	r3, [pc, #196]	; (80044c4 <W25qxx_Init+0x19c>)
 80043fe:	2205      	movs	r2, #5
 8004400:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004402:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <W25qxx_Init+0x19c>)
 8004404:	2220      	movs	r2, #32
 8004406:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8004408:	e021      	b.n	800444e <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 800440a:	4b2e      	ldr	r3, [pc, #184]	; (80044c4 <W25qxx_Init+0x19c>)
 800440c:	2204      	movs	r2, #4
 800440e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004410:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <W25qxx_Init+0x19c>)
 8004412:	2210      	movs	r2, #16
 8004414:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8004416:	e01a      	b.n	800444e <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004418:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <W25qxx_Init+0x19c>)
 800441a:	2203      	movs	r2, #3
 800441c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800441e:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <W25qxx_Init+0x19c>)
 8004420:	2208      	movs	r2, #8
 8004422:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8004424:	e013      	b.n	800444e <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004426:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <W25qxx_Init+0x19c>)
 8004428:	2202      	movs	r2, #2
 800442a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 800442c:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <W25qxx_Init+0x19c>)
 800442e:	2204      	movs	r2, #4
 8004430:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8004432:	e00c      	b.n	800444e <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004434:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <W25qxx_Init+0x19c>)
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800443a:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <W25qxx_Init+0x19c>)
 800443c:	2202      	movs	r2, #2
 800443e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8004440:	e005      	b.n	800444e <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8004442:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <W25qxx_Init+0x19c>)
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800444a:	2300      	movs	r3, #0
 800444c:	e036      	b.n	80044bc <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <W25qxx_Init+0x19c>)
 8004450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004454:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004456:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <W25qxx_Init+0x19c>)
 8004458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800445c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800445e:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <W25qxx_Init+0x19c>)
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	4a17      	ldr	r2, [pc, #92]	; (80044c4 <W25qxx_Init+0x19c>)
 8004466:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004468:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <W25qxx_Init+0x19c>)
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <W25qxx_Init+0x19c>)
 800446e:	6912      	ldr	r2, [r2, #16]
 8004470:	fb02 f303 	mul.w	r3, r2, r3
 8004474:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <W25qxx_Init+0x19c>)
 8004476:	8952      	ldrh	r2, [r2, #10]
 8004478:	fbb3 f3f2 	udiv	r3, r3, r2
 800447c:	4a11      	ldr	r2, [pc, #68]	; (80044c4 <W25qxx_Init+0x19c>)
 800447e:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004480:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <W25qxx_Init+0x19c>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	4a0f      	ldr	r2, [pc, #60]	; (80044c4 <W25qxx_Init+0x19c>)
 8004488:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800448a:	4b0e      	ldr	r3, [pc, #56]	; (80044c4 <W25qxx_Init+0x19c>)
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	4a0d      	ldr	r2, [pc, #52]	; (80044c4 <W25qxx_Init+0x19c>)
 8004490:	6912      	ldr	r2, [r2, #16]
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	0a9b      	lsrs	r3, r3, #10
 8004498:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <W25qxx_Init+0x19c>)
 800449a:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800449c:	f7ff fe88 	bl	80041b0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80044a0:	2001      	movs	r0, #1
 80044a2:	f7ff fed1 	bl	8004248 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80044a6:	2002      	movs	r0, #2
 80044a8:	f7ff fece 	bl	8004248 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80044ac:	2003      	movs	r0, #3
 80044ae:	f7ff fecb 	bl	8004248 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80044b2:	4b04      	ldr	r3, [pc, #16]	; (80044c4 <W25qxx_Init+0x19c>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80044ba:	2301      	movs	r3, #1
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	240006dc 	.word	0x240006dc
 80044c8:	58020400 	.word	0x58020400

080044cc <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80044d4:	e002      	b.n	80044dc <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80044d6:	2001      	movs	r0, #1
 80044d8:	f000 fae8 	bl	8004aac <HAL_Delay>
	while (w25qxx.Lock == 1)
 80044dc:	4b25      	ldr	r3, [pc, #148]	; (8004574 <W25qxx_EraseSector+0xa8>)
 80044de:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d0f7      	beq.n	80044d6 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80044e6:	4b23      	ldr	r3, [pc, #140]	; (8004574 <W25qxx_EraseSector+0xa8>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 80044ee:	f7ff fef1 	bl	80042d4 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80044f2:	4b20      	ldr	r3, [pc, #128]	; (8004574 <W25qxx_EraseSector+0xa8>)
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	fb02 f303 	mul.w	r3, r2, r3
 80044fc:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80044fe:	f7ff fe8d 	bl	800421c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004502:	2200      	movs	r2, #0
 8004504:	2140      	movs	r1, #64	; 0x40
 8004506:	481c      	ldr	r0, [pc, #112]	; (8004578 <W25qxx_EraseSector+0xac>)
 8004508:	f003 fc14 	bl	8007d34 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <W25qxx_EraseSector+0xa8>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d909      	bls.n	8004528 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8004514:	2021      	movs	r0, #33	; 0x21
 8004516:	f7ff fdff 	bl	8004118 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	0e1b      	lsrs	r3, r3, #24
 800451e:	b2db      	uxtb	r3, r3
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fdf9 	bl	8004118 <W25qxx_Spi>
 8004526:	e002      	b.n	800452e <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004528:	2020      	movs	r0, #32
 800452a:	f7ff fdf5 	bl	8004118 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	b2db      	uxtb	r3, r3
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fdef 	bl	8004118 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	b2db      	uxtb	r3, r3
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fde9 	bl	8004118 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fde4 	bl	8004118 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004550:	2201      	movs	r2, #1
 8004552:	2140      	movs	r1, #64	; 0x40
 8004554:	4808      	ldr	r0, [pc, #32]	; (8004578 <W25qxx_EraseSector+0xac>)
 8004556:	f003 fbed 	bl	8007d34 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800455a:	f7ff febb 	bl	80042d4 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 800455e:	2001      	movs	r0, #1
 8004560:	f000 faa4 	bl	8004aac <HAL_Delay>
	w25qxx.Lock = 0;
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <W25qxx_EraseSector+0xa8>)
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	240006dc 	.word	0x240006dc
 8004578:	58020400 	.word	0x58020400

0800457c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <W25qxx_SectorToPage+0x28>)
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	fb02 f303 	mul.w	r3, r2, r3
 800458e:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <W25qxx_SectorToPage+0x28>)
 8004590:	8952      	ldrh	r2, [r2, #10]
 8004592:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	240006dc 	.word	0x240006dc

080045a8 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80045b6:	e002      	b.n	80045be <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80045b8:	2001      	movs	r0, #1
 80045ba:	f000 fa77 	bl	8004aac <HAL_Delay>
	while (w25qxx.Lock == 1)
 80045be:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <W25qxx_WritePage+0xfc>)
 80045c0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d0f7      	beq.n	80045b8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80045c8:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <W25qxx_WritePage+0xfc>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	4a33      	ldr	r2, [pc, #204]	; (80046a4 <W25qxx_WritePage+0xfc>)
 80045d8:	8952      	ldrh	r2, [r2, #10]
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <W25qxx_WritePage+0x3c>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80045e4:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <W25qxx_WritePage+0xfc>)
 80045e6:	895b      	ldrh	r3, [r3, #10]
 80045e8:	461a      	mov	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	4413      	add	r3, r2
 80045f6:	4a2b      	ldr	r2, [pc, #172]	; (80046a4 <W25qxx_WritePage+0xfc>)
 80045f8:	8952      	ldrh	r2, [r2, #10]
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d905      	bls.n	800460a <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80045fe:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <W25qxx_WritePage+0xfc>)
 8004600:	895b      	ldrh	r3, [r3, #10]
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 800460a:	f7ff fe63 	bl	80042d4 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800460e:	f7ff fe05 	bl	800421c <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004612:	2200      	movs	r2, #0
 8004614:	2140      	movs	r1, #64	; 0x40
 8004616:	4824      	ldr	r0, [pc, #144]	; (80046a8 <W25qxx_WritePage+0x100>)
 8004618:	f003 fb8c 	bl	8007d34 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <W25qxx_WritePage+0xfc>)
 800461e:	895b      	ldrh	r3, [r3, #10]
 8004620:	461a      	mov	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	fb03 f302 	mul.w	r3, r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <W25qxx_WritePage+0xfc>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b08      	cmp	r3, #8
 8004634:	d909      	bls.n	800464a <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8004636:	2012      	movs	r0, #18
 8004638:	f7ff fd6e 	bl	8004118 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0e1b      	lsrs	r3, r3, #24
 8004640:	b2db      	uxtb	r3, r3
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fd68 	bl	8004118 <W25qxx_Spi>
 8004648:	e002      	b.n	8004650 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 800464a:	2002      	movs	r0, #2
 800464c:	f7ff fd64 	bl	8004118 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	0c1b      	lsrs	r3, r3, #16
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fd5e 	bl	8004118 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	b2db      	uxtb	r3, r3
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fd58 	bl	8004118 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fd53 	bl	8004118 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	b29a      	uxth	r2, r3
 8004676:	2364      	movs	r3, #100	; 0x64
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	480c      	ldr	r0, [pc, #48]	; (80046ac <W25qxx_WritePage+0x104>)
 800467c:	f008 fa1c 	bl	800cab8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004680:	2201      	movs	r2, #1
 8004682:	2140      	movs	r1, #64	; 0x40
 8004684:	4808      	ldr	r0, [pc, #32]	; (80046a8 <W25qxx_WritePage+0x100>)
 8004686:	f003 fb55 	bl	8007d34 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800468a:	f7ff fe23 	bl	80042d4 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800468e:	2001      	movs	r0, #1
 8004690:	f000 fa0c 	bl	8004aac <HAL_Delay>
	w25qxx.Lock = 0;
 8004694:	4b03      	ldr	r3, [pc, #12]	; (80046a4 <W25qxx_WritePage+0xfc>)
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	240006dc 	.word	0x240006dc
 80046a8:	58020400 	.word	0x58020400
 80046ac:	24000548 	.word	0x24000548

080046b0 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80046be:	4b2c      	ldr	r3, [pc, #176]	; (8004770 <W25qxx_WriteSector+0xc0>)
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d802      	bhi.n	80046ce <W25qxx_WriteSector+0x1e>
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80046ce:	4b28      	ldr	r3, [pc, #160]	; (8004770 <W25qxx_WriteSector+0xc0>)
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80046d4:	4b26      	ldr	r3, [pc, #152]	; (8004770 <W25qxx_WriteSector+0xc0>)
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d243      	bcs.n	8004766 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	441a      	add	r2, r3
 80046e4:	4b22      	ldr	r3, [pc, #136]	; (8004770 <W25qxx_WriteSector+0xc0>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d905      	bls.n	80046f8 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 80046ec:	4b20      	ldr	r3, [pc, #128]	; (8004770 <W25qxx_WriteSector+0xc0>)
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	e001      	b.n	80046fc <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80046fc:	68b8      	ldr	r0, [r7, #8]
 80046fe:	f7ff ff3d 	bl	800457c <W25qxx_SectorToPage>
 8004702:	4602      	mov	r2, r0
 8004704:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <W25qxx_WriteSector+0xc0>)
 8004706:	895b      	ldrh	r3, [r3, #10]
 8004708:	4619      	mov	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004710:	4413      	add	r3, r2
 8004712:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004714:	4b16      	ldr	r3, [pc, #88]	; (8004770 <W25qxx_WriteSector+0xc0>)
 8004716:	895b      	ldrh	r3, [r3, #10]
 8004718:	461a      	mov	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004720:	fb02 f201 	mul.w	r2, r2, r1
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	69f9      	ldr	r1, [r7, #28]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff ff3a 	bl	80045a8 <W25qxx_WritePage>
		StartPage++;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	3301      	adds	r3, #1
 8004738:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <W25qxx_WriteSector+0xc0>)
 800473c:	895b      	ldrh	r3, [r3, #10]
 800473e:	461a      	mov	r2, r3
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	1a9a      	subs	r2, r3, r2
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	4413      	add	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800474a:	4b09      	ldr	r3, [pc, #36]	; (8004770 <W25qxx_WriteSector+0xc0>)
 800474c:	895b      	ldrh	r3, [r3, #10]
 800474e:	461a      	mov	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	dce1      	bgt.n	8004728 <W25qxx_WriteSector+0x78>
 8004764:	e000      	b.n	8004768 <W25qxx_WriteSector+0xb8>
		return;
 8004766:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	240006dc 	.word	0x240006dc

08004774 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004782:	e002      	b.n	800478a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004784:	2001      	movs	r0, #1
 8004786:	f000 f991 	bl	8004aac <HAL_Delay>
	while (w25qxx.Lock == 1)
 800478a:	4b36      	ldr	r3, [pc, #216]	; (8004864 <W25qxx_ReadPage+0xf0>)
 800478c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004790:	2b01      	cmp	r3, #1
 8004792:	d0f7      	beq.n	8004784 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004794:	4b33      	ldr	r3, [pc, #204]	; (8004864 <W25qxx_ReadPage+0xf0>)
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800479c:	4b31      	ldr	r3, [pc, #196]	; (8004864 <W25qxx_ReadPage+0xf0>)
 800479e:	895b      	ldrh	r3, [r3, #10]
 80047a0:	461a      	mov	r2, r3
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d802      	bhi.n	80047ae <W25qxx_ReadPage+0x3a>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d102      	bne.n	80047b4 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80047ae:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <W25qxx_ReadPage+0xf0>)
 80047b0:	895b      	ldrh	r3, [r3, #10]
 80047b2:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	4413      	add	r3, r2
 80047ba:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <W25qxx_ReadPage+0xf0>)
 80047bc:	8952      	ldrh	r2, [r2, #10]
 80047be:	4293      	cmp	r3, r2
 80047c0:	d905      	bls.n	80047ce <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80047c2:	4b28      	ldr	r3, [pc, #160]	; (8004864 <W25qxx_ReadPage+0xf0>)
 80047c4:	895b      	ldrh	r3, [r3, #10]
 80047c6:	461a      	mov	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80047ce:	4b25      	ldr	r3, [pc, #148]	; (8004864 <W25qxx_ReadPage+0xf0>)
 80047d0:	895b      	ldrh	r3, [r3, #10]
 80047d2:	461a      	mov	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	fb03 f302 	mul.w	r3, r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80047e0:	2200      	movs	r2, #0
 80047e2:	2140      	movs	r1, #64	; 0x40
 80047e4:	4820      	ldr	r0, [pc, #128]	; (8004868 <W25qxx_ReadPage+0xf4>)
 80047e6:	f003 faa5 	bl	8007d34 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80047ea:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <W25qxx_ReadPage+0xf0>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d909      	bls.n	8004806 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 80047f2:	200c      	movs	r0, #12
 80047f4:	f7ff fc90 	bl	8004118 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	0e1b      	lsrs	r3, r3, #24
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fc8a 	bl	8004118 <W25qxx_Spi>
 8004804:	e002      	b.n	800480c <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004806:	200b      	movs	r0, #11
 8004808:	f7ff fc86 	bl	8004118 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	0c1b      	lsrs	r3, r3, #16
 8004810:	b2db      	uxtb	r3, r3
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff fc80 	bl	8004118 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	b2db      	uxtb	r3, r3
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fc7a 	bl	8004118 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fc75 	bl	8004118 <W25qxx_Spi>
	W25qxx_Spi(0);
 800482e:	2000      	movs	r0, #0
 8004830:	f7ff fc72 	bl	8004118 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b29a      	uxth	r2, r3
 8004838:	2364      	movs	r3, #100	; 0x64
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	480b      	ldr	r0, [pc, #44]	; (800486c <W25qxx_ReadPage+0xf8>)
 800483e:	f008 fb2d 	bl	800ce9c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004842:	2201      	movs	r2, #1
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	4808      	ldr	r0, [pc, #32]	; (8004868 <W25qxx_ReadPage+0xf4>)
 8004848:	f003 fa74 	bl	8007d34 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800484c:	2001      	movs	r0, #1
 800484e:	f000 f92d 	bl	8004aac <HAL_Delay>
	w25qxx.Lock = 0;
 8004852:	4b04      	ldr	r3, [pc, #16]	; (8004864 <W25qxx_ReadPage+0xf0>)
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	240006dc 	.word	0x240006dc
 8004868:	58020400 	.word	0x58020400
 800486c:	24000548 	.word	0x24000548

08004870 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <W25qxx_ReadSector+0xc0>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	429a      	cmp	r2, r3
 8004886:	d802      	bhi.n	800488e <W25qxx_ReadSector+0x1e>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800488e:	4b28      	ldr	r3, [pc, #160]	; (8004930 <W25qxx_ReadSector+0xc0>)
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004894:	4b26      	ldr	r3, [pc, #152]	; (8004930 <W25qxx_ReadSector+0xc0>)
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	429a      	cmp	r2, r3
 800489c:	d243      	bcs.n	8004926 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	441a      	add	r2, r3
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <W25qxx_ReadSector+0xc0>)
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d905      	bls.n	80048b8 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80048ac:	4b20      	ldr	r3, [pc, #128]	; (8004930 <W25qxx_ReadSector+0xc0>)
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	61bb      	str	r3, [r7, #24]
 80048b6:	e001      	b.n	80048bc <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80048bc:	68b8      	ldr	r0, [r7, #8]
 80048be:	f7ff fe5d 	bl	800457c <W25qxx_SectorToPage>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b1a      	ldr	r3, [pc, #104]	; (8004930 <W25qxx_ReadSector+0xc0>)
 80048c6:	895b      	ldrh	r3, [r3, #10]
 80048c8:	4619      	mov	r1, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80048d0:	4413      	add	r3, r2
 80048d2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <W25qxx_ReadSector+0xc0>)
 80048d6:	895b      	ldrh	r3, [r3, #10]
 80048d8:	461a      	mov	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80048e0:	fb02 f201 	mul.w	r2, r2, r1
 80048e4:	1a9b      	subs	r3, r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	69f9      	ldr	r1, [r7, #28]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f7ff ff40 	bl	8004774 <W25qxx_ReadPage>
		StartPage++;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	3301      	adds	r3, #1
 80048f8:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80048fa:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <W25qxx_ReadSector+0xc0>)
 80048fc:	895b      	ldrh	r3, [r3, #10]
 80048fe:	461a      	mov	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	1a9a      	subs	r2, r3, r2
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	4413      	add	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 800490a:	4b09      	ldr	r3, [pc, #36]	; (8004930 <W25qxx_ReadSector+0xc0>)
 800490c:	895b      	ldrh	r3, [r3, #10]
 800490e:	461a      	mov	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	dce1      	bgt.n	80048e8 <W25qxx_ReadSector+0x78>
 8004924:	e000      	b.n	8004928 <W25qxx_ReadSector+0xb8>
		return;
 8004926:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	240006dc 	.word	0x240006dc

08004934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800496c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004938:	f7ff fb62 	bl	8004000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800493c:	480c      	ldr	r0, [pc, #48]	; (8004970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800493e:	490d      	ldr	r1, [pc, #52]	; (8004974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004940:	4a0d      	ldr	r2, [pc, #52]	; (8004978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004944:	e002      	b.n	800494c <LoopCopyDataInit>

08004946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800494a:	3304      	adds	r3, #4

0800494c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800494c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800494e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004950:	d3f9      	bcc.n	8004946 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004952:	4a0a      	ldr	r2, [pc, #40]	; (800497c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004954:	4c0a      	ldr	r4, [pc, #40]	; (8004980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004958:	e001      	b.n	800495e <LoopFillZerobss>

0800495a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800495a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800495c:	3204      	adds	r2, #4

0800495e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800495e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004960:	d3fb      	bcc.n	800495a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004962:	f00b fd57 	bl	8010414 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004966:	f7fe f945 	bl	8002bf4 <main>
  bx  lr
 800496a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800496c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004970:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004974:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8004978:	08013cc0 	.word	0x08013cc0
  ldr r2, =_sbss
 800497c:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8004980:	24000718 	.word	0x24000718

08004984 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004984:	e7fe      	b.n	8004984 <ADC3_IRQHandler>
	...

08004988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800498e:	2003      	movs	r0, #3
 8004990:	f000 f98c 	bl	8004cac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004994:	f006 fa56 	bl	800ae44 <HAL_RCC_GetSysClockFreq>
 8004998:	4602      	mov	r2, r0
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <HAL_Init+0x68>)
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	4913      	ldr	r1, [pc, #76]	; (80049f4 <HAL_Init+0x6c>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
 80049b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049b2:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <HAL_Init+0x68>)
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	4a0e      	ldr	r2, [pc, #56]	; (80049f4 <HAL_Init+0x6c>)
 80049bc:	5cd3      	ldrb	r3, [r2, r3]
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
 80049c8:	4a0b      	ldr	r2, [pc, #44]	; (80049f8 <HAL_Init+0x70>)
 80049ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049cc:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <HAL_Init+0x74>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049d2:	200f      	movs	r0, #15
 80049d4:	f000 f814 	bl	8004a00 <HAL_InitTick>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e002      	b.n	80049e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80049e2:	f7fe fe4d 	bl	8003680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	58024400 	.word	0x58024400
 80049f4:	080137e4 	.word	0x080137e4
 80049f8:	24000018 	.word	0x24000018
 80049fc:	24000014 	.word	0x24000014

08004a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004a08:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <HAL_InitTick+0x60>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e021      	b.n	8004a58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004a14:	4b13      	ldr	r3, [pc, #76]	; (8004a64 <HAL_InitTick+0x64>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <HAL_InitTick+0x60>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f971 	bl	8004d12 <HAL_SYSTICK_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e00e      	b.n	8004a58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b0f      	cmp	r3, #15
 8004a3e:	d80a      	bhi.n	8004a56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a40:	2200      	movs	r2, #0
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	f000 f93b 	bl	8004cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a4c:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <HAL_InitTick+0x68>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	24000020 	.word	0x24000020
 8004a64:	24000014 	.word	0x24000014
 8004a68:	2400001c 	.word	0x2400001c

08004a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <HAL_IncTick+0x20>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_IncTick+0x24>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <HAL_IncTick+0x24>)
 8004a7e:	6013      	str	r3, [r2, #0]
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	24000020 	.word	0x24000020
 8004a90:	24000704 	.word	0x24000704

08004a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return uwTick;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <HAL_GetTick+0x14>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	24000704 	.word	0x24000704

08004aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ab4:	f7ff ffee 	bl	8004a94 <HAL_GetTick>
 8004ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d005      	beq.n	8004ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <HAL_Delay+0x44>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ad2:	bf00      	nop
 8004ad4:	f7ff ffde 	bl	8004a94 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d8f7      	bhi.n	8004ad4 <HAL_Delay+0x28>
  {
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	24000020 	.word	0x24000020

08004af4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004af8:	4b03      	ldr	r3, [pc, #12]	; (8004b08 <HAL_GetREVID+0x14>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	0c1b      	lsrs	r3, r3, #16
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	5c001000 	.word	0x5c001000

08004b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <__NVIC_SetPriorityGrouping+0x40>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b34:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <__NVIC_SetPriorityGrouping+0x44>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b3a:	4a04      	ldr	r2, [pc, #16]	; (8004b4c <__NVIC_SetPriorityGrouping+0x40>)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	60d3      	str	r3, [r2, #12]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	e000ed00 	.word	0xe000ed00
 8004b50:	05fa0000 	.word	0x05fa0000

08004b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <__NVIC_GetPriorityGrouping+0x18>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	0a1b      	lsrs	r3, r3, #8
 8004b5e:	f003 0307 	and.w	r3, r3, #7
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	db0b      	blt.n	8004b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b82:	88fb      	ldrh	r3, [r7, #6]
 8004b84:	f003 021f 	and.w	r2, r3, #31
 8004b88:	4907      	ldr	r1, [pc, #28]	; (8004ba8 <__NVIC_EnableIRQ+0x38>)
 8004b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	2001      	movs	r0, #1
 8004b92:	fa00 f202 	lsl.w	r2, r0, r2
 8004b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	e000e100 	.word	0xe000e100

08004bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	6039      	str	r1, [r7, #0]
 8004bb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	db0a      	blt.n	8004bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	490c      	ldr	r1, [pc, #48]	; (8004bf8 <__NVIC_SetPriority+0x4c>)
 8004bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bca:	0112      	lsls	r2, r2, #4
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	440b      	add	r3, r1
 8004bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bd4:	e00a      	b.n	8004bec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	4908      	ldr	r1, [pc, #32]	; (8004bfc <__NVIC_SetPriority+0x50>)
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	3b04      	subs	r3, #4
 8004be4:	0112      	lsls	r2, r2, #4
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	440b      	add	r3, r1
 8004bea:	761a      	strb	r2, [r3, #24]
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	e000e100 	.word	0xe000e100
 8004bfc:	e000ed00 	.word	0xe000ed00

08004c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b089      	sub	sp, #36	; 0x24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0307 	and.w	r3, r3, #7
 8004c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f1c3 0307 	rsb	r3, r3, #7
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	bf28      	it	cs
 8004c1e:	2304      	movcs	r3, #4
 8004c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	3304      	adds	r3, #4
 8004c26:	2b06      	cmp	r3, #6
 8004c28:	d902      	bls.n	8004c30 <NVIC_EncodePriority+0x30>
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3b03      	subs	r3, #3
 8004c2e:	e000      	b.n	8004c32 <NVIC_EncodePriority+0x32>
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c34:	f04f 32ff 	mov.w	r2, #4294967295
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43da      	mvns	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	401a      	ands	r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c48:	f04f 31ff 	mov.w	r1, #4294967295
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c52:	43d9      	mvns	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c58:	4313      	orrs	r3, r2
         );
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3724      	adds	r7, #36	; 0x24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
	...

08004c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c78:	d301      	bcc.n	8004c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e00f      	b.n	8004c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <SysTick_Config+0x40>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c86:	210f      	movs	r1, #15
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	f7ff ff8e 	bl	8004bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <SysTick_Config+0x40>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c96:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <SysTick_Config+0x40>)
 8004c98:	2207      	movs	r2, #7
 8004c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	e000e010 	.word	0xe000e010

08004cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ff29 	bl	8004b0c <__NVIC_SetPriorityGrouping>
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b086      	sub	sp, #24
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	4603      	mov	r3, r0
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cd0:	f7ff ff40 	bl	8004b54 <__NVIC_GetPriorityGrouping>
 8004cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	6978      	ldr	r0, [r7, #20]
 8004cdc:	f7ff ff90 	bl	8004c00 <NVIC_EncodePriority>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff5f 	bl	8004bac <__NVIC_SetPriority>
}
 8004cee:	bf00      	nop
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff33 	bl	8004b70 <__NVIC_EnableIRQ>
}
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ffa4 	bl	8004c68 <SysTick_Config>
 8004d20:	4603      	mov	r3, r0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d34:	f7ff feae 	bl	8004a94 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e316      	b.n	8005372 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a66      	ldr	r2, [pc, #408]	; (8004ee4 <HAL_DMA_Init+0x1b8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d04a      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a65      	ldr	r2, [pc, #404]	; (8004ee8 <HAL_DMA_Init+0x1bc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d045      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a63      	ldr	r2, [pc, #396]	; (8004eec <HAL_DMA_Init+0x1c0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d040      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a62      	ldr	r2, [pc, #392]	; (8004ef0 <HAL_DMA_Init+0x1c4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d03b      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a60      	ldr	r2, [pc, #384]	; (8004ef4 <HAL_DMA_Init+0x1c8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d036      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a5f      	ldr	r2, [pc, #380]	; (8004ef8 <HAL_DMA_Init+0x1cc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d031      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a5d      	ldr	r2, [pc, #372]	; (8004efc <HAL_DMA_Init+0x1d0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d02c      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a5c      	ldr	r2, [pc, #368]	; (8004f00 <HAL_DMA_Init+0x1d4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d027      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a5a      	ldr	r2, [pc, #360]	; (8004f04 <HAL_DMA_Init+0x1d8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d022      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a59      	ldr	r2, [pc, #356]	; (8004f08 <HAL_DMA_Init+0x1dc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d01d      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a57      	ldr	r2, [pc, #348]	; (8004f0c <HAL_DMA_Init+0x1e0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d018      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a56      	ldr	r2, [pc, #344]	; (8004f10 <HAL_DMA_Init+0x1e4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d013      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a54      	ldr	r2, [pc, #336]	; (8004f14 <HAL_DMA_Init+0x1e8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00e      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a53      	ldr	r2, [pc, #332]	; (8004f18 <HAL_DMA_Init+0x1ec>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d009      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a51      	ldr	r2, [pc, #324]	; (8004f1c <HAL_DMA_Init+0x1f0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <HAL_DMA_Init+0xb8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a50      	ldr	r2, [pc, #320]	; (8004f20 <HAL_DMA_Init+0x1f4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d101      	bne.n	8004de8 <HAL_DMA_Init+0xbc>
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <HAL_DMA_Init+0xbe>
 8004de8:	2300      	movs	r3, #0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 813b 	beq.w	8005066 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a37      	ldr	r2, [pc, #220]	; (8004ee4 <HAL_DMA_Init+0x1b8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d04a      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a36      	ldr	r2, [pc, #216]	; (8004ee8 <HAL_DMA_Init+0x1bc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d045      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a34      	ldr	r2, [pc, #208]	; (8004eec <HAL_DMA_Init+0x1c0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d040      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a33      	ldr	r2, [pc, #204]	; (8004ef0 <HAL_DMA_Init+0x1c4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d03b      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a31      	ldr	r2, [pc, #196]	; (8004ef4 <HAL_DMA_Init+0x1c8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d036      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a30      	ldr	r2, [pc, #192]	; (8004ef8 <HAL_DMA_Init+0x1cc>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d031      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2e      	ldr	r2, [pc, #184]	; (8004efc <HAL_DMA_Init+0x1d0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02c      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2d      	ldr	r2, [pc, #180]	; (8004f00 <HAL_DMA_Init+0x1d4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d027      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2b      	ldr	r2, [pc, #172]	; (8004f04 <HAL_DMA_Init+0x1d8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <HAL_DMA_Init+0x1dc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d01d      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a28      	ldr	r2, [pc, #160]	; (8004f0c <HAL_DMA_Init+0x1e0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a27      	ldr	r2, [pc, #156]	; (8004f10 <HAL_DMA_Init+0x1e4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <HAL_DMA_Init+0x1e8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a24      	ldr	r2, [pc, #144]	; (8004f18 <HAL_DMA_Init+0x1ec>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <HAL_DMA_Init+0x1f0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_DMA_Init+0x174>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a21      	ldr	r2, [pc, #132]	; (8004f20 <HAL_DMA_Init+0x1f4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d108      	bne.n	8004eb2 <HAL_DMA_Init+0x186>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e007      	b.n	8004ec2 <HAL_DMA_Init+0x196>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0201 	bic.w	r2, r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ec2:	e02f      	b.n	8004f24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ec4:	f7ff fde6 	bl	8004a94 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	d928      	bls.n	8004f24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2203      	movs	r2, #3
 8004edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e246      	b.n	8005372 <HAL_DMA_Init+0x646>
 8004ee4:	40020010 	.word	0x40020010
 8004ee8:	40020028 	.word	0x40020028
 8004eec:	40020040 	.word	0x40020040
 8004ef0:	40020058 	.word	0x40020058
 8004ef4:	40020070 	.word	0x40020070
 8004ef8:	40020088 	.word	0x40020088
 8004efc:	400200a0 	.word	0x400200a0
 8004f00:	400200b8 	.word	0x400200b8
 8004f04:	40020410 	.word	0x40020410
 8004f08:	40020428 	.word	0x40020428
 8004f0c:	40020440 	.word	0x40020440
 8004f10:	40020458 	.word	0x40020458
 8004f14:	40020470 	.word	0x40020470
 8004f18:	40020488 	.word	0x40020488
 8004f1c:	400204a0 	.word	0x400204a0
 8004f20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1c8      	bne.n	8004ec4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4b83      	ldr	r3, [pc, #524]	; (800514c <HAL_DMA_Init+0x420>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d107      	bne.n	8004f88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	4313      	orrs	r3, r2
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004f88:	4b71      	ldr	r3, [pc, #452]	; (8005150 <HAL_DMA_Init+0x424>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b71      	ldr	r3, [pc, #452]	; (8005154 <HAL_DMA_Init+0x428>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f94:	d328      	bcc.n	8004fe8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b28      	cmp	r3, #40	; 0x28
 8004f9c:	d903      	bls.n	8004fa6 <HAL_DMA_Init+0x27a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8004fa4:	d917      	bls.n	8004fd6 <HAL_DMA_Init+0x2aa>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b3e      	cmp	r3, #62	; 0x3e
 8004fac:	d903      	bls.n	8004fb6 <HAL_DMA_Init+0x28a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b42      	cmp	r3, #66	; 0x42
 8004fb4:	d90f      	bls.n	8004fd6 <HAL_DMA_Init+0x2aa>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b46      	cmp	r3, #70	; 0x46
 8004fbc:	d903      	bls.n	8004fc6 <HAL_DMA_Init+0x29a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b48      	cmp	r3, #72	; 0x48
 8004fc4:	d907      	bls.n	8004fd6 <HAL_DMA_Init+0x2aa>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b4e      	cmp	r3, #78	; 0x4e
 8004fcc:	d905      	bls.n	8004fda <HAL_DMA_Init+0x2ae>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b52      	cmp	r3, #82	; 0x52
 8004fd4:	d801      	bhi.n	8004fda <HAL_DMA_Init+0x2ae>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_DMA_Init+0x2b0>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f023 0307 	bic.w	r3, r3, #7
 8004ffe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	2b04      	cmp	r3, #4
 8005010:	d117      	bne.n	8005042 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	4313      	orrs	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00e      	beq.n	8005042 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f002 fb4b 	bl	80076c0 <DMA_CheckFifoParam>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d008      	beq.n	8005042 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2240      	movs	r2, #64	; 0x40
 8005034:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e197      	b.n	8005372 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f002 fa86 	bl	800755c <DMA_CalcBaseAndBitshift>
 8005050:	4603      	mov	r3, r0
 8005052:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005058:	f003 031f 	and.w	r3, r3, #31
 800505c:	223f      	movs	r2, #63	; 0x3f
 800505e:	409a      	lsls	r2, r3
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	e0cd      	b.n	8005202 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3b      	ldr	r2, [pc, #236]	; (8005158 <HAL_DMA_Init+0x42c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d022      	beq.n	80050b6 <HAL_DMA_Init+0x38a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a39      	ldr	r2, [pc, #228]	; (800515c <HAL_DMA_Init+0x430>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01d      	beq.n	80050b6 <HAL_DMA_Init+0x38a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a38      	ldr	r2, [pc, #224]	; (8005160 <HAL_DMA_Init+0x434>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d018      	beq.n	80050b6 <HAL_DMA_Init+0x38a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a36      	ldr	r2, [pc, #216]	; (8005164 <HAL_DMA_Init+0x438>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <HAL_DMA_Init+0x38a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a35      	ldr	r2, [pc, #212]	; (8005168 <HAL_DMA_Init+0x43c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_DMA_Init+0x38a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a33      	ldr	r2, [pc, #204]	; (800516c <HAL_DMA_Init+0x440>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_DMA_Init+0x38a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a32      	ldr	r2, [pc, #200]	; (8005170 <HAL_DMA_Init+0x444>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_DMA_Init+0x38a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a30      	ldr	r2, [pc, #192]	; (8005174 <HAL_DMA_Init+0x448>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <HAL_DMA_Init+0x38e>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_DMA_Init+0x390>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 8097 	beq.w	80051f0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a24      	ldr	r2, [pc, #144]	; (8005158 <HAL_DMA_Init+0x42c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d021      	beq.n	8005110 <HAL_DMA_Init+0x3e4>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a22      	ldr	r2, [pc, #136]	; (800515c <HAL_DMA_Init+0x430>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01c      	beq.n	8005110 <HAL_DMA_Init+0x3e4>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a21      	ldr	r2, [pc, #132]	; (8005160 <HAL_DMA_Init+0x434>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d017      	beq.n	8005110 <HAL_DMA_Init+0x3e4>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <HAL_DMA_Init+0x438>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d012      	beq.n	8005110 <HAL_DMA_Init+0x3e4>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1e      	ldr	r2, [pc, #120]	; (8005168 <HAL_DMA_Init+0x43c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00d      	beq.n	8005110 <HAL_DMA_Init+0x3e4>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1c      	ldr	r2, [pc, #112]	; (800516c <HAL_DMA_Init+0x440>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d008      	beq.n	8005110 <HAL_DMA_Init+0x3e4>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <HAL_DMA_Init+0x444>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d003      	beq.n	8005110 <HAL_DMA_Init+0x3e4>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a19      	ldr	r2, [pc, #100]	; (8005174 <HAL_DMA_Init+0x448>)
 800510e:	4293      	cmp	r3, r2
 8005110:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_DMA_Init+0x44c>)
 800512e:	4013      	ands	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b40      	cmp	r3, #64	; 0x40
 8005138:	d020      	beq.n	800517c <HAL_DMA_Init+0x450>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d102      	bne.n	8005148 <HAL_DMA_Init+0x41c>
 8005142:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005146:	e01a      	b.n	800517e <HAL_DMA_Init+0x452>
 8005148:	2300      	movs	r3, #0
 800514a:	e018      	b.n	800517e <HAL_DMA_Init+0x452>
 800514c:	fe10803f 	.word	0xfe10803f
 8005150:	5c001000 	.word	0x5c001000
 8005154:	ffff0000 	.word	0xffff0000
 8005158:	58025408 	.word	0x58025408
 800515c:	5802541c 	.word	0x5802541c
 8005160:	58025430 	.word	0x58025430
 8005164:	58025444 	.word	0x58025444
 8005168:	58025458 	.word	0x58025458
 800516c:	5802546c 	.word	0x5802546c
 8005170:	58025480 	.word	0x58025480
 8005174:	58025494 	.word	0x58025494
 8005178:	fffe000f 	.word	0xfffe000f
 800517c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800518c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005194:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800519c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80051ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	4b6e      	ldr	r3, [pc, #440]	; (800537c <HAL_DMA_Init+0x650>)
 80051c4:	4413      	add	r3, r2
 80051c6:	4a6e      	ldr	r2, [pc, #440]	; (8005380 <HAL_DMA_Init+0x654>)
 80051c8:	fba2 2303 	umull	r2, r3, r2, r3
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	009a      	lsls	r2, r3, #2
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f002 f9c1 	bl	800755c <DMA_CalcBaseAndBitshift>
 80051da:	4603      	mov	r3, r0
 80051dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	2201      	movs	r2, #1
 80051e8:	409a      	lsls	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	e008      	b.n	8005202 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2240      	movs	r2, #64	; 0x40
 80051f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2203      	movs	r2, #3
 80051fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e0b7      	b.n	8005372 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a5f      	ldr	r2, [pc, #380]	; (8005384 <HAL_DMA_Init+0x658>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d072      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a5d      	ldr	r2, [pc, #372]	; (8005388 <HAL_DMA_Init+0x65c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d06d      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a5c      	ldr	r2, [pc, #368]	; (800538c <HAL_DMA_Init+0x660>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d068      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a5a      	ldr	r2, [pc, #360]	; (8005390 <HAL_DMA_Init+0x664>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d063      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a59      	ldr	r2, [pc, #356]	; (8005394 <HAL_DMA_Init+0x668>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d05e      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a57      	ldr	r2, [pc, #348]	; (8005398 <HAL_DMA_Init+0x66c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d059      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a56      	ldr	r2, [pc, #344]	; (800539c <HAL_DMA_Init+0x670>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d054      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a54      	ldr	r2, [pc, #336]	; (80053a0 <HAL_DMA_Init+0x674>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d04f      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a53      	ldr	r2, [pc, #332]	; (80053a4 <HAL_DMA_Init+0x678>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d04a      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a51      	ldr	r2, [pc, #324]	; (80053a8 <HAL_DMA_Init+0x67c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d045      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a50      	ldr	r2, [pc, #320]	; (80053ac <HAL_DMA_Init+0x680>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d040      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a4e      	ldr	r2, [pc, #312]	; (80053b0 <HAL_DMA_Init+0x684>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d03b      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a4d      	ldr	r2, [pc, #308]	; (80053b4 <HAL_DMA_Init+0x688>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d036      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a4b      	ldr	r2, [pc, #300]	; (80053b8 <HAL_DMA_Init+0x68c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d031      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a4a      	ldr	r2, [pc, #296]	; (80053bc <HAL_DMA_Init+0x690>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d02c      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a48      	ldr	r2, [pc, #288]	; (80053c0 <HAL_DMA_Init+0x694>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d027      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a47      	ldr	r2, [pc, #284]	; (80053c4 <HAL_DMA_Init+0x698>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d022      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a45      	ldr	r2, [pc, #276]	; (80053c8 <HAL_DMA_Init+0x69c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d01d      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a44      	ldr	r2, [pc, #272]	; (80053cc <HAL_DMA_Init+0x6a0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d018      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a42      	ldr	r2, [pc, #264]	; (80053d0 <HAL_DMA_Init+0x6a4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d013      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a41      	ldr	r2, [pc, #260]	; (80053d4 <HAL_DMA_Init+0x6a8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00e      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a3f      	ldr	r2, [pc, #252]	; (80053d8 <HAL_DMA_Init+0x6ac>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d009      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a3e      	ldr	r2, [pc, #248]	; (80053dc <HAL_DMA_Init+0x6b0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d004      	beq.n	80052f2 <HAL_DMA_Init+0x5c6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a3c      	ldr	r2, [pc, #240]	; (80053e0 <HAL_DMA_Init+0x6b4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d101      	bne.n	80052f6 <HAL_DMA_Init+0x5ca>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e000      	b.n	80052f8 <HAL_DMA_Init+0x5cc>
 80052f6:	2300      	movs	r3, #0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d032      	beq.n	8005362 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f002 fa5b 	bl	80077b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b80      	cmp	r3, #128	; 0x80
 8005308:	d102      	bne.n	8005310 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005324:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d010      	beq.n	8005350 <HAL_DMA_Init+0x624>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b08      	cmp	r3, #8
 8005334:	d80c      	bhi.n	8005350 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f002 fad8 	bl	80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800534c:	605a      	str	r2, [r3, #4]
 800534e:	e008      	b.n	8005362 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	a7fdabf8 	.word	0xa7fdabf8
 8005380:	cccccccd 	.word	0xcccccccd
 8005384:	40020010 	.word	0x40020010
 8005388:	40020028 	.word	0x40020028
 800538c:	40020040 	.word	0x40020040
 8005390:	40020058 	.word	0x40020058
 8005394:	40020070 	.word	0x40020070
 8005398:	40020088 	.word	0x40020088
 800539c:	400200a0 	.word	0x400200a0
 80053a0:	400200b8 	.word	0x400200b8
 80053a4:	40020410 	.word	0x40020410
 80053a8:	40020428 	.word	0x40020428
 80053ac:	40020440 	.word	0x40020440
 80053b0:	40020458 	.word	0x40020458
 80053b4:	40020470 	.word	0x40020470
 80053b8:	40020488 	.word	0x40020488
 80053bc:	400204a0 	.word	0x400204a0
 80053c0:	400204b8 	.word	0x400204b8
 80053c4:	58025408 	.word	0x58025408
 80053c8:	5802541c 	.word	0x5802541c
 80053cc:	58025430 	.word	0x58025430
 80053d0:	58025444 	.word	0x58025444
 80053d4:	58025458 	.word	0x58025458
 80053d8:	5802546c 	.word	0x5802546c
 80053dc:	58025480 	.word	0x58025480
 80053e0:	58025494 	.word	0x58025494

080053e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e226      	b.n	800584e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_DMA_Start_IT+0x2a>
 800540a:	2302      	movs	r3, #2
 800540c:	e21f      	b.n	800584e <HAL_DMA_Start_IT+0x46a>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b01      	cmp	r3, #1
 8005420:	f040 820a 	bne.w	8005838 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a68      	ldr	r2, [pc, #416]	; (80055d8 <HAL_DMA_Start_IT+0x1f4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d04a      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a66      	ldr	r2, [pc, #408]	; (80055dc <HAL_DMA_Start_IT+0x1f8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d045      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a65      	ldr	r2, [pc, #404]	; (80055e0 <HAL_DMA_Start_IT+0x1fc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d040      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a63      	ldr	r2, [pc, #396]	; (80055e4 <HAL_DMA_Start_IT+0x200>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d03b      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a62      	ldr	r2, [pc, #392]	; (80055e8 <HAL_DMA_Start_IT+0x204>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d036      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a60      	ldr	r2, [pc, #384]	; (80055ec <HAL_DMA_Start_IT+0x208>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d031      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a5f      	ldr	r2, [pc, #380]	; (80055f0 <HAL_DMA_Start_IT+0x20c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d02c      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a5d      	ldr	r2, [pc, #372]	; (80055f4 <HAL_DMA_Start_IT+0x210>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d027      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a5c      	ldr	r2, [pc, #368]	; (80055f8 <HAL_DMA_Start_IT+0x214>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d022      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a5a      	ldr	r2, [pc, #360]	; (80055fc <HAL_DMA_Start_IT+0x218>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01d      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a59      	ldr	r2, [pc, #356]	; (8005600 <HAL_DMA_Start_IT+0x21c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d018      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a57      	ldr	r2, [pc, #348]	; (8005604 <HAL_DMA_Start_IT+0x220>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d013      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a56      	ldr	r2, [pc, #344]	; (8005608 <HAL_DMA_Start_IT+0x224>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00e      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a54      	ldr	r2, [pc, #336]	; (800560c <HAL_DMA_Start_IT+0x228>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d009      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a53      	ldr	r2, [pc, #332]	; (8005610 <HAL_DMA_Start_IT+0x22c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d004      	beq.n	80054d2 <HAL_DMA_Start_IT+0xee>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a51      	ldr	r2, [pc, #324]	; (8005614 <HAL_DMA_Start_IT+0x230>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d108      	bne.n	80054e4 <HAL_DMA_Start_IT+0x100>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0201 	bic.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e007      	b.n	80054f4 <HAL_DMA_Start_IT+0x110>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f001 fe82 	bl	8007204 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a34      	ldr	r2, [pc, #208]	; (80055d8 <HAL_DMA_Start_IT+0x1f4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d04a      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a33      	ldr	r2, [pc, #204]	; (80055dc <HAL_DMA_Start_IT+0x1f8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d045      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a31      	ldr	r2, [pc, #196]	; (80055e0 <HAL_DMA_Start_IT+0x1fc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d040      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a30      	ldr	r2, [pc, #192]	; (80055e4 <HAL_DMA_Start_IT+0x200>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d03b      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a2e      	ldr	r2, [pc, #184]	; (80055e8 <HAL_DMA_Start_IT+0x204>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d036      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a2d      	ldr	r2, [pc, #180]	; (80055ec <HAL_DMA_Start_IT+0x208>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d031      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a2b      	ldr	r2, [pc, #172]	; (80055f0 <HAL_DMA_Start_IT+0x20c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d02c      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a2a      	ldr	r2, [pc, #168]	; (80055f4 <HAL_DMA_Start_IT+0x210>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d027      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a28      	ldr	r2, [pc, #160]	; (80055f8 <HAL_DMA_Start_IT+0x214>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a27      	ldr	r2, [pc, #156]	; (80055fc <HAL_DMA_Start_IT+0x218>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d01d      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a25      	ldr	r2, [pc, #148]	; (8005600 <HAL_DMA_Start_IT+0x21c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a24      	ldr	r2, [pc, #144]	; (8005604 <HAL_DMA_Start_IT+0x220>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a22      	ldr	r2, [pc, #136]	; (8005608 <HAL_DMA_Start_IT+0x224>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a21      	ldr	r2, [pc, #132]	; (800560c <HAL_DMA_Start_IT+0x228>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1f      	ldr	r2, [pc, #124]	; (8005610 <HAL_DMA_Start_IT+0x22c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_DMA_Start_IT+0x1bc>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1e      	ldr	r2, [pc, #120]	; (8005614 <HAL_DMA_Start_IT+0x230>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d101      	bne.n	80055a4 <HAL_DMA_Start_IT+0x1c0>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <HAL_DMA_Start_IT+0x1c2>
 80055a4:	2300      	movs	r3, #0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d036      	beq.n	8005618 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f023 021e 	bic.w	r2, r3, #30
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0216 	orr.w	r2, r2, #22
 80055bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d03e      	beq.n	8005644 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0208 	orr.w	r2, r2, #8
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e035      	b.n	8005644 <HAL_DMA_Start_IT+0x260>
 80055d8:	40020010 	.word	0x40020010
 80055dc:	40020028 	.word	0x40020028
 80055e0:	40020040 	.word	0x40020040
 80055e4:	40020058 	.word	0x40020058
 80055e8:	40020070 	.word	0x40020070
 80055ec:	40020088 	.word	0x40020088
 80055f0:	400200a0 	.word	0x400200a0
 80055f4:	400200b8 	.word	0x400200b8
 80055f8:	40020410 	.word	0x40020410
 80055fc:	40020428 	.word	0x40020428
 8005600:	40020440 	.word	0x40020440
 8005604:	40020458 	.word	0x40020458
 8005608:	40020470 	.word	0x40020470
 800560c:	40020488 	.word	0x40020488
 8005610:	400204a0 	.word	0x400204a0
 8005614:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 020e 	bic.w	r2, r3, #14
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 020a 	orr.w	r2, r2, #10
 800562a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d007      	beq.n	8005644 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0204 	orr.w	r2, r2, #4
 8005642:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a83      	ldr	r2, [pc, #524]	; (8005858 <HAL_DMA_Start_IT+0x474>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d072      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a82      	ldr	r2, [pc, #520]	; (800585c <HAL_DMA_Start_IT+0x478>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d06d      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a80      	ldr	r2, [pc, #512]	; (8005860 <HAL_DMA_Start_IT+0x47c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d068      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a7f      	ldr	r2, [pc, #508]	; (8005864 <HAL_DMA_Start_IT+0x480>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d063      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a7d      	ldr	r2, [pc, #500]	; (8005868 <HAL_DMA_Start_IT+0x484>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d05e      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a7c      	ldr	r2, [pc, #496]	; (800586c <HAL_DMA_Start_IT+0x488>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d059      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a7a      	ldr	r2, [pc, #488]	; (8005870 <HAL_DMA_Start_IT+0x48c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d054      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a79      	ldr	r2, [pc, #484]	; (8005874 <HAL_DMA_Start_IT+0x490>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d04f      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a77      	ldr	r2, [pc, #476]	; (8005878 <HAL_DMA_Start_IT+0x494>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d04a      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a76      	ldr	r2, [pc, #472]	; (800587c <HAL_DMA_Start_IT+0x498>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d045      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a74      	ldr	r2, [pc, #464]	; (8005880 <HAL_DMA_Start_IT+0x49c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d040      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a73      	ldr	r2, [pc, #460]	; (8005884 <HAL_DMA_Start_IT+0x4a0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d03b      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a71      	ldr	r2, [pc, #452]	; (8005888 <HAL_DMA_Start_IT+0x4a4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d036      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a70      	ldr	r2, [pc, #448]	; (800588c <HAL_DMA_Start_IT+0x4a8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d031      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a6e      	ldr	r2, [pc, #440]	; (8005890 <HAL_DMA_Start_IT+0x4ac>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02c      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a6d      	ldr	r2, [pc, #436]	; (8005894 <HAL_DMA_Start_IT+0x4b0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d027      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a6b      	ldr	r2, [pc, #428]	; (8005898 <HAL_DMA_Start_IT+0x4b4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d022      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a6a      	ldr	r2, [pc, #424]	; (800589c <HAL_DMA_Start_IT+0x4b8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d01d      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a68      	ldr	r2, [pc, #416]	; (80058a0 <HAL_DMA_Start_IT+0x4bc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d018      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a67      	ldr	r2, [pc, #412]	; (80058a4 <HAL_DMA_Start_IT+0x4c0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a65      	ldr	r2, [pc, #404]	; (80058a8 <HAL_DMA_Start_IT+0x4c4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00e      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a64      	ldr	r2, [pc, #400]	; (80058ac <HAL_DMA_Start_IT+0x4c8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d009      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a62      	ldr	r2, [pc, #392]	; (80058b0 <HAL_DMA_Start_IT+0x4cc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_DMA_Start_IT+0x350>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a61      	ldr	r2, [pc, #388]	; (80058b4 <HAL_DMA_Start_IT+0x4d0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d101      	bne.n	8005738 <HAL_DMA_Start_IT+0x354>
 8005734:	2301      	movs	r3, #1
 8005736:	e000      	b.n	800573a <HAL_DMA_Start_IT+0x356>
 8005738:	2300      	movs	r3, #0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d01a      	beq.n	8005774 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800575a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005772:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a37      	ldr	r2, [pc, #220]	; (8005858 <HAL_DMA_Start_IT+0x474>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d04a      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a36      	ldr	r2, [pc, #216]	; (800585c <HAL_DMA_Start_IT+0x478>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d045      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a34      	ldr	r2, [pc, #208]	; (8005860 <HAL_DMA_Start_IT+0x47c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d040      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a33      	ldr	r2, [pc, #204]	; (8005864 <HAL_DMA_Start_IT+0x480>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d03b      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a31      	ldr	r2, [pc, #196]	; (8005868 <HAL_DMA_Start_IT+0x484>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d036      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a30      	ldr	r2, [pc, #192]	; (800586c <HAL_DMA_Start_IT+0x488>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d031      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a2e      	ldr	r2, [pc, #184]	; (8005870 <HAL_DMA_Start_IT+0x48c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d02c      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <HAL_DMA_Start_IT+0x490>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d027      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2b      	ldr	r2, [pc, #172]	; (8005878 <HAL_DMA_Start_IT+0x494>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d022      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2a      	ldr	r2, [pc, #168]	; (800587c <HAL_DMA_Start_IT+0x498>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d01d      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a28      	ldr	r2, [pc, #160]	; (8005880 <HAL_DMA_Start_IT+0x49c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d018      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a27      	ldr	r2, [pc, #156]	; (8005884 <HAL_DMA_Start_IT+0x4a0>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a25      	ldr	r2, [pc, #148]	; (8005888 <HAL_DMA_Start_IT+0x4a4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00e      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a24      	ldr	r2, [pc, #144]	; (800588c <HAL_DMA_Start_IT+0x4a8>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d009      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a22      	ldr	r2, [pc, #136]	; (8005890 <HAL_DMA_Start_IT+0x4ac>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_DMA_Start_IT+0x430>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a21      	ldr	r2, [pc, #132]	; (8005894 <HAL_DMA_Start_IT+0x4b0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d108      	bne.n	8005826 <HAL_DMA_Start_IT+0x442>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	e012      	b.n	800584c <HAL_DMA_Start_IT+0x468>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	e009      	b.n	800584c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005846:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800584c:	7dfb      	ldrb	r3, [r7, #23]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40020010 	.word	0x40020010
 800585c:	40020028 	.word	0x40020028
 8005860:	40020040 	.word	0x40020040
 8005864:	40020058 	.word	0x40020058
 8005868:	40020070 	.word	0x40020070
 800586c:	40020088 	.word	0x40020088
 8005870:	400200a0 	.word	0x400200a0
 8005874:	400200b8 	.word	0x400200b8
 8005878:	40020410 	.word	0x40020410
 800587c:	40020428 	.word	0x40020428
 8005880:	40020440 	.word	0x40020440
 8005884:	40020458 	.word	0x40020458
 8005888:	40020470 	.word	0x40020470
 800588c:	40020488 	.word	0x40020488
 8005890:	400204a0 	.word	0x400204a0
 8005894:	400204b8 	.word	0x400204b8
 8005898:	58025408 	.word	0x58025408
 800589c:	5802541c 	.word	0x5802541c
 80058a0:	58025430 	.word	0x58025430
 80058a4:	58025444 	.word	0x58025444
 80058a8:	58025458 	.word	0x58025458
 80058ac:	5802546c 	.word	0x5802546c
 80058b0:	58025480 	.word	0x58025480
 80058b4:	58025494 	.word	0x58025494

080058b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80058c0:	f7ff f8e8 	bl	8004a94 <HAL_GetTick>
 80058c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e2dc      	b.n	8005e8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d008      	beq.n	80058ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2280      	movs	r2, #128	; 0x80
 80058e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e2cd      	b.n	8005e8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a76      	ldr	r2, [pc, #472]	; (8005acc <HAL_DMA_Abort+0x214>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d04a      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a74      	ldr	r2, [pc, #464]	; (8005ad0 <HAL_DMA_Abort+0x218>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d045      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a73      	ldr	r2, [pc, #460]	; (8005ad4 <HAL_DMA_Abort+0x21c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d040      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a71      	ldr	r2, [pc, #452]	; (8005ad8 <HAL_DMA_Abort+0x220>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d03b      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a70      	ldr	r2, [pc, #448]	; (8005adc <HAL_DMA_Abort+0x224>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d036      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a6e      	ldr	r2, [pc, #440]	; (8005ae0 <HAL_DMA_Abort+0x228>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d031      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a6d      	ldr	r2, [pc, #436]	; (8005ae4 <HAL_DMA_Abort+0x22c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d02c      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a6b      	ldr	r2, [pc, #428]	; (8005ae8 <HAL_DMA_Abort+0x230>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d027      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a6a      	ldr	r2, [pc, #424]	; (8005aec <HAL_DMA_Abort+0x234>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d022      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a68      	ldr	r2, [pc, #416]	; (8005af0 <HAL_DMA_Abort+0x238>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01d      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a67      	ldr	r2, [pc, #412]	; (8005af4 <HAL_DMA_Abort+0x23c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d018      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a65      	ldr	r2, [pc, #404]	; (8005af8 <HAL_DMA_Abort+0x240>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d013      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a64      	ldr	r2, [pc, #400]	; (8005afc <HAL_DMA_Abort+0x244>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00e      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a62      	ldr	r2, [pc, #392]	; (8005b00 <HAL_DMA_Abort+0x248>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d009      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a61      	ldr	r2, [pc, #388]	; (8005b04 <HAL_DMA_Abort+0x24c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d004      	beq.n	800598e <HAL_DMA_Abort+0xd6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a5f      	ldr	r2, [pc, #380]	; (8005b08 <HAL_DMA_Abort+0x250>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d101      	bne.n	8005992 <HAL_DMA_Abort+0xda>
 800598e:	2301      	movs	r3, #1
 8005990:	e000      	b.n	8005994 <HAL_DMA_Abort+0xdc>
 8005992:	2300      	movs	r3, #0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 021e 	bic.w	r2, r2, #30
 80059a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e00a      	b.n	80059d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 020e 	bic.w	r2, r2, #14
 80059ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a3c      	ldr	r2, [pc, #240]	; (8005acc <HAL_DMA_Abort+0x214>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d072      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3a      	ldr	r2, [pc, #232]	; (8005ad0 <HAL_DMA_Abort+0x218>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d06d      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a39      	ldr	r2, [pc, #228]	; (8005ad4 <HAL_DMA_Abort+0x21c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d068      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a37      	ldr	r2, [pc, #220]	; (8005ad8 <HAL_DMA_Abort+0x220>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d063      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a36      	ldr	r2, [pc, #216]	; (8005adc <HAL_DMA_Abort+0x224>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d05e      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a34      	ldr	r2, [pc, #208]	; (8005ae0 <HAL_DMA_Abort+0x228>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d059      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a33      	ldr	r2, [pc, #204]	; (8005ae4 <HAL_DMA_Abort+0x22c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d054      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a31      	ldr	r2, [pc, #196]	; (8005ae8 <HAL_DMA_Abort+0x230>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d04f      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a30      	ldr	r2, [pc, #192]	; (8005aec <HAL_DMA_Abort+0x234>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d04a      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2e      	ldr	r2, [pc, #184]	; (8005af0 <HAL_DMA_Abort+0x238>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d045      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a2d      	ldr	r2, [pc, #180]	; (8005af4 <HAL_DMA_Abort+0x23c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d040      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a2b      	ldr	r2, [pc, #172]	; (8005af8 <HAL_DMA_Abort+0x240>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d03b      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <HAL_DMA_Abort+0x244>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d036      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <HAL_DMA_Abort+0x248>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d031      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a27      	ldr	r2, [pc, #156]	; (8005b04 <HAL_DMA_Abort+0x24c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d02c      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a25      	ldr	r2, [pc, #148]	; (8005b08 <HAL_DMA_Abort+0x250>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d027      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a24      	ldr	r2, [pc, #144]	; (8005b0c <HAL_DMA_Abort+0x254>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d022      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <HAL_DMA_Abort+0x258>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d01d      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <HAL_DMA_Abort+0x25c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d018      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <HAL_DMA_Abort+0x260>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1e      	ldr	r2, [pc, #120]	; (8005b1c <HAL_DMA_Abort+0x264>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <HAL_DMA_Abort+0x268>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a1b      	ldr	r2, [pc, #108]	; (8005b24 <HAL_DMA_Abort+0x26c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_DMA_Abort+0x20e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <HAL_DMA_Abort+0x270>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d132      	bne.n	8005b2c <HAL_DMA_Abort+0x274>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e031      	b.n	8005b2e <HAL_DMA_Abort+0x276>
 8005aca:	bf00      	nop
 8005acc:	40020010 	.word	0x40020010
 8005ad0:	40020028 	.word	0x40020028
 8005ad4:	40020040 	.word	0x40020040
 8005ad8:	40020058 	.word	0x40020058
 8005adc:	40020070 	.word	0x40020070
 8005ae0:	40020088 	.word	0x40020088
 8005ae4:	400200a0 	.word	0x400200a0
 8005ae8:	400200b8 	.word	0x400200b8
 8005aec:	40020410 	.word	0x40020410
 8005af0:	40020428 	.word	0x40020428
 8005af4:	40020440 	.word	0x40020440
 8005af8:	40020458 	.word	0x40020458
 8005afc:	40020470 	.word	0x40020470
 8005b00:	40020488 	.word	0x40020488
 8005b04:	400204a0 	.word	0x400204a0
 8005b08:	400204b8 	.word	0x400204b8
 8005b0c:	58025408 	.word	0x58025408
 8005b10:	5802541c 	.word	0x5802541c
 8005b14:	58025430 	.word	0x58025430
 8005b18:	58025444 	.word	0x58025444
 8005b1c:	58025458 	.word	0x58025458
 8005b20:	5802546c 	.word	0x5802546c
 8005b24:	58025480 	.word	0x58025480
 8005b28:	58025494 	.word	0x58025494
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6d      	ldr	r2, [pc, #436]	; (8005cfc <HAL_DMA_Abort+0x444>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d04a      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a6b      	ldr	r2, [pc, #428]	; (8005d00 <HAL_DMA_Abort+0x448>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d045      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a6a      	ldr	r2, [pc, #424]	; (8005d04 <HAL_DMA_Abort+0x44c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d040      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a68      	ldr	r2, [pc, #416]	; (8005d08 <HAL_DMA_Abort+0x450>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d03b      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a67      	ldr	r2, [pc, #412]	; (8005d0c <HAL_DMA_Abort+0x454>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d036      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a65      	ldr	r2, [pc, #404]	; (8005d10 <HAL_DMA_Abort+0x458>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d031      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a64      	ldr	r2, [pc, #400]	; (8005d14 <HAL_DMA_Abort+0x45c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d02c      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a62      	ldr	r2, [pc, #392]	; (8005d18 <HAL_DMA_Abort+0x460>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d027      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a61      	ldr	r2, [pc, #388]	; (8005d1c <HAL_DMA_Abort+0x464>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d022      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a5f      	ldr	r2, [pc, #380]	; (8005d20 <HAL_DMA_Abort+0x468>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01d      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a5e      	ldr	r2, [pc, #376]	; (8005d24 <HAL_DMA_Abort+0x46c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d018      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a5c      	ldr	r2, [pc, #368]	; (8005d28 <HAL_DMA_Abort+0x470>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a5b      	ldr	r2, [pc, #364]	; (8005d2c <HAL_DMA_Abort+0x474>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a59      	ldr	r2, [pc, #356]	; (8005d30 <HAL_DMA_Abort+0x478>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a58      	ldr	r2, [pc, #352]	; (8005d34 <HAL_DMA_Abort+0x47c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <HAL_DMA_Abort+0x32a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a56      	ldr	r2, [pc, #344]	; (8005d38 <HAL_DMA_Abort+0x480>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d108      	bne.n	8005bf4 <HAL_DMA_Abort+0x33c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e007      	b.n	8005c04 <HAL_DMA_Abort+0x34c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c04:	e013      	b.n	8005c2e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c06:	f7fe ff45 	bl	8004a94 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b05      	cmp	r3, #5
 8005c12:	d90c      	bls.n	8005c2e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2203      	movs	r2, #3
 8005c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e12d      	b.n	8005e8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a2f      	ldr	r2, [pc, #188]	; (8005cfc <HAL_DMA_Abort+0x444>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d04a      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a2d      	ldr	r2, [pc, #180]	; (8005d00 <HAL_DMA_Abort+0x448>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d045      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a2c      	ldr	r2, [pc, #176]	; (8005d04 <HAL_DMA_Abort+0x44c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d040      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a2a      	ldr	r2, [pc, #168]	; (8005d08 <HAL_DMA_Abort+0x450>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d03b      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a29      	ldr	r2, [pc, #164]	; (8005d0c <HAL_DMA_Abort+0x454>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d036      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a27      	ldr	r2, [pc, #156]	; (8005d10 <HAL_DMA_Abort+0x458>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d031      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <HAL_DMA_Abort+0x45c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d02c      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a24      	ldr	r2, [pc, #144]	; (8005d18 <HAL_DMA_Abort+0x460>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d027      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a23      	ldr	r2, [pc, #140]	; (8005d1c <HAL_DMA_Abort+0x464>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d022      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a21      	ldr	r2, [pc, #132]	; (8005d20 <HAL_DMA_Abort+0x468>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01d      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a20      	ldr	r2, [pc, #128]	; (8005d24 <HAL_DMA_Abort+0x46c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d018      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1e      	ldr	r2, [pc, #120]	; (8005d28 <HAL_DMA_Abort+0x470>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d013      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1d      	ldr	r2, [pc, #116]	; (8005d2c <HAL_DMA_Abort+0x474>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00e      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	; (8005d30 <HAL_DMA_Abort+0x478>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <HAL_DMA_Abort+0x47c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d004      	beq.n	8005cda <HAL_DMA_Abort+0x422>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a18      	ldr	r2, [pc, #96]	; (8005d38 <HAL_DMA_Abort+0x480>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d101      	bne.n	8005cde <HAL_DMA_Abort+0x426>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <HAL_DMA_Abort+0x428>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d02b      	beq.n	8005d3c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	223f      	movs	r2, #63	; 0x3f
 8005cf4:	409a      	lsls	r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	609a      	str	r2, [r3, #8]
 8005cfa:	e02a      	b.n	8005d52 <HAL_DMA_Abort+0x49a>
 8005cfc:	40020010 	.word	0x40020010
 8005d00:	40020028 	.word	0x40020028
 8005d04:	40020040 	.word	0x40020040
 8005d08:	40020058 	.word	0x40020058
 8005d0c:	40020070 	.word	0x40020070
 8005d10:	40020088 	.word	0x40020088
 8005d14:	400200a0 	.word	0x400200a0
 8005d18:	400200b8 	.word	0x400200b8
 8005d1c:	40020410 	.word	0x40020410
 8005d20:	40020428 	.word	0x40020428
 8005d24:	40020440 	.word	0x40020440
 8005d28:	40020458 	.word	0x40020458
 8005d2c:	40020470 	.word	0x40020470
 8005d30:	40020488 	.word	0x40020488
 8005d34:	400204a0 	.word	0x400204a0
 8005d38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d40:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a4f      	ldr	r2, [pc, #316]	; (8005e94 <HAL_DMA_Abort+0x5dc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d072      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a4d      	ldr	r2, [pc, #308]	; (8005e98 <HAL_DMA_Abort+0x5e0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d06d      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a4c      	ldr	r2, [pc, #304]	; (8005e9c <HAL_DMA_Abort+0x5e4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d068      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a4a      	ldr	r2, [pc, #296]	; (8005ea0 <HAL_DMA_Abort+0x5e8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d063      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a49      	ldr	r2, [pc, #292]	; (8005ea4 <HAL_DMA_Abort+0x5ec>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d05e      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a47      	ldr	r2, [pc, #284]	; (8005ea8 <HAL_DMA_Abort+0x5f0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d059      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a46      	ldr	r2, [pc, #280]	; (8005eac <HAL_DMA_Abort+0x5f4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d054      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a44      	ldr	r2, [pc, #272]	; (8005eb0 <HAL_DMA_Abort+0x5f8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d04f      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a43      	ldr	r2, [pc, #268]	; (8005eb4 <HAL_DMA_Abort+0x5fc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d04a      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a41      	ldr	r2, [pc, #260]	; (8005eb8 <HAL_DMA_Abort+0x600>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d045      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a40      	ldr	r2, [pc, #256]	; (8005ebc <HAL_DMA_Abort+0x604>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d040      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a3e      	ldr	r2, [pc, #248]	; (8005ec0 <HAL_DMA_Abort+0x608>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d03b      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a3d      	ldr	r2, [pc, #244]	; (8005ec4 <HAL_DMA_Abort+0x60c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d036      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a3b      	ldr	r2, [pc, #236]	; (8005ec8 <HAL_DMA_Abort+0x610>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d031      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a3a      	ldr	r2, [pc, #232]	; (8005ecc <HAL_DMA_Abort+0x614>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d02c      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a38      	ldr	r2, [pc, #224]	; (8005ed0 <HAL_DMA_Abort+0x618>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d027      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a37      	ldr	r2, [pc, #220]	; (8005ed4 <HAL_DMA_Abort+0x61c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d022      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a35      	ldr	r2, [pc, #212]	; (8005ed8 <HAL_DMA_Abort+0x620>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d01d      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a34      	ldr	r2, [pc, #208]	; (8005edc <HAL_DMA_Abort+0x624>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d018      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a32      	ldr	r2, [pc, #200]	; (8005ee0 <HAL_DMA_Abort+0x628>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a31      	ldr	r2, [pc, #196]	; (8005ee4 <HAL_DMA_Abort+0x62c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00e      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2f      	ldr	r2, [pc, #188]	; (8005ee8 <HAL_DMA_Abort+0x630>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2e      	ldr	r2, [pc, #184]	; (8005eec <HAL_DMA_Abort+0x634>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_DMA_Abort+0x58a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a2c      	ldr	r2, [pc, #176]	; (8005ef0 <HAL_DMA_Abort+0x638>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <HAL_DMA_Abort+0x58e>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <HAL_DMA_Abort+0x590>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d015      	beq.n	8005e78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00c      	beq.n	8005e78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40020010 	.word	0x40020010
 8005e98:	40020028 	.word	0x40020028
 8005e9c:	40020040 	.word	0x40020040
 8005ea0:	40020058 	.word	0x40020058
 8005ea4:	40020070 	.word	0x40020070
 8005ea8:	40020088 	.word	0x40020088
 8005eac:	400200a0 	.word	0x400200a0
 8005eb0:	400200b8 	.word	0x400200b8
 8005eb4:	40020410 	.word	0x40020410
 8005eb8:	40020428 	.word	0x40020428
 8005ebc:	40020440 	.word	0x40020440
 8005ec0:	40020458 	.word	0x40020458
 8005ec4:	40020470 	.word	0x40020470
 8005ec8:	40020488 	.word	0x40020488
 8005ecc:	400204a0 	.word	0x400204a0
 8005ed0:	400204b8 	.word	0x400204b8
 8005ed4:	58025408 	.word	0x58025408
 8005ed8:	5802541c 	.word	0x5802541c
 8005edc:	58025430 	.word	0x58025430
 8005ee0:	58025444 	.word	0x58025444
 8005ee4:	58025458 	.word	0x58025458
 8005ee8:	5802546c 	.word	0x5802546c
 8005eec:	58025480 	.word	0x58025480
 8005ef0:	58025494 	.word	0x58025494

08005ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e205      	b.n	8006312 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d004      	beq.n	8005f1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2280      	movs	r2, #128	; 0x80
 8005f16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e1fa      	b.n	8006312 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a8c      	ldr	r2, [pc, #560]	; (8006154 <HAL_DMA_Abort_IT+0x260>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d04a      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a8b      	ldr	r2, [pc, #556]	; (8006158 <HAL_DMA_Abort_IT+0x264>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d045      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a89      	ldr	r2, [pc, #548]	; (800615c <HAL_DMA_Abort_IT+0x268>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d040      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a88      	ldr	r2, [pc, #544]	; (8006160 <HAL_DMA_Abort_IT+0x26c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d03b      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a86      	ldr	r2, [pc, #536]	; (8006164 <HAL_DMA_Abort_IT+0x270>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d036      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a85      	ldr	r2, [pc, #532]	; (8006168 <HAL_DMA_Abort_IT+0x274>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d031      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a83      	ldr	r2, [pc, #524]	; (800616c <HAL_DMA_Abort_IT+0x278>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d02c      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a82      	ldr	r2, [pc, #520]	; (8006170 <HAL_DMA_Abort_IT+0x27c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d027      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a80      	ldr	r2, [pc, #512]	; (8006174 <HAL_DMA_Abort_IT+0x280>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d022      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a7f      	ldr	r2, [pc, #508]	; (8006178 <HAL_DMA_Abort_IT+0x284>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d01d      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a7d      	ldr	r2, [pc, #500]	; (800617c <HAL_DMA_Abort_IT+0x288>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d018      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a7c      	ldr	r2, [pc, #496]	; (8006180 <HAL_DMA_Abort_IT+0x28c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d013      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a7a      	ldr	r2, [pc, #488]	; (8006184 <HAL_DMA_Abort_IT+0x290>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00e      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a79      	ldr	r2, [pc, #484]	; (8006188 <HAL_DMA_Abort_IT+0x294>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d009      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a77      	ldr	r2, [pc, #476]	; (800618c <HAL_DMA_Abort_IT+0x298>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_DMA_Abort_IT+0xc8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a76      	ldr	r2, [pc, #472]	; (8006190 <HAL_DMA_Abort_IT+0x29c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d101      	bne.n	8005fc0 <HAL_DMA_Abort_IT+0xcc>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e000      	b.n	8005fc2 <HAL_DMA_Abort_IT+0xce>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d065      	beq.n	8006092 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2204      	movs	r2, #4
 8005fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a60      	ldr	r2, [pc, #384]	; (8006154 <HAL_DMA_Abort_IT+0x260>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d04a      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5e      	ldr	r2, [pc, #376]	; (8006158 <HAL_DMA_Abort_IT+0x264>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d045      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a5d      	ldr	r2, [pc, #372]	; (800615c <HAL_DMA_Abort_IT+0x268>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d040      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a5b      	ldr	r2, [pc, #364]	; (8006160 <HAL_DMA_Abort_IT+0x26c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d03b      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a5a      	ldr	r2, [pc, #360]	; (8006164 <HAL_DMA_Abort_IT+0x270>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d036      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a58      	ldr	r2, [pc, #352]	; (8006168 <HAL_DMA_Abort_IT+0x274>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d031      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a57      	ldr	r2, [pc, #348]	; (800616c <HAL_DMA_Abort_IT+0x278>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d02c      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a55      	ldr	r2, [pc, #340]	; (8006170 <HAL_DMA_Abort_IT+0x27c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d027      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a54      	ldr	r2, [pc, #336]	; (8006174 <HAL_DMA_Abort_IT+0x280>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d022      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a52      	ldr	r2, [pc, #328]	; (8006178 <HAL_DMA_Abort_IT+0x284>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01d      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a51      	ldr	r2, [pc, #324]	; (800617c <HAL_DMA_Abort_IT+0x288>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a4f      	ldr	r2, [pc, #316]	; (8006180 <HAL_DMA_Abort_IT+0x28c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d013      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a4e      	ldr	r2, [pc, #312]	; (8006184 <HAL_DMA_Abort_IT+0x290>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d00e      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a4c      	ldr	r2, [pc, #304]	; (8006188 <HAL_DMA_Abort_IT+0x294>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a4b      	ldr	r2, [pc, #300]	; (800618c <HAL_DMA_Abort_IT+0x298>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_DMA_Abort_IT+0x17a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a49      	ldr	r2, [pc, #292]	; (8006190 <HAL_DMA_Abort_IT+0x29c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d108      	bne.n	8006080 <HAL_DMA_Abort_IT+0x18c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0201 	bic.w	r2, r2, #1
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	e147      	b.n	8006310 <HAL_DMA_Abort_IT+0x41c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0201 	bic.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e13e      	b.n	8006310 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 020e 	bic.w	r2, r2, #14
 80060a0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2b      	ldr	r2, [pc, #172]	; (8006154 <HAL_DMA_Abort_IT+0x260>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d04a      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a29      	ldr	r2, [pc, #164]	; (8006158 <HAL_DMA_Abort_IT+0x264>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d045      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a28      	ldr	r2, [pc, #160]	; (800615c <HAL_DMA_Abort_IT+0x268>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d040      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a26      	ldr	r2, [pc, #152]	; (8006160 <HAL_DMA_Abort_IT+0x26c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d03b      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a25      	ldr	r2, [pc, #148]	; (8006164 <HAL_DMA_Abort_IT+0x270>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d036      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a23      	ldr	r2, [pc, #140]	; (8006168 <HAL_DMA_Abort_IT+0x274>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d031      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a22      	ldr	r2, [pc, #136]	; (800616c <HAL_DMA_Abort_IT+0x278>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d02c      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a20      	ldr	r2, [pc, #128]	; (8006170 <HAL_DMA_Abort_IT+0x27c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d027      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <HAL_DMA_Abort_IT+0x280>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d022      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1d      	ldr	r2, [pc, #116]	; (8006178 <HAL_DMA_Abort_IT+0x284>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01d      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1c      	ldr	r2, [pc, #112]	; (800617c <HAL_DMA_Abort_IT+0x288>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d018      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1a      	ldr	r2, [pc, #104]	; (8006180 <HAL_DMA_Abort_IT+0x28c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_DMA_Abort_IT+0x290>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a17      	ldr	r2, [pc, #92]	; (8006188 <HAL_DMA_Abort_IT+0x294>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_DMA_Abort_IT+0x298>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_DMA_Abort_IT+0x24e>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a14      	ldr	r2, [pc, #80]	; (8006190 <HAL_DMA_Abort_IT+0x29c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d128      	bne.n	8006194 <HAL_DMA_Abort_IT+0x2a0>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	e027      	b.n	80061a4 <HAL_DMA_Abort_IT+0x2b0>
 8006154:	40020010 	.word	0x40020010
 8006158:	40020028 	.word	0x40020028
 800615c:	40020040 	.word	0x40020040
 8006160:	40020058 	.word	0x40020058
 8006164:	40020070 	.word	0x40020070
 8006168:	40020088 	.word	0x40020088
 800616c:	400200a0 	.word	0x400200a0
 8006170:	400200b8 	.word	0x400200b8
 8006174:	40020410 	.word	0x40020410
 8006178:	40020428 	.word	0x40020428
 800617c:	40020440 	.word	0x40020440
 8006180:	40020458 	.word	0x40020458
 8006184:	40020470 	.word	0x40020470
 8006188:	40020488 	.word	0x40020488
 800618c:	400204a0 	.word	0x400204a0
 8006190:	400204b8 	.word	0x400204b8
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0201 	bic.w	r2, r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a5c      	ldr	r2, [pc, #368]	; (800631c <HAL_DMA_Abort_IT+0x428>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d072      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a5b      	ldr	r2, [pc, #364]	; (8006320 <HAL_DMA_Abort_IT+0x42c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d06d      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a59      	ldr	r2, [pc, #356]	; (8006324 <HAL_DMA_Abort_IT+0x430>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d068      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a58      	ldr	r2, [pc, #352]	; (8006328 <HAL_DMA_Abort_IT+0x434>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d063      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a56      	ldr	r2, [pc, #344]	; (800632c <HAL_DMA_Abort_IT+0x438>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d05e      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a55      	ldr	r2, [pc, #340]	; (8006330 <HAL_DMA_Abort_IT+0x43c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d059      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a53      	ldr	r2, [pc, #332]	; (8006334 <HAL_DMA_Abort_IT+0x440>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d054      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a52      	ldr	r2, [pc, #328]	; (8006338 <HAL_DMA_Abort_IT+0x444>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d04f      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a50      	ldr	r2, [pc, #320]	; (800633c <HAL_DMA_Abort_IT+0x448>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d04a      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a4f      	ldr	r2, [pc, #316]	; (8006340 <HAL_DMA_Abort_IT+0x44c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d045      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a4d      	ldr	r2, [pc, #308]	; (8006344 <HAL_DMA_Abort_IT+0x450>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d040      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a4c      	ldr	r2, [pc, #304]	; (8006348 <HAL_DMA_Abort_IT+0x454>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d03b      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a4a      	ldr	r2, [pc, #296]	; (800634c <HAL_DMA_Abort_IT+0x458>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d036      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a49      	ldr	r2, [pc, #292]	; (8006350 <HAL_DMA_Abort_IT+0x45c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d031      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a47      	ldr	r2, [pc, #284]	; (8006354 <HAL_DMA_Abort_IT+0x460>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d02c      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a46      	ldr	r2, [pc, #280]	; (8006358 <HAL_DMA_Abort_IT+0x464>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d027      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a44      	ldr	r2, [pc, #272]	; (800635c <HAL_DMA_Abort_IT+0x468>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d022      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a43      	ldr	r2, [pc, #268]	; (8006360 <HAL_DMA_Abort_IT+0x46c>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d01d      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a41      	ldr	r2, [pc, #260]	; (8006364 <HAL_DMA_Abort_IT+0x470>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d018      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a40      	ldr	r2, [pc, #256]	; (8006368 <HAL_DMA_Abort_IT+0x474>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d013      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3e      	ldr	r2, [pc, #248]	; (800636c <HAL_DMA_Abort_IT+0x478>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00e      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3d      	ldr	r2, [pc, #244]	; (8006370 <HAL_DMA_Abort_IT+0x47c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d009      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a3b      	ldr	r2, [pc, #236]	; (8006374 <HAL_DMA_Abort_IT+0x480>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d004      	beq.n	8006294 <HAL_DMA_Abort_IT+0x3a0>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a3a      	ldr	r2, [pc, #232]	; (8006378 <HAL_DMA_Abort_IT+0x484>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d101      	bne.n	8006298 <HAL_DMA_Abort_IT+0x3a4>
 8006294:	2301      	movs	r3, #1
 8006296:	e000      	b.n	800629a <HAL_DMA_Abort_IT+0x3a6>
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d028      	beq.n	80062f0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2201      	movs	r2, #1
 80062be:	409a      	lsls	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006304:	2b00      	cmp	r3, #0
 8006306:	d003      	beq.n	8006310 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40020010 	.word	0x40020010
 8006320:	40020028 	.word	0x40020028
 8006324:	40020040 	.word	0x40020040
 8006328:	40020058 	.word	0x40020058
 800632c:	40020070 	.word	0x40020070
 8006330:	40020088 	.word	0x40020088
 8006334:	400200a0 	.word	0x400200a0
 8006338:	400200b8 	.word	0x400200b8
 800633c:	40020410 	.word	0x40020410
 8006340:	40020428 	.word	0x40020428
 8006344:	40020440 	.word	0x40020440
 8006348:	40020458 	.word	0x40020458
 800634c:	40020470 	.word	0x40020470
 8006350:	40020488 	.word	0x40020488
 8006354:	400204a0 	.word	0x400204a0
 8006358:	400204b8 	.word	0x400204b8
 800635c:	58025408 	.word	0x58025408
 8006360:	5802541c 	.word	0x5802541c
 8006364:	58025430 	.word	0x58025430
 8006368:	58025444 	.word	0x58025444
 800636c:	58025458 	.word	0x58025458
 8006370:	5802546c 	.word	0x5802546c
 8006374:	58025480 	.word	0x58025480
 8006378:	58025494 	.word	0x58025494

0800637c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006388:	4b67      	ldr	r3, [pc, #412]	; (8006528 <HAL_DMA_IRQHandler+0x1ac>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a67      	ldr	r2, [pc, #412]	; (800652c <HAL_DMA_IRQHandler+0x1b0>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	0a9b      	lsrs	r3, r3, #10
 8006394:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a5f      	ldr	r2, [pc, #380]	; (8006530 <HAL_DMA_IRQHandler+0x1b4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d04a      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5d      	ldr	r2, [pc, #372]	; (8006534 <HAL_DMA_IRQHandler+0x1b8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d045      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a5c      	ldr	r2, [pc, #368]	; (8006538 <HAL_DMA_IRQHandler+0x1bc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d040      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a5a      	ldr	r2, [pc, #360]	; (800653c <HAL_DMA_IRQHandler+0x1c0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d03b      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a59      	ldr	r2, [pc, #356]	; (8006540 <HAL_DMA_IRQHandler+0x1c4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d036      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a57      	ldr	r2, [pc, #348]	; (8006544 <HAL_DMA_IRQHandler+0x1c8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d031      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a56      	ldr	r2, [pc, #344]	; (8006548 <HAL_DMA_IRQHandler+0x1cc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d02c      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a54      	ldr	r2, [pc, #336]	; (800654c <HAL_DMA_IRQHandler+0x1d0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d027      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a53      	ldr	r2, [pc, #332]	; (8006550 <HAL_DMA_IRQHandler+0x1d4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d022      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a51      	ldr	r2, [pc, #324]	; (8006554 <HAL_DMA_IRQHandler+0x1d8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d01d      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a50      	ldr	r2, [pc, #320]	; (8006558 <HAL_DMA_IRQHandler+0x1dc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d018      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a4e      	ldr	r2, [pc, #312]	; (800655c <HAL_DMA_IRQHandler+0x1e0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a4d      	ldr	r2, [pc, #308]	; (8006560 <HAL_DMA_IRQHandler+0x1e4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00e      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a4b      	ldr	r2, [pc, #300]	; (8006564 <HAL_DMA_IRQHandler+0x1e8>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d009      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a4a      	ldr	r2, [pc, #296]	; (8006568 <HAL_DMA_IRQHandler+0x1ec>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_DMA_IRQHandler+0xd2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a48      	ldr	r2, [pc, #288]	; (800656c <HAL_DMA_IRQHandler+0x1f0>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d101      	bne.n	8006452 <HAL_DMA_IRQHandler+0xd6>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <HAL_DMA_IRQHandler+0xd8>
 8006452:	2300      	movs	r3, #0
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 842b 	beq.w	8006cb0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645e:	f003 031f 	and.w	r3, r3, #31
 8006462:	2208      	movs	r2, #8
 8006464:	409a      	lsls	r2, r3
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	4013      	ands	r3, r2
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80a2 	beq.w	80065b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a2e      	ldr	r2, [pc, #184]	; (8006530 <HAL_DMA_IRQHandler+0x1b4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d04a      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a2d      	ldr	r2, [pc, #180]	; (8006534 <HAL_DMA_IRQHandler+0x1b8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d045      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a2b      	ldr	r2, [pc, #172]	; (8006538 <HAL_DMA_IRQHandler+0x1bc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d040      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a2a      	ldr	r2, [pc, #168]	; (800653c <HAL_DMA_IRQHandler+0x1c0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d03b      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a28      	ldr	r2, [pc, #160]	; (8006540 <HAL_DMA_IRQHandler+0x1c4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d036      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a27      	ldr	r2, [pc, #156]	; (8006544 <HAL_DMA_IRQHandler+0x1c8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d031      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a25      	ldr	r2, [pc, #148]	; (8006548 <HAL_DMA_IRQHandler+0x1cc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d02c      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a24      	ldr	r2, [pc, #144]	; (800654c <HAL_DMA_IRQHandler+0x1d0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d027      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a22      	ldr	r2, [pc, #136]	; (8006550 <HAL_DMA_IRQHandler+0x1d4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d022      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a21      	ldr	r2, [pc, #132]	; (8006554 <HAL_DMA_IRQHandler+0x1d8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d01d      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <HAL_DMA_IRQHandler+0x1dc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d018      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1e      	ldr	r2, [pc, #120]	; (800655c <HAL_DMA_IRQHandler+0x1e0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d013      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <HAL_DMA_IRQHandler+0x1e4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d00e      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1b      	ldr	r2, [pc, #108]	; (8006564 <HAL_DMA_IRQHandler+0x1e8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d009      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a19      	ldr	r2, [pc, #100]	; (8006568 <HAL_DMA_IRQHandler+0x1ec>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d004      	beq.n	8006510 <HAL_DMA_IRQHandler+0x194>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a18      	ldr	r2, [pc, #96]	; (800656c <HAL_DMA_IRQHandler+0x1f0>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d12f      	bne.n	8006570 <HAL_DMA_IRQHandler+0x1f4>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	bf14      	ite	ne
 800651e:	2301      	movne	r3, #1
 8006520:	2300      	moveq	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	e02e      	b.n	8006584 <HAL_DMA_IRQHandler+0x208>
 8006526:	bf00      	nop
 8006528:	24000014 	.word	0x24000014
 800652c:	1b4e81b5 	.word	0x1b4e81b5
 8006530:	40020010 	.word	0x40020010
 8006534:	40020028 	.word	0x40020028
 8006538:	40020040 	.word	0x40020040
 800653c:	40020058 	.word	0x40020058
 8006540:	40020070 	.word	0x40020070
 8006544:	40020088 	.word	0x40020088
 8006548:	400200a0 	.word	0x400200a0
 800654c:	400200b8 	.word	0x400200b8
 8006550:	40020410 	.word	0x40020410
 8006554:	40020428 	.word	0x40020428
 8006558:	40020440 	.word	0x40020440
 800655c:	40020458 	.word	0x40020458
 8006560:	40020470 	.word	0x40020470
 8006564:	40020488 	.word	0x40020488
 8006568:	400204a0 	.word	0x400204a0
 800656c:	400204b8 	.word	0x400204b8
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	bf14      	ite	ne
 800657e:	2301      	movne	r3, #1
 8006580:	2300      	moveq	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d015      	beq.n	80065b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0204 	bic.w	r2, r2, #4
 8006596:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659c:	f003 031f 	and.w	r3, r3, #31
 80065a0:	2208      	movs	r2, #8
 80065a2:	409a      	lsls	r2, r3
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ac:	f043 0201 	orr.w	r2, r3, #1
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	fa22 f303 	lsr.w	r3, r2, r3
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d06e      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a69      	ldr	r2, [pc, #420]	; (8006774 <HAL_DMA_IRQHandler+0x3f8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d04a      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a67      	ldr	r2, [pc, #412]	; (8006778 <HAL_DMA_IRQHandler+0x3fc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d045      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a66      	ldr	r2, [pc, #408]	; (800677c <HAL_DMA_IRQHandler+0x400>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d040      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a64      	ldr	r2, [pc, #400]	; (8006780 <HAL_DMA_IRQHandler+0x404>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d03b      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a63      	ldr	r2, [pc, #396]	; (8006784 <HAL_DMA_IRQHandler+0x408>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d036      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a61      	ldr	r2, [pc, #388]	; (8006788 <HAL_DMA_IRQHandler+0x40c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d031      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a60      	ldr	r2, [pc, #384]	; (800678c <HAL_DMA_IRQHandler+0x410>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d02c      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a5e      	ldr	r2, [pc, #376]	; (8006790 <HAL_DMA_IRQHandler+0x414>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d027      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a5d      	ldr	r2, [pc, #372]	; (8006794 <HAL_DMA_IRQHandler+0x418>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d022      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a5b      	ldr	r2, [pc, #364]	; (8006798 <HAL_DMA_IRQHandler+0x41c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d01d      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a5a      	ldr	r2, [pc, #360]	; (800679c <HAL_DMA_IRQHandler+0x420>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d018      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a58      	ldr	r2, [pc, #352]	; (80067a0 <HAL_DMA_IRQHandler+0x424>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d013      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a57      	ldr	r2, [pc, #348]	; (80067a4 <HAL_DMA_IRQHandler+0x428>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00e      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a55      	ldr	r2, [pc, #340]	; (80067a8 <HAL_DMA_IRQHandler+0x42c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d009      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a54      	ldr	r2, [pc, #336]	; (80067ac <HAL_DMA_IRQHandler+0x430>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_DMA_IRQHandler+0x2ee>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a52      	ldr	r2, [pc, #328]	; (80067b0 <HAL_DMA_IRQHandler+0x434>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d10a      	bne.n	8006680 <HAL_DMA_IRQHandler+0x304>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006674:	2b00      	cmp	r3, #0
 8006676:	bf14      	ite	ne
 8006678:	2301      	movne	r3, #1
 800667a:	2300      	moveq	r3, #0
 800667c:	b2db      	uxtb	r3, r3
 800667e:	e003      	b.n	8006688 <HAL_DMA_IRQHandler+0x30c>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2300      	movs	r3, #0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	2201      	movs	r2, #1
 8006696:	409a      	lsls	r2, r3
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	f043 0202 	orr.w	r2, r3, #2
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2204      	movs	r2, #4
 80066b2:	409a      	lsls	r2, r3
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 808f 	beq.w	80067dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2c      	ldr	r2, [pc, #176]	; (8006774 <HAL_DMA_IRQHandler+0x3f8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d04a      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2a      	ldr	r2, [pc, #168]	; (8006778 <HAL_DMA_IRQHandler+0x3fc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d045      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a29      	ldr	r2, [pc, #164]	; (800677c <HAL_DMA_IRQHandler+0x400>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d040      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a27      	ldr	r2, [pc, #156]	; (8006780 <HAL_DMA_IRQHandler+0x404>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d03b      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a26      	ldr	r2, [pc, #152]	; (8006784 <HAL_DMA_IRQHandler+0x408>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d036      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a24      	ldr	r2, [pc, #144]	; (8006788 <HAL_DMA_IRQHandler+0x40c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d031      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a23      	ldr	r2, [pc, #140]	; (800678c <HAL_DMA_IRQHandler+0x410>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d02c      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a21      	ldr	r2, [pc, #132]	; (8006790 <HAL_DMA_IRQHandler+0x414>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d027      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a20      	ldr	r2, [pc, #128]	; (8006794 <HAL_DMA_IRQHandler+0x418>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d022      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1e      	ldr	r2, [pc, #120]	; (8006798 <HAL_DMA_IRQHandler+0x41c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d01d      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1d      	ldr	r2, [pc, #116]	; (800679c <HAL_DMA_IRQHandler+0x420>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d018      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1b      	ldr	r2, [pc, #108]	; (80067a0 <HAL_DMA_IRQHandler+0x424>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d013      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a1a      	ldr	r2, [pc, #104]	; (80067a4 <HAL_DMA_IRQHandler+0x428>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00e      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <HAL_DMA_IRQHandler+0x42c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d009      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a17      	ldr	r2, [pc, #92]	; (80067ac <HAL_DMA_IRQHandler+0x430>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d004      	beq.n	800675e <HAL_DMA_IRQHandler+0x3e2>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a15      	ldr	r2, [pc, #84]	; (80067b0 <HAL_DMA_IRQHandler+0x434>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d12a      	bne.n	80067b4 <HAL_DMA_IRQHandler+0x438>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	e023      	b.n	80067bc <HAL_DMA_IRQHandler+0x440>
 8006774:	40020010 	.word	0x40020010
 8006778:	40020028 	.word	0x40020028
 800677c:	40020040 	.word	0x40020040
 8006780:	40020058 	.word	0x40020058
 8006784:	40020070 	.word	0x40020070
 8006788:	40020088 	.word	0x40020088
 800678c:	400200a0 	.word	0x400200a0
 8006790:	400200b8 	.word	0x400200b8
 8006794:	40020410 	.word	0x40020410
 8006798:	40020428 	.word	0x40020428
 800679c:	40020440 	.word	0x40020440
 80067a0:	40020458 	.word	0x40020458
 80067a4:	40020470 	.word	0x40020470
 80067a8:	40020488 	.word	0x40020488
 80067ac:	400204a0 	.word	0x400204a0
 80067b0:	400204b8 	.word	0x400204b8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00d      	beq.n	80067dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c4:	f003 031f 	and.w	r3, r3, #31
 80067c8:	2204      	movs	r2, #4
 80067ca:	409a      	lsls	r2, r3
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	f043 0204 	orr.w	r2, r3, #4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	2210      	movs	r2, #16
 80067e6:	409a      	lsls	r2, r3
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80a6 	beq.w	800693e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a85      	ldr	r2, [pc, #532]	; (8006a0c <HAL_DMA_IRQHandler+0x690>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d04a      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a83      	ldr	r2, [pc, #524]	; (8006a10 <HAL_DMA_IRQHandler+0x694>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d045      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a82      	ldr	r2, [pc, #520]	; (8006a14 <HAL_DMA_IRQHandler+0x698>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d040      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a80      	ldr	r2, [pc, #512]	; (8006a18 <HAL_DMA_IRQHandler+0x69c>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d03b      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a7f      	ldr	r2, [pc, #508]	; (8006a1c <HAL_DMA_IRQHandler+0x6a0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d036      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a7d      	ldr	r2, [pc, #500]	; (8006a20 <HAL_DMA_IRQHandler+0x6a4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d031      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a7c      	ldr	r2, [pc, #496]	; (8006a24 <HAL_DMA_IRQHandler+0x6a8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d02c      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a7a      	ldr	r2, [pc, #488]	; (8006a28 <HAL_DMA_IRQHandler+0x6ac>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d027      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a79      	ldr	r2, [pc, #484]	; (8006a2c <HAL_DMA_IRQHandler+0x6b0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d022      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a77      	ldr	r2, [pc, #476]	; (8006a30 <HAL_DMA_IRQHandler+0x6b4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d01d      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a76      	ldr	r2, [pc, #472]	; (8006a34 <HAL_DMA_IRQHandler+0x6b8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d018      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a74      	ldr	r2, [pc, #464]	; (8006a38 <HAL_DMA_IRQHandler+0x6bc>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d013      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a73      	ldr	r2, [pc, #460]	; (8006a3c <HAL_DMA_IRQHandler+0x6c0>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00e      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a71      	ldr	r2, [pc, #452]	; (8006a40 <HAL_DMA_IRQHandler+0x6c4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d009      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a70      	ldr	r2, [pc, #448]	; (8006a44 <HAL_DMA_IRQHandler+0x6c8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <HAL_DMA_IRQHandler+0x516>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a6e      	ldr	r2, [pc, #440]	; (8006a48 <HAL_DMA_IRQHandler+0x6cc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d10a      	bne.n	80068a8 <HAL_DMA_IRQHandler+0x52c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	bf14      	ite	ne
 80068a0:	2301      	movne	r3, #1
 80068a2:	2300      	moveq	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e009      	b.n	80068bc <HAL_DMA_IRQHandler+0x540>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf14      	ite	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	2300      	moveq	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d03e      	beq.n	800693e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	2210      	movs	r2, #16
 80068ca:	409a      	lsls	r2, r3
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d018      	beq.n	8006910 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d108      	bne.n	80068fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d024      	beq.n	800693e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
 80068fc:	e01f      	b.n	800693e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01b      	beq.n	800693e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	4798      	blx	r3
 800690e:	e016      	b.n	800693e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691a:	2b00      	cmp	r3, #0
 800691c:	d107      	bne.n	800692e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0208 	bic.w	r2, r2, #8
 800692c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	2220      	movs	r2, #32
 8006948:	409a      	lsls	r2, r3
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	4013      	ands	r3, r2
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 8110 	beq.w	8006b74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a2c      	ldr	r2, [pc, #176]	; (8006a0c <HAL_DMA_IRQHandler+0x690>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d04a      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a2b      	ldr	r2, [pc, #172]	; (8006a10 <HAL_DMA_IRQHandler+0x694>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d045      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a29      	ldr	r2, [pc, #164]	; (8006a14 <HAL_DMA_IRQHandler+0x698>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d040      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a28      	ldr	r2, [pc, #160]	; (8006a18 <HAL_DMA_IRQHandler+0x69c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d03b      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a26      	ldr	r2, [pc, #152]	; (8006a1c <HAL_DMA_IRQHandler+0x6a0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d036      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a25      	ldr	r2, [pc, #148]	; (8006a20 <HAL_DMA_IRQHandler+0x6a4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d031      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a23      	ldr	r2, [pc, #140]	; (8006a24 <HAL_DMA_IRQHandler+0x6a8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02c      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <HAL_DMA_IRQHandler+0x6ac>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d027      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a20      	ldr	r2, [pc, #128]	; (8006a2c <HAL_DMA_IRQHandler+0x6b0>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d022      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <HAL_DMA_IRQHandler+0x6b4>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d01d      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <HAL_DMA_IRQHandler+0x6b8>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d018      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <HAL_DMA_IRQHandler+0x6bc>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d013      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1a      	ldr	r2, [pc, #104]	; (8006a3c <HAL_DMA_IRQHandler+0x6c0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00e      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a19      	ldr	r2, [pc, #100]	; (8006a40 <HAL_DMA_IRQHandler+0x6c4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d009      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a17      	ldr	r2, [pc, #92]	; (8006a44 <HAL_DMA_IRQHandler+0x6c8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d004      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x678>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a16      	ldr	r2, [pc, #88]	; (8006a48 <HAL_DMA_IRQHandler+0x6cc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d12b      	bne.n	8006a4c <HAL_DMA_IRQHandler+0x6d0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0310 	and.w	r3, r3, #16
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf14      	ite	ne
 8006a02:	2301      	movne	r3, #1
 8006a04:	2300      	moveq	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	e02a      	b.n	8006a60 <HAL_DMA_IRQHandler+0x6e4>
 8006a0a:	bf00      	nop
 8006a0c:	40020010 	.word	0x40020010
 8006a10:	40020028 	.word	0x40020028
 8006a14:	40020040 	.word	0x40020040
 8006a18:	40020058 	.word	0x40020058
 8006a1c:	40020070 	.word	0x40020070
 8006a20:	40020088 	.word	0x40020088
 8006a24:	400200a0 	.word	0x400200a0
 8006a28:	400200b8 	.word	0x400200b8
 8006a2c:	40020410 	.word	0x40020410
 8006a30:	40020428 	.word	0x40020428
 8006a34:	40020440 	.word	0x40020440
 8006a38:	40020458 	.word	0x40020458
 8006a3c:	40020470 	.word	0x40020470
 8006a40:	40020488 	.word	0x40020488
 8006a44:	400204a0 	.word	0x400204a0
 8006a48:	400204b8 	.word	0x400204b8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	bf14      	ite	ne
 8006a5a:	2301      	movne	r3, #1
 8006a5c:	2300      	moveq	r3, #0
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8087 	beq.w	8006b74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	2220      	movs	r2, #32
 8006a70:	409a      	lsls	r2, r3
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d139      	bne.n	8006af6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 0216 	bic.w	r2, r2, #22
 8006a90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695a      	ldr	r2, [r3, #20]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006aa0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <HAL_DMA_IRQHandler+0x736>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0208 	bic.w	r2, r2, #8
 8006ac0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac6:	f003 031f 	and.w	r3, r3, #31
 8006aca:	223f      	movs	r2, #63	; 0x3f
 8006acc:	409a      	lsls	r2, r3
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 834a 	beq.w	8007180 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
          }
          return;
 8006af4:	e344      	b.n	8007180 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d018      	beq.n	8006b36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d108      	bne.n	8006b24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d02c      	beq.n	8006b74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	4798      	blx	r3
 8006b22:	e027      	b.n	8006b74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d023      	beq.n	8006b74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	4798      	blx	r3
 8006b34:	e01e      	b.n	8006b74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10f      	bne.n	8006b64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0210 	bic.w	r2, r2, #16
 8006b52:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8306 	beq.w	800718a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 8088 	beq.w	8006c9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2204      	movs	r2, #4
 8006b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a7a      	ldr	r2, [pc, #488]	; (8006d84 <HAL_DMA_IRQHandler+0xa08>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d04a      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a79      	ldr	r2, [pc, #484]	; (8006d88 <HAL_DMA_IRQHandler+0xa0c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d045      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a77      	ldr	r2, [pc, #476]	; (8006d8c <HAL_DMA_IRQHandler+0xa10>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d040      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a76      	ldr	r2, [pc, #472]	; (8006d90 <HAL_DMA_IRQHandler+0xa14>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d03b      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a74      	ldr	r2, [pc, #464]	; (8006d94 <HAL_DMA_IRQHandler+0xa18>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d036      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a73      	ldr	r2, [pc, #460]	; (8006d98 <HAL_DMA_IRQHandler+0xa1c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d031      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a71      	ldr	r2, [pc, #452]	; (8006d9c <HAL_DMA_IRQHandler+0xa20>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d02c      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a70      	ldr	r2, [pc, #448]	; (8006da0 <HAL_DMA_IRQHandler+0xa24>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d027      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a6e      	ldr	r2, [pc, #440]	; (8006da4 <HAL_DMA_IRQHandler+0xa28>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d022      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a6d      	ldr	r2, [pc, #436]	; (8006da8 <HAL_DMA_IRQHandler+0xa2c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d01d      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a6b      	ldr	r2, [pc, #428]	; (8006dac <HAL_DMA_IRQHandler+0xa30>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d018      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a6a      	ldr	r2, [pc, #424]	; (8006db0 <HAL_DMA_IRQHandler+0xa34>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d013      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a68      	ldr	r2, [pc, #416]	; (8006db4 <HAL_DMA_IRQHandler+0xa38>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00e      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a67      	ldr	r2, [pc, #412]	; (8006db8 <HAL_DMA_IRQHandler+0xa3c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a65      	ldr	r2, [pc, #404]	; (8006dbc <HAL_DMA_IRQHandler+0xa40>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x8b8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a64      	ldr	r2, [pc, #400]	; (8006dc0 <HAL_DMA_IRQHandler+0xa44>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d108      	bne.n	8006c46 <HAL_DMA_IRQHandler+0x8ca>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0201 	bic.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	e007      	b.n	8006c56 <HAL_DMA_IRQHandler+0x8da>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d307      	bcc.n	8006c72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1f2      	bne.n	8006c56 <HAL_DMA_IRQHandler+0x8da>
 8006c70:	e000      	b.n	8006c74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c72:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2203      	movs	r2, #3
 8006c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c92:	e003      	b.n	8006c9c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8272 	beq.w	800718a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
 8006cae:	e26c      	b.n	800718a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a43      	ldr	r2, [pc, #268]	; (8006dc4 <HAL_DMA_IRQHandler+0xa48>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d022      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x984>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a42      	ldr	r2, [pc, #264]	; (8006dc8 <HAL_DMA_IRQHandler+0xa4c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d01d      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x984>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a40      	ldr	r2, [pc, #256]	; (8006dcc <HAL_DMA_IRQHandler+0xa50>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x984>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a3f      	ldr	r2, [pc, #252]	; (8006dd0 <HAL_DMA_IRQHandler+0xa54>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x984>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a3d      	ldr	r2, [pc, #244]	; (8006dd4 <HAL_DMA_IRQHandler+0xa58>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x984>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a3c      	ldr	r2, [pc, #240]	; (8006dd8 <HAL_DMA_IRQHandler+0xa5c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x984>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a3a      	ldr	r2, [pc, #232]	; (8006ddc <HAL_DMA_IRQHandler+0xa60>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_DMA_IRQHandler+0x984>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a39      	ldr	r2, [pc, #228]	; (8006de0 <HAL_DMA_IRQHandler+0xa64>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d101      	bne.n	8006d04 <HAL_DMA_IRQHandler+0x988>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <HAL_DMA_IRQHandler+0x98a>
 8006d04:	2300      	movs	r3, #0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 823f 	beq.w	800718a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d18:	f003 031f 	and.w	r3, r3, #31
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	409a      	lsls	r2, r3
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80cd 	beq.w	8006ec4 <HAL_DMA_IRQHandler+0xb48>
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 80c7 	beq.w	8006ec4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	2204      	movs	r2, #4
 8006d40:	409a      	lsls	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d049      	beq.n	8006de4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d109      	bne.n	8006d6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f000 8210 	beq.w	8007184 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d6c:	e20a      	b.n	8007184 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 8206 	beq.w	8007184 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d80:	e200      	b.n	8007184 <HAL_DMA_IRQHandler+0xe08>
 8006d82:	bf00      	nop
 8006d84:	40020010 	.word	0x40020010
 8006d88:	40020028 	.word	0x40020028
 8006d8c:	40020040 	.word	0x40020040
 8006d90:	40020058 	.word	0x40020058
 8006d94:	40020070 	.word	0x40020070
 8006d98:	40020088 	.word	0x40020088
 8006d9c:	400200a0 	.word	0x400200a0
 8006da0:	400200b8 	.word	0x400200b8
 8006da4:	40020410 	.word	0x40020410
 8006da8:	40020428 	.word	0x40020428
 8006dac:	40020440 	.word	0x40020440
 8006db0:	40020458 	.word	0x40020458
 8006db4:	40020470 	.word	0x40020470
 8006db8:	40020488 	.word	0x40020488
 8006dbc:	400204a0 	.word	0x400204a0
 8006dc0:	400204b8 	.word	0x400204b8
 8006dc4:	58025408 	.word	0x58025408
 8006dc8:	5802541c 	.word	0x5802541c
 8006dcc:	58025430 	.word	0x58025430
 8006dd0:	58025444 	.word	0x58025444
 8006dd4:	58025458 	.word	0x58025458
 8006dd8:	5802546c 	.word	0x5802546c
 8006ddc:	58025480 	.word	0x58025480
 8006de0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d160      	bne.n	8006eb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a8c      	ldr	r2, [pc, #560]	; (8007024 <HAL_DMA_IRQHandler+0xca8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d04a      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a8a      	ldr	r2, [pc, #552]	; (8007028 <HAL_DMA_IRQHandler+0xcac>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d045      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a89      	ldr	r2, [pc, #548]	; (800702c <HAL_DMA_IRQHandler+0xcb0>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d040      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a87      	ldr	r2, [pc, #540]	; (8007030 <HAL_DMA_IRQHandler+0xcb4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d03b      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a86      	ldr	r2, [pc, #536]	; (8007034 <HAL_DMA_IRQHandler+0xcb8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d036      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a84      	ldr	r2, [pc, #528]	; (8007038 <HAL_DMA_IRQHandler+0xcbc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d031      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a83      	ldr	r2, [pc, #524]	; (800703c <HAL_DMA_IRQHandler+0xcc0>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d02c      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a81      	ldr	r2, [pc, #516]	; (8007040 <HAL_DMA_IRQHandler+0xcc4>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d027      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a80      	ldr	r2, [pc, #512]	; (8007044 <HAL_DMA_IRQHandler+0xcc8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d022      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a7e      	ldr	r2, [pc, #504]	; (8007048 <HAL_DMA_IRQHandler+0xccc>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01d      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a7d      	ldr	r2, [pc, #500]	; (800704c <HAL_DMA_IRQHandler+0xcd0>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d018      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a7b      	ldr	r2, [pc, #492]	; (8007050 <HAL_DMA_IRQHandler+0xcd4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a7a      	ldr	r2, [pc, #488]	; (8007054 <HAL_DMA_IRQHandler+0xcd8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a78      	ldr	r2, [pc, #480]	; (8007058 <HAL_DMA_IRQHandler+0xcdc>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d009      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a77      	ldr	r2, [pc, #476]	; (800705c <HAL_DMA_IRQHandler+0xce0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <HAL_DMA_IRQHandler+0xb12>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a75      	ldr	r2, [pc, #468]	; (8007060 <HAL_DMA_IRQHandler+0xce4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d108      	bne.n	8006ea0 <HAL_DMA_IRQHandler+0xb24>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0208 	bic.w	r2, r2, #8
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e007      	b.n	8006eb0 <HAL_DMA_IRQHandler+0xb34>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0204 	bic.w	r2, r2, #4
 8006eae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 8165 	beq.w	8007184 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec2:	e15f      	b.n	8007184 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec8:	f003 031f 	and.w	r3, r3, #31
 8006ecc:	2202      	movs	r2, #2
 8006ece:	409a      	lsls	r2, r3
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80c5 	beq.w	8007064 <HAL_DMA_IRQHandler+0xce8>
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 80bf 	beq.w	8007064 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eea:	f003 031f 	and.w	r3, r3, #31
 8006eee:	2202      	movs	r2, #2
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d018      	beq.n	8006f32 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 813a 	beq.w	8007188 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f1c:	e134      	b.n	8007188 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 8130 	beq.w	8007188 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f30:	e12a      	b.n	8007188 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d168      	bne.n	800700e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a38      	ldr	r2, [pc, #224]	; (8007024 <HAL_DMA_IRQHandler+0xca8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d04a      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a37      	ldr	r2, [pc, #220]	; (8007028 <HAL_DMA_IRQHandler+0xcac>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d045      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a35      	ldr	r2, [pc, #212]	; (800702c <HAL_DMA_IRQHandler+0xcb0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d040      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a34      	ldr	r2, [pc, #208]	; (8007030 <HAL_DMA_IRQHandler+0xcb4>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d03b      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a32      	ldr	r2, [pc, #200]	; (8007034 <HAL_DMA_IRQHandler+0xcb8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d036      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a31      	ldr	r2, [pc, #196]	; (8007038 <HAL_DMA_IRQHandler+0xcbc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d031      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2f      	ldr	r2, [pc, #188]	; (800703c <HAL_DMA_IRQHandler+0xcc0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d02c      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a2e      	ldr	r2, [pc, #184]	; (8007040 <HAL_DMA_IRQHandler+0xcc4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d027      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2c      	ldr	r2, [pc, #176]	; (8007044 <HAL_DMA_IRQHandler+0xcc8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d022      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a2b      	ldr	r2, [pc, #172]	; (8007048 <HAL_DMA_IRQHandler+0xccc>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d01d      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a29      	ldr	r2, [pc, #164]	; (800704c <HAL_DMA_IRQHandler+0xcd0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d018      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a28      	ldr	r2, [pc, #160]	; (8007050 <HAL_DMA_IRQHandler+0xcd4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d013      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a26      	ldr	r2, [pc, #152]	; (8007054 <HAL_DMA_IRQHandler+0xcd8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00e      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a25      	ldr	r2, [pc, #148]	; (8007058 <HAL_DMA_IRQHandler+0xcdc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d009      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a23      	ldr	r2, [pc, #140]	; (800705c <HAL_DMA_IRQHandler+0xce0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_DMA_IRQHandler+0xc60>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a22      	ldr	r2, [pc, #136]	; (8007060 <HAL_DMA_IRQHandler+0xce4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d108      	bne.n	8006fee <HAL_DMA_IRQHandler+0xc72>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0214 	bic.w	r2, r2, #20
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	e007      	b.n	8006ffe <HAL_DMA_IRQHandler+0xc82>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 020a 	bic.w	r2, r2, #10
 8006ffc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80b8 	beq.w	8007188 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007020:	e0b2      	b.n	8007188 <HAL_DMA_IRQHandler+0xe0c>
 8007022:	bf00      	nop
 8007024:	40020010 	.word	0x40020010
 8007028:	40020028 	.word	0x40020028
 800702c:	40020040 	.word	0x40020040
 8007030:	40020058 	.word	0x40020058
 8007034:	40020070 	.word	0x40020070
 8007038:	40020088 	.word	0x40020088
 800703c:	400200a0 	.word	0x400200a0
 8007040:	400200b8 	.word	0x400200b8
 8007044:	40020410 	.word	0x40020410
 8007048:	40020428 	.word	0x40020428
 800704c:	40020440 	.word	0x40020440
 8007050:	40020458 	.word	0x40020458
 8007054:	40020470 	.word	0x40020470
 8007058:	40020488 	.word	0x40020488
 800705c:	400204a0 	.word	0x400204a0
 8007060:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007068:	f003 031f 	and.w	r3, r3, #31
 800706c:	2208      	movs	r2, #8
 800706e:	409a      	lsls	r2, r3
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8088 	beq.w	800718a <HAL_DMA_IRQHandler+0xe0e>
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8082 	beq.w	800718a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a41      	ldr	r2, [pc, #260]	; (8007190 <HAL_DMA_IRQHandler+0xe14>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d04a      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a3f      	ldr	r2, [pc, #252]	; (8007194 <HAL_DMA_IRQHandler+0xe18>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d045      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a3e      	ldr	r2, [pc, #248]	; (8007198 <HAL_DMA_IRQHandler+0xe1c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d040      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a3c      	ldr	r2, [pc, #240]	; (800719c <HAL_DMA_IRQHandler+0xe20>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d03b      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a3b      	ldr	r2, [pc, #236]	; (80071a0 <HAL_DMA_IRQHandler+0xe24>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d036      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a39      	ldr	r2, [pc, #228]	; (80071a4 <HAL_DMA_IRQHandler+0xe28>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d031      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a38      	ldr	r2, [pc, #224]	; (80071a8 <HAL_DMA_IRQHandler+0xe2c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d02c      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a36      	ldr	r2, [pc, #216]	; (80071ac <HAL_DMA_IRQHandler+0xe30>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d027      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a35      	ldr	r2, [pc, #212]	; (80071b0 <HAL_DMA_IRQHandler+0xe34>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d022      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a33      	ldr	r2, [pc, #204]	; (80071b4 <HAL_DMA_IRQHandler+0xe38>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01d      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a32      	ldr	r2, [pc, #200]	; (80071b8 <HAL_DMA_IRQHandler+0xe3c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d018      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a30      	ldr	r2, [pc, #192]	; (80071bc <HAL_DMA_IRQHandler+0xe40>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d013      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2f      	ldr	r2, [pc, #188]	; (80071c0 <HAL_DMA_IRQHandler+0xe44>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00e      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2d      	ldr	r2, [pc, #180]	; (80071c4 <HAL_DMA_IRQHandler+0xe48>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d009      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2c      	ldr	r2, [pc, #176]	; (80071c8 <HAL_DMA_IRQHandler+0xe4c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d004      	beq.n	8007126 <HAL_DMA_IRQHandler+0xdaa>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a2a      	ldr	r2, [pc, #168]	; (80071cc <HAL_DMA_IRQHandler+0xe50>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d108      	bne.n	8007138 <HAL_DMA_IRQHandler+0xdbc>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 021c 	bic.w	r2, r2, #28
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	e007      	b.n	8007148 <HAL_DMA_IRQHandler+0xdcc>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 020e 	bic.w	r2, r2, #14
 8007146:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800714c:	f003 031f 	and.w	r3, r3, #31
 8007150:	2201      	movs	r2, #1
 8007152:	409a      	lsls	r2, r3
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d009      	beq.n	800718a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	4798      	blx	r3
 800717e:	e004      	b.n	800718a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007180:	bf00      	nop
 8007182:	e002      	b.n	800718a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007184:	bf00      	nop
 8007186:	e000      	b.n	800718a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007188:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800718a:	3728      	adds	r7, #40	; 0x28
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	40020010 	.word	0x40020010
 8007194:	40020028 	.word	0x40020028
 8007198:	40020040 	.word	0x40020040
 800719c:	40020058 	.word	0x40020058
 80071a0:	40020070 	.word	0x40020070
 80071a4:	40020088 	.word	0x40020088
 80071a8:	400200a0 	.word	0x400200a0
 80071ac:	400200b8 	.word	0x400200b8
 80071b0:	40020410 	.word	0x40020410
 80071b4:	40020428 	.word	0x40020428
 80071b8:	40020440 	.word	0x40020440
 80071bc:	40020458 	.word	0x40020458
 80071c0:	40020470 	.word	0x40020470
 80071c4:	40020488 	.word	0x40020488
 80071c8:	400204a0 	.word	0x400204a0
 80071cc:	400204b8 	.word	0x400204b8

080071d0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071de:	b2db      	uxtb	r3, r3
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a84      	ldr	r2, [pc, #528]	; (8007434 <DMA_SetConfig+0x230>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d072      	beq.n	800730e <DMA_SetConfig+0x10a>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a82      	ldr	r2, [pc, #520]	; (8007438 <DMA_SetConfig+0x234>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d06d      	beq.n	800730e <DMA_SetConfig+0x10a>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a81      	ldr	r2, [pc, #516]	; (800743c <DMA_SetConfig+0x238>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d068      	beq.n	800730e <DMA_SetConfig+0x10a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a7f      	ldr	r2, [pc, #508]	; (8007440 <DMA_SetConfig+0x23c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d063      	beq.n	800730e <DMA_SetConfig+0x10a>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a7e      	ldr	r2, [pc, #504]	; (8007444 <DMA_SetConfig+0x240>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d05e      	beq.n	800730e <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a7c      	ldr	r2, [pc, #496]	; (8007448 <DMA_SetConfig+0x244>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d059      	beq.n	800730e <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a7b      	ldr	r2, [pc, #492]	; (800744c <DMA_SetConfig+0x248>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d054      	beq.n	800730e <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a79      	ldr	r2, [pc, #484]	; (8007450 <DMA_SetConfig+0x24c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d04f      	beq.n	800730e <DMA_SetConfig+0x10a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a78      	ldr	r2, [pc, #480]	; (8007454 <DMA_SetConfig+0x250>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d04a      	beq.n	800730e <DMA_SetConfig+0x10a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a76      	ldr	r2, [pc, #472]	; (8007458 <DMA_SetConfig+0x254>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d045      	beq.n	800730e <DMA_SetConfig+0x10a>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a75      	ldr	r2, [pc, #468]	; (800745c <DMA_SetConfig+0x258>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d040      	beq.n	800730e <DMA_SetConfig+0x10a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a73      	ldr	r2, [pc, #460]	; (8007460 <DMA_SetConfig+0x25c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d03b      	beq.n	800730e <DMA_SetConfig+0x10a>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a72      	ldr	r2, [pc, #456]	; (8007464 <DMA_SetConfig+0x260>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d036      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a70      	ldr	r2, [pc, #448]	; (8007468 <DMA_SetConfig+0x264>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d031      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a6f      	ldr	r2, [pc, #444]	; (800746c <DMA_SetConfig+0x268>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d02c      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a6d      	ldr	r2, [pc, #436]	; (8007470 <DMA_SetConfig+0x26c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d027      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6c      	ldr	r2, [pc, #432]	; (8007474 <DMA_SetConfig+0x270>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d022      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a6a      	ldr	r2, [pc, #424]	; (8007478 <DMA_SetConfig+0x274>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01d      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a69      	ldr	r2, [pc, #420]	; (800747c <DMA_SetConfig+0x278>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d018      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a67      	ldr	r2, [pc, #412]	; (8007480 <DMA_SetConfig+0x27c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d013      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a66      	ldr	r2, [pc, #408]	; (8007484 <DMA_SetConfig+0x280>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00e      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a64      	ldr	r2, [pc, #400]	; (8007488 <DMA_SetConfig+0x284>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d009      	beq.n	800730e <DMA_SetConfig+0x10a>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a63      	ldr	r2, [pc, #396]	; (800748c <DMA_SetConfig+0x288>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d004      	beq.n	800730e <DMA_SetConfig+0x10a>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a61      	ldr	r2, [pc, #388]	; (8007490 <DMA_SetConfig+0x28c>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d101      	bne.n	8007312 <DMA_SetConfig+0x10e>
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <DMA_SetConfig+0x110>
 8007312:	2300      	movs	r3, #0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00d      	beq.n	8007334 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007320:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007326:	2b00      	cmp	r3, #0
 8007328:	d004      	beq.n	8007334 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007332:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a3e      	ldr	r2, [pc, #248]	; (8007434 <DMA_SetConfig+0x230>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d04a      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a3d      	ldr	r2, [pc, #244]	; (8007438 <DMA_SetConfig+0x234>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d045      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a3b      	ldr	r2, [pc, #236]	; (800743c <DMA_SetConfig+0x238>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d040      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a3a      	ldr	r2, [pc, #232]	; (8007440 <DMA_SetConfig+0x23c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d03b      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a38      	ldr	r2, [pc, #224]	; (8007444 <DMA_SetConfig+0x240>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d036      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a37      	ldr	r2, [pc, #220]	; (8007448 <DMA_SetConfig+0x244>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d031      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a35      	ldr	r2, [pc, #212]	; (800744c <DMA_SetConfig+0x248>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d02c      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a34      	ldr	r2, [pc, #208]	; (8007450 <DMA_SetConfig+0x24c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d027      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a32      	ldr	r2, [pc, #200]	; (8007454 <DMA_SetConfig+0x250>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d022      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a31      	ldr	r2, [pc, #196]	; (8007458 <DMA_SetConfig+0x254>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d01d      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a2f      	ldr	r2, [pc, #188]	; (800745c <DMA_SetConfig+0x258>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d018      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a2e      	ldr	r2, [pc, #184]	; (8007460 <DMA_SetConfig+0x25c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d013      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a2c      	ldr	r2, [pc, #176]	; (8007464 <DMA_SetConfig+0x260>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a2b      	ldr	r2, [pc, #172]	; (8007468 <DMA_SetConfig+0x264>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a29      	ldr	r2, [pc, #164]	; (800746c <DMA_SetConfig+0x268>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <DMA_SetConfig+0x1d0>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a28      	ldr	r2, [pc, #160]	; (8007470 <DMA_SetConfig+0x26c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d101      	bne.n	80073d8 <DMA_SetConfig+0x1d4>
 80073d4:	2301      	movs	r3, #1
 80073d6:	e000      	b.n	80073da <DMA_SetConfig+0x1d6>
 80073d8:	2300      	movs	r3, #0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d05a      	beq.n	8007494 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e2:	f003 031f 	and.w	r3, r3, #31
 80073e6:	223f      	movs	r2, #63	; 0x3f
 80073e8:	409a      	lsls	r2, r3
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073fc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	2b40      	cmp	r3, #64	; 0x40
 800740c:	d108      	bne.n	8007420 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800741e:	e087      	b.n	8007530 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]
}
 8007430:	e07e      	b.n	8007530 <DMA_SetConfig+0x32c>
 8007432:	bf00      	nop
 8007434:	40020010 	.word	0x40020010
 8007438:	40020028 	.word	0x40020028
 800743c:	40020040 	.word	0x40020040
 8007440:	40020058 	.word	0x40020058
 8007444:	40020070 	.word	0x40020070
 8007448:	40020088 	.word	0x40020088
 800744c:	400200a0 	.word	0x400200a0
 8007450:	400200b8 	.word	0x400200b8
 8007454:	40020410 	.word	0x40020410
 8007458:	40020428 	.word	0x40020428
 800745c:	40020440 	.word	0x40020440
 8007460:	40020458 	.word	0x40020458
 8007464:	40020470 	.word	0x40020470
 8007468:	40020488 	.word	0x40020488
 800746c:	400204a0 	.word	0x400204a0
 8007470:	400204b8 	.word	0x400204b8
 8007474:	58025408 	.word	0x58025408
 8007478:	5802541c 	.word	0x5802541c
 800747c:	58025430 	.word	0x58025430
 8007480:	58025444 	.word	0x58025444
 8007484:	58025458 	.word	0x58025458
 8007488:	5802546c 	.word	0x5802546c
 800748c:	58025480 	.word	0x58025480
 8007490:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a28      	ldr	r2, [pc, #160]	; (800753c <DMA_SetConfig+0x338>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d022      	beq.n	80074e4 <DMA_SetConfig+0x2e0>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a27      	ldr	r2, [pc, #156]	; (8007540 <DMA_SetConfig+0x33c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d01d      	beq.n	80074e4 <DMA_SetConfig+0x2e0>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a25      	ldr	r2, [pc, #148]	; (8007544 <DMA_SetConfig+0x340>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d018      	beq.n	80074e4 <DMA_SetConfig+0x2e0>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a24      	ldr	r2, [pc, #144]	; (8007548 <DMA_SetConfig+0x344>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <DMA_SetConfig+0x2e0>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a22      	ldr	r2, [pc, #136]	; (800754c <DMA_SetConfig+0x348>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00e      	beq.n	80074e4 <DMA_SetConfig+0x2e0>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a21      	ldr	r2, [pc, #132]	; (8007550 <DMA_SetConfig+0x34c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d009      	beq.n	80074e4 <DMA_SetConfig+0x2e0>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a1f      	ldr	r2, [pc, #124]	; (8007554 <DMA_SetConfig+0x350>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d004      	beq.n	80074e4 <DMA_SetConfig+0x2e0>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a1e      	ldr	r2, [pc, #120]	; (8007558 <DMA_SetConfig+0x354>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d101      	bne.n	80074e8 <DMA_SetConfig+0x2e4>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <DMA_SetConfig+0x2e6>
 80074e8:	2300      	movs	r3, #0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d020      	beq.n	8007530 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	2201      	movs	r2, #1
 80074f8:	409a      	lsls	r2, r3
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d108      	bne.n	8007520 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	60da      	str	r2, [r3, #12]
}
 800751e:	e007      	b.n	8007530 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	60da      	str	r2, [r3, #12]
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	58025408 	.word	0x58025408
 8007540:	5802541c 	.word	0x5802541c
 8007544:	58025430 	.word	0x58025430
 8007548:	58025444 	.word	0x58025444
 800754c:	58025458 	.word	0x58025458
 8007550:	5802546c 	.word	0x5802546c
 8007554:	58025480 	.word	0x58025480
 8007558:	58025494 	.word	0x58025494

0800755c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a42      	ldr	r2, [pc, #264]	; (8007674 <DMA_CalcBaseAndBitshift+0x118>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d04a      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a41      	ldr	r2, [pc, #260]	; (8007678 <DMA_CalcBaseAndBitshift+0x11c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d045      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a3f      	ldr	r2, [pc, #252]	; (800767c <DMA_CalcBaseAndBitshift+0x120>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d040      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a3e      	ldr	r2, [pc, #248]	; (8007680 <DMA_CalcBaseAndBitshift+0x124>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d03b      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a3c      	ldr	r2, [pc, #240]	; (8007684 <DMA_CalcBaseAndBitshift+0x128>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d036      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a3b      	ldr	r2, [pc, #236]	; (8007688 <DMA_CalcBaseAndBitshift+0x12c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d031      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a39      	ldr	r2, [pc, #228]	; (800768c <DMA_CalcBaseAndBitshift+0x130>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d02c      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a38      	ldr	r2, [pc, #224]	; (8007690 <DMA_CalcBaseAndBitshift+0x134>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d027      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a36      	ldr	r2, [pc, #216]	; (8007694 <DMA_CalcBaseAndBitshift+0x138>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d022      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a35      	ldr	r2, [pc, #212]	; (8007698 <DMA_CalcBaseAndBitshift+0x13c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d01d      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a33      	ldr	r2, [pc, #204]	; (800769c <DMA_CalcBaseAndBitshift+0x140>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d018      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a32      	ldr	r2, [pc, #200]	; (80076a0 <DMA_CalcBaseAndBitshift+0x144>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a30      	ldr	r2, [pc, #192]	; (80076a4 <DMA_CalcBaseAndBitshift+0x148>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00e      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a2f      	ldr	r2, [pc, #188]	; (80076a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d009      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a2d      	ldr	r2, [pc, #180]	; (80076ac <DMA_CalcBaseAndBitshift+0x150>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d004      	beq.n	8007604 <DMA_CalcBaseAndBitshift+0xa8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a2c      	ldr	r2, [pc, #176]	; (80076b0 <DMA_CalcBaseAndBitshift+0x154>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d101      	bne.n	8007608 <DMA_CalcBaseAndBitshift+0xac>
 8007604:	2301      	movs	r3, #1
 8007606:	e000      	b.n	800760a <DMA_CalcBaseAndBitshift+0xae>
 8007608:	2300      	movs	r3, #0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d024      	beq.n	8007658 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	b2db      	uxtb	r3, r3
 8007614:	3b10      	subs	r3, #16
 8007616:	4a27      	ldr	r2, [pc, #156]	; (80076b4 <DMA_CalcBaseAndBitshift+0x158>)
 8007618:	fba2 2303 	umull	r2, r3, r2, r3
 800761c:	091b      	lsrs	r3, r3, #4
 800761e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	4a24      	ldr	r2, [pc, #144]	; (80076b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007628:	5cd3      	ldrb	r3, [r2, r3]
 800762a:	461a      	mov	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b03      	cmp	r3, #3
 8007634:	d908      	bls.n	8007648 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	4b1f      	ldr	r3, [pc, #124]	; (80076bc <DMA_CalcBaseAndBitshift+0x160>)
 800763e:	4013      	ands	r3, r2
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	659a      	str	r2, [r3, #88]	; 0x58
 8007646:	e00d      	b.n	8007664 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	461a      	mov	r2, r3
 800764e:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <DMA_CalcBaseAndBitshift+0x160>)
 8007650:	4013      	ands	r3, r2
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	6593      	str	r3, [r2, #88]	; 0x58
 8007656:	e005      	b.n	8007664 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	40020010 	.word	0x40020010
 8007678:	40020028 	.word	0x40020028
 800767c:	40020040 	.word	0x40020040
 8007680:	40020058 	.word	0x40020058
 8007684:	40020070 	.word	0x40020070
 8007688:	40020088 	.word	0x40020088
 800768c:	400200a0 	.word	0x400200a0
 8007690:	400200b8 	.word	0x400200b8
 8007694:	40020410 	.word	0x40020410
 8007698:	40020428 	.word	0x40020428
 800769c:	40020440 	.word	0x40020440
 80076a0:	40020458 	.word	0x40020458
 80076a4:	40020470 	.word	0x40020470
 80076a8:	40020488 	.word	0x40020488
 80076ac:	400204a0 	.word	0x400204a0
 80076b0:	400204b8 	.word	0x400204b8
 80076b4:	aaaaaaab 	.word	0xaaaaaaab
 80076b8:	080137f4 	.word	0x080137f4
 80076bc:	fffffc00 	.word	0xfffffc00

080076c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d120      	bne.n	8007716 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d858      	bhi.n	800778e <DMA_CheckFifoParam+0xce>
 80076dc:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <DMA_CheckFifoParam+0x24>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	08007707 	.word	0x08007707
 80076ec:	080076f5 	.word	0x080076f5
 80076f0:	0800778f 	.word	0x0800778f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d048      	beq.n	8007792 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007704:	e045      	b.n	8007792 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800770e:	d142      	bne.n	8007796 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007714:	e03f      	b.n	8007796 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800771e:	d123      	bne.n	8007768 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	2b03      	cmp	r3, #3
 8007726:	d838      	bhi.n	800779a <DMA_CheckFifoParam+0xda>
 8007728:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <DMA_CheckFifoParam+0x70>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007741 	.word	0x08007741
 8007734:	08007747 	.word	0x08007747
 8007738:	08007741 	.word	0x08007741
 800773c:	08007759 	.word	0x08007759
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	73fb      	strb	r3, [r7, #15]
        break;
 8007744:	e030      	b.n	80077a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d025      	beq.n	800779e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007756:	e022      	b.n	800779e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007760:	d11f      	bne.n	80077a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007766:	e01c      	b.n	80077a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776c:	2b02      	cmp	r3, #2
 800776e:	d902      	bls.n	8007776 <DMA_CheckFifoParam+0xb6>
 8007770:	2b03      	cmp	r3, #3
 8007772:	d003      	beq.n	800777c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007774:	e018      	b.n	80077a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]
        break;
 800777a:	e015      	b.n	80077a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00e      	beq.n	80077a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	73fb      	strb	r3, [r7, #15]
    break;
 800778c:	e00b      	b.n	80077a6 <DMA_CheckFifoParam+0xe6>
        break;
 800778e:	bf00      	nop
 8007790:	e00a      	b.n	80077a8 <DMA_CheckFifoParam+0xe8>
        break;
 8007792:	bf00      	nop
 8007794:	e008      	b.n	80077a8 <DMA_CheckFifoParam+0xe8>
        break;
 8007796:	bf00      	nop
 8007798:	e006      	b.n	80077a8 <DMA_CheckFifoParam+0xe8>
        break;
 800779a:	bf00      	nop
 800779c:	e004      	b.n	80077a8 <DMA_CheckFifoParam+0xe8>
        break;
 800779e:	bf00      	nop
 80077a0:	e002      	b.n	80077a8 <DMA_CheckFifoParam+0xe8>
        break;
 80077a2:	bf00      	nop
 80077a4:	e000      	b.n	80077a8 <DMA_CheckFifoParam+0xe8>
    break;
 80077a6:	bf00      	nop
    }
  }

  return status;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop

080077b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a38      	ldr	r2, [pc, #224]	; (80078ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d022      	beq.n	8007816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a36      	ldr	r2, [pc, #216]	; (80078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d01d      	beq.n	8007816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a35      	ldr	r2, [pc, #212]	; (80078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d018      	beq.n	8007816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a33      	ldr	r2, [pc, #204]	; (80078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d013      	beq.n	8007816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a32      	ldr	r2, [pc, #200]	; (80078bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d00e      	beq.n	8007816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a30      	ldr	r2, [pc, #192]	; (80078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d009      	beq.n	8007816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a2f      	ldr	r2, [pc, #188]	; (80078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d004      	beq.n	8007816 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a2d      	ldr	r2, [pc, #180]	; (80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d101      	bne.n	800781a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007816:	2301      	movs	r3, #1
 8007818:	e000      	b.n	800781c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800781a:	2300      	movs	r3, #0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01a      	beq.n	8007856 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	3b08      	subs	r3, #8
 8007828:	4a28      	ldr	r2, [pc, #160]	; (80078cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800782a:	fba2 2303 	umull	r2, r3, r2, r3
 800782e:	091b      	lsrs	r3, r3, #4
 8007830:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4b26      	ldr	r3, [pc, #152]	; (80078d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a24      	ldr	r2, [pc, #144]	; (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007844:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f003 031f 	and.w	r3, r3, #31
 800784c:	2201      	movs	r2, #1
 800784e:	409a      	lsls	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007854:	e024      	b.n	80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	b2db      	uxtb	r3, r3
 800785c:	3b10      	subs	r3, #16
 800785e:	4a1e      	ldr	r2, [pc, #120]	; (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007860:	fba2 2303 	umull	r2, r3, r2, r3
 8007864:	091b      	lsrs	r3, r3, #4
 8007866:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	4a1c      	ldr	r2, [pc, #112]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d806      	bhi.n	800787e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4a1b      	ldr	r2, [pc, #108]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d902      	bls.n	800787e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	3308      	adds	r3, #8
 800787c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4b18      	ldr	r3, [pc, #96]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a16      	ldr	r2, [pc, #88]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007890:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f003 031f 	and.w	r3, r3, #31
 8007898:	2201      	movs	r2, #1
 800789a:	409a      	lsls	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078a0:	bf00      	nop
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	58025408 	.word	0x58025408
 80078b0:	5802541c 	.word	0x5802541c
 80078b4:	58025430 	.word	0x58025430
 80078b8:	58025444 	.word	0x58025444
 80078bc:	58025458 	.word	0x58025458
 80078c0:	5802546c 	.word	0x5802546c
 80078c4:	58025480 	.word	0x58025480
 80078c8:	58025494 	.word	0x58025494
 80078cc:	cccccccd 	.word	0xcccccccd
 80078d0:	16009600 	.word	0x16009600
 80078d4:	58025880 	.word	0x58025880
 80078d8:	aaaaaaab 	.word	0xaaaaaaab
 80078dc:	400204b8 	.word	0x400204b8
 80078e0:	4002040f 	.word	0x4002040f
 80078e4:	10008200 	.word	0x10008200
 80078e8:	40020880 	.word	0x40020880

080078ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d04a      	beq.n	8007998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2b08      	cmp	r3, #8
 8007906:	d847      	bhi.n	8007998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a25      	ldr	r2, [pc, #148]	; (80079a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d022      	beq.n	8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a24      	ldr	r2, [pc, #144]	; (80079a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d01d      	beq.n	8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a22      	ldr	r2, [pc, #136]	; (80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d018      	beq.n	8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a21      	ldr	r2, [pc, #132]	; (80079b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d013      	beq.n	8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1f      	ldr	r2, [pc, #124]	; (80079b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00e      	beq.n	8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1e      	ldr	r2, [pc, #120]	; (80079b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d009      	beq.n	8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1c      	ldr	r2, [pc, #112]	; (80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1b      	ldr	r2, [pc, #108]	; (80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d101      	bne.n	800795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800795c:	2300      	movs	r3, #0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007974:	671a      	str	r2, [r3, #112]	; 0x70
 8007976:	e009      	b.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4b14      	ldr	r3, [pc, #80]	; (80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800797c:	4413      	add	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	461a      	mov	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a11      	ldr	r2, [pc, #68]	; (80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800798a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3b01      	subs	r3, #1
 8007990:	2201      	movs	r2, #1
 8007992:	409a      	lsls	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	58025408 	.word	0x58025408
 80079a8:	5802541c 	.word	0x5802541c
 80079ac:	58025430 	.word	0x58025430
 80079b0:	58025444 	.word	0x58025444
 80079b4:	58025458 	.word	0x58025458
 80079b8:	5802546c 	.word	0x5802546c
 80079bc:	58025480 	.word	0x58025480
 80079c0:	58025494 	.word	0x58025494
 80079c4:	1600963f 	.word	0x1600963f
 80079c8:	58025940 	.word	0x58025940
 80079cc:	1000823f 	.word	0x1000823f
 80079d0:	40020940 	.word	0x40020940

080079d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b089      	sub	sp, #36	; 0x24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079de:	2300      	movs	r3, #0
 80079e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80079e2:	4b89      	ldr	r3, [pc, #548]	; (8007c08 <HAL_GPIO_Init+0x234>)
 80079e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079e6:	e194      	b.n	8007d12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	2101      	movs	r1, #1
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	fa01 f303 	lsl.w	r3, r1, r3
 80079f4:	4013      	ands	r3, r2
 80079f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8186 	beq.w	8007d0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d00b      	beq.n	8007a20 <HAL_GPIO_Init+0x4c>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d007      	beq.n	8007a20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a14:	2b11      	cmp	r3, #17
 8007a16:	d003      	beq.n	8007a20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	2b12      	cmp	r3, #18
 8007a1e:	d130      	bne.n	8007a82 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	005b      	lsls	r3, r3, #1
 8007a2a:	2203      	movs	r2, #3
 8007a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a30:	43db      	mvns	r3, r3
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	4013      	ands	r3, r2
 8007a36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a56:	2201      	movs	r2, #1
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4013      	ands	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	091b      	lsrs	r3, r3, #4
 8007a6c:	f003 0201 	and.w	r2, r3, #1
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	43db      	mvns	r3, r3
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	4013      	ands	r3, r2
 8007a98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d003      	beq.n	8007ac2 <HAL_GPIO_Init+0xee>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b12      	cmp	r3, #18
 8007ac0:	d123      	bne.n	8007b0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	08da      	lsrs	r2, r3, #3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3208      	adds	r2, #8
 8007aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	220f      	movs	r2, #15
 8007ada:	fa02 f303 	lsl.w	r3, r2, r3
 8007ade:	43db      	mvns	r3, r3
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	fa02 f303 	lsl.w	r3, r2, r3
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	08da      	lsrs	r2, r3, #3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3208      	adds	r2, #8
 8007b04:	69b9      	ldr	r1, [r7, #24]
 8007b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	2203      	movs	r2, #3
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	43db      	mvns	r3, r3
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f003 0203 	and.w	r2, r3, #3
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 80e0 	beq.w	8007d0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b4c:	4b2f      	ldr	r3, [pc, #188]	; (8007c0c <HAL_GPIO_Init+0x238>)
 8007b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b52:	4a2e      	ldr	r2, [pc, #184]	; (8007c0c <HAL_GPIO_Init+0x238>)
 8007b54:	f043 0302 	orr.w	r3, r3, #2
 8007b58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b5c:	4b2b      	ldr	r3, [pc, #172]	; (8007c0c <HAL_GPIO_Init+0x238>)
 8007b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b6a:	4a29      	ldr	r2, [pc, #164]	; (8007c10 <HAL_GPIO_Init+0x23c>)
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	089b      	lsrs	r3, r3, #2
 8007b70:	3302      	adds	r3, #2
 8007b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	220f      	movs	r2, #15
 8007b82:	fa02 f303 	lsl.w	r3, r2, r3
 8007b86:	43db      	mvns	r3, r3
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a20      	ldr	r2, [pc, #128]	; (8007c14 <HAL_GPIO_Init+0x240>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d052      	beq.n	8007c3c <HAL_GPIO_Init+0x268>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1f      	ldr	r2, [pc, #124]	; (8007c18 <HAL_GPIO_Init+0x244>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d031      	beq.n	8007c02 <HAL_GPIO_Init+0x22e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a1e      	ldr	r2, [pc, #120]	; (8007c1c <HAL_GPIO_Init+0x248>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d02b      	beq.n	8007bfe <HAL_GPIO_Init+0x22a>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a1d      	ldr	r2, [pc, #116]	; (8007c20 <HAL_GPIO_Init+0x24c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d025      	beq.n	8007bfa <HAL_GPIO_Init+0x226>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a1c      	ldr	r2, [pc, #112]	; (8007c24 <HAL_GPIO_Init+0x250>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d01f      	beq.n	8007bf6 <HAL_GPIO_Init+0x222>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a1b      	ldr	r2, [pc, #108]	; (8007c28 <HAL_GPIO_Init+0x254>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d019      	beq.n	8007bf2 <HAL_GPIO_Init+0x21e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a1a      	ldr	r2, [pc, #104]	; (8007c2c <HAL_GPIO_Init+0x258>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d013      	beq.n	8007bee <HAL_GPIO_Init+0x21a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <HAL_GPIO_Init+0x25c>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00d      	beq.n	8007bea <HAL_GPIO_Init+0x216>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a18      	ldr	r2, [pc, #96]	; (8007c34 <HAL_GPIO_Init+0x260>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d007      	beq.n	8007be6 <HAL_GPIO_Init+0x212>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <HAL_GPIO_Init+0x264>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d101      	bne.n	8007be2 <HAL_GPIO_Init+0x20e>
 8007bde:	2309      	movs	r3, #9
 8007be0:	e02d      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007be2:	230a      	movs	r3, #10
 8007be4:	e02b      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007be6:	2308      	movs	r3, #8
 8007be8:	e029      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007bea:	2307      	movs	r3, #7
 8007bec:	e027      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007bee:	2306      	movs	r3, #6
 8007bf0:	e025      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007bf2:	2305      	movs	r3, #5
 8007bf4:	e023      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007bf6:	2304      	movs	r3, #4
 8007bf8:	e021      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e01f      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e01d      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e01b      	b.n	8007c3e <HAL_GPIO_Init+0x26a>
 8007c06:	bf00      	nop
 8007c08:	58000080 	.word	0x58000080
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	58000400 	.word	0x58000400
 8007c14:	58020000 	.word	0x58020000
 8007c18:	58020400 	.word	0x58020400
 8007c1c:	58020800 	.word	0x58020800
 8007c20:	58020c00 	.word	0x58020c00
 8007c24:	58021000 	.word	0x58021000
 8007c28:	58021400 	.word	0x58021400
 8007c2c:	58021800 	.word	0x58021800
 8007c30:	58021c00 	.word	0x58021c00
 8007c34:	58022000 	.word	0x58022000
 8007c38:	58022400 	.word	0x58022400
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	f002 0203 	and.w	r2, r2, #3
 8007c44:	0092      	lsls	r2, r2, #2
 8007c46:	4093      	lsls	r3, r2
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c4e:	4938      	ldr	r1, [pc, #224]	; (8007d30 <HAL_GPIO_Init+0x35c>)
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	089b      	lsrs	r3, r3, #2
 8007c54:	3302      	adds	r3, #2
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	43db      	mvns	r3, r3
 8007c66:	69ba      	ldr	r2, [r7, #24]
 8007c68:	4013      	ands	r3, r2
 8007c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007c78:	69ba      	ldr	r2, [r7, #24]
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	43db      	mvns	r3, r3
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	4013      	ands	r3, r2
 8007c94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007cce:	69ba      	ldr	r2, [r7, #24]
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	43db      	mvns	r3, r3
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	4013      	ands	r3, r2
 8007cee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f47f ae63 	bne.w	80079e8 <HAL_GPIO_Init+0x14>
  }
}
 8007d22:	bf00      	nop
 8007d24:	bf00      	nop
 8007d26:	3724      	adds	r7, #36	; 0x24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	58000400 	.word	0x58000400

08007d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	807b      	strh	r3, [r7, #2]
 8007d40:	4613      	mov	r3, r2
 8007d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007d44:	787b      	ldrb	r3, [r7, #1]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d4a:	887a      	ldrh	r2, [r7, #2]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d50:	e003      	b.n	8007d5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d52:	887b      	ldrh	r3, [r7, #2]
 8007d54:	041a      	lsls	r2, r3, #16
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	619a      	str	r2, [r3, #24]
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007d78:	887a      	ldrh	r2, [r7, #2]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	041a      	lsls	r2, r3, #16
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	43d9      	mvns	r1, r3
 8007d84:	887b      	ldrh	r3, [r7, #2]
 8007d86:	400b      	ands	r3, r1
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	619a      	str	r2, [r3, #24]
}
 8007d8e:	bf00      	nop
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
	...

08007d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e07f      	b.n	8007eae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d106      	bne.n	8007dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fb fc76 	bl	80036b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2224      	movs	r2, #36	; 0x24
 8007dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0201 	bic.w	r2, r2, #1
 8007dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d107      	bne.n	8007e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e12:	609a      	str	r2, [r3, #8]
 8007e14:	e006      	b.n	8007e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d104      	bne.n	8007e36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6859      	ldr	r1, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	4b1d      	ldr	r3, [pc, #116]	; (8007eb8 <HAL_I2C_Init+0x11c>)
 8007e42:	430b      	orrs	r3, r1
 8007e44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691a      	ldr	r2, [r3, #16]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	ea42 0103 	orr.w	r1, r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	021a      	lsls	r2, r3, #8
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	69d9      	ldr	r1, [r3, #28]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a1a      	ldr	r2, [r3, #32]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	02008000 	.word	0x02008000

08007ebc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	461a      	mov	r2, r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	817b      	strh	r3, [r7, #10]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	813b      	strh	r3, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	f040 80f9 	bne.w	80080d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_I2C_Mem_Write+0x34>
 8007eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d105      	bne.n	8007efc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e0ed      	b.n	80080d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d101      	bne.n	8007f0a <HAL_I2C_Mem_Write+0x4e>
 8007f06:	2302      	movs	r3, #2
 8007f08:	e0e6      	b.n	80080d8 <HAL_I2C_Mem_Write+0x21c>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f12:	f7fc fdbf 	bl	8004a94 <HAL_GetTick>
 8007f16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	2319      	movs	r3, #25
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f001 fee3 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0d1      	b.n	80080d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2221      	movs	r2, #33	; 0x21
 8007f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2240      	movs	r2, #64	; 0x40
 8007f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6a3a      	ldr	r2, [r7, #32]
 8007f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f5c:	88f8      	ldrh	r0, [r7, #6]
 8007f5e:	893a      	ldrh	r2, [r7, #8]
 8007f60:	8979      	ldrh	r1, [r7, #10]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	9301      	str	r3, [sp, #4]
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 ff23 	bl	8008db8 <I2C_RequestMemoryWrite>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d005      	beq.n	8007f84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e0a9      	b.n	80080d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2bff      	cmp	r3, #255	; 0xff
 8007f8c:	d90e      	bls.n	8007fac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	22ff      	movs	r2, #255	; 0xff
 8007f92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	8979      	ldrh	r1, [r7, #10]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f001 ffc5 	bl	8009f34 <I2C_TransferConfig>
 8007faa:	e00f      	b.n	8007fcc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	8979      	ldrh	r1, [r7, #10]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f001 ffb4 	bl	8009f34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f001 fecd 	bl	8009d70 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e07b      	b.n	80080d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	781a      	ldrb	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008008:	3b01      	subs	r3, #1
 800800a:	b29a      	uxth	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008014:	b29b      	uxth	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d034      	beq.n	8008084 <HAL_I2C_Mem_Write+0x1c8>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800801e:	2b00      	cmp	r3, #0
 8008020:	d130      	bne.n	8008084 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	2200      	movs	r2, #0
 800802a:	2180      	movs	r1, #128	; 0x80
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f001 fe5f 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e04d      	b.n	80080d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008040:	b29b      	uxth	r3, r3
 8008042:	2bff      	cmp	r3, #255	; 0xff
 8008044:	d90e      	bls.n	8008064 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	22ff      	movs	r2, #255	; 0xff
 800804a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008050:	b2da      	uxtb	r2, r3
 8008052:	8979      	ldrh	r1, [r7, #10]
 8008054:	2300      	movs	r3, #0
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f001 ff69 	bl	8009f34 <I2C_TransferConfig>
 8008062:	e00f      	b.n	8008084 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008068:	b29a      	uxth	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008072:	b2da      	uxtb	r2, r3
 8008074:	8979      	ldrh	r1, [r7, #10]
 8008076:	2300      	movs	r3, #0
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f001 ff58 	bl	8009f34 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008088:	b29b      	uxth	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d19e      	bne.n	8007fcc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f001 feac 	bl	8009df0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e01a      	b.n	80080d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2220      	movs	r2, #32
 80080a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6859      	ldr	r1, [r3, #4]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <HAL_I2C_Mem_Write+0x224>)
 80080b6:	400b      	ands	r3, r1
 80080b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2220      	movs	r2, #32
 80080be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e000      	b.n	80080d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80080d6:	2302      	movs	r3, #2
  }
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	fe00e800 	.word	0xfe00e800

080080e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af02      	add	r7, sp, #8
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	4608      	mov	r0, r1
 80080ee:	4611      	mov	r1, r2
 80080f0:	461a      	mov	r2, r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	817b      	strh	r3, [r7, #10]
 80080f6:	460b      	mov	r3, r1
 80080f8:	813b      	strh	r3, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b20      	cmp	r3, #32
 8008108:	f040 80fd 	bne.w	8008306 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d002      	beq.n	8008118 <HAL_I2C_Mem_Read+0x34>
 8008112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008114:	2b00      	cmp	r3, #0
 8008116:	d105      	bne.n	8008124 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800811e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e0f1      	b.n	8008308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_I2C_Mem_Read+0x4e>
 800812e:	2302      	movs	r3, #2
 8008130:	e0ea      	b.n	8008308 <HAL_I2C_Mem_Read+0x224>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800813a:	f7fc fcab 	bl	8004a94 <HAL_GetTick>
 800813e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	2319      	movs	r3, #25
 8008146:	2201      	movs	r2, #1
 8008148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f001 fdcf 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d001      	beq.n	800815c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e0d5      	b.n	8008308 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2222      	movs	r2, #34	; 0x22
 8008160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2240      	movs	r2, #64	; 0x40
 8008168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6a3a      	ldr	r2, [r7, #32]
 8008176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800817c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008184:	88f8      	ldrh	r0, [r7, #6]
 8008186:	893a      	ldrh	r2, [r7, #8]
 8008188:	8979      	ldrh	r1, [r7, #10]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	4603      	mov	r3, r0
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f000 fe63 	bl	8008e60 <I2C_RequestMemoryRead>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e0ad      	b.n	8008308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2bff      	cmp	r3, #255	; 0xff
 80081b4:	d90e      	bls.n	80081d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	22ff      	movs	r2, #255	; 0xff
 80081ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	8979      	ldrh	r1, [r7, #10]
 80081c4:	4b52      	ldr	r3, [pc, #328]	; (8008310 <HAL_I2C_Mem_Read+0x22c>)
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f001 feb1 	bl	8009f34 <I2C_TransferConfig>
 80081d2:	e00f      	b.n	80081f4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e2:	b2da      	uxtb	r2, r3
 80081e4:	8979      	ldrh	r1, [r7, #10]
 80081e6:	4b4a      	ldr	r3, [pc, #296]	; (8008310 <HAL_I2C_Mem_Read+0x22c>)
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f001 fea0 	bl	8009f34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	2200      	movs	r2, #0
 80081fc:	2104      	movs	r1, #4
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f001 fd76 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e07c      	b.n	8008308 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	b2d2      	uxtb	r2, r2
 800821a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822a:	3b01      	subs	r3, #1
 800822c:	b29a      	uxth	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008236:	b29b      	uxth	r3, r3
 8008238:	3b01      	subs	r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008244:	b29b      	uxth	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d034      	beq.n	80082b4 <HAL_I2C_Mem_Read+0x1d0>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800824e:	2b00      	cmp	r3, #0
 8008250:	d130      	bne.n	80082b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008258:	2200      	movs	r2, #0
 800825a:	2180      	movs	r1, #128	; 0x80
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f001 fd47 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e04d      	b.n	8008308 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008270:	b29b      	uxth	r3, r3
 8008272:	2bff      	cmp	r3, #255	; 0xff
 8008274:	d90e      	bls.n	8008294 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	22ff      	movs	r2, #255	; 0xff
 800827a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008280:	b2da      	uxtb	r2, r3
 8008282:	8979      	ldrh	r1, [r7, #10]
 8008284:	2300      	movs	r3, #0
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f001 fe51 	bl	8009f34 <I2C_TransferConfig>
 8008292:	e00f      	b.n	80082b4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008298:	b29a      	uxth	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	8979      	ldrh	r1, [r7, #10]
 80082a6:	2300      	movs	r3, #0
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f001 fe40 	bl	8009f34 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d19a      	bne.n	80081f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f001 fd94 	bl	8009df0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e01a      	b.n	8008308 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2220      	movs	r2, #32
 80082d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6859      	ldr	r1, [r3, #4]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <HAL_I2C_Mem_Read+0x230>)
 80082e6:	400b      	ands	r3, r1
 80082e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	e000      	b.n	8008308 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008306:	2302      	movs	r3, #2
  }
}
 8008308:	4618      	mov	r0, r3
 800830a:	3718      	adds	r7, #24
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	80002400 	.word	0x80002400
 8008314:	fe00e800 	.word	0xfe00e800

08008318 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af02      	add	r7, sp, #8
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	461a      	mov	r2, r3
 8008326:	4603      	mov	r3, r0
 8008328:	817b      	strh	r3, [r7, #10]
 800832a:	460b      	mov	r3, r1
 800832c:	813b      	strh	r3, [r7, #8]
 800832e:	4613      	mov	r3, r2
 8008330:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b20      	cmp	r3, #32
 800833c:	f040 80d5 	bne.w	80084ea <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_I2C_Mem_Read_DMA+0x34>
 8008346:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008348:	2b00      	cmp	r3, #0
 800834a:	d105      	bne.n	8008358 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008352:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e0c9      	b.n	80084ec <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008362:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008366:	d101      	bne.n	800836c <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8008368:	2302      	movs	r3, #2
 800836a:	e0bf      	b.n	80084ec <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008372:	2b01      	cmp	r3, #1
 8008374:	d101      	bne.n	800837a <HAL_I2C_Mem_Read_DMA+0x62>
 8008376:	2302      	movs	r3, #2
 8008378:	e0b8      	b.n	80084ec <HAL_I2C_Mem_Read_DMA+0x1d4>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008382:	f7fc fb87 	bl	8004a94 <HAL_GetTick>
 8008386:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2222      	movs	r2, #34	; 0x22
 800838c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2240      	movs	r2, #64	; 0x40
 8008394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80083a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4a51      	ldr	r2, [pc, #324]	; (80084f4 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80083ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4a51      	ldr	r2, [pc, #324]	; (80084f8 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80083b4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	2bff      	cmp	r3, #255	; 0xff
 80083be:	d906      	bls.n	80083ce <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	22ff      	movs	r2, #255	; 0xff
 80083c4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80083c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083ca:	61fb      	str	r3, [r7, #28]
 80083cc:	e007      	b.n	80083de <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80083d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083dc:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80083de:	88f8      	ldrh	r0, [r7, #6]
 80083e0:	893a      	ldrh	r2, [r7, #8]
 80083e2:	8979      	ldrh	r1, [r7, #10]
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	2319      	movs	r3, #25
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	4603      	mov	r3, r0
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fd36 	bl	8008e60 <I2C_RequestMemoryRead>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e072      	b.n	80084ec <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800840a:	2b00      	cmp	r3, #0
 800840c:	d020      	beq.n	8008450 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008412:	4a3a      	ldr	r2, [pc, #232]	; (80084fc <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8008414:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	4a39      	ldr	r2, [pc, #228]	; (8008500 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 800841c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008422:	2200      	movs	r2, #0
 8008424:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842a:	2200      	movs	r2, #0
 800842c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3324      	adds	r3, #36	; 0x24
 8008438:	4619      	mov	r1, r3
 800843a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008440:	f7fc ffd0 	bl	80053e4 <HAL_DMA_Start_IT>
 8008444:	4603      	mov	r3, r0
 8008446:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008448:	7dfb      	ldrb	r3, [r7, #23]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d139      	bne.n	80084c2 <HAL_I2C_Mem_Read_DMA+0x1aa>
 800844e:	e013      	b.n	8008478 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2220      	movs	r2, #32
 8008454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008464:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e039      	b.n	80084ec <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800847c:	b2da      	uxtb	r2, r3
 800847e:	8979      	ldrh	r1, [r7, #10]
 8008480:	4b20      	ldr	r3, [pc, #128]	; (8008504 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f001 fd54 	bl	8009f34 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008490:	b29a      	uxth	r2, r3
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	b29a      	uxth	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80084a6:	2110      	movs	r1, #16
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f001 fd71 	bl	8009f90 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084bc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	e014      	b.n	80084ec <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084d6:	f043 0210 	orr.w	r2, r3, #16
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80084ea:	2302      	movs	r3, #2
  }
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3720      	adds	r7, #32
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	ffff0000 	.word	0xffff0000
 80084f8:	08008813 	.word	0x08008813
 80084fc:	080099af 	.word	0x080099af
 8008500:	08009a45 	.word	0x08009a45
 8008504:	80002400 	.word	0x80002400

08008508 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	68f9      	ldr	r1, [r7, #12]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
  }
}
 8008534:	bf00      	nop
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800856c:	bf00      	nop
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
 8008598:	4613      	mov	r3, r2
 800859a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80085b0:	bf00      	nop
 80085b2:	370c      	adds	r7, #12
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008628:	2b01      	cmp	r3, #1
 800862a:	d101      	bne.n	8008630 <I2C_Slave_ISR_IT+0x24>
 800862c:	2302      	movs	r3, #2
 800862e:	e0ec      	b.n	800880a <I2C_Slave_ISR_IT+0x1fe>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	095b      	lsrs	r3, r3, #5
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d009      	beq.n	8008658 <I2C_Slave_ISR_IT+0x4c>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008650:	6939      	ldr	r1, [r7, #16]
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fe42 	bl	80092dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	091b      	lsrs	r3, r3, #4
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d04d      	beq.n	8008700 <I2C_Slave_ISR_IT+0xf4>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	091b      	lsrs	r3, r3, #4
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b00      	cmp	r3, #0
 800866e:	d047      	beq.n	8008700 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	d128      	bne.n	80086cc <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b28      	cmp	r3, #40	; 0x28
 8008684:	d108      	bne.n	8008698 <I2C_Slave_ISR_IT+0x8c>
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800868c:	d104      	bne.n	8008698 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800868e:	6939      	ldr	r1, [r7, #16]
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f001 f81b 	bl	80096cc <I2C_ITListenCplt>
 8008696:	e032      	b.n	80086fe <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b29      	cmp	r3, #41	; 0x29
 80086a2:	d10e      	bne.n	80086c2 <I2C_Slave_ISR_IT+0xb6>
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086aa:	d00a      	beq.n	80086c2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2210      	movs	r2, #16
 80086b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f001 f956 	bl	8009966 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 fce5 	bl	800908a <I2C_ITSlaveSeqCplt>
 80086c0:	e01d      	b.n	80086fe <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2210      	movs	r2, #16
 80086c8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80086ca:	e096      	b.n	80087fa <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2210      	movs	r2, #16
 80086d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d8:	f043 0204 	orr.w	r2, r3, #4
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d004      	beq.n	80086f0 <I2C_Slave_ISR_IT+0xe4>
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086ec:	f040 8085 	bne.w	80087fa <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f4:	4619      	mov	r1, r3
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f001 f83e 	bl	8009778 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80086fc:	e07d      	b.n	80087fa <I2C_Slave_ISR_IT+0x1ee>
 80086fe:	e07c      	b.n	80087fa <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	089b      	lsrs	r3, r3, #2
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d030      	beq.n	800876e <I2C_Slave_ISR_IT+0x162>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	089b      	lsrs	r3, r3, #2
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d02a      	beq.n	800876e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800871c:	b29b      	uxth	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d018      	beq.n	8008754 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	b2d2      	uxtb	r2, r2
 800872e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	1c5a      	adds	r2, r3, #1
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873e:	3b01      	subs	r3, #1
 8008740:	b29a      	uxth	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874a:	b29b      	uxth	r3, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	b29a      	uxth	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d14f      	bne.n	80087fe <I2C_Slave_ISR_IT+0x1f2>
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008764:	d04b      	beq.n	80087fe <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f000 fc8f 	bl	800908a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800876c:	e047      	b.n	80087fe <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	08db      	lsrs	r3, r3, #3
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00a      	beq.n	8008790 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	08db      	lsrs	r3, r3, #3
 800877e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008786:	6939      	ldr	r1, [r7, #16]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 fbbd 	bl	8008f08 <I2C_ITAddrCplt>
 800878e:	e037      	b.n	8008800 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	085b      	lsrs	r3, r3, #1
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d031      	beq.n	8008800 <I2C_Slave_ISR_IT+0x1f4>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	085b      	lsrs	r3, r3, #1
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d02b      	beq.n	8008800 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d018      	beq.n	80087e4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	781a      	ldrb	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80087e2:	e00d      	b.n	8008800 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087ea:	d002      	beq.n	80087f2 <I2C_Slave_ISR_IT+0x1e6>
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f000 fc49 	bl	800908a <I2C_ITSlaveSeqCplt>
 80087f8:	e002      	b.n	8008800 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80087fa:	bf00      	nop
 80087fc:	e000      	b.n	8008800 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80087fe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b088      	sub	sp, #32
 8008816:	af02      	add	r7, sp, #8
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008824:	2b01      	cmp	r3, #1
 8008826:	d101      	bne.n	800882c <I2C_Master_ISR_DMA+0x1a>
 8008828:	2302      	movs	r3, #2
 800882a:	e0e1      	b.n	80089f0 <I2C_Master_ISR_DMA+0x1de>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	091b      	lsrs	r3, r3, #4
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d017      	beq.n	8008870 <I2C_Master_ISR_DMA+0x5e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b00      	cmp	r3, #0
 800884a:	d011      	beq.n	8008870 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2210      	movs	r2, #16
 8008852:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008858:	f043 0204 	orr.w	r2, r3, #4
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008860:	2120      	movs	r1, #32
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f001 fb94 	bl	8009f90 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f001 f87c 	bl	8009966 <I2C_Flush_TXDR>
 800886e:	e0ba      	b.n	80089e6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	09db      	lsrs	r3, r3, #7
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d072      	beq.n	8008962 <I2C_Master_ISR_DMA+0x150>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	099b      	lsrs	r3, r3, #6
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d06c      	beq.n	8008962 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008896:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d04e      	beq.n	8008940 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ae:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	2bff      	cmp	r3, #255	; 0xff
 80088b8:	d906      	bls.n	80088c8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	22ff      	movs	r2, #255	; 0xff
 80088be:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80088c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088c4:	617b      	str	r3, [r7, #20]
 80088c6:	e010      	b.n	80088ea <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088da:	d003      	beq.n	80088e4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	617b      	str	r3, [r7, #20]
 80088e2:	e002      	b.n	80088ea <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80088e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088e8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	8a79      	ldrh	r1, [r7, #18]
 80088f2:	2300      	movs	r3, #0
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f001 fb1b 	bl	8009f34 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	b29a      	uxth	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b22      	cmp	r3, #34	; 0x22
 800891a:	d108      	bne.n	800892e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800892a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800892c:	e05b      	b.n	80089e6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800893c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800893e:	e052      	b.n	80089e6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800894a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800894e:	d003      	beq.n	8008958 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 fb5d 	bl	8009010 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008956:	e046      	b.n	80089e6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008958:	2140      	movs	r1, #64	; 0x40
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 ff0c 	bl	8009778 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008960:	e041      	b.n	80089e6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	099b      	lsrs	r3, r3, #6
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d029      	beq.n	80089c2 <I2C_Master_ISR_DMA+0x1b0>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	099b      	lsrs	r3, r3, #6
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d023      	beq.n	80089c2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d119      	bne.n	80089b8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008992:	d027      	beq.n	80089e4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800899c:	d108      	bne.n	80089b0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089ac:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80089ae:	e019      	b.n	80089e4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f000 fb2d 	bl	8009010 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80089b6:	e015      	b.n	80089e4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80089b8:	2140      	movs	r1, #64	; 0x40
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fedc 	bl	8009778 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80089c0:	e010      	b.n	80089e4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	095b      	lsrs	r3, r3, #5
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00b      	beq.n	80089e6 <I2C_Master_ISR_DMA+0x1d4>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d005      	beq.n	80089e6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fbb3 	bl	8009148 <I2C_ITMasterCplt>
 80089e2:	e000      	b.n	80089e6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80089e4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3718      	adds	r7, #24
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a08:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <I2C_Slave_ISR_DMA+0x24>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	e1c8      	b.n	8008dae <I2C_Slave_ISR_DMA+0x3b6>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d009      	beq.n	8008a44 <I2C_Slave_ISR_DMA+0x4c>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	095b      	lsrs	r3, r3, #5
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008a3c:	68b9      	ldr	r1, [r7, #8]
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 fc4c 	bl	80092dc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	091b      	lsrs	r3, r3, #4
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8199 	beq.w	8008d84 <I2C_Slave_ISR_DMA+0x38c>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	091b      	lsrs	r3, r3, #4
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 8192 	beq.w	8008d84 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	0b9b      	lsrs	r3, r3, #14
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d106      	bne.n	8008a7a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	0bdb      	lsrs	r3, r3, #15
 8008a70:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 817e 	beq.w	8008d76 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d07c      	beq.n	8008b7c <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	0bdb      	lsrs	r3, r3, #15
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d076      	beq.n	8008b7c <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a8d      	ldr	r2, [pc, #564]	; (8008ccc <I2C_Slave_ISR_DMA+0x2d4>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d059      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a8b      	ldr	r2, [pc, #556]	; (8008cd0 <I2C_Slave_ISR_DMA+0x2d8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d053      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a89      	ldr	r2, [pc, #548]	; (8008cd4 <I2C_Slave_ISR_DMA+0x2dc>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d04d      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a87      	ldr	r2, [pc, #540]	; (8008cd8 <I2C_Slave_ISR_DMA+0x2e0>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d047      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a85      	ldr	r2, [pc, #532]	; (8008cdc <I2C_Slave_ISR_DMA+0x2e4>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d041      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a83      	ldr	r2, [pc, #524]	; (8008ce0 <I2C_Slave_ISR_DMA+0x2e8>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d03b      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a81      	ldr	r2, [pc, #516]	; (8008ce4 <I2C_Slave_ISR_DMA+0x2ec>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d035      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a7f      	ldr	r2, [pc, #508]	; (8008ce8 <I2C_Slave_ISR_DMA+0x2f0>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d02f      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a7d      	ldr	r2, [pc, #500]	; (8008cec <I2C_Slave_ISR_DMA+0x2f4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d029      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a7b      	ldr	r2, [pc, #492]	; (8008cf0 <I2C_Slave_ISR_DMA+0x2f8>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d023      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a79      	ldr	r2, [pc, #484]	; (8008cf4 <I2C_Slave_ISR_DMA+0x2fc>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d01d      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a77      	ldr	r2, [pc, #476]	; (8008cf8 <I2C_Slave_ISR_DMA+0x300>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d017      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a75      	ldr	r2, [pc, #468]	; (8008cfc <I2C_Slave_ISR_DMA+0x304>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d011      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a73      	ldr	r2, [pc, #460]	; (8008d00 <I2C_Slave_ISR_DMA+0x308>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00b      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a71      	ldr	r2, [pc, #452]	; (8008d04 <I2C_Slave_ISR_DMA+0x30c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d005      	beq.n	8008b4e <I2C_Slave_ISR_DMA+0x156>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a6f      	ldr	r2, [pc, #444]	; (8008d08 <I2C_Slave_ISR_DMA+0x310>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d109      	bne.n	8008b62 <I2C_Slave_ISR_DMA+0x16a>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	bf0c      	ite	eq
 8008b5a:	2301      	moveq	r3, #1
 8008b5c:	2300      	movne	r3, #0
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	e008      	b.n	8008b74 <I2C_Slave_ISR_DMA+0x17c>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bf0c      	ite	eq
 8008b6e:	2301      	moveq	r3, #1
 8008b70:	2300      	movne	r3, #0
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d07c      	beq.n	8008c7e <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	0b9b      	lsrs	r3, r3, #14
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d076      	beq.n	8008c7e <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a4d      	ldr	r2, [pc, #308]	; (8008ccc <I2C_Slave_ISR_DMA+0x2d4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d059      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a4b      	ldr	r2, [pc, #300]	; (8008cd0 <I2C_Slave_ISR_DMA+0x2d8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d053      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a49      	ldr	r2, [pc, #292]	; (8008cd4 <I2C_Slave_ISR_DMA+0x2dc>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d04d      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a47      	ldr	r2, [pc, #284]	; (8008cd8 <I2C_Slave_ISR_DMA+0x2e0>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d047      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a45      	ldr	r2, [pc, #276]	; (8008cdc <I2C_Slave_ISR_DMA+0x2e4>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d041      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a43      	ldr	r2, [pc, #268]	; (8008ce0 <I2C_Slave_ISR_DMA+0x2e8>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d03b      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a41      	ldr	r2, [pc, #260]	; (8008ce4 <I2C_Slave_ISR_DMA+0x2ec>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d035      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a3f      	ldr	r2, [pc, #252]	; (8008ce8 <I2C_Slave_ISR_DMA+0x2f0>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d02f      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a3d      	ldr	r2, [pc, #244]	; (8008cec <I2C_Slave_ISR_DMA+0x2f4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d029      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a3b      	ldr	r2, [pc, #236]	; (8008cf0 <I2C_Slave_ISR_DMA+0x2f8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d023      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a39      	ldr	r2, [pc, #228]	; (8008cf4 <I2C_Slave_ISR_DMA+0x2fc>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d01d      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a37      	ldr	r2, [pc, #220]	; (8008cf8 <I2C_Slave_ISR_DMA+0x300>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d017      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a35      	ldr	r2, [pc, #212]	; (8008cfc <I2C_Slave_ISR_DMA+0x304>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d011      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a33      	ldr	r2, [pc, #204]	; (8008d00 <I2C_Slave_ISR_DMA+0x308>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00b      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a31      	ldr	r2, [pc, #196]	; (8008d04 <I2C_Slave_ISR_DMA+0x30c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d005      	beq.n	8008c50 <I2C_Slave_ISR_DMA+0x258>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a2f      	ldr	r2, [pc, #188]	; (8008d08 <I2C_Slave_ISR_DMA+0x310>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d109      	bne.n	8008c64 <I2C_Slave_ISR_DMA+0x26c>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bf0c      	ite	eq
 8008c5c:	2301      	moveq	r3, #1
 8008c5e:	2300      	movne	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	e008      	b.n	8008c76 <I2C_Slave_ISR_DMA+0x27e>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bf0c      	ite	eq
 8008c70:	2301      	moveq	r3, #1
 8008c72:	2300      	movne	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d148      	bne.n	8008d16 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b28      	cmp	r3, #40	; 0x28
 8008c8e:	d108      	bne.n	8008ca2 <I2C_Slave_ISR_DMA+0x2aa>
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c96:	d104      	bne.n	8008ca2 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008c98:	68b9      	ldr	r1, [r7, #8]
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 fd16 	bl	80096cc <I2C_ITListenCplt>
 8008ca0:	e068      	b.n	8008d74 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b29      	cmp	r3, #41	; 0x29
 8008cac:	d12e      	bne.n	8008d0c <I2C_Slave_ISR_DMA+0x314>
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008cb4:	d02a      	beq.n	8008d0c <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2210      	movs	r2, #16
 8008cbc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 fe51 	bl	8009966 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f9e0 	bl	800908a <I2C_ITSlaveSeqCplt>
 8008cca:	e053      	b.n	8008d74 <I2C_Slave_ISR_DMA+0x37c>
 8008ccc:	40020010 	.word	0x40020010
 8008cd0:	40020028 	.word	0x40020028
 8008cd4:	40020040 	.word	0x40020040
 8008cd8:	40020058 	.word	0x40020058
 8008cdc:	40020070 	.word	0x40020070
 8008ce0:	40020088 	.word	0x40020088
 8008ce4:	400200a0 	.word	0x400200a0
 8008ce8:	400200b8 	.word	0x400200b8
 8008cec:	40020410 	.word	0x40020410
 8008cf0:	40020428 	.word	0x40020428
 8008cf4:	40020440 	.word	0x40020440
 8008cf8:	40020458 	.word	0x40020458
 8008cfc:	40020470 	.word	0x40020470
 8008d00:	40020488 	.word	0x40020488
 8008d04:	400204a0 	.word	0x400204a0
 8008d08:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2210      	movs	r2, #16
 8008d12:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008d14:	e034      	b.n	8008d80 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2210      	movs	r2, #16
 8008d1c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d22:	f043 0204 	orr.w	r2, r3, #4
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d30:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d003      	beq.n	8008d40 <I2C_Slave_ISR_DMA+0x348>
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d3e:	d11f      	bne.n	8008d80 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	2b21      	cmp	r3, #33	; 0x21
 8008d44:	d002      	beq.n	8008d4c <I2C_Slave_ISR_DMA+0x354>
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	2b29      	cmp	r3, #41	; 0x29
 8008d4a:	d103      	bne.n	8008d54 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2221      	movs	r2, #33	; 0x21
 8008d50:	631a      	str	r2, [r3, #48]	; 0x30
 8008d52:	e008      	b.n	8008d66 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	2b22      	cmp	r3, #34	; 0x22
 8008d58:	d002      	beq.n	8008d60 <I2C_Slave_ISR_DMA+0x368>
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
 8008d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d5e:	d102      	bne.n	8008d66 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2222      	movs	r2, #34	; 0x22
 8008d64:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f000 fd03 	bl	8009778 <I2C_ITError>
      if (treatdmanack == 1U)
 8008d72:	e005      	b.n	8008d80 <I2C_Slave_ISR_DMA+0x388>
 8008d74:	e004      	b.n	8008d80 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2210      	movs	r2, #16
 8008d7c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d7e:	e011      	b.n	8008da4 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8008d80:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d82:	e00f      	b.n	8008da4 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	08db      	lsrs	r3, r3, #3
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d009      	beq.n	8008da4 <I2C_Slave_ISR_DMA+0x3ac>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	08db      	lsrs	r3, r3, #3
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008d9c:	68b9      	ldr	r1, [r7, #8]
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 f8b2 	bl	8008f08 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3720      	adds	r7, #32
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop

08008db8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	817b      	strh	r3, [r7, #10]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	813b      	strh	r3, [r7, #8]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008dd2:	88fb      	ldrh	r3, [r7, #6]
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	8979      	ldrh	r1, [r7, #10]
 8008dd8:	4b20      	ldr	r3, [pc, #128]	; (8008e5c <I2C_RequestMemoryWrite+0xa4>)
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f001 f8a7 	bl	8009f34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	69b9      	ldr	r1, [r7, #24]
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 ffc0 	bl	8009d70 <I2C_WaitOnTXISFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e02c      	b.n	8008e54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008dfa:	88fb      	ldrh	r3, [r7, #6]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d105      	bne.n	8008e0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e00:	893b      	ldrh	r3, [r7, #8]
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	629a      	str	r2, [r3, #40]	; 0x28
 8008e0a:	e015      	b.n	8008e38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e0c:	893b      	ldrh	r3, [r7, #8]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	69b9      	ldr	r1, [r7, #24]
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 ffa6 	bl	8009d70 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e012      	b.n	8008e54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e2e:	893b      	ldrh	r3, [r7, #8]
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	2180      	movs	r1, #128	; 0x80
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 ff54 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	80002000 	.word	0x80002000

08008e60 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af02      	add	r7, sp, #8
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	4608      	mov	r0, r1
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	817b      	strh	r3, [r7, #10]
 8008e72:	460b      	mov	r3, r1
 8008e74:	813b      	strh	r3, [r7, #8]
 8008e76:	4613      	mov	r3, r2
 8008e78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008e7a:	88fb      	ldrh	r3, [r7, #6]
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	8979      	ldrh	r1, [r7, #10]
 8008e80:	4b20      	ldr	r3, [pc, #128]	; (8008f04 <I2C_RequestMemoryRead+0xa4>)
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	2300      	movs	r3, #0
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f001 f854 	bl	8009f34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	69b9      	ldr	r1, [r7, #24]
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 ff6d 	bl	8009d70 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e02c      	b.n	8008efa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ea0:	88fb      	ldrh	r3, [r7, #6]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d105      	bne.n	8008eb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ea6:	893b      	ldrh	r3, [r7, #8]
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	629a      	str	r2, [r3, #40]	; 0x28
 8008eb0:	e015      	b.n	8008ede <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008eb2:	893b      	ldrh	r3, [r7, #8]
 8008eb4:	0a1b      	lsrs	r3, r3, #8
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	69b9      	ldr	r1, [r7, #24]
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 ff53 	bl	8009d70 <I2C_WaitOnTXISFlagUntilTimeout>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e012      	b.n	8008efa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ed4:	893b      	ldrh	r3, [r7, #8]
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2140      	movs	r1, #64	; 0x40
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 ff01 	bl	8009cf0 <I2C_WaitOnFlagUntilTimeout>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	80002000 	.word	0x80002000

08008f08 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f1e:	2b28      	cmp	r3, #40	; 0x28
 8008f20:	d16a      	bne.n	8008ff8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	0c1b      	lsrs	r3, r3, #16
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	0c1b      	lsrs	r3, r3, #16
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008f40:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f4e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008f5c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d138      	bne.n	8008fd8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008f66:	897b      	ldrh	r3, [r7, #10]
 8008f68:	09db      	lsrs	r3, r3, #7
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	89bb      	ldrh	r3, [r7, #12]
 8008f6e:	4053      	eors	r3, r2
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	f003 0306 	and.w	r3, r3, #6
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d11c      	bne.n	8008fb4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008f7a:	897b      	ldrh	r3, [r7, #10]
 8008f7c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d13b      	bne.n	8009008 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008fa6:	89ba      	ldrh	r2, [r7, #12]
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff faed 	bl	800858c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008fb2:	e029      	b.n	8009008 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008fb4:	893b      	ldrh	r3, [r7, #8]
 8008fb6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 f84b 	bl	800a058 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008fca:	89ba      	ldrh	r2, [r7, #12]
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7ff fadb 	bl	800858c <HAL_I2C_AddrCallback>
}
 8008fd6:	e017      	b.n	8009008 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 f83b 	bl	800a058 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008fea:	89ba      	ldrh	r2, [r7, #12]
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff facb 	bl	800858c <HAL_I2C_AddrCallback>
}
 8008ff6:	e007      	b.n	8009008 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009008:	bf00      	nop
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b082      	sub	sp, #8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b21      	cmp	r3, #33	; 0x21
 800902a:	d115      	bne.n	8009058 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2211      	movs	r2, #17
 8009038:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009040:	2101      	movs	r1, #1
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f001 f808 	bl	800a058 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f7ff fa73 	bl	800853c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009056:	e014      	b.n	8009082 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2212      	movs	r2, #18
 8009064:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800906c:	2102      	movs	r1, #2
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fff2 	bl	800a058 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f7ff fa67 	bl	8008550 <HAL_I2C_MasterRxCpltCallback>
}
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	0b9b      	lsrs	r3, r3, #14
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d008      	beq.n	80090c0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	e00d      	b.n	80090dc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	0bdb      	lsrs	r3, r3, #15
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d007      	beq.n	80090dc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090da:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b29      	cmp	r3, #41	; 0x29
 80090e6:	d112      	bne.n	800910e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2228      	movs	r2, #40	; 0x28
 80090ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2221      	movs	r2, #33	; 0x21
 80090f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80090f6:	2101      	movs	r1, #1
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 ffad 	bl	800a058 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff fa2c 	bl	8008564 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800910c:	e017      	b.n	800913e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b2a      	cmp	r3, #42	; 0x2a
 8009118:	d111      	bne.n	800913e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2228      	movs	r2, #40	; 0x28
 800911e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2222      	movs	r2, #34	; 0x22
 8009126:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009128:	2102      	movs	r1, #2
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 ff94 	bl	800a058 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fa1d 	bl	8008578 <HAL_I2C_SlaveRxCpltCallback>
}
 800913e:	bf00      	nop
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
	...

08009148 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2220      	movs	r2, #32
 800915c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b21      	cmp	r3, #33	; 0x21
 8009168:	d107      	bne.n	800917a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800916a:	2101      	movs	r1, #1
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 ff73 	bl	800a058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2211      	movs	r2, #17
 8009176:	631a      	str	r2, [r3, #48]	; 0x30
 8009178:	e00c      	b.n	8009194 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b22      	cmp	r3, #34	; 0x22
 8009184:	d106      	bne.n	8009194 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009186:	2102      	movs	r1, #2
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 ff65 	bl	800a058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2212      	movs	r2, #18
 8009192:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6859      	ldr	r1, [r3, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4b4d      	ldr	r3, [pc, #308]	; (80092d4 <I2C_ITMasterCplt+0x18c>)
 80091a0:	400b      	ands	r3, r1
 80091a2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a4a      	ldr	r2, [pc, #296]	; (80092d8 <I2C_ITMasterCplt+0x190>)
 80091ae:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	091b      	lsrs	r3, r3, #4
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d009      	beq.n	80091d0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2210      	movs	r2, #16
 80091c2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091c8:	f043 0204 	orr.w	r2, r3, #4
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b60      	cmp	r3, #96	; 0x60
 80091da:	d10b      	bne.n	80091f4 <I2C_ITMasterCplt+0xac>
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	089b      	lsrs	r3, r3, #2
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d005      	beq.n	80091f4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80091f2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fbb6 	bl	8009966 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b60      	cmp	r3, #96	; 0x60
 800920a:	d002      	beq.n	8009212 <I2C_ITMasterCplt+0xca>
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d006      	beq.n	8009220 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 faad 	bl	8009778 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800921e:	e054      	b.n	80092ca <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b21      	cmp	r3, #33	; 0x21
 800922a:	d124      	bne.n	8009276 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2220      	movs	r2, #32
 8009230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b40      	cmp	r3, #64	; 0x40
 8009244:	d10b      	bne.n	800925e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f7ff f9b0 	bl	80085bc <HAL_I2C_MemTxCpltCallback>
}
 800925c:	e035      	b.n	80092ca <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f7ff f964 	bl	800853c <HAL_I2C_MasterTxCpltCallback>
}
 8009274:	e029      	b.n	80092ca <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800927c:	b2db      	uxtb	r3, r3
 800927e:	2b22      	cmp	r3, #34	; 0x22
 8009280:	d123      	bne.n	80092ca <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009296:	b2db      	uxtb	r3, r3
 8009298:	2b40      	cmp	r3, #64	; 0x40
 800929a:	d10b      	bne.n	80092b4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7ff f98f 	bl	80085d0 <HAL_I2C_MemRxCpltCallback>
}
 80092b2:	e00a      	b.n	80092ca <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7ff f943 	bl	8008550 <HAL_I2C_MasterRxCpltCallback>
}
 80092ca:	bf00      	nop
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	fe00e800 	.word	0xfe00e800
 80092d8:	ffff0000 	.word	0xffff0000

080092dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2220      	movs	r2, #32
 8009300:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	2b21      	cmp	r3, #33	; 0x21
 8009306:	d002      	beq.n	800930e <I2C_ITSlaveCplt+0x32>
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	2b29      	cmp	r3, #41	; 0x29
 800930c:	d108      	bne.n	8009320 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800930e:	f248 0101 	movw	r1, #32769	; 0x8001
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fea0 	bl	800a058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2221      	movs	r2, #33	; 0x21
 800931c:	631a      	str	r2, [r3, #48]	; 0x30
 800931e:	e00d      	b.n	800933c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009320:	7bfb      	ldrb	r3, [r7, #15]
 8009322:	2b22      	cmp	r3, #34	; 0x22
 8009324:	d002      	beq.n	800932c <I2C_ITSlaveCplt+0x50>
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	2b2a      	cmp	r3, #42	; 0x2a
 800932a:	d107      	bne.n	800933c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800932c:	f248 0102 	movw	r1, #32770	; 0x8002
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fe91 	bl	800a058 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2222      	movs	r2, #34	; 0x22
 800933a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800934a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6859      	ldr	r1, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	4b80      	ldr	r3, [pc, #512]	; (8009558 <I2C_ITSlaveCplt+0x27c>)
 8009358:	400b      	ands	r3, r1
 800935a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fb02 	bl	8009966 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	0b9b      	lsrs	r3, r3, #14
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d07a      	beq.n	8009464 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800937c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 8111 	beq.w	80095aa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a73      	ldr	r2, [pc, #460]	; (800955c <I2C_ITSlaveCplt+0x280>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d059      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a71      	ldr	r2, [pc, #452]	; (8009560 <I2C_ITSlaveCplt+0x284>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d053      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a6f      	ldr	r2, [pc, #444]	; (8009564 <I2C_ITSlaveCplt+0x288>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d04d      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a6d      	ldr	r2, [pc, #436]	; (8009568 <I2C_ITSlaveCplt+0x28c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d047      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a6b      	ldr	r2, [pc, #428]	; (800956c <I2C_ITSlaveCplt+0x290>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d041      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a69      	ldr	r2, [pc, #420]	; (8009570 <I2C_ITSlaveCplt+0x294>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d03b      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a67      	ldr	r2, [pc, #412]	; (8009574 <I2C_ITSlaveCplt+0x298>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d035      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a65      	ldr	r2, [pc, #404]	; (8009578 <I2C_ITSlaveCplt+0x29c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d02f      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a63      	ldr	r2, [pc, #396]	; (800957c <I2C_ITSlaveCplt+0x2a0>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d029      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a61      	ldr	r2, [pc, #388]	; (8009580 <I2C_ITSlaveCplt+0x2a4>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d023      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a5f      	ldr	r2, [pc, #380]	; (8009584 <I2C_ITSlaveCplt+0x2a8>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d01d      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4a5d      	ldr	r2, [pc, #372]	; (8009588 <I2C_ITSlaveCplt+0x2ac>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d017      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a5b      	ldr	r2, [pc, #364]	; (800958c <I2C_ITSlaveCplt+0x2b0>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d011      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a59      	ldr	r2, [pc, #356]	; (8009590 <I2C_ITSlaveCplt+0x2b4>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00b      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a57      	ldr	r2, [pc, #348]	; (8009594 <I2C_ITSlaveCplt+0x2b8>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d005      	beq.n	8009448 <I2C_ITSlaveCplt+0x16c>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a55      	ldr	r2, [pc, #340]	; (8009598 <I2C_ITSlaveCplt+0x2bc>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d105      	bne.n	8009454 <I2C_ITSlaveCplt+0x178>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	b29b      	uxth	r3, r3
 8009452:	e004      	b.n	800945e <I2C_ITSlaveCplt+0x182>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	b29b      	uxth	r3, r3
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	8553      	strh	r3, [r2, #42]	; 0x2a
 8009462:	e0a2      	b.n	80095aa <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	0bdb      	lsrs	r3, r3, #15
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 809c 	beq.w	80095aa <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009480:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009486:	2b00      	cmp	r3, #0
 8009488:	f000 808f 	beq.w	80095aa <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a32      	ldr	r2, [pc, #200]	; (800955c <I2C_ITSlaveCplt+0x280>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d059      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a30      	ldr	r2, [pc, #192]	; (8009560 <I2C_ITSlaveCplt+0x284>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d053      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a2e      	ldr	r2, [pc, #184]	; (8009564 <I2C_ITSlaveCplt+0x288>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d04d      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a2c      	ldr	r2, [pc, #176]	; (8009568 <I2C_ITSlaveCplt+0x28c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d047      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a2a      	ldr	r2, [pc, #168]	; (800956c <I2C_ITSlaveCplt+0x290>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d041      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a28      	ldr	r2, [pc, #160]	; (8009570 <I2C_ITSlaveCplt+0x294>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d03b      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a26      	ldr	r2, [pc, #152]	; (8009574 <I2C_ITSlaveCplt+0x298>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d035      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a24      	ldr	r2, [pc, #144]	; (8009578 <I2C_ITSlaveCplt+0x29c>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d02f      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a22      	ldr	r2, [pc, #136]	; (800957c <I2C_ITSlaveCplt+0x2a0>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d029      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a20      	ldr	r2, [pc, #128]	; (8009580 <I2C_ITSlaveCplt+0x2a4>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d023      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a1e      	ldr	r2, [pc, #120]	; (8009584 <I2C_ITSlaveCplt+0x2a8>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d01d      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a1c      	ldr	r2, [pc, #112]	; (8009588 <I2C_ITSlaveCplt+0x2ac>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d017      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a1a      	ldr	r2, [pc, #104]	; (800958c <I2C_ITSlaveCplt+0x2b0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d011      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a18      	ldr	r2, [pc, #96]	; (8009590 <I2C_ITSlaveCplt+0x2b4>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d00b      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a16      	ldr	r2, [pc, #88]	; (8009594 <I2C_ITSlaveCplt+0x2b8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d005      	beq.n	800954c <I2C_ITSlaveCplt+0x270>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a14      	ldr	r2, [pc, #80]	; (8009598 <I2C_ITSlaveCplt+0x2bc>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d127      	bne.n	800959c <I2C_ITSlaveCplt+0x2c0>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	b29b      	uxth	r3, r3
 8009556:	e026      	b.n	80095a6 <I2C_ITSlaveCplt+0x2ca>
 8009558:	fe00e800 	.word	0xfe00e800
 800955c:	40020010 	.word	0x40020010
 8009560:	40020028 	.word	0x40020028
 8009564:	40020040 	.word	0x40020040
 8009568:	40020058 	.word	0x40020058
 800956c:	40020070 	.word	0x40020070
 8009570:	40020088 	.word	0x40020088
 8009574:	400200a0 	.word	0x400200a0
 8009578:	400200b8 	.word	0x400200b8
 800957c:	40020410 	.word	0x40020410
 8009580:	40020428 	.word	0x40020428
 8009584:	40020440 	.word	0x40020440
 8009588:	40020458 	.word	0x40020458
 800958c:	40020470 	.word	0x40020470
 8009590:	40020488 	.word	0x40020488
 8009594:	400204a0 	.word	0x400204a0
 8009598:	400204b8 	.word	0x400204b8
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	089b      	lsrs	r3, r3, #2
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d020      	beq.n	80095f8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f023 0304 	bic.w	r3, r3, #4
 80095bc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	b2d2      	uxtb	r2, r2
 80095ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	1c5a      	adds	r2, r3, #1
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00c      	beq.n	80095f8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	3b01      	subs	r3, #1
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009606:	f043 0204 	orr.w	r2, r3, #4
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009620:	2b00      	cmp	r3, #0
 8009622:	d010      	beq.n	8009646 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f8a4 	bl	8009778 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009636:	b2db      	uxtb	r3, r3
 8009638:	2b28      	cmp	r3, #40	; 0x28
 800963a:	d141      	bne.n	80096c0 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800963c:	6979      	ldr	r1, [r7, #20]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 f844 	bl	80096cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009644:	e03c      	b.n	80096c0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800964e:	d014      	beq.n	800967a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff fd1a 	bl	800908a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a1b      	ldr	r2, [pc, #108]	; (80096c8 <I2C_ITSlaveCplt+0x3ec>)
 800965a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2220      	movs	r2, #32
 8009660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7fe ff98 	bl	80085a8 <HAL_I2C_ListenCpltCallback>
}
 8009678:	e022      	b.n	80096c0 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b22      	cmp	r3, #34	; 0x22
 8009684:	d10e      	bne.n	80096a4 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2220      	movs	r2, #32
 800968a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7fe ff6b 	bl	8008578 <HAL_I2C_SlaveRxCpltCallback>
}
 80096a2:	e00d      	b.n	80096c0 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7fe ff52 	bl	8008564 <HAL_I2C_SlaveTxCpltCallback>
}
 80096c0:	bf00      	nop
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	ffff0000 	.word	0xffff0000

080096cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a26      	ldr	r2, [pc, #152]	; (8009774 <I2C_ITListenCplt+0xa8>)
 80096da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2220      	movs	r2, #32
 80096e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	089b      	lsrs	r3, r3, #2
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	d022      	beq.n	800974a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	b2d2      	uxtb	r2, r2
 8009710:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009720:	2b00      	cmp	r3, #0
 8009722:	d012      	beq.n	800974a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009734:	b29b      	uxth	r3, r3
 8009736:	3b01      	subs	r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009742:	f043 0204 	orr.w	r2, r3, #4
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800974a:	f248 0103 	movw	r1, #32771	; 0x8003
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fc82 	bl	800a058 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2210      	movs	r2, #16
 800975a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7fe ff1f 	bl	80085a8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800976a:	bf00      	nop
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	ffff0000 	.word	0xffff0000

08009778 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a5d      	ldr	r2, [pc, #372]	; (800990c <I2C_ITError+0x194>)
 8009796:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
 80097ac:	2b28      	cmp	r3, #40	; 0x28
 80097ae:	d005      	beq.n	80097bc <I2C_ITError+0x44>
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	2b29      	cmp	r3, #41	; 0x29
 80097b4:	d002      	beq.n	80097bc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	2b2a      	cmp	r3, #42	; 0x2a
 80097ba:	d10b      	bne.n	80097d4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80097bc:	2103      	movs	r1, #3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fc4a 	bl	800a058 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2228      	movs	r2, #40	; 0x28
 80097c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a50      	ldr	r2, [pc, #320]	; (8009910 <I2C_ITError+0x198>)
 80097d0:	635a      	str	r2, [r3, #52]	; 0x34
 80097d2:	e011      	b.n	80097f8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80097d4:	f248 0103 	movw	r1, #32771	; 0x8003
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fc3d 	bl	800a058 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b60      	cmp	r3, #96	; 0x60
 80097e8:	d003      	beq.n	80097f2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009802:	2b00      	cmp	r3, #0
 8009804:	d039      	beq.n	800987a <I2C_ITError+0x102>
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2b11      	cmp	r3, #17
 800980a:	d002      	beq.n	8009812 <I2C_ITError+0x9a>
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2b21      	cmp	r3, #33	; 0x21
 8009810:	d133      	bne.n	800987a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800981c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009820:	d107      	bne.n	8009832 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009830:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009836:	4618      	mov	r0, r3
 8009838:	f7fd fcca 	bl	80071d0 <HAL_DMA_GetState>
 800983c:	4603      	mov	r3, r0
 800983e:	2b01      	cmp	r3, #1
 8009840:	d017      	beq.n	8009872 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009846:	4a33      	ldr	r2, [pc, #204]	; (8009914 <I2C_ITError+0x19c>)
 8009848:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009856:	4618      	mov	r0, r3
 8009858:	f7fc fb4c 	bl	8005ef4 <HAL_DMA_Abort_IT>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d04d      	beq.n	80098fe <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800986c:	4610      	mov	r0, r2
 800986e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009870:	e045      	b.n	80098fe <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f850 	bl	8009918 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009878:	e041      	b.n	80098fe <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d039      	beq.n	80098f6 <I2C_ITError+0x17e>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b12      	cmp	r3, #18
 8009886:	d002      	beq.n	800988e <I2C_ITError+0x116>
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2b22      	cmp	r3, #34	; 0x22
 800988c:	d133      	bne.n	80098f6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800989c:	d107      	bne.n	80098ae <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fd fc8c 	bl	80071d0 <HAL_DMA_GetState>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d017      	beq.n	80098ee <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c2:	4a14      	ldr	r2, [pc, #80]	; (8009914 <I2C_ITError+0x19c>)
 80098c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fc fb0e 	bl	8005ef4 <HAL_DMA_Abort_IT>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d011      	beq.n	8009902 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80098ec:	e009      	b.n	8009902 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f812 	bl	8009918 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80098f4:	e005      	b.n	8009902 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f80e 	bl	8009918 <I2C_TreatErrorCallback>
  }
}
 80098fc:	e002      	b.n	8009904 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80098fe:	bf00      	nop
 8009900:	e000      	b.n	8009904 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009902:	bf00      	nop
}
 8009904:	bf00      	nop
 8009906:	3710      	adds	r7, #16
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	ffff0000 	.word	0xffff0000
 8009910:	0800860d 	.word	0x0800860d
 8009914:	08009cb5 	.word	0x08009cb5

08009918 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b60      	cmp	r3, #96	; 0x60
 800992a:	d10e      	bne.n	800994a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2220      	movs	r2, #32
 8009930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7fe fe58 	bl	80085f8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009948:	e009      	b.n	800995e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7fe fe43 	bl	80085e4 <HAL_I2C_ErrorCallback>
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b02      	cmp	r3, #2
 800997a:	d103      	bne.n	8009984 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2200      	movs	r2, #0
 8009982:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b01      	cmp	r3, #1
 8009990:	d007      	beq.n	80099a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	699a      	ldr	r2, [r3, #24]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f042 0201 	orr.w	r2, r2, #1
 80099a0:	619a      	str	r2, [r3, #24]
  }
}
 80099a2:	bf00      	nop
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80099ca:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d104      	bne.n	80099e0 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80099d6:	2120      	movs	r1, #32
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 fad9 	bl	8009f90 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80099de:	e02d      	b.n	8009a3c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80099e8:	441a      	add	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	2bff      	cmp	r3, #255	; 0xff
 80099f6:	d903      	bls.n	8009a00 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	22ff      	movs	r2, #255	; 0xff
 80099fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80099fe:	e004      	b.n	8009a0a <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3324      	adds	r3, #36	; 0x24
 8009a14:	4619      	mov	r1, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a20:	f7fb fce0 	bl	80053e4 <HAL_DMA_Start_IT>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009a2a:	2110      	movs	r1, #16
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f7ff fea3 	bl	8009778 <I2C_ITError>
}
 8009a32:	e003      	b.n	8009a3c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009a34:	2140      	movs	r1, #64	; 0x40
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 faaa 	bl	8009f90 <I2C_Enable_IRQ>
}
 8009a3c:	bf00      	nop
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a54:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d076      	beq.n	8009b4c <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a83      	ldr	r2, [pc, #524]	; (8009c74 <I2C_DMAError+0x230>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d059      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a81      	ldr	r2, [pc, #516]	; (8009c78 <I2C_DMAError+0x234>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d053      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a7f      	ldr	r2, [pc, #508]	; (8009c7c <I2C_DMAError+0x238>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d04d      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a7d      	ldr	r2, [pc, #500]	; (8009c80 <I2C_DMAError+0x23c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d047      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a7b      	ldr	r2, [pc, #492]	; (8009c84 <I2C_DMAError+0x240>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d041      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a79      	ldr	r2, [pc, #484]	; (8009c88 <I2C_DMAError+0x244>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d03b      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a77      	ldr	r2, [pc, #476]	; (8009c8c <I2C_DMAError+0x248>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d035      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a75      	ldr	r2, [pc, #468]	; (8009c90 <I2C_DMAError+0x24c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d02f      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a73      	ldr	r2, [pc, #460]	; (8009c94 <I2C_DMAError+0x250>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d029      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a71      	ldr	r2, [pc, #452]	; (8009c98 <I2C_DMAError+0x254>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d023      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a6f      	ldr	r2, [pc, #444]	; (8009c9c <I2C_DMAError+0x258>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d01d      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a6d      	ldr	r2, [pc, #436]	; (8009ca0 <I2C_DMAError+0x25c>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d017      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a6b      	ldr	r2, [pc, #428]	; (8009ca4 <I2C_DMAError+0x260>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d011      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a69      	ldr	r2, [pc, #420]	; (8009ca8 <I2C_DMAError+0x264>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d00b      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a67      	ldr	r2, [pc, #412]	; (8009cac <I2C_DMAError+0x268>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d005      	beq.n	8009b1e <I2C_DMAError+0xda>
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a65      	ldr	r2, [pc, #404]	; (8009cb0 <I2C_DMAError+0x26c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d109      	bne.n	8009b32 <I2C_DMAError+0xee>
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	bf0c      	ite	eq
 8009b2a:	2301      	moveq	r3, #1
 8009b2c:	2300      	movne	r3, #0
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	e008      	b.n	8009b44 <I2C_DMAError+0x100>
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	bf0c      	ite	eq
 8009b3e:	2301      	moveq	r3, #1
 8009b40:	2300      	movne	r3, #0
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d076      	beq.n	8009c42 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a46      	ldr	r2, [pc, #280]	; (8009c74 <I2C_DMAError+0x230>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d059      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a44      	ldr	r2, [pc, #272]	; (8009c78 <I2C_DMAError+0x234>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d053      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a42      	ldr	r2, [pc, #264]	; (8009c7c <I2C_DMAError+0x238>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d04d      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a40      	ldr	r2, [pc, #256]	; (8009c80 <I2C_DMAError+0x23c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d047      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a3e      	ldr	r2, [pc, #248]	; (8009c84 <I2C_DMAError+0x240>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d041      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a3c      	ldr	r2, [pc, #240]	; (8009c88 <I2C_DMAError+0x244>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d03b      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a3a      	ldr	r2, [pc, #232]	; (8009c8c <I2C_DMAError+0x248>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d035      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a38      	ldr	r2, [pc, #224]	; (8009c90 <I2C_DMAError+0x24c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d02f      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a36      	ldr	r2, [pc, #216]	; (8009c94 <I2C_DMAError+0x250>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d029      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a34      	ldr	r2, [pc, #208]	; (8009c98 <I2C_DMAError+0x254>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d023      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a32      	ldr	r2, [pc, #200]	; (8009c9c <I2C_DMAError+0x258>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d01d      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a30      	ldr	r2, [pc, #192]	; (8009ca0 <I2C_DMAError+0x25c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d017      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a2e      	ldr	r2, [pc, #184]	; (8009ca4 <I2C_DMAError+0x260>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d011      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a2c      	ldr	r2, [pc, #176]	; (8009ca8 <I2C_DMAError+0x264>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00b      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a2a      	ldr	r2, [pc, #168]	; (8009cac <I2C_DMAError+0x268>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d005      	beq.n	8009c14 <I2C_DMAError+0x1d0>
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a28      	ldr	r2, [pc, #160]	; (8009cb0 <I2C_DMAError+0x26c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d109      	bne.n	8009c28 <I2C_DMAError+0x1e4>
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	bf0c      	ite	eq
 8009c20:	2301      	moveq	r3, #1
 8009c22:	2300      	movne	r3, #0
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	e008      	b.n	8009c3a <I2C_DMAError+0x1f6>
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	bf0c      	ite	eq
 8009c34:	2301      	moveq	r3, #1
 8009c36:	2300      	movne	r3, #0
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7fd fad2 	bl	80071ec <HAL_DMA_GetError>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d00e      	beq.n	8009c6c <I2C_DMAError+0x228>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00b      	beq.n	8009c6c <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c62:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009c64:	2110      	movs	r1, #16
 8009c66:	68b8      	ldr	r0, [r7, #8]
 8009c68:	f7ff fd86 	bl	8009778 <I2C_ITError>
  }
}
 8009c6c:	bf00      	nop
 8009c6e:	3710      	adds	r7, #16
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	40020010 	.word	0x40020010
 8009c78:	40020028 	.word	0x40020028
 8009c7c:	40020040 	.word	0x40020040
 8009c80:	40020058 	.word	0x40020058
 8009c84:	40020070 	.word	0x40020070
 8009c88:	40020088 	.word	0x40020088
 8009c8c:	400200a0 	.word	0x400200a0
 8009c90:	400200b8 	.word	0x400200b8
 8009c94:	40020410 	.word	0x40020410
 8009c98:	40020428 	.word	0x40020428
 8009c9c:	40020440 	.word	0x40020440
 8009ca0:	40020458 	.word	0x40020458
 8009ca4:	40020470 	.word	0x40020470
 8009ca8:	40020488 	.word	0x40020488
 8009cac:	400204a0 	.word	0x400204a0
 8009cb0:	400204b8 	.word	0x400204b8

08009cb4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	2200      	movs	r2, #0
 8009cd0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cde:	2200      	movs	r2, #0
 8009ce0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7ff fe18 	bl	8009918 <I2C_TreatErrorCallback>
}
 8009ce8:	bf00      	nop
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d00:	e022      	b.n	8009d48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d08:	d01e      	beq.n	8009d48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d0a:	f7fa fec3 	bl	8004a94 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d302      	bcc.n	8009d20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d113      	bne.n	8009d48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d24:	f043 0220 	orr.w	r2, r3, #32
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	e00f      	b.n	8009d68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	4013      	ands	r3, r2
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	bf0c      	ite	eq
 8009d58:	2301      	moveq	r3, #1
 8009d5a:	2300      	movne	r3, #0
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	461a      	mov	r2, r3
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d0cd      	beq.n	8009d02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d7c:	e02c      	b.n	8009dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	68b9      	ldr	r1, [r7, #8]
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 f870 	bl	8009e68 <I2C_IsAcknowledgeFailed>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e02a      	b.n	8009de8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d98:	d01e      	beq.n	8009dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d9a:	f7fa fe7b 	bl	8004a94 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d302      	bcc.n	8009db0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d113      	bne.n	8009dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009db4:	f043 0220 	orr.w	r2, r3, #32
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e007      	b.n	8009de8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	d1cb      	bne.n	8009d7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dfc:	e028      	b.n	8009e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	68b9      	ldr	r1, [r7, #8]
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 f830 	bl	8009e68 <I2C_IsAcknowledgeFailed>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e026      	b.n	8009e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e12:	f7fa fe3f 	bl	8004a94 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d302      	bcc.n	8009e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d113      	bne.n	8009e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2c:	f043 0220 	orr.w	r2, r3, #32
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2220      	movs	r2, #32
 8009e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e007      	b.n	8009e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b20      	cmp	r3, #32
 8009e5c:	d1cf      	bne.n	8009dfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	f003 0310 	and.w	r3, r3, #16
 8009e7e:	2b10      	cmp	r3, #16
 8009e80:	d151      	bne.n	8009f26 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e82:	e022      	b.n	8009eca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8a:	d01e      	beq.n	8009eca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e8c:	f7fa fe02 	bl	8004a94 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d302      	bcc.n	8009ea2 <I2C_IsAcknowledgeFailed+0x3a>
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d113      	bne.n	8009eca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea6:	f043 0220 	orr.w	r2, r3, #32
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2220      	movs	r2, #32
 8009eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e02e      	b.n	8009f28 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	f003 0320 	and.w	r3, r3, #32
 8009ed4:	2b20      	cmp	r3, #32
 8009ed6:	d1d5      	bne.n	8009e84 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2210      	movs	r2, #16
 8009ede:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f7ff fd3c 	bl	8009966 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	6859      	ldr	r1, [r3, #4]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	4b0d      	ldr	r3, [pc, #52]	; (8009f30 <I2C_IsAcknowledgeFailed+0xc8>)
 8009efa:	400b      	ands	r3, r1
 8009efc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f02:	f043 0204 	orr.w	r2, r3, #4
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e000      	b.n	8009f28 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	fe00e800 	.word	0xfe00e800

08009f34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	607b      	str	r3, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	817b      	strh	r3, [r7, #10]
 8009f42:	4613      	mov	r3, r2
 8009f44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	0d5b      	lsrs	r3, r3, #21
 8009f50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009f54:	4b0d      	ldr	r3, [pc, #52]	; (8009f8c <I2C_TransferConfig+0x58>)
 8009f56:	430b      	orrs	r3, r1
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	ea02 0103 	and.w	r1, r2, r3
 8009f5e:	897b      	ldrh	r3, [r7, #10]
 8009f60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009f64:	7a7b      	ldrb	r3, [r7, #9]
 8009f66:	041b      	lsls	r3, r3, #16
 8009f68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	431a      	orrs	r2, r3
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	431a      	orrs	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009f7e:	bf00      	nop
 8009f80:	3714      	adds	r7, #20
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	03ff63ff 	.word	0x03ff63ff

08009f90 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa4:	4a2a      	ldr	r2, [pc, #168]	; (800a050 <I2C_Enable_IRQ+0xc0>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d004      	beq.n	8009fb4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009fae:	4a29      	ldr	r2, [pc, #164]	; (800a054 <I2C_Enable_IRQ+0xc4>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d11d      	bne.n	8009ff0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009fb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da03      	bge.n	8009fc4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009fc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009fc4:	887b      	ldrh	r3, [r7, #2]
 8009fc6:	2b10      	cmp	r3, #16
 8009fc8:	d103      	bne.n	8009fd2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009fd0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009fd2:	887b      	ldrh	r3, [r7, #2]
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	d103      	bne.n	8009fe0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009fde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009fe0:	887b      	ldrh	r3, [r7, #2]
 8009fe2:	2b40      	cmp	r3, #64	; 0x40
 8009fe4:	d125      	bne.n	800a032 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009fee:	e020      	b.n	800a032 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009ff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	da03      	bge.n	800a000 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009ffe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a000:	887b      	ldrh	r3, [r7, #2]
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a010:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a012:	887b      	ldrh	r3, [r7, #2]
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a022:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a024:	887b      	ldrh	r3, [r7, #2]
 800a026:	2b20      	cmp	r3, #32
 800a028:	d103      	bne.n	800a032 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f043 0320 	orr.w	r3, r3, #32
 800a030:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6819      	ldr	r1, [r3, #0]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	430a      	orrs	r2, r1
 800a040:	601a      	str	r2, [r3, #0]
}
 800a042:	bf00      	nop
 800a044:	3714      	adds	r7, #20
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	08008813 	.word	0x08008813
 800a054:	080089f9 	.word	0x080089f9

0800a058 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a064:	2300      	movs	r3, #0
 800a066:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a068:	887b      	ldrh	r3, [r7, #2]
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00f      	beq.n	800a092 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a078:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a080:	b2db      	uxtb	r3, r3
 800a082:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a086:	2b28      	cmp	r3, #40	; 0x28
 800a088:	d003      	beq.n	800a092 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a090:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a092:	887b      	ldrh	r3, [r7, #2]
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00f      	beq.n	800a0bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a0a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a0b0:	2b28      	cmp	r3, #40	; 0x28
 800a0b2:	d003      	beq.n	800a0bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a0ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a0bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	da03      	bge.n	800a0cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a0ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a0cc:	887b      	ldrh	r3, [r7, #2]
 800a0ce:	2b10      	cmp	r3, #16
 800a0d0:	d103      	bne.n	800a0da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a0d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a0da:	887b      	ldrh	r3, [r7, #2]
 800a0dc:	2b20      	cmp	r3, #32
 800a0de:	d103      	bne.n	800a0e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f043 0320 	orr.w	r3, r3, #32
 800a0e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a0e8:	887b      	ldrh	r3, [r7, #2]
 800a0ea:	2b40      	cmp	r3, #64	; 0x40
 800a0ec:	d103      	bne.n	800a0f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6819      	ldr	r1, [r3, #0]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	43da      	mvns	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	400a      	ands	r2, r1
 800a106:	601a      	str	r2, [r3, #0]
}
 800a108:	bf00      	nop
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b20      	cmp	r3, #32
 800a128:	d138      	bne.n	800a19c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a130:	2b01      	cmp	r3, #1
 800a132:	d101      	bne.n	800a138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a134:	2302      	movs	r3, #2
 800a136:	e032      	b.n	800a19e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2224      	movs	r2, #36	; 0x24
 800a144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 0201 	bic.w	r2, r2, #1
 800a156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6819      	ldr	r1, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	430a      	orrs	r2, r1
 800a176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 0201 	orr.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2220      	movs	r2, #32
 800a18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	e000      	b.n	800a19e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a19c:	2302      	movs	r3, #2
  }
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	b085      	sub	sp, #20
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b20      	cmp	r3, #32
 800a1be:	d139      	bne.n	800a234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d101      	bne.n	800a1ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	e033      	b.n	800a236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2224      	movs	r2, #36	; 0x24
 800a1da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f022 0201 	bic.w	r2, r2, #1
 800a1ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a1fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	021b      	lsls	r3, r3, #8
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	4313      	orrs	r3, r2
 800a206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68fa      	ldr	r2, [r7, #12]
 800a20e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0201 	orr.w	r2, r2, #1
 800a21e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2220      	movs	r2, #32
 800a224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a230:	2300      	movs	r3, #0
 800a232:	e000      	b.n	800a236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a234:	2302      	movs	r3, #2
  }
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
	...

0800a244 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a24c:	4b19      	ldr	r3, [pc, #100]	; (800a2b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b04      	cmp	r3, #4
 800a256:	d00a      	beq.n	800a26e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a258:	4b16      	ldr	r3, [pc, #88]	; (800a2b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	429a      	cmp	r2, r3
 800a264:	d001      	beq.n	800a26a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a266:	2301      	movs	r3, #1
 800a268:	e01f      	b.n	800a2aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	e01d      	b.n	800a2aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a26e:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	f023 0207 	bic.w	r2, r3, #7
 800a276:	490f      	ldr	r1, [pc, #60]	; (800a2b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a27e:	f7fa fc09 	bl	8004a94 <HAL_GetTick>
 800a282:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a284:	e009      	b.n	800a29a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a286:	f7fa fc05 	bl	8004a94 <HAL_GetTick>
 800a28a:	4602      	mov	r2, r0
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a294:	d901      	bls.n	800a29a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e007      	b.n	800a2aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a29a:	4b06      	ldr	r3, [pc, #24]	; (800a2b4 <HAL_PWREx_ConfigSupply+0x70>)
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2a6:	d1ee      	bne.n	800a286 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	58024800 	.word	0x58024800

0800a2b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08c      	sub	sp, #48	; 0x30
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e3ff      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 8087 	beq.w	800a3e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2d8:	4b99      	ldr	r3, [pc, #612]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2e2:	4b97      	ldr	r3, [pc, #604]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ea:	2b10      	cmp	r3, #16
 800a2ec:	d007      	beq.n	800a2fe <HAL_RCC_OscConfig+0x46>
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	2b18      	cmp	r3, #24
 800a2f2:	d110      	bne.n	800a316 <HAL_RCC_OscConfig+0x5e>
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	f003 0303 	and.w	r3, r3, #3
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d10b      	bne.n	800a316 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2fe:	4b90      	ldr	r3, [pc, #576]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a306:	2b00      	cmp	r3, #0
 800a308:	d06c      	beq.n	800a3e4 <HAL_RCC_OscConfig+0x12c>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d168      	bne.n	800a3e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e3d9      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a31e:	d106      	bne.n	800a32e <HAL_RCC_OscConfig+0x76>
 800a320:	4b87      	ldr	r3, [pc, #540]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a86      	ldr	r2, [pc, #536]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	e02e      	b.n	800a38c <HAL_RCC_OscConfig+0xd4>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10c      	bne.n	800a350 <HAL_RCC_OscConfig+0x98>
 800a336:	4b82      	ldr	r3, [pc, #520]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a81      	ldr	r2, [pc, #516]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a33c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a340:	6013      	str	r3, [r2, #0]
 800a342:	4b7f      	ldr	r3, [pc, #508]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a7e      	ldr	r2, [pc, #504]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a34c:	6013      	str	r3, [r2, #0]
 800a34e:	e01d      	b.n	800a38c <HAL_RCC_OscConfig+0xd4>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a358:	d10c      	bne.n	800a374 <HAL_RCC_OscConfig+0xbc>
 800a35a:	4b79      	ldr	r3, [pc, #484]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a78      	ldr	r2, [pc, #480]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a364:	6013      	str	r3, [r2, #0]
 800a366:	4b76      	ldr	r3, [pc, #472]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a75      	ldr	r2, [pc, #468]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a36c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a370:	6013      	str	r3, [r2, #0]
 800a372:	e00b      	b.n	800a38c <HAL_RCC_OscConfig+0xd4>
 800a374:	4b72      	ldr	r3, [pc, #456]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a71      	ldr	r2, [pc, #452]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a37a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	4b6f      	ldr	r3, [pc, #444]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a6e      	ldr	r2, [pc, #440]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a38a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d013      	beq.n	800a3bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a394:	f7fa fb7e 	bl	8004a94 <HAL_GetTick>
 800a398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a39a:	e008      	b.n	800a3ae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a39c:	f7fa fb7a 	bl	8004a94 <HAL_GetTick>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	2b64      	cmp	r3, #100	; 0x64
 800a3a8:	d901      	bls.n	800a3ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e38d      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a3ae:	4b64      	ldr	r3, [pc, #400]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d0f0      	beq.n	800a39c <HAL_RCC_OscConfig+0xe4>
 800a3ba:	e014      	b.n	800a3e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3bc:	f7fa fb6a 	bl	8004a94 <HAL_GetTick>
 800a3c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a3c2:	e008      	b.n	800a3d6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a3c4:	f7fa fb66 	bl	8004a94 <HAL_GetTick>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	2b64      	cmp	r3, #100	; 0x64
 800a3d0:	d901      	bls.n	800a3d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e379      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a3d6:	4b5a      	ldr	r3, [pc, #360]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1f0      	bne.n	800a3c4 <HAL_RCC_OscConfig+0x10c>
 800a3e2:	e000      	b.n	800a3e6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0302 	and.w	r3, r3, #2
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 80ae 	beq.w	800a550 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3f4:	4b52      	ldr	r3, [pc, #328]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3fc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3fe:	4b50      	ldr	r3, [pc, #320]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a402:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d007      	beq.n	800a41a <HAL_RCC_OscConfig+0x162>
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	2b18      	cmp	r3, #24
 800a40e:	d13a      	bne.n	800a486 <HAL_RCC_OscConfig+0x1ce>
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	f003 0303 	and.w	r3, r3, #3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d135      	bne.n	800a486 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a41a:	4b49      	ldr	r3, [pc, #292]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0304 	and.w	r3, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	d005      	beq.n	800a432 <HAL_RCC_OscConfig+0x17a>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e34b      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a432:	f7fa fb5f 	bl	8004af4 <HAL_GetREVID>
 800a436:	4603      	mov	r3, r0
 800a438:	f241 0203 	movw	r2, #4099	; 0x1003
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d817      	bhi.n	800a470 <HAL_RCC_OscConfig+0x1b8>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	2b40      	cmp	r3, #64	; 0x40
 800a446:	d108      	bne.n	800a45a <HAL_RCC_OscConfig+0x1a2>
 800a448:	4b3d      	ldr	r3, [pc, #244]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a450:	4a3b      	ldr	r2, [pc, #236]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a456:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a458:	e07a      	b.n	800a550 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a45a:	4b39      	ldr	r3, [pc, #228]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	031b      	lsls	r3, r3, #12
 800a468:	4935      	ldr	r1, [pc, #212]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a46e:	e06f      	b.n	800a550 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a470:	4b33      	ldr	r3, [pc, #204]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	061b      	lsls	r3, r3, #24
 800a47e:	4930      	ldr	r1, [pc, #192]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a480:	4313      	orrs	r3, r2
 800a482:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a484:	e064      	b.n	800a550 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d045      	beq.n	800a51a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a48e:	4b2c      	ldr	r3, [pc, #176]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f023 0219 	bic.w	r2, r3, #25
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	4929      	ldr	r1, [pc, #164]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a49c:	4313      	orrs	r3, r2
 800a49e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a0:	f7fa faf8 	bl	8004a94 <HAL_GetTick>
 800a4a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4a6:	e008      	b.n	800a4ba <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a4a8:	f7fa faf4 	bl	8004a94 <HAL_GetTick>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d901      	bls.n	800a4ba <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e307      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4ba:	4b21      	ldr	r3, [pc, #132]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0f0      	beq.n	800a4a8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4c6:	f7fa fb15 	bl	8004af4 <HAL_GetREVID>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	f241 0203 	movw	r2, #4099	; 0x1003
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d817      	bhi.n	800a504 <HAL_RCC_OscConfig+0x24c>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	2b40      	cmp	r3, #64	; 0x40
 800a4da:	d108      	bne.n	800a4ee <HAL_RCC_OscConfig+0x236>
 800a4dc:	4b18      	ldr	r3, [pc, #96]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a4e4:	4a16      	ldr	r2, [pc, #88]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a4e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4ea:	6053      	str	r3, [r2, #4]
 800a4ec:	e030      	b.n	800a550 <HAL_RCC_OscConfig+0x298>
 800a4ee:	4b14      	ldr	r3, [pc, #80]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	031b      	lsls	r3, r3, #12
 800a4fc:	4910      	ldr	r1, [pc, #64]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	604b      	str	r3, [r1, #4]
 800a502:	e025      	b.n	800a550 <HAL_RCC_OscConfig+0x298>
 800a504:	4b0e      	ldr	r3, [pc, #56]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	061b      	lsls	r3, r3, #24
 800a512:	490b      	ldr	r1, [pc, #44]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a514:	4313      	orrs	r3, r2
 800a516:	604b      	str	r3, [r1, #4]
 800a518:	e01a      	b.n	800a550 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a51a:	4b09      	ldr	r3, [pc, #36]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a08      	ldr	r2, [pc, #32]	; (800a540 <HAL_RCC_OscConfig+0x288>)
 800a520:	f023 0301 	bic.w	r3, r3, #1
 800a524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a526:	f7fa fab5 	bl	8004a94 <HAL_GetTick>
 800a52a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a52c:	e00a      	b.n	800a544 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a52e:	f7fa fab1 	bl	8004a94 <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	2b02      	cmp	r3, #2
 800a53a:	d903      	bls.n	800a544 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e2c4      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
 800a540:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a544:	4ba4      	ldr	r3, [pc, #656]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1ee      	bne.n	800a52e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0310 	and.w	r3, r3, #16
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 80a9 	beq.w	800a6b0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a55e:	4b9e      	ldr	r3, [pc, #632]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a566:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a568:	4b9b      	ldr	r3, [pc, #620]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	2b08      	cmp	r3, #8
 800a572:	d007      	beq.n	800a584 <HAL_RCC_OscConfig+0x2cc>
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	2b18      	cmp	r3, #24
 800a578:	d13a      	bne.n	800a5f0 <HAL_RCC_OscConfig+0x338>
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f003 0303 	and.w	r3, r3, #3
 800a580:	2b01      	cmp	r3, #1
 800a582:	d135      	bne.n	800a5f0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a584:	4b94      	ldr	r3, [pc, #592]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d005      	beq.n	800a59c <HAL_RCC_OscConfig+0x2e4>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	69db      	ldr	r3, [r3, #28]
 800a594:	2b80      	cmp	r3, #128	; 0x80
 800a596:	d001      	beq.n	800a59c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e296      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a59c:	f7fa faaa 	bl	8004af4 <HAL_GetREVID>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d817      	bhi.n	800a5da <HAL_RCC_OscConfig+0x322>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	2b20      	cmp	r3, #32
 800a5b0:	d108      	bne.n	800a5c4 <HAL_RCC_OscConfig+0x30c>
 800a5b2:	4b89      	ldr	r3, [pc, #548]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a5ba:	4a87      	ldr	r2, [pc, #540]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a5bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5c2:	e075      	b.n	800a6b0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5c4:	4b84      	ldr	r3, [pc, #528]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	069b      	lsls	r3, r3, #26
 800a5d2:	4981      	ldr	r1, [pc, #516]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5d8:	e06a      	b.n	800a6b0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5da:	4b7f      	ldr	r3, [pc, #508]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	061b      	lsls	r3, r3, #24
 800a5e8:	497b      	ldr	r1, [pc, #492]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5ee:	e05f      	b.n	800a6b0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	69db      	ldr	r3, [r3, #28]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d042      	beq.n	800a67e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a5f8:	4b77      	ldr	r3, [pc, #476]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a76      	ldr	r2, [pc, #472]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a604:	f7fa fa46 	bl	8004a94 <HAL_GetTick>
 800a608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a60a:	e008      	b.n	800a61e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a60c:	f7fa fa42 	bl	8004a94 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a614:	1ad3      	subs	r3, r2, r3
 800a616:	2b02      	cmp	r3, #2
 800a618:	d901      	bls.n	800a61e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e255      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a61e:	4b6e      	ldr	r3, [pc, #440]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a626:	2b00      	cmp	r3, #0
 800a628:	d0f0      	beq.n	800a60c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a62a:	f7fa fa63 	bl	8004af4 <HAL_GetREVID>
 800a62e:	4603      	mov	r3, r0
 800a630:	f241 0203 	movw	r2, #4099	; 0x1003
 800a634:	4293      	cmp	r3, r2
 800a636:	d817      	bhi.n	800a668 <HAL_RCC_OscConfig+0x3b0>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	2b20      	cmp	r3, #32
 800a63e:	d108      	bne.n	800a652 <HAL_RCC_OscConfig+0x39a>
 800a640:	4b65      	ldr	r3, [pc, #404]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a648:	4a63      	ldr	r2, [pc, #396]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a64a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a64e:	6053      	str	r3, [r2, #4]
 800a650:	e02e      	b.n	800a6b0 <HAL_RCC_OscConfig+0x3f8>
 800a652:	4b61      	ldr	r3, [pc, #388]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1b      	ldr	r3, [r3, #32]
 800a65e:	069b      	lsls	r3, r3, #26
 800a660:	495d      	ldr	r1, [pc, #372]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a662:	4313      	orrs	r3, r2
 800a664:	604b      	str	r3, [r1, #4]
 800a666:	e023      	b.n	800a6b0 <HAL_RCC_OscConfig+0x3f8>
 800a668:	4b5b      	ldr	r3, [pc, #364]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a1b      	ldr	r3, [r3, #32]
 800a674:	061b      	lsls	r3, r3, #24
 800a676:	4958      	ldr	r1, [pc, #352]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	60cb      	str	r3, [r1, #12]
 800a67c:	e018      	b.n	800a6b0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a67e:	4b56      	ldr	r3, [pc, #344]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a55      	ldr	r2, [pc, #340]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a68a:	f7fa fa03 	bl	8004a94 <HAL_GetTick>
 800a68e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a690:	e008      	b.n	800a6a4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a692:	f7fa f9ff 	bl	8004a94 <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d901      	bls.n	800a6a4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	e212      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a6a4:	4b4c      	ldr	r3, [pc, #304]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1f0      	bne.n	800a692 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d036      	beq.n	800a72a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d019      	beq.n	800a6f8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6c4:	4b44      	ldr	r3, [pc, #272]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a6c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6c8:	4a43      	ldr	r2, [pc, #268]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a6ca:	f043 0301 	orr.w	r3, r3, #1
 800a6ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6d0:	f7fa f9e0 	bl	8004a94 <HAL_GetTick>
 800a6d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6d6:	e008      	b.n	800a6ea <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a6d8:	f7fa f9dc 	bl	8004a94 <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e1ef      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6ea:	4b3b      	ldr	r3, [pc, #236]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a6ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ee:	f003 0302 	and.w	r3, r3, #2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0f0      	beq.n	800a6d8 <HAL_RCC_OscConfig+0x420>
 800a6f6:	e018      	b.n	800a72a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6f8:	4b37      	ldr	r3, [pc, #220]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a6fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6fc:	4a36      	ldr	r2, [pc, #216]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a6fe:	f023 0301 	bic.w	r3, r3, #1
 800a702:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a704:	f7fa f9c6 	bl	8004a94 <HAL_GetTick>
 800a708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a70a:	e008      	b.n	800a71e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a70c:	f7fa f9c2 	bl	8004a94 <HAL_GetTick>
 800a710:	4602      	mov	r2, r0
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	2b02      	cmp	r3, #2
 800a718:	d901      	bls.n	800a71e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e1d5      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a71e:	4b2e      	ldr	r3, [pc, #184]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1f0      	bne.n	800a70c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 0320 	and.w	r3, r3, #32
 800a732:	2b00      	cmp	r3, #0
 800a734:	d036      	beq.n	800a7a4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d019      	beq.n	800a772 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a73e:	4b26      	ldr	r3, [pc, #152]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a25      	ldr	r2, [pc, #148]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a748:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a74a:	f7fa f9a3 	bl	8004a94 <HAL_GetTick>
 800a74e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a750:	e008      	b.n	800a764 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a752:	f7fa f99f 	bl	8004a94 <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d901      	bls.n	800a764 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e1b2      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a764:	4b1c      	ldr	r3, [pc, #112]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0f0      	beq.n	800a752 <HAL_RCC_OscConfig+0x49a>
 800a770:	e018      	b.n	800a7a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a772:	4b19      	ldr	r3, [pc, #100]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a18      	ldr	r2, [pc, #96]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a77c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a77e:	f7fa f989 	bl	8004a94 <HAL_GetTick>
 800a782:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a784:	e008      	b.n	800a798 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a786:	f7fa f985 	bl	8004a94 <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	2b02      	cmp	r3, #2
 800a792:	d901      	bls.n	800a798 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	e198      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a798:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <HAL_RCC_OscConfig+0x520>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1f0      	bne.n	800a786 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0304 	and.w	r3, r3, #4
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 8085 	beq.w	800a8bc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <HAL_RCC_OscConfig+0x524>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a09      	ldr	r2, [pc, #36]	; (800a7dc <HAL_RCC_OscConfig+0x524>)
 800a7b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7be:	f7fa f969 	bl	8004a94 <HAL_GetTick>
 800a7c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7c4:	e00c      	b.n	800a7e0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a7c6:	f7fa f965 	bl	8004a94 <HAL_GetTick>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	2b64      	cmp	r3, #100	; 0x64
 800a7d2:	d905      	bls.n	800a7e0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	e178      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
 800a7d8:	58024400 	.word	0x58024400
 800a7dc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7e0:	4b96      	ldr	r3, [pc, #600]	; (800aa3c <HAL_RCC_OscConfig+0x784>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d0ec      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d106      	bne.n	800a802 <HAL_RCC_OscConfig+0x54a>
 800a7f4:	4b92      	ldr	r3, [pc, #584]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f8:	4a91      	ldr	r2, [pc, #580]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a7fa:	f043 0301 	orr.w	r3, r3, #1
 800a7fe:	6713      	str	r3, [r2, #112]	; 0x70
 800a800:	e02d      	b.n	800a85e <HAL_RCC_OscConfig+0x5a6>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10c      	bne.n	800a824 <HAL_RCC_OscConfig+0x56c>
 800a80a:	4b8d      	ldr	r3, [pc, #564]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80e:	4a8c      	ldr	r2, [pc, #560]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a810:	f023 0301 	bic.w	r3, r3, #1
 800a814:	6713      	str	r3, [r2, #112]	; 0x70
 800a816:	4b8a      	ldr	r3, [pc, #552]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81a:	4a89      	ldr	r2, [pc, #548]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a81c:	f023 0304 	bic.w	r3, r3, #4
 800a820:	6713      	str	r3, [r2, #112]	; 0x70
 800a822:	e01c      	b.n	800a85e <HAL_RCC_OscConfig+0x5a6>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	2b05      	cmp	r3, #5
 800a82a:	d10c      	bne.n	800a846 <HAL_RCC_OscConfig+0x58e>
 800a82c:	4b84      	ldr	r3, [pc, #528]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a830:	4a83      	ldr	r2, [pc, #524]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a832:	f043 0304 	orr.w	r3, r3, #4
 800a836:	6713      	str	r3, [r2, #112]	; 0x70
 800a838:	4b81      	ldr	r3, [pc, #516]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83c:	4a80      	ldr	r2, [pc, #512]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a83e:	f043 0301 	orr.w	r3, r3, #1
 800a842:	6713      	str	r3, [r2, #112]	; 0x70
 800a844:	e00b      	b.n	800a85e <HAL_RCC_OscConfig+0x5a6>
 800a846:	4b7e      	ldr	r3, [pc, #504]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84a:	4a7d      	ldr	r2, [pc, #500]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a84c:	f023 0301 	bic.w	r3, r3, #1
 800a850:	6713      	str	r3, [r2, #112]	; 0x70
 800a852:	4b7b      	ldr	r3, [pc, #492]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a856:	4a7a      	ldr	r2, [pc, #488]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a858:	f023 0304 	bic.w	r3, r3, #4
 800a85c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d015      	beq.n	800a892 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a866:	f7fa f915 	bl	8004a94 <HAL_GetTick>
 800a86a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a86c:	e00a      	b.n	800a884 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a86e:	f7fa f911 	bl	8004a94 <HAL_GetTick>
 800a872:	4602      	mov	r2, r0
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	f241 3288 	movw	r2, #5000	; 0x1388
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d901      	bls.n	800a884 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e122      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a884:	4b6e      	ldr	r3, [pc, #440]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a888:	f003 0302 	and.w	r3, r3, #2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d0ee      	beq.n	800a86e <HAL_RCC_OscConfig+0x5b6>
 800a890:	e014      	b.n	800a8bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a892:	f7fa f8ff 	bl	8004a94 <HAL_GetTick>
 800a896:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a898:	e00a      	b.n	800a8b0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a89a:	f7fa f8fb 	bl	8004a94 <HAL_GetTick>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d901      	bls.n	800a8b0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e10c      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8b0:	4b63      	ldr	r3, [pc, #396]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b4:	f003 0302 	and.w	r3, r3, #2
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d1ee      	bne.n	800a89a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 8101 	beq.w	800aac8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a8c6:	4b5e      	ldr	r3, [pc, #376]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8ce:	2b18      	cmp	r3, #24
 800a8d0:	f000 80bc 	beq.w	800aa4c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	f040 8095 	bne.w	800aa08 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8de:	4b58      	ldr	r3, [pc, #352]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a57      	ldr	r2, [pc, #348]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a8e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ea:	f7fa f8d3 	bl	8004a94 <HAL_GetTick>
 800a8ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8f0:	e008      	b.n	800a904 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8f2:	f7fa f8cf 	bl	8004a94 <HAL_GetTick>
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	2b02      	cmp	r3, #2
 800a8fe:	d901      	bls.n	800a904 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e0e2      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a904:	4b4e      	ldr	r3, [pc, #312]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1f0      	bne.n	800a8f2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a910:	4b4b      	ldr	r3, [pc, #300]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a914:	4b4b      	ldr	r3, [pc, #300]	; (800aa44 <HAL_RCC_OscConfig+0x78c>)
 800a916:	4013      	ands	r3, r2
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a920:	0112      	lsls	r2, r2, #4
 800a922:	430a      	orrs	r2, r1
 800a924:	4946      	ldr	r1, [pc, #280]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a926:	4313      	orrs	r3, r2
 800a928:	628b      	str	r3, [r1, #40]	; 0x28
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	3b01      	subs	r3, #1
 800a930:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a938:	3b01      	subs	r3, #1
 800a93a:	025b      	lsls	r3, r3, #9
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	431a      	orrs	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a944:	3b01      	subs	r3, #1
 800a946:	041b      	lsls	r3, r3, #16
 800a948:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a94c:	431a      	orrs	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a952:	3b01      	subs	r3, #1
 800a954:	061b      	lsls	r3, r3, #24
 800a956:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a95a:	4939      	ldr	r1, [pc, #228]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a95c:	4313      	orrs	r3, r2
 800a95e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a960:	4b37      	ldr	r3, [pc, #220]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	4a36      	ldr	r2, [pc, #216]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a966:	f023 0301 	bic.w	r3, r3, #1
 800a96a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a96c:	4b34      	ldr	r3, [pc, #208]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a96e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a970:	4b35      	ldr	r3, [pc, #212]	; (800aa48 <HAL_RCC_OscConfig+0x790>)
 800a972:	4013      	ands	r3, r2
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a978:	00d2      	lsls	r2, r2, #3
 800a97a:	4931      	ldr	r1, [pc, #196]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a97c:	4313      	orrs	r3, r2
 800a97e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a980:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a984:	f023 020c 	bic.w	r2, r3, #12
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98c:	492c      	ldr	r1, [pc, #176]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a98e:	4313      	orrs	r3, r2
 800a990:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a992:	4b2b      	ldr	r3, [pc, #172]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a996:	f023 0202 	bic.w	r2, r3, #2
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99e:	4928      	ldr	r1, [pc, #160]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a9a4:	4b26      	ldr	r3, [pc, #152]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a8:	4a25      	ldr	r2, [pc, #148]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9b0:	4b23      	ldr	r3, [pc, #140]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b4:	4a22      	ldr	r2, [pc, #136]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a9bc:	4b20      	ldr	r3, [pc, #128]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	4a1f      	ldr	r2, [pc, #124]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a9c8:	4b1d      	ldr	r3, [pc, #116]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9cc:	4a1c      	ldr	r2, [pc, #112]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9ce:	f043 0301 	orr.w	r3, r3, #1
 800a9d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a9d4:	4b1a      	ldr	r3, [pc, #104]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a19      	ldr	r2, [pc, #100]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e0:	f7fa f858 	bl	8004a94 <HAL_GetTick>
 800a9e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9e6:	e008      	b.n	800a9fa <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a9e8:	f7fa f854 	bl	8004a94 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e067      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9fa:	4b11      	ldr	r3, [pc, #68]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0f0      	beq.n	800a9e8 <HAL_RCC_OscConfig+0x730>
 800aa06:	e05f      	b.n	800aac8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa08:	4b0d      	ldr	r3, [pc, #52]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a0c      	ldr	r2, [pc, #48]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800aa0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa14:	f7fa f83e 	bl	8004a94 <HAL_GetTick>
 800aa18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa1a:	e008      	b.n	800aa2e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa1c:	f7fa f83a 	bl	8004a94 <HAL_GetTick>
 800aa20:	4602      	mov	r2, r0
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	1ad3      	subs	r3, r2, r3
 800aa26:	2b02      	cmp	r3, #2
 800aa28:	d901      	bls.n	800aa2e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e04d      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa2e:	4b04      	ldr	r3, [pc, #16]	; (800aa40 <HAL_RCC_OscConfig+0x788>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1f0      	bne.n	800aa1c <HAL_RCC_OscConfig+0x764>
 800aa3a:	e045      	b.n	800aac8 <HAL_RCC_OscConfig+0x810>
 800aa3c:	58024800 	.word	0x58024800
 800aa40:	58024400 	.word	0x58024400
 800aa44:	fffffc0c 	.word	0xfffffc0c
 800aa48:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aa4c:	4b21      	ldr	r3, [pc, #132]	; (800aad4 <HAL_RCC_OscConfig+0x81c>)
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa52:	4b20      	ldr	r3, [pc, #128]	; (800aad4 <HAL_RCC_OscConfig+0x81c>)
 800aa54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa56:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d031      	beq.n	800aac4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	f003 0203 	and.w	r2, r3, #3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d12a      	bne.n	800aac4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	091b      	lsrs	r3, r3, #4
 800aa72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d122      	bne.n	800aac4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa88:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d11a      	bne.n	800aac4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	0a5b      	lsrs	r3, r3, #9
 800aa92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d111      	bne.n	800aac4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	0c1b      	lsrs	r3, r3, #16
 800aaa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d108      	bne.n	800aac4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	0e1b      	lsrs	r3, r3, #24
 800aab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aabe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d001      	beq.n	800aac8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e000      	b.n	800aaca <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3730      	adds	r7, #48	; 0x30
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	58024400 	.word	0x58024400

0800aad8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
 800aaea:	e19c      	b.n	800ae26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aaec:	4b8a      	ldr	r3, [pc, #552]	; (800ad18 <HAL_RCC_ClockConfig+0x240>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	683a      	ldr	r2, [r7, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d910      	bls.n	800ab1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aafa:	4b87      	ldr	r3, [pc, #540]	; (800ad18 <HAL_RCC_ClockConfig+0x240>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f023 020f 	bic.w	r2, r3, #15
 800ab02:	4985      	ldr	r1, [pc, #532]	; (800ad18 <HAL_RCC_ClockConfig+0x240>)
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab0a:	4b83      	ldr	r3, [pc, #524]	; (800ad18 <HAL_RCC_ClockConfig+0x240>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 030f 	and.w	r3, r3, #15
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d001      	beq.n	800ab1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e184      	b.n	800ae26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0304 	and.w	r3, r3, #4
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d010      	beq.n	800ab4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	691a      	ldr	r2, [r3, #16]
 800ab2c:	4b7b      	ldr	r3, [pc, #492]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d908      	bls.n	800ab4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab38:	4b78      	ldr	r3, [pc, #480]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ab3a:	699b      	ldr	r3, [r3, #24]
 800ab3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	4975      	ldr	r1, [pc, #468]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 0308 	and.w	r3, r3, #8
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d010      	beq.n	800ab78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	695a      	ldr	r2, [r3, #20]
 800ab5a:	4b70      	ldr	r3, [pc, #448]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab62:	429a      	cmp	r2, r3
 800ab64:	d908      	bls.n	800ab78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab66:	4b6d      	ldr	r3, [pc, #436]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ab68:	69db      	ldr	r3, [r3, #28]
 800ab6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	496a      	ldr	r1, [pc, #424]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ab74:	4313      	orrs	r3, r2
 800ab76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d010      	beq.n	800aba6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	699a      	ldr	r2, [r3, #24]
 800ab88:	4b64      	ldr	r3, [pc, #400]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ab8a:	69db      	ldr	r3, [r3, #28]
 800ab8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d908      	bls.n	800aba6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab94:	4b61      	ldr	r3, [pc, #388]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	699b      	ldr	r3, [r3, #24]
 800aba0:	495e      	ldr	r1, [pc, #376]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0320 	and.w	r3, r3, #32
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d010      	beq.n	800abd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	69da      	ldr	r2, [r3, #28]
 800abb6:	4b59      	ldr	r3, [pc, #356]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d908      	bls.n	800abd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800abc2:	4b56      	ldr	r3, [pc, #344]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	4953      	ldr	r1, [pc, #332]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800abd0:	4313      	orrs	r3, r2
 800abd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0302 	and.w	r3, r3, #2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d010      	beq.n	800ac02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68da      	ldr	r2, [r3, #12]
 800abe4:	4b4d      	ldr	r3, [pc, #308]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	f003 030f 	and.w	r3, r3, #15
 800abec:	429a      	cmp	r2, r3
 800abee:	d908      	bls.n	800ac02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abf0:	4b4a      	ldr	r3, [pc, #296]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	f023 020f 	bic.w	r2, r3, #15
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	4947      	ldr	r1, [pc, #284]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d055      	beq.n	800acba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ac0e:	4b43      	ldr	r3, [pc, #268]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ac10:	699b      	ldr	r3, [r3, #24]
 800ac12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	4940      	ldr	r1, [pc, #256]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d107      	bne.n	800ac38 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac28:	4b3c      	ldr	r3, [pc, #240]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d121      	bne.n	800ac78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	e0f6      	b.n	800ae26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	2b03      	cmp	r3, #3
 800ac3e:	d107      	bne.n	800ac50 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac40:	4b36      	ldr	r3, [pc, #216]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d115      	bne.n	800ac78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e0ea      	b.n	800ae26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d107      	bne.n	800ac68 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac58:	4b30      	ldr	r3, [pc, #192]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d109      	bne.n	800ac78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e0de      	b.n	800ae26 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac68:	4b2c      	ldr	r3, [pc, #176]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0304 	and.w	r3, r3, #4
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e0d6      	b.n	800ae26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ac78:	4b28      	ldr	r3, [pc, #160]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	f023 0207 	bic.w	r2, r3, #7
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	4925      	ldr	r1, [pc, #148]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac8a:	f7f9 ff03 	bl	8004a94 <HAL_GetTick>
 800ac8e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac90:	e00a      	b.n	800aca8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac92:	f7f9 feff 	bl	8004a94 <HAL_GetTick>
 800ac96:	4602      	mov	r2, r0
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d901      	bls.n	800aca8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e0be      	b.n	800ae26 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aca8:	4b1c      	ldr	r3, [pc, #112]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	00db      	lsls	r3, r3, #3
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d1eb      	bne.n	800ac92 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0302 	and.w	r3, r3, #2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d010      	beq.n	800ace8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68da      	ldr	r2, [r3, #12]
 800acca:	4b14      	ldr	r3, [pc, #80]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	f003 030f 	and.w	r3, r3, #15
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d208      	bcs.n	800ace8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acd6:	4b11      	ldr	r3, [pc, #68]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	f023 020f 	bic.w	r2, r3, #15
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	490e      	ldr	r1, [pc, #56]	; (800ad1c <HAL_RCC_ClockConfig+0x244>)
 800ace4:	4313      	orrs	r3, r2
 800ace6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ace8:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <HAL_RCC_ClockConfig+0x240>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 030f 	and.w	r3, r3, #15
 800acf0:	683a      	ldr	r2, [r7, #0]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d214      	bcs.n	800ad20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acf6:	4b08      	ldr	r3, [pc, #32]	; (800ad18 <HAL_RCC_ClockConfig+0x240>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f023 020f 	bic.w	r2, r3, #15
 800acfe:	4906      	ldr	r1, [pc, #24]	; (800ad18 <HAL_RCC_ClockConfig+0x240>)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad06:	4b04      	ldr	r3, [pc, #16]	; (800ad18 <HAL_RCC_ClockConfig+0x240>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 030f 	and.w	r3, r3, #15
 800ad0e:	683a      	ldr	r2, [r7, #0]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d005      	beq.n	800ad20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e086      	b.n	800ae26 <HAL_RCC_ClockConfig+0x34e>
 800ad18:	52002000 	.word	0x52002000
 800ad1c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0304 	and.w	r3, r3, #4
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d010      	beq.n	800ad4e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	691a      	ldr	r2, [r3, #16]
 800ad30:	4b3f      	ldr	r3, [pc, #252]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d208      	bcs.n	800ad4e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad3c:	4b3c      	ldr	r3, [pc, #240]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	4939      	ldr	r1, [pc, #228]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 0308 	and.w	r3, r3, #8
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d010      	beq.n	800ad7c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	695a      	ldr	r2, [r3, #20]
 800ad5e:	4b34      	ldr	r3, [pc, #208]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d208      	bcs.n	800ad7c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ad6a:	4b31      	ldr	r3, [pc, #196]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ad6c:	69db      	ldr	r3, [r3, #28]
 800ad6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	695b      	ldr	r3, [r3, #20]
 800ad76:	492e      	ldr	r1, [pc, #184]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0310 	and.w	r3, r3, #16
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d010      	beq.n	800adaa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	699a      	ldr	r2, [r3, #24]
 800ad8c:	4b28      	ldr	r3, [pc, #160]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ad8e:	69db      	ldr	r3, [r3, #28]
 800ad90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d208      	bcs.n	800adaa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad98:	4b25      	ldr	r3, [pc, #148]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	4922      	ldr	r1, [pc, #136]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 0320 	and.w	r3, r3, #32
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d010      	beq.n	800add8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	69da      	ldr	r2, [r3, #28]
 800adba:	4b1d      	ldr	r3, [pc, #116]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d208      	bcs.n	800add8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800adc6:	4b1a      	ldr	r3, [pc, #104]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	4917      	ldr	r1, [pc, #92]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800add4:	4313      	orrs	r3, r2
 800add6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800add8:	f000 f834 	bl	800ae44 <HAL_RCC_GetSysClockFreq>
 800addc:	4602      	mov	r2, r0
 800adde:	4b14      	ldr	r3, [pc, #80]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	0a1b      	lsrs	r3, r3, #8
 800ade4:	f003 030f 	and.w	r3, r3, #15
 800ade8:	4912      	ldr	r1, [pc, #72]	; (800ae34 <HAL_RCC_ClockConfig+0x35c>)
 800adea:	5ccb      	ldrb	r3, [r1, r3]
 800adec:	f003 031f 	and.w	r3, r3, #31
 800adf0:	fa22 f303 	lsr.w	r3, r2, r3
 800adf4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800adf6:	4b0e      	ldr	r3, [pc, #56]	; (800ae30 <HAL_RCC_ClockConfig+0x358>)
 800adf8:	699b      	ldr	r3, [r3, #24]
 800adfa:	f003 030f 	and.w	r3, r3, #15
 800adfe:	4a0d      	ldr	r2, [pc, #52]	; (800ae34 <HAL_RCC_ClockConfig+0x35c>)
 800ae00:	5cd3      	ldrb	r3, [r2, r3]
 800ae02:	f003 031f 	and.w	r3, r3, #31
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0c:	4a0a      	ldr	r2, [pc, #40]	; (800ae38 <HAL_RCC_ClockConfig+0x360>)
 800ae0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae10:	4a0a      	ldr	r2, [pc, #40]	; (800ae3c <HAL_RCC_ClockConfig+0x364>)
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ae16:	4b0a      	ldr	r3, [pc, #40]	; (800ae40 <HAL_RCC_ClockConfig+0x368>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7f9 fdf0 	bl	8004a00 <HAL_InitTick>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	58024400 	.word	0x58024400
 800ae34:	080137e4 	.word	0x080137e4
 800ae38:	24000018 	.word	0x24000018
 800ae3c:	24000014 	.word	0x24000014
 800ae40:	2400001c 	.word	0x2400001c

0800ae44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b089      	sub	sp, #36	; 0x24
 800ae48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae4a:	4bb3      	ldr	r3, [pc, #716]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae52:	2b18      	cmp	r3, #24
 800ae54:	f200 8155 	bhi.w	800b102 <HAL_RCC_GetSysClockFreq+0x2be>
 800ae58:	a201      	add	r2, pc, #4	; (adr r2, 800ae60 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ae5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5e:	bf00      	nop
 800ae60:	0800aec5 	.word	0x0800aec5
 800ae64:	0800b103 	.word	0x0800b103
 800ae68:	0800b103 	.word	0x0800b103
 800ae6c:	0800b103 	.word	0x0800b103
 800ae70:	0800b103 	.word	0x0800b103
 800ae74:	0800b103 	.word	0x0800b103
 800ae78:	0800b103 	.word	0x0800b103
 800ae7c:	0800b103 	.word	0x0800b103
 800ae80:	0800aeeb 	.word	0x0800aeeb
 800ae84:	0800b103 	.word	0x0800b103
 800ae88:	0800b103 	.word	0x0800b103
 800ae8c:	0800b103 	.word	0x0800b103
 800ae90:	0800b103 	.word	0x0800b103
 800ae94:	0800b103 	.word	0x0800b103
 800ae98:	0800b103 	.word	0x0800b103
 800ae9c:	0800b103 	.word	0x0800b103
 800aea0:	0800aef1 	.word	0x0800aef1
 800aea4:	0800b103 	.word	0x0800b103
 800aea8:	0800b103 	.word	0x0800b103
 800aeac:	0800b103 	.word	0x0800b103
 800aeb0:	0800b103 	.word	0x0800b103
 800aeb4:	0800b103 	.word	0x0800b103
 800aeb8:	0800b103 	.word	0x0800b103
 800aebc:	0800b103 	.word	0x0800b103
 800aec0:	0800aef7 	.word	0x0800aef7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aec4:	4b94      	ldr	r3, [pc, #592]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0320 	and.w	r3, r3, #32
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d009      	beq.n	800aee4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aed0:	4b91      	ldr	r3, [pc, #580]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	08db      	lsrs	r3, r3, #3
 800aed6:	f003 0303 	and.w	r3, r3, #3
 800aeda:	4a90      	ldr	r2, [pc, #576]	; (800b11c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aedc:	fa22 f303 	lsr.w	r3, r2, r3
 800aee0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800aee2:	e111      	b.n	800b108 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800aee4:	4b8d      	ldr	r3, [pc, #564]	; (800b11c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aee6:	61bb      	str	r3, [r7, #24]
    break;
 800aee8:	e10e      	b.n	800b108 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800aeea:	4b8d      	ldr	r3, [pc, #564]	; (800b120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aeec:	61bb      	str	r3, [r7, #24]
    break;
 800aeee:	e10b      	b.n	800b108 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800aef0:	4b8c      	ldr	r3, [pc, #560]	; (800b124 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800aef2:	61bb      	str	r3, [r7, #24]
    break;
 800aef4:	e108      	b.n	800b108 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aef6:	4b88      	ldr	r3, [pc, #544]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefa:	f003 0303 	and.w	r3, r3, #3
 800aefe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800af00:	4b85      	ldr	r3, [pc, #532]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af04:	091b      	lsrs	r3, r3, #4
 800af06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800af0c:	4b82      	ldr	r3, [pc, #520]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af10:	f003 0301 	and.w	r3, r3, #1
 800af14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af16:	4b80      	ldr	r3, [pc, #512]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af1a:	08db      	lsrs	r3, r3, #3
 800af1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	fb02 f303 	mul.w	r3, r2, r3
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f000 80e1 	beq.w	800b0fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	f000 8083 	beq.w	800b048 <HAL_RCC_GetSysClockFreq+0x204>
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b02      	cmp	r3, #2
 800af46:	f200 80a1 	bhi.w	800b08c <HAL_RCC_GetSysClockFreq+0x248>
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d003      	beq.n	800af58 <HAL_RCC_GetSysClockFreq+0x114>
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d056      	beq.n	800b004 <HAL_RCC_GetSysClockFreq+0x1c0>
 800af56:	e099      	b.n	800b08c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af58:	4b6f      	ldr	r3, [pc, #444]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 0320 	and.w	r3, r3, #32
 800af60:	2b00      	cmp	r3, #0
 800af62:	d02d      	beq.n	800afc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af64:	4b6c      	ldr	r3, [pc, #432]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	08db      	lsrs	r3, r3, #3
 800af6a:	f003 0303 	and.w	r3, r3, #3
 800af6e:	4a6b      	ldr	r2, [pc, #428]	; (800b11c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af70:	fa22 f303 	lsr.w	r3, r2, r3
 800af74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af8e:	4b62      	ldr	r3, [pc, #392]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800afa2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800afbe:	e087      	b.n	800b0d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b12c <HAL_RCC_GetSysClockFreq+0x2e8>
 800afce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd2:	4b51      	ldr	r3, [pc, #324]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe2:	ed97 6a02 	vldr	s12, [r7, #8]
 800afe6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b002:	e065      	b.n	800b0d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	ee07 3a90 	vmov	s15, r3
 800b00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b130 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b016:	4b40      	ldr	r3, [pc, #256]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b026:	ed97 6a02 	vldr	s12, [r7, #8]
 800b02a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b046:	e043      	b.n	800b0d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b052:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b134 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05a:	4b2f      	ldr	r3, [pc, #188]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b062:	ee07 3a90 	vmov	s15, r3
 800b066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b06e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b08a:	e021      	b.n	800b0d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b096:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b130 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09e:	4b1e      	ldr	r3, [pc, #120]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b128 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b0d0:	4b11      	ldr	r3, [pc, #68]	; (800b118 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d4:	0a5b      	lsrs	r3, r3, #9
 800b0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0da:	3301      	adds	r3, #1
 800b0dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	ee07 3a90 	vmov	s15, r3
 800b0e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b0e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f4:	ee17 3a90 	vmov	r3, s15
 800b0f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b0fa:	e005      	b.n	800b108 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	61bb      	str	r3, [r7, #24]
    break;
 800b100:	e002      	b.n	800b108 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b102:	4b07      	ldr	r3, [pc, #28]	; (800b120 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b104:	61bb      	str	r3, [r7, #24]
    break;
 800b106:	bf00      	nop
  }

  return sysclockfreq;
 800b108:	69bb      	ldr	r3, [r7, #24]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3724      	adds	r7, #36	; 0x24
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	58024400 	.word	0x58024400
 800b11c:	03d09000 	.word	0x03d09000
 800b120:	003d0900 	.word	0x003d0900
 800b124:	017d7840 	.word	0x017d7840
 800b128:	46000000 	.word	0x46000000
 800b12c:	4c742400 	.word	0x4c742400
 800b130:	4a742400 	.word	0x4a742400
 800b134:	4bbebc20 	.word	0x4bbebc20

0800b138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b13e:	f7ff fe81 	bl	800ae44 <HAL_RCC_GetSysClockFreq>
 800b142:	4602      	mov	r2, r0
 800b144:	4b10      	ldr	r3, [pc, #64]	; (800b188 <HAL_RCC_GetHCLKFreq+0x50>)
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	0a1b      	lsrs	r3, r3, #8
 800b14a:	f003 030f 	and.w	r3, r3, #15
 800b14e:	490f      	ldr	r1, [pc, #60]	; (800b18c <HAL_RCC_GetHCLKFreq+0x54>)
 800b150:	5ccb      	ldrb	r3, [r1, r3]
 800b152:	f003 031f 	and.w	r3, r3, #31
 800b156:	fa22 f303 	lsr.w	r3, r2, r3
 800b15a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b15c:	4b0a      	ldr	r3, [pc, #40]	; (800b188 <HAL_RCC_GetHCLKFreq+0x50>)
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	f003 030f 	and.w	r3, r3, #15
 800b164:	4a09      	ldr	r2, [pc, #36]	; (800b18c <HAL_RCC_GetHCLKFreq+0x54>)
 800b166:	5cd3      	ldrb	r3, [r2, r3]
 800b168:	f003 031f 	and.w	r3, r3, #31
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	fa22 f303 	lsr.w	r3, r2, r3
 800b172:	4a07      	ldr	r2, [pc, #28]	; (800b190 <HAL_RCC_GetHCLKFreq+0x58>)
 800b174:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b176:	4a07      	ldr	r2, [pc, #28]	; (800b194 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b17c:	4b04      	ldr	r3, [pc, #16]	; (800b190 <HAL_RCC_GetHCLKFreq+0x58>)
 800b17e:	681b      	ldr	r3, [r3, #0]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3708      	adds	r7, #8
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	58024400 	.word	0x58024400
 800b18c:	080137e4 	.word	0x080137e4
 800b190:	24000018 	.word	0x24000018
 800b194:	24000014 	.word	0x24000014

0800b198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b19c:	f7ff ffcc 	bl	800b138 <HAL_RCC_GetHCLKFreq>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	091b      	lsrs	r3, r3, #4
 800b1a8:	f003 0307 	and.w	r3, r3, #7
 800b1ac:	4904      	ldr	r1, [pc, #16]	; (800b1c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b1ae:	5ccb      	ldrb	r3, [r1, r3]
 800b1b0:	f003 031f 	and.w	r3, r3, #31
 800b1b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	58024400 	.word	0x58024400
 800b1c0:	080137e4 	.word	0x080137e4

0800b1c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b1c8:	f7ff ffb6 	bl	800b138 <HAL_RCC_GetHCLKFreq>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	4b06      	ldr	r3, [pc, #24]	; (800b1e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	f003 0307 	and.w	r3, r3, #7
 800b1d8:	4904      	ldr	r1, [pc, #16]	; (800b1ec <HAL_RCC_GetPCLK2Freq+0x28>)
 800b1da:	5ccb      	ldrb	r3, [r1, r3]
 800b1dc:	f003 031f 	and.w	r3, r3, #31
 800b1e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	58024400 	.word	0x58024400
 800b1ec:	080137e4 	.word	0x080137e4

0800b1f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d03f      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b214:	d02a      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b216:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b21a:	d824      	bhi.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b21c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b220:	d018      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b226:	d81e      	bhi.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d003      	beq.n	800b234 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b22c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b230:	d007      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b232:	e018      	b.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b234:	4bab      	ldr	r3, [pc, #684]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b238:	4aaa      	ldr	r2, [pc, #680]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b23a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b23e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b240:	e015      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	3304      	adds	r3, #4
 800b246:	2102      	movs	r1, #2
 800b248:	4618      	mov	r0, r3
 800b24a:	f001 f9cf 	bl	800c5ec <RCCEx_PLL2_Config>
 800b24e:	4603      	mov	r3, r0
 800b250:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b252:	e00c      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3324      	adds	r3, #36	; 0x24
 800b258:	2102      	movs	r1, #2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f001 fa78 	bl	800c750 <RCCEx_PLL3_Config>
 800b260:	4603      	mov	r3, r0
 800b262:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b264:	e003      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	75fb      	strb	r3, [r7, #23]
      break;
 800b26a:	e000      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b26c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d109      	bne.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b274:	4b9b      	ldr	r3, [pc, #620]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b280:	4998      	ldr	r1, [pc, #608]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b282:	4313      	orrs	r3, r2
 800b284:	650b      	str	r3, [r1, #80]	; 0x50
 800b286:	e001      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
 800b28a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b294:	2b00      	cmp	r3, #0
 800b296:	d03d      	beq.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29c:	2b04      	cmp	r3, #4
 800b29e:	d826      	bhi.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b2a0:	a201      	add	r2, pc, #4	; (adr r2, 800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a6:	bf00      	nop
 800b2a8:	0800b2bd 	.word	0x0800b2bd
 800b2ac:	0800b2cb 	.word	0x0800b2cb
 800b2b0:	0800b2dd 	.word	0x0800b2dd
 800b2b4:	0800b2f5 	.word	0x0800b2f5
 800b2b8:	0800b2f5 	.word	0x0800b2f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2bc:	4b89      	ldr	r3, [pc, #548]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	4a88      	ldr	r2, [pc, #544]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b2c8:	e015      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f001 f98b 	bl	800c5ec <RCCEx_PLL2_Config>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b2da:	e00c      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3324      	adds	r3, #36	; 0x24
 800b2e0:	2100      	movs	r1, #0
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f001 fa34 	bl	800c750 <RCCEx_PLL3_Config>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b2ec:	e003      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f2:	e000      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b2f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d109      	bne.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b2fc:	4b79      	ldr	r3, [pc, #484]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b300:	f023 0207 	bic.w	r2, r3, #7
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b308:	4976      	ldr	r1, [pc, #472]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b30a:	4313      	orrs	r3, r2
 800b30c:	650b      	str	r3, [r1, #80]	; 0x50
 800b30e:	e001      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b310:	7dfb      	ldrb	r3, [r7, #23]
 800b312:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d042      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b328:	d02b      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b32a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b32e:	d825      	bhi.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b330:	2bc0      	cmp	r3, #192	; 0xc0
 800b332:	d028      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b334:	2bc0      	cmp	r3, #192	; 0xc0
 800b336:	d821      	bhi.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b338:	2b80      	cmp	r3, #128	; 0x80
 800b33a:	d016      	beq.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b33c:	2b80      	cmp	r3, #128	; 0x80
 800b33e:	d81d      	bhi.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b344:	2b40      	cmp	r3, #64	; 0x40
 800b346:	d007      	beq.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b348:	e018      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b34a:	4b66      	ldr	r3, [pc, #408]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34e:	4a65      	ldr	r2, [pc, #404]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b354:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b356:	e017      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	3304      	adds	r3, #4
 800b35c:	2100      	movs	r1, #0
 800b35e:	4618      	mov	r0, r3
 800b360:	f001 f944 	bl	800c5ec <RCCEx_PLL2_Config>
 800b364:	4603      	mov	r3, r0
 800b366:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b368:	e00e      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	3324      	adds	r3, #36	; 0x24
 800b36e:	2100      	movs	r1, #0
 800b370:	4618      	mov	r0, r3
 800b372:	f001 f9ed 	bl	800c750 <RCCEx_PLL3_Config>
 800b376:	4603      	mov	r3, r0
 800b378:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b37a:	e005      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	75fb      	strb	r3, [r7, #23]
      break;
 800b380:	e002      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b382:	bf00      	nop
 800b384:	e000      	b.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b386:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b388:	7dfb      	ldrb	r3, [r7, #23]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d109      	bne.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b38e:	4b55      	ldr	r3, [pc, #340]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b392:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b39a:	4952      	ldr	r1, [pc, #328]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	650b      	str	r3, [r1, #80]	; 0x50
 800b3a0:	e001      	b.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3a2:	7dfb      	ldrb	r3, [r7, #23]
 800b3a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d049      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b3b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3bc:	d030      	beq.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b3be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3c2:	d82a      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b3c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b3c8:	d02c      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b3ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b3ce:	d824      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b3d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3d4:	d018      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b3d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3da:	d81e      	bhi.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d003      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b3e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3e4:	d007      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b3e6:	e018      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3e8:	4b3e      	ldr	r3, [pc, #248]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ec:	4a3d      	ldr	r2, [pc, #244]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b3f4:	e017      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3304      	adds	r3, #4
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f001 f8f5 	bl	800c5ec <RCCEx_PLL2_Config>
 800b402:	4603      	mov	r3, r0
 800b404:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b406:	e00e      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3324      	adds	r3, #36	; 0x24
 800b40c:	2100      	movs	r1, #0
 800b40e:	4618      	mov	r0, r3
 800b410:	f001 f99e 	bl	800c750 <RCCEx_PLL3_Config>
 800b414:	4603      	mov	r3, r0
 800b416:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b418:	e005      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	75fb      	strb	r3, [r7, #23]
      break;
 800b41e:	e002      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b420:	bf00      	nop
 800b422:	e000      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b424:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b426:	7dfb      	ldrb	r3, [r7, #23]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10a      	bne.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b42c:	4b2d      	ldr	r3, [pc, #180]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b430:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b43a:	492a      	ldr	r1, [pc, #168]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b43c:	4313      	orrs	r3, r2
 800b43e:	658b      	str	r3, [r1, #88]	; 0x58
 800b440:	e001      	b.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d04c      	beq.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b45c:	d030      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b45e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b462:	d82a      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b464:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b468:	d02c      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b46a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b46e:	d824      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b474:	d018      	beq.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b47a:	d81e      	bhi.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d003      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b484:	d007      	beq.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b486:	e018      	b.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b488:	4b16      	ldr	r3, [pc, #88]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48c:	4a15      	ldr	r2, [pc, #84]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b48e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b494:	e017      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	3304      	adds	r3, #4
 800b49a:	2100      	movs	r1, #0
 800b49c:	4618      	mov	r0, r3
 800b49e:	f001 f8a5 	bl	800c5ec <RCCEx_PLL2_Config>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b4a6:	e00e      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3324      	adds	r3, #36	; 0x24
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f001 f94e 	bl	800c750 <RCCEx_PLL3_Config>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b4b8:	e005      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b4be:	e002      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b4c0:	bf00      	nop
 800b4c2:	e000      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b4c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4c6:	7dfb      	ldrb	r3, [r7, #23]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10d      	bne.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b4cc:	4b05      	ldr	r3, [pc, #20]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b4da:	4902      	ldr	r1, [pc, #8]	; (800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	658b      	str	r3, [r1, #88]	; 0x58
 800b4e0:	e004      	b.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b4e2:	bf00      	nop
 800b4e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d032      	beq.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4fc:	2b30      	cmp	r3, #48	; 0x30
 800b4fe:	d01c      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b500:	2b30      	cmp	r3, #48	; 0x30
 800b502:	d817      	bhi.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b504:	2b20      	cmp	r3, #32
 800b506:	d00c      	beq.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b508:	2b20      	cmp	r3, #32
 800b50a:	d813      	bhi.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d016      	beq.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b510:	2b10      	cmp	r3, #16
 800b512:	d10f      	bne.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b514:	4baf      	ldr	r3, [pc, #700]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4aae      	ldr	r2, [pc, #696]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b51a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b51e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b520:	e00e      	b.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3304      	adds	r3, #4
 800b526:	2102      	movs	r1, #2
 800b528:	4618      	mov	r0, r3
 800b52a:	f001 f85f 	bl	800c5ec <RCCEx_PLL2_Config>
 800b52e:	4603      	mov	r3, r0
 800b530:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b532:	e005      	b.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	75fb      	strb	r3, [r7, #23]
      break;
 800b538:	e002      	b.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b53a:	bf00      	nop
 800b53c:	e000      	b.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b53e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d109      	bne.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b546:	4ba3      	ldr	r3, [pc, #652]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b54a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b552:	49a0      	ldr	r1, [pc, #640]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b554:	4313      	orrs	r3, r2
 800b556:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b558:	e001      	b.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d047      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b56e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b572:	d030      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b578:	d82a      	bhi.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b57a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b57e:	d02c      	beq.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b580:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b584:	d824      	bhi.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b58a:	d018      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b58c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b590:	d81e      	bhi.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b59a:	d007      	beq.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b59c:	e018      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b59e:	4b8d      	ldr	r3, [pc, #564]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a2:	4a8c      	ldr	r2, [pc, #560]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b5a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b5aa:	e017      	b.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3304      	adds	r3, #4
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f001 f81a 	bl	800c5ec <RCCEx_PLL2_Config>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b5bc:	e00e      	b.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	3324      	adds	r3, #36	; 0x24
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f001 f8c3 	bl	800c750 <RCCEx_PLL3_Config>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b5ce:	e005      	b.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b5d4:	e002      	b.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b5d6:	bf00      	nop
 800b5d8:	e000      	b.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b5da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d109      	bne.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b5e2:	4b7c      	ldr	r3, [pc, #496]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5ee:	4979      	ldr	r1, [pc, #484]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	650b      	str	r3, [r1, #80]	; 0x50
 800b5f4:	e001      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f6:	7dfb      	ldrb	r3, [r7, #23]
 800b5f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d049      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b60a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b60e:	d02e      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b614:	d828      	bhi.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b61a:	d02a      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b61c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b620:	d822      	bhi.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b622:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b626:	d026      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b628:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b62c:	d81c      	bhi.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b62e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b632:	d010      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b638:	d816      	bhi.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d01d      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b63e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b642:	d111      	bne.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3304      	adds	r3, #4
 800b648:	2101      	movs	r1, #1
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 ffce 	bl	800c5ec <RCCEx_PLL2_Config>
 800b650:	4603      	mov	r3, r0
 800b652:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b654:	e012      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	3324      	adds	r3, #36	; 0x24
 800b65a:	2101      	movs	r1, #1
 800b65c:	4618      	mov	r0, r3
 800b65e:	f001 f877 	bl	800c750 <RCCEx_PLL3_Config>
 800b662:	4603      	mov	r3, r0
 800b664:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b666:	e009      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	75fb      	strb	r3, [r7, #23]
      break;
 800b66c:	e006      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b66e:	bf00      	nop
 800b670:	e004      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b672:	bf00      	nop
 800b674:	e002      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b676:	bf00      	nop
 800b678:	e000      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b67a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b682:	4b54      	ldr	r3, [pc, #336]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b686:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b68e:	4951      	ldr	r1, [pc, #324]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b690:	4313      	orrs	r3, r2
 800b692:	650b      	str	r3, [r1, #80]	; 0x50
 800b694:	e001      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d04b      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b6ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b0:	d02e      	beq.n	800b710 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b6b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b6:	d828      	bhi.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6bc:	d02a      	beq.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c2:	d822      	bhi.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b6c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6c8:	d026      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b6ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6ce:	d81c      	bhi.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b6d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6d4:	d010      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b6d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6da:	d816      	bhi.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d01d      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b6e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6e4:	d111      	bne.n	800b70a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	2101      	movs	r1, #1
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 ff7d 	bl	800c5ec <RCCEx_PLL2_Config>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b6f6:	e012      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	3324      	adds	r3, #36	; 0x24
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	4618      	mov	r0, r3
 800b700:	f001 f826 	bl	800c750 <RCCEx_PLL3_Config>
 800b704:	4603      	mov	r3, r0
 800b706:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b708:	e009      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	75fb      	strb	r3, [r7, #23]
      break;
 800b70e:	e006      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b710:	bf00      	nop
 800b712:	e004      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b714:	bf00      	nop
 800b716:	e002      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b718:	bf00      	nop
 800b71a:	e000      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b71c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10a      	bne.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b724:	4b2b      	ldr	r3, [pc, #172]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b728:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b732:	4928      	ldr	r1, [pc, #160]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b734:	4313      	orrs	r3, r2
 800b736:	658b      	str	r3, [r1, #88]	; 0x58
 800b738:	e001      	b.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
 800b73c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b746:	2b00      	cmp	r3, #0
 800b748:	d02f      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b74e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b752:	d00e      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b758:	d814      	bhi.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d015      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b75e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b762:	d10f      	bne.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b764:	4b1b      	ldr	r3, [pc, #108]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	4a1a      	ldr	r2, [pc, #104]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b76a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b76e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b770:	e00c      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	3304      	adds	r3, #4
 800b776:	2101      	movs	r1, #1
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 ff37 	bl	800c5ec <RCCEx_PLL2_Config>
 800b77e:	4603      	mov	r3, r0
 800b780:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b782:	e003      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b784:	2301      	movs	r3, #1
 800b786:	75fb      	strb	r3, [r7, #23]
      break;
 800b788:	e000      	b.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b78a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d109      	bne.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b792:	4b10      	ldr	r3, [pc, #64]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b796:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b79e:	490d      	ldr	r1, [pc, #52]	; (800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	650b      	str	r3, [r1, #80]	; 0x50
 800b7a4:	e001      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a6:	7dfb      	ldrb	r3, [r7, #23]
 800b7a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d033      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d81c      	bhi.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b7be:	a201      	add	r2, pc, #4	; (adr r2, 800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c4:	0800b7ff 	.word	0x0800b7ff
 800b7c8:	0800b7d9 	.word	0x0800b7d9
 800b7cc:	0800b7e7 	.word	0x0800b7e7
 800b7d0:	0800b7ff 	.word	0x0800b7ff
 800b7d4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d8:	4bb8      	ldr	r3, [pc, #736]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	4ab7      	ldr	r2, [pc, #732]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b7e4:	e00c      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	2102      	movs	r1, #2
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 fefd 	bl	800c5ec <RCCEx_PLL2_Config>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b7f6:	e003      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b7fc:	e000      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b7fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b800:	7dfb      	ldrb	r3, [r7, #23]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d109      	bne.n	800b81a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b806:	4bad      	ldr	r3, [pc, #692]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b80a:	f023 0203 	bic.w	r2, r3, #3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b812:	49aa      	ldr	r1, [pc, #680]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b814:	4313      	orrs	r3, r2
 800b816:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b818:	e001      	b.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 8086 	beq.w	800b938 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b82c:	4ba4      	ldr	r3, [pc, #656]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4aa3      	ldr	r2, [pc, #652]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b836:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b838:	f7f9 f92c 	bl	8004a94 <HAL_GetTick>
 800b83c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b83e:	e009      	b.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b840:	f7f9 f928 	bl	8004a94 <HAL_GetTick>
 800b844:	4602      	mov	r2, r0
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	2b64      	cmp	r3, #100	; 0x64
 800b84c:	d902      	bls.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b84e:	2303      	movs	r3, #3
 800b850:	75fb      	strb	r3, [r7, #23]
        break;
 800b852:	e005      	b.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b854:	4b9a      	ldr	r3, [pc, #616]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d0ef      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b860:	7dfb      	ldrb	r3, [r7, #23]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d166      	bne.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b866:	4b95      	ldr	r3, [pc, #596]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b870:	4053      	eors	r3, r2
 800b872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b876:	2b00      	cmp	r3, #0
 800b878:	d013      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b87a:	4b90      	ldr	r3, [pc, #576]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b87e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b882:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b884:	4b8d      	ldr	r3, [pc, #564]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b888:	4a8c      	ldr	r2, [pc, #560]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b88a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b88e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b890:	4b8a      	ldr	r3, [pc, #552]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b894:	4a89      	ldr	r2, [pc, #548]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b89a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b89c:	4a87      	ldr	r2, [pc, #540]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ac:	d115      	bne.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8ae:	f7f9 f8f1 	bl	8004a94 <HAL_GetTick>
 800b8b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8b4:	e00b      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8b6:	f7f9 f8ed 	bl	8004a94 <HAL_GetTick>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d902      	bls.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	75fb      	strb	r3, [r7, #23]
            break;
 800b8cc:	e005      	b.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8ce:	4b7b      	ldr	r3, [pc, #492]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d2:	f003 0302 	and.w	r3, r3, #2
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d0ed      	beq.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d126      	bne.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8ee:	d10d      	bne.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b8f0:	4b72      	ldr	r3, [pc, #456]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8fe:	0919      	lsrs	r1, r3, #4
 800b900:	4b70      	ldr	r3, [pc, #448]	; (800bac4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b902:	400b      	ands	r3, r1
 800b904:	496d      	ldr	r1, [pc, #436]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b906:	4313      	orrs	r3, r2
 800b908:	610b      	str	r3, [r1, #16]
 800b90a:	e005      	b.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b90c:	4b6b      	ldr	r3, [pc, #428]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	4a6a      	ldr	r2, [pc, #424]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b912:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b916:	6113      	str	r3, [r2, #16]
 800b918:	4b68      	ldr	r3, [pc, #416]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b91a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b926:	4965      	ldr	r1, [pc, #404]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b928:	4313      	orrs	r3, r2
 800b92a:	670b      	str	r3, [r1, #112]	; 0x70
 800b92c:	e004      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	75bb      	strb	r3, [r7, #22]
 800b932:	e001      	b.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b934:	7dfb      	ldrb	r3, [r7, #23]
 800b936:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 0301 	and.w	r3, r3, #1
 800b940:	2b00      	cmp	r3, #0
 800b942:	d07e      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b948:	2b28      	cmp	r3, #40	; 0x28
 800b94a:	d867      	bhi.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b94c:	a201      	add	r2, pc, #4	; (adr r2, 800b954 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b952:	bf00      	nop
 800b954:	0800ba23 	.word	0x0800ba23
 800b958:	0800ba1d 	.word	0x0800ba1d
 800b95c:	0800ba1d 	.word	0x0800ba1d
 800b960:	0800ba1d 	.word	0x0800ba1d
 800b964:	0800ba1d 	.word	0x0800ba1d
 800b968:	0800ba1d 	.word	0x0800ba1d
 800b96c:	0800ba1d 	.word	0x0800ba1d
 800b970:	0800ba1d 	.word	0x0800ba1d
 800b974:	0800b9f9 	.word	0x0800b9f9
 800b978:	0800ba1d 	.word	0x0800ba1d
 800b97c:	0800ba1d 	.word	0x0800ba1d
 800b980:	0800ba1d 	.word	0x0800ba1d
 800b984:	0800ba1d 	.word	0x0800ba1d
 800b988:	0800ba1d 	.word	0x0800ba1d
 800b98c:	0800ba1d 	.word	0x0800ba1d
 800b990:	0800ba1d 	.word	0x0800ba1d
 800b994:	0800ba0b 	.word	0x0800ba0b
 800b998:	0800ba1d 	.word	0x0800ba1d
 800b99c:	0800ba1d 	.word	0x0800ba1d
 800b9a0:	0800ba1d 	.word	0x0800ba1d
 800b9a4:	0800ba1d 	.word	0x0800ba1d
 800b9a8:	0800ba1d 	.word	0x0800ba1d
 800b9ac:	0800ba1d 	.word	0x0800ba1d
 800b9b0:	0800ba1d 	.word	0x0800ba1d
 800b9b4:	0800ba23 	.word	0x0800ba23
 800b9b8:	0800ba1d 	.word	0x0800ba1d
 800b9bc:	0800ba1d 	.word	0x0800ba1d
 800b9c0:	0800ba1d 	.word	0x0800ba1d
 800b9c4:	0800ba1d 	.word	0x0800ba1d
 800b9c8:	0800ba1d 	.word	0x0800ba1d
 800b9cc:	0800ba1d 	.word	0x0800ba1d
 800b9d0:	0800ba1d 	.word	0x0800ba1d
 800b9d4:	0800ba23 	.word	0x0800ba23
 800b9d8:	0800ba1d 	.word	0x0800ba1d
 800b9dc:	0800ba1d 	.word	0x0800ba1d
 800b9e0:	0800ba1d 	.word	0x0800ba1d
 800b9e4:	0800ba1d 	.word	0x0800ba1d
 800b9e8:	0800ba1d 	.word	0x0800ba1d
 800b9ec:	0800ba1d 	.word	0x0800ba1d
 800b9f0:	0800ba1d 	.word	0x0800ba1d
 800b9f4:	0800ba23 	.word	0x0800ba23
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f000 fdf4 	bl	800c5ec <RCCEx_PLL2_Config>
 800ba04:	4603      	mov	r3, r0
 800ba06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ba08:	e00c      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	3324      	adds	r3, #36	; 0x24
 800ba0e:	2101      	movs	r1, #1
 800ba10:	4618      	mov	r0, r3
 800ba12:	f000 fe9d 	bl	800c750 <RCCEx_PLL3_Config>
 800ba16:	4603      	mov	r3, r0
 800ba18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ba1a:	e003      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba20:	e000      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800ba22:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba24:	7dfb      	ldrb	r3, [r7, #23]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d109      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba2a:	4b24      	ldr	r3, [pc, #144]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba36:	4921      	ldr	r1, [pc, #132]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	654b      	str	r3, [r1, #84]	; 0x54
 800ba3c:	e001      	b.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d03e      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba52:	2b05      	cmp	r3, #5
 800ba54:	d820      	bhi.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800ba56:	a201      	add	r2, pc, #4	; (adr r2, 800ba5c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800ba58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba5c:	0800ba9f 	.word	0x0800ba9f
 800ba60:	0800ba75 	.word	0x0800ba75
 800ba64:	0800ba87 	.word	0x0800ba87
 800ba68:	0800ba9f 	.word	0x0800ba9f
 800ba6c:	0800ba9f 	.word	0x0800ba9f
 800ba70:	0800ba9f 	.word	0x0800ba9f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	3304      	adds	r3, #4
 800ba78:	2101      	movs	r1, #1
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 fdb6 	bl	800c5ec <RCCEx_PLL2_Config>
 800ba80:	4603      	mov	r3, r0
 800ba82:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ba84:	e00c      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	3324      	adds	r3, #36	; 0x24
 800ba8a:	2101      	movs	r1, #1
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f000 fe5f 	bl	800c750 <RCCEx_PLL3_Config>
 800ba92:	4603      	mov	r3, r0
 800ba94:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ba96:	e003      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ba9c:	e000      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800ba9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baa0:	7dfb      	ldrb	r3, [r7, #23]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d110      	bne.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800baa6:	4b05      	ldr	r3, [pc, #20]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800baa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baaa:	f023 0207 	bic.w	r2, r3, #7
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bab2:	4902      	ldr	r1, [pc, #8]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bab4:	4313      	orrs	r3, r2
 800bab6:	654b      	str	r3, [r1, #84]	; 0x54
 800bab8:	e008      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800baba:	bf00      	nop
 800babc:	58024400 	.word	0x58024400
 800bac0:	58024800 	.word	0x58024800
 800bac4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac8:	7dfb      	ldrb	r3, [r7, #23]
 800baca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0304 	and.w	r3, r3, #4
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d039      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bade:	2b05      	cmp	r3, #5
 800bae0:	d820      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800bae2:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800bae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae8:	0800bb2b 	.word	0x0800bb2b
 800baec:	0800bb01 	.word	0x0800bb01
 800baf0:	0800bb13 	.word	0x0800bb13
 800baf4:	0800bb2b 	.word	0x0800bb2b
 800baf8:	0800bb2b 	.word	0x0800bb2b
 800bafc:	0800bb2b 	.word	0x0800bb2b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3304      	adds	r3, #4
 800bb04:	2101      	movs	r1, #1
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 fd70 	bl	800c5ec <RCCEx_PLL2_Config>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bb10:	e00c      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	3324      	adds	r3, #36	; 0x24
 800bb16:	2101      	movs	r1, #1
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f000 fe19 	bl	800c750 <RCCEx_PLL3_Config>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bb22:	e003      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	75fb      	strb	r3, [r7, #23]
      break;
 800bb28:	e000      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800bb2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb2c:	7dfb      	ldrb	r3, [r7, #23]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10a      	bne.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb32:	4bb7      	ldr	r3, [pc, #732]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bb34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb36:	f023 0207 	bic.w	r2, r3, #7
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb40:	49b3      	ldr	r1, [pc, #716]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	658b      	str	r3, [r1, #88]	; 0x58
 800bb46:	e001      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb48:	7dfb      	ldrb	r3, [r7, #23]
 800bb4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 0320 	and.w	r3, r3, #32
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d04b      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb62:	d02e      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800bb64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb68:	d828      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bb6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb6e:	d02a      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bb70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb74:	d822      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bb76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb7a:	d026      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bb7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb80:	d81c      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bb82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb86:	d010      	beq.n	800bbaa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800bb88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb8c:	d816      	bhi.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d01d      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bb92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb96:	d111      	bne.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 fd24 	bl	800c5ec <RCCEx_PLL2_Config>
 800bba4:	4603      	mov	r3, r0
 800bba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bba8:	e012      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	3324      	adds	r3, #36	; 0x24
 800bbae:	2102      	movs	r1, #2
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 fdcd 	bl	800c750 <RCCEx_PLL3_Config>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bbba:	e009      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	75fb      	strb	r3, [r7, #23]
      break;
 800bbc0:	e006      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bbc2:	bf00      	nop
 800bbc4:	e004      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bbc6:	bf00      	nop
 800bbc8:	e002      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bbca:	bf00      	nop
 800bbcc:	e000      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bbce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10a      	bne.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bbd6:	4b8e      	ldr	r3, [pc, #568]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bbd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbe4:	498a      	ldr	r1, [pc, #552]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	654b      	str	r3, [r1, #84]	; 0x54
 800bbea:	e001      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
 800bbee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d04b      	beq.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc06:	d02e      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800bc08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc0c:	d828      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bc0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc12:	d02a      	beq.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bc14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc18:	d822      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bc1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc1e:	d026      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bc20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc24:	d81c      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bc26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc2a:	d010      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800bc2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc30:	d816      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d01d      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800bc36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc3a:	d111      	bne.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	3304      	adds	r3, #4
 800bc40:	2100      	movs	r1, #0
 800bc42:	4618      	mov	r0, r3
 800bc44:	f000 fcd2 	bl	800c5ec <RCCEx_PLL2_Config>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bc4c:	e012      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	3324      	adds	r3, #36	; 0x24
 800bc52:	2102      	movs	r1, #2
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 fd7b 	bl	800c750 <RCCEx_PLL3_Config>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bc5e:	e009      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	75fb      	strb	r3, [r7, #23]
      break;
 800bc64:	e006      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bc66:	bf00      	nop
 800bc68:	e004      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bc6a:	bf00      	nop
 800bc6c:	e002      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bc6e:	bf00      	nop
 800bc70:	e000      	b.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bc72:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10a      	bne.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc7a:	4b65      	ldr	r3, [pc, #404]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bc7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc88:	4961      	ldr	r1, [pc, #388]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	658b      	str	r3, [r1, #88]	; 0x58
 800bc8e:	e001      	b.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d04b      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bca6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcaa:	d02e      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800bcac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcb0:	d828      	bhi.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bcb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcb6:	d02a      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800bcb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcbc:	d822      	bhi.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bcbe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bcc2:	d026      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800bcc4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bcc8:	d81c      	bhi.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bcca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcce:	d010      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800bcd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcd4:	d816      	bhi.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d01d      	beq.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800bcda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcde:	d111      	bne.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3304      	adds	r3, #4
 800bce4:	2100      	movs	r1, #0
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 fc80 	bl	800c5ec <RCCEx_PLL2_Config>
 800bcec:	4603      	mov	r3, r0
 800bcee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bcf0:	e012      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	3324      	adds	r3, #36	; 0x24
 800bcf6:	2102      	movs	r1, #2
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 fd29 	bl	800c750 <RCCEx_PLL3_Config>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bd02:	e009      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	75fb      	strb	r3, [r7, #23]
      break;
 800bd08:	e006      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bd0a:	bf00      	nop
 800bd0c:	e004      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bd0e:	bf00      	nop
 800bd10:	e002      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bd12:	bf00      	nop
 800bd14:	e000      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bd16:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10a      	bne.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bd1e:	4b3c      	ldr	r3, [pc, #240]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd2c:	4938      	ldr	r1, [pc, #224]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	658b      	str	r3, [r1, #88]	; 0x58
 800bd32:	e001      	b.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd34:	7dfb      	ldrb	r3, [r7, #23]
 800bd36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 0308 	and.w	r3, r3, #8
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d01a      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd4e:	d10a      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	3324      	adds	r3, #36	; 0x24
 800bd54:	2102      	movs	r1, #2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 fcfa 	bl	800c750 <RCCEx_PLL3_Config>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d001      	beq.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bd66:	4b2a      	ldr	r3, [pc, #168]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd74:	4926      	ldr	r1, [pc, #152]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd76:	4313      	orrs	r3, r2
 800bd78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 0310 	and.w	r3, r3, #16
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d01a      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd90:	d10a      	bne.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3324      	adds	r3, #36	; 0x24
 800bd96:	2102      	movs	r1, #2
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 fcd9 	bl	800c750 <RCCEx_PLL3_Config>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d001      	beq.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800bda4:	2301      	movs	r3, #1
 800bda6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bda8:	4b19      	ldr	r3, [pc, #100]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bdaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdb6:	4916      	ldr	r1, [pc, #88]	; (800be10 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d036      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bdce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdd2:	d01f      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800bdd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdd8:	d817      	bhi.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d003      	beq.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800bdde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde2:	d009      	beq.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800bde4:	e011      	b.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	3304      	adds	r3, #4
 800bdea:	2100      	movs	r1, #0
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fbfd 	bl	800c5ec <RCCEx_PLL2_Config>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bdf6:	e00e      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3324      	adds	r3, #36	; 0x24
 800bdfc:	2102      	movs	r1, #2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 fca6 	bl	800c750 <RCCEx_PLL3_Config>
 800be04:	4603      	mov	r3, r0
 800be06:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800be08:	e005      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	75fb      	strb	r3, [r7, #23]
      break;
 800be0e:	e002      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800be10:	58024400 	.word	0x58024400
      break;
 800be14:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be16:	7dfb      	ldrb	r3, [r7, #23]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10a      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be1c:	4b93      	ldr	r3, [pc, #588]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be2a:	4990      	ldr	r1, [pc, #576]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be2c:	4313      	orrs	r3, r2
 800be2e:	658b      	str	r3, [r1, #88]	; 0x58
 800be30:	e001      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d033      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be4c:	d01c      	beq.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800be4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be52:	d816      	bhi.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800be54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be58:	d003      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800be5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be5e:	d007      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800be60:	e00f      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be62:	4b82      	ldr	r3, [pc, #520]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be66:	4a81      	ldr	r2, [pc, #516]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800be6e:	e00c      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	3324      	adds	r3, #36	; 0x24
 800be74:	2101      	movs	r1, #1
 800be76:	4618      	mov	r0, r3
 800be78:	f000 fc6a 	bl	800c750 <RCCEx_PLL3_Config>
 800be7c:	4603      	mov	r3, r0
 800be7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800be80:	e003      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	75fb      	strb	r3, [r7, #23]
      break;
 800be86:	e000      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800be88:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10a      	bne.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be90:	4b76      	ldr	r3, [pc, #472]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be9e:	4973      	ldr	r1, [pc, #460]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bea0:	4313      	orrs	r3, r2
 800bea2:	654b      	str	r3, [r1, #84]	; 0x54
 800bea4:	e001      	b.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea6:	7dfb      	ldrb	r3, [r7, #23]
 800bea8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d029      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800bebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bec2:	d007      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800bec4:	e00f      	b.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bec6:	4b69      	ldr	r3, [pc, #420]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beca:	4a68      	ldr	r2, [pc, #416]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800becc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bed2:	e00b      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3304      	adds	r3, #4
 800bed8:	2102      	movs	r1, #2
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 fb86 	bl	800c5ec <RCCEx_PLL2_Config>
 800bee0:	4603      	mov	r3, r0
 800bee2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bee4:	e002      	b.n	800beec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
 800bee8:	75fb      	strb	r3, [r7, #23]
      break;
 800beea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d109      	bne.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bef2:	4b5e      	ldr	r3, [pc, #376]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bef6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800befe:	495b      	ldr	r1, [pc, #364]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bf04:	e001      	b.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00a      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	3324      	adds	r3, #36	; 0x24
 800bf1a:	2102      	movs	r1, #2
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f000 fc17 	bl	800c750 <RCCEx_PLL3_Config>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d030      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf40:	d017      	beq.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800bf42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf46:	d811      	bhi.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bf48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf4c:	d013      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800bf4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf52:	d80b      	bhi.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d010      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800bf58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf5c:	d106      	bne.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf5e:	4b43      	ldr	r3, [pc, #268]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf62:	4a42      	ldr	r2, [pc, #264]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bf6a:	e007      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	75fb      	strb	r3, [r7, #23]
      break;
 800bf70:	e004      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bf72:	bf00      	nop
 800bf74:	e002      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bf76:	bf00      	nop
 800bf78:	e000      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bf7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf7c:	7dfb      	ldrb	r3, [r7, #23]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d109      	bne.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf82:	4b3a      	ldr	r3, [pc, #232]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf8e:	4937      	ldr	r1, [pc, #220]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf90:	4313      	orrs	r3, r2
 800bf92:	654b      	str	r3, [r1, #84]	; 0x54
 800bf94:	e001      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf96:	7dfb      	ldrb	r3, [r7, #23]
 800bf98:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d008      	beq.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bfa6:	4b31      	ldr	r3, [pc, #196]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfaa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb2:	492e      	ldr	r1, [pc, #184]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d009      	beq.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bfc4:	4b29      	ldr	r3, [pc, #164]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bfd2:	4926      	ldr	r1, [pc, #152]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d008      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bfe4:	4b21      	ldr	r3, [pc, #132]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bff0:	491e      	ldr	r1, [pc, #120]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bff2:	4313      	orrs	r3, r2
 800bff4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00d      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c002:	4b1a      	ldr	r3, [pc, #104]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	4a19      	ldr	r2, [pc, #100]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c008:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c00c:	6113      	str	r3, [r2, #16]
 800c00e:	4b17      	ldr	r3, [pc, #92]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c010:	691a      	ldr	r2, [r3, #16]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c018:	4914      	ldr	r1, [pc, #80]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c01a:	4313      	orrs	r3, r2
 800c01c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	da08      	bge.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c026:	4b11      	ldr	r3, [pc, #68]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c02a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c032:	490e      	ldr	r1, [pc, #56]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c034:	4313      	orrs	r3, r2
 800c036:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c040:	2b00      	cmp	r3, #0
 800c042:	d009      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c044:	4b09      	ldr	r3, [pc, #36]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c048:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c052:	4906      	ldr	r1, [pc, #24]	; (800c06c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c054:	4313      	orrs	r3, r2
 800c056:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c058:	7dbb      	ldrb	r3, [r7, #22]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	e000      	b.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c062:	2301      	movs	r3, #1
}
 800c064:	4618      	mov	r0, r3
 800c066:	3718      	adds	r7, #24
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	58024400 	.word	0x58024400

0800c070 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c074:	f7ff f860 	bl	800b138 <HAL_RCC_GetHCLKFreq>
 800c078:	4602      	mov	r2, r0
 800c07a:	4b06      	ldr	r3, [pc, #24]	; (800c094 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	091b      	lsrs	r3, r3, #4
 800c080:	f003 0307 	and.w	r3, r3, #7
 800c084:	4904      	ldr	r1, [pc, #16]	; (800c098 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c086:	5ccb      	ldrb	r3, [r1, r3]
 800c088:	f003 031f 	and.w	r3, r3, #31
 800c08c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c090:	4618      	mov	r0, r3
 800c092:	bd80      	pop	{r7, pc}
 800c094:	58024400 	.word	0x58024400
 800c098:	080137e4 	.word	0x080137e4

0800c09c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b089      	sub	sp, #36	; 0x24
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0a4:	4ba1      	ldr	r3, [pc, #644]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a8:	f003 0303 	and.w	r3, r3, #3
 800c0ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c0ae:	4b9f      	ldr	r3, [pc, #636]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b2:	0b1b      	lsrs	r3, r3, #12
 800c0b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c0ba:	4b9c      	ldr	r3, [pc, #624]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0be:	091b      	lsrs	r3, r3, #4
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c0c6:	4b99      	ldr	r3, [pc, #612]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ca:	08db      	lsrs	r3, r3, #3
 800c0cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c0d0:	693a      	ldr	r2, [r7, #16]
 800c0d2:	fb02 f303 	mul.w	r3, r2, r3
 800c0d6:	ee07 3a90 	vmov	s15, r3
 800c0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 8111 	beq.w	800c30c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	f000 8083 	beq.w	800c1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	2b02      	cmp	r3, #2
 800c0f6:	f200 80a1 	bhi.w	800c23c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d003      	beq.n	800c108 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	2b01      	cmp	r3, #1
 800c104:	d056      	beq.n	800c1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c106:	e099      	b.n	800c23c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c108:	4b88      	ldr	r3, [pc, #544]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f003 0320 	and.w	r3, r3, #32
 800c110:	2b00      	cmp	r3, #0
 800c112:	d02d      	beq.n	800c170 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c114:	4b85      	ldr	r3, [pc, #532]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	08db      	lsrs	r3, r3, #3
 800c11a:	f003 0303 	and.w	r3, r3, #3
 800c11e:	4a84      	ldr	r2, [pc, #528]	; (800c330 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c120:	fa22 f303 	lsr.w	r3, r2, r3
 800c124:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	ee07 3a90 	vmov	s15, r3
 800c12c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	ee07 3a90 	vmov	s15, r3
 800c136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c13e:	4b7b      	ldr	r3, [pc, #492]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c146:	ee07 3a90 	vmov	s15, r3
 800c14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c14e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c152:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c15e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c16e:	e087      	b.n	800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	ee07 3a90 	vmov	s15, r3
 800c176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c17a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c338 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c182:	4b6a      	ldr	r3, [pc, #424]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18a:	ee07 3a90 	vmov	s15, r3
 800c18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c192:	ed97 6a03 	vldr	s12, [r7, #12]
 800c196:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1b2:	e065      	b.n	800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	ee07 3a90 	vmov	s15, r3
 800c1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c33c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c1c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1c6:	4b59      	ldr	r3, [pc, #356]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ce:	ee07 3a90 	vmov	s15, r3
 800c1d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1da:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1f6:	e043      	b.n	800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	ee07 3a90 	vmov	s15, r3
 800c1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c202:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c20a:	4b48      	ldr	r3, [pc, #288]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c212:	ee07 3a90 	vmov	s15, r3
 800c216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c21e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c23a:	e021      	b.n	800c280 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	ee07 3a90 	vmov	s15, r3
 800c242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c246:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c33c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c24e:	4b37      	ldr	r3, [pc, #220]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c256:	ee07 3a90 	vmov	s15, r3
 800c25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c25e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c262:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c334 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c26e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c27e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c280:	4b2a      	ldr	r3, [pc, #168]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c284:	0a5b      	lsrs	r3, r3, #9
 800c286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c28a:	ee07 3a90 	vmov	s15, r3
 800c28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c29a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c29e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2a6:	ee17 2a90 	vmov	r2, s15
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c2ae:	4b1f      	ldr	r3, [pc, #124]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b2:	0c1b      	lsrs	r3, r3, #16
 800c2b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2b8:	ee07 3a90 	vmov	s15, r3
 800c2bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2d4:	ee17 2a90 	vmov	r2, s15
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c2dc:	4b13      	ldr	r3, [pc, #76]	; (800c32c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e0:	0e1b      	lsrs	r3, r3, #24
 800c2e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2e6:	ee07 3a90 	vmov	s15, r3
 800c2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c302:	ee17 2a90 	vmov	r2, s15
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c30a:	e008      	b.n	800c31e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	609a      	str	r2, [r3, #8]
}
 800c31e:	bf00      	nop
 800c320:	3724      	adds	r7, #36	; 0x24
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	58024400 	.word	0x58024400
 800c330:	03d09000 	.word	0x03d09000
 800c334:	46000000 	.word	0x46000000
 800c338:	4c742400 	.word	0x4c742400
 800c33c:	4a742400 	.word	0x4a742400
 800c340:	4bbebc20 	.word	0x4bbebc20

0800c344 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c344:	b480      	push	{r7}
 800c346:	b089      	sub	sp, #36	; 0x24
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c34c:	4ba1      	ldr	r3, [pc, #644]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c350:	f003 0303 	and.w	r3, r3, #3
 800c354:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c356:	4b9f      	ldr	r3, [pc, #636]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c35a:	0d1b      	lsrs	r3, r3, #20
 800c35c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c360:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c362:	4b9c      	ldr	r3, [pc, #624]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c366:	0a1b      	lsrs	r3, r3, #8
 800c368:	f003 0301 	and.w	r3, r3, #1
 800c36c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c36e:	4b99      	ldr	r3, [pc, #612]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c372:	08db      	lsrs	r3, r3, #3
 800c374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	fb02 f303 	mul.w	r3, r2, r3
 800c37e:	ee07 3a90 	vmov	s15, r3
 800c382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c386:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 8111 	beq.w	800c5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	2b02      	cmp	r3, #2
 800c396:	f000 8083 	beq.w	800c4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	2b02      	cmp	r3, #2
 800c39e:	f200 80a1 	bhi.w	800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d003      	beq.n	800c3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	d056      	beq.n	800c45c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c3ae:	e099      	b.n	800c4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3b0:	4b88      	ldr	r3, [pc, #544]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f003 0320 	and.w	r3, r3, #32
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d02d      	beq.n	800c418 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c3bc:	4b85      	ldr	r3, [pc, #532]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	08db      	lsrs	r3, r3, #3
 800c3c2:	f003 0303 	and.w	r3, r3, #3
 800c3c6:	4a84      	ldr	r2, [pc, #528]	; (800c5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c3c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	ee07 3a90 	vmov	s15, r3
 800c3d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3e6:	4b7b      	ldr	r3, [pc, #492]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ee:	ee07 3a90 	vmov	s15, r3
 800c3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c412:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c416:	e087      	b.n	800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	ee07 3a90 	vmov	s15, r3
 800c41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c422:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c42a:	4b6a      	ldr	r3, [pc, #424]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c432:	ee07 3a90 	vmov	s15, r3
 800c436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c43e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c44a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c456:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c45a:	e065      	b.n	800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	ee07 3a90 	vmov	s15, r3
 800c462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c466:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c46e:	4b59      	ldr	r3, [pc, #356]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c476:	ee07 3a90 	vmov	s15, r3
 800c47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c47e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c482:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c48e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c49a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c49e:	e043      	b.n	800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	ee07 3a90 	vmov	s15, r3
 800c4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c4ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4b2:	4b48      	ldr	r3, [pc, #288]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ba:	ee07 3a90 	vmov	s15, r3
 800c4be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4e2:	e021      	b.n	800c528 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	ee07 3a90 	vmov	s15, r3
 800c4ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4f6:	4b37      	ldr	r3, [pc, #220]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c506:	ed97 6a03 	vldr	s12, [r7, #12]
 800c50a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c5dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c50e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c526:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c528:	4b2a      	ldr	r3, [pc, #168]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52c:	0a5b      	lsrs	r3, r3, #9
 800c52e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c532:	ee07 3a90 	vmov	s15, r3
 800c536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c53e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c542:	edd7 6a07 	vldr	s13, [r7, #28]
 800c546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c54a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c54e:	ee17 2a90 	vmov	r2, s15
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c556:	4b1f      	ldr	r3, [pc, #124]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55a:	0c1b      	lsrs	r3, r3, #16
 800c55c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c560:	ee07 3a90 	vmov	s15, r3
 800c564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c568:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c56c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c570:	edd7 6a07 	vldr	s13, [r7, #28]
 800c574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c57c:	ee17 2a90 	vmov	r2, s15
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c584:	4b13      	ldr	r3, [pc, #76]	; (800c5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c588:	0e1b      	lsrs	r3, r3, #24
 800c58a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c58e:	ee07 3a90 	vmov	s15, r3
 800c592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c596:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c59a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c59e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5aa:	ee17 2a90 	vmov	r2, s15
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c5b2:	e008      	b.n	800c5c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	609a      	str	r2, [r3, #8]
}
 800c5c6:	bf00      	nop
 800c5c8:	3724      	adds	r7, #36	; 0x24
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	58024400 	.word	0x58024400
 800c5d8:	03d09000 	.word	0x03d09000
 800c5dc:	46000000 	.word	0x46000000
 800c5e0:	4c742400 	.word	0x4c742400
 800c5e4:	4a742400 	.word	0x4a742400
 800c5e8:	4bbebc20 	.word	0x4bbebc20

0800c5ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5fa:	4b53      	ldr	r3, [pc, #332]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5fe:	f003 0303 	and.w	r3, r3, #3
 800c602:	2b03      	cmp	r3, #3
 800c604:	d101      	bne.n	800c60a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e099      	b.n	800c73e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c60a:	4b4f      	ldr	r3, [pc, #316]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a4e      	ldr	r2, [pc, #312]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c610:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c616:	f7f8 fa3d 	bl	8004a94 <HAL_GetTick>
 800c61a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c61c:	e008      	b.n	800c630 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c61e:	f7f8 fa39 	bl	8004a94 <HAL_GetTick>
 800c622:	4602      	mov	r2, r0
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	2b02      	cmp	r3, #2
 800c62a:	d901      	bls.n	800c630 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c62c:	2303      	movs	r3, #3
 800c62e:	e086      	b.n	800c73e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c630:	4b45      	ldr	r3, [pc, #276]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1f0      	bne.n	800c61e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c63c:	4b42      	ldr	r3, [pc, #264]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c640:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	031b      	lsls	r3, r3, #12
 800c64a:	493f      	ldr	r1, [pc, #252]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c64c:	4313      	orrs	r3, r2
 800c64e:	628b      	str	r3, [r1, #40]	; 0x28
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	3b01      	subs	r3, #1
 800c656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	3b01      	subs	r3, #1
 800c660:	025b      	lsls	r3, r3, #9
 800c662:	b29b      	uxth	r3, r3
 800c664:	431a      	orrs	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	3b01      	subs	r3, #1
 800c66c:	041b      	lsls	r3, r3, #16
 800c66e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c672:	431a      	orrs	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	3b01      	subs	r3, #1
 800c67a:	061b      	lsls	r3, r3, #24
 800c67c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c680:	4931      	ldr	r1, [pc, #196]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c682:	4313      	orrs	r3, r2
 800c684:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c686:	4b30      	ldr	r3, [pc, #192]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	695b      	ldr	r3, [r3, #20]
 800c692:	492d      	ldr	r1, [pc, #180]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c694:	4313      	orrs	r3, r2
 800c696:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c698:	4b2b      	ldr	r3, [pc, #172]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69c:	f023 0220 	bic.w	r2, r3, #32
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	699b      	ldr	r3, [r3, #24]
 800c6a4:	4928      	ldr	r1, [pc, #160]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c6aa:	4b27      	ldr	r3, [pc, #156]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ae:	4a26      	ldr	r2, [pc, #152]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6b0:	f023 0310 	bic.w	r3, r3, #16
 800c6b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6b6:	4b24      	ldr	r3, [pc, #144]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6ba:	4b24      	ldr	r3, [pc, #144]	; (800c74c <RCCEx_PLL2_Config+0x160>)
 800c6bc:	4013      	ands	r3, r2
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	69d2      	ldr	r2, [r2, #28]
 800c6c2:	00d2      	lsls	r2, r2, #3
 800c6c4:	4920      	ldr	r1, [pc, #128]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c6ca:	4b1f      	ldr	r3, [pc, #124]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ce:	4a1e      	ldr	r2, [pc, #120]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6d0:	f043 0310 	orr.w	r3, r3, #16
 800c6d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d106      	bne.n	800c6ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c6dc:	4b1a      	ldr	r3, [pc, #104]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e0:	4a19      	ldr	r2, [pc, #100]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6e8:	e00f      	b.n	800c70a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d106      	bne.n	800c6fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c6f0:	4b15      	ldr	r3, [pc, #84]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f4:	4a14      	ldr	r2, [pc, #80]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c6f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c6fc:	e005      	b.n	800c70a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c6fe:	4b12      	ldr	r3, [pc, #72]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	4a11      	ldr	r2, [pc, #68]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c708:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c70a:	4b0f      	ldr	r3, [pc, #60]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a0e      	ldr	r2, [pc, #56]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c716:	f7f8 f9bd 	bl	8004a94 <HAL_GetTick>
 800c71a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c71c:	e008      	b.n	800c730 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c71e:	f7f8 f9b9 	bl	8004a94 <HAL_GetTick>
 800c722:	4602      	mov	r2, r0
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d901      	bls.n	800c730 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c72c:	2303      	movs	r3, #3
 800c72e:	e006      	b.n	800c73e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c730:	4b05      	ldr	r3, [pc, #20]	; (800c748 <RCCEx_PLL2_Config+0x15c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d0f0      	beq.n	800c71e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	58024400 	.word	0x58024400
 800c74c:	ffff0007 	.word	0xffff0007

0800c750 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c75e:	4b53      	ldr	r3, [pc, #332]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c762:	f003 0303 	and.w	r3, r3, #3
 800c766:	2b03      	cmp	r3, #3
 800c768:	d101      	bne.n	800c76e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	e099      	b.n	800c8a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c76e:	4b4f      	ldr	r3, [pc, #316]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	4a4e      	ldr	r2, [pc, #312]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c77a:	f7f8 f98b 	bl	8004a94 <HAL_GetTick>
 800c77e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c780:	e008      	b.n	800c794 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c782:	f7f8 f987 	bl	8004a94 <HAL_GetTick>
 800c786:	4602      	mov	r2, r0
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	1ad3      	subs	r3, r2, r3
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	d901      	bls.n	800c794 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c790:	2303      	movs	r3, #3
 800c792:	e086      	b.n	800c8a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c794:	4b45      	ldr	r3, [pc, #276]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1f0      	bne.n	800c782 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c7a0:	4b42      	ldr	r3, [pc, #264]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	051b      	lsls	r3, r3, #20
 800c7ae:	493f      	ldr	r1, [pc, #252]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	628b      	str	r3, [r1, #40]	; 0x28
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	025b      	lsls	r3, r3, #9
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	431a      	orrs	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	041b      	lsls	r3, r3, #16
 800c7d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	061b      	lsls	r3, r3, #24
 800c7e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c7e4:	4931      	ldr	r1, [pc, #196]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c7ea:	4b30      	ldr	r3, [pc, #192]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	695b      	ldr	r3, [r3, #20]
 800c7f6:	492d      	ldr	r1, [pc, #180]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c7fc:	4b2b      	ldr	r3, [pc, #172]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c800:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	4928      	ldr	r1, [pc, #160]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c80a:	4313      	orrs	r3, r2
 800c80c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c80e:	4b27      	ldr	r3, [pc, #156]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c812:	4a26      	ldr	r2, [pc, #152]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c818:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c81a:	4b24      	ldr	r3, [pc, #144]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c81c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c81e:	4b24      	ldr	r3, [pc, #144]	; (800c8b0 <RCCEx_PLL3_Config+0x160>)
 800c820:	4013      	ands	r3, r2
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	69d2      	ldr	r2, [r2, #28]
 800c826:	00d2      	lsls	r2, r2, #3
 800c828:	4920      	ldr	r1, [pc, #128]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c82a:	4313      	orrs	r3, r2
 800c82c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c82e:	4b1f      	ldr	r3, [pc, #124]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c832:	4a1e      	ldr	r2, [pc, #120]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c838:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d106      	bne.n	800c84e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c840:	4b1a      	ldr	r3, [pc, #104]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	4a19      	ldr	r2, [pc, #100]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c846:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c84a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c84c:	e00f      	b.n	800c86e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d106      	bne.n	800c862 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c854:	4b15      	ldr	r3, [pc, #84]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c858:	4a14      	ldr	r2, [pc, #80]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c85a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c85e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c860:	e005      	b.n	800c86e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c862:	4b12      	ldr	r3, [pc, #72]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c866:	4a11      	ldr	r2, [pc, #68]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c868:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c86c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c86e:	4b0f      	ldr	r3, [pc, #60]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a0e      	ldr	r2, [pc, #56]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c87a:	f7f8 f90b 	bl	8004a94 <HAL_GetTick>
 800c87e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c880:	e008      	b.n	800c894 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c882:	f7f8 f907 	bl	8004a94 <HAL_GetTick>
 800c886:	4602      	mov	r2, r0
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d901      	bls.n	800c894 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	e006      	b.n	800c8a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c894:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <RCCEx_PLL3_Config+0x15c>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d0f0      	beq.n	800c882 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c8a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	58024400 	.word	0x58024400
 800c8b0:	ffff0007 	.word	0xffff0007

0800c8b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d101      	bne.n	800c8ca <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e0eb      	b.n	800caa2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a75      	ldr	r2, [pc, #468]	; (800caac <HAL_SPI_Init+0x1f8>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d00f      	beq.n	800c8fa <HAL_SPI_Init+0x46>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a74      	ldr	r2, [pc, #464]	; (800cab0 <HAL_SPI_Init+0x1fc>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d00a      	beq.n	800c8fa <HAL_SPI_Init+0x46>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a72      	ldr	r2, [pc, #456]	; (800cab4 <HAL_SPI_Init+0x200>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d005      	beq.n	800c8fa <HAL_SPI_Init+0x46>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	2b0f      	cmp	r3, #15
 800c8f4:	d901      	bls.n	800c8fa <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e0d3      	b.n	800caa2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f001 f87a 	bl	800d9f4 <SPI_GetPacketSize>
 800c900:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a69      	ldr	r2, [pc, #420]	; (800caac <HAL_SPI_Init+0x1f8>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d00c      	beq.n	800c926 <HAL_SPI_Init+0x72>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a67      	ldr	r2, [pc, #412]	; (800cab0 <HAL_SPI_Init+0x1fc>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d007      	beq.n	800c926 <HAL_SPI_Init+0x72>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a66      	ldr	r2, [pc, #408]	; (800cab4 <HAL_SPI_Init+0x200>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d002      	beq.n	800c926 <HAL_SPI_Init+0x72>
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	2b08      	cmp	r3, #8
 800c924:	d811      	bhi.n	800c94a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c92a:	4a60      	ldr	r2, [pc, #384]	; (800caac <HAL_SPI_Init+0x1f8>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d009      	beq.n	800c944 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a5e      	ldr	r2, [pc, #376]	; (800cab0 <HAL_SPI_Init+0x1fc>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d004      	beq.n	800c944 <HAL_SPI_Init+0x90>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a5d      	ldr	r2, [pc, #372]	; (800cab4 <HAL_SPI_Init+0x200>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d104      	bne.n	800c94e <HAL_SPI_Init+0x9a>
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	2b10      	cmp	r3, #16
 800c948:	d901      	bls.n	800c94e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	e0a9      	b.n	800caa2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c954:	b2db      	uxtb	r3, r3
 800c956:	2b00      	cmp	r3, #0
 800c958:	d106      	bne.n	800c968 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7f6 ff44 	bl	80037f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2202      	movs	r2, #2
 800c96c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f022 0201 	bic.w	r2, r2, #1
 800c97e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	699b      	ldr	r3, [r3, #24]
 800c984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c988:	d119      	bne.n	800c9be <HAL_SPI_Init+0x10a>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c992:	d103      	bne.n	800c99c <HAL_SPI_Init+0xe8>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d008      	beq.n	800c9ae <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10c      	bne.n	800c9be <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9ac:	d107      	bne.n	800c9be <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c9bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	69da      	ldr	r2, [r3, #28]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d0:	ea42 0103 	orr.w	r1, r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	68da      	ldr	r2, [r3, #12]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e8:	431a      	orrs	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ee:	431a      	orrs	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	431a      	orrs	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	695b      	ldr	r3, [r3, #20]
 800ca00:	431a      	orrs	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	431a      	orrs	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	431a      	orrs	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca12:	431a      	orrs	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	431a      	orrs	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca1e:	ea42 0103 	orr.w	r1, r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d113      	bne.n	800ca5e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca48:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ca5c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f022 0201 	bic.w	r2, r2, #1
 800ca6c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00a      	beq.n	800ca90 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	430a      	orrs	r2, r1
 800ca8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	40013000 	.word	0x40013000
 800cab0:	40003800 	.word	0x40003800
 800cab4:	40003c00 	.word	0x40003c00

0800cab8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b08a      	sub	sp, #40	; 0x28
 800cabc:	af02      	add	r7, sp, #8
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	603b      	str	r3, [r7, #0]
 800cac4:	4613      	mov	r3, r2
 800cac6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	3320      	adds	r3, #32
 800cace:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d101      	bne.n	800cae2 <HAL_SPI_Transmit+0x2a>
 800cade:	2302      	movs	r3, #2
 800cae0:	e1d7      	b.n	800ce92 <HAL_SPI_Transmit+0x3da>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2201      	movs	r2, #1
 800cae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800caea:	f7f7 ffd3 	bl	8004a94 <HAL_GetTick>
 800caee:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d007      	beq.n	800cb0c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800cafc:	2302      	movs	r3, #2
 800cafe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cb08:	7efb      	ldrb	r3, [r7, #27]
 800cb0a:	e1c2      	b.n	800ce92 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d002      	beq.n	800cb18 <HAL_SPI_Transmit+0x60>
 800cb12:	88fb      	ldrh	r3, [r7, #6]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d107      	bne.n	800cb28 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cb24:	7efb      	ldrb	r3, [r7, #27]
 800cb26:	e1b4      	b.n	800ce92 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2203      	movs	r2, #3
 800cb2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	88fa      	ldrh	r2, [r7, #6]
 800cb42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	88fa      	ldrh	r2, [r7, #6]
 800cb4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2200      	movs	r2, #0
 800cb52:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cb78:	d107      	bne.n	800cb8a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb88:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	685a      	ldr	r2, [r3, #4]
 800cb90:	4b96      	ldr	r3, [pc, #600]	; (800cdec <HAL_SPI_Transmit+0x334>)
 800cb92:	4013      	ands	r3, r2
 800cb94:	88f9      	ldrh	r1, [r7, #6]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	6812      	ldr	r2, [r2, #0]
 800cb9a:	430b      	orrs	r3, r1
 800cb9c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f042 0201 	orr.w	r2, r2, #1
 800cbac:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbb6:	d107      	bne.n	800cbc8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	2b0f      	cmp	r3, #15
 800cbce:	d947      	bls.n	800cc60 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cbd0:	e03f      	b.n	800cc52 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	695b      	ldr	r3, [r3, #20]
 800cbd8:	f003 0302 	and.w	r3, r3, #2
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d114      	bne.n	800cc0a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6812      	ldr	r2, [r2, #0]
 800cbea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbf0:	1d1a      	adds	r2, r3, #4
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cc08:	e023      	b.n	800cc52 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc0a:	f7f7 ff43 	bl	8004a94 <HAL_GetTick>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	683a      	ldr	r2, [r7, #0]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d803      	bhi.n	800cc22 <HAL_SPI_Transmit+0x16a>
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc20:	d102      	bne.n	800cc28 <HAL_SPI_Transmit+0x170>
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d114      	bne.n	800cc52 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f000 fe15 	bl	800d858 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e11f      	b.n	800ce92 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d1b9      	bne.n	800cbd2 <HAL_SPI_Transmit+0x11a>
 800cc5e:	e0f2      	b.n	800ce46 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	68db      	ldr	r3, [r3, #12]
 800cc64:	2b07      	cmp	r3, #7
 800cc66:	f240 80e7 	bls.w	800ce38 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cc6a:	e05d      	b.n	800cd28 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	f003 0302 	and.w	r3, r3, #2
 800cc76:	2b02      	cmp	r3, #2
 800cc78:	d132      	bne.n	800cce0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d918      	bls.n	800ccb8 <HAL_SPI_Transmit+0x200>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d014      	beq.n	800ccb8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6812      	ldr	r2, [r2, #0]
 800cc98:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc9e:	1d1a      	adds	r2, r3, #4
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	3b02      	subs	r3, #2
 800ccae:	b29a      	uxth	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ccb6:	e037      	b.n	800cd28 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccbc:	881a      	ldrh	r2, [r3, #0]
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccc6:	1c9a      	adds	r2, r3, #2
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ccde:	e023      	b.n	800cd28 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cce0:	f7f7 fed8 	bl	8004a94 <HAL_GetTick>
 800cce4:	4602      	mov	r2, r0
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d803      	bhi.n	800ccf8 <HAL_SPI_Transmit+0x240>
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf6:	d102      	bne.n	800ccfe <HAL_SPI_Transmit+0x246>
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d114      	bne.n	800cd28 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	f000 fdaa 	bl	800d858 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	e0b4      	b.n	800ce92 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d19b      	bne.n	800cc6c <HAL_SPI_Transmit+0x1b4>
 800cd34:	e087      	b.n	800ce46 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	695b      	ldr	r3, [r3, #20]
 800cd3c:	f003 0302 	and.w	r3, r3, #2
 800cd40:	2b02      	cmp	r3, #2
 800cd42:	d155      	bne.n	800cdf0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	2b03      	cmp	r3, #3
 800cd4e:	d918      	bls.n	800cd82 <HAL_SPI_Transmit+0x2ca>
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd54:	2b40      	cmp	r3, #64	; 0x40
 800cd56:	d914      	bls.n	800cd82 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6812      	ldr	r2, [r2, #0]
 800cd62:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd68:	1d1a      	adds	r2, r3, #4
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	3b04      	subs	r3, #4
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cd80:	e05a      	b.n	800ce38 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d917      	bls.n	800cdbe <HAL_SPI_Transmit+0x306>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d013      	beq.n	800cdbe <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd9a:	881a      	ldrh	r2, [r3, #0]
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cda4:	1c9a      	adds	r2, r3, #2
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	3b02      	subs	r3, #2
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cdbc:	e03c      	b.n	800ce38 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	3320      	adds	r3, #32
 800cdc8:	7812      	ldrb	r2, [r2, #0]
 800cdca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdd0:	1c5a      	adds	r2, r3, #1
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	3b01      	subs	r3, #1
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cde8:	e026      	b.n	800ce38 <HAL_SPI_Transmit+0x380>
 800cdea:	bf00      	nop
 800cdec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cdf0:	f7f7 fe50 	bl	8004a94 <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	683a      	ldr	r2, [r7, #0]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d803      	bhi.n	800ce08 <HAL_SPI_Transmit+0x350>
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce06:	d102      	bne.n	800ce0e <HAL_SPI_Transmit+0x356>
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d114      	bne.n	800ce38 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ce0e:	68f8      	ldr	r0, [r7, #12]
 800ce10:	f000 fd22 	bl	800d858 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ce34:	2301      	movs	r3, #1
 800ce36:	e02c      	b.n	800ce92 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f47f af78 	bne.w	800cd36 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	2108      	movs	r1, #8
 800ce50:	68f8      	ldr	r0, [r7, #12]
 800ce52:	f000 fda1 	bl	800d998 <SPI_WaitOnFlagUntilTimeout>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d007      	beq.n	800ce6c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce62:	f043 0220 	orr.w	r2, r3, #32
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 fcf3 	bl	800d858 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d001      	beq.n	800ce90 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e000      	b.n	800ce92 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ce90:	7efb      	ldrb	r3, [r7, #27]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3720      	adds	r7, #32
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop

0800ce9c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b08a      	sub	sp, #40	; 0x28
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	603b      	str	r3, [r7, #0]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	3330      	adds	r3, #48	; 0x30
 800ceb6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cec0:	d112      	bne.n	800cee8 <HAL_SPI_Receive+0x4c>
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10e      	bne.n	800cee8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2204      	movs	r2, #4
 800cece:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ced2:	88fa      	ldrh	r2, [r7, #6]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	4613      	mov	r3, r2
 800ceda:	68ba      	ldr	r2, [r7, #8]
 800cedc:	68b9      	ldr	r1, [r7, #8]
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f000 f9ce 	bl	800d280 <HAL_SPI_TransmitReceive>
 800cee4:	4603      	mov	r3, r0
 800cee6:	e1c7      	b.n	800d278 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d101      	bne.n	800cef6 <HAL_SPI_Receive+0x5a>
 800cef2:	2302      	movs	r3, #2
 800cef4:	e1c0      	b.n	800d278 <HAL_SPI_Receive+0x3dc>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2201      	movs	r2, #1
 800cefa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cefe:	f7f7 fdc9 	bl	8004a94 <HAL_GetTick>
 800cf02:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d007      	beq.n	800cf20 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800cf10:	2302      	movs	r3, #2
 800cf12:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cf1c:	7ffb      	ldrb	r3, [r7, #31]
 800cf1e:	e1ab      	b.n	800d278 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d002      	beq.n	800cf2c <HAL_SPI_Receive+0x90>
 800cf26:	88fb      	ldrh	r3, [r7, #6]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d107      	bne.n	800cf3c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cf38:	7ffb      	ldrb	r3, [r7, #31]
 800cf3a:	e19d      	b.n	800d278 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2204      	movs	r2, #4
 800cf40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	88fa      	ldrh	r2, [r7, #6]
 800cf56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	88fa      	ldrh	r2, [r7, #6]
 800cf5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cf8c:	d107      	bne.n	800cf9e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	4b94      	ldr	r3, [pc, #592]	; (800d1f8 <HAL_SPI_Receive+0x35c>)
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	88f9      	ldrh	r1, [r7, #6]
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	6812      	ldr	r2, [r2, #0]
 800cfae:	430b      	orrs	r3, r1
 800cfb0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	f042 0201 	orr.w	r2, r2, #1
 800cfc0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cfca:	d107      	bne.n	800cfdc <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	681a      	ldr	r2, [r3, #0]
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cfda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	2b0f      	cmp	r3, #15
 800cfe2:	d948      	bls.n	800d076 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cfe4:	e040      	b.n	800d068 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	695a      	ldr	r2, [r3, #20]
 800cfec:	f248 0308 	movw	r3, #32776	; 0x8008
 800cff0:	4013      	ands	r3, r2
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d014      	beq.n	800d020 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cffe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d000:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d006:	1d1a      	adds	r2, r3, #4
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d012:	b29b      	uxth	r3, r3
 800d014:	3b01      	subs	r3, #1
 800d016:	b29a      	uxth	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d01e:	e023      	b.n	800d068 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d020:	f7f7 fd38 	bl	8004a94 <HAL_GetTick>
 800d024:	4602      	mov	r2, r0
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	683a      	ldr	r2, [r7, #0]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d803      	bhi.n	800d038 <HAL_SPI_Receive+0x19c>
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d036:	d102      	bne.n	800d03e <HAL_SPI_Receive+0x1a2>
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d114      	bne.n	800d068 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f000 fc0a 	bl	800d858 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d052:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	e107      	b.n	800d278 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d06e:	b29b      	uxth	r3, r3
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1b8      	bne.n	800cfe6 <HAL_SPI_Receive+0x14a>
 800d074:	e0ed      	b.n	800d252 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	2b07      	cmp	r3, #7
 800d07c:	f240 80e2 	bls.w	800d244 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d080:	e05b      	b.n	800d13a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	695b      	ldr	r3, [r3, #20]
 800d088:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d030      	beq.n	800d0f2 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	695b      	ldr	r3, [r3, #20]
 800d096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d014      	beq.n	800d0c8 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d0a8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0ae:	1d1a      	adds	r2, r3, #4
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	3b02      	subs	r3, #2
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d0c6:	e038      	b.n	800d13a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0cc:	69ba      	ldr	r2, [r7, #24]
 800d0ce:	8812      	ldrh	r2, [r2, #0]
 800d0d0:	b292      	uxth	r2, r2
 800d0d2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0d8:	1c9a      	adds	r2, r3, #2
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	3b01      	subs	r3, #1
 800d0e8:	b29a      	uxth	r2, r3
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d0f0:	e023      	b.n	800d13a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0f2:	f7f7 fccf 	bl	8004a94 <HAL_GetTick>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	683a      	ldr	r2, [r7, #0]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d803      	bhi.n	800d10a <HAL_SPI_Receive+0x26e>
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d108:	d102      	bne.n	800d110 <HAL_SPI_Receive+0x274>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d114      	bne.n	800d13a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f000 fba1 	bl	800d858 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d124:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2201      	movs	r2, #1
 800d132:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d136:	2301      	movs	r3, #1
 800d138:	e09e      	b.n	800d278 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d140:	b29b      	uxth	r3, r3
 800d142:	2b00      	cmp	r3, #0
 800d144:	d19d      	bne.n	800d082 <HAL_SPI_Receive+0x1e6>
 800d146:	e084      	b.n	800d252 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d152:	2b00      	cmp	r3, #0
 800d154:	d052      	beq.n	800d1fc <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	695b      	ldr	r3, [r3, #20]
 800d15c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d014      	beq.n	800d18e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d16c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d16e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d174:	1d1a      	adds	r2, r3, #4
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d180:	b29b      	uxth	r3, r3
 800d182:	3b04      	subs	r3, #4
 800d184:	b29a      	uxth	r2, r3
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d18c:	e05a      	b.n	800d244 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	695b      	ldr	r3, [r3, #20]
 800d194:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d19c:	d914      	bls.n	800d1c8 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1a2:	69ba      	ldr	r2, [r7, #24]
 800d1a4:	8812      	ldrh	r2, [r2, #0]
 800d1a6:	b292      	uxth	r2, r2
 800d1a8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ae:	1c9a      	adds	r2, r3, #2
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	3b02      	subs	r3, #2
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d1c6:	e03d      	b.n	800d244 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1d4:	7812      	ldrb	r2, [r2, #0]
 800d1d6:	b2d2      	uxtb	r2, r2
 800d1d8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1de:	1c5a      	adds	r2, r3, #1
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d1f6:	e025      	b.n	800d244 <HAL_SPI_Receive+0x3a8>
 800d1f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1fc:	f7f7 fc4a 	bl	8004a94 <HAL_GetTick>
 800d200:	4602      	mov	r2, r0
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d803      	bhi.n	800d214 <HAL_SPI_Receive+0x378>
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d212:	d102      	bne.n	800d21a <HAL_SPI_Receive+0x37e>
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d114      	bne.n	800d244 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f000 fb1c 	bl	800d858 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d22e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e019      	b.n	800d278 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d24a:	b29b      	uxth	r3, r3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f47f af7b 	bne.w	800d148 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f000 fb00 	bl	800d858 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2200      	movs	r2, #0
 800d25c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e000      	b.n	800d278 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d276:	7ffb      	ldrb	r3, [r7, #31]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3720      	adds	r7, #32
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b08e      	sub	sp, #56	; 0x38
 800d284:	af02      	add	r7, sp, #8
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d28e:	2300      	movs	r3, #0
 800d290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3320      	adds	r3, #32
 800d29a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3330      	adds	r3, #48	; 0x30
 800d2a2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d101      	bne.n	800d2b2 <HAL_SPI_TransmitReceive+0x32>
 800d2ae:	2302      	movs	r3, #2
 800d2b0:	e2ce      	b.n	800d850 <HAL_SPI_TransmitReceive+0x5d0>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d2ba:	f7f7 fbeb 	bl	8004a94 <HAL_GetTick>
 800d2be:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d2c0:	887b      	ldrh	r3, [r7, #2]
 800d2c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d2c4:	887b      	ldrh	r3, [r7, #2]
 800d2c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d2ce:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d2d6:	7efb      	ldrb	r3, [r7, #27]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d014      	beq.n	800d306 <HAL_SPI_TransmitReceive+0x86>
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2e2:	d106      	bne.n	800d2f2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	689b      	ldr	r3, [r3, #8]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d102      	bne.n	800d2f2 <HAL_SPI_TransmitReceive+0x72>
 800d2ec:	7efb      	ldrb	r3, [r7, #27]
 800d2ee:	2b04      	cmp	r3, #4
 800d2f0:	d009      	beq.n	800d306 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d300:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d304:	e2a4      	b.n	800d850 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d005      	beq.n	800d318 <HAL_SPI_TransmitReceive+0x98>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d002      	beq.n	800d318 <HAL_SPI_TransmitReceive+0x98>
 800d312:	887b      	ldrh	r3, [r7, #2]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d109      	bne.n	800d32c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d326:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d32a:	e291      	b.n	800d850 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d332:	b2db      	uxtb	r3, r3
 800d334:	2b04      	cmp	r3, #4
 800d336:	d003      	beq.n	800d340 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2205      	movs	r2, #5
 800d33c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2200      	movs	r2, #0
 800d344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	887a      	ldrh	r2, [r7, #2]
 800d352:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	887a      	ldrh	r2, [r7, #2]
 800d35a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	887a      	ldrh	r2, [r7, #2]
 800d368:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	887a      	ldrh	r2, [r7, #2]
 800d370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	4b9f      	ldr	r3, [pc, #636]	; (800d604 <HAL_SPI_TransmitReceive+0x384>)
 800d388:	4013      	ands	r3, r2
 800d38a:	8879      	ldrh	r1, [r7, #2]
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	6812      	ldr	r2, [r2, #0]
 800d390:	430b      	orrs	r3, r1
 800d392:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681a      	ldr	r2, [r3, #0]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f042 0201 	orr.w	r2, r2, #1
 800d3a2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d3ac:	d107      	bne.n	800d3be <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	2b0f      	cmp	r3, #15
 800d3c4:	d970      	bls.n	800d4a8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d3c6:	e068      	b.n	800d49a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	695b      	ldr	r3, [r3, #20]
 800d3ce:	f003 0302 	and.w	r3, r3, #2
 800d3d2:	2b02      	cmp	r3, #2
 800d3d4:	d11a      	bne.n	800d40c <HAL_SPI_TransmitReceive+0x18c>
 800d3d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d017      	beq.n	800d40c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	6812      	ldr	r2, [r2, #0]
 800d3e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3ec:	1d1a      	adds	r2, r3, #4
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d40a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	695a      	ldr	r2, [r3, #20]
 800d412:	f248 0308 	movw	r3, #32776	; 0x8008
 800d416:	4013      	ands	r3, r2
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d01a      	beq.n	800d452 <HAL_SPI_TransmitReceive+0x1d2>
 800d41c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d017      	beq.n	800d452 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d42a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d42c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d432:	1d1a      	adds	r2, r3, #4
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d43e:	b29b      	uxth	r3, r3
 800d440:	3b01      	subs	r3, #1
 800d442:	b29a      	uxth	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d450:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d452:	f7f7 fb1f 	bl	8004a94 <HAL_GetTick>
 800d456:	4602      	mov	r2, r0
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d45e:	429a      	cmp	r2, r3
 800d460:	d803      	bhi.n	800d46a <HAL_SPI_TransmitReceive+0x1ea>
 800d462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d468:	d102      	bne.n	800d470 <HAL_SPI_TransmitReceive+0x1f0>
 800d46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d114      	bne.n	800d49a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f000 f9f1 	bl	800d858 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2200      	movs	r2, #0
 800d47a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2201      	movs	r2, #1
 800d492:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e1da      	b.n	800d850 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d49a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d193      	bne.n	800d3c8 <HAL_SPI_TransmitReceive+0x148>
 800d4a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d190      	bne.n	800d3c8 <HAL_SPI_TransmitReceive+0x148>
 800d4a6:	e1ac      	b.n	800d802 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	2b07      	cmp	r3, #7
 800d4ae:	f240 81a0 	bls.w	800d7f2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d4b2:	e0a9      	b.n	800d608 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	f003 0302 	and.w	r3, r3, #2
 800d4be:	2b02      	cmp	r3, #2
 800d4c0:	d139      	bne.n	800d536 <HAL_SPI_TransmitReceive+0x2b6>
 800d4c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d036      	beq.n	800d536 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d4c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d91c      	bls.n	800d508 <HAL_SPI_TransmitReceive+0x288>
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d018      	beq.n	800d508 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6812      	ldr	r2, [r2, #0]
 800d4e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4e6:	1d1a      	adds	r2, r3, #4
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	3b02      	subs	r3, #2
 800d4f6:	b29a      	uxth	r2, r3
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d504:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d506:	e016      	b.n	800d536 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d50c:	881a      	ldrh	r2, [r3, #0]
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d516:	1c9a      	adds	r2, r3, #2
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d522:	b29b      	uxth	r3, r3
 800d524:	3b01      	subs	r3, #1
 800d526:	b29a      	uxth	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d534:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	695b      	ldr	r3, [r3, #20]
 800d53c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d540:	2b00      	cmp	r3, #0
 800d542:	d03a      	beq.n	800d5ba <HAL_SPI_TransmitReceive+0x33a>
 800d544:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d546:	2b00      	cmp	r3, #0
 800d548:	d037      	beq.n	800d5ba <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d018      	beq.n	800d58a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d560:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d562:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d568:	1d1a      	adds	r2, r3, #4
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d574:	b29b      	uxth	r3, r3
 800d576:	3b02      	subs	r3, #2
 800d578:	b29a      	uxth	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d586:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d588:	e017      	b.n	800d5ba <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d58e:	6a3a      	ldr	r2, [r7, #32]
 800d590:	8812      	ldrh	r2, [r2, #0]
 800d592:	b292      	uxth	r2, r2
 800d594:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d59a:	1c9a      	adds	r2, r3, #2
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5ba:	f7f7 fa6b 	bl	8004a94 <HAL_GetTick>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d803      	bhi.n	800d5d2 <HAL_SPI_TransmitReceive+0x352>
 800d5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d0:	d102      	bne.n	800d5d8 <HAL_SPI_TransmitReceive+0x358>
 800d5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d117      	bne.n	800d608 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f000 f93d 	bl	800d858 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e126      	b.n	800d850 <HAL_SPI_TransmitReceive+0x5d0>
 800d602:	bf00      	nop
 800d604:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d608:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f47f af52 	bne.w	800d4b4 <HAL_SPI_TransmitReceive+0x234>
 800d610:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d612:	2b00      	cmp	r3, #0
 800d614:	f47f af4e 	bne.w	800d4b4 <HAL_SPI_TransmitReceive+0x234>
 800d618:	e0f3      	b.n	800d802 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	695b      	ldr	r3, [r3, #20]
 800d620:	f003 0302 	and.w	r3, r3, #2
 800d624:	2b02      	cmp	r3, #2
 800d626:	d15a      	bne.n	800d6de <HAL_SPI_TransmitReceive+0x45e>
 800d628:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d057      	beq.n	800d6de <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d62e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d630:	2b03      	cmp	r3, #3
 800d632:	d91c      	bls.n	800d66e <HAL_SPI_TransmitReceive+0x3ee>
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d638:	2b40      	cmp	r3, #64	; 0x40
 800d63a:	d918      	bls.n	800d66e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6812      	ldr	r2, [r2, #0]
 800d646:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d64c:	1d1a      	adds	r2, r3, #4
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d658:	b29b      	uxth	r3, r3
 800d65a:	3b04      	subs	r3, #4
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d66a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d66c:	e037      	b.n	800d6de <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d66e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d670:	2b01      	cmp	r3, #1
 800d672:	d91b      	bls.n	800d6ac <HAL_SPI_TransmitReceive+0x42c>
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d017      	beq.n	800d6ac <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d680:	881a      	ldrh	r2, [r3, #0]
 800d682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d684:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d68a:	1c9a      	adds	r2, r3, #2
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d696:	b29b      	uxth	r3, r3
 800d698:	3b02      	subs	r3, #2
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d6aa:	e018      	b.n	800d6de <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	3320      	adds	r3, #32
 800d6b6:	7812      	ldrb	r2, [r2, #0]
 800d6b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	695b      	ldr	r3, [r3, #20]
 800d6e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d05e      	beq.n	800d7aa <HAL_SPI_TransmitReceive+0x52a>
 800d6ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d05b      	beq.n	800d7aa <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	695b      	ldr	r3, [r3, #20]
 800d6f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d018      	beq.n	800d732 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d708:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d70a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d710:	1d1a      	adds	r2, r3, #4
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	3b04      	subs	r3, #4
 800d720:	b29a      	uxth	r2, r3
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d72e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d730:	e03b      	b.n	800d7aa <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d73c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d740:	d918      	bls.n	800d774 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d746:	6a3a      	ldr	r2, [r7, #32]
 800d748:	8812      	ldrh	r2, [r2, #0]
 800d74a:	b292      	uxth	r2, r2
 800d74c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d752:	1c9a      	adds	r2, r3, #2
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d75e:	b29b      	uxth	r3, r3
 800d760:	3b02      	subs	r3, #2
 800d762:	b29a      	uxth	r2, r3
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d770:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d772:	e01a      	b.n	800d7aa <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d780:	7812      	ldrb	r2, [r2, #0]
 800d782:	b2d2      	uxtb	r2, r2
 800d784:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d78a:	1c5a      	adds	r2, r3, #1
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d796:	b29b      	uxth	r3, r3
 800d798:	3b01      	subs	r3, #1
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7aa:	f7f7 f973 	bl	8004a94 <HAL_GetTick>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	1ad3      	subs	r3, r2, r3
 800d7b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d803      	bhi.n	800d7c2 <HAL_SPI_TransmitReceive+0x542>
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c0:	d102      	bne.n	800d7c8 <HAL_SPI_TransmitReceive+0x548>
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d114      	bne.n	800d7f2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f000 f845 	bl	800d858 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e02e      	b.n	800d850 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d7f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f47f af10 	bne.w	800d61a <HAL_SPI_TransmitReceive+0x39a>
 800d7fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	f47f af0c 	bne.w	800d61a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	2200      	movs	r2, #0
 800d80a:	2108      	movs	r1, #8
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f000 f8c3 	bl	800d998 <SPI_WaitOnFlagUntilTimeout>
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d007      	beq.n	800d828 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d81e:	f043 0220 	orr.w	r2, r3, #32
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 f815 	bl	800d858 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2200      	movs	r2, #0
 800d832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d844:	2b00      	cmp	r3, #0
 800d846:	d001      	beq.n	800d84c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800d848:	2301      	movs	r3, #1
 800d84a:	e001      	b.n	800d850 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800d84c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d850:	4618      	mov	r0, r3
 800d852:	3730      	adds	r7, #48	; 0x30
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	699a      	ldr	r2, [r3, #24]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f042 0208 	orr.w	r2, r2, #8
 800d876:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	699a      	ldr	r2, [r3, #24]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f042 0210 	orr.w	r2, r2, #16
 800d886:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f022 0201 	bic.w	r2, r2, #1
 800d896:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6919      	ldr	r1, [r3, #16]
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	4b3c      	ldr	r3, [pc, #240]	; (800d994 <SPI_CloseTransfer+0x13c>)
 800d8a4:	400b      	ands	r3, r1
 800d8a6:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	689a      	ldr	r2, [r3, #8]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d8b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b04      	cmp	r3, #4
 800d8c2:	d014      	beq.n	800d8ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f003 0320 	and.w	r3, r3, #32
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d00f      	beq.n	800d8ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	699a      	ldr	r2, [r3, #24]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f042 0220 	orr.w	r2, r2, #32
 800d8ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b03      	cmp	r3, #3
 800d8f8:	d014      	beq.n	800d924 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00f      	beq.n	800d924 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d90a:	f043 0204 	orr.w	r2, r3, #4
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	699a      	ldr	r2, [r3, #24]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d922:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00f      	beq.n	800d94e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d934:	f043 0201 	orr.w	r2, r3, #1
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	699a      	ldr	r2, [r3, #24]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d94c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d954:	2b00      	cmp	r3, #0
 800d956:	d00f      	beq.n	800d978 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d95e:	f043 0208 	orr.w	r2, r3, #8
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	699a      	ldr	r2, [r3, #24]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d976:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d988:	bf00      	nop
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr
 800d994:	fffffc90 	.word	0xfffffc90

0800d998 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	603b      	str	r3, [r7, #0]
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d9a8:	e010      	b.n	800d9cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9aa:	f7f7 f873 	bl	8004a94 <HAL_GetTick>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	1ad3      	subs	r3, r2, r3
 800d9b4:	69ba      	ldr	r2, [r7, #24]
 800d9b6:	429a      	cmp	r2, r3
 800d9b8:	d803      	bhi.n	800d9c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c0:	d102      	bne.n	800d9c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d101      	bne.n	800d9cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d9c8:	2303      	movs	r3, #3
 800d9ca:	e00f      	b.n	800d9ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	695a      	ldr	r2, [r3, #20]
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	68ba      	ldr	r2, [r7, #8]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	bf0c      	ite	eq
 800d9dc:	2301      	moveq	r3, #1
 800d9de:	2300      	movne	r3, #0
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	79fb      	ldrb	r3, [r7, #7]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d0df      	beq.n	800d9aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d9ea:	2300      	movs	r3, #0
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3710      	adds	r7, #16
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da00:	095b      	lsrs	r3, r3, #5
 800da02:	3301      	adds	r3, #1
 800da04:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	68db      	ldr	r3, [r3, #12]
 800da0a:	3301      	adds	r3, #1
 800da0c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	3307      	adds	r3, #7
 800da12:	08db      	lsrs	r3, r3, #3
 800da14:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	68fa      	ldr	r2, [r7, #12]
 800da1a:	fb02 f303 	mul.w	r3, r2, r3
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b082      	sub	sp, #8
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da38:	2301      	movs	r3, #1
 800da3a:	e049      	b.n	800dad0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da42:	b2db      	uxtb	r3, r3
 800da44:	2b00      	cmp	r3, #0
 800da46:	d106      	bne.n	800da56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7f5 ff33 	bl	80038bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2202      	movs	r2, #2
 800da5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	3304      	adds	r3, #4
 800da66:	4619      	mov	r1, r3
 800da68:	4610      	mov	r0, r2
 800da6a:	f000 f9ed 	bl	800de48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2201      	movs	r2, #1
 800da72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2201      	movs	r2, #1
 800da82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2201      	movs	r2, #1
 800da8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2201      	movs	r2, #1
 800da92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2201      	movs	r2, #1
 800da9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2201      	movs	r2, #1
 800daaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dace:	2300      	movs	r3, #0
}
 800dad0:	4618      	mov	r0, r3
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}

0800dad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d001      	beq.n	800daf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800daec:	2301      	movs	r3, #1
 800daee:	e04f      	b.n	800db90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2202      	movs	r2, #2
 800daf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68da      	ldr	r2, [r3, #12]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f042 0201 	orr.w	r2, r2, #1
 800db06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a23      	ldr	r2, [pc, #140]	; (800db9c <HAL_TIM_Base_Start_IT+0xc4>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d01d      	beq.n	800db4e <HAL_TIM_Base_Start_IT+0x76>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db1a:	d018      	beq.n	800db4e <HAL_TIM_Base_Start_IT+0x76>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a1f      	ldr	r2, [pc, #124]	; (800dba0 <HAL_TIM_Base_Start_IT+0xc8>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d013      	beq.n	800db4e <HAL_TIM_Base_Start_IT+0x76>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a1e      	ldr	r2, [pc, #120]	; (800dba4 <HAL_TIM_Base_Start_IT+0xcc>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d00e      	beq.n	800db4e <HAL_TIM_Base_Start_IT+0x76>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a1c      	ldr	r2, [pc, #112]	; (800dba8 <HAL_TIM_Base_Start_IT+0xd0>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d009      	beq.n	800db4e <HAL_TIM_Base_Start_IT+0x76>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a1b      	ldr	r2, [pc, #108]	; (800dbac <HAL_TIM_Base_Start_IT+0xd4>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d004      	beq.n	800db4e <HAL_TIM_Base_Start_IT+0x76>
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a19      	ldr	r2, [pc, #100]	; (800dbb0 <HAL_TIM_Base_Start_IT+0xd8>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d115      	bne.n	800db7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	689a      	ldr	r2, [r3, #8]
 800db54:	4b17      	ldr	r3, [pc, #92]	; (800dbb4 <HAL_TIM_Base_Start_IT+0xdc>)
 800db56:	4013      	ands	r3, r2
 800db58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2b06      	cmp	r3, #6
 800db5e:	d015      	beq.n	800db8c <HAL_TIM_Base_Start_IT+0xb4>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db66:	d011      	beq.n	800db8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f042 0201 	orr.w	r2, r2, #1
 800db76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db78:	e008      	b.n	800db8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f042 0201 	orr.w	r2, r2, #1
 800db88:	601a      	str	r2, [r3, #0]
 800db8a:	e000      	b.n	800db8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	40010000 	.word	0x40010000
 800dba0:	40000400 	.word	0x40000400
 800dba4:	40000800 	.word	0x40000800
 800dba8:	40000c00 	.word	0x40000c00
 800dbac:	40010400 	.word	0x40010400
 800dbb0:	40001800 	.word	0x40001800
 800dbb4:	00010007 	.word	0x00010007

0800dbb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	691b      	ldr	r3, [r3, #16]
 800dbc6:	f003 0302 	and.w	r3, r3, #2
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d122      	bne.n	800dc14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	f003 0302 	and.w	r3, r3, #2
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d11b      	bne.n	800dc14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f06f 0202 	mvn.w	r2, #2
 800dbe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	f003 0303 	and.w	r3, r3, #3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d003      	beq.n	800dc02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f905 	bl	800de0a <HAL_TIM_IC_CaptureCallback>
 800dc00:	e005      	b.n	800dc0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f8f7 	bl	800ddf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 f908 	bl	800de1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	691b      	ldr	r3, [r3, #16]
 800dc1a:	f003 0304 	and.w	r3, r3, #4
 800dc1e:	2b04      	cmp	r3, #4
 800dc20:	d122      	bne.n	800dc68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	f003 0304 	and.w	r3, r3, #4
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	d11b      	bne.n	800dc68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f06f 0204 	mvn.w	r2, #4
 800dc38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 f8db 	bl	800de0a <HAL_TIM_IC_CaptureCallback>
 800dc54:	e005      	b.n	800dc62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f8cd 	bl	800ddf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 f8de 	bl	800de1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	f003 0308 	and.w	r3, r3, #8
 800dc72:	2b08      	cmp	r3, #8
 800dc74:	d122      	bne.n	800dcbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	f003 0308 	and.w	r3, r3, #8
 800dc80:	2b08      	cmp	r3, #8
 800dc82:	d11b      	bne.n	800dcbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f06f 0208 	mvn.w	r2, #8
 800dc8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2204      	movs	r2, #4
 800dc92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	69db      	ldr	r3, [r3, #28]
 800dc9a:	f003 0303 	and.w	r3, r3, #3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d003      	beq.n	800dcaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f8b1 	bl	800de0a <HAL_TIM_IC_CaptureCallback>
 800dca8:	e005      	b.n	800dcb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f8a3 	bl	800ddf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 f8b4 	bl	800de1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	f003 0310 	and.w	r3, r3, #16
 800dcc6:	2b10      	cmp	r3, #16
 800dcc8:	d122      	bne.n	800dd10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	f003 0310 	and.w	r3, r3, #16
 800dcd4:	2b10      	cmp	r3, #16
 800dcd6:	d11b      	bne.n	800dd10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f06f 0210 	mvn.w	r2, #16
 800dce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2208      	movs	r2, #8
 800dce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	69db      	ldr	r3, [r3, #28]
 800dcee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d003      	beq.n	800dcfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f887 	bl	800de0a <HAL_TIM_IC_CaptureCallback>
 800dcfc:	e005      	b.n	800dd0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f879 	bl	800ddf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f88a 	bl	800de1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d10e      	bne.n	800dd3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	f003 0301 	and.w	r3, r3, #1
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d107      	bne.n	800dd3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f06f 0201 	mvn.w	r2, #1
 800dd34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7f5 ff7c 	bl	8003c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd46:	2b80      	cmp	r3, #128	; 0x80
 800dd48:	d10e      	bne.n	800dd68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd54:	2b80      	cmp	r3, #128	; 0x80
 800dd56:	d107      	bne.n	800dd68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dd60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f99c 	bl	800e0a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	691b      	ldr	r3, [r3, #16]
 800dd6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd76:	d10e      	bne.n	800dd96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd82:	2b80      	cmp	r3, #128	; 0x80
 800dd84:	d107      	bne.n	800dd96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f98f 	bl	800e0b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda0:	2b40      	cmp	r3, #64	; 0x40
 800dda2:	d10e      	bne.n	800ddc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddae:	2b40      	cmp	r3, #64	; 0x40
 800ddb0:	d107      	bne.n	800ddc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ddba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 f838 	bl	800de32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	f003 0320 	and.w	r3, r3, #32
 800ddcc:	2b20      	cmp	r3, #32
 800ddce:	d10e      	bne.n	800ddee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	f003 0320 	and.w	r3, r3, #32
 800ddda:	2b20      	cmp	r3, #32
 800dddc:	d107      	bne.n	800ddee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f06f 0220 	mvn.w	r2, #32
 800dde6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 f94f 	bl	800e08c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ddee:	bf00      	nop
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ddf6:	b480      	push	{r7}
 800ddf8:	b083      	sub	sp, #12
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ddfe:	bf00      	nop
 800de00:	370c      	adds	r7, #12
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr

0800de0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de0a:	b480      	push	{r7}
 800de0c:	b083      	sub	sp, #12
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de12:	bf00      	nop
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr

0800de1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de1e:	b480      	push	{r7}
 800de20:	b083      	sub	sp, #12
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de26:	bf00      	nop
 800de28:	370c      	adds	r7, #12
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr

0800de32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de32:	b480      	push	{r7}
 800de34:	b083      	sub	sp, #12
 800de36:	af00      	add	r7, sp, #0
 800de38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de3a:	bf00      	nop
 800de3c:	370c      	adds	r7, #12
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr
	...

0800de48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a40      	ldr	r2, [pc, #256]	; (800df5c <TIM_Base_SetConfig+0x114>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d013      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de66:	d00f      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a3d      	ldr	r2, [pc, #244]	; (800df60 <TIM_Base_SetConfig+0x118>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d00b      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a3c      	ldr	r2, [pc, #240]	; (800df64 <TIM_Base_SetConfig+0x11c>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d007      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a3b      	ldr	r2, [pc, #236]	; (800df68 <TIM_Base_SetConfig+0x120>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d003      	beq.n	800de88 <TIM_Base_SetConfig+0x40>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	4a3a      	ldr	r2, [pc, #232]	; (800df6c <TIM_Base_SetConfig+0x124>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d108      	bne.n	800de9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	68fa      	ldr	r2, [r7, #12]
 800de96:	4313      	orrs	r3, r2
 800de98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a2f      	ldr	r2, [pc, #188]	; (800df5c <TIM_Base_SetConfig+0x114>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d01f      	beq.n	800dee2 <TIM_Base_SetConfig+0x9a>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dea8:	d01b      	beq.n	800dee2 <TIM_Base_SetConfig+0x9a>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a2c      	ldr	r2, [pc, #176]	; (800df60 <TIM_Base_SetConfig+0x118>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d017      	beq.n	800dee2 <TIM_Base_SetConfig+0x9a>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4a2b      	ldr	r2, [pc, #172]	; (800df64 <TIM_Base_SetConfig+0x11c>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d013      	beq.n	800dee2 <TIM_Base_SetConfig+0x9a>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4a2a      	ldr	r2, [pc, #168]	; (800df68 <TIM_Base_SetConfig+0x120>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d00f      	beq.n	800dee2 <TIM_Base_SetConfig+0x9a>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	4a29      	ldr	r2, [pc, #164]	; (800df6c <TIM_Base_SetConfig+0x124>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d00b      	beq.n	800dee2 <TIM_Base_SetConfig+0x9a>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	4a28      	ldr	r2, [pc, #160]	; (800df70 <TIM_Base_SetConfig+0x128>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d007      	beq.n	800dee2 <TIM_Base_SetConfig+0x9a>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4a27      	ldr	r2, [pc, #156]	; (800df74 <TIM_Base_SetConfig+0x12c>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d003      	beq.n	800dee2 <TIM_Base_SetConfig+0x9a>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	4a26      	ldr	r2, [pc, #152]	; (800df78 <TIM_Base_SetConfig+0x130>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d108      	bne.n	800def4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	68db      	ldr	r3, [r3, #12]
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	4313      	orrs	r3, r2
 800def2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	695b      	ldr	r3, [r3, #20]
 800defe:	4313      	orrs	r3, r2
 800df00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	689a      	ldr	r2, [r3, #8]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	4a10      	ldr	r2, [pc, #64]	; (800df5c <TIM_Base_SetConfig+0x114>)
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d00f      	beq.n	800df40 <TIM_Base_SetConfig+0xf8>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	4a12      	ldr	r2, [pc, #72]	; (800df6c <TIM_Base_SetConfig+0x124>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d00b      	beq.n	800df40 <TIM_Base_SetConfig+0xf8>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a11      	ldr	r2, [pc, #68]	; (800df70 <TIM_Base_SetConfig+0x128>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d007      	beq.n	800df40 <TIM_Base_SetConfig+0xf8>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	4a10      	ldr	r2, [pc, #64]	; (800df74 <TIM_Base_SetConfig+0x12c>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d003      	beq.n	800df40 <TIM_Base_SetConfig+0xf8>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	4a0f      	ldr	r2, [pc, #60]	; (800df78 <TIM_Base_SetConfig+0x130>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d103      	bne.n	800df48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	691a      	ldr	r2, [r3, #16]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	615a      	str	r2, [r3, #20]
}
 800df4e:	bf00      	nop
 800df50:	3714      	adds	r7, #20
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr
 800df5a:	bf00      	nop
 800df5c:	40010000 	.word	0x40010000
 800df60:	40000400 	.word	0x40000400
 800df64:	40000800 	.word	0x40000800
 800df68:	40000c00 	.word	0x40000c00
 800df6c:	40010400 	.word	0x40010400
 800df70:	40014000 	.word	0x40014000
 800df74:	40014400 	.word	0x40014400
 800df78:	40014800 	.word	0x40014800

0800df7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b085      	sub	sp, #20
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df8c:	2b01      	cmp	r3, #1
 800df8e:	d101      	bne.n	800df94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df90:	2302      	movs	r3, #2
 800df92:	e068      	b.n	800e066 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2202      	movs	r2, #2
 800dfa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	689b      	ldr	r3, [r3, #8]
 800dfb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4a2e      	ldr	r2, [pc, #184]	; (800e074 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d004      	beq.n	800dfc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a2d      	ldr	r2, [pc, #180]	; (800e078 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d108      	bne.n	800dfda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dfce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfe0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a1e      	ldr	r2, [pc, #120]	; (800e074 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d01d      	beq.n	800e03a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e006:	d018      	beq.n	800e03a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4a1b      	ldr	r2, [pc, #108]	; (800e07c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d013      	beq.n	800e03a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4a1a      	ldr	r2, [pc, #104]	; (800e080 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d00e      	beq.n	800e03a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a18      	ldr	r2, [pc, #96]	; (800e084 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d009      	beq.n	800e03a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4a13      	ldr	r2, [pc, #76]	; (800e078 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e02c:	4293      	cmp	r3, r2
 800e02e:	d004      	beq.n	800e03a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a14      	ldr	r2, [pc, #80]	; (800e088 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d10c      	bne.n	800e054 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	689b      	ldr	r3, [r3, #8]
 800e046:	68ba      	ldr	r2, [r7, #8]
 800e048:	4313      	orrs	r3, r2
 800e04a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2201      	movs	r2, #1
 800e058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3714      	adds	r7, #20
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop
 800e074:	40010000 	.word	0x40010000
 800e078:	40010400 	.word	0x40010400
 800e07c:	40000400 	.word	0x40000400
 800e080:	40000800 	.word	0x40000800
 800e084:	40000c00 	.word	0x40000c00
 800e088:	40001800 	.word	0x40001800

0800e08c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e094:	bf00      	nop
 800e096:	370c      	adds	r7, #12
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e0a8:	bf00      	nop
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b083      	sub	sp, #12
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e0bc:	bf00      	nop
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d101      	bne.n	800e0da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	e042      	b.n	800e160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d106      	bne.n	800e0f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f7f5 fc0d 	bl	800390c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2224      	movs	r2, #36	; 0x24
 800e0f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f022 0201 	bic.w	r2, r2, #1
 800e108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fc26 	bl	800e95c <UART_SetConfig>
 800e110:	4603      	mov	r3, r0
 800e112:	2b01      	cmp	r3, #1
 800e114:	d101      	bne.n	800e11a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e022      	b.n	800e160 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d002      	beq.n	800e128 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f001 f97a 	bl	800f41c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	685a      	ldr	r2, [r3, #4]
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	689a      	ldr	r2, [r3, #8]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	681a      	ldr	r2, [r3, #0]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f042 0201 	orr.w	r2, r2, #1
 800e156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e158:	6878      	ldr	r0, [r7, #4]
 800e15a:	f001 fa01 	bl	800f560 <UART_CheckIdleState>
 800e15e:	4603      	mov	r3, r0
}
 800e160:	4618      	mov	r0, r3
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	60f8      	str	r0, [r7, #12]
 800e170:	60b9      	str	r1, [r7, #8]
 800e172:	4613      	mov	r3, r2
 800e174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e17c:	2b20      	cmp	r3, #32
 800e17e:	d131      	bne.n	800e1e4 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d002      	beq.n	800e18c <HAL_UART_Receive_IT+0x24>
 800e186:	88fb      	ldrh	r3, [r7, #6]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d101      	bne.n	800e190 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e02a      	b.n	800e1e6 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e196:	2b01      	cmp	r3, #1
 800e198:	d101      	bne.n	800e19e <HAL_UART_Receive_IT+0x36>
 800e19a:	2302      	movs	r3, #2
 800e19c:	e023      	b.n	800e1e6 <HAL_UART_Receive_IT+0x7e>
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a0f      	ldr	r2, [pc, #60]	; (800e1f0 <HAL_UART_Receive_IT+0x88>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d00e      	beq.n	800e1d4 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d007      	beq.n	800e1d4 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e1d2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e1d4:	88fb      	ldrh	r3, [r7, #6]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	68b9      	ldr	r1, [r7, #8]
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f001 fa8c 	bl	800f6f8 <UART_Start_Receive_IT>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	e000      	b.n	800e1e6 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e1e4:	2302      	movs	r3, #2
  }
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3710      	adds	r7, #16
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	58000c00 	.word	0x58000c00

0800e1f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	4613      	mov	r3, r2
 800e200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e208:	2b20      	cmp	r3, #32
 800e20a:	d168      	bne.n	800e2de <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d002      	beq.n	800e218 <HAL_UART_Transmit_DMA+0x24>
 800e212:	88fb      	ldrh	r3, [r7, #6]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d101      	bne.n	800e21c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	e061      	b.n	800e2e0 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e222:	2b01      	cmp	r3, #1
 800e224:	d101      	bne.n	800e22a <HAL_UART_Transmit_DMA+0x36>
 800e226:	2302      	movs	r3, #2
 800e228:	e05a      	b.n	800e2e0 <HAL_UART_Transmit_DMA+0xec>
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	88fa      	ldrh	r2, [r7, #6]
 800e23c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	88fa      	ldrh	r2, [r7, #6]
 800e244:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	2221      	movs	r2, #33	; 0x21
 800e254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d02c      	beq.n	800e2ba <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e264:	4a20      	ldr	r2, [pc, #128]	; (800e2e8 <HAL_UART_Transmit_DMA+0xf4>)
 800e266:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e26c:	4a1f      	ldr	r2, [pc, #124]	; (800e2ec <HAL_UART_Transmit_DMA+0xf8>)
 800e26e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e274:	4a1e      	ldr	r2, [pc, #120]	; (800e2f0 <HAL_UART_Transmit_DMA+0xfc>)
 800e276:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e27c:	2200      	movs	r2, #0
 800e27e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e288:	4619      	mov	r1, r3
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	3328      	adds	r3, #40	; 0x28
 800e290:	461a      	mov	r2, r3
 800e292:	88fb      	ldrh	r3, [r7, #6]
 800e294:	f7f7 f8a6 	bl	80053e4 <HAL_DMA_Start_IT>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00d      	beq.n	800e2ba <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2210      	movs	r2, #16
 800e2a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2220      	movs	r2, #32
 800e2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e012      	b.n	800e2e0 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2240      	movs	r2, #64	; 0x40
 800e2c0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	689a      	ldr	r2, [r3, #8]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e2d8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	e000      	b.n	800e2e0 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800e2de:	2302      	movs	r3, #2
  }
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3710      	adds	r7, #16
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	0800f9f1 	.word	0x0800f9f1
 800e2ec:	0800fa41 	.word	0x0800fa41
 800e2f0:	0800fb2b 	.word	0x0800fb2b

0800e2f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	4613      	mov	r3, r2
 800e300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e308:	2b20      	cmp	r3, #32
 800e30a:	d131      	bne.n	800e370 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d002      	beq.n	800e318 <HAL_UART_Receive_DMA+0x24>
 800e312:	88fb      	ldrh	r3, [r7, #6]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d101      	bne.n	800e31c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e318:	2301      	movs	r3, #1
 800e31a:	e02a      	b.n	800e372 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e322:	2b01      	cmp	r3, #1
 800e324:	d101      	bne.n	800e32a <HAL_UART_Receive_DMA+0x36>
 800e326:	2302      	movs	r3, #2
 800e328:	e023      	b.n	800e372 <HAL_UART_Receive_DMA+0x7e>
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a0f      	ldr	r2, [pc, #60]	; (800e37c <HAL_UART_Receive_DMA+0x88>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d00e      	beq.n	800e360 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d007      	beq.n	800e360 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e35e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e360:	88fb      	ldrh	r3, [r7, #6]
 800e362:	461a      	mov	r2, r3
 800e364:	68b9      	ldr	r1, [r7, #8]
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f001 fa84 	bl	800f874 <UART_Start_Receive_DMA>
 800e36c:	4603      	mov	r3, r0
 800e36e:	e000      	b.n	800e372 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e370:	2302      	movs	r3, #2
  }
}
 800e372:	4618      	mov	r0, r3
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	58000c00 	.word	0x58000c00

0800e380 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b088      	sub	sp, #32
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	69db      	ldr	r3, [r3, #28]
 800e38e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e3a0:	69fa      	ldr	r2, [r7, #28]
 800e3a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800e3a6:	4013      	ands	r3, r2
 800e3a8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e3aa:	693b      	ldr	r3, [r7, #16]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d118      	bne.n	800e3e2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	f003 0320 	and.w	r3, r3, #32
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d013      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	f003 0320 	and.w	r3, r3, #32
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d104      	bne.n	800e3ce <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d009      	beq.n	800e3e2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f000 8282 	beq.w	800e8dc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	4798      	blx	r3
      }
      return;
 800e3e0:	e27c      	b.n	800e8dc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	f000 80ef 	beq.w	800e5c8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e3ea:	697a      	ldr	r2, [r7, #20]
 800e3ec:	4b73      	ldr	r3, [pc, #460]	; (800e5bc <HAL_UART_IRQHandler+0x23c>)
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d105      	bne.n	800e400 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e3f4:	69ba      	ldr	r2, [r7, #24]
 800e3f6:	4b72      	ldr	r3, [pc, #456]	; (800e5c0 <HAL_UART_IRQHandler+0x240>)
 800e3f8:	4013      	ands	r3, r2
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	f000 80e4 	beq.w	800e5c8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	f003 0301 	and.w	r3, r3, #1
 800e406:	2b00      	cmp	r3, #0
 800e408:	d010      	beq.n	800e42c <HAL_UART_IRQHandler+0xac>
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e410:	2b00      	cmp	r3, #0
 800e412:	d00b      	beq.n	800e42c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	2201      	movs	r2, #1
 800e41a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e422:	f043 0201 	orr.w	r2, r3, #1
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	f003 0302 	and.w	r3, r3, #2
 800e432:	2b00      	cmp	r3, #0
 800e434:	d010      	beq.n	800e458 <HAL_UART_IRQHandler+0xd8>
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	f003 0301 	and.w	r3, r3, #1
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d00b      	beq.n	800e458 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2202      	movs	r2, #2
 800e446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e44e:	f043 0204 	orr.w	r2, r3, #4
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	f003 0304 	and.w	r3, r3, #4
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d010      	beq.n	800e484 <HAL_UART_IRQHandler+0x104>
 800e462:	697b      	ldr	r3, [r7, #20]
 800e464:	f003 0301 	and.w	r3, r3, #1
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00b      	beq.n	800e484 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2204      	movs	r2, #4
 800e472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e47a:	f043 0202 	orr.w	r2, r3, #2
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	f003 0308 	and.w	r3, r3, #8
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d015      	beq.n	800e4ba <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	f003 0320 	and.w	r3, r3, #32
 800e494:	2b00      	cmp	r3, #0
 800e496:	d104      	bne.n	800e4a2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e498:	697a      	ldr	r2, [r7, #20]
 800e49a:	4b48      	ldr	r3, [pc, #288]	; (800e5bc <HAL_UART_IRQHandler+0x23c>)
 800e49c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00b      	beq.n	800e4ba <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2208      	movs	r2, #8
 800e4a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4b0:	f043 0208 	orr.w	r2, r3, #8
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d011      	beq.n	800e4e8 <HAL_UART_IRQHandler+0x168>
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00c      	beq.n	800e4e8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4de:	f043 0220 	orr.w	r2, r3, #32
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f000 81f6 	beq.w	800e8e0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	f003 0320 	and.w	r3, r3, #32
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d011      	beq.n	800e522 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e4fe:	69bb      	ldr	r3, [r7, #24]
 800e500:	f003 0320 	and.w	r3, r3, #32
 800e504:	2b00      	cmp	r3, #0
 800e506:	d104      	bne.n	800e512 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d007      	beq.n	800e522 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e516:	2b00      	cmp	r3, #0
 800e518:	d003      	beq.n	800e522 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e528:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	689b      	ldr	r3, [r3, #8]
 800e530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e534:	2b40      	cmp	r3, #64	; 0x40
 800e536:	d004      	beq.n	800e542 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d031      	beq.n	800e5a6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f001 fa22 	bl	800f98c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e552:	2b40      	cmp	r3, #64	; 0x40
 800e554:	d123      	bne.n	800e59e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	689a      	ldr	r2, [r3, #8]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e564:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d013      	beq.n	800e596 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e572:	4a14      	ldr	r2, [pc, #80]	; (800e5c4 <HAL_UART_IRQHandler+0x244>)
 800e574:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7f7 fcba 	bl	8005ef4 <HAL_DMA_Abort_IT>
 800e580:	4603      	mov	r3, r0
 800e582:	2b00      	cmp	r3, #0
 800e584:	d017      	beq.n	800e5b6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e590:	4610      	mov	r0, r2
 800e592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e594:	e00f      	b.n	800e5b6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 f9ca 	bl	800e930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e59c:	e00b      	b.n	800e5b6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 f9c6 	bl	800e930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5a4:	e007      	b.n	800e5b6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f9c2 	bl	800e930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e5b4:	e194      	b.n	800e8e0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5b6:	bf00      	nop
    return;
 800e5b8:	e192      	b.n	800e8e0 <HAL_UART_IRQHandler+0x560>
 800e5ba:	bf00      	nop
 800e5bc:	10000001 	.word	0x10000001
 800e5c0:	04000120 	.word	0x04000120
 800e5c4:	0800fbab 	.word	0x0800fbab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	f040 810f 	bne.w	800e7f0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	f003 0310 	and.w	r3, r3, #16
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f000 8109 	beq.w	800e7f0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	f003 0310 	and.w	r3, r3, #16
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f000 8103 	beq.w	800e7f0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2210      	movs	r2, #16
 800e5f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5fc:	2b40      	cmp	r3, #64	; 0x40
 800e5fe:	f040 80bb 	bne.w	800e778 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a96      	ldr	r2, [pc, #600]	; (800e864 <HAL_UART_IRQHandler+0x4e4>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d059      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	4a94      	ldr	r2, [pc, #592]	; (800e868 <HAL_UART_IRQHandler+0x4e8>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d053      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a92      	ldr	r2, [pc, #584]	; (800e86c <HAL_UART_IRQHandler+0x4ec>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d04d      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a90      	ldr	r2, [pc, #576]	; (800e870 <HAL_UART_IRQHandler+0x4f0>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d047      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4a8e      	ldr	r2, [pc, #568]	; (800e874 <HAL_UART_IRQHandler+0x4f4>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d041      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a8c      	ldr	r2, [pc, #560]	; (800e878 <HAL_UART_IRQHandler+0x4f8>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d03b      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a8a      	ldr	r2, [pc, #552]	; (800e87c <HAL_UART_IRQHandler+0x4fc>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d035      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a88      	ldr	r2, [pc, #544]	; (800e880 <HAL_UART_IRQHandler+0x500>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d02f      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a86      	ldr	r2, [pc, #536]	; (800e884 <HAL_UART_IRQHandler+0x504>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d029      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4a84      	ldr	r2, [pc, #528]	; (800e888 <HAL_UART_IRQHandler+0x508>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d023      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a82      	ldr	r2, [pc, #520]	; (800e88c <HAL_UART_IRQHandler+0x50c>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d01d      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a80      	ldr	r2, [pc, #512]	; (800e890 <HAL_UART_IRQHandler+0x510>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d017      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a7e      	ldr	r2, [pc, #504]	; (800e894 <HAL_UART_IRQHandler+0x514>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d011      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a7c      	ldr	r2, [pc, #496]	; (800e898 <HAL_UART_IRQHandler+0x518>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d00b      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a7a      	ldr	r2, [pc, #488]	; (800e89c <HAL_UART_IRQHandler+0x51c>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d005      	beq.n	800e6c2 <HAL_UART_IRQHandler+0x342>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a78      	ldr	r2, [pc, #480]	; (800e8a0 <HAL_UART_IRQHandler+0x520>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d105      	bne.n	800e6ce <HAL_UART_IRQHandler+0x34e>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	685b      	ldr	r3, [r3, #4]
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	e004      	b.n	800e6d8 <HAL_UART_IRQHandler+0x358>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800e6da:	893b      	ldrh	r3, [r7, #8]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f000 8101 	beq.w	800e8e4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e6e8:	893a      	ldrh	r2, [r7, #8]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	f080 80fa 	bcs.w	800e8e4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	893a      	ldrh	r2, [r7, #8]
 800e6f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6fc:	69db      	ldr	r3, [r3, #28]
 800e6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e702:	d02b      	beq.n	800e75c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e712:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	689a      	ldr	r2, [r3, #8]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f022 0201 	bic.w	r2, r2, #1
 800e722:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	689a      	ldr	r2, [r3, #8]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e732:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2220      	movs	r2, #32
 800e738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2200      	movs	r2, #0
 800e740:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f022 0210 	bic.w	r2, r2, #16
 800e750:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e756:	4618      	mov	r0, r3
 800e758:	f7f7 f8ae 	bl	80058b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e768:	b29b      	uxth	r3, r3
 800e76a:	1ad3      	subs	r3, r2, r3
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	4619      	mov	r1, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 f8e7 	bl	800e944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e776:	e0b5      	b.n	800e8e4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e784:	b29b      	uxth	r3, r3
 800e786:	1ad3      	subs	r3, r2, r3
 800e788:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e790:	b29b      	uxth	r3, r3
 800e792:	2b00      	cmp	r3, #0
 800e794:	f000 80a8 	beq.w	800e8e8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800e798:	897b      	ldrh	r3, [r7, #10]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f000 80a4 	beq.w	800e8e8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e7ae:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	6899      	ldr	r1, [r3, #8]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	4b3a      	ldr	r3, [pc, #232]	; (800e8a4 <HAL_UART_IRQHandler+0x524>)
 800e7bc:	400b      	ands	r3, r1
 800e7be:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2220      	movs	r2, #32
 800e7c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f022 0210 	bic.w	r2, r2, #16
 800e7e2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e7e4:	897b      	ldrh	r3, [r7, #10]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 f8ab 	bl	800e944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e7ee:	e07b      	b.n	800e8e8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d00d      	beq.n	800e816 <HAL_UART_IRQHandler+0x496>
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e800:	2b00      	cmp	r3, #0
 800e802:	d008      	beq.n	800e816 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e80c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f001 fcd8 	bl	80101c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e814:	e06b      	b.n	800e8ee <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d012      	beq.n	800e846 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e826:	2b00      	cmp	r3, #0
 800e828:	d104      	bne.n	800e834 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e830:	2b00      	cmp	r3, #0
 800e832:	d008      	beq.n	800e846 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d057      	beq.n	800e8ec <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	4798      	blx	r3
    }
    return;
 800e844:	e052      	b.n	800e8ec <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e846:	69fb      	ldr	r3, [r7, #28]
 800e848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d02b      	beq.n	800e8a8 <HAL_UART_IRQHandler+0x528>
 800e850:	69bb      	ldr	r3, [r7, #24]
 800e852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e856:	2b00      	cmp	r3, #0
 800e858:	d026      	beq.n	800e8a8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f001 f9bb 	bl	800fbd6 <UART_EndTransmit_IT>
    return;
 800e860:	e045      	b.n	800e8ee <HAL_UART_IRQHandler+0x56e>
 800e862:	bf00      	nop
 800e864:	40020010 	.word	0x40020010
 800e868:	40020028 	.word	0x40020028
 800e86c:	40020040 	.word	0x40020040
 800e870:	40020058 	.word	0x40020058
 800e874:	40020070 	.word	0x40020070
 800e878:	40020088 	.word	0x40020088
 800e87c:	400200a0 	.word	0x400200a0
 800e880:	400200b8 	.word	0x400200b8
 800e884:	40020410 	.word	0x40020410
 800e888:	40020428 	.word	0x40020428
 800e88c:	40020440 	.word	0x40020440
 800e890:	40020458 	.word	0x40020458
 800e894:	40020470 	.word	0x40020470
 800e898:	40020488 	.word	0x40020488
 800e89c:	400204a0 	.word	0x400204a0
 800e8a0:	400204b8 	.word	0x400204b8
 800e8a4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e8a8:	69fb      	ldr	r3, [r7, #28]
 800e8aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d008      	beq.n	800e8c4 <HAL_UART_IRQHandler+0x544>
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f001 fc95 	bl	80101ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8c2:	e014      	b.n	800e8ee <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00f      	beq.n	800e8ee <HAL_UART_IRQHandler+0x56e>
 800e8ce:	69bb      	ldr	r3, [r7, #24]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	da0c      	bge.n	800e8ee <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f001 fc7f 	bl	80101d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e8da:	e008      	b.n	800e8ee <HAL_UART_IRQHandler+0x56e>
      return;
 800e8dc:	bf00      	nop
 800e8de:	e006      	b.n	800e8ee <HAL_UART_IRQHandler+0x56e>
    return;
 800e8e0:	bf00      	nop
 800e8e2:	e004      	b.n	800e8ee <HAL_UART_IRQHandler+0x56e>
      return;
 800e8e4:	bf00      	nop
 800e8e6:	e002      	b.n	800e8ee <HAL_UART_IRQHandler+0x56e>
      return;
 800e8e8:	bf00      	nop
 800e8ea:	e000      	b.n	800e8ee <HAL_UART_IRQHandler+0x56e>
    return;
 800e8ec:	bf00      	nop
  }
}
 800e8ee:	3720      	adds	r7, #32
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e8fc:	bf00      	nop
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e910:	bf00      	nop
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e938:	bf00      	nop
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	460b      	mov	r3, r1
 800e94e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e950:	bf00      	nop
 800e952:	370c      	adds	r7, #12
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr

0800e95c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e95c:	b5b0      	push	{r4, r5, r7, lr}
 800e95e:	b08e      	sub	sp, #56	; 0x38
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e964:	2300      	movs	r3, #0
 800e966:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	689a      	ldr	r2, [r3, #8]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	431a      	orrs	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	695b      	ldr	r3, [r3, #20]
 800e978:	431a      	orrs	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	69db      	ldr	r3, [r3, #28]
 800e97e:	4313      	orrs	r3, r2
 800e980:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	4bbf      	ldr	r3, [pc, #764]	; (800ec88 <UART_SetConfig+0x32c>)
 800e98a:	4013      	ands	r3, r2
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	6812      	ldr	r2, [r2, #0]
 800e990:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e992:	430b      	orrs	r3, r1
 800e994:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	68da      	ldr	r2, [r3, #12]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	430a      	orrs	r2, r1
 800e9aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	699b      	ldr	r3, [r3, #24]
 800e9b0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4ab5      	ldr	r2, [pc, #724]	; (800ec8c <UART_SetConfig+0x330>)
 800e9b8:	4293      	cmp	r3, r2
 800e9ba:	d004      	beq.n	800e9c6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6a1b      	ldr	r3, [r3, #32]
 800e9c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	689a      	ldr	r2, [r3, #8]
 800e9cc:	4bb0      	ldr	r3, [pc, #704]	; (800ec90 <UART_SetConfig+0x334>)
 800e9ce:	4013      	ands	r3, r2
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	6812      	ldr	r2, [r2, #0]
 800e9d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e9d6:	430b      	orrs	r3, r1
 800e9d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e0:	f023 010f 	bic.w	r1, r3, #15
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	430a      	orrs	r2, r1
 800e9ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4aa7      	ldr	r2, [pc, #668]	; (800ec94 <UART_SetConfig+0x338>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d176      	bne.n	800eae8 <UART_SetConfig+0x18c>
 800e9fa:	4ba7      	ldr	r3, [pc, #668]	; (800ec98 <UART_SetConfig+0x33c>)
 800e9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea02:	2b28      	cmp	r3, #40	; 0x28
 800ea04:	d86c      	bhi.n	800eae0 <UART_SetConfig+0x184>
 800ea06:	a201      	add	r2, pc, #4	; (adr r2, 800ea0c <UART_SetConfig+0xb0>)
 800ea08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea0c:	0800eab1 	.word	0x0800eab1
 800ea10:	0800eae1 	.word	0x0800eae1
 800ea14:	0800eae1 	.word	0x0800eae1
 800ea18:	0800eae1 	.word	0x0800eae1
 800ea1c:	0800eae1 	.word	0x0800eae1
 800ea20:	0800eae1 	.word	0x0800eae1
 800ea24:	0800eae1 	.word	0x0800eae1
 800ea28:	0800eae1 	.word	0x0800eae1
 800ea2c:	0800eab9 	.word	0x0800eab9
 800ea30:	0800eae1 	.word	0x0800eae1
 800ea34:	0800eae1 	.word	0x0800eae1
 800ea38:	0800eae1 	.word	0x0800eae1
 800ea3c:	0800eae1 	.word	0x0800eae1
 800ea40:	0800eae1 	.word	0x0800eae1
 800ea44:	0800eae1 	.word	0x0800eae1
 800ea48:	0800eae1 	.word	0x0800eae1
 800ea4c:	0800eac1 	.word	0x0800eac1
 800ea50:	0800eae1 	.word	0x0800eae1
 800ea54:	0800eae1 	.word	0x0800eae1
 800ea58:	0800eae1 	.word	0x0800eae1
 800ea5c:	0800eae1 	.word	0x0800eae1
 800ea60:	0800eae1 	.word	0x0800eae1
 800ea64:	0800eae1 	.word	0x0800eae1
 800ea68:	0800eae1 	.word	0x0800eae1
 800ea6c:	0800eac9 	.word	0x0800eac9
 800ea70:	0800eae1 	.word	0x0800eae1
 800ea74:	0800eae1 	.word	0x0800eae1
 800ea78:	0800eae1 	.word	0x0800eae1
 800ea7c:	0800eae1 	.word	0x0800eae1
 800ea80:	0800eae1 	.word	0x0800eae1
 800ea84:	0800eae1 	.word	0x0800eae1
 800ea88:	0800eae1 	.word	0x0800eae1
 800ea8c:	0800ead1 	.word	0x0800ead1
 800ea90:	0800eae1 	.word	0x0800eae1
 800ea94:	0800eae1 	.word	0x0800eae1
 800ea98:	0800eae1 	.word	0x0800eae1
 800ea9c:	0800eae1 	.word	0x0800eae1
 800eaa0:	0800eae1 	.word	0x0800eae1
 800eaa4:	0800eae1 	.word	0x0800eae1
 800eaa8:	0800eae1 	.word	0x0800eae1
 800eaac:	0800ead9 	.word	0x0800ead9
 800eab0:	2301      	movs	r3, #1
 800eab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eab6:	e222      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eab8:	2304      	movs	r3, #4
 800eaba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eabe:	e21e      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eac0:	2308      	movs	r3, #8
 800eac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eac6:	e21a      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eac8:	2310      	movs	r3, #16
 800eaca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eace:	e216      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ead0:	2320      	movs	r3, #32
 800ead2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ead6:	e212      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ead8:	2340      	movs	r3, #64	; 0x40
 800eada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eade:	e20e      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eae0:	2380      	movs	r3, #128	; 0x80
 800eae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eae6:	e20a      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a6b      	ldr	r2, [pc, #428]	; (800ec9c <UART_SetConfig+0x340>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d130      	bne.n	800eb54 <UART_SetConfig+0x1f8>
 800eaf2:	4b69      	ldr	r3, [pc, #420]	; (800ec98 <UART_SetConfig+0x33c>)
 800eaf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaf6:	f003 0307 	and.w	r3, r3, #7
 800eafa:	2b05      	cmp	r3, #5
 800eafc:	d826      	bhi.n	800eb4c <UART_SetConfig+0x1f0>
 800eafe:	a201      	add	r2, pc, #4	; (adr r2, 800eb04 <UART_SetConfig+0x1a8>)
 800eb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb04:	0800eb1d 	.word	0x0800eb1d
 800eb08:	0800eb25 	.word	0x0800eb25
 800eb0c:	0800eb2d 	.word	0x0800eb2d
 800eb10:	0800eb35 	.word	0x0800eb35
 800eb14:	0800eb3d 	.word	0x0800eb3d
 800eb18:	0800eb45 	.word	0x0800eb45
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb22:	e1ec      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eb24:	2304      	movs	r3, #4
 800eb26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2a:	e1e8      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eb2c:	2308      	movs	r3, #8
 800eb2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb32:	e1e4      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eb34:	2310      	movs	r3, #16
 800eb36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb3a:	e1e0      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eb3c:	2320      	movs	r3, #32
 800eb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb42:	e1dc      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eb44:	2340      	movs	r3, #64	; 0x40
 800eb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb4a:	e1d8      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eb4c:	2380      	movs	r3, #128	; 0x80
 800eb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb52:	e1d4      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a51      	ldr	r2, [pc, #324]	; (800eca0 <UART_SetConfig+0x344>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d130      	bne.n	800ebc0 <UART_SetConfig+0x264>
 800eb5e:	4b4e      	ldr	r3, [pc, #312]	; (800ec98 <UART_SetConfig+0x33c>)
 800eb60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb62:	f003 0307 	and.w	r3, r3, #7
 800eb66:	2b05      	cmp	r3, #5
 800eb68:	d826      	bhi.n	800ebb8 <UART_SetConfig+0x25c>
 800eb6a:	a201      	add	r2, pc, #4	; (adr r2, 800eb70 <UART_SetConfig+0x214>)
 800eb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb70:	0800eb89 	.word	0x0800eb89
 800eb74:	0800eb91 	.word	0x0800eb91
 800eb78:	0800eb99 	.word	0x0800eb99
 800eb7c:	0800eba1 	.word	0x0800eba1
 800eb80:	0800eba9 	.word	0x0800eba9
 800eb84:	0800ebb1 	.word	0x0800ebb1
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb8e:	e1b6      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eb90:	2304      	movs	r3, #4
 800eb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb96:	e1b2      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eb98:	2308      	movs	r3, #8
 800eb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9e:	e1ae      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eba0:	2310      	movs	r3, #16
 800eba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eba6:	e1aa      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eba8:	2320      	movs	r3, #32
 800ebaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebae:	e1a6      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ebb0:	2340      	movs	r3, #64	; 0x40
 800ebb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebb6:	e1a2      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ebb8:	2380      	movs	r3, #128	; 0x80
 800ebba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebbe:	e19e      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a37      	ldr	r2, [pc, #220]	; (800eca4 <UART_SetConfig+0x348>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d130      	bne.n	800ec2c <UART_SetConfig+0x2d0>
 800ebca:	4b33      	ldr	r3, [pc, #204]	; (800ec98 <UART_SetConfig+0x33c>)
 800ebcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebce:	f003 0307 	and.w	r3, r3, #7
 800ebd2:	2b05      	cmp	r3, #5
 800ebd4:	d826      	bhi.n	800ec24 <UART_SetConfig+0x2c8>
 800ebd6:	a201      	add	r2, pc, #4	; (adr r2, 800ebdc <UART_SetConfig+0x280>)
 800ebd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebdc:	0800ebf5 	.word	0x0800ebf5
 800ebe0:	0800ebfd 	.word	0x0800ebfd
 800ebe4:	0800ec05 	.word	0x0800ec05
 800ebe8:	0800ec0d 	.word	0x0800ec0d
 800ebec:	0800ec15 	.word	0x0800ec15
 800ebf0:	0800ec1d 	.word	0x0800ec1d
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebfa:	e180      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ebfc:	2304      	movs	r3, #4
 800ebfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec02:	e17c      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec04:	2308      	movs	r3, #8
 800ec06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec0a:	e178      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec0c:	2310      	movs	r3, #16
 800ec0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec12:	e174      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec14:	2320      	movs	r3, #32
 800ec16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec1a:	e170      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec1c:	2340      	movs	r3, #64	; 0x40
 800ec1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec22:	e16c      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec24:	2380      	movs	r3, #128	; 0x80
 800ec26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec2a:	e168      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a1d      	ldr	r2, [pc, #116]	; (800eca8 <UART_SetConfig+0x34c>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d142      	bne.n	800ecbc <UART_SetConfig+0x360>
 800ec36:	4b18      	ldr	r3, [pc, #96]	; (800ec98 <UART_SetConfig+0x33c>)
 800ec38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec3a:	f003 0307 	and.w	r3, r3, #7
 800ec3e:	2b05      	cmp	r3, #5
 800ec40:	d838      	bhi.n	800ecb4 <UART_SetConfig+0x358>
 800ec42:	a201      	add	r2, pc, #4	; (adr r2, 800ec48 <UART_SetConfig+0x2ec>)
 800ec44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec48:	0800ec61 	.word	0x0800ec61
 800ec4c:	0800ec69 	.word	0x0800ec69
 800ec50:	0800ec71 	.word	0x0800ec71
 800ec54:	0800ec79 	.word	0x0800ec79
 800ec58:	0800ec81 	.word	0x0800ec81
 800ec5c:	0800ecad 	.word	0x0800ecad
 800ec60:	2300      	movs	r3, #0
 800ec62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec66:	e14a      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec68:	2304      	movs	r3, #4
 800ec6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec6e:	e146      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec70:	2308      	movs	r3, #8
 800ec72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec76:	e142      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec78:	2310      	movs	r3, #16
 800ec7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec7e:	e13e      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec80:	2320      	movs	r3, #32
 800ec82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec86:	e13a      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ec88:	cfff69f3 	.word	0xcfff69f3
 800ec8c:	58000c00 	.word	0x58000c00
 800ec90:	11fff4ff 	.word	0x11fff4ff
 800ec94:	40011000 	.word	0x40011000
 800ec98:	58024400 	.word	0x58024400
 800ec9c:	40004400 	.word	0x40004400
 800eca0:	40004800 	.word	0x40004800
 800eca4:	40004c00 	.word	0x40004c00
 800eca8:	40005000 	.word	0x40005000
 800ecac:	2340      	movs	r3, #64	; 0x40
 800ecae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecb2:	e124      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ecb4:	2380      	movs	r3, #128	; 0x80
 800ecb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecba:	e120      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4acc      	ldr	r2, [pc, #816]	; (800eff4 <UART_SetConfig+0x698>)
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d176      	bne.n	800edb4 <UART_SetConfig+0x458>
 800ecc6:	4bcc      	ldr	r3, [pc, #816]	; (800eff8 <UART_SetConfig+0x69c>)
 800ecc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ecce:	2b28      	cmp	r3, #40	; 0x28
 800ecd0:	d86c      	bhi.n	800edac <UART_SetConfig+0x450>
 800ecd2:	a201      	add	r2, pc, #4	; (adr r2, 800ecd8 <UART_SetConfig+0x37c>)
 800ecd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd8:	0800ed7d 	.word	0x0800ed7d
 800ecdc:	0800edad 	.word	0x0800edad
 800ece0:	0800edad 	.word	0x0800edad
 800ece4:	0800edad 	.word	0x0800edad
 800ece8:	0800edad 	.word	0x0800edad
 800ecec:	0800edad 	.word	0x0800edad
 800ecf0:	0800edad 	.word	0x0800edad
 800ecf4:	0800edad 	.word	0x0800edad
 800ecf8:	0800ed85 	.word	0x0800ed85
 800ecfc:	0800edad 	.word	0x0800edad
 800ed00:	0800edad 	.word	0x0800edad
 800ed04:	0800edad 	.word	0x0800edad
 800ed08:	0800edad 	.word	0x0800edad
 800ed0c:	0800edad 	.word	0x0800edad
 800ed10:	0800edad 	.word	0x0800edad
 800ed14:	0800edad 	.word	0x0800edad
 800ed18:	0800ed8d 	.word	0x0800ed8d
 800ed1c:	0800edad 	.word	0x0800edad
 800ed20:	0800edad 	.word	0x0800edad
 800ed24:	0800edad 	.word	0x0800edad
 800ed28:	0800edad 	.word	0x0800edad
 800ed2c:	0800edad 	.word	0x0800edad
 800ed30:	0800edad 	.word	0x0800edad
 800ed34:	0800edad 	.word	0x0800edad
 800ed38:	0800ed95 	.word	0x0800ed95
 800ed3c:	0800edad 	.word	0x0800edad
 800ed40:	0800edad 	.word	0x0800edad
 800ed44:	0800edad 	.word	0x0800edad
 800ed48:	0800edad 	.word	0x0800edad
 800ed4c:	0800edad 	.word	0x0800edad
 800ed50:	0800edad 	.word	0x0800edad
 800ed54:	0800edad 	.word	0x0800edad
 800ed58:	0800ed9d 	.word	0x0800ed9d
 800ed5c:	0800edad 	.word	0x0800edad
 800ed60:	0800edad 	.word	0x0800edad
 800ed64:	0800edad 	.word	0x0800edad
 800ed68:	0800edad 	.word	0x0800edad
 800ed6c:	0800edad 	.word	0x0800edad
 800ed70:	0800edad 	.word	0x0800edad
 800ed74:	0800edad 	.word	0x0800edad
 800ed78:	0800eda5 	.word	0x0800eda5
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed82:	e0bc      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ed84:	2304      	movs	r3, #4
 800ed86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed8a:	e0b8      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ed8c:	2308      	movs	r3, #8
 800ed8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed92:	e0b4      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ed94:	2310      	movs	r3, #16
 800ed96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed9a:	e0b0      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ed9c:	2320      	movs	r3, #32
 800ed9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eda2:	e0ac      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eda4:	2340      	movs	r3, #64	; 0x40
 800eda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edaa:	e0a8      	b.n	800eefe <UART_SetConfig+0x5a2>
 800edac:	2380      	movs	r3, #128	; 0x80
 800edae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edb2:	e0a4      	b.n	800eefe <UART_SetConfig+0x5a2>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a90      	ldr	r2, [pc, #576]	; (800effc <UART_SetConfig+0x6a0>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d130      	bne.n	800ee20 <UART_SetConfig+0x4c4>
 800edbe:	4b8e      	ldr	r3, [pc, #568]	; (800eff8 <UART_SetConfig+0x69c>)
 800edc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edc2:	f003 0307 	and.w	r3, r3, #7
 800edc6:	2b05      	cmp	r3, #5
 800edc8:	d826      	bhi.n	800ee18 <UART_SetConfig+0x4bc>
 800edca:	a201      	add	r2, pc, #4	; (adr r2, 800edd0 <UART_SetConfig+0x474>)
 800edcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd0:	0800ede9 	.word	0x0800ede9
 800edd4:	0800edf1 	.word	0x0800edf1
 800edd8:	0800edf9 	.word	0x0800edf9
 800eddc:	0800ee01 	.word	0x0800ee01
 800ede0:	0800ee09 	.word	0x0800ee09
 800ede4:	0800ee11 	.word	0x0800ee11
 800ede8:	2300      	movs	r3, #0
 800edea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edee:	e086      	b.n	800eefe <UART_SetConfig+0x5a2>
 800edf0:	2304      	movs	r3, #4
 800edf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edf6:	e082      	b.n	800eefe <UART_SetConfig+0x5a2>
 800edf8:	2308      	movs	r3, #8
 800edfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edfe:	e07e      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee00:	2310      	movs	r3, #16
 800ee02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee06:	e07a      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee08:	2320      	movs	r3, #32
 800ee0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee0e:	e076      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee10:	2340      	movs	r3, #64	; 0x40
 800ee12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee16:	e072      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee18:	2380      	movs	r3, #128	; 0x80
 800ee1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee1e:	e06e      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a76      	ldr	r2, [pc, #472]	; (800f000 <UART_SetConfig+0x6a4>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d130      	bne.n	800ee8c <UART_SetConfig+0x530>
 800ee2a:	4b73      	ldr	r3, [pc, #460]	; (800eff8 <UART_SetConfig+0x69c>)
 800ee2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee2e:	f003 0307 	and.w	r3, r3, #7
 800ee32:	2b05      	cmp	r3, #5
 800ee34:	d826      	bhi.n	800ee84 <UART_SetConfig+0x528>
 800ee36:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <UART_SetConfig+0x4e0>)
 800ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3c:	0800ee55 	.word	0x0800ee55
 800ee40:	0800ee5d 	.word	0x0800ee5d
 800ee44:	0800ee65 	.word	0x0800ee65
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee75 	.word	0x0800ee75
 800ee50:	0800ee7d 	.word	0x0800ee7d
 800ee54:	2300      	movs	r3, #0
 800ee56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee5a:	e050      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee5c:	2304      	movs	r3, #4
 800ee5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee62:	e04c      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee64:	2308      	movs	r3, #8
 800ee66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee6a:	e048      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee6c:	2310      	movs	r3, #16
 800ee6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee72:	e044      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee74:	2320      	movs	r3, #32
 800ee76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee7a:	e040      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee7c:	2340      	movs	r3, #64	; 0x40
 800ee7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee82:	e03c      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee84:	2380      	movs	r3, #128	; 0x80
 800ee86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee8a:	e038      	b.n	800eefe <UART_SetConfig+0x5a2>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	4a5c      	ldr	r2, [pc, #368]	; (800f004 <UART_SetConfig+0x6a8>)
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d130      	bne.n	800eef8 <UART_SetConfig+0x59c>
 800ee96:	4b58      	ldr	r3, [pc, #352]	; (800eff8 <UART_SetConfig+0x69c>)
 800ee98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee9a:	f003 0307 	and.w	r3, r3, #7
 800ee9e:	2b05      	cmp	r3, #5
 800eea0:	d826      	bhi.n	800eef0 <UART_SetConfig+0x594>
 800eea2:	a201      	add	r2, pc, #4	; (adr r2, 800eea8 <UART_SetConfig+0x54c>)
 800eea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea8:	0800eec1 	.word	0x0800eec1
 800eeac:	0800eec9 	.word	0x0800eec9
 800eeb0:	0800eed1 	.word	0x0800eed1
 800eeb4:	0800eed9 	.word	0x0800eed9
 800eeb8:	0800eee1 	.word	0x0800eee1
 800eebc:	0800eee9 	.word	0x0800eee9
 800eec0:	2302      	movs	r3, #2
 800eec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eec6:	e01a      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eec8:	2304      	movs	r3, #4
 800eeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eece:	e016      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eed0:	2308      	movs	r3, #8
 800eed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eed6:	e012      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eed8:	2310      	movs	r3, #16
 800eeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eede:	e00e      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eee0:	2320      	movs	r3, #32
 800eee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eee6:	e00a      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eee8:	2340      	movs	r3, #64	; 0x40
 800eeea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeee:	e006      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eef0:	2380      	movs	r3, #128	; 0x80
 800eef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eef6:	e002      	b.n	800eefe <UART_SetConfig+0x5a2>
 800eef8:	2380      	movs	r3, #128	; 0x80
 800eefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4a40      	ldr	r2, [pc, #256]	; (800f004 <UART_SetConfig+0x6a8>)
 800ef04:	4293      	cmp	r3, r2
 800ef06:	f040 80ef 	bne.w	800f0e8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef0e:	2b20      	cmp	r3, #32
 800ef10:	dc46      	bgt.n	800efa0 <UART_SetConfig+0x644>
 800ef12:	2b02      	cmp	r3, #2
 800ef14:	f2c0 8081 	blt.w	800f01a <UART_SetConfig+0x6be>
 800ef18:	3b02      	subs	r3, #2
 800ef1a:	2b1e      	cmp	r3, #30
 800ef1c:	d87d      	bhi.n	800f01a <UART_SetConfig+0x6be>
 800ef1e:	a201      	add	r2, pc, #4	; (adr r2, 800ef24 <UART_SetConfig+0x5c8>)
 800ef20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef24:	0800efa7 	.word	0x0800efa7
 800ef28:	0800f01b 	.word	0x0800f01b
 800ef2c:	0800efaf 	.word	0x0800efaf
 800ef30:	0800f01b 	.word	0x0800f01b
 800ef34:	0800f01b 	.word	0x0800f01b
 800ef38:	0800f01b 	.word	0x0800f01b
 800ef3c:	0800efbf 	.word	0x0800efbf
 800ef40:	0800f01b 	.word	0x0800f01b
 800ef44:	0800f01b 	.word	0x0800f01b
 800ef48:	0800f01b 	.word	0x0800f01b
 800ef4c:	0800f01b 	.word	0x0800f01b
 800ef50:	0800f01b 	.word	0x0800f01b
 800ef54:	0800f01b 	.word	0x0800f01b
 800ef58:	0800f01b 	.word	0x0800f01b
 800ef5c:	0800efcf 	.word	0x0800efcf
 800ef60:	0800f01b 	.word	0x0800f01b
 800ef64:	0800f01b 	.word	0x0800f01b
 800ef68:	0800f01b 	.word	0x0800f01b
 800ef6c:	0800f01b 	.word	0x0800f01b
 800ef70:	0800f01b 	.word	0x0800f01b
 800ef74:	0800f01b 	.word	0x0800f01b
 800ef78:	0800f01b 	.word	0x0800f01b
 800ef7c:	0800f01b 	.word	0x0800f01b
 800ef80:	0800f01b 	.word	0x0800f01b
 800ef84:	0800f01b 	.word	0x0800f01b
 800ef88:	0800f01b 	.word	0x0800f01b
 800ef8c:	0800f01b 	.word	0x0800f01b
 800ef90:	0800f01b 	.word	0x0800f01b
 800ef94:	0800f01b 	.word	0x0800f01b
 800ef98:	0800f01b 	.word	0x0800f01b
 800ef9c:	0800f00d 	.word	0x0800f00d
 800efa0:	2b40      	cmp	r3, #64	; 0x40
 800efa2:	d036      	beq.n	800f012 <UART_SetConfig+0x6b6>
 800efa4:	e039      	b.n	800f01a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800efa6:	f7fd f863 	bl	800c070 <HAL_RCCEx_GetD3PCLK1Freq>
 800efaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800efac:	e03b      	b.n	800f026 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efae:	f107 0314 	add.w	r3, r7, #20
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fd f872 	bl	800c09c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800efb8:	69bb      	ldr	r3, [r7, #24]
 800efba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efbc:	e033      	b.n	800f026 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efbe:	f107 0308 	add.w	r3, r7, #8
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fd f9be 	bl	800c344 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800efcc:	e02b      	b.n	800f026 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800efce:	4b0a      	ldr	r3, [pc, #40]	; (800eff8 <UART_SetConfig+0x69c>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f003 0320 	and.w	r3, r3, #32
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d009      	beq.n	800efee <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800efda:	4b07      	ldr	r3, [pc, #28]	; (800eff8 <UART_SetConfig+0x69c>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	08db      	lsrs	r3, r3, #3
 800efe0:	f003 0303 	and.w	r3, r3, #3
 800efe4:	4a08      	ldr	r2, [pc, #32]	; (800f008 <UART_SetConfig+0x6ac>)
 800efe6:	fa22 f303 	lsr.w	r3, r2, r3
 800efea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800efec:	e01b      	b.n	800f026 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800efee:	4b06      	ldr	r3, [pc, #24]	; (800f008 <UART_SetConfig+0x6ac>)
 800eff0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eff2:	e018      	b.n	800f026 <UART_SetConfig+0x6ca>
 800eff4:	40011400 	.word	0x40011400
 800eff8:	58024400 	.word	0x58024400
 800effc:	40007800 	.word	0x40007800
 800f000:	40007c00 	.word	0x40007c00
 800f004:	58000c00 	.word	0x58000c00
 800f008:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f00c:	4bc4      	ldr	r3, [pc, #784]	; (800f320 <UART_SetConfig+0x9c4>)
 800f00e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f010:	e009      	b.n	800f026 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f016:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f018:	e005      	b.n	800f026 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800f01a:	2300      	movs	r3, #0
 800f01c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f01e:	2301      	movs	r3, #1
 800f020:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f024:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f028:	2b00      	cmp	r3, #0
 800f02a:	f000 81da 	beq.w	800f3e2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f032:	4abc      	ldr	r2, [pc, #752]	; (800f324 <UART_SetConfig+0x9c8>)
 800f034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f038:	461a      	mov	r2, r3
 800f03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f040:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	685a      	ldr	r2, [r3, #4]
 800f046:	4613      	mov	r3, r2
 800f048:	005b      	lsls	r3, r3, #1
 800f04a:	4413      	add	r3, r2
 800f04c:	6a3a      	ldr	r2, [r7, #32]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d305      	bcc.n	800f05e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f058:	6a3a      	ldr	r2, [r7, #32]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d903      	bls.n	800f066 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800f05e:	2301      	movs	r3, #1
 800f060:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f064:	e1bd      	b.n	800f3e2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f068:	4618      	mov	r0, r3
 800f06a:	f04f 0100 	mov.w	r1, #0
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f072:	4aac      	ldr	r2, [pc, #688]	; (800f324 <UART_SetConfig+0x9c8>)
 800f074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f078:	b29a      	uxth	r2, r3
 800f07a:	f04f 0300 	mov.w	r3, #0
 800f07e:	f7f1 f987 	bl	8000390 <__aeabi_uldivmod>
 800f082:	4602      	mov	r2, r0
 800f084:	460b      	mov	r3, r1
 800f086:	4610      	mov	r0, r2
 800f088:	4619      	mov	r1, r3
 800f08a:	f04f 0200 	mov.w	r2, #0
 800f08e:	f04f 0300 	mov.w	r3, #0
 800f092:	020b      	lsls	r3, r1, #8
 800f094:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f098:	0202      	lsls	r2, r0, #8
 800f09a:	6879      	ldr	r1, [r7, #4]
 800f09c:	6849      	ldr	r1, [r1, #4]
 800f09e:	0849      	lsrs	r1, r1, #1
 800f0a0:	4608      	mov	r0, r1
 800f0a2:	f04f 0100 	mov.w	r1, #0
 800f0a6:	1814      	adds	r4, r2, r0
 800f0a8:	eb43 0501 	adc.w	r5, r3, r1
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	461a      	mov	r2, r3
 800f0b2:	f04f 0300 	mov.w	r3, #0
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	f7f1 f969 	bl	8000390 <__aeabi_uldivmod>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f0cc:	d308      	bcc.n	800f0e0 <UART_SetConfig+0x784>
 800f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0d4:	d204      	bcs.n	800f0e0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0dc:	60da      	str	r2, [r3, #12]
 800f0de:	e180      	b.n	800f3e2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f0e6:	e17c      	b.n	800f3e2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	69db      	ldr	r3, [r3, #28]
 800f0ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0f0:	f040 80bf 	bne.w	800f272 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800f0f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f0f8:	2b20      	cmp	r3, #32
 800f0fa:	dc49      	bgt.n	800f190 <UART_SetConfig+0x834>
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	db7c      	blt.n	800f1fa <UART_SetConfig+0x89e>
 800f100:	2b20      	cmp	r3, #32
 800f102:	d87a      	bhi.n	800f1fa <UART_SetConfig+0x89e>
 800f104:	a201      	add	r2, pc, #4	; (adr r2, 800f10c <UART_SetConfig+0x7b0>)
 800f106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f10a:	bf00      	nop
 800f10c:	0800f197 	.word	0x0800f197
 800f110:	0800f19f 	.word	0x0800f19f
 800f114:	0800f1fb 	.word	0x0800f1fb
 800f118:	0800f1fb 	.word	0x0800f1fb
 800f11c:	0800f1a7 	.word	0x0800f1a7
 800f120:	0800f1fb 	.word	0x0800f1fb
 800f124:	0800f1fb 	.word	0x0800f1fb
 800f128:	0800f1fb 	.word	0x0800f1fb
 800f12c:	0800f1b7 	.word	0x0800f1b7
 800f130:	0800f1fb 	.word	0x0800f1fb
 800f134:	0800f1fb 	.word	0x0800f1fb
 800f138:	0800f1fb 	.word	0x0800f1fb
 800f13c:	0800f1fb 	.word	0x0800f1fb
 800f140:	0800f1fb 	.word	0x0800f1fb
 800f144:	0800f1fb 	.word	0x0800f1fb
 800f148:	0800f1fb 	.word	0x0800f1fb
 800f14c:	0800f1c7 	.word	0x0800f1c7
 800f150:	0800f1fb 	.word	0x0800f1fb
 800f154:	0800f1fb 	.word	0x0800f1fb
 800f158:	0800f1fb 	.word	0x0800f1fb
 800f15c:	0800f1fb 	.word	0x0800f1fb
 800f160:	0800f1fb 	.word	0x0800f1fb
 800f164:	0800f1fb 	.word	0x0800f1fb
 800f168:	0800f1fb 	.word	0x0800f1fb
 800f16c:	0800f1fb 	.word	0x0800f1fb
 800f170:	0800f1fb 	.word	0x0800f1fb
 800f174:	0800f1fb 	.word	0x0800f1fb
 800f178:	0800f1fb 	.word	0x0800f1fb
 800f17c:	0800f1fb 	.word	0x0800f1fb
 800f180:	0800f1fb 	.word	0x0800f1fb
 800f184:	0800f1fb 	.word	0x0800f1fb
 800f188:	0800f1fb 	.word	0x0800f1fb
 800f18c:	0800f1ed 	.word	0x0800f1ed
 800f190:	2b40      	cmp	r3, #64	; 0x40
 800f192:	d02e      	beq.n	800f1f2 <UART_SetConfig+0x896>
 800f194:	e031      	b.n	800f1fa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f196:	f7fb ffff 	bl	800b198 <HAL_RCC_GetPCLK1Freq>
 800f19a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f19c:	e033      	b.n	800f206 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f19e:	f7fc f811 	bl	800b1c4 <HAL_RCC_GetPCLK2Freq>
 800f1a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f1a4:	e02f      	b.n	800f206 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1a6:	f107 0314 	add.w	r3, r7, #20
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fc ff76 	bl	800c09c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1b4:	e027      	b.n	800f206 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f1b6:	f107 0308 	add.w	r3, r7, #8
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fd f8c2 	bl	800c344 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1c4:	e01f      	b.n	800f206 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1c6:	4b58      	ldr	r3, [pc, #352]	; (800f328 <UART_SetConfig+0x9cc>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	f003 0320 	and.w	r3, r3, #32
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d009      	beq.n	800f1e6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f1d2:	4b55      	ldr	r3, [pc, #340]	; (800f328 <UART_SetConfig+0x9cc>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	08db      	lsrs	r3, r3, #3
 800f1d8:	f003 0303 	and.w	r3, r3, #3
 800f1dc:	4a53      	ldr	r2, [pc, #332]	; (800f32c <UART_SetConfig+0x9d0>)
 800f1de:	fa22 f303 	lsr.w	r3, r2, r3
 800f1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f1e4:	e00f      	b.n	800f206 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f1e6:	4b51      	ldr	r3, [pc, #324]	; (800f32c <UART_SetConfig+0x9d0>)
 800f1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1ea:	e00c      	b.n	800f206 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f1ec:	4b4c      	ldr	r3, [pc, #304]	; (800f320 <UART_SetConfig+0x9c4>)
 800f1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1f0:	e009      	b.n	800f206 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f1f8:	e005      	b.n	800f206 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f1fe:	2301      	movs	r3, #1
 800f200:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f204:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f000 80ea 	beq.w	800f3e2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f212:	4a44      	ldr	r2, [pc, #272]	; (800f324 <UART_SetConfig+0x9c8>)
 800f214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f218:	461a      	mov	r2, r3
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f220:	005a      	lsls	r2, r3, #1
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	085b      	lsrs	r3, r3, #1
 800f228:	441a      	add	r2, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f232:	b29b      	uxth	r3, r3
 800f234:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f238:	2b0f      	cmp	r3, #15
 800f23a:	d916      	bls.n	800f26a <UART_SetConfig+0x90e>
 800f23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f242:	d212      	bcs.n	800f26a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f246:	b29b      	uxth	r3, r3
 800f248:	f023 030f 	bic.w	r3, r3, #15
 800f24c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	085b      	lsrs	r3, r3, #1
 800f252:	b29b      	uxth	r3, r3
 800f254:	f003 0307 	and.w	r3, r3, #7
 800f258:	b29a      	uxth	r2, r3
 800f25a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f25c:	4313      	orrs	r3, r2
 800f25e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f266:	60da      	str	r2, [r3, #12]
 800f268:	e0bb      	b.n	800f3e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f26a:	2301      	movs	r3, #1
 800f26c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f270:	e0b7      	b.n	800f3e2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f272:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f276:	2b20      	cmp	r3, #32
 800f278:	dc4a      	bgt.n	800f310 <UART_SetConfig+0x9b4>
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f2c0 8086 	blt.w	800f38c <UART_SetConfig+0xa30>
 800f280:	2b20      	cmp	r3, #32
 800f282:	f200 8083 	bhi.w	800f38c <UART_SetConfig+0xa30>
 800f286:	a201      	add	r2, pc, #4	; (adr r2, 800f28c <UART_SetConfig+0x930>)
 800f288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28c:	0800f317 	.word	0x0800f317
 800f290:	0800f331 	.word	0x0800f331
 800f294:	0800f38d 	.word	0x0800f38d
 800f298:	0800f38d 	.word	0x0800f38d
 800f29c:	0800f339 	.word	0x0800f339
 800f2a0:	0800f38d 	.word	0x0800f38d
 800f2a4:	0800f38d 	.word	0x0800f38d
 800f2a8:	0800f38d 	.word	0x0800f38d
 800f2ac:	0800f349 	.word	0x0800f349
 800f2b0:	0800f38d 	.word	0x0800f38d
 800f2b4:	0800f38d 	.word	0x0800f38d
 800f2b8:	0800f38d 	.word	0x0800f38d
 800f2bc:	0800f38d 	.word	0x0800f38d
 800f2c0:	0800f38d 	.word	0x0800f38d
 800f2c4:	0800f38d 	.word	0x0800f38d
 800f2c8:	0800f38d 	.word	0x0800f38d
 800f2cc:	0800f359 	.word	0x0800f359
 800f2d0:	0800f38d 	.word	0x0800f38d
 800f2d4:	0800f38d 	.word	0x0800f38d
 800f2d8:	0800f38d 	.word	0x0800f38d
 800f2dc:	0800f38d 	.word	0x0800f38d
 800f2e0:	0800f38d 	.word	0x0800f38d
 800f2e4:	0800f38d 	.word	0x0800f38d
 800f2e8:	0800f38d 	.word	0x0800f38d
 800f2ec:	0800f38d 	.word	0x0800f38d
 800f2f0:	0800f38d 	.word	0x0800f38d
 800f2f4:	0800f38d 	.word	0x0800f38d
 800f2f8:	0800f38d 	.word	0x0800f38d
 800f2fc:	0800f38d 	.word	0x0800f38d
 800f300:	0800f38d 	.word	0x0800f38d
 800f304:	0800f38d 	.word	0x0800f38d
 800f308:	0800f38d 	.word	0x0800f38d
 800f30c:	0800f37f 	.word	0x0800f37f
 800f310:	2b40      	cmp	r3, #64	; 0x40
 800f312:	d037      	beq.n	800f384 <UART_SetConfig+0xa28>
 800f314:	e03a      	b.n	800f38c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f316:	f7fb ff3f 	bl	800b198 <HAL_RCC_GetPCLK1Freq>
 800f31a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f31c:	e03c      	b.n	800f398 <UART_SetConfig+0xa3c>
 800f31e:	bf00      	nop
 800f320:	003d0900 	.word	0x003d0900
 800f324:	080137fc 	.word	0x080137fc
 800f328:	58024400 	.word	0x58024400
 800f32c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f330:	f7fb ff48 	bl	800b1c4 <HAL_RCC_GetPCLK2Freq>
 800f334:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f336:	e02f      	b.n	800f398 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f338:	f107 0314 	add.w	r3, r7, #20
 800f33c:	4618      	mov	r0, r3
 800f33e:	f7fc fead 	bl	800c09c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f346:	e027      	b.n	800f398 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f348:	f107 0308 	add.w	r3, r7, #8
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fc fff9 	bl	800c344 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f356:	e01f      	b.n	800f398 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f358:	4b2c      	ldr	r3, [pc, #176]	; (800f40c <UART_SetConfig+0xab0>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f003 0320 	and.w	r3, r3, #32
 800f360:	2b00      	cmp	r3, #0
 800f362:	d009      	beq.n	800f378 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f364:	4b29      	ldr	r3, [pc, #164]	; (800f40c <UART_SetConfig+0xab0>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	08db      	lsrs	r3, r3, #3
 800f36a:	f003 0303 	and.w	r3, r3, #3
 800f36e:	4a28      	ldr	r2, [pc, #160]	; (800f410 <UART_SetConfig+0xab4>)
 800f370:	fa22 f303 	lsr.w	r3, r2, r3
 800f374:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f376:	e00f      	b.n	800f398 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f378:	4b25      	ldr	r3, [pc, #148]	; (800f410 <UART_SetConfig+0xab4>)
 800f37a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f37c:	e00c      	b.n	800f398 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f37e:	4b25      	ldr	r3, [pc, #148]	; (800f414 <UART_SetConfig+0xab8>)
 800f380:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f382:	e009      	b.n	800f398 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f38a:	e005      	b.n	800f398 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f38c:	2300      	movs	r3, #0
 800f38e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f390:	2301      	movs	r3, #1
 800f392:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f396:	bf00      	nop
    }

    if (pclk != 0U)
 800f398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d021      	beq.n	800f3e2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a2:	4a1d      	ldr	r2, [pc, #116]	; (800f418 <UART_SetConfig+0xabc>)
 800f3a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	685b      	ldr	r3, [r3, #4]
 800f3b4:	085b      	lsrs	r3, r3, #1
 800f3b6:	441a      	add	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	2b0f      	cmp	r3, #15
 800f3c8:	d908      	bls.n	800f3dc <UART_SetConfig+0xa80>
 800f3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3d0:	d204      	bcs.n	800f3dc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3d8:	60da      	str	r2, [r3, #12]
 800f3da:	e002      	b.n	800f3e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2201      	movs	r2, #1
 800f3e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f3fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f402:	4618      	mov	r0, r3
 800f404:	3738      	adds	r7, #56	; 0x38
 800f406:	46bd      	mov	sp, r7
 800f408:	bdb0      	pop	{r4, r5, r7, pc}
 800f40a:	bf00      	nop
 800f40c:	58024400 	.word	0x58024400
 800f410:	03d09000 	.word	0x03d09000
 800f414:	003d0900 	.word	0x003d0900
 800f418:	080137fc 	.word	0x080137fc

0800f41c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b083      	sub	sp, #12
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f428:	f003 0301 	and.w	r3, r3, #1
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d00a      	beq.n	800f446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	430a      	orrs	r2, r1
 800f444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f44a:	f003 0302 	and.w	r3, r3, #2
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00a      	beq.n	800f468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	430a      	orrs	r2, r1
 800f466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f46c:	f003 0304 	and.w	r3, r3, #4
 800f470:	2b00      	cmp	r3, #0
 800f472:	d00a      	beq.n	800f48a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	430a      	orrs	r2, r1
 800f488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f48e:	f003 0308 	and.w	r3, r3, #8
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00a      	beq.n	800f4ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	430a      	orrs	r2, r1
 800f4aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4b0:	f003 0310 	and.w	r3, r3, #16
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d00a      	beq.n	800f4ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	689b      	ldr	r3, [r3, #8]
 800f4be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	430a      	orrs	r2, r1
 800f4cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d2:	f003 0320 	and.w	r3, r3, #32
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d00a      	beq.n	800f4f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	689b      	ldr	r3, [r3, #8]
 800f4e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	430a      	orrs	r2, r1
 800f4ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d01a      	beq.n	800f532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	430a      	orrs	r2, r1
 800f510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f51a:	d10a      	bne.n	800f532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	430a      	orrs	r2, r1
 800f530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00a      	beq.n	800f554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	430a      	orrs	r2, r1
 800f552:	605a      	str	r2, [r3, #4]
  }
}
 800f554:	bf00      	nop
 800f556:	370c      	adds	r7, #12
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr

0800f560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b086      	sub	sp, #24
 800f564:	af02      	add	r7, sp, #8
 800f566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f570:	f7f5 fa90 	bl	8004a94 <HAL_GetTick>
 800f574:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f003 0308 	and.w	r3, r3, #8
 800f580:	2b08      	cmp	r3, #8
 800f582:	d10e      	bne.n	800f5a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2200      	movs	r2, #0
 800f58e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 f82f 	bl	800f5f6 <UART_WaitOnFlagUntilTimeout>
 800f598:	4603      	mov	r3, r0
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d001      	beq.n	800f5a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f59e:	2303      	movs	r3, #3
 800f5a0:	e025      	b.n	800f5ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f003 0304 	and.w	r3, r3, #4
 800f5ac:	2b04      	cmp	r3, #4
 800f5ae:	d10e      	bne.n	800f5ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f5b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f5b4:	9300      	str	r3, [sp, #0]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f819 	bl	800f5f6 <UART_WaitOnFlagUntilTimeout>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d001      	beq.n	800f5ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f5ca:	2303      	movs	r3, #3
 800f5cc:	e00f      	b.n	800f5ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	2220      	movs	r2, #32
 800f5d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2220      	movs	r2, #32
 800f5da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f5ec:	2300      	movs	r3, #0
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b084      	sub	sp, #16
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	60f8      	str	r0, [r7, #12]
 800f5fe:	60b9      	str	r1, [r7, #8]
 800f600:	603b      	str	r3, [r7, #0]
 800f602:	4613      	mov	r3, r2
 800f604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f606:	e062      	b.n	800f6ce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f608:	69bb      	ldr	r3, [r7, #24]
 800f60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f60e:	d05e      	beq.n	800f6ce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f610:	f7f5 fa40 	bl	8004a94 <HAL_GetTick>
 800f614:	4602      	mov	r2, r0
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	69ba      	ldr	r2, [r7, #24]
 800f61c:	429a      	cmp	r2, r3
 800f61e:	d302      	bcc.n	800f626 <UART_WaitOnFlagUntilTimeout+0x30>
 800f620:	69bb      	ldr	r3, [r7, #24]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d11d      	bne.n	800f662 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f634:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	689a      	ldr	r2, [r3, #8]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f022 0201 	bic.w	r2, r2, #1
 800f644:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2220      	movs	r2, #32
 800f64a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2220      	movs	r2, #32
 800f652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2200      	movs	r2, #0
 800f65a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f65e:	2303      	movs	r3, #3
 800f660:	e045      	b.n	800f6ee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f003 0304 	and.w	r3, r3, #4
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d02e      	beq.n	800f6ce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	69db      	ldr	r3, [r3, #28]
 800f676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f67a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f67e:	d126      	bne.n	800f6ce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f688:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f698:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	689a      	ldr	r2, [r3, #8]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f022 0201 	bic.w	r2, r2, #1
 800f6a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2220      	movs	r2, #32
 800f6ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2220      	movs	r2, #32
 800f6b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2220      	movs	r2, #32
 800f6be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f6ca:	2303      	movs	r3, #3
 800f6cc:	e00f      	b.n	800f6ee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	69da      	ldr	r2, [r3, #28]
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	4013      	ands	r3, r2
 800f6d8:	68ba      	ldr	r2, [r7, #8]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	bf0c      	ite	eq
 800f6de:	2301      	moveq	r3, #1
 800f6e0:	2300      	movne	r3, #0
 800f6e2:	b2db      	uxtb	r3, r3
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	79fb      	ldrb	r3, [r7, #7]
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d08d      	beq.n	800f608 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
	...

0800f6f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	4613      	mov	r3, r2
 800f704:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	68ba      	ldr	r2, [r7, #8]
 800f70a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	88fa      	ldrh	r2, [r7, #6]
 800f710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	88fa      	ldrh	r2, [r7, #6]
 800f718:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	2200      	movs	r2, #0
 800f720:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f72a:	d10e      	bne.n	800f74a <UART_Start_Receive_IT+0x52>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	691b      	ldr	r3, [r3, #16]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d105      	bne.n	800f740 <UART_Start_Receive_IT+0x48>
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f73a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f73e:	e02d      	b.n	800f79c <UART_Start_Receive_IT+0xa4>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	22ff      	movs	r2, #255	; 0xff
 800f744:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f748:	e028      	b.n	800f79c <UART_Start_Receive_IT+0xa4>
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d10d      	bne.n	800f76e <UART_Start_Receive_IT+0x76>
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	691b      	ldr	r3, [r3, #16]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d104      	bne.n	800f764 <UART_Start_Receive_IT+0x6c>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	22ff      	movs	r2, #255	; 0xff
 800f75e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f762:	e01b      	b.n	800f79c <UART_Start_Receive_IT+0xa4>
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	227f      	movs	r2, #127	; 0x7f
 800f768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f76c:	e016      	b.n	800f79c <UART_Start_Receive_IT+0xa4>
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f776:	d10d      	bne.n	800f794 <UART_Start_Receive_IT+0x9c>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d104      	bne.n	800f78a <UART_Start_Receive_IT+0x92>
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	227f      	movs	r2, #127	; 0x7f
 800f784:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f788:	e008      	b.n	800f79c <UART_Start_Receive_IT+0xa4>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	223f      	movs	r2, #63	; 0x3f
 800f78e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f792:	e003      	b.n	800f79c <UART_Start_Receive_IT+0xa4>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2200      	movs	r2, #0
 800f798:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2222      	movs	r2, #34	; 0x22
 800f7a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	689a      	ldr	r2, [r3, #8]
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f042 0201 	orr.w	r2, r2, #1
 800f7ba:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f7c4:	d12a      	bne.n	800f81c <UART_Start_Receive_IT+0x124>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f7cc:	88fa      	ldrh	r2, [r7, #6]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d324      	bcc.n	800f81c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7da:	d107      	bne.n	800f7ec <UART_Start_Receive_IT+0xf4>
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	691b      	ldr	r3, [r3, #16]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d103      	bne.n	800f7ec <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	4a1f      	ldr	r2, [pc, #124]	; (800f864 <UART_Start_Receive_IT+0x16c>)
 800f7e8:	671a      	str	r2, [r3, #112]	; 0x70
 800f7ea:	e002      	b.n	800f7f2 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	4a1e      	ldr	r2, [pc, #120]	; (800f868 <UART_Start_Receive_IT+0x170>)
 800f7f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f808:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	689a      	ldr	r2, [r3, #8]
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f818:	609a      	str	r2, [r3, #8]
 800f81a:	e01b      	b.n	800f854 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f824:	d107      	bne.n	800f836 <UART_Start_Receive_IT+0x13e>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	691b      	ldr	r3, [r3, #16]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d103      	bne.n	800f836 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	4a0e      	ldr	r2, [pc, #56]	; (800f86c <UART_Start_Receive_IT+0x174>)
 800f832:	671a      	str	r2, [r3, #112]	; 0x70
 800f834:	e002      	b.n	800f83c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	4a0d      	ldr	r2, [pc, #52]	; (800f870 <UART_Start_Receive_IT+0x178>)
 800f83a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2200      	movs	r2, #0
 800f840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f852:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	0800ffc1 	.word	0x0800ffc1
 800f868:	0800fdbd 	.word	0x0800fdbd
 800f86c:	0800fce3 	.word	0x0800fce3
 800f870:	0800fc0b 	.word	0x0800fc0b

0800f874 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	4613      	mov	r3, r2
 800f880:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	68ba      	ldr	r2, [r7, #8]
 800f886:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	88fa      	ldrh	r2, [r7, #6]
 800f88c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2222      	movs	r2, #34	; 0x22
 800f89c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d02c      	beq.n	800f902 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8ac:	4a25      	ldr	r2, [pc, #148]	; (800f944 <UART_Start_Receive_DMA+0xd0>)
 800f8ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8b4:	4a24      	ldr	r2, [pc, #144]	; (800f948 <UART_Start_Receive_DMA+0xd4>)
 800f8b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8bc:	4a23      	ldr	r2, [pc, #140]	; (800f94c <UART_Start_Receive_DMA+0xd8>)
 800f8be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	3324      	adds	r3, #36	; 0x24
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8d8:	461a      	mov	r2, r3
 800f8da:	88fb      	ldrh	r3, [r7, #6]
 800f8dc:	f7f5 fd82 	bl	80053e4 <HAL_DMA_Start_IT>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d00d      	beq.n	800f902 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2210      	movs	r2, #16
 800f8ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2220      	movs	r2, #32
 800f8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e01c      	b.n	800f93c <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2200      	movs	r2, #0
 800f906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	681a      	ldr	r2, [r3, #0]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f918:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	689a      	ldr	r2, [r3, #8]
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f042 0201 	orr.w	r2, r2, #1
 800f928:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	689a      	ldr	r2, [r3, #8]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f938:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800f93a:	2300      	movs	r3, #0
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	0800fa5d 	.word	0x0800fa5d
 800f948:	0800faf3 	.word	0x0800faf3
 800f94c:	0800fb2b 	.word	0x0800fb2b

0800f950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f950:	b480      	push	{r7}
 800f952:	b083      	sub	sp, #12
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f966:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	689a      	ldr	r2, [r3, #8]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f976:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2220      	movs	r2, #32
 800f97c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr

0800f98c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b083      	sub	sp, #12
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f9a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	6899      	ldr	r1, [r3, #8]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	4b0f      	ldr	r3, [pc, #60]	; (800f9ec <UART_EndRxTransfer+0x60>)
 800f9b0:	400b      	ands	r3, r1
 800f9b2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9b8:	2b01      	cmp	r3, #1
 800f9ba:	d107      	bne.n	800f9cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f022 0210 	bic.w	r2, r2, #16
 800f9ca:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2220      	movs	r2, #32
 800f9d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	effffffe 	.word	0xeffffffe

0800f9f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9fc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	69db      	ldr	r3, [r3, #28]
 800fa02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa06:	d014      	beq.n	800fa32 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	689a      	ldr	r2, [r3, #8]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa1e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	681a      	ldr	r2, [r3, #0]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fa2e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa30:	e002      	b.n	800fa38 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800fa32:	68f8      	ldr	r0, [r7, #12]
 800fa34:	f7fe ff5e 	bl	800e8f4 <HAL_UART_TxCpltCallback>
}
 800fa38:	bf00      	nop
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa4c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fa4e:	68f8      	ldr	r0, [r7, #12]
 800fa50:	f7fe ff5a 	bl	800e908 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa54:	bf00      	nop
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa68:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	69db      	ldr	r3, [r3, #28]
 800fa6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa72:	d02b      	beq.n	800facc <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2200      	movs	r2, #0
 800fa78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fa8a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	689a      	ldr	r2, [r3, #8]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f022 0201 	bic.w	r2, r2, #1
 800fa9a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	689a      	ldr	r2, [r3, #8]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800faaa:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2220      	movs	r2, #32
 800fab0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d107      	bne.n	800facc <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f022 0210 	bic.w	r2, r2, #16
 800faca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	d107      	bne.n	800fae4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fada:	4619      	mov	r1, r3
 800fadc:	68f8      	ldr	r0, [r7, #12]
 800fade:	f7fe ff31 	bl	800e944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fae2:	e002      	b.n	800faea <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	f7f4 f8dd 	bl	8003ca4 <HAL_UART_RxCpltCallback>
}
 800faea:	bf00      	nop
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b084      	sub	sp, #16
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fafe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d109      	bne.n	800fb1c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb0e:	085b      	lsrs	r3, r3, #1
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	4619      	mov	r1, r3
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f7fe ff15 	bl	800e944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fb1a:	e002      	b.n	800fb22 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f7fe fefd 	bl	800e91c <HAL_UART_RxHalfCpltCallback>
}
 800fb22:	bf00      	nop
 800fb24:	3710      	adds	r7, #16
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}

0800fb2a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fb2a:	b580      	push	{r7, lr}
 800fb2c:	b086      	sub	sp, #24
 800fb2e:	af00      	add	r7, sp, #0
 800fb30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb36:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb3e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb46:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb52:	2b80      	cmp	r3, #128	; 0x80
 800fb54:	d109      	bne.n	800fb6a <UART_DMAError+0x40>
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	2b21      	cmp	r3, #33	; 0x21
 800fb5a:	d106      	bne.n	800fb6a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800fb64:	6978      	ldr	r0, [r7, #20]
 800fb66:	f7ff fef3 	bl	800f950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	689b      	ldr	r3, [r3, #8]
 800fb70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb74:	2b40      	cmp	r3, #64	; 0x40
 800fb76:	d109      	bne.n	800fb8c <UART_DMAError+0x62>
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2b22      	cmp	r3, #34	; 0x22
 800fb7c:	d106      	bne.n	800fb8c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800fb86:	6978      	ldr	r0, [r7, #20]
 800fb88:	f7ff ff00 	bl	800f98c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb92:	f043 0210 	orr.w	r2, r3, #16
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb9c:	6978      	ldr	r0, [r7, #20]
 800fb9e:	f7fe fec7 	bl	800e930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fba2:	bf00      	nop
 800fba4:	3718      	adds	r7, #24
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b084      	sub	sp, #16
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fbc8:	68f8      	ldr	r0, [r7, #12]
 800fbca:	f7fe feb1 	bl	800e930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fbce:	bf00      	nop
 800fbd0:	3710      	adds	r7, #16
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}

0800fbd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fbd6:	b580      	push	{r7, lr}
 800fbd8:	b082      	sub	sp, #8
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	681a      	ldr	r2, [r3, #0]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fbec:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2220      	movs	r2, #32
 800fbf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7fe fe79 	bl	800e8f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc02:	bf00      	nop
 800fc04:	3708      	adds	r7, #8
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}

0800fc0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fc0a:	b580      	push	{r7, lr}
 800fc0c:	b084      	sub	sp, #16
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc18:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc20:	2b22      	cmp	r3, #34	; 0x22
 800fc22:	d152      	bne.n	800fcca <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc2a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fc2c:	89bb      	ldrh	r3, [r7, #12]
 800fc2e:	b2d9      	uxtb	r1, r3
 800fc30:	89fb      	ldrh	r3, [r7, #14]
 800fc32:	b2da      	uxtb	r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc38:	400a      	ands	r2, r1
 800fc3a:	b2d2      	uxtb	r2, r2
 800fc3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc42:	1c5a      	adds	r2, r3, #1
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	3b01      	subs	r3, #1
 800fc52:	b29a      	uxth	r2, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d139      	bne.n	800fcda <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	681a      	ldr	r2, [r3, #0]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fc74:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	689a      	ldr	r2, [r3, #8]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f022 0201 	bic.w	r2, r2, #1
 800fc84:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2220      	movs	r2, #32
 800fc8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d10f      	bne.n	800fcbc <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f022 0210 	bic.w	r2, r2, #16
 800fcaa:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f7fe fe45 	bl	800e944 <HAL_UARTEx_RxEventCallback>
 800fcba:	e002      	b.n	800fcc2 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7f3 fff1 	bl	8003ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fcc8:	e007      	b.n	800fcda <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	699a      	ldr	r2, [r3, #24]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	f042 0208 	orr.w	r2, r2, #8
 800fcd8:	619a      	str	r2, [r3, #24]
}
 800fcda:	bf00      	nop
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b084      	sub	sp, #16
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcf0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcf8:	2b22      	cmp	r3, #34	; 0x22
 800fcfa:	d152      	bne.n	800fda2 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd02:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd08:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800fd0a:	89ba      	ldrh	r2, [r7, #12]
 800fd0c:	89fb      	ldrh	r3, [r7, #14]
 800fd0e:	4013      	ands	r3, r2
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd1a:	1c9a      	adds	r2, r3, #2
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	b29a      	uxth	r2, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd38:	b29b      	uxth	r3, r3
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d139      	bne.n	800fdb2 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fd4c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	689a      	ldr	r2, [r3, #8]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f022 0201 	bic.w	r2, r2, #1
 800fd5c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2220      	movs	r2, #32
 800fd62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d10f      	bne.n	800fd94 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	f022 0210 	bic.w	r2, r2, #16
 800fd82:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fd8a:	4619      	mov	r1, r3
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7fe fdd9 	bl	800e944 <HAL_UARTEx_RxEventCallback>
 800fd92:	e002      	b.n	800fd9a <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7f3 ff85 	bl	8003ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fda0:	e007      	b.n	800fdb2 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	699a      	ldr	r2, [r3, #24]
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	f042 0208 	orr.w	r2, r2, #8
 800fdb0:	619a      	str	r2, [r3, #24]
}
 800fdb2:	bf00      	nop
 800fdb4:	3710      	adds	r7, #16
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b088      	sub	sp, #32
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fdca:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	69db      	ldr	r3, [r3, #28]
 800fdd2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdea:	2b22      	cmp	r3, #34	; 0x22
 800fdec:	f040 80d8 	bne.w	800ffa0 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fdf6:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fdf8:	e0a8      	b.n	800ff4c <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe00:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fe02:	89bb      	ldrh	r3, [r7, #12]
 800fe04:	b2d9      	uxtb	r1, r3
 800fe06:	8b7b      	ldrh	r3, [r7, #26]
 800fe08:	b2da      	uxtb	r2, r3
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe0e:	400a      	ands	r2, r1
 800fe10:	b2d2      	uxtb	r2, r2
 800fe12:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe18:	1c5a      	adds	r2, r3, #1
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	3b01      	subs	r3, #1
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	69db      	ldr	r3, [r3, #28]
 800fe36:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	f003 0307 	and.w	r3, r3, #7
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d04d      	beq.n	800fede <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	f003 0301 	and.w	r3, r3, #1
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d010      	beq.n	800fe6e <UART_RxISR_8BIT_FIFOEN+0xb2>
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d00b      	beq.n	800fe6e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2201      	movs	r2, #1
 800fe5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe64:	f043 0201 	orr.w	r2, r3, #1
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	f003 0302 	and.w	r3, r3, #2
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d010      	beq.n	800fe9a <UART_RxISR_8BIT_FIFOEN+0xde>
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	f003 0301 	and.w	r3, r3, #1
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d00b      	beq.n	800fe9a <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2202      	movs	r2, #2
 800fe88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe90:	f043 0204 	orr.w	r2, r3, #4
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	f003 0304 	and.w	r3, r3, #4
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d010      	beq.n	800fec6 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	f003 0301 	and.w	r3, r3, #1
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00b      	beq.n	800fec6 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2204      	movs	r2, #4
 800feb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800febc:	f043 0202 	orr.w	r2, r3, #2
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d006      	beq.n	800fede <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7fe fd2d 	bl	800e930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2200      	movs	r2, #0
 800feda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d130      	bne.n	800ff4c <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fef8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	6899      	ldr	r1, [r3, #8]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	4b2c      	ldr	r3, [pc, #176]	; (800ffb8 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800ff06:	400b      	ands	r3, r1
 800ff08:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2220      	movs	r2, #32
 800ff0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2200      	movs	r2, #0
 800ff16:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d10f      	bne.n	800ff40 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f022 0210 	bic.w	r2, r2, #16
 800ff2e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ff36:	4619      	mov	r1, r3
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7fe fd03 	bl	800e944 <HAL_UARTEx_RxEventCallback>
 800ff3e:	e002      	b.n	800ff46 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f7f3 feaf 	bl	8003ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ff4c:	89fb      	ldrh	r3, [r7, #14]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d005      	beq.n	800ff5e <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800ff52:	69fb      	ldr	r3, [r7, #28]
 800ff54:	f003 0320 	and.w	r3, r3, #32
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	f47f af4e 	bne.w	800fdfa <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff64:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff66:	897b      	ldrh	r3, [r7, #10]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d021      	beq.n	800ffb0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff72:	897a      	ldrh	r2, [r7, #10]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d21b      	bcs.n	800ffb0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	689a      	ldr	r2, [r3, #8]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ff86:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	4a0c      	ldr	r2, [pc, #48]	; (800ffbc <UART_RxISR_8BIT_FIFOEN+0x200>)
 800ff8c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f042 0220 	orr.w	r2, r2, #32
 800ff9c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ff9e:	e007      	b.n	800ffb0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	699a      	ldr	r2, [r3, #24]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f042 0208 	orr.w	r2, r2, #8
 800ffae:	619a      	str	r2, [r3, #24]
}
 800ffb0:	bf00      	nop
 800ffb2:	3720      	adds	r7, #32
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	effffffe 	.word	0xeffffffe
 800ffbc:	0800fc0b 	.word	0x0800fc0b

0800ffc0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b08a      	sub	sp, #40	; 0x28
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ffce:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	69db      	ldr	r3, [r3, #28]
 800ffd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffee:	2b22      	cmp	r3, #34	; 0x22
 800fff0:	f040 80d8 	bne.w	80101a4 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fffa:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fffc:	e0a8      	b.n	8010150 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010004:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801000a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 801000c:	8aba      	ldrh	r2, [r7, #20]
 801000e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010010:	4013      	ands	r3, r2
 8010012:	b29a      	uxth	r2, r3
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801001c:	1c9a      	adds	r2, r3, #2
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010028:	b29b      	uxth	r3, r3
 801002a:	3b01      	subs	r3, #1
 801002c:	b29a      	uxth	r2, r3
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	69db      	ldr	r3, [r3, #28]
 801003a:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801003c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003e:	f003 0307 	and.w	r3, r3, #7
 8010042:	2b00      	cmp	r3, #0
 8010044:	d04d      	beq.n	80100e2 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010048:	f003 0301 	and.w	r3, r3, #1
 801004c:	2b00      	cmp	r3, #0
 801004e:	d010      	beq.n	8010072 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00b      	beq.n	8010072 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2201      	movs	r2, #1
 8010060:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010068:	f043 0201 	orr.w	r2, r3, #1
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010074:	f003 0302 	and.w	r3, r3, #2
 8010078:	2b00      	cmp	r3, #0
 801007a:	d010      	beq.n	801009e <UART_RxISR_16BIT_FIFOEN+0xde>
 801007c:	69bb      	ldr	r3, [r7, #24]
 801007e:	f003 0301 	and.w	r3, r3, #1
 8010082:	2b00      	cmp	r3, #0
 8010084:	d00b      	beq.n	801009e <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	2202      	movs	r2, #2
 801008c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010094:	f043 0204 	orr.w	r2, r3, #4
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801009e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a0:	f003 0304 	and.w	r3, r3, #4
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d010      	beq.n	80100ca <UART_RxISR_16BIT_FIFOEN+0x10a>
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	f003 0301 	and.w	r3, r3, #1
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d00b      	beq.n	80100ca <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2204      	movs	r2, #4
 80100b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100c0:	f043 0202 	orr.w	r2, r3, #2
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d006      	beq.n	80100e2 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7fe fc2b 	bl	800e930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d130      	bne.n	8010150 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80100fc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	6899      	ldr	r1, [r3, #8]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	4b2c      	ldr	r3, [pc, #176]	; (80101bc <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 801010a:	400b      	ands	r3, r1
 801010c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2220      	movs	r2, #32
 8010112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2200      	movs	r2, #0
 801011a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010120:	2b01      	cmp	r3, #1
 8010122:	d10f      	bne.n	8010144 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	681a      	ldr	r2, [r3, #0]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f022 0210 	bic.w	r2, r2, #16
 8010132:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801013a:	4619      	mov	r1, r3
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7fe fc01 	bl	800e944 <HAL_UARTEx_RxEventCallback>
 8010142:	e002      	b.n	801014a <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7f3 fdad 	bl	8003ca4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2200      	movs	r2, #0
 801014e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010150:	8afb      	ldrh	r3, [r7, #22]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d005      	beq.n	8010162 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 8010156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010158:	f003 0320 	and.w	r3, r3, #32
 801015c:	2b00      	cmp	r3, #0
 801015e:	f47f af4e 	bne.w	800fffe <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010168:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801016a:	89fb      	ldrh	r3, [r7, #14]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d021      	beq.n	80101b4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010176:	89fa      	ldrh	r2, [r7, #14]
 8010178:	429a      	cmp	r2, r3
 801017a:	d21b      	bcs.n	80101b4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	689a      	ldr	r2, [r3, #8]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 801018a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4a0c      	ldr	r2, [pc, #48]	; (80101c0 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8010190:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	681a      	ldr	r2, [r3, #0]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	f042 0220 	orr.w	r2, r2, #32
 80101a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101a2:	e007      	b.n	80101b4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	699a      	ldr	r2, [r3, #24]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f042 0208 	orr.w	r2, r2, #8
 80101b2:	619a      	str	r2, [r3, #24]
}
 80101b4:	bf00      	nop
 80101b6:	3728      	adds	r7, #40	; 0x28
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	effffffe 	.word	0xeffffffe
 80101c0:	0800fce3 	.word	0x0800fce3

080101c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b083      	sub	sp, #12
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80101cc:	bf00      	nop
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80101d8:	b480      	push	{r7}
 80101da:	b083      	sub	sp, #12
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80101e0:	bf00      	nop
 80101e2:	370c      	adds	r7, #12
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80101f4:	bf00      	nop
 80101f6:	370c      	adds	r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801020e:	2b01      	cmp	r3, #1
 8010210:	d101      	bne.n	8010216 <HAL_UARTEx_DisableFifoMode+0x16>
 8010212:	2302      	movs	r3, #2
 8010214:	e027      	b.n	8010266 <HAL_UARTEx_DisableFifoMode+0x66>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2201      	movs	r2, #1
 801021a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2224      	movs	r2, #36	; 0x24
 8010222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	f022 0201 	bic.w	r2, r2, #1
 801023c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010244:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2200      	movs	r2, #0
 801024a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2220      	movs	r2, #32
 8010258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2200      	movs	r2, #0
 8010260:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3714      	adds	r7, #20
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b084      	sub	sp, #16
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010282:	2b01      	cmp	r3, #1
 8010284:	d101      	bne.n	801028a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010286:	2302      	movs	r3, #2
 8010288:	e02d      	b.n	80102e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2201      	movs	r2, #1
 801028e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2224      	movs	r2, #36	; 0x24
 8010296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f022 0201 	bic.w	r2, r2, #1
 80102b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	689b      	ldr	r3, [r3, #8]
 80102b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	683a      	ldr	r2, [r7, #0]
 80102c2:	430a      	orrs	r2, r1
 80102c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80102c6:	6878      	ldr	r0, [r7, #4]
 80102c8:	f000 f850 	bl	801036c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	68fa      	ldr	r2, [r7, #12]
 80102d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2220      	movs	r2, #32
 80102d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2200      	movs	r2, #0
 80102e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80102e4:	2300      	movs	r3, #0
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3710      	adds	r7, #16
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}

080102ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80102ee:	b580      	push	{r7, lr}
 80102f0:	b084      	sub	sp, #16
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
 80102f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d101      	bne.n	8010306 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010302:	2302      	movs	r3, #2
 8010304:	e02d      	b.n	8010362 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2201      	movs	r2, #1
 801030a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2224      	movs	r2, #36	; 0x24
 8010312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f022 0201 	bic.w	r2, r2, #1
 801032c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	683a      	ldr	r2, [r7, #0]
 801033e:	430a      	orrs	r2, r1
 8010340:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f000 f812 	bl	801036c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	68fa      	ldr	r2, [r7, #12]
 801034e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2220      	movs	r2, #32
 8010354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
	...

0801036c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801036c:	b480      	push	{r7}
 801036e:	b085      	sub	sp, #20
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010378:	2b00      	cmp	r3, #0
 801037a:	d108      	bne.n	801038e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2201      	movs	r2, #1
 8010380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2201      	movs	r2, #1
 8010388:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801038c:	e031      	b.n	80103f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801038e:	2310      	movs	r3, #16
 8010390:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010392:	2310      	movs	r3, #16
 8010394:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	689b      	ldr	r3, [r3, #8]
 801039c:	0e5b      	lsrs	r3, r3, #25
 801039e:	b2db      	uxtb	r3, r3
 80103a0:	f003 0307 	and.w	r3, r3, #7
 80103a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	689b      	ldr	r3, [r3, #8]
 80103ac:	0f5b      	lsrs	r3, r3, #29
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	f003 0307 	and.w	r3, r3, #7
 80103b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80103b6:	7bbb      	ldrb	r3, [r7, #14]
 80103b8:	7b3a      	ldrb	r2, [r7, #12]
 80103ba:	4911      	ldr	r1, [pc, #68]	; (8010400 <UARTEx_SetNbDataToProcess+0x94>)
 80103bc:	5c8a      	ldrb	r2, [r1, r2]
 80103be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80103c2:	7b3a      	ldrb	r2, [r7, #12]
 80103c4:	490f      	ldr	r1, [pc, #60]	; (8010404 <UARTEx_SetNbDataToProcess+0x98>)
 80103c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80103c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80103d4:	7bfb      	ldrb	r3, [r7, #15]
 80103d6:	7b7a      	ldrb	r2, [r7, #13]
 80103d8:	4909      	ldr	r1, [pc, #36]	; (8010400 <UARTEx_SetNbDataToProcess+0x94>)
 80103da:	5c8a      	ldrb	r2, [r1, r2]
 80103dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80103e0:	7b7a      	ldrb	r2, [r7, #13]
 80103e2:	4908      	ldr	r1, [pc, #32]	; (8010404 <UARTEx_SetNbDataToProcess+0x98>)
 80103e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80103e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80103f2:	bf00      	nop
 80103f4:	3714      	adds	r7, #20
 80103f6:	46bd      	mov	sp, r7
 80103f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fc:	4770      	bx	lr
 80103fe:	bf00      	nop
 8010400:	08013814 	.word	0x08013814
 8010404:	0801381c 	.word	0x0801381c

08010408 <__errno>:
 8010408:	4b01      	ldr	r3, [pc, #4]	; (8010410 <__errno+0x8>)
 801040a:	6818      	ldr	r0, [r3, #0]
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop
 8010410:	24000024 	.word	0x24000024

08010414 <__libc_init_array>:
 8010414:	b570      	push	{r4, r5, r6, lr}
 8010416:	4d0d      	ldr	r5, [pc, #52]	; (801044c <__libc_init_array+0x38>)
 8010418:	4c0d      	ldr	r4, [pc, #52]	; (8010450 <__libc_init_array+0x3c>)
 801041a:	1b64      	subs	r4, r4, r5
 801041c:	10a4      	asrs	r4, r4, #2
 801041e:	2600      	movs	r6, #0
 8010420:	42a6      	cmp	r6, r4
 8010422:	d109      	bne.n	8010438 <__libc_init_array+0x24>
 8010424:	4d0b      	ldr	r5, [pc, #44]	; (8010454 <__libc_init_array+0x40>)
 8010426:	4c0c      	ldr	r4, [pc, #48]	; (8010458 <__libc_init_array+0x44>)
 8010428:	f003 f994 	bl	8013754 <_init>
 801042c:	1b64      	subs	r4, r4, r5
 801042e:	10a4      	asrs	r4, r4, #2
 8010430:	2600      	movs	r6, #0
 8010432:	42a6      	cmp	r6, r4
 8010434:	d105      	bne.n	8010442 <__libc_init_array+0x2e>
 8010436:	bd70      	pop	{r4, r5, r6, pc}
 8010438:	f855 3b04 	ldr.w	r3, [r5], #4
 801043c:	4798      	blx	r3
 801043e:	3601      	adds	r6, #1
 8010440:	e7ee      	b.n	8010420 <__libc_init_array+0xc>
 8010442:	f855 3b04 	ldr.w	r3, [r5], #4
 8010446:	4798      	blx	r3
 8010448:	3601      	adds	r6, #1
 801044a:	e7f2      	b.n	8010432 <__libc_init_array+0x1e>
 801044c:	08013cb8 	.word	0x08013cb8
 8010450:	08013cb8 	.word	0x08013cb8
 8010454:	08013cb8 	.word	0x08013cb8
 8010458:	08013cbc 	.word	0x08013cbc

0801045c <memset>:
 801045c:	4402      	add	r2, r0
 801045e:	4603      	mov	r3, r0
 8010460:	4293      	cmp	r3, r2
 8010462:	d100      	bne.n	8010466 <memset+0xa>
 8010464:	4770      	bx	lr
 8010466:	f803 1b01 	strb.w	r1, [r3], #1
 801046a:	e7f9      	b.n	8010460 <memset+0x4>

0801046c <__cvt>:
 801046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801046e:	ed2d 8b02 	vpush	{d8}
 8010472:	eeb0 8b40 	vmov.f64	d8, d0
 8010476:	b085      	sub	sp, #20
 8010478:	4617      	mov	r7, r2
 801047a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801047c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801047e:	ee18 2a90 	vmov	r2, s17
 8010482:	f025 0520 	bic.w	r5, r5, #32
 8010486:	2a00      	cmp	r2, #0
 8010488:	bfb6      	itet	lt
 801048a:	222d      	movlt	r2, #45	; 0x2d
 801048c:	2200      	movge	r2, #0
 801048e:	eeb1 8b40 	vneglt.f64	d8, d0
 8010492:	2d46      	cmp	r5, #70	; 0x46
 8010494:	460c      	mov	r4, r1
 8010496:	701a      	strb	r2, [r3, #0]
 8010498:	d004      	beq.n	80104a4 <__cvt+0x38>
 801049a:	2d45      	cmp	r5, #69	; 0x45
 801049c:	d100      	bne.n	80104a0 <__cvt+0x34>
 801049e:	3401      	adds	r4, #1
 80104a0:	2102      	movs	r1, #2
 80104a2:	e000      	b.n	80104a6 <__cvt+0x3a>
 80104a4:	2103      	movs	r1, #3
 80104a6:	ab03      	add	r3, sp, #12
 80104a8:	9301      	str	r3, [sp, #4]
 80104aa:	ab02      	add	r3, sp, #8
 80104ac:	9300      	str	r3, [sp, #0]
 80104ae:	4622      	mov	r2, r4
 80104b0:	4633      	mov	r3, r6
 80104b2:	eeb0 0b48 	vmov.f64	d0, d8
 80104b6:	f000 fdf7 	bl	80110a8 <_dtoa_r>
 80104ba:	2d47      	cmp	r5, #71	; 0x47
 80104bc:	d109      	bne.n	80104d2 <__cvt+0x66>
 80104be:	07fb      	lsls	r3, r7, #31
 80104c0:	d407      	bmi.n	80104d2 <__cvt+0x66>
 80104c2:	9b03      	ldr	r3, [sp, #12]
 80104c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80104c6:	1a1b      	subs	r3, r3, r0
 80104c8:	6013      	str	r3, [r2, #0]
 80104ca:	b005      	add	sp, #20
 80104cc:	ecbd 8b02 	vpop	{d8}
 80104d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104d2:	2d46      	cmp	r5, #70	; 0x46
 80104d4:	eb00 0204 	add.w	r2, r0, r4
 80104d8:	d10c      	bne.n	80104f4 <__cvt+0x88>
 80104da:	7803      	ldrb	r3, [r0, #0]
 80104dc:	2b30      	cmp	r3, #48	; 0x30
 80104de:	d107      	bne.n	80104f0 <__cvt+0x84>
 80104e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80104e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e8:	bf1c      	itt	ne
 80104ea:	f1c4 0401 	rsbne	r4, r4, #1
 80104ee:	6034      	strne	r4, [r6, #0]
 80104f0:	6833      	ldr	r3, [r6, #0]
 80104f2:	441a      	add	r2, r3
 80104f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80104f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fc:	bf08      	it	eq
 80104fe:	9203      	streq	r2, [sp, #12]
 8010500:	2130      	movs	r1, #48	; 0x30
 8010502:	9b03      	ldr	r3, [sp, #12]
 8010504:	4293      	cmp	r3, r2
 8010506:	d2dc      	bcs.n	80104c2 <__cvt+0x56>
 8010508:	1c5c      	adds	r4, r3, #1
 801050a:	9403      	str	r4, [sp, #12]
 801050c:	7019      	strb	r1, [r3, #0]
 801050e:	e7f8      	b.n	8010502 <__cvt+0x96>

08010510 <__exponent>:
 8010510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010512:	4603      	mov	r3, r0
 8010514:	2900      	cmp	r1, #0
 8010516:	bfb8      	it	lt
 8010518:	4249      	neglt	r1, r1
 801051a:	f803 2b02 	strb.w	r2, [r3], #2
 801051e:	bfb4      	ite	lt
 8010520:	222d      	movlt	r2, #45	; 0x2d
 8010522:	222b      	movge	r2, #43	; 0x2b
 8010524:	2909      	cmp	r1, #9
 8010526:	7042      	strb	r2, [r0, #1]
 8010528:	dd2a      	ble.n	8010580 <__exponent+0x70>
 801052a:	f10d 0407 	add.w	r4, sp, #7
 801052e:	46a4      	mov	ip, r4
 8010530:	270a      	movs	r7, #10
 8010532:	46a6      	mov	lr, r4
 8010534:	460a      	mov	r2, r1
 8010536:	fb91 f6f7 	sdiv	r6, r1, r7
 801053a:	fb07 1516 	mls	r5, r7, r6, r1
 801053e:	3530      	adds	r5, #48	; 0x30
 8010540:	2a63      	cmp	r2, #99	; 0x63
 8010542:	f104 34ff 	add.w	r4, r4, #4294967295
 8010546:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801054a:	4631      	mov	r1, r6
 801054c:	dcf1      	bgt.n	8010532 <__exponent+0x22>
 801054e:	3130      	adds	r1, #48	; 0x30
 8010550:	f1ae 0502 	sub.w	r5, lr, #2
 8010554:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010558:	1c44      	adds	r4, r0, #1
 801055a:	4629      	mov	r1, r5
 801055c:	4561      	cmp	r1, ip
 801055e:	d30a      	bcc.n	8010576 <__exponent+0x66>
 8010560:	f10d 0209 	add.w	r2, sp, #9
 8010564:	eba2 020e 	sub.w	r2, r2, lr
 8010568:	4565      	cmp	r5, ip
 801056a:	bf88      	it	hi
 801056c:	2200      	movhi	r2, #0
 801056e:	4413      	add	r3, r2
 8010570:	1a18      	subs	r0, r3, r0
 8010572:	b003      	add	sp, #12
 8010574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010576:	f811 2b01 	ldrb.w	r2, [r1], #1
 801057a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801057e:	e7ed      	b.n	801055c <__exponent+0x4c>
 8010580:	2330      	movs	r3, #48	; 0x30
 8010582:	3130      	adds	r1, #48	; 0x30
 8010584:	7083      	strb	r3, [r0, #2]
 8010586:	70c1      	strb	r1, [r0, #3]
 8010588:	1d03      	adds	r3, r0, #4
 801058a:	e7f1      	b.n	8010570 <__exponent+0x60>
 801058c:	0000      	movs	r0, r0
	...

08010590 <_printf_float>:
 8010590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010594:	b08b      	sub	sp, #44	; 0x2c
 8010596:	460c      	mov	r4, r1
 8010598:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801059c:	4616      	mov	r6, r2
 801059e:	461f      	mov	r7, r3
 80105a0:	4605      	mov	r5, r0
 80105a2:	f001 fcbb 	bl	8011f1c <_localeconv_r>
 80105a6:	f8d0 b000 	ldr.w	fp, [r0]
 80105aa:	4658      	mov	r0, fp
 80105ac:	f7ef fe98 	bl	80002e0 <strlen>
 80105b0:	2300      	movs	r3, #0
 80105b2:	9308      	str	r3, [sp, #32]
 80105b4:	f8d8 3000 	ldr.w	r3, [r8]
 80105b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80105bc:	6822      	ldr	r2, [r4, #0]
 80105be:	3307      	adds	r3, #7
 80105c0:	f023 0307 	bic.w	r3, r3, #7
 80105c4:	f103 0108 	add.w	r1, r3, #8
 80105c8:	f8c8 1000 	str.w	r1, [r8]
 80105cc:	4682      	mov	sl, r0
 80105ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80105d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80105d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010838 <_printf_float+0x2a8>
 80105da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80105de:	eeb0 6bc0 	vabs.f64	d6, d0
 80105e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80105e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ea:	dd24      	ble.n	8010636 <_printf_float+0xa6>
 80105ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80105f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105f4:	d502      	bpl.n	80105fc <_printf_float+0x6c>
 80105f6:	232d      	movs	r3, #45	; 0x2d
 80105f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105fc:	4b90      	ldr	r3, [pc, #576]	; (8010840 <_printf_float+0x2b0>)
 80105fe:	4891      	ldr	r0, [pc, #580]	; (8010844 <_printf_float+0x2b4>)
 8010600:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010604:	bf94      	ite	ls
 8010606:	4698      	movls	r8, r3
 8010608:	4680      	movhi	r8, r0
 801060a:	2303      	movs	r3, #3
 801060c:	6123      	str	r3, [r4, #16]
 801060e:	f022 0204 	bic.w	r2, r2, #4
 8010612:	2300      	movs	r3, #0
 8010614:	6022      	str	r2, [r4, #0]
 8010616:	9304      	str	r3, [sp, #16]
 8010618:	9700      	str	r7, [sp, #0]
 801061a:	4633      	mov	r3, r6
 801061c:	aa09      	add	r2, sp, #36	; 0x24
 801061e:	4621      	mov	r1, r4
 8010620:	4628      	mov	r0, r5
 8010622:	f000 f9d3 	bl	80109cc <_printf_common>
 8010626:	3001      	adds	r0, #1
 8010628:	f040 808a 	bne.w	8010740 <_printf_float+0x1b0>
 801062c:	f04f 30ff 	mov.w	r0, #4294967295
 8010630:	b00b      	add	sp, #44	; 0x2c
 8010632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010636:	eeb4 0b40 	vcmp.f64	d0, d0
 801063a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801063e:	d709      	bvc.n	8010654 <_printf_float+0xc4>
 8010640:	ee10 3a90 	vmov	r3, s1
 8010644:	2b00      	cmp	r3, #0
 8010646:	bfbc      	itt	lt
 8010648:	232d      	movlt	r3, #45	; 0x2d
 801064a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801064e:	487e      	ldr	r0, [pc, #504]	; (8010848 <_printf_float+0x2b8>)
 8010650:	4b7e      	ldr	r3, [pc, #504]	; (801084c <_printf_float+0x2bc>)
 8010652:	e7d5      	b.n	8010600 <_printf_float+0x70>
 8010654:	6863      	ldr	r3, [r4, #4]
 8010656:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801065a:	9104      	str	r1, [sp, #16]
 801065c:	1c59      	adds	r1, r3, #1
 801065e:	d13c      	bne.n	80106da <_printf_float+0x14a>
 8010660:	2306      	movs	r3, #6
 8010662:	6063      	str	r3, [r4, #4]
 8010664:	2300      	movs	r3, #0
 8010666:	9303      	str	r3, [sp, #12]
 8010668:	ab08      	add	r3, sp, #32
 801066a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801066e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010672:	ab07      	add	r3, sp, #28
 8010674:	6861      	ldr	r1, [r4, #4]
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	6022      	str	r2, [r4, #0]
 801067a:	f10d 031b 	add.w	r3, sp, #27
 801067e:	4628      	mov	r0, r5
 8010680:	f7ff fef4 	bl	801046c <__cvt>
 8010684:	9b04      	ldr	r3, [sp, #16]
 8010686:	9907      	ldr	r1, [sp, #28]
 8010688:	2b47      	cmp	r3, #71	; 0x47
 801068a:	4680      	mov	r8, r0
 801068c:	d108      	bne.n	80106a0 <_printf_float+0x110>
 801068e:	1cc8      	adds	r0, r1, #3
 8010690:	db02      	blt.n	8010698 <_printf_float+0x108>
 8010692:	6863      	ldr	r3, [r4, #4]
 8010694:	4299      	cmp	r1, r3
 8010696:	dd41      	ble.n	801071c <_printf_float+0x18c>
 8010698:	f1a9 0902 	sub.w	r9, r9, #2
 801069c:	fa5f f989 	uxtb.w	r9, r9
 80106a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80106a4:	d820      	bhi.n	80106e8 <_printf_float+0x158>
 80106a6:	3901      	subs	r1, #1
 80106a8:	464a      	mov	r2, r9
 80106aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80106ae:	9107      	str	r1, [sp, #28]
 80106b0:	f7ff ff2e 	bl	8010510 <__exponent>
 80106b4:	9a08      	ldr	r2, [sp, #32]
 80106b6:	9004      	str	r0, [sp, #16]
 80106b8:	1813      	adds	r3, r2, r0
 80106ba:	2a01      	cmp	r2, #1
 80106bc:	6123      	str	r3, [r4, #16]
 80106be:	dc02      	bgt.n	80106c6 <_printf_float+0x136>
 80106c0:	6822      	ldr	r2, [r4, #0]
 80106c2:	07d2      	lsls	r2, r2, #31
 80106c4:	d501      	bpl.n	80106ca <_printf_float+0x13a>
 80106c6:	3301      	adds	r3, #1
 80106c8:	6123      	str	r3, [r4, #16]
 80106ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d0a2      	beq.n	8010618 <_printf_float+0x88>
 80106d2:	232d      	movs	r3, #45	; 0x2d
 80106d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80106d8:	e79e      	b.n	8010618 <_printf_float+0x88>
 80106da:	9904      	ldr	r1, [sp, #16]
 80106dc:	2947      	cmp	r1, #71	; 0x47
 80106de:	d1c1      	bne.n	8010664 <_printf_float+0xd4>
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d1bf      	bne.n	8010664 <_printf_float+0xd4>
 80106e4:	2301      	movs	r3, #1
 80106e6:	e7bc      	b.n	8010662 <_printf_float+0xd2>
 80106e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80106ec:	d118      	bne.n	8010720 <_printf_float+0x190>
 80106ee:	2900      	cmp	r1, #0
 80106f0:	6863      	ldr	r3, [r4, #4]
 80106f2:	dd0b      	ble.n	801070c <_printf_float+0x17c>
 80106f4:	6121      	str	r1, [r4, #16]
 80106f6:	b913      	cbnz	r3, 80106fe <_printf_float+0x16e>
 80106f8:	6822      	ldr	r2, [r4, #0]
 80106fa:	07d0      	lsls	r0, r2, #31
 80106fc:	d502      	bpl.n	8010704 <_printf_float+0x174>
 80106fe:	3301      	adds	r3, #1
 8010700:	440b      	add	r3, r1
 8010702:	6123      	str	r3, [r4, #16]
 8010704:	2300      	movs	r3, #0
 8010706:	65a1      	str	r1, [r4, #88]	; 0x58
 8010708:	9304      	str	r3, [sp, #16]
 801070a:	e7de      	b.n	80106ca <_printf_float+0x13a>
 801070c:	b913      	cbnz	r3, 8010714 <_printf_float+0x184>
 801070e:	6822      	ldr	r2, [r4, #0]
 8010710:	07d2      	lsls	r2, r2, #31
 8010712:	d501      	bpl.n	8010718 <_printf_float+0x188>
 8010714:	3302      	adds	r3, #2
 8010716:	e7f4      	b.n	8010702 <_printf_float+0x172>
 8010718:	2301      	movs	r3, #1
 801071a:	e7f2      	b.n	8010702 <_printf_float+0x172>
 801071c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010720:	9b08      	ldr	r3, [sp, #32]
 8010722:	4299      	cmp	r1, r3
 8010724:	db05      	blt.n	8010732 <_printf_float+0x1a2>
 8010726:	6823      	ldr	r3, [r4, #0]
 8010728:	6121      	str	r1, [r4, #16]
 801072a:	07d8      	lsls	r0, r3, #31
 801072c:	d5ea      	bpl.n	8010704 <_printf_float+0x174>
 801072e:	1c4b      	adds	r3, r1, #1
 8010730:	e7e7      	b.n	8010702 <_printf_float+0x172>
 8010732:	2900      	cmp	r1, #0
 8010734:	bfd4      	ite	le
 8010736:	f1c1 0202 	rsble	r2, r1, #2
 801073a:	2201      	movgt	r2, #1
 801073c:	4413      	add	r3, r2
 801073e:	e7e0      	b.n	8010702 <_printf_float+0x172>
 8010740:	6823      	ldr	r3, [r4, #0]
 8010742:	055a      	lsls	r2, r3, #21
 8010744:	d407      	bmi.n	8010756 <_printf_float+0x1c6>
 8010746:	6923      	ldr	r3, [r4, #16]
 8010748:	4642      	mov	r2, r8
 801074a:	4631      	mov	r1, r6
 801074c:	4628      	mov	r0, r5
 801074e:	47b8      	blx	r7
 8010750:	3001      	adds	r0, #1
 8010752:	d12a      	bne.n	80107aa <_printf_float+0x21a>
 8010754:	e76a      	b.n	801062c <_printf_float+0x9c>
 8010756:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801075a:	f240 80e2 	bls.w	8010922 <_printf_float+0x392>
 801075e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010762:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076a:	d133      	bne.n	80107d4 <_printf_float+0x244>
 801076c:	4a38      	ldr	r2, [pc, #224]	; (8010850 <_printf_float+0x2c0>)
 801076e:	2301      	movs	r3, #1
 8010770:	4631      	mov	r1, r6
 8010772:	4628      	mov	r0, r5
 8010774:	47b8      	blx	r7
 8010776:	3001      	adds	r0, #1
 8010778:	f43f af58 	beq.w	801062c <_printf_float+0x9c>
 801077c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010780:	429a      	cmp	r2, r3
 8010782:	db02      	blt.n	801078a <_printf_float+0x1fa>
 8010784:	6823      	ldr	r3, [r4, #0]
 8010786:	07d8      	lsls	r0, r3, #31
 8010788:	d50f      	bpl.n	80107aa <_printf_float+0x21a>
 801078a:	4653      	mov	r3, sl
 801078c:	465a      	mov	r2, fp
 801078e:	4631      	mov	r1, r6
 8010790:	4628      	mov	r0, r5
 8010792:	47b8      	blx	r7
 8010794:	3001      	adds	r0, #1
 8010796:	f43f af49 	beq.w	801062c <_printf_float+0x9c>
 801079a:	f04f 0800 	mov.w	r8, #0
 801079e:	f104 091a 	add.w	r9, r4, #26
 80107a2:	9b08      	ldr	r3, [sp, #32]
 80107a4:	3b01      	subs	r3, #1
 80107a6:	4543      	cmp	r3, r8
 80107a8:	dc09      	bgt.n	80107be <_printf_float+0x22e>
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	079b      	lsls	r3, r3, #30
 80107ae:	f100 8108 	bmi.w	80109c2 <_printf_float+0x432>
 80107b2:	68e0      	ldr	r0, [r4, #12]
 80107b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107b6:	4298      	cmp	r0, r3
 80107b8:	bfb8      	it	lt
 80107ba:	4618      	movlt	r0, r3
 80107bc:	e738      	b.n	8010630 <_printf_float+0xa0>
 80107be:	2301      	movs	r3, #1
 80107c0:	464a      	mov	r2, r9
 80107c2:	4631      	mov	r1, r6
 80107c4:	4628      	mov	r0, r5
 80107c6:	47b8      	blx	r7
 80107c8:	3001      	adds	r0, #1
 80107ca:	f43f af2f 	beq.w	801062c <_printf_float+0x9c>
 80107ce:	f108 0801 	add.w	r8, r8, #1
 80107d2:	e7e6      	b.n	80107a2 <_printf_float+0x212>
 80107d4:	9b07      	ldr	r3, [sp, #28]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	dc3c      	bgt.n	8010854 <_printf_float+0x2c4>
 80107da:	4a1d      	ldr	r2, [pc, #116]	; (8010850 <_printf_float+0x2c0>)
 80107dc:	2301      	movs	r3, #1
 80107de:	4631      	mov	r1, r6
 80107e0:	4628      	mov	r0, r5
 80107e2:	47b8      	blx	r7
 80107e4:	3001      	adds	r0, #1
 80107e6:	f43f af21 	beq.w	801062c <_printf_float+0x9c>
 80107ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80107ee:	4313      	orrs	r3, r2
 80107f0:	d102      	bne.n	80107f8 <_printf_float+0x268>
 80107f2:	6823      	ldr	r3, [r4, #0]
 80107f4:	07d9      	lsls	r1, r3, #31
 80107f6:	d5d8      	bpl.n	80107aa <_printf_float+0x21a>
 80107f8:	4653      	mov	r3, sl
 80107fa:	465a      	mov	r2, fp
 80107fc:	4631      	mov	r1, r6
 80107fe:	4628      	mov	r0, r5
 8010800:	47b8      	blx	r7
 8010802:	3001      	adds	r0, #1
 8010804:	f43f af12 	beq.w	801062c <_printf_float+0x9c>
 8010808:	f04f 0900 	mov.w	r9, #0
 801080c:	f104 0a1a 	add.w	sl, r4, #26
 8010810:	9b07      	ldr	r3, [sp, #28]
 8010812:	425b      	negs	r3, r3
 8010814:	454b      	cmp	r3, r9
 8010816:	dc01      	bgt.n	801081c <_printf_float+0x28c>
 8010818:	9b08      	ldr	r3, [sp, #32]
 801081a:	e795      	b.n	8010748 <_printf_float+0x1b8>
 801081c:	2301      	movs	r3, #1
 801081e:	4652      	mov	r2, sl
 8010820:	4631      	mov	r1, r6
 8010822:	4628      	mov	r0, r5
 8010824:	47b8      	blx	r7
 8010826:	3001      	adds	r0, #1
 8010828:	f43f af00 	beq.w	801062c <_printf_float+0x9c>
 801082c:	f109 0901 	add.w	r9, r9, #1
 8010830:	e7ee      	b.n	8010810 <_printf_float+0x280>
 8010832:	bf00      	nop
 8010834:	f3af 8000 	nop.w
 8010838:	ffffffff 	.word	0xffffffff
 801083c:	7fefffff 	.word	0x7fefffff
 8010840:	08013828 	.word	0x08013828
 8010844:	0801382c 	.word	0x0801382c
 8010848:	08013834 	.word	0x08013834
 801084c:	08013830 	.word	0x08013830
 8010850:	08013838 	.word	0x08013838
 8010854:	9a08      	ldr	r2, [sp, #32]
 8010856:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010858:	429a      	cmp	r2, r3
 801085a:	bfa8      	it	ge
 801085c:	461a      	movge	r2, r3
 801085e:	2a00      	cmp	r2, #0
 8010860:	4691      	mov	r9, r2
 8010862:	dc38      	bgt.n	80108d6 <_printf_float+0x346>
 8010864:	2300      	movs	r3, #0
 8010866:	9305      	str	r3, [sp, #20]
 8010868:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801086c:	f104 021a 	add.w	r2, r4, #26
 8010870:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010872:	9905      	ldr	r1, [sp, #20]
 8010874:	9304      	str	r3, [sp, #16]
 8010876:	eba3 0309 	sub.w	r3, r3, r9
 801087a:	428b      	cmp	r3, r1
 801087c:	dc33      	bgt.n	80108e6 <_printf_float+0x356>
 801087e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010882:	429a      	cmp	r2, r3
 8010884:	db3c      	blt.n	8010900 <_printf_float+0x370>
 8010886:	6823      	ldr	r3, [r4, #0]
 8010888:	07da      	lsls	r2, r3, #31
 801088a:	d439      	bmi.n	8010900 <_printf_float+0x370>
 801088c:	9a08      	ldr	r2, [sp, #32]
 801088e:	9b04      	ldr	r3, [sp, #16]
 8010890:	9907      	ldr	r1, [sp, #28]
 8010892:	1ad3      	subs	r3, r2, r3
 8010894:	eba2 0901 	sub.w	r9, r2, r1
 8010898:	4599      	cmp	r9, r3
 801089a:	bfa8      	it	ge
 801089c:	4699      	movge	r9, r3
 801089e:	f1b9 0f00 	cmp.w	r9, #0
 80108a2:	dc35      	bgt.n	8010910 <_printf_float+0x380>
 80108a4:	f04f 0800 	mov.w	r8, #0
 80108a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80108ac:	f104 0a1a 	add.w	sl, r4, #26
 80108b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80108b4:	1a9b      	subs	r3, r3, r2
 80108b6:	eba3 0309 	sub.w	r3, r3, r9
 80108ba:	4543      	cmp	r3, r8
 80108bc:	f77f af75 	ble.w	80107aa <_printf_float+0x21a>
 80108c0:	2301      	movs	r3, #1
 80108c2:	4652      	mov	r2, sl
 80108c4:	4631      	mov	r1, r6
 80108c6:	4628      	mov	r0, r5
 80108c8:	47b8      	blx	r7
 80108ca:	3001      	adds	r0, #1
 80108cc:	f43f aeae 	beq.w	801062c <_printf_float+0x9c>
 80108d0:	f108 0801 	add.w	r8, r8, #1
 80108d4:	e7ec      	b.n	80108b0 <_printf_float+0x320>
 80108d6:	4613      	mov	r3, r2
 80108d8:	4631      	mov	r1, r6
 80108da:	4642      	mov	r2, r8
 80108dc:	4628      	mov	r0, r5
 80108de:	47b8      	blx	r7
 80108e0:	3001      	adds	r0, #1
 80108e2:	d1bf      	bne.n	8010864 <_printf_float+0x2d4>
 80108e4:	e6a2      	b.n	801062c <_printf_float+0x9c>
 80108e6:	2301      	movs	r3, #1
 80108e8:	4631      	mov	r1, r6
 80108ea:	4628      	mov	r0, r5
 80108ec:	9204      	str	r2, [sp, #16]
 80108ee:	47b8      	blx	r7
 80108f0:	3001      	adds	r0, #1
 80108f2:	f43f ae9b 	beq.w	801062c <_printf_float+0x9c>
 80108f6:	9b05      	ldr	r3, [sp, #20]
 80108f8:	9a04      	ldr	r2, [sp, #16]
 80108fa:	3301      	adds	r3, #1
 80108fc:	9305      	str	r3, [sp, #20]
 80108fe:	e7b7      	b.n	8010870 <_printf_float+0x2e0>
 8010900:	4653      	mov	r3, sl
 8010902:	465a      	mov	r2, fp
 8010904:	4631      	mov	r1, r6
 8010906:	4628      	mov	r0, r5
 8010908:	47b8      	blx	r7
 801090a:	3001      	adds	r0, #1
 801090c:	d1be      	bne.n	801088c <_printf_float+0x2fc>
 801090e:	e68d      	b.n	801062c <_printf_float+0x9c>
 8010910:	9a04      	ldr	r2, [sp, #16]
 8010912:	464b      	mov	r3, r9
 8010914:	4442      	add	r2, r8
 8010916:	4631      	mov	r1, r6
 8010918:	4628      	mov	r0, r5
 801091a:	47b8      	blx	r7
 801091c:	3001      	adds	r0, #1
 801091e:	d1c1      	bne.n	80108a4 <_printf_float+0x314>
 8010920:	e684      	b.n	801062c <_printf_float+0x9c>
 8010922:	9a08      	ldr	r2, [sp, #32]
 8010924:	2a01      	cmp	r2, #1
 8010926:	dc01      	bgt.n	801092c <_printf_float+0x39c>
 8010928:	07db      	lsls	r3, r3, #31
 801092a:	d537      	bpl.n	801099c <_printf_float+0x40c>
 801092c:	2301      	movs	r3, #1
 801092e:	4642      	mov	r2, r8
 8010930:	4631      	mov	r1, r6
 8010932:	4628      	mov	r0, r5
 8010934:	47b8      	blx	r7
 8010936:	3001      	adds	r0, #1
 8010938:	f43f ae78 	beq.w	801062c <_printf_float+0x9c>
 801093c:	4653      	mov	r3, sl
 801093e:	465a      	mov	r2, fp
 8010940:	4631      	mov	r1, r6
 8010942:	4628      	mov	r0, r5
 8010944:	47b8      	blx	r7
 8010946:	3001      	adds	r0, #1
 8010948:	f43f ae70 	beq.w	801062c <_printf_float+0x9c>
 801094c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010950:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010958:	d01b      	beq.n	8010992 <_printf_float+0x402>
 801095a:	9b08      	ldr	r3, [sp, #32]
 801095c:	f108 0201 	add.w	r2, r8, #1
 8010960:	3b01      	subs	r3, #1
 8010962:	4631      	mov	r1, r6
 8010964:	4628      	mov	r0, r5
 8010966:	47b8      	blx	r7
 8010968:	3001      	adds	r0, #1
 801096a:	d10e      	bne.n	801098a <_printf_float+0x3fa>
 801096c:	e65e      	b.n	801062c <_printf_float+0x9c>
 801096e:	2301      	movs	r3, #1
 8010970:	464a      	mov	r2, r9
 8010972:	4631      	mov	r1, r6
 8010974:	4628      	mov	r0, r5
 8010976:	47b8      	blx	r7
 8010978:	3001      	adds	r0, #1
 801097a:	f43f ae57 	beq.w	801062c <_printf_float+0x9c>
 801097e:	f108 0801 	add.w	r8, r8, #1
 8010982:	9b08      	ldr	r3, [sp, #32]
 8010984:	3b01      	subs	r3, #1
 8010986:	4543      	cmp	r3, r8
 8010988:	dcf1      	bgt.n	801096e <_printf_float+0x3de>
 801098a:	9b04      	ldr	r3, [sp, #16]
 801098c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010990:	e6db      	b.n	801074a <_printf_float+0x1ba>
 8010992:	f04f 0800 	mov.w	r8, #0
 8010996:	f104 091a 	add.w	r9, r4, #26
 801099a:	e7f2      	b.n	8010982 <_printf_float+0x3f2>
 801099c:	2301      	movs	r3, #1
 801099e:	4642      	mov	r2, r8
 80109a0:	e7df      	b.n	8010962 <_printf_float+0x3d2>
 80109a2:	2301      	movs	r3, #1
 80109a4:	464a      	mov	r2, r9
 80109a6:	4631      	mov	r1, r6
 80109a8:	4628      	mov	r0, r5
 80109aa:	47b8      	blx	r7
 80109ac:	3001      	adds	r0, #1
 80109ae:	f43f ae3d 	beq.w	801062c <_printf_float+0x9c>
 80109b2:	f108 0801 	add.w	r8, r8, #1
 80109b6:	68e3      	ldr	r3, [r4, #12]
 80109b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109ba:	1a5b      	subs	r3, r3, r1
 80109bc:	4543      	cmp	r3, r8
 80109be:	dcf0      	bgt.n	80109a2 <_printf_float+0x412>
 80109c0:	e6f7      	b.n	80107b2 <_printf_float+0x222>
 80109c2:	f04f 0800 	mov.w	r8, #0
 80109c6:	f104 0919 	add.w	r9, r4, #25
 80109ca:	e7f4      	b.n	80109b6 <_printf_float+0x426>

080109cc <_printf_common>:
 80109cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d0:	4616      	mov	r6, r2
 80109d2:	4699      	mov	r9, r3
 80109d4:	688a      	ldr	r2, [r1, #8]
 80109d6:	690b      	ldr	r3, [r1, #16]
 80109d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80109dc:	4293      	cmp	r3, r2
 80109de:	bfb8      	it	lt
 80109e0:	4613      	movlt	r3, r2
 80109e2:	6033      	str	r3, [r6, #0]
 80109e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80109e8:	4607      	mov	r7, r0
 80109ea:	460c      	mov	r4, r1
 80109ec:	b10a      	cbz	r2, 80109f2 <_printf_common+0x26>
 80109ee:	3301      	adds	r3, #1
 80109f0:	6033      	str	r3, [r6, #0]
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	0699      	lsls	r1, r3, #26
 80109f6:	bf42      	ittt	mi
 80109f8:	6833      	ldrmi	r3, [r6, #0]
 80109fa:	3302      	addmi	r3, #2
 80109fc:	6033      	strmi	r3, [r6, #0]
 80109fe:	6825      	ldr	r5, [r4, #0]
 8010a00:	f015 0506 	ands.w	r5, r5, #6
 8010a04:	d106      	bne.n	8010a14 <_printf_common+0x48>
 8010a06:	f104 0a19 	add.w	sl, r4, #25
 8010a0a:	68e3      	ldr	r3, [r4, #12]
 8010a0c:	6832      	ldr	r2, [r6, #0]
 8010a0e:	1a9b      	subs	r3, r3, r2
 8010a10:	42ab      	cmp	r3, r5
 8010a12:	dc26      	bgt.n	8010a62 <_printf_common+0x96>
 8010a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010a18:	1e13      	subs	r3, r2, #0
 8010a1a:	6822      	ldr	r2, [r4, #0]
 8010a1c:	bf18      	it	ne
 8010a1e:	2301      	movne	r3, #1
 8010a20:	0692      	lsls	r2, r2, #26
 8010a22:	d42b      	bmi.n	8010a7c <_printf_common+0xb0>
 8010a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a28:	4649      	mov	r1, r9
 8010a2a:	4638      	mov	r0, r7
 8010a2c:	47c0      	blx	r8
 8010a2e:	3001      	adds	r0, #1
 8010a30:	d01e      	beq.n	8010a70 <_printf_common+0xa4>
 8010a32:	6823      	ldr	r3, [r4, #0]
 8010a34:	68e5      	ldr	r5, [r4, #12]
 8010a36:	6832      	ldr	r2, [r6, #0]
 8010a38:	f003 0306 	and.w	r3, r3, #6
 8010a3c:	2b04      	cmp	r3, #4
 8010a3e:	bf08      	it	eq
 8010a40:	1aad      	subeq	r5, r5, r2
 8010a42:	68a3      	ldr	r3, [r4, #8]
 8010a44:	6922      	ldr	r2, [r4, #16]
 8010a46:	bf0c      	ite	eq
 8010a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a4c:	2500      	movne	r5, #0
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	bfc4      	itt	gt
 8010a52:	1a9b      	subgt	r3, r3, r2
 8010a54:	18ed      	addgt	r5, r5, r3
 8010a56:	2600      	movs	r6, #0
 8010a58:	341a      	adds	r4, #26
 8010a5a:	42b5      	cmp	r5, r6
 8010a5c:	d11a      	bne.n	8010a94 <_printf_common+0xc8>
 8010a5e:	2000      	movs	r0, #0
 8010a60:	e008      	b.n	8010a74 <_printf_common+0xa8>
 8010a62:	2301      	movs	r3, #1
 8010a64:	4652      	mov	r2, sl
 8010a66:	4649      	mov	r1, r9
 8010a68:	4638      	mov	r0, r7
 8010a6a:	47c0      	blx	r8
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	d103      	bne.n	8010a78 <_printf_common+0xac>
 8010a70:	f04f 30ff 	mov.w	r0, #4294967295
 8010a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a78:	3501      	adds	r5, #1
 8010a7a:	e7c6      	b.n	8010a0a <_printf_common+0x3e>
 8010a7c:	18e1      	adds	r1, r4, r3
 8010a7e:	1c5a      	adds	r2, r3, #1
 8010a80:	2030      	movs	r0, #48	; 0x30
 8010a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010a86:	4422      	add	r2, r4
 8010a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010a90:	3302      	adds	r3, #2
 8010a92:	e7c7      	b.n	8010a24 <_printf_common+0x58>
 8010a94:	2301      	movs	r3, #1
 8010a96:	4622      	mov	r2, r4
 8010a98:	4649      	mov	r1, r9
 8010a9a:	4638      	mov	r0, r7
 8010a9c:	47c0      	blx	r8
 8010a9e:	3001      	adds	r0, #1
 8010aa0:	d0e6      	beq.n	8010a70 <_printf_common+0xa4>
 8010aa2:	3601      	adds	r6, #1
 8010aa4:	e7d9      	b.n	8010a5a <_printf_common+0x8e>
	...

08010aa8 <_printf_i>:
 8010aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010aac:	460c      	mov	r4, r1
 8010aae:	4691      	mov	r9, r2
 8010ab0:	7e27      	ldrb	r7, [r4, #24]
 8010ab2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010ab4:	2f78      	cmp	r7, #120	; 0x78
 8010ab6:	4680      	mov	r8, r0
 8010ab8:	469a      	mov	sl, r3
 8010aba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010abe:	d807      	bhi.n	8010ad0 <_printf_i+0x28>
 8010ac0:	2f62      	cmp	r7, #98	; 0x62
 8010ac2:	d80a      	bhi.n	8010ada <_printf_i+0x32>
 8010ac4:	2f00      	cmp	r7, #0
 8010ac6:	f000 80d8 	beq.w	8010c7a <_printf_i+0x1d2>
 8010aca:	2f58      	cmp	r7, #88	; 0x58
 8010acc:	f000 80a3 	beq.w	8010c16 <_printf_i+0x16e>
 8010ad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010ad8:	e03a      	b.n	8010b50 <_printf_i+0xa8>
 8010ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010ade:	2b15      	cmp	r3, #21
 8010ae0:	d8f6      	bhi.n	8010ad0 <_printf_i+0x28>
 8010ae2:	a001      	add	r0, pc, #4	; (adr r0, 8010ae8 <_printf_i+0x40>)
 8010ae4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010ae8:	08010b41 	.word	0x08010b41
 8010aec:	08010b55 	.word	0x08010b55
 8010af0:	08010ad1 	.word	0x08010ad1
 8010af4:	08010ad1 	.word	0x08010ad1
 8010af8:	08010ad1 	.word	0x08010ad1
 8010afc:	08010ad1 	.word	0x08010ad1
 8010b00:	08010b55 	.word	0x08010b55
 8010b04:	08010ad1 	.word	0x08010ad1
 8010b08:	08010ad1 	.word	0x08010ad1
 8010b0c:	08010ad1 	.word	0x08010ad1
 8010b10:	08010ad1 	.word	0x08010ad1
 8010b14:	08010c61 	.word	0x08010c61
 8010b18:	08010b85 	.word	0x08010b85
 8010b1c:	08010c43 	.word	0x08010c43
 8010b20:	08010ad1 	.word	0x08010ad1
 8010b24:	08010ad1 	.word	0x08010ad1
 8010b28:	08010c83 	.word	0x08010c83
 8010b2c:	08010ad1 	.word	0x08010ad1
 8010b30:	08010b85 	.word	0x08010b85
 8010b34:	08010ad1 	.word	0x08010ad1
 8010b38:	08010ad1 	.word	0x08010ad1
 8010b3c:	08010c4b 	.word	0x08010c4b
 8010b40:	680b      	ldr	r3, [r1, #0]
 8010b42:	1d1a      	adds	r2, r3, #4
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	600a      	str	r2, [r1, #0]
 8010b48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010b50:	2301      	movs	r3, #1
 8010b52:	e0a3      	b.n	8010c9c <_printf_i+0x1f4>
 8010b54:	6825      	ldr	r5, [r4, #0]
 8010b56:	6808      	ldr	r0, [r1, #0]
 8010b58:	062e      	lsls	r6, r5, #24
 8010b5a:	f100 0304 	add.w	r3, r0, #4
 8010b5e:	d50a      	bpl.n	8010b76 <_printf_i+0xce>
 8010b60:	6805      	ldr	r5, [r0, #0]
 8010b62:	600b      	str	r3, [r1, #0]
 8010b64:	2d00      	cmp	r5, #0
 8010b66:	da03      	bge.n	8010b70 <_printf_i+0xc8>
 8010b68:	232d      	movs	r3, #45	; 0x2d
 8010b6a:	426d      	negs	r5, r5
 8010b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b70:	485e      	ldr	r0, [pc, #376]	; (8010cec <_printf_i+0x244>)
 8010b72:	230a      	movs	r3, #10
 8010b74:	e019      	b.n	8010baa <_printf_i+0x102>
 8010b76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010b7a:	6805      	ldr	r5, [r0, #0]
 8010b7c:	600b      	str	r3, [r1, #0]
 8010b7e:	bf18      	it	ne
 8010b80:	b22d      	sxthne	r5, r5
 8010b82:	e7ef      	b.n	8010b64 <_printf_i+0xbc>
 8010b84:	680b      	ldr	r3, [r1, #0]
 8010b86:	6825      	ldr	r5, [r4, #0]
 8010b88:	1d18      	adds	r0, r3, #4
 8010b8a:	6008      	str	r0, [r1, #0]
 8010b8c:	0628      	lsls	r0, r5, #24
 8010b8e:	d501      	bpl.n	8010b94 <_printf_i+0xec>
 8010b90:	681d      	ldr	r5, [r3, #0]
 8010b92:	e002      	b.n	8010b9a <_printf_i+0xf2>
 8010b94:	0669      	lsls	r1, r5, #25
 8010b96:	d5fb      	bpl.n	8010b90 <_printf_i+0xe8>
 8010b98:	881d      	ldrh	r5, [r3, #0]
 8010b9a:	4854      	ldr	r0, [pc, #336]	; (8010cec <_printf_i+0x244>)
 8010b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8010b9e:	bf0c      	ite	eq
 8010ba0:	2308      	moveq	r3, #8
 8010ba2:	230a      	movne	r3, #10
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010baa:	6866      	ldr	r6, [r4, #4]
 8010bac:	60a6      	str	r6, [r4, #8]
 8010bae:	2e00      	cmp	r6, #0
 8010bb0:	bfa2      	ittt	ge
 8010bb2:	6821      	ldrge	r1, [r4, #0]
 8010bb4:	f021 0104 	bicge.w	r1, r1, #4
 8010bb8:	6021      	strge	r1, [r4, #0]
 8010bba:	b90d      	cbnz	r5, 8010bc0 <_printf_i+0x118>
 8010bbc:	2e00      	cmp	r6, #0
 8010bbe:	d04d      	beq.n	8010c5c <_printf_i+0x1b4>
 8010bc0:	4616      	mov	r6, r2
 8010bc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010bc6:	fb03 5711 	mls	r7, r3, r1, r5
 8010bca:	5dc7      	ldrb	r7, [r0, r7]
 8010bcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010bd0:	462f      	mov	r7, r5
 8010bd2:	42bb      	cmp	r3, r7
 8010bd4:	460d      	mov	r5, r1
 8010bd6:	d9f4      	bls.n	8010bc2 <_printf_i+0x11a>
 8010bd8:	2b08      	cmp	r3, #8
 8010bda:	d10b      	bne.n	8010bf4 <_printf_i+0x14c>
 8010bdc:	6823      	ldr	r3, [r4, #0]
 8010bde:	07df      	lsls	r7, r3, #31
 8010be0:	d508      	bpl.n	8010bf4 <_printf_i+0x14c>
 8010be2:	6923      	ldr	r3, [r4, #16]
 8010be4:	6861      	ldr	r1, [r4, #4]
 8010be6:	4299      	cmp	r1, r3
 8010be8:	bfde      	ittt	le
 8010bea:	2330      	movle	r3, #48	; 0x30
 8010bec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010bf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010bf4:	1b92      	subs	r2, r2, r6
 8010bf6:	6122      	str	r2, [r4, #16]
 8010bf8:	f8cd a000 	str.w	sl, [sp]
 8010bfc:	464b      	mov	r3, r9
 8010bfe:	aa03      	add	r2, sp, #12
 8010c00:	4621      	mov	r1, r4
 8010c02:	4640      	mov	r0, r8
 8010c04:	f7ff fee2 	bl	80109cc <_printf_common>
 8010c08:	3001      	adds	r0, #1
 8010c0a:	d14c      	bne.n	8010ca6 <_printf_i+0x1fe>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	b004      	add	sp, #16
 8010c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c16:	4835      	ldr	r0, [pc, #212]	; (8010cec <_printf_i+0x244>)
 8010c18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010c1c:	6823      	ldr	r3, [r4, #0]
 8010c1e:	680e      	ldr	r6, [r1, #0]
 8010c20:	061f      	lsls	r7, r3, #24
 8010c22:	f856 5b04 	ldr.w	r5, [r6], #4
 8010c26:	600e      	str	r6, [r1, #0]
 8010c28:	d514      	bpl.n	8010c54 <_printf_i+0x1ac>
 8010c2a:	07d9      	lsls	r1, r3, #31
 8010c2c:	bf44      	itt	mi
 8010c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8010c32:	6023      	strmi	r3, [r4, #0]
 8010c34:	b91d      	cbnz	r5, 8010c3e <_printf_i+0x196>
 8010c36:	6823      	ldr	r3, [r4, #0]
 8010c38:	f023 0320 	bic.w	r3, r3, #32
 8010c3c:	6023      	str	r3, [r4, #0]
 8010c3e:	2310      	movs	r3, #16
 8010c40:	e7b0      	b.n	8010ba4 <_printf_i+0xfc>
 8010c42:	6823      	ldr	r3, [r4, #0]
 8010c44:	f043 0320 	orr.w	r3, r3, #32
 8010c48:	6023      	str	r3, [r4, #0]
 8010c4a:	2378      	movs	r3, #120	; 0x78
 8010c4c:	4828      	ldr	r0, [pc, #160]	; (8010cf0 <_printf_i+0x248>)
 8010c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c52:	e7e3      	b.n	8010c1c <_printf_i+0x174>
 8010c54:	065e      	lsls	r6, r3, #25
 8010c56:	bf48      	it	mi
 8010c58:	b2ad      	uxthmi	r5, r5
 8010c5a:	e7e6      	b.n	8010c2a <_printf_i+0x182>
 8010c5c:	4616      	mov	r6, r2
 8010c5e:	e7bb      	b.n	8010bd8 <_printf_i+0x130>
 8010c60:	680b      	ldr	r3, [r1, #0]
 8010c62:	6826      	ldr	r6, [r4, #0]
 8010c64:	6960      	ldr	r0, [r4, #20]
 8010c66:	1d1d      	adds	r5, r3, #4
 8010c68:	600d      	str	r5, [r1, #0]
 8010c6a:	0635      	lsls	r5, r6, #24
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	d501      	bpl.n	8010c74 <_printf_i+0x1cc>
 8010c70:	6018      	str	r0, [r3, #0]
 8010c72:	e002      	b.n	8010c7a <_printf_i+0x1d2>
 8010c74:	0671      	lsls	r1, r6, #25
 8010c76:	d5fb      	bpl.n	8010c70 <_printf_i+0x1c8>
 8010c78:	8018      	strh	r0, [r3, #0]
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	6123      	str	r3, [r4, #16]
 8010c7e:	4616      	mov	r6, r2
 8010c80:	e7ba      	b.n	8010bf8 <_printf_i+0x150>
 8010c82:	680b      	ldr	r3, [r1, #0]
 8010c84:	1d1a      	adds	r2, r3, #4
 8010c86:	600a      	str	r2, [r1, #0]
 8010c88:	681e      	ldr	r6, [r3, #0]
 8010c8a:	6862      	ldr	r2, [r4, #4]
 8010c8c:	2100      	movs	r1, #0
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f7ef fb2e 	bl	80002f0 <memchr>
 8010c94:	b108      	cbz	r0, 8010c9a <_printf_i+0x1f2>
 8010c96:	1b80      	subs	r0, r0, r6
 8010c98:	6060      	str	r0, [r4, #4]
 8010c9a:	6863      	ldr	r3, [r4, #4]
 8010c9c:	6123      	str	r3, [r4, #16]
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ca4:	e7a8      	b.n	8010bf8 <_printf_i+0x150>
 8010ca6:	6923      	ldr	r3, [r4, #16]
 8010ca8:	4632      	mov	r2, r6
 8010caa:	4649      	mov	r1, r9
 8010cac:	4640      	mov	r0, r8
 8010cae:	47d0      	blx	sl
 8010cb0:	3001      	adds	r0, #1
 8010cb2:	d0ab      	beq.n	8010c0c <_printf_i+0x164>
 8010cb4:	6823      	ldr	r3, [r4, #0]
 8010cb6:	079b      	lsls	r3, r3, #30
 8010cb8:	d413      	bmi.n	8010ce2 <_printf_i+0x23a>
 8010cba:	68e0      	ldr	r0, [r4, #12]
 8010cbc:	9b03      	ldr	r3, [sp, #12]
 8010cbe:	4298      	cmp	r0, r3
 8010cc0:	bfb8      	it	lt
 8010cc2:	4618      	movlt	r0, r3
 8010cc4:	e7a4      	b.n	8010c10 <_printf_i+0x168>
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	4632      	mov	r2, r6
 8010cca:	4649      	mov	r1, r9
 8010ccc:	4640      	mov	r0, r8
 8010cce:	47d0      	blx	sl
 8010cd0:	3001      	adds	r0, #1
 8010cd2:	d09b      	beq.n	8010c0c <_printf_i+0x164>
 8010cd4:	3501      	adds	r5, #1
 8010cd6:	68e3      	ldr	r3, [r4, #12]
 8010cd8:	9903      	ldr	r1, [sp, #12]
 8010cda:	1a5b      	subs	r3, r3, r1
 8010cdc:	42ab      	cmp	r3, r5
 8010cde:	dcf2      	bgt.n	8010cc6 <_printf_i+0x21e>
 8010ce0:	e7eb      	b.n	8010cba <_printf_i+0x212>
 8010ce2:	2500      	movs	r5, #0
 8010ce4:	f104 0619 	add.w	r6, r4, #25
 8010ce8:	e7f5      	b.n	8010cd6 <_printf_i+0x22e>
 8010cea:	bf00      	nop
 8010cec:	0801383a 	.word	0x0801383a
 8010cf0:	0801384b 	.word	0x0801384b

08010cf4 <iprintf>:
 8010cf4:	b40f      	push	{r0, r1, r2, r3}
 8010cf6:	4b0a      	ldr	r3, [pc, #40]	; (8010d20 <iprintf+0x2c>)
 8010cf8:	b513      	push	{r0, r1, r4, lr}
 8010cfa:	681c      	ldr	r4, [r3, #0]
 8010cfc:	b124      	cbz	r4, 8010d08 <iprintf+0x14>
 8010cfe:	69a3      	ldr	r3, [r4, #24]
 8010d00:	b913      	cbnz	r3, 8010d08 <iprintf+0x14>
 8010d02:	4620      	mov	r0, r4
 8010d04:	f001 f86c 	bl	8011de0 <__sinit>
 8010d08:	ab05      	add	r3, sp, #20
 8010d0a:	9a04      	ldr	r2, [sp, #16]
 8010d0c:	68a1      	ldr	r1, [r4, #8]
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	4620      	mov	r0, r4
 8010d12:	f001 fde7 	bl	80128e4 <_vfiprintf_r>
 8010d16:	b002      	add	sp, #8
 8010d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d1c:	b004      	add	sp, #16
 8010d1e:	4770      	bx	lr
 8010d20:	24000024 	.word	0x24000024

08010d24 <_puts_r>:
 8010d24:	b570      	push	{r4, r5, r6, lr}
 8010d26:	460e      	mov	r6, r1
 8010d28:	4605      	mov	r5, r0
 8010d2a:	b118      	cbz	r0, 8010d34 <_puts_r+0x10>
 8010d2c:	6983      	ldr	r3, [r0, #24]
 8010d2e:	b90b      	cbnz	r3, 8010d34 <_puts_r+0x10>
 8010d30:	f001 f856 	bl	8011de0 <__sinit>
 8010d34:	69ab      	ldr	r3, [r5, #24]
 8010d36:	68ac      	ldr	r4, [r5, #8]
 8010d38:	b913      	cbnz	r3, 8010d40 <_puts_r+0x1c>
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	f001 f850 	bl	8011de0 <__sinit>
 8010d40:	4b2c      	ldr	r3, [pc, #176]	; (8010df4 <_puts_r+0xd0>)
 8010d42:	429c      	cmp	r4, r3
 8010d44:	d120      	bne.n	8010d88 <_puts_r+0x64>
 8010d46:	686c      	ldr	r4, [r5, #4]
 8010d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d4a:	07db      	lsls	r3, r3, #31
 8010d4c:	d405      	bmi.n	8010d5a <_puts_r+0x36>
 8010d4e:	89a3      	ldrh	r3, [r4, #12]
 8010d50:	0598      	lsls	r0, r3, #22
 8010d52:	d402      	bmi.n	8010d5a <_puts_r+0x36>
 8010d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d56:	f001 f8e6 	bl	8011f26 <__retarget_lock_acquire_recursive>
 8010d5a:	89a3      	ldrh	r3, [r4, #12]
 8010d5c:	0719      	lsls	r1, r3, #28
 8010d5e:	d51d      	bpl.n	8010d9c <_puts_r+0x78>
 8010d60:	6923      	ldr	r3, [r4, #16]
 8010d62:	b1db      	cbz	r3, 8010d9c <_puts_r+0x78>
 8010d64:	3e01      	subs	r6, #1
 8010d66:	68a3      	ldr	r3, [r4, #8]
 8010d68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010d6c:	3b01      	subs	r3, #1
 8010d6e:	60a3      	str	r3, [r4, #8]
 8010d70:	bb39      	cbnz	r1, 8010dc2 <_puts_r+0x9e>
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	da38      	bge.n	8010de8 <_puts_r+0xc4>
 8010d76:	4622      	mov	r2, r4
 8010d78:	210a      	movs	r1, #10
 8010d7a:	4628      	mov	r0, r5
 8010d7c:	f000 f848 	bl	8010e10 <__swbuf_r>
 8010d80:	3001      	adds	r0, #1
 8010d82:	d011      	beq.n	8010da8 <_puts_r+0x84>
 8010d84:	250a      	movs	r5, #10
 8010d86:	e011      	b.n	8010dac <_puts_r+0x88>
 8010d88:	4b1b      	ldr	r3, [pc, #108]	; (8010df8 <_puts_r+0xd4>)
 8010d8a:	429c      	cmp	r4, r3
 8010d8c:	d101      	bne.n	8010d92 <_puts_r+0x6e>
 8010d8e:	68ac      	ldr	r4, [r5, #8]
 8010d90:	e7da      	b.n	8010d48 <_puts_r+0x24>
 8010d92:	4b1a      	ldr	r3, [pc, #104]	; (8010dfc <_puts_r+0xd8>)
 8010d94:	429c      	cmp	r4, r3
 8010d96:	bf08      	it	eq
 8010d98:	68ec      	ldreq	r4, [r5, #12]
 8010d9a:	e7d5      	b.n	8010d48 <_puts_r+0x24>
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	4628      	mov	r0, r5
 8010da0:	f000 f888 	bl	8010eb4 <__swsetup_r>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d0dd      	beq.n	8010d64 <_puts_r+0x40>
 8010da8:	f04f 35ff 	mov.w	r5, #4294967295
 8010dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010dae:	07da      	lsls	r2, r3, #31
 8010db0:	d405      	bmi.n	8010dbe <_puts_r+0x9a>
 8010db2:	89a3      	ldrh	r3, [r4, #12]
 8010db4:	059b      	lsls	r3, r3, #22
 8010db6:	d402      	bmi.n	8010dbe <_puts_r+0x9a>
 8010db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010dba:	f001 f8b5 	bl	8011f28 <__retarget_lock_release_recursive>
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	bd70      	pop	{r4, r5, r6, pc}
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	da04      	bge.n	8010dd0 <_puts_r+0xac>
 8010dc6:	69a2      	ldr	r2, [r4, #24]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	dc06      	bgt.n	8010dda <_puts_r+0xb6>
 8010dcc:	290a      	cmp	r1, #10
 8010dce:	d004      	beq.n	8010dda <_puts_r+0xb6>
 8010dd0:	6823      	ldr	r3, [r4, #0]
 8010dd2:	1c5a      	adds	r2, r3, #1
 8010dd4:	6022      	str	r2, [r4, #0]
 8010dd6:	7019      	strb	r1, [r3, #0]
 8010dd8:	e7c5      	b.n	8010d66 <_puts_r+0x42>
 8010dda:	4622      	mov	r2, r4
 8010ddc:	4628      	mov	r0, r5
 8010dde:	f000 f817 	bl	8010e10 <__swbuf_r>
 8010de2:	3001      	adds	r0, #1
 8010de4:	d1bf      	bne.n	8010d66 <_puts_r+0x42>
 8010de6:	e7df      	b.n	8010da8 <_puts_r+0x84>
 8010de8:	6823      	ldr	r3, [r4, #0]
 8010dea:	250a      	movs	r5, #10
 8010dec:	1c5a      	adds	r2, r3, #1
 8010dee:	6022      	str	r2, [r4, #0]
 8010df0:	701d      	strb	r5, [r3, #0]
 8010df2:	e7db      	b.n	8010dac <_puts_r+0x88>
 8010df4:	08013910 	.word	0x08013910
 8010df8:	08013930 	.word	0x08013930
 8010dfc:	080138f0 	.word	0x080138f0

08010e00 <puts>:
 8010e00:	4b02      	ldr	r3, [pc, #8]	; (8010e0c <puts+0xc>)
 8010e02:	4601      	mov	r1, r0
 8010e04:	6818      	ldr	r0, [r3, #0]
 8010e06:	f7ff bf8d 	b.w	8010d24 <_puts_r>
 8010e0a:	bf00      	nop
 8010e0c:	24000024 	.word	0x24000024

08010e10 <__swbuf_r>:
 8010e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e12:	460e      	mov	r6, r1
 8010e14:	4614      	mov	r4, r2
 8010e16:	4605      	mov	r5, r0
 8010e18:	b118      	cbz	r0, 8010e22 <__swbuf_r+0x12>
 8010e1a:	6983      	ldr	r3, [r0, #24]
 8010e1c:	b90b      	cbnz	r3, 8010e22 <__swbuf_r+0x12>
 8010e1e:	f000 ffdf 	bl	8011de0 <__sinit>
 8010e22:	4b21      	ldr	r3, [pc, #132]	; (8010ea8 <__swbuf_r+0x98>)
 8010e24:	429c      	cmp	r4, r3
 8010e26:	d12b      	bne.n	8010e80 <__swbuf_r+0x70>
 8010e28:	686c      	ldr	r4, [r5, #4]
 8010e2a:	69a3      	ldr	r3, [r4, #24]
 8010e2c:	60a3      	str	r3, [r4, #8]
 8010e2e:	89a3      	ldrh	r3, [r4, #12]
 8010e30:	071a      	lsls	r2, r3, #28
 8010e32:	d52f      	bpl.n	8010e94 <__swbuf_r+0x84>
 8010e34:	6923      	ldr	r3, [r4, #16]
 8010e36:	b36b      	cbz	r3, 8010e94 <__swbuf_r+0x84>
 8010e38:	6923      	ldr	r3, [r4, #16]
 8010e3a:	6820      	ldr	r0, [r4, #0]
 8010e3c:	1ac0      	subs	r0, r0, r3
 8010e3e:	6963      	ldr	r3, [r4, #20]
 8010e40:	b2f6      	uxtb	r6, r6
 8010e42:	4283      	cmp	r3, r0
 8010e44:	4637      	mov	r7, r6
 8010e46:	dc04      	bgt.n	8010e52 <__swbuf_r+0x42>
 8010e48:	4621      	mov	r1, r4
 8010e4a:	4628      	mov	r0, r5
 8010e4c:	f000 ff34 	bl	8011cb8 <_fflush_r>
 8010e50:	bb30      	cbnz	r0, 8010ea0 <__swbuf_r+0x90>
 8010e52:	68a3      	ldr	r3, [r4, #8]
 8010e54:	3b01      	subs	r3, #1
 8010e56:	60a3      	str	r3, [r4, #8]
 8010e58:	6823      	ldr	r3, [r4, #0]
 8010e5a:	1c5a      	adds	r2, r3, #1
 8010e5c:	6022      	str	r2, [r4, #0]
 8010e5e:	701e      	strb	r6, [r3, #0]
 8010e60:	6963      	ldr	r3, [r4, #20]
 8010e62:	3001      	adds	r0, #1
 8010e64:	4283      	cmp	r3, r0
 8010e66:	d004      	beq.n	8010e72 <__swbuf_r+0x62>
 8010e68:	89a3      	ldrh	r3, [r4, #12]
 8010e6a:	07db      	lsls	r3, r3, #31
 8010e6c:	d506      	bpl.n	8010e7c <__swbuf_r+0x6c>
 8010e6e:	2e0a      	cmp	r6, #10
 8010e70:	d104      	bne.n	8010e7c <__swbuf_r+0x6c>
 8010e72:	4621      	mov	r1, r4
 8010e74:	4628      	mov	r0, r5
 8010e76:	f000 ff1f 	bl	8011cb8 <_fflush_r>
 8010e7a:	b988      	cbnz	r0, 8010ea0 <__swbuf_r+0x90>
 8010e7c:	4638      	mov	r0, r7
 8010e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e80:	4b0a      	ldr	r3, [pc, #40]	; (8010eac <__swbuf_r+0x9c>)
 8010e82:	429c      	cmp	r4, r3
 8010e84:	d101      	bne.n	8010e8a <__swbuf_r+0x7a>
 8010e86:	68ac      	ldr	r4, [r5, #8]
 8010e88:	e7cf      	b.n	8010e2a <__swbuf_r+0x1a>
 8010e8a:	4b09      	ldr	r3, [pc, #36]	; (8010eb0 <__swbuf_r+0xa0>)
 8010e8c:	429c      	cmp	r4, r3
 8010e8e:	bf08      	it	eq
 8010e90:	68ec      	ldreq	r4, [r5, #12]
 8010e92:	e7ca      	b.n	8010e2a <__swbuf_r+0x1a>
 8010e94:	4621      	mov	r1, r4
 8010e96:	4628      	mov	r0, r5
 8010e98:	f000 f80c 	bl	8010eb4 <__swsetup_r>
 8010e9c:	2800      	cmp	r0, #0
 8010e9e:	d0cb      	beq.n	8010e38 <__swbuf_r+0x28>
 8010ea0:	f04f 37ff 	mov.w	r7, #4294967295
 8010ea4:	e7ea      	b.n	8010e7c <__swbuf_r+0x6c>
 8010ea6:	bf00      	nop
 8010ea8:	08013910 	.word	0x08013910
 8010eac:	08013930 	.word	0x08013930
 8010eb0:	080138f0 	.word	0x080138f0

08010eb4 <__swsetup_r>:
 8010eb4:	4b32      	ldr	r3, [pc, #200]	; (8010f80 <__swsetup_r+0xcc>)
 8010eb6:	b570      	push	{r4, r5, r6, lr}
 8010eb8:	681d      	ldr	r5, [r3, #0]
 8010eba:	4606      	mov	r6, r0
 8010ebc:	460c      	mov	r4, r1
 8010ebe:	b125      	cbz	r5, 8010eca <__swsetup_r+0x16>
 8010ec0:	69ab      	ldr	r3, [r5, #24]
 8010ec2:	b913      	cbnz	r3, 8010eca <__swsetup_r+0x16>
 8010ec4:	4628      	mov	r0, r5
 8010ec6:	f000 ff8b 	bl	8011de0 <__sinit>
 8010eca:	4b2e      	ldr	r3, [pc, #184]	; (8010f84 <__swsetup_r+0xd0>)
 8010ecc:	429c      	cmp	r4, r3
 8010ece:	d10f      	bne.n	8010ef0 <__swsetup_r+0x3c>
 8010ed0:	686c      	ldr	r4, [r5, #4]
 8010ed2:	89a3      	ldrh	r3, [r4, #12]
 8010ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ed8:	0719      	lsls	r1, r3, #28
 8010eda:	d42c      	bmi.n	8010f36 <__swsetup_r+0x82>
 8010edc:	06dd      	lsls	r5, r3, #27
 8010ede:	d411      	bmi.n	8010f04 <__swsetup_r+0x50>
 8010ee0:	2309      	movs	r3, #9
 8010ee2:	6033      	str	r3, [r6, #0]
 8010ee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010ee8:	81a3      	strh	r3, [r4, #12]
 8010eea:	f04f 30ff 	mov.w	r0, #4294967295
 8010eee:	e03e      	b.n	8010f6e <__swsetup_r+0xba>
 8010ef0:	4b25      	ldr	r3, [pc, #148]	; (8010f88 <__swsetup_r+0xd4>)
 8010ef2:	429c      	cmp	r4, r3
 8010ef4:	d101      	bne.n	8010efa <__swsetup_r+0x46>
 8010ef6:	68ac      	ldr	r4, [r5, #8]
 8010ef8:	e7eb      	b.n	8010ed2 <__swsetup_r+0x1e>
 8010efa:	4b24      	ldr	r3, [pc, #144]	; (8010f8c <__swsetup_r+0xd8>)
 8010efc:	429c      	cmp	r4, r3
 8010efe:	bf08      	it	eq
 8010f00:	68ec      	ldreq	r4, [r5, #12]
 8010f02:	e7e6      	b.n	8010ed2 <__swsetup_r+0x1e>
 8010f04:	0758      	lsls	r0, r3, #29
 8010f06:	d512      	bpl.n	8010f2e <__swsetup_r+0x7a>
 8010f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f0a:	b141      	cbz	r1, 8010f1e <__swsetup_r+0x6a>
 8010f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f10:	4299      	cmp	r1, r3
 8010f12:	d002      	beq.n	8010f1a <__swsetup_r+0x66>
 8010f14:	4630      	mov	r0, r6
 8010f16:	f001 fc11 	bl	801273c <_free_r>
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8010f1e:	89a3      	ldrh	r3, [r4, #12]
 8010f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f24:	81a3      	strh	r3, [r4, #12]
 8010f26:	2300      	movs	r3, #0
 8010f28:	6063      	str	r3, [r4, #4]
 8010f2a:	6923      	ldr	r3, [r4, #16]
 8010f2c:	6023      	str	r3, [r4, #0]
 8010f2e:	89a3      	ldrh	r3, [r4, #12]
 8010f30:	f043 0308 	orr.w	r3, r3, #8
 8010f34:	81a3      	strh	r3, [r4, #12]
 8010f36:	6923      	ldr	r3, [r4, #16]
 8010f38:	b94b      	cbnz	r3, 8010f4e <__swsetup_r+0x9a>
 8010f3a:	89a3      	ldrh	r3, [r4, #12]
 8010f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f44:	d003      	beq.n	8010f4e <__swsetup_r+0x9a>
 8010f46:	4621      	mov	r1, r4
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f001 f813 	bl	8011f74 <__smakebuf_r>
 8010f4e:	89a0      	ldrh	r0, [r4, #12]
 8010f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f54:	f010 0301 	ands.w	r3, r0, #1
 8010f58:	d00a      	beq.n	8010f70 <__swsetup_r+0xbc>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	60a3      	str	r3, [r4, #8]
 8010f5e:	6963      	ldr	r3, [r4, #20]
 8010f60:	425b      	negs	r3, r3
 8010f62:	61a3      	str	r3, [r4, #24]
 8010f64:	6923      	ldr	r3, [r4, #16]
 8010f66:	b943      	cbnz	r3, 8010f7a <__swsetup_r+0xc6>
 8010f68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f6c:	d1ba      	bne.n	8010ee4 <__swsetup_r+0x30>
 8010f6e:	bd70      	pop	{r4, r5, r6, pc}
 8010f70:	0781      	lsls	r1, r0, #30
 8010f72:	bf58      	it	pl
 8010f74:	6963      	ldrpl	r3, [r4, #20]
 8010f76:	60a3      	str	r3, [r4, #8]
 8010f78:	e7f4      	b.n	8010f64 <__swsetup_r+0xb0>
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	e7f7      	b.n	8010f6e <__swsetup_r+0xba>
 8010f7e:	bf00      	nop
 8010f80:	24000024 	.word	0x24000024
 8010f84:	08013910 	.word	0x08013910
 8010f88:	08013930 	.word	0x08013930
 8010f8c:	080138f0 	.word	0x080138f0

08010f90 <quorem>:
 8010f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f94:	6903      	ldr	r3, [r0, #16]
 8010f96:	690c      	ldr	r4, [r1, #16]
 8010f98:	42a3      	cmp	r3, r4
 8010f9a:	4607      	mov	r7, r0
 8010f9c:	f2c0 8081 	blt.w	80110a2 <quorem+0x112>
 8010fa0:	3c01      	subs	r4, #1
 8010fa2:	f101 0814 	add.w	r8, r1, #20
 8010fa6:	f100 0514 	add.w	r5, r0, #20
 8010faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010fae:	9301      	str	r3, [sp, #4]
 8010fb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010fb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010fb8:	3301      	adds	r3, #1
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010fc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010fc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8010fc8:	d331      	bcc.n	801102e <quorem+0x9e>
 8010fca:	f04f 0e00 	mov.w	lr, #0
 8010fce:	4640      	mov	r0, r8
 8010fd0:	46ac      	mov	ip, r5
 8010fd2:	46f2      	mov	sl, lr
 8010fd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8010fd8:	b293      	uxth	r3, r2
 8010fda:	fb06 e303 	mla	r3, r6, r3, lr
 8010fde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	ebaa 0303 	sub.w	r3, sl, r3
 8010fe8:	0c12      	lsrs	r2, r2, #16
 8010fea:	f8dc a000 	ldr.w	sl, [ip]
 8010fee:	fb06 e202 	mla	r2, r6, r2, lr
 8010ff2:	fa13 f38a 	uxtah	r3, r3, sl
 8010ff6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010ffa:	fa1f fa82 	uxth.w	sl, r2
 8010ffe:	f8dc 2000 	ldr.w	r2, [ip]
 8011002:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011006:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801100a:	b29b      	uxth	r3, r3
 801100c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011010:	4581      	cmp	r9, r0
 8011012:	f84c 3b04 	str.w	r3, [ip], #4
 8011016:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801101a:	d2db      	bcs.n	8010fd4 <quorem+0x44>
 801101c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011020:	b92b      	cbnz	r3, 801102e <quorem+0x9e>
 8011022:	9b01      	ldr	r3, [sp, #4]
 8011024:	3b04      	subs	r3, #4
 8011026:	429d      	cmp	r5, r3
 8011028:	461a      	mov	r2, r3
 801102a:	d32e      	bcc.n	801108a <quorem+0xfa>
 801102c:	613c      	str	r4, [r7, #16]
 801102e:	4638      	mov	r0, r7
 8011030:	f001 fa74 	bl	801251c <__mcmp>
 8011034:	2800      	cmp	r0, #0
 8011036:	db24      	blt.n	8011082 <quorem+0xf2>
 8011038:	3601      	adds	r6, #1
 801103a:	4628      	mov	r0, r5
 801103c:	f04f 0c00 	mov.w	ip, #0
 8011040:	f858 2b04 	ldr.w	r2, [r8], #4
 8011044:	f8d0 e000 	ldr.w	lr, [r0]
 8011048:	b293      	uxth	r3, r2
 801104a:	ebac 0303 	sub.w	r3, ip, r3
 801104e:	0c12      	lsrs	r2, r2, #16
 8011050:	fa13 f38e 	uxtah	r3, r3, lr
 8011054:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011058:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801105c:	b29b      	uxth	r3, r3
 801105e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011062:	45c1      	cmp	r9, r8
 8011064:	f840 3b04 	str.w	r3, [r0], #4
 8011068:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801106c:	d2e8      	bcs.n	8011040 <quorem+0xb0>
 801106e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011072:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011076:	b922      	cbnz	r2, 8011082 <quorem+0xf2>
 8011078:	3b04      	subs	r3, #4
 801107a:	429d      	cmp	r5, r3
 801107c:	461a      	mov	r2, r3
 801107e:	d30a      	bcc.n	8011096 <quorem+0x106>
 8011080:	613c      	str	r4, [r7, #16]
 8011082:	4630      	mov	r0, r6
 8011084:	b003      	add	sp, #12
 8011086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801108a:	6812      	ldr	r2, [r2, #0]
 801108c:	3b04      	subs	r3, #4
 801108e:	2a00      	cmp	r2, #0
 8011090:	d1cc      	bne.n	801102c <quorem+0x9c>
 8011092:	3c01      	subs	r4, #1
 8011094:	e7c7      	b.n	8011026 <quorem+0x96>
 8011096:	6812      	ldr	r2, [r2, #0]
 8011098:	3b04      	subs	r3, #4
 801109a:	2a00      	cmp	r2, #0
 801109c:	d1f0      	bne.n	8011080 <quorem+0xf0>
 801109e:	3c01      	subs	r4, #1
 80110a0:	e7eb      	b.n	801107a <quorem+0xea>
 80110a2:	2000      	movs	r0, #0
 80110a4:	e7ee      	b.n	8011084 <quorem+0xf4>
	...

080110a8 <_dtoa_r>:
 80110a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ac:	ec59 8b10 	vmov	r8, r9, d0
 80110b0:	b095      	sub	sp, #84	; 0x54
 80110b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80110b4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80110b6:	9107      	str	r1, [sp, #28]
 80110b8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80110bc:	4606      	mov	r6, r0
 80110be:	9209      	str	r2, [sp, #36]	; 0x24
 80110c0:	9310      	str	r3, [sp, #64]	; 0x40
 80110c2:	b975      	cbnz	r5, 80110e2 <_dtoa_r+0x3a>
 80110c4:	2010      	movs	r0, #16
 80110c6:	f000 ff95 	bl	8011ff4 <malloc>
 80110ca:	4602      	mov	r2, r0
 80110cc:	6270      	str	r0, [r6, #36]	; 0x24
 80110ce:	b920      	cbnz	r0, 80110da <_dtoa_r+0x32>
 80110d0:	4bab      	ldr	r3, [pc, #684]	; (8011380 <_dtoa_r+0x2d8>)
 80110d2:	21ea      	movs	r1, #234	; 0xea
 80110d4:	48ab      	ldr	r0, [pc, #684]	; (8011384 <_dtoa_r+0x2dc>)
 80110d6:	f001 fd9b 	bl	8012c10 <__assert_func>
 80110da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80110de:	6005      	str	r5, [r0, #0]
 80110e0:	60c5      	str	r5, [r0, #12]
 80110e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80110e4:	6819      	ldr	r1, [r3, #0]
 80110e6:	b151      	cbz	r1, 80110fe <_dtoa_r+0x56>
 80110e8:	685a      	ldr	r2, [r3, #4]
 80110ea:	604a      	str	r2, [r1, #4]
 80110ec:	2301      	movs	r3, #1
 80110ee:	4093      	lsls	r3, r2
 80110f0:	608b      	str	r3, [r1, #8]
 80110f2:	4630      	mov	r0, r6
 80110f4:	f000 ffd4 	bl	80120a0 <_Bfree>
 80110f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80110fa:	2200      	movs	r2, #0
 80110fc:	601a      	str	r2, [r3, #0]
 80110fe:	f1b9 0300 	subs.w	r3, r9, #0
 8011102:	bfbb      	ittet	lt
 8011104:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011108:	9303      	strlt	r3, [sp, #12]
 801110a:	2300      	movge	r3, #0
 801110c:	2201      	movlt	r2, #1
 801110e:	bfac      	ite	ge
 8011110:	6023      	strge	r3, [r4, #0]
 8011112:	6022      	strlt	r2, [r4, #0]
 8011114:	4b9c      	ldr	r3, [pc, #624]	; (8011388 <_dtoa_r+0x2e0>)
 8011116:	9c03      	ldr	r4, [sp, #12]
 8011118:	43a3      	bics	r3, r4
 801111a:	d11a      	bne.n	8011152 <_dtoa_r+0xaa>
 801111c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801111e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011122:	6013      	str	r3, [r2, #0]
 8011124:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011128:	ea53 0308 	orrs.w	r3, r3, r8
 801112c:	f000 8512 	beq.w	8011b54 <_dtoa_r+0xaac>
 8011130:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011132:	b953      	cbnz	r3, 801114a <_dtoa_r+0xa2>
 8011134:	4b95      	ldr	r3, [pc, #596]	; (801138c <_dtoa_r+0x2e4>)
 8011136:	e01f      	b.n	8011178 <_dtoa_r+0xd0>
 8011138:	4b95      	ldr	r3, [pc, #596]	; (8011390 <_dtoa_r+0x2e8>)
 801113a:	9300      	str	r3, [sp, #0]
 801113c:	3308      	adds	r3, #8
 801113e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011140:	6013      	str	r3, [r2, #0]
 8011142:	9800      	ldr	r0, [sp, #0]
 8011144:	b015      	add	sp, #84	; 0x54
 8011146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801114a:	4b90      	ldr	r3, [pc, #576]	; (801138c <_dtoa_r+0x2e4>)
 801114c:	9300      	str	r3, [sp, #0]
 801114e:	3303      	adds	r3, #3
 8011150:	e7f5      	b.n	801113e <_dtoa_r+0x96>
 8011152:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011156:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801115e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011162:	d10b      	bne.n	801117c <_dtoa_r+0xd4>
 8011164:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011166:	2301      	movs	r3, #1
 8011168:	6013      	str	r3, [r2, #0]
 801116a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801116c:	2b00      	cmp	r3, #0
 801116e:	f000 84ee 	beq.w	8011b4e <_dtoa_r+0xaa6>
 8011172:	4888      	ldr	r0, [pc, #544]	; (8011394 <_dtoa_r+0x2ec>)
 8011174:	6018      	str	r0, [r3, #0]
 8011176:	1e43      	subs	r3, r0, #1
 8011178:	9300      	str	r3, [sp, #0]
 801117a:	e7e2      	b.n	8011142 <_dtoa_r+0x9a>
 801117c:	a913      	add	r1, sp, #76	; 0x4c
 801117e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011182:	aa12      	add	r2, sp, #72	; 0x48
 8011184:	4630      	mov	r0, r6
 8011186:	f001 fa6d 	bl	8012664 <__d2b>
 801118a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801118e:	4605      	mov	r5, r0
 8011190:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011192:	2900      	cmp	r1, #0
 8011194:	d047      	beq.n	8011226 <_dtoa_r+0x17e>
 8011196:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011198:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801119c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80111a0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80111a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80111a8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80111ac:	2400      	movs	r4, #0
 80111ae:	ec43 2b16 	vmov	d6, r2, r3
 80111b2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80111b6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8011368 <_dtoa_r+0x2c0>
 80111ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80111be:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8011370 <_dtoa_r+0x2c8>
 80111c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80111c6:	eeb0 7b46 	vmov.f64	d7, d6
 80111ca:	ee06 1a90 	vmov	s13, r1
 80111ce:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80111d2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011378 <_dtoa_r+0x2d0>
 80111d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80111da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80111de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80111e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e6:	ee16 ba90 	vmov	fp, s13
 80111ea:	9411      	str	r4, [sp, #68]	; 0x44
 80111ec:	d508      	bpl.n	8011200 <_dtoa_r+0x158>
 80111ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80111f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80111f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111fa:	bf18      	it	ne
 80111fc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8011200:	f1bb 0f16 	cmp.w	fp, #22
 8011204:	d832      	bhi.n	801126c <_dtoa_r+0x1c4>
 8011206:	4b64      	ldr	r3, [pc, #400]	; (8011398 <_dtoa_r+0x2f0>)
 8011208:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801120c:	ed93 7b00 	vldr	d7, [r3]
 8011210:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8011214:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121c:	d501      	bpl.n	8011222 <_dtoa_r+0x17a>
 801121e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011222:	2300      	movs	r3, #0
 8011224:	e023      	b.n	801126e <_dtoa_r+0x1c6>
 8011226:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011228:	4401      	add	r1, r0
 801122a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801122e:	2b20      	cmp	r3, #32
 8011230:	bfc3      	ittte	gt
 8011232:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011236:	fa04 f303 	lslgt.w	r3, r4, r3
 801123a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801123e:	f1c3 0320 	rsble	r3, r3, #32
 8011242:	bfc6      	itte	gt
 8011244:	fa28 f804 	lsrgt.w	r8, r8, r4
 8011248:	ea43 0308 	orrgt.w	r3, r3, r8
 801124c:	fa08 f303 	lslle.w	r3, r8, r3
 8011250:	ee07 3a90 	vmov	s15, r3
 8011254:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011258:	3901      	subs	r1, #1
 801125a:	ed8d 7b00 	vstr	d7, [sp]
 801125e:	9c01      	ldr	r4, [sp, #4]
 8011260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011264:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8011268:	2401      	movs	r4, #1
 801126a:	e7a0      	b.n	80111ae <_dtoa_r+0x106>
 801126c:	2301      	movs	r3, #1
 801126e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011270:	1a43      	subs	r3, r0, r1
 8011272:	1e5a      	subs	r2, r3, #1
 8011274:	bf45      	ittet	mi
 8011276:	f1c3 0301 	rsbmi	r3, r3, #1
 801127a:	9305      	strmi	r3, [sp, #20]
 801127c:	2300      	movpl	r3, #0
 801127e:	2300      	movmi	r3, #0
 8011280:	9206      	str	r2, [sp, #24]
 8011282:	bf54      	ite	pl
 8011284:	9305      	strpl	r3, [sp, #20]
 8011286:	9306      	strmi	r3, [sp, #24]
 8011288:	f1bb 0f00 	cmp.w	fp, #0
 801128c:	db18      	blt.n	80112c0 <_dtoa_r+0x218>
 801128e:	9b06      	ldr	r3, [sp, #24]
 8011290:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8011294:	445b      	add	r3, fp
 8011296:	9306      	str	r3, [sp, #24]
 8011298:	2300      	movs	r3, #0
 801129a:	9a07      	ldr	r2, [sp, #28]
 801129c:	2a09      	cmp	r2, #9
 801129e:	d849      	bhi.n	8011334 <_dtoa_r+0x28c>
 80112a0:	2a05      	cmp	r2, #5
 80112a2:	bfc4      	itt	gt
 80112a4:	3a04      	subgt	r2, #4
 80112a6:	9207      	strgt	r2, [sp, #28]
 80112a8:	9a07      	ldr	r2, [sp, #28]
 80112aa:	f1a2 0202 	sub.w	r2, r2, #2
 80112ae:	bfcc      	ite	gt
 80112b0:	2400      	movgt	r4, #0
 80112b2:	2401      	movle	r4, #1
 80112b4:	2a03      	cmp	r2, #3
 80112b6:	d848      	bhi.n	801134a <_dtoa_r+0x2a2>
 80112b8:	e8df f002 	tbb	[pc, r2]
 80112bc:	3a2c2e0b 	.word	0x3a2c2e0b
 80112c0:	9b05      	ldr	r3, [sp, #20]
 80112c2:	2200      	movs	r2, #0
 80112c4:	eba3 030b 	sub.w	r3, r3, fp
 80112c8:	9305      	str	r3, [sp, #20]
 80112ca:	920e      	str	r2, [sp, #56]	; 0x38
 80112cc:	f1cb 0300 	rsb	r3, fp, #0
 80112d0:	e7e3      	b.n	801129a <_dtoa_r+0x1f2>
 80112d2:	2200      	movs	r2, #0
 80112d4:	9208      	str	r2, [sp, #32]
 80112d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112d8:	2a00      	cmp	r2, #0
 80112da:	dc39      	bgt.n	8011350 <_dtoa_r+0x2a8>
 80112dc:	f04f 0a01 	mov.w	sl, #1
 80112e0:	46d1      	mov	r9, sl
 80112e2:	4652      	mov	r2, sl
 80112e4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80112e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80112ea:	2100      	movs	r1, #0
 80112ec:	6079      	str	r1, [r7, #4]
 80112ee:	2004      	movs	r0, #4
 80112f0:	f100 0c14 	add.w	ip, r0, #20
 80112f4:	4594      	cmp	ip, r2
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	d92f      	bls.n	801135a <_dtoa_r+0x2b2>
 80112fa:	4630      	mov	r0, r6
 80112fc:	930c      	str	r3, [sp, #48]	; 0x30
 80112fe:	f000 fe8f 	bl	8012020 <_Balloc>
 8011302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011304:	9000      	str	r0, [sp, #0]
 8011306:	4602      	mov	r2, r0
 8011308:	2800      	cmp	r0, #0
 801130a:	d149      	bne.n	80113a0 <_dtoa_r+0x2f8>
 801130c:	4b23      	ldr	r3, [pc, #140]	; (801139c <_dtoa_r+0x2f4>)
 801130e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011312:	e6df      	b.n	80110d4 <_dtoa_r+0x2c>
 8011314:	2201      	movs	r2, #1
 8011316:	e7dd      	b.n	80112d4 <_dtoa_r+0x22c>
 8011318:	2200      	movs	r2, #0
 801131a:	9208      	str	r2, [sp, #32]
 801131c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801131e:	eb0b 0a02 	add.w	sl, fp, r2
 8011322:	f10a 0901 	add.w	r9, sl, #1
 8011326:	464a      	mov	r2, r9
 8011328:	2a01      	cmp	r2, #1
 801132a:	bfb8      	it	lt
 801132c:	2201      	movlt	r2, #1
 801132e:	e7db      	b.n	80112e8 <_dtoa_r+0x240>
 8011330:	2201      	movs	r2, #1
 8011332:	e7f2      	b.n	801131a <_dtoa_r+0x272>
 8011334:	2401      	movs	r4, #1
 8011336:	2200      	movs	r2, #0
 8011338:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801133c:	f04f 3aff 	mov.w	sl, #4294967295
 8011340:	2100      	movs	r1, #0
 8011342:	46d1      	mov	r9, sl
 8011344:	2212      	movs	r2, #18
 8011346:	9109      	str	r1, [sp, #36]	; 0x24
 8011348:	e7ce      	b.n	80112e8 <_dtoa_r+0x240>
 801134a:	2201      	movs	r2, #1
 801134c:	9208      	str	r2, [sp, #32]
 801134e:	e7f5      	b.n	801133c <_dtoa_r+0x294>
 8011350:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8011354:	46d1      	mov	r9, sl
 8011356:	4652      	mov	r2, sl
 8011358:	e7c6      	b.n	80112e8 <_dtoa_r+0x240>
 801135a:	3101      	adds	r1, #1
 801135c:	6079      	str	r1, [r7, #4]
 801135e:	0040      	lsls	r0, r0, #1
 8011360:	e7c6      	b.n	80112f0 <_dtoa_r+0x248>
 8011362:	bf00      	nop
 8011364:	f3af 8000 	nop.w
 8011368:	636f4361 	.word	0x636f4361
 801136c:	3fd287a7 	.word	0x3fd287a7
 8011370:	8b60c8b3 	.word	0x8b60c8b3
 8011374:	3fc68a28 	.word	0x3fc68a28
 8011378:	509f79fb 	.word	0x509f79fb
 801137c:	3fd34413 	.word	0x3fd34413
 8011380:	08013869 	.word	0x08013869
 8011384:	08013880 	.word	0x08013880
 8011388:	7ff00000 	.word	0x7ff00000
 801138c:	08013865 	.word	0x08013865
 8011390:	0801385c 	.word	0x0801385c
 8011394:	08013839 	.word	0x08013839
 8011398:	080139d8 	.word	0x080139d8
 801139c:	080138df 	.word	0x080138df
 80113a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80113a2:	9900      	ldr	r1, [sp, #0]
 80113a4:	6011      	str	r1, [r2, #0]
 80113a6:	f1b9 0f0e 	cmp.w	r9, #14
 80113aa:	d872      	bhi.n	8011492 <_dtoa_r+0x3ea>
 80113ac:	2c00      	cmp	r4, #0
 80113ae:	d070      	beq.n	8011492 <_dtoa_r+0x3ea>
 80113b0:	f1bb 0f00 	cmp.w	fp, #0
 80113b4:	f340 80a6 	ble.w	8011504 <_dtoa_r+0x45c>
 80113b8:	49ca      	ldr	r1, [pc, #808]	; (80116e4 <_dtoa_r+0x63c>)
 80113ba:	f00b 020f 	and.w	r2, fp, #15
 80113be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80113c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80113c6:	ed92 7b00 	vldr	d7, [r2]
 80113ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 80113ce:	f000 808d 	beq.w	80114ec <_dtoa_r+0x444>
 80113d2:	4ac5      	ldr	r2, [pc, #788]	; (80116e8 <_dtoa_r+0x640>)
 80113d4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80113d8:	ed92 6b08 	vldr	d6, [r2, #32]
 80113dc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80113e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80113e4:	f001 010f 	and.w	r1, r1, #15
 80113e8:	2203      	movs	r2, #3
 80113ea:	48bf      	ldr	r0, [pc, #764]	; (80116e8 <_dtoa_r+0x640>)
 80113ec:	2900      	cmp	r1, #0
 80113ee:	d17f      	bne.n	80114f0 <_dtoa_r+0x448>
 80113f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80113f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80113f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80113fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80113fe:	2900      	cmp	r1, #0
 8011400:	f000 80b2 	beq.w	8011568 <_dtoa_r+0x4c0>
 8011404:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011408:	ed9d 7b02 	vldr	d7, [sp, #8]
 801140c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011414:	f140 80a8 	bpl.w	8011568 <_dtoa_r+0x4c0>
 8011418:	f1b9 0f00 	cmp.w	r9, #0
 801141c:	f000 80a4 	beq.w	8011568 <_dtoa_r+0x4c0>
 8011420:	f1ba 0f00 	cmp.w	sl, #0
 8011424:	dd31      	ble.n	801148a <_dtoa_r+0x3e2>
 8011426:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801142a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801142e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011432:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011436:	3201      	adds	r2, #1
 8011438:	4650      	mov	r0, sl
 801143a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801143e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011442:	ee07 2a90 	vmov	s15, r2
 8011446:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801144a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801144e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011452:	9c03      	ldr	r4, [sp, #12]
 8011454:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011458:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801145c:	2800      	cmp	r0, #0
 801145e:	f040 8086 	bne.w	801156e <_dtoa_r+0x4c6>
 8011462:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011466:	ee36 6b47 	vsub.f64	d6, d6, d7
 801146a:	ec42 1b17 	vmov	d7, r1, r2
 801146e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011476:	f300 8272 	bgt.w	801195e <_dtoa_r+0x8b6>
 801147a:	eeb1 7b47 	vneg.f64	d7, d7
 801147e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011486:	f100 8267 	bmi.w	8011958 <_dtoa_r+0x8b0>
 801148a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801148e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8011492:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011494:	2a00      	cmp	r2, #0
 8011496:	f2c0 8129 	blt.w	80116ec <_dtoa_r+0x644>
 801149a:	f1bb 0f0e 	cmp.w	fp, #14
 801149e:	f300 8125 	bgt.w	80116ec <_dtoa_r+0x644>
 80114a2:	4b90      	ldr	r3, [pc, #576]	; (80116e4 <_dtoa_r+0x63c>)
 80114a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80114a8:	ed93 6b00 	vldr	d6, [r3]
 80114ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	f280 80c3 	bge.w	801163a <_dtoa_r+0x592>
 80114b4:	f1b9 0f00 	cmp.w	r9, #0
 80114b8:	f300 80bf 	bgt.w	801163a <_dtoa_r+0x592>
 80114bc:	f040 824c 	bne.w	8011958 <_dtoa_r+0x8b0>
 80114c0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80114c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80114c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80114cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80114d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114d4:	464c      	mov	r4, r9
 80114d6:	464f      	mov	r7, r9
 80114d8:	f280 8222 	bge.w	8011920 <_dtoa_r+0x878>
 80114dc:	f8dd 8000 	ldr.w	r8, [sp]
 80114e0:	2331      	movs	r3, #49	; 0x31
 80114e2:	f808 3b01 	strb.w	r3, [r8], #1
 80114e6:	f10b 0b01 	add.w	fp, fp, #1
 80114ea:	e21e      	b.n	801192a <_dtoa_r+0x882>
 80114ec:	2202      	movs	r2, #2
 80114ee:	e77c      	b.n	80113ea <_dtoa_r+0x342>
 80114f0:	07cc      	lsls	r4, r1, #31
 80114f2:	d504      	bpl.n	80114fe <_dtoa_r+0x456>
 80114f4:	ed90 6b00 	vldr	d6, [r0]
 80114f8:	3201      	adds	r2, #1
 80114fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80114fe:	1049      	asrs	r1, r1, #1
 8011500:	3008      	adds	r0, #8
 8011502:	e773      	b.n	80113ec <_dtoa_r+0x344>
 8011504:	d02e      	beq.n	8011564 <_dtoa_r+0x4bc>
 8011506:	f1cb 0100 	rsb	r1, fp, #0
 801150a:	4a76      	ldr	r2, [pc, #472]	; (80116e4 <_dtoa_r+0x63c>)
 801150c:	f001 000f 	and.w	r0, r1, #15
 8011510:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011514:	ed92 7b00 	vldr	d7, [r2]
 8011518:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801151c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011520:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011524:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8011528:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801152c:	486e      	ldr	r0, [pc, #440]	; (80116e8 <_dtoa_r+0x640>)
 801152e:	1109      	asrs	r1, r1, #4
 8011530:	2400      	movs	r4, #0
 8011532:	2202      	movs	r2, #2
 8011534:	b939      	cbnz	r1, 8011546 <_dtoa_r+0x49e>
 8011536:	2c00      	cmp	r4, #0
 8011538:	f43f af60 	beq.w	80113fc <_dtoa_r+0x354>
 801153c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011544:	e75a      	b.n	80113fc <_dtoa_r+0x354>
 8011546:	07cf      	lsls	r7, r1, #31
 8011548:	d509      	bpl.n	801155e <_dtoa_r+0x4b6>
 801154a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801154e:	ed90 7b00 	vldr	d7, [r0]
 8011552:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011556:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801155a:	3201      	adds	r2, #1
 801155c:	2401      	movs	r4, #1
 801155e:	1049      	asrs	r1, r1, #1
 8011560:	3008      	adds	r0, #8
 8011562:	e7e7      	b.n	8011534 <_dtoa_r+0x48c>
 8011564:	2202      	movs	r2, #2
 8011566:	e749      	b.n	80113fc <_dtoa_r+0x354>
 8011568:	465f      	mov	r7, fp
 801156a:	4648      	mov	r0, r9
 801156c:	e765      	b.n	801143a <_dtoa_r+0x392>
 801156e:	ec42 1b17 	vmov	d7, r1, r2
 8011572:	4a5c      	ldr	r2, [pc, #368]	; (80116e4 <_dtoa_r+0x63c>)
 8011574:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011578:	ed12 4b02 	vldr	d4, [r2, #-8]
 801157c:	9a00      	ldr	r2, [sp, #0]
 801157e:	1814      	adds	r4, r2, r0
 8011580:	9a08      	ldr	r2, [sp, #32]
 8011582:	b352      	cbz	r2, 80115da <_dtoa_r+0x532>
 8011584:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8011588:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801158c:	f8dd 8000 	ldr.w	r8, [sp]
 8011590:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011594:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011598:	ee35 7b47 	vsub.f64	d7, d5, d7
 801159c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80115a0:	ee14 2a90 	vmov	r2, s9
 80115a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80115a8:	3230      	adds	r2, #48	; 0x30
 80115aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80115ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80115b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b6:	f808 2b01 	strb.w	r2, [r8], #1
 80115ba:	d439      	bmi.n	8011630 <_dtoa_r+0x588>
 80115bc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80115c0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80115c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c8:	d472      	bmi.n	80116b0 <_dtoa_r+0x608>
 80115ca:	45a0      	cmp	r8, r4
 80115cc:	f43f af5d 	beq.w	801148a <_dtoa_r+0x3e2>
 80115d0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80115d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80115d8:	e7e0      	b.n	801159c <_dtoa_r+0x4f4>
 80115da:	f8dd 8000 	ldr.w	r8, [sp]
 80115de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80115e2:	4621      	mov	r1, r4
 80115e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80115e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80115ec:	ee14 2a90 	vmov	r2, s9
 80115f0:	3230      	adds	r2, #48	; 0x30
 80115f2:	f808 2b01 	strb.w	r2, [r8], #1
 80115f6:	45a0      	cmp	r8, r4
 80115f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80115fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011600:	d118      	bne.n	8011634 <_dtoa_r+0x58c>
 8011602:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011606:	ee37 4b05 	vadd.f64	d4, d7, d5
 801160a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011612:	dc4d      	bgt.n	80116b0 <_dtoa_r+0x608>
 8011614:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011618:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011620:	f57f af33 	bpl.w	801148a <_dtoa_r+0x3e2>
 8011624:	4688      	mov	r8, r1
 8011626:	3901      	subs	r1, #1
 8011628:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801162c:	2b30      	cmp	r3, #48	; 0x30
 801162e:	d0f9      	beq.n	8011624 <_dtoa_r+0x57c>
 8011630:	46bb      	mov	fp, r7
 8011632:	e02a      	b.n	801168a <_dtoa_r+0x5e2>
 8011634:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011638:	e7d6      	b.n	80115e8 <_dtoa_r+0x540>
 801163a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801163e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011642:	f8dd 8000 	ldr.w	r8, [sp]
 8011646:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801164a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801164e:	ee15 3a10 	vmov	r3, s10
 8011652:	3330      	adds	r3, #48	; 0x30
 8011654:	f808 3b01 	strb.w	r3, [r8], #1
 8011658:	9b00      	ldr	r3, [sp, #0]
 801165a:	eba8 0303 	sub.w	r3, r8, r3
 801165e:	4599      	cmp	r9, r3
 8011660:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011664:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011668:	d133      	bne.n	80116d2 <_dtoa_r+0x62a>
 801166a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801166e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011676:	dc1a      	bgt.n	80116ae <_dtoa_r+0x606>
 8011678:	eeb4 7b46 	vcmp.f64	d7, d6
 801167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011680:	d103      	bne.n	801168a <_dtoa_r+0x5e2>
 8011682:	ee15 3a10 	vmov	r3, s10
 8011686:	07d9      	lsls	r1, r3, #31
 8011688:	d411      	bmi.n	80116ae <_dtoa_r+0x606>
 801168a:	4629      	mov	r1, r5
 801168c:	4630      	mov	r0, r6
 801168e:	f000 fd07 	bl	80120a0 <_Bfree>
 8011692:	2300      	movs	r3, #0
 8011694:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011696:	f888 3000 	strb.w	r3, [r8]
 801169a:	f10b 0301 	add.w	r3, fp, #1
 801169e:	6013      	str	r3, [r2, #0]
 80116a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f43f ad4d 	beq.w	8011142 <_dtoa_r+0x9a>
 80116a8:	f8c3 8000 	str.w	r8, [r3]
 80116ac:	e549      	b.n	8011142 <_dtoa_r+0x9a>
 80116ae:	465f      	mov	r7, fp
 80116b0:	4643      	mov	r3, r8
 80116b2:	4698      	mov	r8, r3
 80116b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116b8:	2a39      	cmp	r2, #57	; 0x39
 80116ba:	d106      	bne.n	80116ca <_dtoa_r+0x622>
 80116bc:	9a00      	ldr	r2, [sp, #0]
 80116be:	429a      	cmp	r2, r3
 80116c0:	d1f7      	bne.n	80116b2 <_dtoa_r+0x60a>
 80116c2:	9900      	ldr	r1, [sp, #0]
 80116c4:	2230      	movs	r2, #48	; 0x30
 80116c6:	3701      	adds	r7, #1
 80116c8:	700a      	strb	r2, [r1, #0]
 80116ca:	781a      	ldrb	r2, [r3, #0]
 80116cc:	3201      	adds	r2, #1
 80116ce:	701a      	strb	r2, [r3, #0]
 80116d0:	e7ae      	b.n	8011630 <_dtoa_r+0x588>
 80116d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80116d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116de:	d1b2      	bne.n	8011646 <_dtoa_r+0x59e>
 80116e0:	e7d3      	b.n	801168a <_dtoa_r+0x5e2>
 80116e2:	bf00      	nop
 80116e4:	080139d8 	.word	0x080139d8
 80116e8:	080139b0 	.word	0x080139b0
 80116ec:	9908      	ldr	r1, [sp, #32]
 80116ee:	2900      	cmp	r1, #0
 80116f0:	f000 80d1 	beq.w	8011896 <_dtoa_r+0x7ee>
 80116f4:	9907      	ldr	r1, [sp, #28]
 80116f6:	2901      	cmp	r1, #1
 80116f8:	f300 80b4 	bgt.w	8011864 <_dtoa_r+0x7bc>
 80116fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80116fe:	2900      	cmp	r1, #0
 8011700:	f000 80ac 	beq.w	801185c <_dtoa_r+0x7b4>
 8011704:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011708:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801170c:	461c      	mov	r4, r3
 801170e:	930a      	str	r3, [sp, #40]	; 0x28
 8011710:	9b05      	ldr	r3, [sp, #20]
 8011712:	4413      	add	r3, r2
 8011714:	9305      	str	r3, [sp, #20]
 8011716:	9b06      	ldr	r3, [sp, #24]
 8011718:	2101      	movs	r1, #1
 801171a:	4413      	add	r3, r2
 801171c:	4630      	mov	r0, r6
 801171e:	9306      	str	r3, [sp, #24]
 8011720:	f000 fd7a 	bl	8012218 <__i2b>
 8011724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011726:	4607      	mov	r7, r0
 8011728:	f1b8 0f00 	cmp.w	r8, #0
 801172c:	dd0d      	ble.n	801174a <_dtoa_r+0x6a2>
 801172e:	9a06      	ldr	r2, [sp, #24]
 8011730:	2a00      	cmp	r2, #0
 8011732:	dd0a      	ble.n	801174a <_dtoa_r+0x6a2>
 8011734:	4542      	cmp	r2, r8
 8011736:	9905      	ldr	r1, [sp, #20]
 8011738:	bfa8      	it	ge
 801173a:	4642      	movge	r2, r8
 801173c:	1a89      	subs	r1, r1, r2
 801173e:	9105      	str	r1, [sp, #20]
 8011740:	9906      	ldr	r1, [sp, #24]
 8011742:	eba8 0802 	sub.w	r8, r8, r2
 8011746:	1a8a      	subs	r2, r1, r2
 8011748:	9206      	str	r2, [sp, #24]
 801174a:	b303      	cbz	r3, 801178e <_dtoa_r+0x6e6>
 801174c:	9a08      	ldr	r2, [sp, #32]
 801174e:	2a00      	cmp	r2, #0
 8011750:	f000 80a6 	beq.w	80118a0 <_dtoa_r+0x7f8>
 8011754:	2c00      	cmp	r4, #0
 8011756:	dd13      	ble.n	8011780 <_dtoa_r+0x6d8>
 8011758:	4639      	mov	r1, r7
 801175a:	4622      	mov	r2, r4
 801175c:	4630      	mov	r0, r6
 801175e:	930c      	str	r3, [sp, #48]	; 0x30
 8011760:	f000 fe16 	bl	8012390 <__pow5mult>
 8011764:	462a      	mov	r2, r5
 8011766:	4601      	mov	r1, r0
 8011768:	4607      	mov	r7, r0
 801176a:	4630      	mov	r0, r6
 801176c:	f000 fd6a 	bl	8012244 <__multiply>
 8011770:	4629      	mov	r1, r5
 8011772:	900a      	str	r0, [sp, #40]	; 0x28
 8011774:	4630      	mov	r0, r6
 8011776:	f000 fc93 	bl	80120a0 <_Bfree>
 801177a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801177c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801177e:	4615      	mov	r5, r2
 8011780:	1b1a      	subs	r2, r3, r4
 8011782:	d004      	beq.n	801178e <_dtoa_r+0x6e6>
 8011784:	4629      	mov	r1, r5
 8011786:	4630      	mov	r0, r6
 8011788:	f000 fe02 	bl	8012390 <__pow5mult>
 801178c:	4605      	mov	r5, r0
 801178e:	2101      	movs	r1, #1
 8011790:	4630      	mov	r0, r6
 8011792:	f000 fd41 	bl	8012218 <__i2b>
 8011796:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011798:	2b00      	cmp	r3, #0
 801179a:	4604      	mov	r4, r0
 801179c:	f340 8082 	ble.w	80118a4 <_dtoa_r+0x7fc>
 80117a0:	461a      	mov	r2, r3
 80117a2:	4601      	mov	r1, r0
 80117a4:	4630      	mov	r0, r6
 80117a6:	f000 fdf3 	bl	8012390 <__pow5mult>
 80117aa:	9b07      	ldr	r3, [sp, #28]
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	4604      	mov	r4, r0
 80117b0:	dd7b      	ble.n	80118aa <_dtoa_r+0x802>
 80117b2:	2300      	movs	r3, #0
 80117b4:	930a      	str	r3, [sp, #40]	; 0x28
 80117b6:	6922      	ldr	r2, [r4, #16]
 80117b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80117bc:	6910      	ldr	r0, [r2, #16]
 80117be:	f000 fcdb 	bl	8012178 <__hi0bits>
 80117c2:	f1c0 0020 	rsb	r0, r0, #32
 80117c6:	9b06      	ldr	r3, [sp, #24]
 80117c8:	4418      	add	r0, r3
 80117ca:	f010 001f 	ands.w	r0, r0, #31
 80117ce:	f000 808d 	beq.w	80118ec <_dtoa_r+0x844>
 80117d2:	f1c0 0220 	rsb	r2, r0, #32
 80117d6:	2a04      	cmp	r2, #4
 80117d8:	f340 8086 	ble.w	80118e8 <_dtoa_r+0x840>
 80117dc:	f1c0 001c 	rsb	r0, r0, #28
 80117e0:	9b05      	ldr	r3, [sp, #20]
 80117e2:	4403      	add	r3, r0
 80117e4:	9305      	str	r3, [sp, #20]
 80117e6:	9b06      	ldr	r3, [sp, #24]
 80117e8:	4403      	add	r3, r0
 80117ea:	4480      	add	r8, r0
 80117ec:	9306      	str	r3, [sp, #24]
 80117ee:	9b05      	ldr	r3, [sp, #20]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	dd05      	ble.n	8011800 <_dtoa_r+0x758>
 80117f4:	4629      	mov	r1, r5
 80117f6:	461a      	mov	r2, r3
 80117f8:	4630      	mov	r0, r6
 80117fa:	f000 fe23 	bl	8012444 <__lshift>
 80117fe:	4605      	mov	r5, r0
 8011800:	9b06      	ldr	r3, [sp, #24]
 8011802:	2b00      	cmp	r3, #0
 8011804:	dd05      	ble.n	8011812 <_dtoa_r+0x76a>
 8011806:	4621      	mov	r1, r4
 8011808:	461a      	mov	r2, r3
 801180a:	4630      	mov	r0, r6
 801180c:	f000 fe1a 	bl	8012444 <__lshift>
 8011810:	4604      	mov	r4, r0
 8011812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011814:	2b00      	cmp	r3, #0
 8011816:	d06b      	beq.n	80118f0 <_dtoa_r+0x848>
 8011818:	4621      	mov	r1, r4
 801181a:	4628      	mov	r0, r5
 801181c:	f000 fe7e 	bl	801251c <__mcmp>
 8011820:	2800      	cmp	r0, #0
 8011822:	da65      	bge.n	80118f0 <_dtoa_r+0x848>
 8011824:	2300      	movs	r3, #0
 8011826:	4629      	mov	r1, r5
 8011828:	220a      	movs	r2, #10
 801182a:	4630      	mov	r0, r6
 801182c:	f000 fc5a 	bl	80120e4 <__multadd>
 8011830:	9b08      	ldr	r3, [sp, #32]
 8011832:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011836:	4605      	mov	r5, r0
 8011838:	2b00      	cmp	r3, #0
 801183a:	f000 8192 	beq.w	8011b62 <_dtoa_r+0xaba>
 801183e:	4639      	mov	r1, r7
 8011840:	2300      	movs	r3, #0
 8011842:	220a      	movs	r2, #10
 8011844:	4630      	mov	r0, r6
 8011846:	f000 fc4d 	bl	80120e4 <__multadd>
 801184a:	f1ba 0f00 	cmp.w	sl, #0
 801184e:	4607      	mov	r7, r0
 8011850:	f300 808e 	bgt.w	8011970 <_dtoa_r+0x8c8>
 8011854:	9b07      	ldr	r3, [sp, #28]
 8011856:	2b02      	cmp	r3, #2
 8011858:	dc51      	bgt.n	80118fe <_dtoa_r+0x856>
 801185a:	e089      	b.n	8011970 <_dtoa_r+0x8c8>
 801185c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801185e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011862:	e751      	b.n	8011708 <_dtoa_r+0x660>
 8011864:	f109 34ff 	add.w	r4, r9, #4294967295
 8011868:	42a3      	cmp	r3, r4
 801186a:	bfbf      	itttt	lt
 801186c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801186e:	1ae3      	sublt	r3, r4, r3
 8011870:	18d2      	addlt	r2, r2, r3
 8011872:	4613      	movlt	r3, r2
 8011874:	bfb7      	itett	lt
 8011876:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011878:	1b1c      	subge	r4, r3, r4
 801187a:	4623      	movlt	r3, r4
 801187c:	2400      	movlt	r4, #0
 801187e:	f1b9 0f00 	cmp.w	r9, #0
 8011882:	bfb5      	itete	lt
 8011884:	9a05      	ldrlt	r2, [sp, #20]
 8011886:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801188a:	eba2 0809 	sublt.w	r8, r2, r9
 801188e:	464a      	movge	r2, r9
 8011890:	bfb8      	it	lt
 8011892:	2200      	movlt	r2, #0
 8011894:	e73b      	b.n	801170e <_dtoa_r+0x666>
 8011896:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801189a:	9f08      	ldr	r7, [sp, #32]
 801189c:	461c      	mov	r4, r3
 801189e:	e743      	b.n	8011728 <_dtoa_r+0x680>
 80118a0:	461a      	mov	r2, r3
 80118a2:	e76f      	b.n	8011784 <_dtoa_r+0x6dc>
 80118a4:	9b07      	ldr	r3, [sp, #28]
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	dc18      	bgt.n	80118dc <_dtoa_r+0x834>
 80118aa:	9b02      	ldr	r3, [sp, #8]
 80118ac:	b9b3      	cbnz	r3, 80118dc <_dtoa_r+0x834>
 80118ae:	9b03      	ldr	r3, [sp, #12]
 80118b0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80118b4:	b9a2      	cbnz	r2, 80118e0 <_dtoa_r+0x838>
 80118b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80118ba:	0d12      	lsrs	r2, r2, #20
 80118bc:	0512      	lsls	r2, r2, #20
 80118be:	b18a      	cbz	r2, 80118e4 <_dtoa_r+0x83c>
 80118c0:	9b05      	ldr	r3, [sp, #20]
 80118c2:	3301      	adds	r3, #1
 80118c4:	9305      	str	r3, [sp, #20]
 80118c6:	9b06      	ldr	r3, [sp, #24]
 80118c8:	3301      	adds	r3, #1
 80118ca:	9306      	str	r3, [sp, #24]
 80118cc:	2301      	movs	r3, #1
 80118ce:	930a      	str	r3, [sp, #40]	; 0x28
 80118d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	f47f af6f 	bne.w	80117b6 <_dtoa_r+0x70e>
 80118d8:	2001      	movs	r0, #1
 80118da:	e774      	b.n	80117c6 <_dtoa_r+0x71e>
 80118dc:	2300      	movs	r3, #0
 80118de:	e7f6      	b.n	80118ce <_dtoa_r+0x826>
 80118e0:	9b02      	ldr	r3, [sp, #8]
 80118e2:	e7f4      	b.n	80118ce <_dtoa_r+0x826>
 80118e4:	920a      	str	r2, [sp, #40]	; 0x28
 80118e6:	e7f3      	b.n	80118d0 <_dtoa_r+0x828>
 80118e8:	d081      	beq.n	80117ee <_dtoa_r+0x746>
 80118ea:	4610      	mov	r0, r2
 80118ec:	301c      	adds	r0, #28
 80118ee:	e777      	b.n	80117e0 <_dtoa_r+0x738>
 80118f0:	f1b9 0f00 	cmp.w	r9, #0
 80118f4:	dc37      	bgt.n	8011966 <_dtoa_r+0x8be>
 80118f6:	9b07      	ldr	r3, [sp, #28]
 80118f8:	2b02      	cmp	r3, #2
 80118fa:	dd34      	ble.n	8011966 <_dtoa_r+0x8be>
 80118fc:	46ca      	mov	sl, r9
 80118fe:	f1ba 0f00 	cmp.w	sl, #0
 8011902:	d10d      	bne.n	8011920 <_dtoa_r+0x878>
 8011904:	4621      	mov	r1, r4
 8011906:	4653      	mov	r3, sl
 8011908:	2205      	movs	r2, #5
 801190a:	4630      	mov	r0, r6
 801190c:	f000 fbea 	bl	80120e4 <__multadd>
 8011910:	4601      	mov	r1, r0
 8011912:	4604      	mov	r4, r0
 8011914:	4628      	mov	r0, r5
 8011916:	f000 fe01 	bl	801251c <__mcmp>
 801191a:	2800      	cmp	r0, #0
 801191c:	f73f adde 	bgt.w	80114dc <_dtoa_r+0x434>
 8011920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011922:	f8dd 8000 	ldr.w	r8, [sp]
 8011926:	ea6f 0b03 	mvn.w	fp, r3
 801192a:	f04f 0900 	mov.w	r9, #0
 801192e:	4621      	mov	r1, r4
 8011930:	4630      	mov	r0, r6
 8011932:	f000 fbb5 	bl	80120a0 <_Bfree>
 8011936:	2f00      	cmp	r7, #0
 8011938:	f43f aea7 	beq.w	801168a <_dtoa_r+0x5e2>
 801193c:	f1b9 0f00 	cmp.w	r9, #0
 8011940:	d005      	beq.n	801194e <_dtoa_r+0x8a6>
 8011942:	45b9      	cmp	r9, r7
 8011944:	d003      	beq.n	801194e <_dtoa_r+0x8a6>
 8011946:	4649      	mov	r1, r9
 8011948:	4630      	mov	r0, r6
 801194a:	f000 fba9 	bl	80120a0 <_Bfree>
 801194e:	4639      	mov	r1, r7
 8011950:	4630      	mov	r0, r6
 8011952:	f000 fba5 	bl	80120a0 <_Bfree>
 8011956:	e698      	b.n	801168a <_dtoa_r+0x5e2>
 8011958:	2400      	movs	r4, #0
 801195a:	4627      	mov	r7, r4
 801195c:	e7e0      	b.n	8011920 <_dtoa_r+0x878>
 801195e:	46bb      	mov	fp, r7
 8011960:	4604      	mov	r4, r0
 8011962:	4607      	mov	r7, r0
 8011964:	e5ba      	b.n	80114dc <_dtoa_r+0x434>
 8011966:	9b08      	ldr	r3, [sp, #32]
 8011968:	46ca      	mov	sl, r9
 801196a:	2b00      	cmp	r3, #0
 801196c:	f000 8100 	beq.w	8011b70 <_dtoa_r+0xac8>
 8011970:	f1b8 0f00 	cmp.w	r8, #0
 8011974:	dd05      	ble.n	8011982 <_dtoa_r+0x8da>
 8011976:	4639      	mov	r1, r7
 8011978:	4642      	mov	r2, r8
 801197a:	4630      	mov	r0, r6
 801197c:	f000 fd62 	bl	8012444 <__lshift>
 8011980:	4607      	mov	r7, r0
 8011982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011984:	2b00      	cmp	r3, #0
 8011986:	d05d      	beq.n	8011a44 <_dtoa_r+0x99c>
 8011988:	6879      	ldr	r1, [r7, #4]
 801198a:	4630      	mov	r0, r6
 801198c:	f000 fb48 	bl	8012020 <_Balloc>
 8011990:	4680      	mov	r8, r0
 8011992:	b928      	cbnz	r0, 80119a0 <_dtoa_r+0x8f8>
 8011994:	4b82      	ldr	r3, [pc, #520]	; (8011ba0 <_dtoa_r+0xaf8>)
 8011996:	4602      	mov	r2, r0
 8011998:	f240 21ea 	movw	r1, #746	; 0x2ea
 801199c:	f7ff bb9a 	b.w	80110d4 <_dtoa_r+0x2c>
 80119a0:	693a      	ldr	r2, [r7, #16]
 80119a2:	3202      	adds	r2, #2
 80119a4:	0092      	lsls	r2, r2, #2
 80119a6:	f107 010c 	add.w	r1, r7, #12
 80119aa:	300c      	adds	r0, #12
 80119ac:	f000 fb2a 	bl	8012004 <memcpy>
 80119b0:	2201      	movs	r2, #1
 80119b2:	4641      	mov	r1, r8
 80119b4:	4630      	mov	r0, r6
 80119b6:	f000 fd45 	bl	8012444 <__lshift>
 80119ba:	9b00      	ldr	r3, [sp, #0]
 80119bc:	3301      	adds	r3, #1
 80119be:	9305      	str	r3, [sp, #20]
 80119c0:	9b00      	ldr	r3, [sp, #0]
 80119c2:	4453      	add	r3, sl
 80119c4:	9309      	str	r3, [sp, #36]	; 0x24
 80119c6:	9b02      	ldr	r3, [sp, #8]
 80119c8:	f003 0301 	and.w	r3, r3, #1
 80119cc:	46b9      	mov	r9, r7
 80119ce:	9308      	str	r3, [sp, #32]
 80119d0:	4607      	mov	r7, r0
 80119d2:	9b05      	ldr	r3, [sp, #20]
 80119d4:	4621      	mov	r1, r4
 80119d6:	3b01      	subs	r3, #1
 80119d8:	4628      	mov	r0, r5
 80119da:	9302      	str	r3, [sp, #8]
 80119dc:	f7ff fad8 	bl	8010f90 <quorem>
 80119e0:	4603      	mov	r3, r0
 80119e2:	3330      	adds	r3, #48	; 0x30
 80119e4:	9006      	str	r0, [sp, #24]
 80119e6:	4649      	mov	r1, r9
 80119e8:	4628      	mov	r0, r5
 80119ea:	930a      	str	r3, [sp, #40]	; 0x28
 80119ec:	f000 fd96 	bl	801251c <__mcmp>
 80119f0:	463a      	mov	r2, r7
 80119f2:	4682      	mov	sl, r0
 80119f4:	4621      	mov	r1, r4
 80119f6:	4630      	mov	r0, r6
 80119f8:	f000 fdac 	bl	8012554 <__mdiff>
 80119fc:	68c2      	ldr	r2, [r0, #12]
 80119fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a00:	4680      	mov	r8, r0
 8011a02:	bb0a      	cbnz	r2, 8011a48 <_dtoa_r+0x9a0>
 8011a04:	4601      	mov	r1, r0
 8011a06:	4628      	mov	r0, r5
 8011a08:	f000 fd88 	bl	801251c <__mcmp>
 8011a0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a0e:	4602      	mov	r2, r0
 8011a10:	4641      	mov	r1, r8
 8011a12:	4630      	mov	r0, r6
 8011a14:	920e      	str	r2, [sp, #56]	; 0x38
 8011a16:	930a      	str	r3, [sp, #40]	; 0x28
 8011a18:	f000 fb42 	bl	80120a0 <_Bfree>
 8011a1c:	9b07      	ldr	r3, [sp, #28]
 8011a1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a20:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011a24:	ea43 0102 	orr.w	r1, r3, r2
 8011a28:	9b08      	ldr	r3, [sp, #32]
 8011a2a:	430b      	orrs	r3, r1
 8011a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a2e:	d10d      	bne.n	8011a4c <_dtoa_r+0x9a4>
 8011a30:	2b39      	cmp	r3, #57	; 0x39
 8011a32:	d029      	beq.n	8011a88 <_dtoa_r+0x9e0>
 8011a34:	f1ba 0f00 	cmp.w	sl, #0
 8011a38:	dd01      	ble.n	8011a3e <_dtoa_r+0x996>
 8011a3a:	9b06      	ldr	r3, [sp, #24]
 8011a3c:	3331      	adds	r3, #49	; 0x31
 8011a3e:	9a02      	ldr	r2, [sp, #8]
 8011a40:	7013      	strb	r3, [r2, #0]
 8011a42:	e774      	b.n	801192e <_dtoa_r+0x886>
 8011a44:	4638      	mov	r0, r7
 8011a46:	e7b8      	b.n	80119ba <_dtoa_r+0x912>
 8011a48:	2201      	movs	r2, #1
 8011a4a:	e7e1      	b.n	8011a10 <_dtoa_r+0x968>
 8011a4c:	f1ba 0f00 	cmp.w	sl, #0
 8011a50:	db06      	blt.n	8011a60 <_dtoa_r+0x9b8>
 8011a52:	9907      	ldr	r1, [sp, #28]
 8011a54:	ea41 0a0a 	orr.w	sl, r1, sl
 8011a58:	9908      	ldr	r1, [sp, #32]
 8011a5a:	ea5a 0101 	orrs.w	r1, sl, r1
 8011a5e:	d120      	bne.n	8011aa2 <_dtoa_r+0x9fa>
 8011a60:	2a00      	cmp	r2, #0
 8011a62:	ddec      	ble.n	8011a3e <_dtoa_r+0x996>
 8011a64:	4629      	mov	r1, r5
 8011a66:	2201      	movs	r2, #1
 8011a68:	4630      	mov	r0, r6
 8011a6a:	9305      	str	r3, [sp, #20]
 8011a6c:	f000 fcea 	bl	8012444 <__lshift>
 8011a70:	4621      	mov	r1, r4
 8011a72:	4605      	mov	r5, r0
 8011a74:	f000 fd52 	bl	801251c <__mcmp>
 8011a78:	2800      	cmp	r0, #0
 8011a7a:	9b05      	ldr	r3, [sp, #20]
 8011a7c:	dc02      	bgt.n	8011a84 <_dtoa_r+0x9dc>
 8011a7e:	d1de      	bne.n	8011a3e <_dtoa_r+0x996>
 8011a80:	07da      	lsls	r2, r3, #31
 8011a82:	d5dc      	bpl.n	8011a3e <_dtoa_r+0x996>
 8011a84:	2b39      	cmp	r3, #57	; 0x39
 8011a86:	d1d8      	bne.n	8011a3a <_dtoa_r+0x992>
 8011a88:	9a02      	ldr	r2, [sp, #8]
 8011a8a:	2339      	movs	r3, #57	; 0x39
 8011a8c:	7013      	strb	r3, [r2, #0]
 8011a8e:	4643      	mov	r3, r8
 8011a90:	4698      	mov	r8, r3
 8011a92:	3b01      	subs	r3, #1
 8011a94:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011a98:	2a39      	cmp	r2, #57	; 0x39
 8011a9a:	d051      	beq.n	8011b40 <_dtoa_r+0xa98>
 8011a9c:	3201      	adds	r2, #1
 8011a9e:	701a      	strb	r2, [r3, #0]
 8011aa0:	e745      	b.n	801192e <_dtoa_r+0x886>
 8011aa2:	2a00      	cmp	r2, #0
 8011aa4:	dd03      	ble.n	8011aae <_dtoa_r+0xa06>
 8011aa6:	2b39      	cmp	r3, #57	; 0x39
 8011aa8:	d0ee      	beq.n	8011a88 <_dtoa_r+0x9e0>
 8011aaa:	3301      	adds	r3, #1
 8011aac:	e7c7      	b.n	8011a3e <_dtoa_r+0x996>
 8011aae:	9a05      	ldr	r2, [sp, #20]
 8011ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ab2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011ab6:	428a      	cmp	r2, r1
 8011ab8:	d02b      	beq.n	8011b12 <_dtoa_r+0xa6a>
 8011aba:	4629      	mov	r1, r5
 8011abc:	2300      	movs	r3, #0
 8011abe:	220a      	movs	r2, #10
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	f000 fb0f 	bl	80120e4 <__multadd>
 8011ac6:	45b9      	cmp	r9, r7
 8011ac8:	4605      	mov	r5, r0
 8011aca:	f04f 0300 	mov.w	r3, #0
 8011ace:	f04f 020a 	mov.w	r2, #10
 8011ad2:	4649      	mov	r1, r9
 8011ad4:	4630      	mov	r0, r6
 8011ad6:	d107      	bne.n	8011ae8 <_dtoa_r+0xa40>
 8011ad8:	f000 fb04 	bl	80120e4 <__multadd>
 8011adc:	4681      	mov	r9, r0
 8011ade:	4607      	mov	r7, r0
 8011ae0:	9b05      	ldr	r3, [sp, #20]
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	9305      	str	r3, [sp, #20]
 8011ae6:	e774      	b.n	80119d2 <_dtoa_r+0x92a>
 8011ae8:	f000 fafc 	bl	80120e4 <__multadd>
 8011aec:	4639      	mov	r1, r7
 8011aee:	4681      	mov	r9, r0
 8011af0:	2300      	movs	r3, #0
 8011af2:	220a      	movs	r2, #10
 8011af4:	4630      	mov	r0, r6
 8011af6:	f000 faf5 	bl	80120e4 <__multadd>
 8011afa:	4607      	mov	r7, r0
 8011afc:	e7f0      	b.n	8011ae0 <_dtoa_r+0xa38>
 8011afe:	f1ba 0f00 	cmp.w	sl, #0
 8011b02:	9a00      	ldr	r2, [sp, #0]
 8011b04:	bfcc      	ite	gt
 8011b06:	46d0      	movgt	r8, sl
 8011b08:	f04f 0801 	movle.w	r8, #1
 8011b0c:	4490      	add	r8, r2
 8011b0e:	f04f 0900 	mov.w	r9, #0
 8011b12:	4629      	mov	r1, r5
 8011b14:	2201      	movs	r2, #1
 8011b16:	4630      	mov	r0, r6
 8011b18:	9302      	str	r3, [sp, #8]
 8011b1a:	f000 fc93 	bl	8012444 <__lshift>
 8011b1e:	4621      	mov	r1, r4
 8011b20:	4605      	mov	r5, r0
 8011b22:	f000 fcfb 	bl	801251c <__mcmp>
 8011b26:	2800      	cmp	r0, #0
 8011b28:	dcb1      	bgt.n	8011a8e <_dtoa_r+0x9e6>
 8011b2a:	d102      	bne.n	8011b32 <_dtoa_r+0xa8a>
 8011b2c:	9b02      	ldr	r3, [sp, #8]
 8011b2e:	07db      	lsls	r3, r3, #31
 8011b30:	d4ad      	bmi.n	8011a8e <_dtoa_r+0x9e6>
 8011b32:	4643      	mov	r3, r8
 8011b34:	4698      	mov	r8, r3
 8011b36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b3a:	2a30      	cmp	r2, #48	; 0x30
 8011b3c:	d0fa      	beq.n	8011b34 <_dtoa_r+0xa8c>
 8011b3e:	e6f6      	b.n	801192e <_dtoa_r+0x886>
 8011b40:	9a00      	ldr	r2, [sp, #0]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d1a4      	bne.n	8011a90 <_dtoa_r+0x9e8>
 8011b46:	f10b 0b01 	add.w	fp, fp, #1
 8011b4a:	2331      	movs	r3, #49	; 0x31
 8011b4c:	e778      	b.n	8011a40 <_dtoa_r+0x998>
 8011b4e:	4b15      	ldr	r3, [pc, #84]	; (8011ba4 <_dtoa_r+0xafc>)
 8011b50:	f7ff bb12 	b.w	8011178 <_dtoa_r+0xd0>
 8011b54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f47f aaee 	bne.w	8011138 <_dtoa_r+0x90>
 8011b5c:	4b12      	ldr	r3, [pc, #72]	; (8011ba8 <_dtoa_r+0xb00>)
 8011b5e:	f7ff bb0b 	b.w	8011178 <_dtoa_r+0xd0>
 8011b62:	f1ba 0f00 	cmp.w	sl, #0
 8011b66:	dc03      	bgt.n	8011b70 <_dtoa_r+0xac8>
 8011b68:	9b07      	ldr	r3, [sp, #28]
 8011b6a:	2b02      	cmp	r3, #2
 8011b6c:	f73f aec7 	bgt.w	80118fe <_dtoa_r+0x856>
 8011b70:	f8dd 8000 	ldr.w	r8, [sp]
 8011b74:	4621      	mov	r1, r4
 8011b76:	4628      	mov	r0, r5
 8011b78:	f7ff fa0a 	bl	8010f90 <quorem>
 8011b7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011b80:	f808 3b01 	strb.w	r3, [r8], #1
 8011b84:	9a00      	ldr	r2, [sp, #0]
 8011b86:	eba8 0202 	sub.w	r2, r8, r2
 8011b8a:	4592      	cmp	sl, r2
 8011b8c:	ddb7      	ble.n	8011afe <_dtoa_r+0xa56>
 8011b8e:	4629      	mov	r1, r5
 8011b90:	2300      	movs	r3, #0
 8011b92:	220a      	movs	r2, #10
 8011b94:	4630      	mov	r0, r6
 8011b96:	f000 faa5 	bl	80120e4 <__multadd>
 8011b9a:	4605      	mov	r5, r0
 8011b9c:	e7ea      	b.n	8011b74 <_dtoa_r+0xacc>
 8011b9e:	bf00      	nop
 8011ba0:	080138df 	.word	0x080138df
 8011ba4:	08013838 	.word	0x08013838
 8011ba8:	0801385c 	.word	0x0801385c

08011bac <__sflush_r>:
 8011bac:	898a      	ldrh	r2, [r1, #12]
 8011bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb2:	4605      	mov	r5, r0
 8011bb4:	0710      	lsls	r0, r2, #28
 8011bb6:	460c      	mov	r4, r1
 8011bb8:	d458      	bmi.n	8011c6c <__sflush_r+0xc0>
 8011bba:	684b      	ldr	r3, [r1, #4]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	dc05      	bgt.n	8011bcc <__sflush_r+0x20>
 8011bc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	dc02      	bgt.n	8011bcc <__sflush_r+0x20>
 8011bc6:	2000      	movs	r0, #0
 8011bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bce:	2e00      	cmp	r6, #0
 8011bd0:	d0f9      	beq.n	8011bc6 <__sflush_r+0x1a>
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bd8:	682f      	ldr	r7, [r5, #0]
 8011bda:	602b      	str	r3, [r5, #0]
 8011bdc:	d032      	beq.n	8011c44 <__sflush_r+0x98>
 8011bde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011be0:	89a3      	ldrh	r3, [r4, #12]
 8011be2:	075a      	lsls	r2, r3, #29
 8011be4:	d505      	bpl.n	8011bf2 <__sflush_r+0x46>
 8011be6:	6863      	ldr	r3, [r4, #4]
 8011be8:	1ac0      	subs	r0, r0, r3
 8011bea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bec:	b10b      	cbz	r3, 8011bf2 <__sflush_r+0x46>
 8011bee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bf0:	1ac0      	subs	r0, r0, r3
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bf8:	6a21      	ldr	r1, [r4, #32]
 8011bfa:	4628      	mov	r0, r5
 8011bfc:	47b0      	blx	r6
 8011bfe:	1c43      	adds	r3, r0, #1
 8011c00:	89a3      	ldrh	r3, [r4, #12]
 8011c02:	d106      	bne.n	8011c12 <__sflush_r+0x66>
 8011c04:	6829      	ldr	r1, [r5, #0]
 8011c06:	291d      	cmp	r1, #29
 8011c08:	d82c      	bhi.n	8011c64 <__sflush_r+0xb8>
 8011c0a:	4a2a      	ldr	r2, [pc, #168]	; (8011cb4 <__sflush_r+0x108>)
 8011c0c:	40ca      	lsrs	r2, r1
 8011c0e:	07d6      	lsls	r6, r2, #31
 8011c10:	d528      	bpl.n	8011c64 <__sflush_r+0xb8>
 8011c12:	2200      	movs	r2, #0
 8011c14:	6062      	str	r2, [r4, #4]
 8011c16:	04d9      	lsls	r1, r3, #19
 8011c18:	6922      	ldr	r2, [r4, #16]
 8011c1a:	6022      	str	r2, [r4, #0]
 8011c1c:	d504      	bpl.n	8011c28 <__sflush_r+0x7c>
 8011c1e:	1c42      	adds	r2, r0, #1
 8011c20:	d101      	bne.n	8011c26 <__sflush_r+0x7a>
 8011c22:	682b      	ldr	r3, [r5, #0]
 8011c24:	b903      	cbnz	r3, 8011c28 <__sflush_r+0x7c>
 8011c26:	6560      	str	r0, [r4, #84]	; 0x54
 8011c28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c2a:	602f      	str	r7, [r5, #0]
 8011c2c:	2900      	cmp	r1, #0
 8011c2e:	d0ca      	beq.n	8011bc6 <__sflush_r+0x1a>
 8011c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c34:	4299      	cmp	r1, r3
 8011c36:	d002      	beq.n	8011c3e <__sflush_r+0x92>
 8011c38:	4628      	mov	r0, r5
 8011c3a:	f000 fd7f 	bl	801273c <_free_r>
 8011c3e:	2000      	movs	r0, #0
 8011c40:	6360      	str	r0, [r4, #52]	; 0x34
 8011c42:	e7c1      	b.n	8011bc8 <__sflush_r+0x1c>
 8011c44:	6a21      	ldr	r1, [r4, #32]
 8011c46:	2301      	movs	r3, #1
 8011c48:	4628      	mov	r0, r5
 8011c4a:	47b0      	blx	r6
 8011c4c:	1c41      	adds	r1, r0, #1
 8011c4e:	d1c7      	bne.n	8011be0 <__sflush_r+0x34>
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d0c4      	beq.n	8011be0 <__sflush_r+0x34>
 8011c56:	2b1d      	cmp	r3, #29
 8011c58:	d001      	beq.n	8011c5e <__sflush_r+0xb2>
 8011c5a:	2b16      	cmp	r3, #22
 8011c5c:	d101      	bne.n	8011c62 <__sflush_r+0xb6>
 8011c5e:	602f      	str	r7, [r5, #0]
 8011c60:	e7b1      	b.n	8011bc6 <__sflush_r+0x1a>
 8011c62:	89a3      	ldrh	r3, [r4, #12]
 8011c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c68:	81a3      	strh	r3, [r4, #12]
 8011c6a:	e7ad      	b.n	8011bc8 <__sflush_r+0x1c>
 8011c6c:	690f      	ldr	r7, [r1, #16]
 8011c6e:	2f00      	cmp	r7, #0
 8011c70:	d0a9      	beq.n	8011bc6 <__sflush_r+0x1a>
 8011c72:	0793      	lsls	r3, r2, #30
 8011c74:	680e      	ldr	r6, [r1, #0]
 8011c76:	bf08      	it	eq
 8011c78:	694b      	ldreq	r3, [r1, #20]
 8011c7a:	600f      	str	r7, [r1, #0]
 8011c7c:	bf18      	it	ne
 8011c7e:	2300      	movne	r3, #0
 8011c80:	eba6 0807 	sub.w	r8, r6, r7
 8011c84:	608b      	str	r3, [r1, #8]
 8011c86:	f1b8 0f00 	cmp.w	r8, #0
 8011c8a:	dd9c      	ble.n	8011bc6 <__sflush_r+0x1a>
 8011c8c:	6a21      	ldr	r1, [r4, #32]
 8011c8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c90:	4643      	mov	r3, r8
 8011c92:	463a      	mov	r2, r7
 8011c94:	4628      	mov	r0, r5
 8011c96:	47b0      	blx	r6
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	dc06      	bgt.n	8011caa <__sflush_r+0xfe>
 8011c9c:	89a3      	ldrh	r3, [r4, #12]
 8011c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ca2:	81a3      	strh	r3, [r4, #12]
 8011ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ca8:	e78e      	b.n	8011bc8 <__sflush_r+0x1c>
 8011caa:	4407      	add	r7, r0
 8011cac:	eba8 0800 	sub.w	r8, r8, r0
 8011cb0:	e7e9      	b.n	8011c86 <__sflush_r+0xda>
 8011cb2:	bf00      	nop
 8011cb4:	20400001 	.word	0x20400001

08011cb8 <_fflush_r>:
 8011cb8:	b538      	push	{r3, r4, r5, lr}
 8011cba:	690b      	ldr	r3, [r1, #16]
 8011cbc:	4605      	mov	r5, r0
 8011cbe:	460c      	mov	r4, r1
 8011cc0:	b913      	cbnz	r3, 8011cc8 <_fflush_r+0x10>
 8011cc2:	2500      	movs	r5, #0
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	bd38      	pop	{r3, r4, r5, pc}
 8011cc8:	b118      	cbz	r0, 8011cd2 <_fflush_r+0x1a>
 8011cca:	6983      	ldr	r3, [r0, #24]
 8011ccc:	b90b      	cbnz	r3, 8011cd2 <_fflush_r+0x1a>
 8011cce:	f000 f887 	bl	8011de0 <__sinit>
 8011cd2:	4b14      	ldr	r3, [pc, #80]	; (8011d24 <_fflush_r+0x6c>)
 8011cd4:	429c      	cmp	r4, r3
 8011cd6:	d11b      	bne.n	8011d10 <_fflush_r+0x58>
 8011cd8:	686c      	ldr	r4, [r5, #4]
 8011cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d0ef      	beq.n	8011cc2 <_fflush_r+0xa>
 8011ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011ce4:	07d0      	lsls	r0, r2, #31
 8011ce6:	d404      	bmi.n	8011cf2 <_fflush_r+0x3a>
 8011ce8:	0599      	lsls	r1, r3, #22
 8011cea:	d402      	bmi.n	8011cf2 <_fflush_r+0x3a>
 8011cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cee:	f000 f91a 	bl	8011f26 <__retarget_lock_acquire_recursive>
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	4621      	mov	r1, r4
 8011cf6:	f7ff ff59 	bl	8011bac <__sflush_r>
 8011cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cfc:	07da      	lsls	r2, r3, #31
 8011cfe:	4605      	mov	r5, r0
 8011d00:	d4e0      	bmi.n	8011cc4 <_fflush_r+0xc>
 8011d02:	89a3      	ldrh	r3, [r4, #12]
 8011d04:	059b      	lsls	r3, r3, #22
 8011d06:	d4dd      	bmi.n	8011cc4 <_fflush_r+0xc>
 8011d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d0a:	f000 f90d 	bl	8011f28 <__retarget_lock_release_recursive>
 8011d0e:	e7d9      	b.n	8011cc4 <_fflush_r+0xc>
 8011d10:	4b05      	ldr	r3, [pc, #20]	; (8011d28 <_fflush_r+0x70>)
 8011d12:	429c      	cmp	r4, r3
 8011d14:	d101      	bne.n	8011d1a <_fflush_r+0x62>
 8011d16:	68ac      	ldr	r4, [r5, #8]
 8011d18:	e7df      	b.n	8011cda <_fflush_r+0x22>
 8011d1a:	4b04      	ldr	r3, [pc, #16]	; (8011d2c <_fflush_r+0x74>)
 8011d1c:	429c      	cmp	r4, r3
 8011d1e:	bf08      	it	eq
 8011d20:	68ec      	ldreq	r4, [r5, #12]
 8011d22:	e7da      	b.n	8011cda <_fflush_r+0x22>
 8011d24:	08013910 	.word	0x08013910
 8011d28:	08013930 	.word	0x08013930
 8011d2c:	080138f0 	.word	0x080138f0

08011d30 <std>:
 8011d30:	2300      	movs	r3, #0
 8011d32:	b510      	push	{r4, lr}
 8011d34:	4604      	mov	r4, r0
 8011d36:	e9c0 3300 	strd	r3, r3, [r0]
 8011d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d3e:	6083      	str	r3, [r0, #8]
 8011d40:	8181      	strh	r1, [r0, #12]
 8011d42:	6643      	str	r3, [r0, #100]	; 0x64
 8011d44:	81c2      	strh	r2, [r0, #14]
 8011d46:	6183      	str	r3, [r0, #24]
 8011d48:	4619      	mov	r1, r3
 8011d4a:	2208      	movs	r2, #8
 8011d4c:	305c      	adds	r0, #92	; 0x5c
 8011d4e:	f7fe fb85 	bl	801045c <memset>
 8011d52:	4b05      	ldr	r3, [pc, #20]	; (8011d68 <std+0x38>)
 8011d54:	6263      	str	r3, [r4, #36]	; 0x24
 8011d56:	4b05      	ldr	r3, [pc, #20]	; (8011d6c <std+0x3c>)
 8011d58:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d5a:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <std+0x40>)
 8011d5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d5e:	4b05      	ldr	r3, [pc, #20]	; (8011d74 <std+0x44>)
 8011d60:	6224      	str	r4, [r4, #32]
 8011d62:	6323      	str	r3, [r4, #48]	; 0x30
 8011d64:	bd10      	pop	{r4, pc}
 8011d66:	bf00      	nop
 8011d68:	08012b65 	.word	0x08012b65
 8011d6c:	08012b87 	.word	0x08012b87
 8011d70:	08012bbf 	.word	0x08012bbf
 8011d74:	08012be3 	.word	0x08012be3

08011d78 <_cleanup_r>:
 8011d78:	4901      	ldr	r1, [pc, #4]	; (8011d80 <_cleanup_r+0x8>)
 8011d7a:	f000 b8af 	b.w	8011edc <_fwalk_reent>
 8011d7e:	bf00      	nop
 8011d80:	08011cb9 	.word	0x08011cb9

08011d84 <__sfmoreglue>:
 8011d84:	b570      	push	{r4, r5, r6, lr}
 8011d86:	1e4a      	subs	r2, r1, #1
 8011d88:	2568      	movs	r5, #104	; 0x68
 8011d8a:	4355      	muls	r5, r2
 8011d8c:	460e      	mov	r6, r1
 8011d8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d92:	f000 fd23 	bl	80127dc <_malloc_r>
 8011d96:	4604      	mov	r4, r0
 8011d98:	b140      	cbz	r0, 8011dac <__sfmoreglue+0x28>
 8011d9a:	2100      	movs	r1, #0
 8011d9c:	e9c0 1600 	strd	r1, r6, [r0]
 8011da0:	300c      	adds	r0, #12
 8011da2:	60a0      	str	r0, [r4, #8]
 8011da4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011da8:	f7fe fb58 	bl	801045c <memset>
 8011dac:	4620      	mov	r0, r4
 8011dae:	bd70      	pop	{r4, r5, r6, pc}

08011db0 <__sfp_lock_acquire>:
 8011db0:	4801      	ldr	r0, [pc, #4]	; (8011db8 <__sfp_lock_acquire+0x8>)
 8011db2:	f000 b8b8 	b.w	8011f26 <__retarget_lock_acquire_recursive>
 8011db6:	bf00      	nop
 8011db8:	24000710 	.word	0x24000710

08011dbc <__sfp_lock_release>:
 8011dbc:	4801      	ldr	r0, [pc, #4]	; (8011dc4 <__sfp_lock_release+0x8>)
 8011dbe:	f000 b8b3 	b.w	8011f28 <__retarget_lock_release_recursive>
 8011dc2:	bf00      	nop
 8011dc4:	24000710 	.word	0x24000710

08011dc8 <__sinit_lock_acquire>:
 8011dc8:	4801      	ldr	r0, [pc, #4]	; (8011dd0 <__sinit_lock_acquire+0x8>)
 8011dca:	f000 b8ac 	b.w	8011f26 <__retarget_lock_acquire_recursive>
 8011dce:	bf00      	nop
 8011dd0:	2400070b 	.word	0x2400070b

08011dd4 <__sinit_lock_release>:
 8011dd4:	4801      	ldr	r0, [pc, #4]	; (8011ddc <__sinit_lock_release+0x8>)
 8011dd6:	f000 b8a7 	b.w	8011f28 <__retarget_lock_release_recursive>
 8011dda:	bf00      	nop
 8011ddc:	2400070b 	.word	0x2400070b

08011de0 <__sinit>:
 8011de0:	b510      	push	{r4, lr}
 8011de2:	4604      	mov	r4, r0
 8011de4:	f7ff fff0 	bl	8011dc8 <__sinit_lock_acquire>
 8011de8:	69a3      	ldr	r3, [r4, #24]
 8011dea:	b11b      	cbz	r3, 8011df4 <__sinit+0x14>
 8011dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011df0:	f7ff bff0 	b.w	8011dd4 <__sinit_lock_release>
 8011df4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011df8:	6523      	str	r3, [r4, #80]	; 0x50
 8011dfa:	4b13      	ldr	r3, [pc, #76]	; (8011e48 <__sinit+0x68>)
 8011dfc:	4a13      	ldr	r2, [pc, #76]	; (8011e4c <__sinit+0x6c>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	62a2      	str	r2, [r4, #40]	; 0x28
 8011e02:	42a3      	cmp	r3, r4
 8011e04:	bf04      	itt	eq
 8011e06:	2301      	moveq	r3, #1
 8011e08:	61a3      	streq	r3, [r4, #24]
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	f000 f820 	bl	8011e50 <__sfp>
 8011e10:	6060      	str	r0, [r4, #4]
 8011e12:	4620      	mov	r0, r4
 8011e14:	f000 f81c 	bl	8011e50 <__sfp>
 8011e18:	60a0      	str	r0, [r4, #8]
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	f000 f818 	bl	8011e50 <__sfp>
 8011e20:	2200      	movs	r2, #0
 8011e22:	60e0      	str	r0, [r4, #12]
 8011e24:	2104      	movs	r1, #4
 8011e26:	6860      	ldr	r0, [r4, #4]
 8011e28:	f7ff ff82 	bl	8011d30 <std>
 8011e2c:	68a0      	ldr	r0, [r4, #8]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	2109      	movs	r1, #9
 8011e32:	f7ff ff7d 	bl	8011d30 <std>
 8011e36:	68e0      	ldr	r0, [r4, #12]
 8011e38:	2202      	movs	r2, #2
 8011e3a:	2112      	movs	r1, #18
 8011e3c:	f7ff ff78 	bl	8011d30 <std>
 8011e40:	2301      	movs	r3, #1
 8011e42:	61a3      	str	r3, [r4, #24]
 8011e44:	e7d2      	b.n	8011dec <__sinit+0xc>
 8011e46:	bf00      	nop
 8011e48:	08013824 	.word	0x08013824
 8011e4c:	08011d79 	.word	0x08011d79

08011e50 <__sfp>:
 8011e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e52:	4607      	mov	r7, r0
 8011e54:	f7ff ffac 	bl	8011db0 <__sfp_lock_acquire>
 8011e58:	4b1e      	ldr	r3, [pc, #120]	; (8011ed4 <__sfp+0x84>)
 8011e5a:	681e      	ldr	r6, [r3, #0]
 8011e5c:	69b3      	ldr	r3, [r6, #24]
 8011e5e:	b913      	cbnz	r3, 8011e66 <__sfp+0x16>
 8011e60:	4630      	mov	r0, r6
 8011e62:	f7ff ffbd 	bl	8011de0 <__sinit>
 8011e66:	3648      	adds	r6, #72	; 0x48
 8011e68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e6c:	3b01      	subs	r3, #1
 8011e6e:	d503      	bpl.n	8011e78 <__sfp+0x28>
 8011e70:	6833      	ldr	r3, [r6, #0]
 8011e72:	b30b      	cbz	r3, 8011eb8 <__sfp+0x68>
 8011e74:	6836      	ldr	r6, [r6, #0]
 8011e76:	e7f7      	b.n	8011e68 <__sfp+0x18>
 8011e78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e7c:	b9d5      	cbnz	r5, 8011eb4 <__sfp+0x64>
 8011e7e:	4b16      	ldr	r3, [pc, #88]	; (8011ed8 <__sfp+0x88>)
 8011e80:	60e3      	str	r3, [r4, #12]
 8011e82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e86:	6665      	str	r5, [r4, #100]	; 0x64
 8011e88:	f000 f84c 	bl	8011f24 <__retarget_lock_init_recursive>
 8011e8c:	f7ff ff96 	bl	8011dbc <__sfp_lock_release>
 8011e90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e98:	6025      	str	r5, [r4, #0]
 8011e9a:	61a5      	str	r5, [r4, #24]
 8011e9c:	2208      	movs	r2, #8
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ea4:	f7fe fada 	bl	801045c <memset>
 8011ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011eac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eb4:	3468      	adds	r4, #104	; 0x68
 8011eb6:	e7d9      	b.n	8011e6c <__sfp+0x1c>
 8011eb8:	2104      	movs	r1, #4
 8011eba:	4638      	mov	r0, r7
 8011ebc:	f7ff ff62 	bl	8011d84 <__sfmoreglue>
 8011ec0:	4604      	mov	r4, r0
 8011ec2:	6030      	str	r0, [r6, #0]
 8011ec4:	2800      	cmp	r0, #0
 8011ec6:	d1d5      	bne.n	8011e74 <__sfp+0x24>
 8011ec8:	f7ff ff78 	bl	8011dbc <__sfp_lock_release>
 8011ecc:	230c      	movs	r3, #12
 8011ece:	603b      	str	r3, [r7, #0]
 8011ed0:	e7ee      	b.n	8011eb0 <__sfp+0x60>
 8011ed2:	bf00      	nop
 8011ed4:	08013824 	.word	0x08013824
 8011ed8:	ffff0001 	.word	0xffff0001

08011edc <_fwalk_reent>:
 8011edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ee0:	4606      	mov	r6, r0
 8011ee2:	4688      	mov	r8, r1
 8011ee4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ee8:	2700      	movs	r7, #0
 8011eea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011eee:	f1b9 0901 	subs.w	r9, r9, #1
 8011ef2:	d505      	bpl.n	8011f00 <_fwalk_reent+0x24>
 8011ef4:	6824      	ldr	r4, [r4, #0]
 8011ef6:	2c00      	cmp	r4, #0
 8011ef8:	d1f7      	bne.n	8011eea <_fwalk_reent+0xe>
 8011efa:	4638      	mov	r0, r7
 8011efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f00:	89ab      	ldrh	r3, [r5, #12]
 8011f02:	2b01      	cmp	r3, #1
 8011f04:	d907      	bls.n	8011f16 <_fwalk_reent+0x3a>
 8011f06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	d003      	beq.n	8011f16 <_fwalk_reent+0x3a>
 8011f0e:	4629      	mov	r1, r5
 8011f10:	4630      	mov	r0, r6
 8011f12:	47c0      	blx	r8
 8011f14:	4307      	orrs	r7, r0
 8011f16:	3568      	adds	r5, #104	; 0x68
 8011f18:	e7e9      	b.n	8011eee <_fwalk_reent+0x12>
	...

08011f1c <_localeconv_r>:
 8011f1c:	4800      	ldr	r0, [pc, #0]	; (8011f20 <_localeconv_r+0x4>)
 8011f1e:	4770      	bx	lr
 8011f20:	24000178 	.word	0x24000178

08011f24 <__retarget_lock_init_recursive>:
 8011f24:	4770      	bx	lr

08011f26 <__retarget_lock_acquire_recursive>:
 8011f26:	4770      	bx	lr

08011f28 <__retarget_lock_release_recursive>:
 8011f28:	4770      	bx	lr

08011f2a <__swhatbuf_r>:
 8011f2a:	b570      	push	{r4, r5, r6, lr}
 8011f2c:	460e      	mov	r6, r1
 8011f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f32:	2900      	cmp	r1, #0
 8011f34:	b096      	sub	sp, #88	; 0x58
 8011f36:	4614      	mov	r4, r2
 8011f38:	461d      	mov	r5, r3
 8011f3a:	da07      	bge.n	8011f4c <__swhatbuf_r+0x22>
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	602b      	str	r3, [r5, #0]
 8011f40:	89b3      	ldrh	r3, [r6, #12]
 8011f42:	061a      	lsls	r2, r3, #24
 8011f44:	d410      	bmi.n	8011f68 <__swhatbuf_r+0x3e>
 8011f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f4a:	e00e      	b.n	8011f6a <__swhatbuf_r+0x40>
 8011f4c:	466a      	mov	r2, sp
 8011f4e:	f000 fe9f 	bl	8012c90 <_fstat_r>
 8011f52:	2800      	cmp	r0, #0
 8011f54:	dbf2      	blt.n	8011f3c <__swhatbuf_r+0x12>
 8011f56:	9a01      	ldr	r2, [sp, #4]
 8011f58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f60:	425a      	negs	r2, r3
 8011f62:	415a      	adcs	r2, r3
 8011f64:	602a      	str	r2, [r5, #0]
 8011f66:	e7ee      	b.n	8011f46 <__swhatbuf_r+0x1c>
 8011f68:	2340      	movs	r3, #64	; 0x40
 8011f6a:	2000      	movs	r0, #0
 8011f6c:	6023      	str	r3, [r4, #0]
 8011f6e:	b016      	add	sp, #88	; 0x58
 8011f70:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f74 <__smakebuf_r>:
 8011f74:	898b      	ldrh	r3, [r1, #12]
 8011f76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f78:	079d      	lsls	r5, r3, #30
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	460c      	mov	r4, r1
 8011f7e:	d507      	bpl.n	8011f90 <__smakebuf_r+0x1c>
 8011f80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f84:	6023      	str	r3, [r4, #0]
 8011f86:	6123      	str	r3, [r4, #16]
 8011f88:	2301      	movs	r3, #1
 8011f8a:	6163      	str	r3, [r4, #20]
 8011f8c:	b002      	add	sp, #8
 8011f8e:	bd70      	pop	{r4, r5, r6, pc}
 8011f90:	ab01      	add	r3, sp, #4
 8011f92:	466a      	mov	r2, sp
 8011f94:	f7ff ffc9 	bl	8011f2a <__swhatbuf_r>
 8011f98:	9900      	ldr	r1, [sp, #0]
 8011f9a:	4605      	mov	r5, r0
 8011f9c:	4630      	mov	r0, r6
 8011f9e:	f000 fc1d 	bl	80127dc <_malloc_r>
 8011fa2:	b948      	cbnz	r0, 8011fb8 <__smakebuf_r+0x44>
 8011fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fa8:	059a      	lsls	r2, r3, #22
 8011faa:	d4ef      	bmi.n	8011f8c <__smakebuf_r+0x18>
 8011fac:	f023 0303 	bic.w	r3, r3, #3
 8011fb0:	f043 0302 	orr.w	r3, r3, #2
 8011fb4:	81a3      	strh	r3, [r4, #12]
 8011fb6:	e7e3      	b.n	8011f80 <__smakebuf_r+0xc>
 8011fb8:	4b0d      	ldr	r3, [pc, #52]	; (8011ff0 <__smakebuf_r+0x7c>)
 8011fba:	62b3      	str	r3, [r6, #40]	; 0x28
 8011fbc:	89a3      	ldrh	r3, [r4, #12]
 8011fbe:	6020      	str	r0, [r4, #0]
 8011fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fc4:	81a3      	strh	r3, [r4, #12]
 8011fc6:	9b00      	ldr	r3, [sp, #0]
 8011fc8:	6163      	str	r3, [r4, #20]
 8011fca:	9b01      	ldr	r3, [sp, #4]
 8011fcc:	6120      	str	r0, [r4, #16]
 8011fce:	b15b      	cbz	r3, 8011fe8 <__smakebuf_r+0x74>
 8011fd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	f000 fe6d 	bl	8012cb4 <_isatty_r>
 8011fda:	b128      	cbz	r0, 8011fe8 <__smakebuf_r+0x74>
 8011fdc:	89a3      	ldrh	r3, [r4, #12]
 8011fde:	f023 0303 	bic.w	r3, r3, #3
 8011fe2:	f043 0301 	orr.w	r3, r3, #1
 8011fe6:	81a3      	strh	r3, [r4, #12]
 8011fe8:	89a0      	ldrh	r0, [r4, #12]
 8011fea:	4305      	orrs	r5, r0
 8011fec:	81a5      	strh	r5, [r4, #12]
 8011fee:	e7cd      	b.n	8011f8c <__smakebuf_r+0x18>
 8011ff0:	08011d79 	.word	0x08011d79

08011ff4 <malloc>:
 8011ff4:	4b02      	ldr	r3, [pc, #8]	; (8012000 <malloc+0xc>)
 8011ff6:	4601      	mov	r1, r0
 8011ff8:	6818      	ldr	r0, [r3, #0]
 8011ffa:	f000 bbef 	b.w	80127dc <_malloc_r>
 8011ffe:	bf00      	nop
 8012000:	24000024 	.word	0x24000024

08012004 <memcpy>:
 8012004:	440a      	add	r2, r1
 8012006:	4291      	cmp	r1, r2
 8012008:	f100 33ff 	add.w	r3, r0, #4294967295
 801200c:	d100      	bne.n	8012010 <memcpy+0xc>
 801200e:	4770      	bx	lr
 8012010:	b510      	push	{r4, lr}
 8012012:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012016:	f803 4f01 	strb.w	r4, [r3, #1]!
 801201a:	4291      	cmp	r1, r2
 801201c:	d1f9      	bne.n	8012012 <memcpy+0xe>
 801201e:	bd10      	pop	{r4, pc}

08012020 <_Balloc>:
 8012020:	b570      	push	{r4, r5, r6, lr}
 8012022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012024:	4604      	mov	r4, r0
 8012026:	460d      	mov	r5, r1
 8012028:	b976      	cbnz	r6, 8012048 <_Balloc+0x28>
 801202a:	2010      	movs	r0, #16
 801202c:	f7ff ffe2 	bl	8011ff4 <malloc>
 8012030:	4602      	mov	r2, r0
 8012032:	6260      	str	r0, [r4, #36]	; 0x24
 8012034:	b920      	cbnz	r0, 8012040 <_Balloc+0x20>
 8012036:	4b18      	ldr	r3, [pc, #96]	; (8012098 <_Balloc+0x78>)
 8012038:	4818      	ldr	r0, [pc, #96]	; (801209c <_Balloc+0x7c>)
 801203a:	2166      	movs	r1, #102	; 0x66
 801203c:	f000 fde8 	bl	8012c10 <__assert_func>
 8012040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012044:	6006      	str	r6, [r0, #0]
 8012046:	60c6      	str	r6, [r0, #12]
 8012048:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801204a:	68f3      	ldr	r3, [r6, #12]
 801204c:	b183      	cbz	r3, 8012070 <_Balloc+0x50>
 801204e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012050:	68db      	ldr	r3, [r3, #12]
 8012052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012056:	b9b8      	cbnz	r0, 8012088 <_Balloc+0x68>
 8012058:	2101      	movs	r1, #1
 801205a:	fa01 f605 	lsl.w	r6, r1, r5
 801205e:	1d72      	adds	r2, r6, #5
 8012060:	0092      	lsls	r2, r2, #2
 8012062:	4620      	mov	r0, r4
 8012064:	f000 fb5a 	bl	801271c <_calloc_r>
 8012068:	b160      	cbz	r0, 8012084 <_Balloc+0x64>
 801206a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801206e:	e00e      	b.n	801208e <_Balloc+0x6e>
 8012070:	2221      	movs	r2, #33	; 0x21
 8012072:	2104      	movs	r1, #4
 8012074:	4620      	mov	r0, r4
 8012076:	f000 fb51 	bl	801271c <_calloc_r>
 801207a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801207c:	60f0      	str	r0, [r6, #12]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d1e4      	bne.n	801204e <_Balloc+0x2e>
 8012084:	2000      	movs	r0, #0
 8012086:	bd70      	pop	{r4, r5, r6, pc}
 8012088:	6802      	ldr	r2, [r0, #0]
 801208a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801208e:	2300      	movs	r3, #0
 8012090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012094:	e7f7      	b.n	8012086 <_Balloc+0x66>
 8012096:	bf00      	nop
 8012098:	08013869 	.word	0x08013869
 801209c:	08013950 	.word	0x08013950

080120a0 <_Bfree>:
 80120a0:	b570      	push	{r4, r5, r6, lr}
 80120a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120a4:	4605      	mov	r5, r0
 80120a6:	460c      	mov	r4, r1
 80120a8:	b976      	cbnz	r6, 80120c8 <_Bfree+0x28>
 80120aa:	2010      	movs	r0, #16
 80120ac:	f7ff ffa2 	bl	8011ff4 <malloc>
 80120b0:	4602      	mov	r2, r0
 80120b2:	6268      	str	r0, [r5, #36]	; 0x24
 80120b4:	b920      	cbnz	r0, 80120c0 <_Bfree+0x20>
 80120b6:	4b09      	ldr	r3, [pc, #36]	; (80120dc <_Bfree+0x3c>)
 80120b8:	4809      	ldr	r0, [pc, #36]	; (80120e0 <_Bfree+0x40>)
 80120ba:	218a      	movs	r1, #138	; 0x8a
 80120bc:	f000 fda8 	bl	8012c10 <__assert_func>
 80120c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120c4:	6006      	str	r6, [r0, #0]
 80120c6:	60c6      	str	r6, [r0, #12]
 80120c8:	b13c      	cbz	r4, 80120da <_Bfree+0x3a>
 80120ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80120cc:	6862      	ldr	r2, [r4, #4]
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80120d4:	6021      	str	r1, [r4, #0]
 80120d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80120da:	bd70      	pop	{r4, r5, r6, pc}
 80120dc:	08013869 	.word	0x08013869
 80120e0:	08013950 	.word	0x08013950

080120e4 <__multadd>:
 80120e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120e8:	690e      	ldr	r6, [r1, #16]
 80120ea:	4607      	mov	r7, r0
 80120ec:	4698      	mov	r8, r3
 80120ee:	460c      	mov	r4, r1
 80120f0:	f101 0014 	add.w	r0, r1, #20
 80120f4:	2300      	movs	r3, #0
 80120f6:	6805      	ldr	r5, [r0, #0]
 80120f8:	b2a9      	uxth	r1, r5
 80120fa:	fb02 8101 	mla	r1, r2, r1, r8
 80120fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012102:	0c2d      	lsrs	r5, r5, #16
 8012104:	fb02 c505 	mla	r5, r2, r5, ip
 8012108:	b289      	uxth	r1, r1
 801210a:	3301      	adds	r3, #1
 801210c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012110:	429e      	cmp	r6, r3
 8012112:	f840 1b04 	str.w	r1, [r0], #4
 8012116:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801211a:	dcec      	bgt.n	80120f6 <__multadd+0x12>
 801211c:	f1b8 0f00 	cmp.w	r8, #0
 8012120:	d022      	beq.n	8012168 <__multadd+0x84>
 8012122:	68a3      	ldr	r3, [r4, #8]
 8012124:	42b3      	cmp	r3, r6
 8012126:	dc19      	bgt.n	801215c <__multadd+0x78>
 8012128:	6861      	ldr	r1, [r4, #4]
 801212a:	4638      	mov	r0, r7
 801212c:	3101      	adds	r1, #1
 801212e:	f7ff ff77 	bl	8012020 <_Balloc>
 8012132:	4605      	mov	r5, r0
 8012134:	b928      	cbnz	r0, 8012142 <__multadd+0x5e>
 8012136:	4602      	mov	r2, r0
 8012138:	4b0d      	ldr	r3, [pc, #52]	; (8012170 <__multadd+0x8c>)
 801213a:	480e      	ldr	r0, [pc, #56]	; (8012174 <__multadd+0x90>)
 801213c:	21b5      	movs	r1, #181	; 0xb5
 801213e:	f000 fd67 	bl	8012c10 <__assert_func>
 8012142:	6922      	ldr	r2, [r4, #16]
 8012144:	3202      	adds	r2, #2
 8012146:	f104 010c 	add.w	r1, r4, #12
 801214a:	0092      	lsls	r2, r2, #2
 801214c:	300c      	adds	r0, #12
 801214e:	f7ff ff59 	bl	8012004 <memcpy>
 8012152:	4621      	mov	r1, r4
 8012154:	4638      	mov	r0, r7
 8012156:	f7ff ffa3 	bl	80120a0 <_Bfree>
 801215a:	462c      	mov	r4, r5
 801215c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012160:	3601      	adds	r6, #1
 8012162:	f8c3 8014 	str.w	r8, [r3, #20]
 8012166:	6126      	str	r6, [r4, #16]
 8012168:	4620      	mov	r0, r4
 801216a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801216e:	bf00      	nop
 8012170:	080138df 	.word	0x080138df
 8012174:	08013950 	.word	0x08013950

08012178 <__hi0bits>:
 8012178:	0c03      	lsrs	r3, r0, #16
 801217a:	041b      	lsls	r3, r3, #16
 801217c:	b9d3      	cbnz	r3, 80121b4 <__hi0bits+0x3c>
 801217e:	0400      	lsls	r0, r0, #16
 8012180:	2310      	movs	r3, #16
 8012182:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012186:	bf04      	itt	eq
 8012188:	0200      	lsleq	r0, r0, #8
 801218a:	3308      	addeq	r3, #8
 801218c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012190:	bf04      	itt	eq
 8012192:	0100      	lsleq	r0, r0, #4
 8012194:	3304      	addeq	r3, #4
 8012196:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801219a:	bf04      	itt	eq
 801219c:	0080      	lsleq	r0, r0, #2
 801219e:	3302      	addeq	r3, #2
 80121a0:	2800      	cmp	r0, #0
 80121a2:	db05      	blt.n	80121b0 <__hi0bits+0x38>
 80121a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80121a8:	f103 0301 	add.w	r3, r3, #1
 80121ac:	bf08      	it	eq
 80121ae:	2320      	moveq	r3, #32
 80121b0:	4618      	mov	r0, r3
 80121b2:	4770      	bx	lr
 80121b4:	2300      	movs	r3, #0
 80121b6:	e7e4      	b.n	8012182 <__hi0bits+0xa>

080121b8 <__lo0bits>:
 80121b8:	6803      	ldr	r3, [r0, #0]
 80121ba:	f013 0207 	ands.w	r2, r3, #7
 80121be:	4601      	mov	r1, r0
 80121c0:	d00b      	beq.n	80121da <__lo0bits+0x22>
 80121c2:	07da      	lsls	r2, r3, #31
 80121c4:	d424      	bmi.n	8012210 <__lo0bits+0x58>
 80121c6:	0798      	lsls	r0, r3, #30
 80121c8:	bf49      	itett	mi
 80121ca:	085b      	lsrmi	r3, r3, #1
 80121cc:	089b      	lsrpl	r3, r3, #2
 80121ce:	2001      	movmi	r0, #1
 80121d0:	600b      	strmi	r3, [r1, #0]
 80121d2:	bf5c      	itt	pl
 80121d4:	600b      	strpl	r3, [r1, #0]
 80121d6:	2002      	movpl	r0, #2
 80121d8:	4770      	bx	lr
 80121da:	b298      	uxth	r0, r3
 80121dc:	b9b0      	cbnz	r0, 801220c <__lo0bits+0x54>
 80121de:	0c1b      	lsrs	r3, r3, #16
 80121e0:	2010      	movs	r0, #16
 80121e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80121e6:	bf04      	itt	eq
 80121e8:	0a1b      	lsreq	r3, r3, #8
 80121ea:	3008      	addeq	r0, #8
 80121ec:	071a      	lsls	r2, r3, #28
 80121ee:	bf04      	itt	eq
 80121f0:	091b      	lsreq	r3, r3, #4
 80121f2:	3004      	addeq	r0, #4
 80121f4:	079a      	lsls	r2, r3, #30
 80121f6:	bf04      	itt	eq
 80121f8:	089b      	lsreq	r3, r3, #2
 80121fa:	3002      	addeq	r0, #2
 80121fc:	07da      	lsls	r2, r3, #31
 80121fe:	d403      	bmi.n	8012208 <__lo0bits+0x50>
 8012200:	085b      	lsrs	r3, r3, #1
 8012202:	f100 0001 	add.w	r0, r0, #1
 8012206:	d005      	beq.n	8012214 <__lo0bits+0x5c>
 8012208:	600b      	str	r3, [r1, #0]
 801220a:	4770      	bx	lr
 801220c:	4610      	mov	r0, r2
 801220e:	e7e8      	b.n	80121e2 <__lo0bits+0x2a>
 8012210:	2000      	movs	r0, #0
 8012212:	4770      	bx	lr
 8012214:	2020      	movs	r0, #32
 8012216:	4770      	bx	lr

08012218 <__i2b>:
 8012218:	b510      	push	{r4, lr}
 801221a:	460c      	mov	r4, r1
 801221c:	2101      	movs	r1, #1
 801221e:	f7ff feff 	bl	8012020 <_Balloc>
 8012222:	4602      	mov	r2, r0
 8012224:	b928      	cbnz	r0, 8012232 <__i2b+0x1a>
 8012226:	4b05      	ldr	r3, [pc, #20]	; (801223c <__i2b+0x24>)
 8012228:	4805      	ldr	r0, [pc, #20]	; (8012240 <__i2b+0x28>)
 801222a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801222e:	f000 fcef 	bl	8012c10 <__assert_func>
 8012232:	2301      	movs	r3, #1
 8012234:	6144      	str	r4, [r0, #20]
 8012236:	6103      	str	r3, [r0, #16]
 8012238:	bd10      	pop	{r4, pc}
 801223a:	bf00      	nop
 801223c:	080138df 	.word	0x080138df
 8012240:	08013950 	.word	0x08013950

08012244 <__multiply>:
 8012244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012248:	4614      	mov	r4, r2
 801224a:	690a      	ldr	r2, [r1, #16]
 801224c:	6923      	ldr	r3, [r4, #16]
 801224e:	429a      	cmp	r2, r3
 8012250:	bfb8      	it	lt
 8012252:	460b      	movlt	r3, r1
 8012254:	460d      	mov	r5, r1
 8012256:	bfbc      	itt	lt
 8012258:	4625      	movlt	r5, r4
 801225a:	461c      	movlt	r4, r3
 801225c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012260:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012264:	68ab      	ldr	r3, [r5, #8]
 8012266:	6869      	ldr	r1, [r5, #4]
 8012268:	eb0a 0709 	add.w	r7, sl, r9
 801226c:	42bb      	cmp	r3, r7
 801226e:	b085      	sub	sp, #20
 8012270:	bfb8      	it	lt
 8012272:	3101      	addlt	r1, #1
 8012274:	f7ff fed4 	bl	8012020 <_Balloc>
 8012278:	b930      	cbnz	r0, 8012288 <__multiply+0x44>
 801227a:	4602      	mov	r2, r0
 801227c:	4b42      	ldr	r3, [pc, #264]	; (8012388 <__multiply+0x144>)
 801227e:	4843      	ldr	r0, [pc, #268]	; (801238c <__multiply+0x148>)
 8012280:	f240 115d 	movw	r1, #349	; 0x15d
 8012284:	f000 fcc4 	bl	8012c10 <__assert_func>
 8012288:	f100 0614 	add.w	r6, r0, #20
 801228c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012290:	4633      	mov	r3, r6
 8012292:	2200      	movs	r2, #0
 8012294:	4543      	cmp	r3, r8
 8012296:	d31e      	bcc.n	80122d6 <__multiply+0x92>
 8012298:	f105 0c14 	add.w	ip, r5, #20
 801229c:	f104 0314 	add.w	r3, r4, #20
 80122a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80122a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80122a8:	9202      	str	r2, [sp, #8]
 80122aa:	ebac 0205 	sub.w	r2, ip, r5
 80122ae:	3a15      	subs	r2, #21
 80122b0:	f022 0203 	bic.w	r2, r2, #3
 80122b4:	3204      	adds	r2, #4
 80122b6:	f105 0115 	add.w	r1, r5, #21
 80122ba:	458c      	cmp	ip, r1
 80122bc:	bf38      	it	cc
 80122be:	2204      	movcc	r2, #4
 80122c0:	9201      	str	r2, [sp, #4]
 80122c2:	9a02      	ldr	r2, [sp, #8]
 80122c4:	9303      	str	r3, [sp, #12]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d808      	bhi.n	80122dc <__multiply+0x98>
 80122ca:	2f00      	cmp	r7, #0
 80122cc:	dc55      	bgt.n	801237a <__multiply+0x136>
 80122ce:	6107      	str	r7, [r0, #16]
 80122d0:	b005      	add	sp, #20
 80122d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d6:	f843 2b04 	str.w	r2, [r3], #4
 80122da:	e7db      	b.n	8012294 <__multiply+0x50>
 80122dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80122e0:	f1ba 0f00 	cmp.w	sl, #0
 80122e4:	d020      	beq.n	8012328 <__multiply+0xe4>
 80122e6:	f105 0e14 	add.w	lr, r5, #20
 80122ea:	46b1      	mov	r9, r6
 80122ec:	2200      	movs	r2, #0
 80122ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 80122f2:	f8d9 b000 	ldr.w	fp, [r9]
 80122f6:	b2a1      	uxth	r1, r4
 80122f8:	fa1f fb8b 	uxth.w	fp, fp
 80122fc:	fb0a b101 	mla	r1, sl, r1, fp
 8012300:	4411      	add	r1, r2
 8012302:	f8d9 2000 	ldr.w	r2, [r9]
 8012306:	0c24      	lsrs	r4, r4, #16
 8012308:	0c12      	lsrs	r2, r2, #16
 801230a:	fb0a 2404 	mla	r4, sl, r4, r2
 801230e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012312:	b289      	uxth	r1, r1
 8012314:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012318:	45f4      	cmp	ip, lr
 801231a:	f849 1b04 	str.w	r1, [r9], #4
 801231e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012322:	d8e4      	bhi.n	80122ee <__multiply+0xaa>
 8012324:	9901      	ldr	r1, [sp, #4]
 8012326:	5072      	str	r2, [r6, r1]
 8012328:	9a03      	ldr	r2, [sp, #12]
 801232a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801232e:	3304      	adds	r3, #4
 8012330:	f1b9 0f00 	cmp.w	r9, #0
 8012334:	d01f      	beq.n	8012376 <__multiply+0x132>
 8012336:	6834      	ldr	r4, [r6, #0]
 8012338:	f105 0114 	add.w	r1, r5, #20
 801233c:	46b6      	mov	lr, r6
 801233e:	f04f 0a00 	mov.w	sl, #0
 8012342:	880a      	ldrh	r2, [r1, #0]
 8012344:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012348:	fb09 b202 	mla	r2, r9, r2, fp
 801234c:	4492      	add	sl, r2
 801234e:	b2a4      	uxth	r4, r4
 8012350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012354:	f84e 4b04 	str.w	r4, [lr], #4
 8012358:	f851 4b04 	ldr.w	r4, [r1], #4
 801235c:	f8be 2000 	ldrh.w	r2, [lr]
 8012360:	0c24      	lsrs	r4, r4, #16
 8012362:	fb09 2404 	mla	r4, r9, r4, r2
 8012366:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801236a:	458c      	cmp	ip, r1
 801236c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012370:	d8e7      	bhi.n	8012342 <__multiply+0xfe>
 8012372:	9a01      	ldr	r2, [sp, #4]
 8012374:	50b4      	str	r4, [r6, r2]
 8012376:	3604      	adds	r6, #4
 8012378:	e7a3      	b.n	80122c2 <__multiply+0x7e>
 801237a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801237e:	2b00      	cmp	r3, #0
 8012380:	d1a5      	bne.n	80122ce <__multiply+0x8a>
 8012382:	3f01      	subs	r7, #1
 8012384:	e7a1      	b.n	80122ca <__multiply+0x86>
 8012386:	bf00      	nop
 8012388:	080138df 	.word	0x080138df
 801238c:	08013950 	.word	0x08013950

08012390 <__pow5mult>:
 8012390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012394:	4615      	mov	r5, r2
 8012396:	f012 0203 	ands.w	r2, r2, #3
 801239a:	4606      	mov	r6, r0
 801239c:	460f      	mov	r7, r1
 801239e:	d007      	beq.n	80123b0 <__pow5mult+0x20>
 80123a0:	4c25      	ldr	r4, [pc, #148]	; (8012438 <__pow5mult+0xa8>)
 80123a2:	3a01      	subs	r2, #1
 80123a4:	2300      	movs	r3, #0
 80123a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80123aa:	f7ff fe9b 	bl	80120e4 <__multadd>
 80123ae:	4607      	mov	r7, r0
 80123b0:	10ad      	asrs	r5, r5, #2
 80123b2:	d03d      	beq.n	8012430 <__pow5mult+0xa0>
 80123b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80123b6:	b97c      	cbnz	r4, 80123d8 <__pow5mult+0x48>
 80123b8:	2010      	movs	r0, #16
 80123ba:	f7ff fe1b 	bl	8011ff4 <malloc>
 80123be:	4602      	mov	r2, r0
 80123c0:	6270      	str	r0, [r6, #36]	; 0x24
 80123c2:	b928      	cbnz	r0, 80123d0 <__pow5mult+0x40>
 80123c4:	4b1d      	ldr	r3, [pc, #116]	; (801243c <__pow5mult+0xac>)
 80123c6:	481e      	ldr	r0, [pc, #120]	; (8012440 <__pow5mult+0xb0>)
 80123c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80123cc:	f000 fc20 	bl	8012c10 <__assert_func>
 80123d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80123d4:	6004      	str	r4, [r0, #0]
 80123d6:	60c4      	str	r4, [r0, #12]
 80123d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80123dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80123e0:	b94c      	cbnz	r4, 80123f6 <__pow5mult+0x66>
 80123e2:	f240 2171 	movw	r1, #625	; 0x271
 80123e6:	4630      	mov	r0, r6
 80123e8:	f7ff ff16 	bl	8012218 <__i2b>
 80123ec:	2300      	movs	r3, #0
 80123ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80123f2:	4604      	mov	r4, r0
 80123f4:	6003      	str	r3, [r0, #0]
 80123f6:	f04f 0900 	mov.w	r9, #0
 80123fa:	07eb      	lsls	r3, r5, #31
 80123fc:	d50a      	bpl.n	8012414 <__pow5mult+0x84>
 80123fe:	4639      	mov	r1, r7
 8012400:	4622      	mov	r2, r4
 8012402:	4630      	mov	r0, r6
 8012404:	f7ff ff1e 	bl	8012244 <__multiply>
 8012408:	4639      	mov	r1, r7
 801240a:	4680      	mov	r8, r0
 801240c:	4630      	mov	r0, r6
 801240e:	f7ff fe47 	bl	80120a0 <_Bfree>
 8012412:	4647      	mov	r7, r8
 8012414:	106d      	asrs	r5, r5, #1
 8012416:	d00b      	beq.n	8012430 <__pow5mult+0xa0>
 8012418:	6820      	ldr	r0, [r4, #0]
 801241a:	b938      	cbnz	r0, 801242c <__pow5mult+0x9c>
 801241c:	4622      	mov	r2, r4
 801241e:	4621      	mov	r1, r4
 8012420:	4630      	mov	r0, r6
 8012422:	f7ff ff0f 	bl	8012244 <__multiply>
 8012426:	6020      	str	r0, [r4, #0]
 8012428:	f8c0 9000 	str.w	r9, [r0]
 801242c:	4604      	mov	r4, r0
 801242e:	e7e4      	b.n	80123fa <__pow5mult+0x6a>
 8012430:	4638      	mov	r0, r7
 8012432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012436:	bf00      	nop
 8012438:	08013aa0 	.word	0x08013aa0
 801243c:	08013869 	.word	0x08013869
 8012440:	08013950 	.word	0x08013950

08012444 <__lshift>:
 8012444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012448:	460c      	mov	r4, r1
 801244a:	6849      	ldr	r1, [r1, #4]
 801244c:	6923      	ldr	r3, [r4, #16]
 801244e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012452:	68a3      	ldr	r3, [r4, #8]
 8012454:	4607      	mov	r7, r0
 8012456:	4691      	mov	r9, r2
 8012458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801245c:	f108 0601 	add.w	r6, r8, #1
 8012460:	42b3      	cmp	r3, r6
 8012462:	db0b      	blt.n	801247c <__lshift+0x38>
 8012464:	4638      	mov	r0, r7
 8012466:	f7ff fddb 	bl	8012020 <_Balloc>
 801246a:	4605      	mov	r5, r0
 801246c:	b948      	cbnz	r0, 8012482 <__lshift+0x3e>
 801246e:	4602      	mov	r2, r0
 8012470:	4b28      	ldr	r3, [pc, #160]	; (8012514 <__lshift+0xd0>)
 8012472:	4829      	ldr	r0, [pc, #164]	; (8012518 <__lshift+0xd4>)
 8012474:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012478:	f000 fbca 	bl	8012c10 <__assert_func>
 801247c:	3101      	adds	r1, #1
 801247e:	005b      	lsls	r3, r3, #1
 8012480:	e7ee      	b.n	8012460 <__lshift+0x1c>
 8012482:	2300      	movs	r3, #0
 8012484:	f100 0114 	add.w	r1, r0, #20
 8012488:	f100 0210 	add.w	r2, r0, #16
 801248c:	4618      	mov	r0, r3
 801248e:	4553      	cmp	r3, sl
 8012490:	db33      	blt.n	80124fa <__lshift+0xb6>
 8012492:	6920      	ldr	r0, [r4, #16]
 8012494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012498:	f104 0314 	add.w	r3, r4, #20
 801249c:	f019 091f 	ands.w	r9, r9, #31
 80124a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80124a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80124a8:	d02b      	beq.n	8012502 <__lshift+0xbe>
 80124aa:	f1c9 0e20 	rsb	lr, r9, #32
 80124ae:	468a      	mov	sl, r1
 80124b0:	2200      	movs	r2, #0
 80124b2:	6818      	ldr	r0, [r3, #0]
 80124b4:	fa00 f009 	lsl.w	r0, r0, r9
 80124b8:	4302      	orrs	r2, r0
 80124ba:	f84a 2b04 	str.w	r2, [sl], #4
 80124be:	f853 2b04 	ldr.w	r2, [r3], #4
 80124c2:	459c      	cmp	ip, r3
 80124c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80124c8:	d8f3      	bhi.n	80124b2 <__lshift+0x6e>
 80124ca:	ebac 0304 	sub.w	r3, ip, r4
 80124ce:	3b15      	subs	r3, #21
 80124d0:	f023 0303 	bic.w	r3, r3, #3
 80124d4:	3304      	adds	r3, #4
 80124d6:	f104 0015 	add.w	r0, r4, #21
 80124da:	4584      	cmp	ip, r0
 80124dc:	bf38      	it	cc
 80124de:	2304      	movcc	r3, #4
 80124e0:	50ca      	str	r2, [r1, r3]
 80124e2:	b10a      	cbz	r2, 80124e8 <__lshift+0xa4>
 80124e4:	f108 0602 	add.w	r6, r8, #2
 80124e8:	3e01      	subs	r6, #1
 80124ea:	4638      	mov	r0, r7
 80124ec:	612e      	str	r6, [r5, #16]
 80124ee:	4621      	mov	r1, r4
 80124f0:	f7ff fdd6 	bl	80120a0 <_Bfree>
 80124f4:	4628      	mov	r0, r5
 80124f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80124fe:	3301      	adds	r3, #1
 8012500:	e7c5      	b.n	801248e <__lshift+0x4a>
 8012502:	3904      	subs	r1, #4
 8012504:	f853 2b04 	ldr.w	r2, [r3], #4
 8012508:	f841 2f04 	str.w	r2, [r1, #4]!
 801250c:	459c      	cmp	ip, r3
 801250e:	d8f9      	bhi.n	8012504 <__lshift+0xc0>
 8012510:	e7ea      	b.n	80124e8 <__lshift+0xa4>
 8012512:	bf00      	nop
 8012514:	080138df 	.word	0x080138df
 8012518:	08013950 	.word	0x08013950

0801251c <__mcmp>:
 801251c:	b530      	push	{r4, r5, lr}
 801251e:	6902      	ldr	r2, [r0, #16]
 8012520:	690c      	ldr	r4, [r1, #16]
 8012522:	1b12      	subs	r2, r2, r4
 8012524:	d10e      	bne.n	8012544 <__mcmp+0x28>
 8012526:	f100 0314 	add.w	r3, r0, #20
 801252a:	3114      	adds	r1, #20
 801252c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012530:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012534:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012538:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801253c:	42a5      	cmp	r5, r4
 801253e:	d003      	beq.n	8012548 <__mcmp+0x2c>
 8012540:	d305      	bcc.n	801254e <__mcmp+0x32>
 8012542:	2201      	movs	r2, #1
 8012544:	4610      	mov	r0, r2
 8012546:	bd30      	pop	{r4, r5, pc}
 8012548:	4283      	cmp	r3, r0
 801254a:	d3f3      	bcc.n	8012534 <__mcmp+0x18>
 801254c:	e7fa      	b.n	8012544 <__mcmp+0x28>
 801254e:	f04f 32ff 	mov.w	r2, #4294967295
 8012552:	e7f7      	b.n	8012544 <__mcmp+0x28>

08012554 <__mdiff>:
 8012554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012558:	460c      	mov	r4, r1
 801255a:	4606      	mov	r6, r0
 801255c:	4611      	mov	r1, r2
 801255e:	4620      	mov	r0, r4
 8012560:	4617      	mov	r7, r2
 8012562:	f7ff ffdb 	bl	801251c <__mcmp>
 8012566:	1e05      	subs	r5, r0, #0
 8012568:	d110      	bne.n	801258c <__mdiff+0x38>
 801256a:	4629      	mov	r1, r5
 801256c:	4630      	mov	r0, r6
 801256e:	f7ff fd57 	bl	8012020 <_Balloc>
 8012572:	b930      	cbnz	r0, 8012582 <__mdiff+0x2e>
 8012574:	4b39      	ldr	r3, [pc, #228]	; (801265c <__mdiff+0x108>)
 8012576:	4602      	mov	r2, r0
 8012578:	f240 2132 	movw	r1, #562	; 0x232
 801257c:	4838      	ldr	r0, [pc, #224]	; (8012660 <__mdiff+0x10c>)
 801257e:	f000 fb47 	bl	8012c10 <__assert_func>
 8012582:	2301      	movs	r3, #1
 8012584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801258c:	bfa4      	itt	ge
 801258e:	463b      	movge	r3, r7
 8012590:	4627      	movge	r7, r4
 8012592:	4630      	mov	r0, r6
 8012594:	6879      	ldr	r1, [r7, #4]
 8012596:	bfa6      	itte	ge
 8012598:	461c      	movge	r4, r3
 801259a:	2500      	movge	r5, #0
 801259c:	2501      	movlt	r5, #1
 801259e:	f7ff fd3f 	bl	8012020 <_Balloc>
 80125a2:	b920      	cbnz	r0, 80125ae <__mdiff+0x5a>
 80125a4:	4b2d      	ldr	r3, [pc, #180]	; (801265c <__mdiff+0x108>)
 80125a6:	4602      	mov	r2, r0
 80125a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80125ac:	e7e6      	b.n	801257c <__mdiff+0x28>
 80125ae:	693e      	ldr	r6, [r7, #16]
 80125b0:	60c5      	str	r5, [r0, #12]
 80125b2:	6925      	ldr	r5, [r4, #16]
 80125b4:	f107 0114 	add.w	r1, r7, #20
 80125b8:	f104 0914 	add.w	r9, r4, #20
 80125bc:	f100 0e14 	add.w	lr, r0, #20
 80125c0:	f107 0210 	add.w	r2, r7, #16
 80125c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80125c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80125cc:	46f2      	mov	sl, lr
 80125ce:	2700      	movs	r7, #0
 80125d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80125d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80125d8:	fa1f f883 	uxth.w	r8, r3
 80125dc:	fa17 f78b 	uxtah	r7, r7, fp
 80125e0:	0c1b      	lsrs	r3, r3, #16
 80125e2:	eba7 0808 	sub.w	r8, r7, r8
 80125e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80125ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80125ee:	fa1f f888 	uxth.w	r8, r8
 80125f2:	141f      	asrs	r7, r3, #16
 80125f4:	454d      	cmp	r5, r9
 80125f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80125fa:	f84a 3b04 	str.w	r3, [sl], #4
 80125fe:	d8e7      	bhi.n	80125d0 <__mdiff+0x7c>
 8012600:	1b2b      	subs	r3, r5, r4
 8012602:	3b15      	subs	r3, #21
 8012604:	f023 0303 	bic.w	r3, r3, #3
 8012608:	3304      	adds	r3, #4
 801260a:	3415      	adds	r4, #21
 801260c:	42a5      	cmp	r5, r4
 801260e:	bf38      	it	cc
 8012610:	2304      	movcc	r3, #4
 8012612:	4419      	add	r1, r3
 8012614:	4473      	add	r3, lr
 8012616:	469e      	mov	lr, r3
 8012618:	460d      	mov	r5, r1
 801261a:	4565      	cmp	r5, ip
 801261c:	d30e      	bcc.n	801263c <__mdiff+0xe8>
 801261e:	f10c 0203 	add.w	r2, ip, #3
 8012622:	1a52      	subs	r2, r2, r1
 8012624:	f022 0203 	bic.w	r2, r2, #3
 8012628:	3903      	subs	r1, #3
 801262a:	458c      	cmp	ip, r1
 801262c:	bf38      	it	cc
 801262e:	2200      	movcc	r2, #0
 8012630:	441a      	add	r2, r3
 8012632:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012636:	b17b      	cbz	r3, 8012658 <__mdiff+0x104>
 8012638:	6106      	str	r6, [r0, #16]
 801263a:	e7a5      	b.n	8012588 <__mdiff+0x34>
 801263c:	f855 8b04 	ldr.w	r8, [r5], #4
 8012640:	fa17 f488 	uxtah	r4, r7, r8
 8012644:	1422      	asrs	r2, r4, #16
 8012646:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801264a:	b2a4      	uxth	r4, r4
 801264c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012650:	f84e 4b04 	str.w	r4, [lr], #4
 8012654:	1417      	asrs	r7, r2, #16
 8012656:	e7e0      	b.n	801261a <__mdiff+0xc6>
 8012658:	3e01      	subs	r6, #1
 801265a:	e7ea      	b.n	8012632 <__mdiff+0xde>
 801265c:	080138df 	.word	0x080138df
 8012660:	08013950 	.word	0x08013950

08012664 <__d2b>:
 8012664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012668:	4689      	mov	r9, r1
 801266a:	2101      	movs	r1, #1
 801266c:	ec57 6b10 	vmov	r6, r7, d0
 8012670:	4690      	mov	r8, r2
 8012672:	f7ff fcd5 	bl	8012020 <_Balloc>
 8012676:	4604      	mov	r4, r0
 8012678:	b930      	cbnz	r0, 8012688 <__d2b+0x24>
 801267a:	4602      	mov	r2, r0
 801267c:	4b25      	ldr	r3, [pc, #148]	; (8012714 <__d2b+0xb0>)
 801267e:	4826      	ldr	r0, [pc, #152]	; (8012718 <__d2b+0xb4>)
 8012680:	f240 310a 	movw	r1, #778	; 0x30a
 8012684:	f000 fac4 	bl	8012c10 <__assert_func>
 8012688:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801268c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012690:	bb35      	cbnz	r5, 80126e0 <__d2b+0x7c>
 8012692:	2e00      	cmp	r6, #0
 8012694:	9301      	str	r3, [sp, #4]
 8012696:	d028      	beq.n	80126ea <__d2b+0x86>
 8012698:	4668      	mov	r0, sp
 801269a:	9600      	str	r6, [sp, #0]
 801269c:	f7ff fd8c 	bl	80121b8 <__lo0bits>
 80126a0:	9900      	ldr	r1, [sp, #0]
 80126a2:	b300      	cbz	r0, 80126e6 <__d2b+0x82>
 80126a4:	9a01      	ldr	r2, [sp, #4]
 80126a6:	f1c0 0320 	rsb	r3, r0, #32
 80126aa:	fa02 f303 	lsl.w	r3, r2, r3
 80126ae:	430b      	orrs	r3, r1
 80126b0:	40c2      	lsrs	r2, r0
 80126b2:	6163      	str	r3, [r4, #20]
 80126b4:	9201      	str	r2, [sp, #4]
 80126b6:	9b01      	ldr	r3, [sp, #4]
 80126b8:	61a3      	str	r3, [r4, #24]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	bf14      	ite	ne
 80126be:	2202      	movne	r2, #2
 80126c0:	2201      	moveq	r2, #1
 80126c2:	6122      	str	r2, [r4, #16]
 80126c4:	b1d5      	cbz	r5, 80126fc <__d2b+0x98>
 80126c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80126ca:	4405      	add	r5, r0
 80126cc:	f8c9 5000 	str.w	r5, [r9]
 80126d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80126d4:	f8c8 0000 	str.w	r0, [r8]
 80126d8:	4620      	mov	r0, r4
 80126da:	b003      	add	sp, #12
 80126dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80126e4:	e7d5      	b.n	8012692 <__d2b+0x2e>
 80126e6:	6161      	str	r1, [r4, #20]
 80126e8:	e7e5      	b.n	80126b6 <__d2b+0x52>
 80126ea:	a801      	add	r0, sp, #4
 80126ec:	f7ff fd64 	bl	80121b8 <__lo0bits>
 80126f0:	9b01      	ldr	r3, [sp, #4]
 80126f2:	6163      	str	r3, [r4, #20]
 80126f4:	2201      	movs	r2, #1
 80126f6:	6122      	str	r2, [r4, #16]
 80126f8:	3020      	adds	r0, #32
 80126fa:	e7e3      	b.n	80126c4 <__d2b+0x60>
 80126fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012700:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012704:	f8c9 0000 	str.w	r0, [r9]
 8012708:	6918      	ldr	r0, [r3, #16]
 801270a:	f7ff fd35 	bl	8012178 <__hi0bits>
 801270e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012712:	e7df      	b.n	80126d4 <__d2b+0x70>
 8012714:	080138df 	.word	0x080138df
 8012718:	08013950 	.word	0x08013950

0801271c <_calloc_r>:
 801271c:	b513      	push	{r0, r1, r4, lr}
 801271e:	434a      	muls	r2, r1
 8012720:	4611      	mov	r1, r2
 8012722:	9201      	str	r2, [sp, #4]
 8012724:	f000 f85a 	bl	80127dc <_malloc_r>
 8012728:	4604      	mov	r4, r0
 801272a:	b118      	cbz	r0, 8012734 <_calloc_r+0x18>
 801272c:	9a01      	ldr	r2, [sp, #4]
 801272e:	2100      	movs	r1, #0
 8012730:	f7fd fe94 	bl	801045c <memset>
 8012734:	4620      	mov	r0, r4
 8012736:	b002      	add	sp, #8
 8012738:	bd10      	pop	{r4, pc}
	...

0801273c <_free_r>:
 801273c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801273e:	2900      	cmp	r1, #0
 8012740:	d048      	beq.n	80127d4 <_free_r+0x98>
 8012742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012746:	9001      	str	r0, [sp, #4]
 8012748:	2b00      	cmp	r3, #0
 801274a:	f1a1 0404 	sub.w	r4, r1, #4
 801274e:	bfb8      	it	lt
 8012750:	18e4      	addlt	r4, r4, r3
 8012752:	f000 fae3 	bl	8012d1c <__malloc_lock>
 8012756:	4a20      	ldr	r2, [pc, #128]	; (80127d8 <_free_r+0x9c>)
 8012758:	9801      	ldr	r0, [sp, #4]
 801275a:	6813      	ldr	r3, [r2, #0]
 801275c:	4615      	mov	r5, r2
 801275e:	b933      	cbnz	r3, 801276e <_free_r+0x32>
 8012760:	6063      	str	r3, [r4, #4]
 8012762:	6014      	str	r4, [r2, #0]
 8012764:	b003      	add	sp, #12
 8012766:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801276a:	f000 badd 	b.w	8012d28 <__malloc_unlock>
 801276e:	42a3      	cmp	r3, r4
 8012770:	d90b      	bls.n	801278a <_free_r+0x4e>
 8012772:	6821      	ldr	r1, [r4, #0]
 8012774:	1862      	adds	r2, r4, r1
 8012776:	4293      	cmp	r3, r2
 8012778:	bf04      	itt	eq
 801277a:	681a      	ldreq	r2, [r3, #0]
 801277c:	685b      	ldreq	r3, [r3, #4]
 801277e:	6063      	str	r3, [r4, #4]
 8012780:	bf04      	itt	eq
 8012782:	1852      	addeq	r2, r2, r1
 8012784:	6022      	streq	r2, [r4, #0]
 8012786:	602c      	str	r4, [r5, #0]
 8012788:	e7ec      	b.n	8012764 <_free_r+0x28>
 801278a:	461a      	mov	r2, r3
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	b10b      	cbz	r3, 8012794 <_free_r+0x58>
 8012790:	42a3      	cmp	r3, r4
 8012792:	d9fa      	bls.n	801278a <_free_r+0x4e>
 8012794:	6811      	ldr	r1, [r2, #0]
 8012796:	1855      	adds	r5, r2, r1
 8012798:	42a5      	cmp	r5, r4
 801279a:	d10b      	bne.n	80127b4 <_free_r+0x78>
 801279c:	6824      	ldr	r4, [r4, #0]
 801279e:	4421      	add	r1, r4
 80127a0:	1854      	adds	r4, r2, r1
 80127a2:	42a3      	cmp	r3, r4
 80127a4:	6011      	str	r1, [r2, #0]
 80127a6:	d1dd      	bne.n	8012764 <_free_r+0x28>
 80127a8:	681c      	ldr	r4, [r3, #0]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	6053      	str	r3, [r2, #4]
 80127ae:	4421      	add	r1, r4
 80127b0:	6011      	str	r1, [r2, #0]
 80127b2:	e7d7      	b.n	8012764 <_free_r+0x28>
 80127b4:	d902      	bls.n	80127bc <_free_r+0x80>
 80127b6:	230c      	movs	r3, #12
 80127b8:	6003      	str	r3, [r0, #0]
 80127ba:	e7d3      	b.n	8012764 <_free_r+0x28>
 80127bc:	6825      	ldr	r5, [r4, #0]
 80127be:	1961      	adds	r1, r4, r5
 80127c0:	428b      	cmp	r3, r1
 80127c2:	bf04      	itt	eq
 80127c4:	6819      	ldreq	r1, [r3, #0]
 80127c6:	685b      	ldreq	r3, [r3, #4]
 80127c8:	6063      	str	r3, [r4, #4]
 80127ca:	bf04      	itt	eq
 80127cc:	1949      	addeq	r1, r1, r5
 80127ce:	6021      	streq	r1, [r4, #0]
 80127d0:	6054      	str	r4, [r2, #4]
 80127d2:	e7c7      	b.n	8012764 <_free_r+0x28>
 80127d4:	b003      	add	sp, #12
 80127d6:	bd30      	pop	{r4, r5, pc}
 80127d8:	24000248 	.word	0x24000248

080127dc <_malloc_r>:
 80127dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127de:	1ccd      	adds	r5, r1, #3
 80127e0:	f025 0503 	bic.w	r5, r5, #3
 80127e4:	3508      	adds	r5, #8
 80127e6:	2d0c      	cmp	r5, #12
 80127e8:	bf38      	it	cc
 80127ea:	250c      	movcc	r5, #12
 80127ec:	2d00      	cmp	r5, #0
 80127ee:	4606      	mov	r6, r0
 80127f0:	db01      	blt.n	80127f6 <_malloc_r+0x1a>
 80127f2:	42a9      	cmp	r1, r5
 80127f4:	d903      	bls.n	80127fe <_malloc_r+0x22>
 80127f6:	230c      	movs	r3, #12
 80127f8:	6033      	str	r3, [r6, #0]
 80127fa:	2000      	movs	r0, #0
 80127fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127fe:	f000 fa8d 	bl	8012d1c <__malloc_lock>
 8012802:	4921      	ldr	r1, [pc, #132]	; (8012888 <_malloc_r+0xac>)
 8012804:	680a      	ldr	r2, [r1, #0]
 8012806:	4614      	mov	r4, r2
 8012808:	b99c      	cbnz	r4, 8012832 <_malloc_r+0x56>
 801280a:	4f20      	ldr	r7, [pc, #128]	; (801288c <_malloc_r+0xb0>)
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	b923      	cbnz	r3, 801281a <_malloc_r+0x3e>
 8012810:	4621      	mov	r1, r4
 8012812:	4630      	mov	r0, r6
 8012814:	f000 f996 	bl	8012b44 <_sbrk_r>
 8012818:	6038      	str	r0, [r7, #0]
 801281a:	4629      	mov	r1, r5
 801281c:	4630      	mov	r0, r6
 801281e:	f000 f991 	bl	8012b44 <_sbrk_r>
 8012822:	1c43      	adds	r3, r0, #1
 8012824:	d123      	bne.n	801286e <_malloc_r+0x92>
 8012826:	230c      	movs	r3, #12
 8012828:	6033      	str	r3, [r6, #0]
 801282a:	4630      	mov	r0, r6
 801282c:	f000 fa7c 	bl	8012d28 <__malloc_unlock>
 8012830:	e7e3      	b.n	80127fa <_malloc_r+0x1e>
 8012832:	6823      	ldr	r3, [r4, #0]
 8012834:	1b5b      	subs	r3, r3, r5
 8012836:	d417      	bmi.n	8012868 <_malloc_r+0x8c>
 8012838:	2b0b      	cmp	r3, #11
 801283a:	d903      	bls.n	8012844 <_malloc_r+0x68>
 801283c:	6023      	str	r3, [r4, #0]
 801283e:	441c      	add	r4, r3
 8012840:	6025      	str	r5, [r4, #0]
 8012842:	e004      	b.n	801284e <_malloc_r+0x72>
 8012844:	6863      	ldr	r3, [r4, #4]
 8012846:	42a2      	cmp	r2, r4
 8012848:	bf0c      	ite	eq
 801284a:	600b      	streq	r3, [r1, #0]
 801284c:	6053      	strne	r3, [r2, #4]
 801284e:	4630      	mov	r0, r6
 8012850:	f000 fa6a 	bl	8012d28 <__malloc_unlock>
 8012854:	f104 000b 	add.w	r0, r4, #11
 8012858:	1d23      	adds	r3, r4, #4
 801285a:	f020 0007 	bic.w	r0, r0, #7
 801285e:	1ac2      	subs	r2, r0, r3
 8012860:	d0cc      	beq.n	80127fc <_malloc_r+0x20>
 8012862:	1a1b      	subs	r3, r3, r0
 8012864:	50a3      	str	r3, [r4, r2]
 8012866:	e7c9      	b.n	80127fc <_malloc_r+0x20>
 8012868:	4622      	mov	r2, r4
 801286a:	6864      	ldr	r4, [r4, #4]
 801286c:	e7cc      	b.n	8012808 <_malloc_r+0x2c>
 801286e:	1cc4      	adds	r4, r0, #3
 8012870:	f024 0403 	bic.w	r4, r4, #3
 8012874:	42a0      	cmp	r0, r4
 8012876:	d0e3      	beq.n	8012840 <_malloc_r+0x64>
 8012878:	1a21      	subs	r1, r4, r0
 801287a:	4630      	mov	r0, r6
 801287c:	f000 f962 	bl	8012b44 <_sbrk_r>
 8012880:	3001      	adds	r0, #1
 8012882:	d1dd      	bne.n	8012840 <_malloc_r+0x64>
 8012884:	e7cf      	b.n	8012826 <_malloc_r+0x4a>
 8012886:	bf00      	nop
 8012888:	24000248 	.word	0x24000248
 801288c:	2400024c 	.word	0x2400024c

08012890 <__sfputc_r>:
 8012890:	6893      	ldr	r3, [r2, #8]
 8012892:	3b01      	subs	r3, #1
 8012894:	2b00      	cmp	r3, #0
 8012896:	b410      	push	{r4}
 8012898:	6093      	str	r3, [r2, #8]
 801289a:	da08      	bge.n	80128ae <__sfputc_r+0x1e>
 801289c:	6994      	ldr	r4, [r2, #24]
 801289e:	42a3      	cmp	r3, r4
 80128a0:	db01      	blt.n	80128a6 <__sfputc_r+0x16>
 80128a2:	290a      	cmp	r1, #10
 80128a4:	d103      	bne.n	80128ae <__sfputc_r+0x1e>
 80128a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128aa:	f7fe bab1 	b.w	8010e10 <__swbuf_r>
 80128ae:	6813      	ldr	r3, [r2, #0]
 80128b0:	1c58      	adds	r0, r3, #1
 80128b2:	6010      	str	r0, [r2, #0]
 80128b4:	7019      	strb	r1, [r3, #0]
 80128b6:	4608      	mov	r0, r1
 80128b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128bc:	4770      	bx	lr

080128be <__sfputs_r>:
 80128be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128c0:	4606      	mov	r6, r0
 80128c2:	460f      	mov	r7, r1
 80128c4:	4614      	mov	r4, r2
 80128c6:	18d5      	adds	r5, r2, r3
 80128c8:	42ac      	cmp	r4, r5
 80128ca:	d101      	bne.n	80128d0 <__sfputs_r+0x12>
 80128cc:	2000      	movs	r0, #0
 80128ce:	e007      	b.n	80128e0 <__sfputs_r+0x22>
 80128d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128d4:	463a      	mov	r2, r7
 80128d6:	4630      	mov	r0, r6
 80128d8:	f7ff ffda 	bl	8012890 <__sfputc_r>
 80128dc:	1c43      	adds	r3, r0, #1
 80128de:	d1f3      	bne.n	80128c8 <__sfputs_r+0xa>
 80128e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080128e4 <_vfiprintf_r>:
 80128e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e8:	460d      	mov	r5, r1
 80128ea:	b09d      	sub	sp, #116	; 0x74
 80128ec:	4614      	mov	r4, r2
 80128ee:	4698      	mov	r8, r3
 80128f0:	4606      	mov	r6, r0
 80128f2:	b118      	cbz	r0, 80128fc <_vfiprintf_r+0x18>
 80128f4:	6983      	ldr	r3, [r0, #24]
 80128f6:	b90b      	cbnz	r3, 80128fc <_vfiprintf_r+0x18>
 80128f8:	f7ff fa72 	bl	8011de0 <__sinit>
 80128fc:	4b89      	ldr	r3, [pc, #548]	; (8012b24 <_vfiprintf_r+0x240>)
 80128fe:	429d      	cmp	r5, r3
 8012900:	d11b      	bne.n	801293a <_vfiprintf_r+0x56>
 8012902:	6875      	ldr	r5, [r6, #4]
 8012904:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012906:	07d9      	lsls	r1, r3, #31
 8012908:	d405      	bmi.n	8012916 <_vfiprintf_r+0x32>
 801290a:	89ab      	ldrh	r3, [r5, #12]
 801290c:	059a      	lsls	r2, r3, #22
 801290e:	d402      	bmi.n	8012916 <_vfiprintf_r+0x32>
 8012910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012912:	f7ff fb08 	bl	8011f26 <__retarget_lock_acquire_recursive>
 8012916:	89ab      	ldrh	r3, [r5, #12]
 8012918:	071b      	lsls	r3, r3, #28
 801291a:	d501      	bpl.n	8012920 <_vfiprintf_r+0x3c>
 801291c:	692b      	ldr	r3, [r5, #16]
 801291e:	b9eb      	cbnz	r3, 801295c <_vfiprintf_r+0x78>
 8012920:	4629      	mov	r1, r5
 8012922:	4630      	mov	r0, r6
 8012924:	f7fe fac6 	bl	8010eb4 <__swsetup_r>
 8012928:	b1c0      	cbz	r0, 801295c <_vfiprintf_r+0x78>
 801292a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801292c:	07dc      	lsls	r4, r3, #31
 801292e:	d50e      	bpl.n	801294e <_vfiprintf_r+0x6a>
 8012930:	f04f 30ff 	mov.w	r0, #4294967295
 8012934:	b01d      	add	sp, #116	; 0x74
 8012936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801293a:	4b7b      	ldr	r3, [pc, #492]	; (8012b28 <_vfiprintf_r+0x244>)
 801293c:	429d      	cmp	r5, r3
 801293e:	d101      	bne.n	8012944 <_vfiprintf_r+0x60>
 8012940:	68b5      	ldr	r5, [r6, #8]
 8012942:	e7df      	b.n	8012904 <_vfiprintf_r+0x20>
 8012944:	4b79      	ldr	r3, [pc, #484]	; (8012b2c <_vfiprintf_r+0x248>)
 8012946:	429d      	cmp	r5, r3
 8012948:	bf08      	it	eq
 801294a:	68f5      	ldreq	r5, [r6, #12]
 801294c:	e7da      	b.n	8012904 <_vfiprintf_r+0x20>
 801294e:	89ab      	ldrh	r3, [r5, #12]
 8012950:	0598      	lsls	r0, r3, #22
 8012952:	d4ed      	bmi.n	8012930 <_vfiprintf_r+0x4c>
 8012954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012956:	f7ff fae7 	bl	8011f28 <__retarget_lock_release_recursive>
 801295a:	e7e9      	b.n	8012930 <_vfiprintf_r+0x4c>
 801295c:	2300      	movs	r3, #0
 801295e:	9309      	str	r3, [sp, #36]	; 0x24
 8012960:	2320      	movs	r3, #32
 8012962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012966:	f8cd 800c 	str.w	r8, [sp, #12]
 801296a:	2330      	movs	r3, #48	; 0x30
 801296c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012b30 <_vfiprintf_r+0x24c>
 8012970:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012974:	f04f 0901 	mov.w	r9, #1
 8012978:	4623      	mov	r3, r4
 801297a:	469a      	mov	sl, r3
 801297c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012980:	b10a      	cbz	r2, 8012986 <_vfiprintf_r+0xa2>
 8012982:	2a25      	cmp	r2, #37	; 0x25
 8012984:	d1f9      	bne.n	801297a <_vfiprintf_r+0x96>
 8012986:	ebba 0b04 	subs.w	fp, sl, r4
 801298a:	d00b      	beq.n	80129a4 <_vfiprintf_r+0xc0>
 801298c:	465b      	mov	r3, fp
 801298e:	4622      	mov	r2, r4
 8012990:	4629      	mov	r1, r5
 8012992:	4630      	mov	r0, r6
 8012994:	f7ff ff93 	bl	80128be <__sfputs_r>
 8012998:	3001      	adds	r0, #1
 801299a:	f000 80aa 	beq.w	8012af2 <_vfiprintf_r+0x20e>
 801299e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129a0:	445a      	add	r2, fp
 80129a2:	9209      	str	r2, [sp, #36]	; 0x24
 80129a4:	f89a 3000 	ldrb.w	r3, [sl]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	f000 80a2 	beq.w	8012af2 <_vfiprintf_r+0x20e>
 80129ae:	2300      	movs	r3, #0
 80129b0:	f04f 32ff 	mov.w	r2, #4294967295
 80129b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80129b8:	f10a 0a01 	add.w	sl, sl, #1
 80129bc:	9304      	str	r3, [sp, #16]
 80129be:	9307      	str	r3, [sp, #28]
 80129c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80129c4:	931a      	str	r3, [sp, #104]	; 0x68
 80129c6:	4654      	mov	r4, sl
 80129c8:	2205      	movs	r2, #5
 80129ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129ce:	4858      	ldr	r0, [pc, #352]	; (8012b30 <_vfiprintf_r+0x24c>)
 80129d0:	f7ed fc8e 	bl	80002f0 <memchr>
 80129d4:	9a04      	ldr	r2, [sp, #16]
 80129d6:	b9d8      	cbnz	r0, 8012a10 <_vfiprintf_r+0x12c>
 80129d8:	06d1      	lsls	r1, r2, #27
 80129da:	bf44      	itt	mi
 80129dc:	2320      	movmi	r3, #32
 80129de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129e2:	0713      	lsls	r3, r2, #28
 80129e4:	bf44      	itt	mi
 80129e6:	232b      	movmi	r3, #43	; 0x2b
 80129e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80129ec:	f89a 3000 	ldrb.w	r3, [sl]
 80129f0:	2b2a      	cmp	r3, #42	; 0x2a
 80129f2:	d015      	beq.n	8012a20 <_vfiprintf_r+0x13c>
 80129f4:	9a07      	ldr	r2, [sp, #28]
 80129f6:	4654      	mov	r4, sl
 80129f8:	2000      	movs	r0, #0
 80129fa:	f04f 0c0a 	mov.w	ip, #10
 80129fe:	4621      	mov	r1, r4
 8012a00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a04:	3b30      	subs	r3, #48	; 0x30
 8012a06:	2b09      	cmp	r3, #9
 8012a08:	d94e      	bls.n	8012aa8 <_vfiprintf_r+0x1c4>
 8012a0a:	b1b0      	cbz	r0, 8012a3a <_vfiprintf_r+0x156>
 8012a0c:	9207      	str	r2, [sp, #28]
 8012a0e:	e014      	b.n	8012a3a <_vfiprintf_r+0x156>
 8012a10:	eba0 0308 	sub.w	r3, r0, r8
 8012a14:	fa09 f303 	lsl.w	r3, r9, r3
 8012a18:	4313      	orrs	r3, r2
 8012a1a:	9304      	str	r3, [sp, #16]
 8012a1c:	46a2      	mov	sl, r4
 8012a1e:	e7d2      	b.n	80129c6 <_vfiprintf_r+0xe2>
 8012a20:	9b03      	ldr	r3, [sp, #12]
 8012a22:	1d19      	adds	r1, r3, #4
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	9103      	str	r1, [sp, #12]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	bfbb      	ittet	lt
 8012a2c:	425b      	neglt	r3, r3
 8012a2e:	f042 0202 	orrlt.w	r2, r2, #2
 8012a32:	9307      	strge	r3, [sp, #28]
 8012a34:	9307      	strlt	r3, [sp, #28]
 8012a36:	bfb8      	it	lt
 8012a38:	9204      	strlt	r2, [sp, #16]
 8012a3a:	7823      	ldrb	r3, [r4, #0]
 8012a3c:	2b2e      	cmp	r3, #46	; 0x2e
 8012a3e:	d10c      	bne.n	8012a5a <_vfiprintf_r+0x176>
 8012a40:	7863      	ldrb	r3, [r4, #1]
 8012a42:	2b2a      	cmp	r3, #42	; 0x2a
 8012a44:	d135      	bne.n	8012ab2 <_vfiprintf_r+0x1ce>
 8012a46:	9b03      	ldr	r3, [sp, #12]
 8012a48:	1d1a      	adds	r2, r3, #4
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	9203      	str	r2, [sp, #12]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	bfb8      	it	lt
 8012a52:	f04f 33ff 	movlt.w	r3, #4294967295
 8012a56:	3402      	adds	r4, #2
 8012a58:	9305      	str	r3, [sp, #20]
 8012a5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012b40 <_vfiprintf_r+0x25c>
 8012a5e:	7821      	ldrb	r1, [r4, #0]
 8012a60:	2203      	movs	r2, #3
 8012a62:	4650      	mov	r0, sl
 8012a64:	f7ed fc44 	bl	80002f0 <memchr>
 8012a68:	b140      	cbz	r0, 8012a7c <_vfiprintf_r+0x198>
 8012a6a:	2340      	movs	r3, #64	; 0x40
 8012a6c:	eba0 000a 	sub.w	r0, r0, sl
 8012a70:	fa03 f000 	lsl.w	r0, r3, r0
 8012a74:	9b04      	ldr	r3, [sp, #16]
 8012a76:	4303      	orrs	r3, r0
 8012a78:	3401      	adds	r4, #1
 8012a7a:	9304      	str	r3, [sp, #16]
 8012a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a80:	482c      	ldr	r0, [pc, #176]	; (8012b34 <_vfiprintf_r+0x250>)
 8012a82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012a86:	2206      	movs	r2, #6
 8012a88:	f7ed fc32 	bl	80002f0 <memchr>
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	d03f      	beq.n	8012b10 <_vfiprintf_r+0x22c>
 8012a90:	4b29      	ldr	r3, [pc, #164]	; (8012b38 <_vfiprintf_r+0x254>)
 8012a92:	bb1b      	cbnz	r3, 8012adc <_vfiprintf_r+0x1f8>
 8012a94:	9b03      	ldr	r3, [sp, #12]
 8012a96:	3307      	adds	r3, #7
 8012a98:	f023 0307 	bic.w	r3, r3, #7
 8012a9c:	3308      	adds	r3, #8
 8012a9e:	9303      	str	r3, [sp, #12]
 8012aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aa2:	443b      	add	r3, r7
 8012aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8012aa6:	e767      	b.n	8012978 <_vfiprintf_r+0x94>
 8012aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8012aac:	460c      	mov	r4, r1
 8012aae:	2001      	movs	r0, #1
 8012ab0:	e7a5      	b.n	80129fe <_vfiprintf_r+0x11a>
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	3401      	adds	r4, #1
 8012ab6:	9305      	str	r3, [sp, #20]
 8012ab8:	4619      	mov	r1, r3
 8012aba:	f04f 0c0a 	mov.w	ip, #10
 8012abe:	4620      	mov	r0, r4
 8012ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ac4:	3a30      	subs	r2, #48	; 0x30
 8012ac6:	2a09      	cmp	r2, #9
 8012ac8:	d903      	bls.n	8012ad2 <_vfiprintf_r+0x1ee>
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d0c5      	beq.n	8012a5a <_vfiprintf_r+0x176>
 8012ace:	9105      	str	r1, [sp, #20]
 8012ad0:	e7c3      	b.n	8012a5a <_vfiprintf_r+0x176>
 8012ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	2301      	movs	r3, #1
 8012ada:	e7f0      	b.n	8012abe <_vfiprintf_r+0x1da>
 8012adc:	ab03      	add	r3, sp, #12
 8012ade:	9300      	str	r3, [sp, #0]
 8012ae0:	462a      	mov	r2, r5
 8012ae2:	4b16      	ldr	r3, [pc, #88]	; (8012b3c <_vfiprintf_r+0x258>)
 8012ae4:	a904      	add	r1, sp, #16
 8012ae6:	4630      	mov	r0, r6
 8012ae8:	f7fd fd52 	bl	8010590 <_printf_float>
 8012aec:	4607      	mov	r7, r0
 8012aee:	1c78      	adds	r0, r7, #1
 8012af0:	d1d6      	bne.n	8012aa0 <_vfiprintf_r+0x1bc>
 8012af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012af4:	07d9      	lsls	r1, r3, #31
 8012af6:	d405      	bmi.n	8012b04 <_vfiprintf_r+0x220>
 8012af8:	89ab      	ldrh	r3, [r5, #12]
 8012afa:	059a      	lsls	r2, r3, #22
 8012afc:	d402      	bmi.n	8012b04 <_vfiprintf_r+0x220>
 8012afe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012b00:	f7ff fa12 	bl	8011f28 <__retarget_lock_release_recursive>
 8012b04:	89ab      	ldrh	r3, [r5, #12]
 8012b06:	065b      	lsls	r3, r3, #25
 8012b08:	f53f af12 	bmi.w	8012930 <_vfiprintf_r+0x4c>
 8012b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b0e:	e711      	b.n	8012934 <_vfiprintf_r+0x50>
 8012b10:	ab03      	add	r3, sp, #12
 8012b12:	9300      	str	r3, [sp, #0]
 8012b14:	462a      	mov	r2, r5
 8012b16:	4b09      	ldr	r3, [pc, #36]	; (8012b3c <_vfiprintf_r+0x258>)
 8012b18:	a904      	add	r1, sp, #16
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	f7fd ffc4 	bl	8010aa8 <_printf_i>
 8012b20:	e7e4      	b.n	8012aec <_vfiprintf_r+0x208>
 8012b22:	bf00      	nop
 8012b24:	08013910 	.word	0x08013910
 8012b28:	08013930 	.word	0x08013930
 8012b2c:	080138f0 	.word	0x080138f0
 8012b30:	08013aac 	.word	0x08013aac
 8012b34:	08013ab6 	.word	0x08013ab6
 8012b38:	08010591 	.word	0x08010591
 8012b3c:	080128bf 	.word	0x080128bf
 8012b40:	08013ab2 	.word	0x08013ab2

08012b44 <_sbrk_r>:
 8012b44:	b538      	push	{r3, r4, r5, lr}
 8012b46:	4d06      	ldr	r5, [pc, #24]	; (8012b60 <_sbrk_r+0x1c>)
 8012b48:	2300      	movs	r3, #0
 8012b4a:	4604      	mov	r4, r0
 8012b4c:	4608      	mov	r0, r1
 8012b4e:	602b      	str	r3, [r5, #0]
 8012b50:	f7f1 fa20 	bl	8003f94 <_sbrk>
 8012b54:	1c43      	adds	r3, r0, #1
 8012b56:	d102      	bne.n	8012b5e <_sbrk_r+0x1a>
 8012b58:	682b      	ldr	r3, [r5, #0]
 8012b5a:	b103      	cbz	r3, 8012b5e <_sbrk_r+0x1a>
 8012b5c:	6023      	str	r3, [r4, #0]
 8012b5e:	bd38      	pop	{r3, r4, r5, pc}
 8012b60:	24000714 	.word	0x24000714

08012b64 <__sread>:
 8012b64:	b510      	push	{r4, lr}
 8012b66:	460c      	mov	r4, r1
 8012b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b6c:	f000 f8e2 	bl	8012d34 <_read_r>
 8012b70:	2800      	cmp	r0, #0
 8012b72:	bfab      	itete	ge
 8012b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012b76:	89a3      	ldrhlt	r3, [r4, #12]
 8012b78:	181b      	addge	r3, r3, r0
 8012b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012b7e:	bfac      	ite	ge
 8012b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8012b82:	81a3      	strhlt	r3, [r4, #12]
 8012b84:	bd10      	pop	{r4, pc}

08012b86 <__swrite>:
 8012b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b8a:	461f      	mov	r7, r3
 8012b8c:	898b      	ldrh	r3, [r1, #12]
 8012b8e:	05db      	lsls	r3, r3, #23
 8012b90:	4605      	mov	r5, r0
 8012b92:	460c      	mov	r4, r1
 8012b94:	4616      	mov	r6, r2
 8012b96:	d505      	bpl.n	8012ba4 <__swrite+0x1e>
 8012b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b9c:	2302      	movs	r3, #2
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	f000 f898 	bl	8012cd4 <_lseek_r>
 8012ba4:	89a3      	ldrh	r3, [r4, #12]
 8012ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012bae:	81a3      	strh	r3, [r4, #12]
 8012bb0:	4632      	mov	r2, r6
 8012bb2:	463b      	mov	r3, r7
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bba:	f000 b817 	b.w	8012bec <_write_r>

08012bbe <__sseek>:
 8012bbe:	b510      	push	{r4, lr}
 8012bc0:	460c      	mov	r4, r1
 8012bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bc6:	f000 f885 	bl	8012cd4 <_lseek_r>
 8012bca:	1c43      	adds	r3, r0, #1
 8012bcc:	89a3      	ldrh	r3, [r4, #12]
 8012bce:	bf15      	itete	ne
 8012bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012bda:	81a3      	strheq	r3, [r4, #12]
 8012bdc:	bf18      	it	ne
 8012bde:	81a3      	strhne	r3, [r4, #12]
 8012be0:	bd10      	pop	{r4, pc}

08012be2 <__sclose>:
 8012be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012be6:	f000 b831 	b.w	8012c4c <_close_r>
	...

08012bec <_write_r>:
 8012bec:	b538      	push	{r3, r4, r5, lr}
 8012bee:	4d07      	ldr	r5, [pc, #28]	; (8012c0c <_write_r+0x20>)
 8012bf0:	4604      	mov	r4, r0
 8012bf2:	4608      	mov	r0, r1
 8012bf4:	4611      	mov	r1, r2
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	602a      	str	r2, [r5, #0]
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	f7ef ffe6 	bl	8002bcc <_write>
 8012c00:	1c43      	adds	r3, r0, #1
 8012c02:	d102      	bne.n	8012c0a <_write_r+0x1e>
 8012c04:	682b      	ldr	r3, [r5, #0]
 8012c06:	b103      	cbz	r3, 8012c0a <_write_r+0x1e>
 8012c08:	6023      	str	r3, [r4, #0]
 8012c0a:	bd38      	pop	{r3, r4, r5, pc}
 8012c0c:	24000714 	.word	0x24000714

08012c10 <__assert_func>:
 8012c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012c12:	4614      	mov	r4, r2
 8012c14:	461a      	mov	r2, r3
 8012c16:	4b09      	ldr	r3, [pc, #36]	; (8012c3c <__assert_func+0x2c>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	68d8      	ldr	r0, [r3, #12]
 8012c1e:	b14c      	cbz	r4, 8012c34 <__assert_func+0x24>
 8012c20:	4b07      	ldr	r3, [pc, #28]	; (8012c40 <__assert_func+0x30>)
 8012c22:	9100      	str	r1, [sp, #0]
 8012c24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012c28:	4906      	ldr	r1, [pc, #24]	; (8012c44 <__assert_func+0x34>)
 8012c2a:	462b      	mov	r3, r5
 8012c2c:	f000 f81e 	bl	8012c6c <fiprintf>
 8012c30:	f000 f89f 	bl	8012d72 <abort>
 8012c34:	4b04      	ldr	r3, [pc, #16]	; (8012c48 <__assert_func+0x38>)
 8012c36:	461c      	mov	r4, r3
 8012c38:	e7f3      	b.n	8012c22 <__assert_func+0x12>
 8012c3a:	bf00      	nop
 8012c3c:	24000024 	.word	0x24000024
 8012c40:	08013abd 	.word	0x08013abd
 8012c44:	08013aca 	.word	0x08013aca
 8012c48:	08013af8 	.word	0x08013af8

08012c4c <_close_r>:
 8012c4c:	b538      	push	{r3, r4, r5, lr}
 8012c4e:	4d06      	ldr	r5, [pc, #24]	; (8012c68 <_close_r+0x1c>)
 8012c50:	2300      	movs	r3, #0
 8012c52:	4604      	mov	r4, r0
 8012c54:	4608      	mov	r0, r1
 8012c56:	602b      	str	r3, [r5, #0]
 8012c58:	f7f1 f967 	bl	8003f2a <_close>
 8012c5c:	1c43      	adds	r3, r0, #1
 8012c5e:	d102      	bne.n	8012c66 <_close_r+0x1a>
 8012c60:	682b      	ldr	r3, [r5, #0]
 8012c62:	b103      	cbz	r3, 8012c66 <_close_r+0x1a>
 8012c64:	6023      	str	r3, [r4, #0]
 8012c66:	bd38      	pop	{r3, r4, r5, pc}
 8012c68:	24000714 	.word	0x24000714

08012c6c <fiprintf>:
 8012c6c:	b40e      	push	{r1, r2, r3}
 8012c6e:	b503      	push	{r0, r1, lr}
 8012c70:	4601      	mov	r1, r0
 8012c72:	ab03      	add	r3, sp, #12
 8012c74:	4805      	ldr	r0, [pc, #20]	; (8012c8c <fiprintf+0x20>)
 8012c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c7a:	6800      	ldr	r0, [r0, #0]
 8012c7c:	9301      	str	r3, [sp, #4]
 8012c7e:	f7ff fe31 	bl	80128e4 <_vfiprintf_r>
 8012c82:	b002      	add	sp, #8
 8012c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c88:	b003      	add	sp, #12
 8012c8a:	4770      	bx	lr
 8012c8c:	24000024 	.word	0x24000024

08012c90 <_fstat_r>:
 8012c90:	b538      	push	{r3, r4, r5, lr}
 8012c92:	4d07      	ldr	r5, [pc, #28]	; (8012cb0 <_fstat_r+0x20>)
 8012c94:	2300      	movs	r3, #0
 8012c96:	4604      	mov	r4, r0
 8012c98:	4608      	mov	r0, r1
 8012c9a:	4611      	mov	r1, r2
 8012c9c:	602b      	str	r3, [r5, #0]
 8012c9e:	f7f1 f950 	bl	8003f42 <_fstat>
 8012ca2:	1c43      	adds	r3, r0, #1
 8012ca4:	d102      	bne.n	8012cac <_fstat_r+0x1c>
 8012ca6:	682b      	ldr	r3, [r5, #0]
 8012ca8:	b103      	cbz	r3, 8012cac <_fstat_r+0x1c>
 8012caa:	6023      	str	r3, [r4, #0]
 8012cac:	bd38      	pop	{r3, r4, r5, pc}
 8012cae:	bf00      	nop
 8012cb0:	24000714 	.word	0x24000714

08012cb4 <_isatty_r>:
 8012cb4:	b538      	push	{r3, r4, r5, lr}
 8012cb6:	4d06      	ldr	r5, [pc, #24]	; (8012cd0 <_isatty_r+0x1c>)
 8012cb8:	2300      	movs	r3, #0
 8012cba:	4604      	mov	r4, r0
 8012cbc:	4608      	mov	r0, r1
 8012cbe:	602b      	str	r3, [r5, #0]
 8012cc0:	f7f1 f94f 	bl	8003f62 <_isatty>
 8012cc4:	1c43      	adds	r3, r0, #1
 8012cc6:	d102      	bne.n	8012cce <_isatty_r+0x1a>
 8012cc8:	682b      	ldr	r3, [r5, #0]
 8012cca:	b103      	cbz	r3, 8012cce <_isatty_r+0x1a>
 8012ccc:	6023      	str	r3, [r4, #0]
 8012cce:	bd38      	pop	{r3, r4, r5, pc}
 8012cd0:	24000714 	.word	0x24000714

08012cd4 <_lseek_r>:
 8012cd4:	b538      	push	{r3, r4, r5, lr}
 8012cd6:	4d07      	ldr	r5, [pc, #28]	; (8012cf4 <_lseek_r+0x20>)
 8012cd8:	4604      	mov	r4, r0
 8012cda:	4608      	mov	r0, r1
 8012cdc:	4611      	mov	r1, r2
 8012cde:	2200      	movs	r2, #0
 8012ce0:	602a      	str	r2, [r5, #0]
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	f7f1 f948 	bl	8003f78 <_lseek>
 8012ce8:	1c43      	adds	r3, r0, #1
 8012cea:	d102      	bne.n	8012cf2 <_lseek_r+0x1e>
 8012cec:	682b      	ldr	r3, [r5, #0]
 8012cee:	b103      	cbz	r3, 8012cf2 <_lseek_r+0x1e>
 8012cf0:	6023      	str	r3, [r4, #0]
 8012cf2:	bd38      	pop	{r3, r4, r5, pc}
 8012cf4:	24000714 	.word	0x24000714

08012cf8 <__ascii_mbtowc>:
 8012cf8:	b082      	sub	sp, #8
 8012cfa:	b901      	cbnz	r1, 8012cfe <__ascii_mbtowc+0x6>
 8012cfc:	a901      	add	r1, sp, #4
 8012cfe:	b142      	cbz	r2, 8012d12 <__ascii_mbtowc+0x1a>
 8012d00:	b14b      	cbz	r3, 8012d16 <__ascii_mbtowc+0x1e>
 8012d02:	7813      	ldrb	r3, [r2, #0]
 8012d04:	600b      	str	r3, [r1, #0]
 8012d06:	7812      	ldrb	r2, [r2, #0]
 8012d08:	1e10      	subs	r0, r2, #0
 8012d0a:	bf18      	it	ne
 8012d0c:	2001      	movne	r0, #1
 8012d0e:	b002      	add	sp, #8
 8012d10:	4770      	bx	lr
 8012d12:	4610      	mov	r0, r2
 8012d14:	e7fb      	b.n	8012d0e <__ascii_mbtowc+0x16>
 8012d16:	f06f 0001 	mvn.w	r0, #1
 8012d1a:	e7f8      	b.n	8012d0e <__ascii_mbtowc+0x16>

08012d1c <__malloc_lock>:
 8012d1c:	4801      	ldr	r0, [pc, #4]	; (8012d24 <__malloc_lock+0x8>)
 8012d1e:	f7ff b902 	b.w	8011f26 <__retarget_lock_acquire_recursive>
 8012d22:	bf00      	nop
 8012d24:	2400070c 	.word	0x2400070c

08012d28 <__malloc_unlock>:
 8012d28:	4801      	ldr	r0, [pc, #4]	; (8012d30 <__malloc_unlock+0x8>)
 8012d2a:	f7ff b8fd 	b.w	8011f28 <__retarget_lock_release_recursive>
 8012d2e:	bf00      	nop
 8012d30:	2400070c 	.word	0x2400070c

08012d34 <_read_r>:
 8012d34:	b538      	push	{r3, r4, r5, lr}
 8012d36:	4d07      	ldr	r5, [pc, #28]	; (8012d54 <_read_r+0x20>)
 8012d38:	4604      	mov	r4, r0
 8012d3a:	4608      	mov	r0, r1
 8012d3c:	4611      	mov	r1, r2
 8012d3e:	2200      	movs	r2, #0
 8012d40:	602a      	str	r2, [r5, #0]
 8012d42:	461a      	mov	r2, r3
 8012d44:	f7f1 f8d4 	bl	8003ef0 <_read>
 8012d48:	1c43      	adds	r3, r0, #1
 8012d4a:	d102      	bne.n	8012d52 <_read_r+0x1e>
 8012d4c:	682b      	ldr	r3, [r5, #0]
 8012d4e:	b103      	cbz	r3, 8012d52 <_read_r+0x1e>
 8012d50:	6023      	str	r3, [r4, #0]
 8012d52:	bd38      	pop	{r3, r4, r5, pc}
 8012d54:	24000714 	.word	0x24000714

08012d58 <__ascii_wctomb>:
 8012d58:	b149      	cbz	r1, 8012d6e <__ascii_wctomb+0x16>
 8012d5a:	2aff      	cmp	r2, #255	; 0xff
 8012d5c:	bf85      	ittet	hi
 8012d5e:	238a      	movhi	r3, #138	; 0x8a
 8012d60:	6003      	strhi	r3, [r0, #0]
 8012d62:	700a      	strbls	r2, [r1, #0]
 8012d64:	f04f 30ff 	movhi.w	r0, #4294967295
 8012d68:	bf98      	it	ls
 8012d6a:	2001      	movls	r0, #1
 8012d6c:	4770      	bx	lr
 8012d6e:	4608      	mov	r0, r1
 8012d70:	4770      	bx	lr

08012d72 <abort>:
 8012d72:	b508      	push	{r3, lr}
 8012d74:	2006      	movs	r0, #6
 8012d76:	f000 f82b 	bl	8012dd0 <raise>
 8012d7a:	2001      	movs	r0, #1
 8012d7c:	f7f1 f8ae 	bl	8003edc <_exit>

08012d80 <_raise_r>:
 8012d80:	291f      	cmp	r1, #31
 8012d82:	b538      	push	{r3, r4, r5, lr}
 8012d84:	4604      	mov	r4, r0
 8012d86:	460d      	mov	r5, r1
 8012d88:	d904      	bls.n	8012d94 <_raise_r+0x14>
 8012d8a:	2316      	movs	r3, #22
 8012d8c:	6003      	str	r3, [r0, #0]
 8012d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d92:	bd38      	pop	{r3, r4, r5, pc}
 8012d94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012d96:	b112      	cbz	r2, 8012d9e <_raise_r+0x1e>
 8012d98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d9c:	b94b      	cbnz	r3, 8012db2 <_raise_r+0x32>
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f000 f830 	bl	8012e04 <_getpid_r>
 8012da4:	462a      	mov	r2, r5
 8012da6:	4601      	mov	r1, r0
 8012da8:	4620      	mov	r0, r4
 8012daa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012dae:	f000 b817 	b.w	8012de0 <_kill_r>
 8012db2:	2b01      	cmp	r3, #1
 8012db4:	d00a      	beq.n	8012dcc <_raise_r+0x4c>
 8012db6:	1c59      	adds	r1, r3, #1
 8012db8:	d103      	bne.n	8012dc2 <_raise_r+0x42>
 8012dba:	2316      	movs	r3, #22
 8012dbc:	6003      	str	r3, [r0, #0]
 8012dbe:	2001      	movs	r0, #1
 8012dc0:	e7e7      	b.n	8012d92 <_raise_r+0x12>
 8012dc2:	2400      	movs	r4, #0
 8012dc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012dc8:	4628      	mov	r0, r5
 8012dca:	4798      	blx	r3
 8012dcc:	2000      	movs	r0, #0
 8012dce:	e7e0      	b.n	8012d92 <_raise_r+0x12>

08012dd0 <raise>:
 8012dd0:	4b02      	ldr	r3, [pc, #8]	; (8012ddc <raise+0xc>)
 8012dd2:	4601      	mov	r1, r0
 8012dd4:	6818      	ldr	r0, [r3, #0]
 8012dd6:	f7ff bfd3 	b.w	8012d80 <_raise_r>
 8012dda:	bf00      	nop
 8012ddc:	24000024 	.word	0x24000024

08012de0 <_kill_r>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	4d07      	ldr	r5, [pc, #28]	; (8012e00 <_kill_r+0x20>)
 8012de4:	2300      	movs	r3, #0
 8012de6:	4604      	mov	r4, r0
 8012de8:	4608      	mov	r0, r1
 8012dea:	4611      	mov	r1, r2
 8012dec:	602b      	str	r3, [r5, #0]
 8012dee:	f7f1 f865 	bl	8003ebc <_kill>
 8012df2:	1c43      	adds	r3, r0, #1
 8012df4:	d102      	bne.n	8012dfc <_kill_r+0x1c>
 8012df6:	682b      	ldr	r3, [r5, #0]
 8012df8:	b103      	cbz	r3, 8012dfc <_kill_r+0x1c>
 8012dfa:	6023      	str	r3, [r4, #0]
 8012dfc:	bd38      	pop	{r3, r4, r5, pc}
 8012dfe:	bf00      	nop
 8012e00:	24000714 	.word	0x24000714

08012e04 <_getpid_r>:
 8012e04:	f7f1 b852 	b.w	8003eac <_getpid>

08012e08 <atan2>:
 8012e08:	f000 b862 	b.w	8012ed0 <__ieee754_atan2>
 8012e0c:	0000      	movs	r0, r0
	...

08012e10 <sqrt>:
 8012e10:	b508      	push	{r3, lr}
 8012e12:	ed2d 8b04 	vpush	{d8-d9}
 8012e16:	eeb0 8b40 	vmov.f64	d8, d0
 8012e1a:	f000 f927 	bl	801306c <__ieee754_sqrt>
 8012e1e:	4b10      	ldr	r3, [pc, #64]	; (8012e60 <sqrt+0x50>)
 8012e20:	f993 3000 	ldrsb.w	r3, [r3]
 8012e24:	3301      	adds	r3, #1
 8012e26:	d011      	beq.n	8012e4c <sqrt+0x3c>
 8012e28:	eeb4 8b48 	vcmp.f64	d8, d8
 8012e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e30:	d60c      	bvs.n	8012e4c <sqrt+0x3c>
 8012e32:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8012e58 <sqrt+0x48>
 8012e36:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e3e:	d505      	bpl.n	8012e4c <sqrt+0x3c>
 8012e40:	f7fd fae2 	bl	8010408 <__errno>
 8012e44:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012e48:	2321      	movs	r3, #33	; 0x21
 8012e4a:	6003      	str	r3, [r0, #0]
 8012e4c:	ecbd 8b04 	vpop	{d8-d9}
 8012e50:	bd08      	pop	{r3, pc}
 8012e52:	bf00      	nop
 8012e54:	f3af 8000 	nop.w
	...
 8012e60:	240001f4 	.word	0x240001f4

08012e64 <asinf>:
 8012e64:	b508      	push	{r3, lr}
 8012e66:	ed2d 8b02 	vpush	{d8}
 8012e6a:	eeb0 8a40 	vmov.f32	s16, s0
 8012e6e:	f000 f901 	bl	8013074 <__ieee754_asinf>
 8012e72:	4b13      	ldr	r3, [pc, #76]	; (8012ec0 <asinf+0x5c>)
 8012e74:	f993 3000 	ldrsb.w	r3, [r3]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	eef0 8a40 	vmov.f32	s17, s0
 8012e7e:	d01a      	beq.n	8012eb6 <asinf+0x52>
 8012e80:	eeb4 8a48 	vcmp.f32	s16, s16
 8012e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e88:	d615      	bvs.n	8012eb6 <asinf+0x52>
 8012e8a:	eeb0 0a48 	vmov.f32	s0, s16
 8012e8e:	f000 fc53 	bl	8013738 <fabsf>
 8012e92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012e96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9e:	dd0a      	ble.n	8012eb6 <asinf+0x52>
 8012ea0:	f7fd fab2 	bl	8010408 <__errno>
 8012ea4:	ecbd 8b02 	vpop	{d8}
 8012ea8:	2321      	movs	r3, #33	; 0x21
 8012eaa:	6003      	str	r3, [r0, #0]
 8012eac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012eb0:	4804      	ldr	r0, [pc, #16]	; (8012ec4 <asinf+0x60>)
 8012eb2:	f000 bc49 	b.w	8013748 <nanf>
 8012eb6:	eeb0 0a68 	vmov.f32	s0, s17
 8012eba:	ecbd 8b02 	vpop	{d8}
 8012ebe:	bd08      	pop	{r3, pc}
 8012ec0:	240001f4 	.word	0x240001f4
 8012ec4:	08013af8 	.word	0x08013af8

08012ec8 <atan2f>:
 8012ec8:	f000 b9ba 	b.w	8013240 <__ieee754_atan2f>
 8012ecc:	0000      	movs	r0, r0
	...

08012ed0 <__ieee754_atan2>:
 8012ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ed2:	ee11 6a10 	vmov	r6, s2
 8012ed6:	ee11 0a90 	vmov	r0, s3
 8012eda:	4273      	negs	r3, r6
 8012edc:	4f60      	ldr	r7, [pc, #384]	; (8013060 <__ieee754_atan2+0x190>)
 8012ede:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8012ee2:	4333      	orrs	r3, r6
 8012ee4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012ee8:	42bb      	cmp	r3, r7
 8012eea:	ed8d 0b00 	vstr	d0, [sp]
 8012eee:	d80b      	bhi.n	8012f08 <__ieee754_atan2+0x38>
 8012ef0:	e9dd c500 	ldrd	ip, r5, [sp]
 8012ef4:	f1cc 0100 	rsb	r1, ip, #0
 8012ef8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012efc:	ea41 010c 	orr.w	r1, r1, ip
 8012f00:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8012f04:	42b9      	cmp	r1, r7
 8012f06:	d906      	bls.n	8012f16 <__ieee754_atan2+0x46>
 8012f08:	ed9d 7b00 	vldr	d7, [sp]
 8012f0c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8012f10:	ed8d 7b00 	vstr	d7, [sp]
 8012f14:	e054      	b.n	8012fc0 <__ieee754_atan2+0xf0>
 8012f16:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8012f1a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8012f1e:	4331      	orrs	r1, r6
 8012f20:	d104      	bne.n	8012f2c <__ieee754_atan2+0x5c>
 8012f22:	b003      	add	sp, #12
 8012f24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f28:	f000 ba2e 	b.w	8013388 <atan>
 8012f2c:	1784      	asrs	r4, r0, #30
 8012f2e:	f004 0402 	and.w	r4, r4, #2
 8012f32:	ea53 010c 	orrs.w	r1, r3, ip
 8012f36:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8012f3a:	d109      	bne.n	8012f50 <__ieee754_atan2+0x80>
 8012f3c:	2c02      	cmp	r4, #2
 8012f3e:	d069      	beq.n	8013014 <__ieee754_atan2+0x144>
 8012f40:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8013028 <__ieee754_atan2+0x158>
 8012f44:	ed9d 6b00 	vldr	d6, [sp]
 8012f48:	2c03      	cmp	r4, #3
 8012f4a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012f4e:	e7df      	b.n	8012f10 <__ieee754_atan2+0x40>
 8012f50:	ea52 0106 	orrs.w	r1, r2, r6
 8012f54:	d107      	bne.n	8012f66 <__ieee754_atan2+0x96>
 8012f56:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8013030 <__ieee754_atan2+0x160>
 8012f5a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8013038 <__ieee754_atan2+0x168>
 8012f5e:	2d00      	cmp	r5, #0
 8012f60:	fe26 7b07 	vselge.f64	d7, d6, d7
 8012f64:	e7d4      	b.n	8012f10 <__ieee754_atan2+0x40>
 8012f66:	42ba      	cmp	r2, r7
 8012f68:	d10f      	bne.n	8012f8a <__ieee754_atan2+0xba>
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	f104 34ff 	add.w	r4, r4, #4294967295
 8012f70:	d107      	bne.n	8012f82 <__ieee754_atan2+0xb2>
 8012f72:	2c02      	cmp	r4, #2
 8012f74:	d851      	bhi.n	801301a <__ieee754_atan2+0x14a>
 8012f76:	4b3b      	ldr	r3, [pc, #236]	; (8013064 <__ieee754_atan2+0x194>)
 8012f78:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012f7c:	ed94 7b00 	vldr	d7, [r4]
 8012f80:	e7c6      	b.n	8012f10 <__ieee754_atan2+0x40>
 8012f82:	2c02      	cmp	r4, #2
 8012f84:	d84c      	bhi.n	8013020 <__ieee754_atan2+0x150>
 8012f86:	4b38      	ldr	r3, [pc, #224]	; (8013068 <__ieee754_atan2+0x198>)
 8012f88:	e7f6      	b.n	8012f78 <__ieee754_atan2+0xa8>
 8012f8a:	42bb      	cmp	r3, r7
 8012f8c:	d0e3      	beq.n	8012f56 <__ieee754_atan2+0x86>
 8012f8e:	1a9b      	subs	r3, r3, r2
 8012f90:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012f94:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012f98:	da16      	bge.n	8012fc8 <__ieee754_atan2+0xf8>
 8012f9a:	2800      	cmp	r0, #0
 8012f9c:	da01      	bge.n	8012fa2 <__ieee754_atan2+0xd2>
 8012f9e:	323c      	adds	r2, #60	; 0x3c
 8012fa0:	db17      	blt.n	8012fd2 <__ieee754_atan2+0x102>
 8012fa2:	ed9d 7b00 	vldr	d7, [sp]
 8012fa6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8012faa:	f000 fae7 	bl	801357c <fabs>
 8012fae:	f000 f9eb 	bl	8013388 <atan>
 8012fb2:	ed8d 0b00 	vstr	d0, [sp]
 8012fb6:	2c01      	cmp	r4, #1
 8012fb8:	d00e      	beq.n	8012fd8 <__ieee754_atan2+0x108>
 8012fba:	2c02      	cmp	r4, #2
 8012fbc:	d014      	beq.n	8012fe8 <__ieee754_atan2+0x118>
 8012fbe:	b9f4      	cbnz	r4, 8012ffe <__ieee754_atan2+0x12e>
 8012fc0:	ed9d 0b00 	vldr	d0, [sp]
 8012fc4:	b003      	add	sp, #12
 8012fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fc8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8013030 <__ieee754_atan2+0x160>
 8012fcc:	ed8d 7b00 	vstr	d7, [sp]
 8012fd0:	e7f1      	b.n	8012fb6 <__ieee754_atan2+0xe6>
 8012fd2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8013040 <__ieee754_atan2+0x170>
 8012fd6:	e7f9      	b.n	8012fcc <__ieee754_atan2+0xfc>
 8012fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fdc:	9901      	ldr	r1, [sp, #4]
 8012fde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012fe2:	e9cd 2300 	strd	r2, r3, [sp]
 8012fe6:	e7eb      	b.n	8012fc0 <__ieee754_atan2+0xf0>
 8012fe8:	ed9d 6b00 	vldr	d6, [sp]
 8012fec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013048 <__ieee754_atan2+0x178>
 8012ff0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012ff4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8013050 <__ieee754_atan2+0x180>
 8012ff8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012ffc:	e788      	b.n	8012f10 <__ieee754_atan2+0x40>
 8012ffe:	ed9d 6b00 	vldr	d6, [sp]
 8013002:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8013048 <__ieee754_atan2+0x178>
 8013006:	ee36 7b47 	vsub.f64	d7, d6, d7
 801300a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8013050 <__ieee754_atan2+0x180>
 801300e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013012:	e77d      	b.n	8012f10 <__ieee754_atan2+0x40>
 8013014:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013050 <__ieee754_atan2+0x180>
 8013018:	e77a      	b.n	8012f10 <__ieee754_atan2+0x40>
 801301a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8013058 <__ieee754_atan2+0x188>
 801301e:	e777      	b.n	8012f10 <__ieee754_atan2+0x40>
 8013020:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8013040 <__ieee754_atan2+0x170>
 8013024:	e774      	b.n	8012f10 <__ieee754_atan2+0x40>
 8013026:	bf00      	nop
 8013028:	54442d18 	.word	0x54442d18
 801302c:	c00921fb 	.word	0xc00921fb
 8013030:	54442d18 	.word	0x54442d18
 8013034:	3ff921fb 	.word	0x3ff921fb
 8013038:	54442d18 	.word	0x54442d18
 801303c:	bff921fb 	.word	0xbff921fb
	...
 8013048:	33145c07 	.word	0x33145c07
 801304c:	3ca1a626 	.word	0x3ca1a626
 8013050:	54442d18 	.word	0x54442d18
 8013054:	400921fb 	.word	0x400921fb
 8013058:	54442d18 	.word	0x54442d18
 801305c:	3fe921fb 	.word	0x3fe921fb
 8013060:	7ff00000 	.word	0x7ff00000
 8013064:	08013c08 	.word	0x08013c08
 8013068:	08013c20 	.word	0x08013c20

0801306c <__ieee754_sqrt>:
 801306c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8013070:	4770      	bx	lr
	...

08013074 <__ieee754_asinf>:
 8013074:	b538      	push	{r3, r4, r5, lr}
 8013076:	ee10 5a10 	vmov	r5, s0
 801307a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801307e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013082:	ed2d 8b04 	vpush	{d8-d9}
 8013086:	d10c      	bne.n	80130a2 <__ieee754_asinf+0x2e>
 8013088:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8013200 <__ieee754_asinf+0x18c>
 801308c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8013204 <__ieee754_asinf+0x190>
 8013090:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013094:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013098:	eeb0 0a67 	vmov.f32	s0, s15
 801309c:	ecbd 8b04 	vpop	{d8-d9}
 80130a0:	bd38      	pop	{r3, r4, r5, pc}
 80130a2:	dd04      	ble.n	80130ae <__ieee754_asinf+0x3a>
 80130a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80130a8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80130ac:	e7f6      	b.n	801309c <__ieee754_asinf+0x28>
 80130ae:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80130b2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80130b6:	da0b      	bge.n	80130d0 <__ieee754_asinf+0x5c>
 80130b8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80130bc:	da52      	bge.n	8013164 <__ieee754_asinf+0xf0>
 80130be:	eddf 7a52 	vldr	s15, [pc, #328]	; 8013208 <__ieee754_asinf+0x194>
 80130c2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80130c6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80130ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ce:	dce5      	bgt.n	801309c <__ieee754_asinf+0x28>
 80130d0:	f000 fb32 	bl	8013738 <fabsf>
 80130d4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80130d8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80130dc:	ee20 8a08 	vmul.f32	s16, s0, s16
 80130e0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801320c <__ieee754_asinf+0x198>
 80130e4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8013210 <__ieee754_asinf+0x19c>
 80130e8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8013214 <__ieee754_asinf+0x1a0>
 80130ec:	eea8 7a27 	vfma.f32	s14, s16, s15
 80130f0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8013218 <__ieee754_asinf+0x1a4>
 80130f4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80130f8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801321c <__ieee754_asinf+0x1a8>
 80130fc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013100:	eddf 7a47 	vldr	s15, [pc, #284]	; 8013220 <__ieee754_asinf+0x1ac>
 8013104:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013108:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013224 <__ieee754_asinf+0x1b0>
 801310c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013110:	eddf 7a45 	vldr	s15, [pc, #276]	; 8013228 <__ieee754_asinf+0x1b4>
 8013114:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013118:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801322c <__ieee754_asinf+0x1b8>
 801311c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013120:	eddf 7a43 	vldr	s15, [pc, #268]	; 8013230 <__ieee754_asinf+0x1bc>
 8013124:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013128:	eeb0 0a48 	vmov.f32	s0, s16
 801312c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013130:	f000 f924 	bl	801337c <__ieee754_sqrtf>
 8013134:	4b3f      	ldr	r3, [pc, #252]	; (8013234 <__ieee754_asinf+0x1c0>)
 8013136:	ee29 9a08 	vmul.f32	s18, s18, s16
 801313a:	429c      	cmp	r4, r3
 801313c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013140:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013144:	dd3d      	ble.n	80131c2 <__ieee754_asinf+0x14e>
 8013146:	eea0 0a06 	vfma.f32	s0, s0, s12
 801314a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8013238 <__ieee754_asinf+0x1c4>
 801314e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8013152:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013204 <__ieee754_asinf+0x190>
 8013156:	ee30 0a67 	vsub.f32	s0, s0, s15
 801315a:	2d00      	cmp	r5, #0
 801315c:	bfd8      	it	le
 801315e:	eeb1 0a40 	vnegle.f32	s0, s0
 8013162:	e79b      	b.n	801309c <__ieee754_asinf+0x28>
 8013164:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013168:	eddf 6a28 	vldr	s13, [pc, #160]	; 801320c <__ieee754_asinf+0x198>
 801316c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013210 <__ieee754_asinf+0x19c>
 8013170:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8013224 <__ieee754_asinf+0x1b0>
 8013174:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013178:	eddf 6a27 	vldr	s13, [pc, #156]	; 8013218 <__ieee754_asinf+0x1a4>
 801317c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013180:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801321c <__ieee754_asinf+0x1a8>
 8013184:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013188:	eddf 6a25 	vldr	s13, [pc, #148]	; 8013220 <__ieee754_asinf+0x1ac>
 801318c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013190:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013214 <__ieee754_asinf+0x1a0>
 8013194:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013198:	eddf 6a23 	vldr	s13, [pc, #140]	; 8013228 <__ieee754_asinf+0x1b4>
 801319c:	eee7 6a86 	vfma.f32	s13, s15, s12
 80131a0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801322c <__ieee754_asinf+0x1b8>
 80131a4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80131a8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8013230 <__ieee754_asinf+0x1bc>
 80131ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 80131b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80131b4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80131b8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80131bc:	eea0 0a27 	vfma.f32	s0, s0, s15
 80131c0:	e76c      	b.n	801309c <__ieee754_asinf+0x28>
 80131c2:	ee10 3a10 	vmov	r3, s0
 80131c6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80131ca:	f023 030f 	bic.w	r3, r3, #15
 80131ce:	ee07 3a10 	vmov	s14, r3
 80131d2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80131d6:	ee70 7a07 	vadd.f32	s15, s0, s14
 80131da:	ee30 0a00 	vadd.f32	s0, s0, s0
 80131de:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80131e2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013200 <__ieee754_asinf+0x18c>
 80131e6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80131ea:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80131ee:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801323c <__ieee754_asinf+0x1c8>
 80131f2:	eeb0 6a40 	vmov.f32	s12, s0
 80131f6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80131fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80131fe:	e7aa      	b.n	8013156 <__ieee754_asinf+0xe2>
 8013200:	b33bbd2e 	.word	0xb33bbd2e
 8013204:	3fc90fdb 	.word	0x3fc90fdb
 8013208:	7149f2ca 	.word	0x7149f2ca
 801320c:	3811ef08 	.word	0x3811ef08
 8013210:	3a4f7f04 	.word	0x3a4f7f04
 8013214:	3e2aaaab 	.word	0x3e2aaaab
 8013218:	bd241146 	.word	0xbd241146
 801321c:	3e4e0aa8 	.word	0x3e4e0aa8
 8013220:	bea6b090 	.word	0xbea6b090
 8013224:	3d9dc62e 	.word	0x3d9dc62e
 8013228:	bf303361 	.word	0xbf303361
 801322c:	4001572d 	.word	0x4001572d
 8013230:	c019d139 	.word	0xc019d139
 8013234:	3f799999 	.word	0x3f799999
 8013238:	333bbd2e 	.word	0x333bbd2e
 801323c:	3f490fdb 	.word	0x3f490fdb

08013240 <__ieee754_atan2f>:
 8013240:	ee10 2a90 	vmov	r2, s1
 8013244:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8013248:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801324c:	b510      	push	{r4, lr}
 801324e:	eef0 7a40 	vmov.f32	s15, s0
 8013252:	dc06      	bgt.n	8013262 <__ieee754_atan2f+0x22>
 8013254:	ee10 0a10 	vmov	r0, s0
 8013258:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801325c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013260:	dd04      	ble.n	801326c <__ieee754_atan2f+0x2c>
 8013262:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8013266:	eeb0 0a67 	vmov.f32	s0, s15
 801326a:	bd10      	pop	{r4, pc}
 801326c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013270:	d103      	bne.n	801327a <__ieee754_atan2f+0x3a>
 8013272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013276:	f000 b98b 	b.w	8013590 <atanf>
 801327a:	1794      	asrs	r4, r2, #30
 801327c:	f004 0402 	and.w	r4, r4, #2
 8013280:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013284:	b93b      	cbnz	r3, 8013296 <__ieee754_atan2f+0x56>
 8013286:	2c02      	cmp	r4, #2
 8013288:	d05c      	beq.n	8013344 <__ieee754_atan2f+0x104>
 801328a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013358 <__ieee754_atan2f+0x118>
 801328e:	2c03      	cmp	r4, #3
 8013290:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8013294:	e7e7      	b.n	8013266 <__ieee754_atan2f+0x26>
 8013296:	b939      	cbnz	r1, 80132a8 <__ieee754_atan2f+0x68>
 8013298:	eddf 7a30 	vldr	s15, [pc, #192]	; 801335c <__ieee754_atan2f+0x11c>
 801329c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8013360 <__ieee754_atan2f+0x120>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	fe67 7a80 	vselge.f32	s15, s15, s0
 80132a6:	e7de      	b.n	8013266 <__ieee754_atan2f+0x26>
 80132a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80132ac:	d110      	bne.n	80132d0 <__ieee754_atan2f+0x90>
 80132ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80132b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80132b6:	d107      	bne.n	80132c8 <__ieee754_atan2f+0x88>
 80132b8:	2c02      	cmp	r4, #2
 80132ba:	d846      	bhi.n	801334a <__ieee754_atan2f+0x10a>
 80132bc:	4b29      	ldr	r3, [pc, #164]	; (8013364 <__ieee754_atan2f+0x124>)
 80132be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80132c2:	edd4 7a00 	vldr	s15, [r4]
 80132c6:	e7ce      	b.n	8013266 <__ieee754_atan2f+0x26>
 80132c8:	2c02      	cmp	r4, #2
 80132ca:	d841      	bhi.n	8013350 <__ieee754_atan2f+0x110>
 80132cc:	4b26      	ldr	r3, [pc, #152]	; (8013368 <__ieee754_atan2f+0x128>)
 80132ce:	e7f6      	b.n	80132be <__ieee754_atan2f+0x7e>
 80132d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80132d4:	d0e0      	beq.n	8013298 <__ieee754_atan2f+0x58>
 80132d6:	1a5b      	subs	r3, r3, r1
 80132d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80132dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80132e0:	da1a      	bge.n	8013318 <__ieee754_atan2f+0xd8>
 80132e2:	2a00      	cmp	r2, #0
 80132e4:	da01      	bge.n	80132ea <__ieee754_atan2f+0xaa>
 80132e6:	313c      	adds	r1, #60	; 0x3c
 80132e8:	db19      	blt.n	801331e <__ieee754_atan2f+0xde>
 80132ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80132ee:	f000 fa23 	bl	8013738 <fabsf>
 80132f2:	f000 f94d 	bl	8013590 <atanf>
 80132f6:	eef0 7a40 	vmov.f32	s15, s0
 80132fa:	2c01      	cmp	r4, #1
 80132fc:	d012      	beq.n	8013324 <__ieee754_atan2f+0xe4>
 80132fe:	2c02      	cmp	r4, #2
 8013300:	d017      	beq.n	8013332 <__ieee754_atan2f+0xf2>
 8013302:	2c00      	cmp	r4, #0
 8013304:	d0af      	beq.n	8013266 <__ieee754_atan2f+0x26>
 8013306:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801336c <__ieee754_atan2f+0x12c>
 801330a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801330e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8013370 <__ieee754_atan2f+0x130>
 8013312:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013316:	e7a6      	b.n	8013266 <__ieee754_atan2f+0x26>
 8013318:	eddf 7a10 	vldr	s15, [pc, #64]	; 801335c <__ieee754_atan2f+0x11c>
 801331c:	e7ed      	b.n	80132fa <__ieee754_atan2f+0xba>
 801331e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013374 <__ieee754_atan2f+0x134>
 8013322:	e7ea      	b.n	80132fa <__ieee754_atan2f+0xba>
 8013324:	ee17 3a90 	vmov	r3, s15
 8013328:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801332c:	ee07 3a90 	vmov	s15, r3
 8013330:	e799      	b.n	8013266 <__ieee754_atan2f+0x26>
 8013332:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801336c <__ieee754_atan2f+0x12c>
 8013336:	ee77 7a80 	vadd.f32	s15, s15, s0
 801333a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8013370 <__ieee754_atan2f+0x130>
 801333e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013342:	e790      	b.n	8013266 <__ieee754_atan2f+0x26>
 8013344:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8013370 <__ieee754_atan2f+0x130>
 8013348:	e78d      	b.n	8013266 <__ieee754_atan2f+0x26>
 801334a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013378 <__ieee754_atan2f+0x138>
 801334e:	e78a      	b.n	8013266 <__ieee754_atan2f+0x26>
 8013350:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013374 <__ieee754_atan2f+0x134>
 8013354:	e787      	b.n	8013266 <__ieee754_atan2f+0x26>
 8013356:	bf00      	nop
 8013358:	c0490fdb 	.word	0xc0490fdb
 801335c:	3fc90fdb 	.word	0x3fc90fdb
 8013360:	bfc90fdb 	.word	0xbfc90fdb
 8013364:	08013c38 	.word	0x08013c38
 8013368:	08013c44 	.word	0x08013c44
 801336c:	33bbbd2e 	.word	0x33bbbd2e
 8013370:	40490fdb 	.word	0x40490fdb
 8013374:	00000000 	.word	0x00000000
 8013378:	3f490fdb 	.word	0x3f490fdb

0801337c <__ieee754_sqrtf>:
 801337c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013380:	4770      	bx	lr
 8013382:	0000      	movs	r0, r0
 8013384:	0000      	movs	r0, r0
	...

08013388 <atan>:
 8013388:	b538      	push	{r3, r4, r5, lr}
 801338a:	eeb0 7b40 	vmov.f64	d7, d0
 801338e:	ee17 5a90 	vmov	r5, s15
 8013392:	4b73      	ldr	r3, [pc, #460]	; (8013560 <atan+0x1d8>)
 8013394:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013398:	429c      	cmp	r4, r3
 801339a:	dd13      	ble.n	80133c4 <atan+0x3c>
 801339c:	4b71      	ldr	r3, [pc, #452]	; (8013564 <atan+0x1dc>)
 801339e:	429c      	cmp	r4, r3
 80133a0:	dc03      	bgt.n	80133aa <atan+0x22>
 80133a2:	d107      	bne.n	80133b4 <atan+0x2c>
 80133a4:	ee10 3a10 	vmov	r3, s0
 80133a8:	b123      	cbz	r3, 80133b4 <atan+0x2c>
 80133aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80133ae:	eeb0 0b47 	vmov.f64	d0, d7
 80133b2:	bd38      	pop	{r3, r4, r5, pc}
 80133b4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80134f0 <atan+0x168>
 80133b8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80134f8 <atan+0x170>
 80133bc:	2d00      	cmp	r5, #0
 80133be:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80133c2:	e7f4      	b.n	80133ae <atan+0x26>
 80133c4:	4b68      	ldr	r3, [pc, #416]	; (8013568 <atan+0x1e0>)
 80133c6:	429c      	cmp	r4, r3
 80133c8:	dc11      	bgt.n	80133ee <atan+0x66>
 80133ca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80133ce:	429c      	cmp	r4, r3
 80133d0:	dc0a      	bgt.n	80133e8 <atan+0x60>
 80133d2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80133d6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8013500 <atan+0x178>
 80133da:	ee30 6b06 	vadd.f64	d6, d0, d6
 80133de:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80133e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e6:	dce2      	bgt.n	80133ae <atan+0x26>
 80133e8:	f04f 33ff 	mov.w	r3, #4294967295
 80133ec:	e013      	b.n	8013416 <atan+0x8e>
 80133ee:	f000 f8c5 	bl	801357c <fabs>
 80133f2:	4b5e      	ldr	r3, [pc, #376]	; (801356c <atan+0x1e4>)
 80133f4:	429c      	cmp	r4, r3
 80133f6:	dc4f      	bgt.n	8013498 <atan+0x110>
 80133f8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80133fc:	429c      	cmp	r4, r3
 80133fe:	dc41      	bgt.n	8013484 <atan+0xfc>
 8013400:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013404:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8013408:	2300      	movs	r3, #0
 801340a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801340e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013412:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013416:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013508 <atan+0x180>
 801341a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801341e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8013422:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8013510 <atan+0x188>
 8013426:	eea5 3b06 	vfma.f64	d3, d5, d6
 801342a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8013518 <atan+0x190>
 801342e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013432:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8013520 <atan+0x198>
 8013436:	eea6 3b05 	vfma.f64	d3, d6, d5
 801343a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8013528 <atan+0x1a0>
 801343e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013442:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8013530 <atan+0x1a8>
 8013446:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8013538 <atan+0x1b0>
 801344a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801344e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013540 <atan+0x1b8>
 8013452:	eea5 2b06 	vfma.f64	d2, d5, d6
 8013456:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013548 <atan+0x1c0>
 801345a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801345e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8013550 <atan+0x1c8>
 8013462:	eea6 2b05 	vfma.f64	d2, d6, d5
 8013466:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013558 <atan+0x1d0>
 801346a:	1c5a      	adds	r2, r3, #1
 801346c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8013470:	ee26 6b05 	vmul.f64	d6, d6, d5
 8013474:	eea3 6b04 	vfma.f64	d6, d3, d4
 8013478:	ee27 6b06 	vmul.f64	d6, d7, d6
 801347c:	d121      	bne.n	80134c2 <atan+0x13a>
 801347e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013482:	e794      	b.n	80133ae <atan+0x26>
 8013484:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013488:	2301      	movs	r3, #1
 801348a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801348e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013492:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013496:	e7be      	b.n	8013416 <atan+0x8e>
 8013498:	4b35      	ldr	r3, [pc, #212]	; (8013570 <atan+0x1e8>)
 801349a:	429c      	cmp	r4, r3
 801349c:	da0b      	bge.n	80134b6 <atan+0x12e>
 801349e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80134a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80134a6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80134aa:	eea0 6b07 	vfma.f64	d6, d0, d7
 80134ae:	2302      	movs	r3, #2
 80134b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80134b4:	e7af      	b.n	8013416 <atan+0x8e>
 80134b6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80134ba:	2303      	movs	r3, #3
 80134bc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80134c0:	e7a9      	b.n	8013416 <atan+0x8e>
 80134c2:	4a2c      	ldr	r2, [pc, #176]	; (8013574 <atan+0x1ec>)
 80134c4:	492c      	ldr	r1, [pc, #176]	; (8013578 <atan+0x1f0>)
 80134c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80134ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80134ce:	ed93 5b00 	vldr	d5, [r3]
 80134d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80134d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80134da:	ed92 6b00 	vldr	d6, [r2]
 80134de:	2d00      	cmp	r5, #0
 80134e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80134e4:	bfb8      	it	lt
 80134e6:	eeb1 7b47 	vneglt.f64	d7, d7
 80134ea:	e760      	b.n	80133ae <atan+0x26>
 80134ec:	f3af 8000 	nop.w
 80134f0:	54442d18 	.word	0x54442d18
 80134f4:	3ff921fb 	.word	0x3ff921fb
 80134f8:	54442d18 	.word	0x54442d18
 80134fc:	bff921fb 	.word	0xbff921fb
 8013500:	8800759c 	.word	0x8800759c
 8013504:	7e37e43c 	.word	0x7e37e43c
 8013508:	e322da11 	.word	0xe322da11
 801350c:	3f90ad3a 	.word	0x3f90ad3a
 8013510:	24760deb 	.word	0x24760deb
 8013514:	3fa97b4b 	.word	0x3fa97b4b
 8013518:	a0d03d51 	.word	0xa0d03d51
 801351c:	3fb10d66 	.word	0x3fb10d66
 8013520:	c54c206e 	.word	0xc54c206e
 8013524:	3fb745cd 	.word	0x3fb745cd
 8013528:	920083ff 	.word	0x920083ff
 801352c:	3fc24924 	.word	0x3fc24924
 8013530:	5555550d 	.word	0x5555550d
 8013534:	3fd55555 	.word	0x3fd55555
 8013538:	52defd9a 	.word	0x52defd9a
 801353c:	bfadde2d 	.word	0xbfadde2d
 8013540:	2c6a6c2f 	.word	0x2c6a6c2f
 8013544:	bfa2b444 	.word	0xbfa2b444
 8013548:	af749a6d 	.word	0xaf749a6d
 801354c:	bfb3b0f2 	.word	0xbfb3b0f2
 8013550:	fe231671 	.word	0xfe231671
 8013554:	bfbc71c6 	.word	0xbfbc71c6
 8013558:	9998ebc4 	.word	0x9998ebc4
 801355c:	bfc99999 	.word	0xbfc99999
 8013560:	440fffff 	.word	0x440fffff
 8013564:	7ff00000 	.word	0x7ff00000
 8013568:	3fdbffff 	.word	0x3fdbffff
 801356c:	3ff2ffff 	.word	0x3ff2ffff
 8013570:	40038000 	.word	0x40038000
 8013574:	08013c50 	.word	0x08013c50
 8013578:	08013c70 	.word	0x08013c70

0801357c <fabs>:
 801357c:	ec51 0b10 	vmov	r0, r1, d0
 8013580:	ee10 2a10 	vmov	r2, s0
 8013584:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013588:	ec43 2b10 	vmov	d0, r2, r3
 801358c:	4770      	bx	lr
	...

08013590 <atanf>:
 8013590:	b538      	push	{r3, r4, r5, lr}
 8013592:	ee10 5a10 	vmov	r5, s0
 8013596:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801359a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801359e:	eef0 7a40 	vmov.f32	s15, s0
 80135a2:	db0f      	blt.n	80135c4 <atanf+0x34>
 80135a4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80135a8:	dd04      	ble.n	80135b4 <atanf+0x24>
 80135aa:	ee70 7a00 	vadd.f32	s15, s0, s0
 80135ae:	eeb0 0a67 	vmov.f32	s0, s15
 80135b2:	bd38      	pop	{r3, r4, r5, pc}
 80135b4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80136ec <atanf+0x15c>
 80135b8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80136f0 <atanf+0x160>
 80135bc:	2d00      	cmp	r5, #0
 80135be:	fe77 7a80 	vselgt.f32	s15, s15, s0
 80135c2:	e7f4      	b.n	80135ae <atanf+0x1e>
 80135c4:	4b4b      	ldr	r3, [pc, #300]	; (80136f4 <atanf+0x164>)
 80135c6:	429c      	cmp	r4, r3
 80135c8:	dc10      	bgt.n	80135ec <atanf+0x5c>
 80135ca:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80135ce:	da0a      	bge.n	80135e6 <atanf+0x56>
 80135d0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80136f8 <atanf+0x168>
 80135d4:	ee30 7a07 	vadd.f32	s14, s0, s14
 80135d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80135dc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80135e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135e4:	dce3      	bgt.n	80135ae <atanf+0x1e>
 80135e6:	f04f 33ff 	mov.w	r3, #4294967295
 80135ea:	e013      	b.n	8013614 <atanf+0x84>
 80135ec:	f000 f8a4 	bl	8013738 <fabsf>
 80135f0:	4b42      	ldr	r3, [pc, #264]	; (80136fc <atanf+0x16c>)
 80135f2:	429c      	cmp	r4, r3
 80135f4:	dc4f      	bgt.n	8013696 <atanf+0x106>
 80135f6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80135fa:	429c      	cmp	r4, r3
 80135fc:	dc41      	bgt.n	8013682 <atanf+0xf2>
 80135fe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013602:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013606:	eea0 7a27 	vfma.f32	s14, s0, s15
 801360a:	2300      	movs	r3, #0
 801360c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013610:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013614:	1c5a      	adds	r2, r3, #1
 8013616:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801361a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013700 <atanf+0x170>
 801361e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8013704 <atanf+0x174>
 8013622:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8013708 <atanf+0x178>
 8013626:	ed9f 0a39 	vldr	s0, [pc, #228]	; 801370c <atanf+0x17c>
 801362a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801362e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013632:	eddf 5a37 	vldr	s11, [pc, #220]	; 8013710 <atanf+0x180>
 8013636:	eee6 5a07 	vfma.f32	s11, s12, s14
 801363a:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8013714 <atanf+0x184>
 801363e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013642:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013718 <atanf+0x188>
 8013646:	eee6 5a07 	vfma.f32	s11, s12, s14
 801364a:	ed9f 6a34 	vldr	s12, [pc, #208]	; 801371c <atanf+0x18c>
 801364e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013652:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013720 <atanf+0x190>
 8013656:	eee7 5a05 	vfma.f32	s11, s14, s10
 801365a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8013724 <atanf+0x194>
 801365e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013662:	eddf 5a31 	vldr	s11, [pc, #196]	; 8013728 <atanf+0x198>
 8013666:	eee5 5a07 	vfma.f32	s11, s10, s14
 801366a:	eea5 0a87 	vfma.f32	s0, s11, s14
 801366e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013672:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013676:	ee27 0a80 	vmul.f32	s0, s15, s0
 801367a:	d121      	bne.n	80136c0 <atanf+0x130>
 801367c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013680:	e795      	b.n	80135ae <atanf+0x1e>
 8013682:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013686:	ee30 7a67 	vsub.f32	s14, s0, s15
 801368a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801368e:	2301      	movs	r3, #1
 8013690:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013694:	e7be      	b.n	8013614 <atanf+0x84>
 8013696:	4b25      	ldr	r3, [pc, #148]	; (801372c <atanf+0x19c>)
 8013698:	429c      	cmp	r4, r3
 801369a:	dc0b      	bgt.n	80136b4 <atanf+0x124>
 801369c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80136a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80136a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80136a8:	2302      	movs	r3, #2
 80136aa:	ee70 6a67 	vsub.f32	s13, s0, s15
 80136ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80136b2:	e7af      	b.n	8013614 <atanf+0x84>
 80136b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80136b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80136bc:	2303      	movs	r3, #3
 80136be:	e7a9      	b.n	8013614 <atanf+0x84>
 80136c0:	4a1b      	ldr	r2, [pc, #108]	; (8013730 <atanf+0x1a0>)
 80136c2:	491c      	ldr	r1, [pc, #112]	; (8013734 <atanf+0x1a4>)
 80136c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80136c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80136cc:	ed93 7a00 	vldr	s14, [r3]
 80136d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80136d4:	2d00      	cmp	r5, #0
 80136d6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80136da:	ed92 0a00 	vldr	s0, [r2]
 80136de:	ee70 7a67 	vsub.f32	s15, s0, s15
 80136e2:	bfb8      	it	lt
 80136e4:	eef1 7a67 	vneglt.f32	s15, s15
 80136e8:	e761      	b.n	80135ae <atanf+0x1e>
 80136ea:	bf00      	nop
 80136ec:	3fc90fdb 	.word	0x3fc90fdb
 80136f0:	bfc90fdb 	.word	0xbfc90fdb
 80136f4:	3edfffff 	.word	0x3edfffff
 80136f8:	7149f2ca 	.word	0x7149f2ca
 80136fc:	3f97ffff 	.word	0x3f97ffff
 8013700:	3c8569d7 	.word	0x3c8569d7
 8013704:	3d4bda59 	.word	0x3d4bda59
 8013708:	bd15a221 	.word	0xbd15a221
 801370c:	be4ccccd 	.word	0xbe4ccccd
 8013710:	3d886b35 	.word	0x3d886b35
 8013714:	3dba2e6e 	.word	0x3dba2e6e
 8013718:	3e124925 	.word	0x3e124925
 801371c:	3eaaaaab 	.word	0x3eaaaaab
 8013720:	bd6ef16b 	.word	0xbd6ef16b
 8013724:	bd9d8795 	.word	0xbd9d8795
 8013728:	bde38e38 	.word	0xbde38e38
 801372c:	401bffff 	.word	0x401bffff
 8013730:	08013c90 	.word	0x08013c90
 8013734:	08013ca0 	.word	0x08013ca0

08013738 <fabsf>:
 8013738:	ee10 3a10 	vmov	r3, s0
 801373c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013740:	ee00 3a10 	vmov	s0, r3
 8013744:	4770      	bx	lr
	...

08013748 <nanf>:
 8013748:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013750 <nanf+0x8>
 801374c:	4770      	bx	lr
 801374e:	bf00      	nop
 8013750:	7fc00000 	.word	0x7fc00000

08013754 <_init>:
 8013754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013756:	bf00      	nop
 8013758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801375a:	bc08      	pop	{r3}
 801375c:	469e      	mov	lr, r3
 801375e:	4770      	bx	lr

08013760 <_fini>:
 8013760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013762:	bf00      	nop
 8013764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013766:	bc08      	pop	{r3}
 8013768:	469e      	mov	lr, r3
 801376a:	4770      	bx	lr
