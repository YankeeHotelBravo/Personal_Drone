
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08010b58  08010b58  00020b58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010fbc  08010fbc  00020fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010fc4  08010fc4  00020fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010fc8  08010fc8  00020fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  08010fcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000039c  240001ec  080111b8  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000588  080111b8  00030588  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000296d8  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f38  00000000  00000000  000598f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001728  00000000  00000000  0005d830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001650  00000000  00000000  0005ef58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000390c4  00000000  00000000  000605a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001da3a  00000000  00000000  0009966c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168172  00000000  00000000  000b70a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021f218  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000071d4  00000000  00000000  0021f26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010b40 	.word	0x08010b40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	08010b40 	.word	0x08010b40

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15f;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4603      	mov	r3, r0
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	460b      	mov	r3, r1
 800069c:	70bb      	strb	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d81b      	bhi.n	80006e0 <MPU9250_Init+0x58>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <MPU9250_Init+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d1 	.word	0x080006d1
 80006bc:	080006d9 	.word	0x080006d9
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <MPU9250_Init+0x1b0>)
 80006c2:	4a5e      	ldr	r2, [pc, #376]	; (800083c <MPU9250_Init+0x1b4>)
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e00c      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <MPU9250_Init+0x1b0>)
 80006ca:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <MPU9250_Init+0x1b8>)
 80006cc:	601a      	str	r2, [r3, #0]
		break;
 80006ce:	e008      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80006d0:	4b59      	ldr	r3, [pc, #356]	; (8000838 <MPU9250_Init+0x1b0>)
 80006d2:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <MPU9250_Init+0x1bc>)
 80006d4:	601a      	str	r2, [r3, #0]
		break;
 80006d6:	e004      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80006d8:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MPU9250_Init+0x1b0>)
 80006da:	4a5b      	ldr	r2, [pc, #364]	; (8000848 <MPU9250_Init+0x1c0>)
 80006dc:	601a      	str	r2, [r3, #0]
		break;
 80006de:	e000      	b.n	80006e2 <MPU9250_Init+0x5a>
	default:
		break;
 80006e0:	bf00      	nop
	}

	switch(Acc_FS)
 80006e2:	78bb      	ldrb	r3, [r7, #2]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81f      	bhi.n	8000728 <MPU9250_Init+0xa0>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MPU9250_Init+0x68>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	08000715 	.word	0x08000715
 80006fc:	0800071f 	.word	0x0800071f
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000700:	4b52      	ldr	r3, [pc, #328]	; (800084c <MPU9250_Init+0x1c4>)
 8000702:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000706:	601a      	str	r2, [r3, #0]
		break;
 8000708:	e00f      	b.n	800072a <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <MPU9250_Init+0x1c4>)
 800070c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000710:	601a      	str	r2, [r3, #0]
		break;
 8000712:	e00a      	b.n	800072a <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 8000714:	4b4d      	ldr	r3, [pc, #308]	; (800084c <MPU9250_Init+0x1c4>)
 8000716:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e005      	b.n	800072a <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <MPU9250_Init+0x1c4>)
 8000720:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000724:	601a      	str	r2, [r3, #0]
		break;
 8000726:	e000      	b.n	800072a <MPU9250_Init+0xa2>
	default:
		break;
 8000728:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MPU9250_Init+0x1c8>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2275      	movs	r2, #117	; 0x75
 800073a:	21d0      	movs	r1, #208	; 0xd0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f005 fc95 	bl	800606c <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 8000742:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MPU9250_Init+0x1c8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b71      	cmp	r3, #113	; 0x71
 8000748:	d171      	bne.n	800082e <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <MPU9250_Init+0x1cc>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <MPU9250_Init+0x1cc>)
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	2219      	movs	r2, #25
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f005 fb6e 	bl	8005e44 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f002 f963 	bl	8002a34 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 800076e:	4a39      	ldr	r2, [pc, #228]	; (8000854 <MPU9250_Init+0x1cc>)
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MPU9250_Init+0x1cc>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	221a      	movs	r2, #26
 8000784:	21d0      	movs	r1, #208	; 0xd0
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f005 fb5c 	bl	8005e44 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f002 f951 	bl	8002a34 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MPU9250_Init+0x1cc>)
 800079a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MPU9250_Init+0x1cc>)
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	221b      	movs	r2, #27
 80007ac:	21d0      	movs	r1, #208	; 0xd0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f005 fb48 	bl	8005e44 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007b4:	200a      	movs	r0, #10
 80007b6:	f002 f93d 	bl	8002a34 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80007ba:	78bb      	ldrb	r3, [r7, #2]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MPU9250_Init+0x1cc>)
 80007c2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MPU9250_Init+0x1cc>)
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	221c      	movs	r2, #28
 80007d4:	21d0      	movs	r1, #208	; 0xd0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f005 fb34 	bl	8005e44 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007dc:	200a      	movs	r0, #10
 80007de:	f002 f929 	bl	8002a34 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MPU9250_Init+0x1cc>)
 80007e4:	7c3b      	ldrb	r3, [r7, #16]
 80007e6:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MPU9250_Init+0x1cc>)
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	221d      	movs	r2, #29
 80007f8:	21d0      	movs	r1, #208	; 0xd0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f005 fb22 	bl	8005e44 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f002 f917 	bl	8002a34 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MPU9250_Init+0x1cc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MPU9250_Init+0x1cc>)
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	226b      	movs	r2, #107	; 0x6b
 800081c:	21d0      	movs	r1, #208	; 0xd0
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f005 fb10 	bl	8005e44 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f002 f905 	bl	8002a34 <HAL_Delay>

		return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <MPU9250_Init+0x1a8>
	}
	else
	{
		return 0;
 800082e:	2300      	movs	r3, #0
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000000 	.word	0x24000000
 800083c:	43030000 	.word	0x43030000
 8000840:	42830000 	.word	0x42830000
 8000844:	42033333 	.word	0x42033333
 8000848:	41833333 	.word	0x41833333
 800084c:	24000004 	.word	0x24000004
 8000850:	24000289 	.word	0x24000289
 8000854:	2400021d 	.word	0x2400021d

08000858 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af04      	add	r7, sp, #16
 800085e:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	226a      	movs	r2, #106	; 0x6a
 8000876:	21d0      	movs	r1, #208	; 0xd0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f005 fae3 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f002 f8d8 	bl	8002a34 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	2237      	movs	r2, #55	; 0x37
 800089a:	21d0      	movs	r1, #208	; 0xd0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f005 fad1 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f002 f8c6 	bl	8002a34 <HAL_Delay>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2400021d 	.word	0x2400021d

080008b4 <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af04      	add	r7, sp, #16
 80008ba:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MPU9250_Master+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MPU9250_Master+0xa0>)
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2237      	movs	r2, #55	; 0x37
 80008d2:	21d0      	movs	r1, #208	; 0xd0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f005 fab5 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f002 f8aa 	bl	8002a34 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MPU9250_Master+0xa0>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MPU9250_Master+0xa0>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	226a      	movs	r2, #106	; 0x6a
 80008f6:	21d0      	movs	r1, #208	; 0xd0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f005 faa3 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f002 f898 	bl	8002a34 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MPU9250_Master+0xa0>)
 8000906:	220d      	movs	r2, #13
 8000908:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MPU9250_Master+0xa0>)
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	2224      	movs	r2, #36	; 0x24
 800091a:	21d0      	movs	r1, #208	; 0xd0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f005 fa91 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000922:	200a      	movs	r0, #10
 8000924:	f002 f886 	bl	8002a34 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MPU9250_Master+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2301      	movs	r3, #1
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MPU9250_Master+0xa0>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	226b      	movs	r2, #107	; 0x6b
 800093e:	21d0      	movs	r1, #208	; 0xd0
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f005 fa7f 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f002 f874 	bl	8002a34 <HAL_Delay>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2400021d 	.word	0x2400021d

08000958 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *Datastruct)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000964:	2216      	movs	r2, #22
 8000966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	220a      	movs	r2, #10
 8000978:	2118      	movs	r1, #24
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f005 fa62 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f002 f857 	bl	8002a34 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2303      	movs	r3, #3
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	2210      	movs	r2, #16
 8000996:	2118      	movs	r1, #24
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f005 fb67 	bl	800606c <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800099e:	200a      	movs	r0, #10
 80009a0:	f002 f848 	bl	8002a34 <HAL_Delay>

	Datastruct->ASAX = MPU9250_rx_buf[0];
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Datastruct->ASAY = MPU9250_rx_buf[1];
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Datastruct->ASAZ = MPU9250_rx_buf[2];
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009ba:	789a      	ldrb	r2, [r3, #2]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2303      	movs	r3, #3
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2200      	movs	r2, #0
 80009d2:	2118      	movs	r1, #24
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f005 fb49 	bl	800606c <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f002 f82a 	bl	8002a34 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b48      	cmp	r3, #72	; 0x48
 80009e6:	d101      	bne.n	80009ec <MPU9250_AK8963_Setup+0x94>
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <MPU9250_AK8963_Setup+0x96>
	else return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2400021d 	.word	0x2400021d
 80009fc:	2400028c 	.word	0x2400028c
 8000a00:	24000288 	.word	0x24000288

08000a04 <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a0e:	228c      	movs	r2, #140	; 0x8c
 8000a10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2225      	movs	r2, #37	; 0x25
 8000a22:	21d0      	movs	r1, #208	; 0xd0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f005 fa0d 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f002 f802 	bl	8002a34 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000a36:	2364      	movs	r3, #100	; 0x64
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2226      	movs	r2, #38	; 0x26
 8000a46:	21d0      	movs	r1, #208	; 0xd0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f005 f9fb 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f001 fff0 	bl	8002a34 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a56:	2287      	movs	r2, #135	; 0x87
 8000a58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	2227      	movs	r2, #39	; 0x27
 8000a6a:	21d0      	movs	r1, #208	; 0xd0
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f005 f9e9 	bl	8005e44 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a72:	200a      	movs	r0, #10
 8000a74:	f001 ffde 	bl	8002a34 <HAL_Delay>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2400021d 	.word	0x2400021d

08000a84 <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MPU9250_Read_All+0x24>)
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2301      	movs	r3, #1
 8000a96:	223b      	movs	r2, #59	; 0x3b
 8000a98:	21d0      	movs	r1, #208	; 0xd0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f005 fc00 	bl	80062a0 <HAL_I2C_Mem_Read_DMA>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2400028c 	.word	0x2400028c
 8000aac:	00000000 	.word	0x00000000

08000ab0 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000ab8:	4bb7      	ldr	r3, [pc, #732]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	4bb5      	ldr	r3, [pc, #724]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000ace:	4bb2      	ldr	r3, [pc, #712]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	4bb0      	ldr	r3, [pc, #704]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad8:	78db      	ldrb	r3, [r3, #3]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000aec:	4baa      	ldr	r3, [pc, #680]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	4ba8      	ldr	r3, [pc, #672]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	425b      	negs	r3, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000b0a:	4ba3      	ldr	r3, [pc, #652]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b0c:	7a1b      	ldrb	r3, [r3, #8]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b14:	7a5b      	ldrb	r3, [r3, #9]
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000b20:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b22:	7a9b      	ldrb	r3, [r3, #10]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	4b9b      	ldr	r3, [pc, #620]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b2a:	7adb      	ldrb	r3, [r3, #11]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	425b      	negs	r3, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000b3e:	4b96      	ldr	r3, [pc, #600]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b40:	7b1b      	ldrb	r3, [r3, #12]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	4b94      	ldr	r3, [pc, #592]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b48:	7b5b      	ldrb	r3, [r3, #13]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	425b      	negs	r3, r3
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000b5c:	4b8e      	ldr	r3, [pc, #568]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b5e:	7bdb      	ldrb	r3, [r3, #15]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b66:	7b9b      	ldrb	r3, [r3, #14]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	425b      	negs	r3, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000b7a:	4b87      	ldr	r3, [pc, #540]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b7c:	7c5b      	ldrb	r3, [r3, #17]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	4b85      	ldr	r3, [pc, #532]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b84:	7c1b      	ldrb	r3, [r3, #16]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000b90:	4b81      	ldr	r3, [pc, #516]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b92:	7cdb      	ldrb	r3, [r3, #19]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	4b7f      	ldr	r3, [pc, #508]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b9a:	7c9b      	ldrb	r3, [r3, #18]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	861a      	strh	r2, [r3, #48]	; 0x30

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb4:	4b79      	ldr	r3, [pc, #484]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000bb6:	ed93 7a00 	vldr	s14, [r3]
 8000bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc2:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000be2:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000be4:	ed93 7a00 	vldr	s14, [r3]
 8000be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000bf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c10:	4b62      	ldr	r3, [pc, #392]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1e:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000c22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c3e:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c40:	ed93 7a00 	vldr	s14, [r3]
 8000c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c5c:	4b50      	ldr	r3, [pc, #320]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c7a:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c7c:	ed93 7a00 	vldr	s14, [r3]
 8000c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c98:	3b80      	subs	r3, #128	; 0x80
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da00      	bge.n	8000ca0 <MPU9250_Parsing+0x1f0>
 8000c9e:	33ff      	adds	r3, #255	; 0xff
 8000ca0:	121b      	asrs	r3, r3, #8
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	fb03 f302 	mul.w	r3, r3, r2
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000cce:	3b80      	subs	r3, #128	; 0x80
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da00      	bge.n	8000cd6 <MPU9250_Parsing+0x226>
 8000cd4:	33ff      	adds	r3, #255	; 0xff
 8000cd6:	121b      	asrs	r3, r3, #8
 8000cd8:	3301      	adds	r3, #1
 8000cda:	fb03 f302 	mul.w	r3, r3, r2
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000ce8:	ed93 7a00 	vldr	s14, [r3]
 8000cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d04:	3b80      	subs	r3, #128	; 0x80
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da00      	bge.n	8000d0c <MPU9250_Parsing+0x25c>
 8000d0a:	33ff      	adds	r3, #255	; 0xff
 8000d0c:	121b      	asrs	r3, r3, #8
 8000d0e:	3301      	adds	r3, #1
 8000d10:	fb03 f302 	mul.w	r3, r3, r2
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000d1e:	ed93 7a00 	vldr	s14, [r3]
 8000d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	ed93 7a08 	vldr	s14, [r3, #32]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000d74:	ee07 3a90 	vmov	s15, r3
 8000d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8000d8c:	e00c      	b.n	8000da8 <MPU9250_Parsing+0x2f8>
 8000d8e:	bf00      	nop
 8000d90:	a252dd11 	.word	0xa252dd11
 8000d94:	3f91df46 	.word	0x3f91df46
 8000d98:	2400028c 	.word	0x2400028c
 8000d9c:	24000000 	.word	0x24000000
 8000da0:	24000004 	.word	0x24000004
 8000da4:	24000008 	.word	0x24000008
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8000dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	DataStruct->My -= DataStruct->My_Offset;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000df8:	4ba1      	ldr	r3, [pc, #644]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	4b9f      	ldr	r3, [pc, #636]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000e0e:	4b9c      	ldr	r3, [pc, #624]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	4b9a      	ldr	r3, [pc, #616]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e18:	78db      	ldrb	r3, [r3, #3]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	425b      	negs	r3, r3
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000e2c:	4b94      	ldr	r3, [pc, #592]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b92      	ldr	r3, [pc, #584]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e36:	795b      	ldrb	r3, [r3, #5]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	425b      	negs	r3, r3
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000e4a:	4b8d      	ldr	r3, [pc, #564]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e4c:	7a1b      	ldrb	r3, [r3, #8]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	4b8b      	ldr	r3, [pc, #556]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e54:	7a5b      	ldrb	r3, [r3, #9]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000e60:	4b87      	ldr	r3, [pc, #540]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e62:	7a9b      	ldrb	r3, [r3, #10]
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	4b85      	ldr	r3, [pc, #532]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e6a:	7adb      	ldrb	r3, [r3, #11]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	425b      	negs	r3, r3
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000e7e:	4b80      	ldr	r3, [pc, #512]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b7e      	ldr	r3, [pc, #504]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e88:	7b5b      	ldrb	r3, [r3, #13]
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	425b      	negs	r3, r3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000e9c:	4b78      	ldr	r3, [pc, #480]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e9e:	7bdb      	ldrb	r3, [r3, #15]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	4b76      	ldr	r3, [pc, #472]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000ea6:	7b9b      	ldrb	r3, [r3, #14]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000eba:	4b71      	ldr	r3, [pc, #452]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000ebc:	7c5b      	ldrb	r3, [r3, #17]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	4b6f      	ldr	r3, [pc, #444]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000ec4:	7c1b      	ldrb	r3, [r3, #16]
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000ed0:	4b6b      	ldr	r3, [pc, #428]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000ed2:	7cdb      	ldrb	r3, [r3, #19]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	4b69      	ldr	r3, [pc, #420]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000eda:	7c9b      	ldrb	r3, [r3, #18]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	861a      	strh	r2, [r3, #48]	; 0x30

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ef4:	4b63      	ldr	r3, [pc, #396]	; (8001084 <MPU9250_Parsing_NoOffset+0x294>)
 8000ef6:	ed93 7a00 	vldr	s14, [r3]
 8000efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f02:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8001078 <MPU9250_Parsing_NoOffset+0x288>
 8000f06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f22:	4b58      	ldr	r3, [pc, #352]	; (8001084 <MPU9250_Parsing_NoOffset+0x294>)
 8000f24:	ed93 7a00 	vldr	s14, [r3]
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f30:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001078 <MPU9250_Parsing_NoOffset+0x288>
 8000f34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f50:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <MPU9250_Parsing_NoOffset+0x294>)
 8000f52:	ed93 7a00 	vldr	s14, [r3]
 8000f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f5e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001078 <MPU9250_Parsing_NoOffset+0x288>
 8000f62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f7e:	4b42      	ldr	r3, [pc, #264]	; (8001088 <MPU9250_Parsing_NoOffset+0x298>)
 8000f80:	ed93 7a00 	vldr	s14, [r3]
 8000f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <MPU9250_Parsing_NoOffset+0x298>)
 8000f9e:	ed93 7a00 	vldr	s14, [r3]
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MPU9250_Parsing_NoOffset+0x298>)
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000fd8:	3b80      	subs	r3, #128	; 0x80
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	da00      	bge.n	8000fe0 <MPU9250_Parsing_NoOffset+0x1f0>
 8000fde:	33ff      	adds	r3, #255	; 0xff
 8000fe0:	121b      	asrs	r3, r3, #8
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	fb03 f302 	mul.w	r3, r3, r2
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <MPU9250_Parsing_NoOffset+0x29c>)
 8000ff2:	ed93 7a00 	vldr	s14, [r3]
 8000ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800100e:	3b80      	subs	r3, #128	; 0x80
 8001010:	2b00      	cmp	r3, #0
 8001012:	da00      	bge.n	8001016 <MPU9250_Parsing_NoOffset+0x226>
 8001014:	33ff      	adds	r3, #255	; 0xff
 8001016:	121b      	asrs	r3, r3, #8
 8001018:	3301      	adds	r3, #1
 800101a:	fb03 f302 	mul.w	r3, r3, r2
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MPU9250_Parsing_NoOffset+0x29c>)
 8001028:	ed93 7a00 	vldr	s14, [r3]
 800102c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001044:	3b80      	subs	r3, #128	; 0x80
 8001046:	2b00      	cmp	r3, #0
 8001048:	da00      	bge.n	800104c <MPU9250_Parsing_NoOffset+0x25c>
 800104a:	33ff      	adds	r3, #255	; 0xff
 800104c:	121b      	asrs	r3, r3, #8
 800104e:	3301      	adds	r3, #1
 8001050:	fb03 f302 	mul.w	r3, r3, r2
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MPU9250_Parsing_NoOffset+0x29c>)
 800105e:	ed93 7a00 	vldr	s14, [r3]
 8001062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	a252dd11 	.word	0xa252dd11
 800107c:	3f91df46 	.word	0x3f91df46
 8001080:	2400028c 	.word	0x2400028c
 8001084:	24000000 	.word	0x24000000
 8001088:	24000004 	.word	0x24000004
 800108c:	24000008 	.word	0x24000008

08001090 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <_write+0x24>)
 80010a6:	f00b f869 	bl	800c17c <HAL_UART_Transmit_DMA>
}
 80010aa:	bf00      	nop
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	24000364 	.word	0x24000364

080010b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010be:	f001 fc27 	bl	8002910 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010c2:	f000 f9d7 	bl	8001474 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80010c6:	f000 fa53 	bl	8001570 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010ca:	f000 fbad 	bl	8001828 <MX_GPIO_Init>
	MX_DMA_Init();
 80010ce:	f000 fb83 	bl	80017d8 <MX_DMA_Init>
	MX_TIM7_Init();
 80010d2:	f000 faff 	bl	80016d4 <MX_TIM7_Init>
	MX_USART1_UART_Init();
 80010d6:	f000 fb33 	bl	8001740 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 80010da:	f000 fa65 	bl	80015a8 <MX_I2C1_Init>
	MX_SPI1_Init();
 80010de:	f000 faa3 	bl	8001628 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 80010e2:	48b7      	ldr	r0, [pc, #732]	; (80013c0 <main+0x308>)
 80010e4:	f00a fcbc 	bl	800ba60 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80010e8:	2201      	movs	r2, #1
 80010ea:	49b6      	ldr	r1, [pc, #728]	; (80013c4 <main+0x30c>)
 80010ec:	48b6      	ldr	r0, [pc, #728]	; (80013c8 <main+0x310>)
 80010ee:	f00a ffff 	bl	800c0f0 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 80010f2:	e009      	b.n	8001108 <main+0x50>
	{
		if(tim1_10ms_flag == 1)
 80010f4:	4bb5      	ldr	r3, [pc, #724]	; (80013cc <main+0x314>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d105      	bne.n	8001108 <main+0x50>
		{
			tim1_10ms_flag = 0;
 80010fc:	4bb3      	ldr	r3, [pc, #716]	; (80013cc <main+0x314>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8001102:	48b3      	ldr	r0, [pc, #716]	; (80013d0 <main+0x318>)
 8001104:	f00d fd18 	bl	800eb38 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8001108:	2303      	movs	r3, #3
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2303      	movs	r3, #3
 800110e:	2203      	movs	r2, #3
 8001110:	2103      	movs	r1, #3
 8001112:	48b0      	ldr	r0, [pc, #704]	; (80013d4 <main+0x31c>)
 8001114:	f7ff fab8 	bl	8000688 <MPU9250_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0ea      	beq.n	80010f4 <main+0x3c>
		}
	}
	MPU9250_Bypass(&hi2c1);
 800111e:	48ad      	ldr	r0, [pc, #692]	; (80013d4 <main+0x31c>)
 8001120:	f7ff fb9a 	bl	8000858 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8001124:	e009      	b.n	800113a <main+0x82>
	{
		if(tim1_10ms_flag == 1)
 8001126:	4ba9      	ldr	r3, [pc, #676]	; (80013cc <main+0x314>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d105      	bne.n	800113a <main+0x82>
		{
			tim1_10ms_flag = 0;
 800112e:	4ba7      	ldr	r3, [pc, #668]	; (80013cc <main+0x314>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8001134:	48a8      	ldr	r0, [pc, #672]	; (80013d8 <main+0x320>)
 8001136:	f00d fcff 	bl	800eb38 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 800113a:	49a8      	ldr	r1, [pc, #672]	; (80013dc <main+0x324>)
 800113c:	48a5      	ldr	r0, [pc, #660]	; (80013d4 <main+0x31c>)
 800113e:	f7ff fc0b 	bl	8000958 <MPU9250_AK8963_Setup>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0ee      	beq.n	8001126 <main+0x6e>
		}
	}
	MPU9250_Master(&hi2c1);
 8001148:	48a2      	ldr	r0, [pc, #648]	; (80013d4 <main+0x31c>)
 800114a:	f7ff fbb3 	bl	80008b4 <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 800114e:	48a1      	ldr	r0, [pc, #644]	; (80013d4 <main+0x31c>)
 8001150:	f7ff fc58 	bl	8000a04 <MPU9250_Slave0_Enable>


	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8001154:	f001 f8ac 	bl	80022b0 <W25qxx_Init>


	//Compass Calibration
	int SwC = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	603b      	str	r3, [r7, #0]
	if(SwC == 1500)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001162:	4293      	cmp	r3, r2
 8001164:	f040 80a3 	bne.w	80012ae <main+0x1f6>
	{
		for(int i =0;i<20;i++)
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	e00b      	b.n	8001186 <main+0xce>
		{
			MPU9250_Read_All(&hi2c1);
 800116e:	4899      	ldr	r0, [pc, #612]	; (80013d4 <main+0x31c>)
 8001170:	f7ff fc88 	bl	8000a84 <MPU9250_Read_All>
			HAL_Delay(20);
 8001174:	2014      	movs	r0, #20
 8001176:	f001 fc5d 	bl	8002a34 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 800117a:	4898      	ldr	r0, [pc, #608]	; (80013dc <main+0x324>)
 800117c:	f7ff fe38 	bl	8000df0 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<20;i++)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b13      	cmp	r3, #19
 800118a:	ddf0      	ble.n	800116e <main+0xb6>
		}
		MPU9250.Mx_Max = MPU9250.Mx_Raw;
 800118c:	4b93      	ldr	r3, [pc, #588]	; (80013dc <main+0x324>)
 800118e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119a:	4b90      	ldr	r3, [pc, #576]	; (80013dc <main+0x324>)
 800119c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		MPU9250.Mx_Min = MPU9250.Mx_Raw;
 80011a0:	4b8e      	ldr	r3, [pc, #568]	; (80013dc <main+0x324>)
 80011a2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ae:	4b8b      	ldr	r3, [pc, #556]	; (80013dc <main+0x324>)
 80011b0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		MPU9250.My_Max = MPU9250.My_Raw;
 80011b4:	4b89      	ldr	r3, [pc, #548]	; (80013dc <main+0x324>)
 80011b6:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	4b86      	ldr	r3, [pc, #536]	; (80013dc <main+0x324>)
 80011c4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		MPU9250.My_Min = MPU9250.My_Raw;
 80011c8:	4b84      	ldr	r3, [pc, #528]	; (80013dc <main+0x324>)
 80011ca:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	4b81      	ldr	r3, [pc, #516]	; (80013dc <main+0x324>)
 80011d8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		MPU9250.Mz_Max = MPU9250.Mz_Raw;
 80011dc:	4b7f      	ldr	r3, [pc, #508]	; (80013dc <main+0x324>)
 80011de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ea:	4b7c      	ldr	r3, [pc, #496]	; (80013dc <main+0x324>)
 80011ec:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		MPU9250.Mz_Min = MPU9250.Mz_Raw;
 80011f0:	4b7a      	ldr	r3, [pc, #488]	; (80013dc <main+0x324>)
 80011f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fe:	4b77      	ldr	r3, [pc, #476]	; (80013dc <main+0x324>)
 8001200:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

		while(SwC != 1000)
 8001204:	e00d      	b.n	8001222 <main+0x16a>
		{
			//			Is_iBus_Received();
			MPU9250_Read_All(&hi2c1);
 8001206:	4873      	ldr	r0, [pc, #460]	; (80013d4 <main+0x31c>)
 8001208:	f7ff fc3c 	bl	8000a84 <MPU9250_Read_All>
			HAL_Delay(10);
 800120c:	200a      	movs	r0, #10
 800120e:	f001 fc11 	bl	8002a34 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8001212:	4872      	ldr	r0, [pc, #456]	; (80013dc <main+0x324>)
 8001214:	f7ff fdec 	bl	8000df0 <MPU9250_Parsing_NoOffset>
			if(MPU9250.My > MPU9250.My) MPU9250.My_Max = MPU9250.My_Raw;
			if(MPU9250.My < MPU9250.My) MPU9250.My_Min = MPU9250.My_Raw;

			if(MPU9250.Mz > MPU9250.Mz) MPU9250.Mz_Max = MPU9250.Mz_Raw;
			if(MPU9250.Mz < MPU9250.Mz) MPU9250.Mz_Min = MPU9250.Mz_Raw;
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8001218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121c:	4870      	ldr	r0, [pc, #448]	; (80013e0 <main+0x328>)
 800121e:	f004 fd66 	bl	8005cee <HAL_GPIO_TogglePin>
		while(SwC != 1000)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001228:	d1ed      	bne.n	8001206 <main+0x14e>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 800122a:	4b6c      	ldr	r3, [pc, #432]	; (80013dc <main+0x324>)
 800122c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <main+0x324>)
 8001232:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001236:	ee37 7a27 	vadd.f32	s14, s14, s15
 800123a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800123e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001242:	4b66      	ldr	r3, [pc, #408]	; (80013dc <main+0x324>)
 8001244:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 8001248:	4b64      	ldr	r3, [pc, #400]	; (80013dc <main+0x324>)
 800124a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800124e:	4b63      	ldr	r3, [pc, #396]	; (80013dc <main+0x324>)
 8001250:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001254:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001258:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800125c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001260:	4b5e      	ldr	r3, [pc, #376]	; (80013dc <main+0x324>)
 8001262:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 8001266:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <main+0x324>)
 8001268:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800126c:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <main+0x324>)
 800126e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001272:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001276:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800127a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127e:	4b57      	ldr	r3, [pc, #348]	; (80013dc <main+0x324>)
 8001280:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8001284:	4a57      	ldr	r2, [pc, #348]	; (80013e4 <main+0x32c>)
 8001286:	4b55      	ldr	r3, [pc, #340]	; (80013dc <main+0x324>)
 8001288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800128a:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 800128c:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <main+0x330>)
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <main+0x324>)
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <main+0x334>)
 8001296:	4b51      	ldr	r3, [pc, #324]	; (80013dc <main+0x324>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 800129c:	2000      	movs	r0, #0
 800129e:	f001 f8d9 	bl	8002454 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 80012a2:	230c      	movs	r3, #12
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	484e      	ldr	r0, [pc, #312]	; (80013e4 <main+0x32c>)
 80012aa:	f001 f9c5 	bl	8002638 <W25qxx_WriteSector>
	}

	HAL_Delay(100);
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f001 fbc0 	bl	8002a34 <HAL_Delay>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 80012b4:	230c      	movs	r3, #12
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	484a      	ldr	r0, [pc, #296]	; (80013e4 <main+0x32c>)
 80012bc:	f001 fa9c 	bl	80027f8 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 80012c0:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <main+0x32c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a45      	ldr	r2, [pc, #276]	; (80013dc <main+0x324>)
 80012c6:	6513      	str	r3, [r2, #80]	; 0x50
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 80012c8:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <main+0x330>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a43      	ldr	r2, [pc, #268]	; (80013dc <main+0x324>)
 80012ce:	6553      	str	r3, [r2, #84]	; 0x54
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 80012d0:	4b46      	ldr	r3, [pc, #280]	; (80013ec <main+0x334>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a41      	ldr	r2, [pc, #260]	; (80013dc <main+0x324>)
 80012d6:	6593      	str	r3, [r2, #88]	; 0x58



	while (1)
	{
		if(uart1_rx_flag == 1)
 80012d8:	4b45      	ldr	r3, [pc, #276]	; (80013f0 <main+0x338>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d12d      	bne.n	800133c <main+0x284>
		{
			uart1_rx_flag = 0;
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <main+0x338>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

			switch(uart1_rx_data)
 80012e6:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <main+0x30c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	3b31      	subs	r3, #49	; 0x31
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	d821      	bhi.n	8001334 <main+0x27c>
 80012f0:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <main+0x240>)
 80012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f6:	bf00      	nop
 80012f8:	0800130d 	.word	0x0800130d
 80012fc:	08001315 	.word	0x08001315
 8001300:	0800131d 	.word	0x0800131d
 8001304:	08001325 	.word	0x08001325
 8001308:	0800132d 	.word	0x0800132d
			{
			case '1': print_mode = 1; break; //Roll, Pitch, Yaw
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <main+0x33c>)
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	e014      	b.n	800133e <main+0x286>
			case '2': print_mode = 2; break; //Alt Raw, Alt Filt
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <main+0x33c>)
 8001316:	2202      	movs	r2, #2
 8001318:	701a      	strb	r2, [r3, #0]
 800131a:	e010      	b.n	800133e <main+0x286>
			case '3': print_mode = 3; break; //Gyro
 800131c:	4b35      	ldr	r3, [pc, #212]	; (80013f4 <main+0x33c>)
 800131e:	2203      	movs	r2, #3
 8001320:	701a      	strb	r2, [r3, #0]
 8001322:	e00c      	b.n	800133e <main+0x286>
			case '4': print_mode = 4; break; //Accel
 8001324:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <main+0x33c>)
 8001326:	2204      	movs	r2, #4
 8001328:	701a      	strb	r2, [r3, #0]
 800132a:	e008      	b.n	800133e <main+0x286>
			case '5': print_mode = 5; break; //Mag
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <main+0x33c>)
 800132e:	2205      	movs	r2, #5
 8001330:	701a      	strb	r2, [r3, #0]
 8001332:	e004      	b.n	800133e <main+0x286>
			default: print_mode = 0; break; // Stop Printing
 8001334:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <main+0x33c>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e000      	b.n	800133e <main+0x286>
			}
		}
 800133c:	bf00      	nop

		if(tim1_2ms_flag == 1)
 800133e:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <main+0x340>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d108      	bne.n	8001358 <main+0x2a0>
		{
			tim1_2ms_flag = 0;
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <main+0x340>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 800134c:	4821      	ldr	r0, [pc, #132]	; (80013d4 <main+0x31c>)
 800134e:	f7ff fb99 	bl	8000a84 <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8001352:	4822      	ldr	r0, [pc, #136]	; (80013dc <main+0x324>)
 8001354:	f7ff fbac 	bl	8000ab0 <MPU9250_Parsing>
		}

		//Print According to Input
		if(tim1_10ms_flag == 1)
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <main+0x314>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	f040 8081 	bne.w	8001464 <main+0x3ac>
		{
			tim1_10ms_flag = 0;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <main+0x314>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 8001368:	4b22      	ldr	r3, [pc, #136]	; (80013f4 <main+0x33c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	2b04      	cmp	r3, #4
 8001370:	d87a      	bhi.n	8001468 <main+0x3b0>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <main+0x2c0>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	08001469 	.word	0x08001469
 800137c:	08001469 	.word	0x08001469
 8001380:	0800138d 	.word	0x0800138d
 8001384:	08001401 	.word	0x08001401
 8001388:	08001433 	.word	0x08001433
				break;
			case 2: //Alt Raw, Alt Filt
//				printf("%.2f \t %.2f \t \m", Alt, Alt_Filt);
				break;
			case 3: //Gyro
				printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz);
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <main+0x324>)
 800138e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001392:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <main+0x324>)
 8001398:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800139c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <main+0x324>)
 80013a2:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80013a6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80013aa:	ed8d 6b02 	vstr	d6, [sp, #8]
 80013ae:	ed8d 7b00 	vstr	d7, [sp]
 80013b2:	ec53 2b15 	vmov	r2, r3, d5
 80013b6:	4811      	ldr	r0, [pc, #68]	; (80013fc <main+0x344>)
 80013b8:	f00d fb38 	bl	800ea2c <iprintf>
				break;
 80013bc:	e055      	b.n	800146a <main+0x3b2>
 80013be:	bf00      	nop
 80013c0:	24000500 	.word	0x24000500
 80013c4:	2400020e 	.word	0x2400020e
 80013c8:	24000364 	.word	0x24000364
 80013cc:	2400020c 	.word	0x2400020c
 80013d0:	08010b58 	.word	0x08010b58
 80013d4:	240002a0 	.word	0x240002a0
 80013d8:	08010b6c 	.word	0x08010b6c
 80013dc:	24000220 	.word	0x24000220
 80013e0:	58020000 	.word	0x58020000
 80013e4:	240004f4 	.word	0x240004f4
 80013e8:	240004f8 	.word	0x240004f8
 80013ec:	240004fc 	.word	0x240004fc
 80013f0:	2400020d 	.word	0x2400020d
 80013f4:	24000208 	.word	0x24000208
 80013f8:	2400020b 	.word	0x2400020b
 80013fc:	08010b80 	.word	0x08010b80
			case 4: //Accel
				printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az);
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <main+0x3b4>)
 8001402:	edd3 7a02 	vldr	s15, [r3, #8]
 8001406:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <main+0x3b4>)
 800140c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001410:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <main+0x3b4>)
 8001416:	edd3 6a04 	vldr	s13, [r3, #16]
 800141a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800141e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001422:	ed8d 7b00 	vstr	d7, [sp]
 8001426:	ec53 2b15 	vmov	r2, r3, d5
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <main+0x3b8>)
 800142c:	f00d fafe 	bl	800ea2c <iprintf>
				break;
 8001430:	e01b      	b.n	800146a <main+0x3b2>
			case 5: //Mag
				printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <main+0x3b4>)
 8001434:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001438:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <main+0x3b4>)
 800143e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001442:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <main+0x3b4>)
 8001448:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800144c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001450:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001454:	ed8d 7b00 	vstr	d7, [sp]
 8001458:	ec53 2b15 	vmov	r2, r3, d5
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <main+0x3b8>)
 800145e:	f00d fae5 	bl	800ea2c <iprintf>
				break;
 8001462:	e002      	b.n	800146a <main+0x3b2>
			default: break;
			}
		}
 8001464:	bf00      	nop
 8001466:	e737      	b.n	80012d8 <main+0x220>
			default: break;
 8001468:	bf00      	nop
		if(uart1_rx_flag == 1)
 800146a:	e735      	b.n	80012d8 <main+0x220>
 800146c:	24000220 	.word	0x24000220
 8001470:	08010b80 	.word	0x08010b80

08001474 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09c      	sub	sp, #112	; 0x70
 8001478:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	224c      	movs	r2, #76	; 0x4c
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f00c fe88 	bl	800e198 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2220      	movs	r2, #32
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00c fe82 	bl	800e198 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001494:	2002      	movs	r0, #2
 8001496:	f006 fe99 	bl	80081cc <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <SystemClock_Config+0xf4>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a31      	ldr	r2, [pc, #196]	; (8001568 <SystemClock_Config+0xf4>)
 80014a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <SystemClock_Config+0xf4>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <SystemClock_Config+0xf8>)
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	4a2c      	ldr	r2, [pc, #176]	; (800156c <SystemClock_Config+0xf8>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <SystemClock_Config+0xf8>)
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014cc:	bf00      	nop
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <SystemClock_Config+0xf4>)
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014da:	d1f8      	bne.n	80014ce <SystemClock_Config+0x5a>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014dc:	2303      	movs	r3, #3
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ea:	2340      	movs	r3, #64	; 0x40
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	2302      	movs	r3, #2
 80014f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 80014f6:	2305      	movs	r3, #5
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 192;
 80014fa:	23c0      	movs	r3, #192	; 0xc0
 80014fc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001502:	2302      	movs	r3, #2
 8001504:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001506:	2302      	movs	r3, #2
 8001508:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800150a:	2308      	movs	r3, #8
 800150c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800150e:	2300      	movs	r3, #0
 8001510:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	4618      	mov	r0, r3
 800151c:	f006 fe90 	bl	8008240 <HAL_RCC_OscConfig>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <SystemClock_Config+0xb6>
	{
		Error_Handler();
 8001526:	f000 f9e7 	bl	80018f8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152a:	233f      	movs	r3, #63	; 0x3f
 800152c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	2303      	movs	r3, #3
 8001530:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001536:	2308      	movs	r3, #8
 8001538:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800153a:	2340      	movs	r3, #64	; 0x40
 800153c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800153e:	2340      	movs	r3, #64	; 0x40
 8001540:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001546:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001548:	2340      	movs	r3, #64	; 0x40
 800154a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2104      	movs	r1, #4
 8001550:	4618      	mov	r0, r3
 8001552:	f007 fa85 	bl	8008a60 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xec>
	{
		Error_Handler();
 800155c:	f000 f9cc 	bl	80018f8 <Error_Handler>
	}
}
 8001560:	bf00      	nop
 8001562:	3770      	adds	r7, #112	; 0x70
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	58024800 	.word	0x58024800
 800156c:	58000400 	.word	0x58000400

08001570 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0b0      	sub	sp, #192	; 0xc0
 8001574:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	22bc      	movs	r2, #188	; 0xbc
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f00c fe0b 	bl	800e198 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001582:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001586:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001588:	2300      	movs	r3, #0
 800158a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4618      	mov	r0, r3
 8001590:	f007 fdf2 	bl	8009178 <HAL_RCCEx_PeriphCLKConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <PeriphCommonClock_Config+0x2e>
	{
		Error_Handler();
 800159a:	f000 f9ad 	bl	80018f8 <Error_Handler>
	}
}
 800159e:	bf00      	nop
 80015a0:	37c0      	adds	r7, #192	; 0xc0
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_I2C1_Init+0x74>)
 80015ae:	4a1c      	ldr	r2, [pc, #112]	; (8001620 <MX_I2C1_Init+0x78>)
 80015b0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B03FDB;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_I2C1_Init+0x74>)
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <MX_I2C1_Init+0x7c>)
 80015b6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_I2C1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_I2C1_Init+0x74>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_I2C1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80015ca:	4b14      	ldr	r3, [pc, #80]	; (800161c <MX_I2C1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <MX_I2C1_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <MX_I2C1_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <MX_I2C1_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <MX_I2C1_Init+0x74>)
 80015e4:	f004 fb9e 	bl	8005d24 <HAL_I2C_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80015ee:	f000 f983 	bl	80018f8 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015f2:	2100      	movs	r1, #0
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <MX_I2C1_Init+0x74>)
 80015f6:	f006 fd51 	bl	800809c <HAL_I2CEx_ConfigAnalogFilter>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001600:	f000 f97a 	bl	80018f8 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001604:	2100      	movs	r1, #0
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_I2C1_Init+0x74>)
 8001608:	f006 fd93 	bl	8008132 <HAL_I2CEx_ConfigDigitalFilter>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001612:	f000 f971 	bl	80018f8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	240002a0 	.word	0x240002a0
 8001620:	40005400 	.word	0x40005400
 8001624:	00b03fdb 	.word	0x00b03fdb

08001628 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800162c:	4b27      	ldr	r3, [pc, #156]	; (80016cc <MX_SPI1_Init+0xa4>)
 800162e:	4a28      	ldr	r2, [pc, #160]	; (80016d0 <MX_SPI1_Init+0xa8>)
 8001630:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001634:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001638:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <MX_SPI1_Init+0xa4>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001642:	2207      	movs	r2, #7
 8001644:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <MX_SPI1_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001654:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001658:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_SPI1_Init+0xa4>)
 800165c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001660:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_SPI1_Init+0xa4>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001676:	2200      	movs	r2, #0
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_SPI1_Init+0xa4>)
 800167c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001680:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001684:	2200      	movs	r2, #0
 8001686:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_SPI1_Init+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001690:	2200      	movs	r2, #0
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
	hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <MX_SPI1_Init+0xa4>)
 8001696:	2200      	movs	r2, #0
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <MX_SPI1_Init+0xa4>)
 800169c:	2200      	movs	r2, #0
 800169e:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <MX_SPI1_Init+0xa4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_SPI1_Init+0xa4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <MX_SPI1_Init+0xa4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_SPI1_Init+0xa4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_SPI1_Init+0xa4>)
 80016ba:	f009 f8bf 	bl	800a83c <HAL_SPI_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_SPI1_Init+0xa0>
	{
		Error_Handler();
 80016c4:	f000 f918 	bl	80018f8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2400046c 	.word	0x2400046c
 80016d0:	40013000 	.word	0x40013000

080016d4 <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_TIM7_Init+0x64>)
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <MX_TIM7_Init+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 39999;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_TIM7_Init+0x64>)
 80016ec:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80016f0:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_TIM7_Init+0x64>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 5;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_TIM7_Init+0x64>)
 80016fa:	2205      	movs	r2, #5
 80016fc:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_TIM7_Init+0x64>)
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <MX_TIM7_Init+0x64>)
 8001706:	f00a f954 	bl	800b9b2 <HAL_TIM_Base_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM7_Init+0x40>
	{
		Error_Handler();
 8001710:	f000 f8f2 	bl	80018f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_TIM7_Init+0x64>)
 8001722:	f00a fbef 	bl	800bf04 <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM7_Init+0x5c>
	{
		Error_Handler();
 800172c:	f000 f8e4 	bl	80018f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	24000500 	.word	0x24000500
 800173c:	40001400 	.word	0x40001400

08001740 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 8001746:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <MX_USART1_UART_Init+0x94>)
 8001748:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001788:	4811      	ldr	r0, [pc, #68]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 800178a:	f00a fc61 	bl	800c050 <HAL_UART_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001794:	f000 f8b0 	bl	80018f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	480d      	ldr	r0, [pc, #52]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 800179c:	f00c fc07 	bl	800dfae <HAL_UARTEx_SetTxFifoThreshold>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 80017a6:	f000 f8a7 	bl	80018f8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4808      	ldr	r0, [pc, #32]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 80017ae:	f00c fc3c 	bl	800e02a <HAL_UARTEx_SetRxFifoThreshold>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 80017b8:	f000 f89e 	bl	80018f8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <MX_USART1_UART_Init+0x90>)
 80017be:	f00c fbbd 	bl	800df3c <HAL_UARTEx_DisableFifoMode>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 80017c8:	f000 f896 	bl	80018f8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	24000364 	.word	0x24000364
 80017d4:	40011000 	.word	0x40011000

080017d8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_DMA_Init+0x4c>)
 80017e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017e4:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <MX_DMA_Init+0x4c>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <MX_DMA_Init+0x4c>)
 80017f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	200b      	movs	r0, #11
 8001802:	f001 fa22 	bl	8002c4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001806:	200b      	movs	r0, #11
 8001808:	f001 fa39 	bl	8002c7e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	200c      	movs	r0, #12
 8001812:	f001 fa1a 	bl	8002c4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001816:	200c      	movs	r0, #12
 8001818:	f001 fa31 	bl	8002c7e <HAL_NVIC_EnableIRQ>

}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	58024400 	.word	0x58024400

08001828 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <MX_GPIO_Init+0xc4>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	4a29      	ldr	r2, [pc, #164]	; (80018ec <MX_GPIO_Init+0xc4>)
 8001846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184e:	4b27      	ldr	r3, [pc, #156]	; (80018ec <MX_GPIO_Init+0xc4>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <MX_GPIO_Init+0xc4>)
 800185e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <MX_GPIO_Init+0xc4>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <MX_GPIO_Init+0xc4>)
 800186e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <MX_GPIO_Init+0xc4>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <MX_GPIO_Init+0xc4>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_GPIO_Init+0xc4>)
 800188c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	603b      	str	r3, [r7, #0]
 8001896:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2102      	movs	r1, #2
 800189c:	4814      	ldr	r0, [pc, #80]	; (80018f0 <MX_GPIO_Init+0xc8>)
 800189e:	f004 fa0d 	bl	8005cbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2140      	movs	r1, #64	; 0x40
 80018a6:	4813      	ldr	r0, [pc, #76]	; (80018f4 <MX_GPIO_Init+0xcc>)
 80018a8:	f004 fa08 	bl	8005cbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018ac:	2302      	movs	r3, #2
 80018ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b0:	2301      	movs	r3, #1
 80018b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	4619      	mov	r1, r3
 80018c2:	480b      	ldr	r0, [pc, #44]	; (80018f0 <MX_GPIO_Init+0xc8>)
 80018c4:	f004 f84a 	bl	800595c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_GPIO_Init+0xcc>)
 80018e0:	f004 f83c 	bl	800595c <HAL_GPIO_Init>

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	58024400 	.word	0x58024400
 80018f0:	58020000 	.word	0x58020000
 80018f4:	58020400 	.word	0x58020400

080018f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001900:	e7fe      	b.n	8001900 <Error_Handler+0x8>
	...

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_MspInit+0x30>)
 800190c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001910:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_MspInit+0x30>)
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_MspInit+0x30>)
 800191c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	58024400 	.word	0x58024400

08001938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0b8      	sub	sp, #224	; 0xe0
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	22bc      	movs	r2, #188	; 0xbc
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f00c fc1d 	bl	800e198 <memset>
  if(hi2c->Instance==I2C1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a3f      	ldr	r2, [pc, #252]	; (8001a60 <HAL_I2C_MspInit+0x128>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d177      	bne.n	8001a58 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001968:	2308      	movs	r3, #8
 800196a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	4618      	mov	r0, r3
 8001978:	f007 fbfe 	bl	8009178 <HAL_RCCEx_PeriphCLKConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001982:	f7ff ffb9 	bl	80018f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_I2C_MspInit+0x12c>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198c:	4a35      	ldr	r2, [pc, #212]	; (8001a64 <HAL_I2C_MspInit+0x12c>)
 800198e:	f043 0302 	orr.w	r3, r3, #2
 8001992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001996:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <HAL_I2C_MspInit+0x12c>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80019a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ac:	2312      	movs	r3, #18
 80019ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019be:	2304      	movs	r3, #4
 80019c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019c8:	4619      	mov	r1, r3
 80019ca:	4827      	ldr	r0, [pc, #156]	; (8001a68 <HAL_I2C_MspInit+0x130>)
 80019cc:	f003 ffc6 	bl	800595c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_I2C_MspInit+0x12c>)
 80019d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019d6:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_I2C_MspInit+0x12c>)
 80019d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_I2C_MspInit+0x12c>)
 80019e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_I2C_MspInit+0x138>)
 80019f2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 80019f6:	2221      	movs	r2, #33	; 0x21
 80019f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001a2c:	480f      	ldr	r0, [pc, #60]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a2e:	f001 f941 	bl	8002cb4 <HAL_DMA_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8001a38:	f7ff ff5e 	bl	80018f8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_I2C_MspInit+0x134>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	201f      	movs	r0, #31
 8001a4e:	f001 f8fc 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a52:	201f      	movs	r0, #31
 8001a54:	f001 f913 	bl	8002c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a58:	bf00      	nop
 8001a5a:	37e0      	adds	r7, #224	; 0xe0
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40005400 	.word	0x40005400
 8001a64:	58024400 	.word	0x58024400
 8001a68:	58020400 	.word	0x58020400
 8001a6c:	240003f4 	.word	0x240003f4
 8001a70:	40020028 	.word	0x40020028

08001a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b0b8      	sub	sp, #224	; 0xe0
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	22bc      	movs	r2, #188	; 0xbc
 8001a92:	2100      	movs	r1, #0
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00c fb7f 	bl	800e198 <memset>
  if(hspi->Instance==SPI1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a25      	ldr	r2, [pc, #148]	; (8001b34 <HAL_SPI_MspInit+0xc0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d142      	bne.n	8001b2a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aae:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab0:	f107 0310 	add.w	r3, r7, #16
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f007 fb5f 	bl	8009178 <HAL_RCCEx_PeriphCLKConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001ac0:	f7ff ff1a 	bl	80018f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aca:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001acc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b00:	23e0      	movs	r3, #224	; 0xe0
 8001b02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <HAL_SPI_MspInit+0xc8>)
 8001b26:	f003 ff19 	bl	800595c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	37e0      	adds	r7, #224	; 0xe0
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40013000 	.word	0x40013000
 8001b38:	58024400 	.word	0x58024400
 8001b3c:	58020000 	.word	0x58020000

08001b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_TIM_Base_MspInit+0x48>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d116      	bne.n	8001b80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <HAL_TIM_Base_MspInit+0x4c>)
 8001b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b58:	4a0c      	ldr	r2, [pc, #48]	; (8001b8c <HAL_TIM_Base_MspInit+0x4c>)
 8001b5a:	f043 0320 	orr.w	r3, r3, #32
 8001b5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_TIM_Base_MspInit+0x4c>)
 8001b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2037      	movs	r0, #55	; 0x37
 8001b76:	f001 f868 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b7a:	2037      	movs	r0, #55	; 0x37
 8001b7c:	f001 f87f 	bl	8002c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40001400 	.word	0x40001400
 8001b8c:	58024400 	.word	0x58024400

08001b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b0b8      	sub	sp, #224	; 0xe0
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	22bc      	movs	r2, #188	; 0xbc
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f00c faf1 	bl	800e198 <memset>
  if(huart->Instance==USART1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a3f      	ldr	r2, [pc, #252]	; (8001cb8 <HAL_UART_MspInit+0x128>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d177      	bne.n	8001cb0 <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bca:	f107 0310 	add.w	r3, r7, #16
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f007 fad2 	bl	8009178 <HAL_RCCEx_PeriphCLKConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bda:	f7ff fe8d 	bl	80018f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <HAL_UART_MspInit+0x12c>)
 8001be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001be4:	4a35      	ldr	r2, [pc, #212]	; (8001cbc <HAL_UART_MspInit+0x12c>)
 8001be6:	f043 0310 	orr.w	r3, r3, #16
 8001bea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_UART_MspInit+0x12c>)
 8001bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_UART_MspInit+0x12c>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	4a2e      	ldr	r2, [pc, #184]	; (8001cbc <HAL_UART_MspInit+0x12c>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_UART_MspInit+0x12c>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c1e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c34:	2304      	movs	r3, #4
 8001c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c3e:	4619      	mov	r1, r3
 8001c40:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <HAL_UART_MspInit+0x130>)
 8001c42:	f003 fe8b 	bl	800595c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c48:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_UART_MspInit+0x138>)
 8001c4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c4e:	222a      	movs	r2, #42	; 0x2a
 8001c50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c58:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c64:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6c:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001c72:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c78:	4b12      	ldr	r3, [pc, #72]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001c84:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c86:	f001 f815 	bl	8002cb4 <HAL_DMA_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8001c90:	f7ff fe32 	bl	80018f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c98:	679a      	str	r2, [r3, #120]	; 0x78
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_UART_MspInit+0x134>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2025      	movs	r0, #37	; 0x25
 8001ca6:	f000 ffd0 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001caa:	2025      	movs	r0, #37	; 0x25
 8001cac:	f000 ffe7 	bl	8002c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	37e0      	adds	r7, #224	; 0xe0
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40011000 	.word	0x40011000
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020400 	.word	0x58020400
 8001cc4:	240002ec 	.word	0x240002ec
 8001cc8:	40020010 	.word	0x40020010

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <NMI_Handler+0x4>

08001cd2 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001cdc:	e7fe      	b.n	8001cdc <MemManage_Handler+0x4>

08001cde <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cea <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001d18:	f000 fe6c 	bl	80029f4 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <DMA1_Stream0_IRQHandler>:

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <DMA1_Stream0_IRQHandler+0x10>)
 8001d26:	f002 faed 	bl	8004304 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	240002ec 	.word	0x240002ec

08001d34 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <DMA1_Stream1_IRQHandler+0x10>)
 8001d3a:	f002 fae3 	bl	8004304 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	240003f4 	.word	0x240003f4

08001d48 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_EV_IRQn 0 */

	/* USER CODE END I2C1_EV_IRQn 0 */
	HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <I2C1_EV_IRQHandler+0x10>)
 8001d4e:	f004 fb9f 	bl	8006490 <HAL_I2C_EV_IRQHandler>
	/* USER CODE BEGIN I2C1_EV_IRQn 1 */

	/* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	240002a0 	.word	0x240002a0

08001d5c <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <USART1_IRQHandler+0x10>)
 8001d62:	f00a fa8b 	bl	800c27c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	24000364 	.word	0x24000364

08001d70 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <TIM7_IRQHandler+0x10>)
 8001d76:	f009 fee3 	bl	800bb40 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */

	/* USER CODE END TIM7_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	24000500 	.word	0x24000500

08001d84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d11f      	bne.n	8001dd6 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		tim1_2ms_count++;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001da0:	701a      	strb	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d105      	bne.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001dc0:	701a      	strb	r2, [r3, #0]
		if(tim1_10ms_count == 10)
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b0a      	cmp	r3, #10
 8001dc8:	d105      	bne.n	8001dd6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_10ms_count = 0;
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
			tim1_10ms_flag = 1;
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40001400 	.word	0x40001400
 8001de8:	24000209 	.word	0x24000209
 8001dec:	2400020b 	.word	0x2400020b
 8001df0:	2400020a 	.word	0x2400020a
 8001df4:	2400020c 	.word	0x2400020c

08001df8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_UART_RxCpltCallback+0x2c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d107      	bne.n	8001e1a <HAL_UART_RxCpltCallback+0x22>
	{
		uart1_rx_flag = 1;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_UART_RxCpltCallback+0x30>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8001e10:	2201      	movs	r2, #1
 8001e12:	4906      	ldr	r1, [pc, #24]	; (8001e2c <HAL_UART_RxCpltCallback+0x34>)
 8001e14:	4806      	ldr	r0, [pc, #24]	; (8001e30 <HAL_UART_RxCpltCallback+0x38>)
 8001e16:	f00a f96b 	bl	800c0f0 <HAL_UART_Receive_IT>
	}
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40011000 	.word	0x40011000
 8001e28:	2400020d 	.word	0x2400020d
 8001e2c:	2400020e 	.word	0x2400020e
 8001e30:	24000364 	.word	0x24000364

08001e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
	return 1;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <_kill>:

int _kill(int pid, int sig)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e4e:	f00c f979 	bl	800e144 <__errno>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2216      	movs	r2, #22
 8001e56:	601a      	str	r2, [r3, #0]
	return -1;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_exit>:

void _exit (int status)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff ffe7 	bl	8001e44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e76:	e7fe      	b.n	8001e76 <_exit+0x12>

08001e78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e00a      	b.n	8001ea0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e8a:	f3af 8000 	nop.w
 8001e8e:	4601      	mov	r1, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	60ba      	str	r2, [r7, #8]
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf0      	blt.n	8001e8a <_read+0x12>
	}

return len;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eda:	605a      	str	r2, [r3, #4]
	return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_isatty>:

int _isatty(int file)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	; (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f4c:	f00c f8fa 	bl	800e144 <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <_sbrk+0x64>)
 8001f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	24080000 	.word	0x24080000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	24000210 	.word	0x24000210
 8001f84:	24000588 	.word	0x24000588

08001f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <SystemInit+0xec>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f92:	4a38      	ldr	r2, [pc, #224]	; (8002074 <SystemInit+0xec>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <SystemInit+0xf0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	2b06      	cmp	r3, #6
 8001fa6:	d807      	bhi.n	8001fb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fa8:	4b33      	ldr	r3, [pc, #204]	; (8002078 <SystemInit+0xf0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 030f 	bic.w	r3, r3, #15
 8001fb0:	4a31      	ldr	r2, [pc, #196]	; (8002078 <SystemInit+0xf0>)
 8001fb2:	f043 0307 	orr.w	r3, r3, #7
 8001fb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001fb8:	4b30      	ldr	r3, [pc, #192]	; (800207c <SystemInit+0xf4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	; (800207c <SystemInit+0xf4>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <SystemInit+0xf4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001fca:	4b2c      	ldr	r3, [pc, #176]	; (800207c <SystemInit+0xf4>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	492b      	ldr	r1, [pc, #172]	; (800207c <SystemInit+0xf4>)
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <SystemInit+0xf8>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fd6:	4b28      	ldr	r3, [pc, #160]	; (8002078 <SystemInit+0xf0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fe2:	4b25      	ldr	r3, [pc, #148]	; (8002078 <SystemInit+0xf0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 030f 	bic.w	r3, r3, #15
 8001fea:	4a23      	ldr	r2, [pc, #140]	; (8002078 <SystemInit+0xf0>)
 8001fec:	f043 0307 	orr.w	r3, r3, #7
 8001ff0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <SystemInit+0xf4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <SystemInit+0xf4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	; (800207c <SystemInit+0xf4>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <SystemInit+0xf4>)
 8002006:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <SystemInit+0xfc>)
 8002008:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <SystemInit+0xf4>)
 800200c:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <SystemInit+0x100>)
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <SystemInit+0xf4>)
 8002012:	4a1e      	ldr	r2, [pc, #120]	; (800208c <SystemInit+0x104>)
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <SystemInit+0xf4>)
 8002018:	2200      	movs	r2, #0
 800201a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <SystemInit+0xf4>)
 800201e:	4a1b      	ldr	r2, [pc, #108]	; (800208c <SystemInit+0x104>)
 8002020:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002022:	4b16      	ldr	r3, [pc, #88]	; (800207c <SystemInit+0xf4>)
 8002024:	2200      	movs	r2, #0
 8002026:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002028:	4b14      	ldr	r3, [pc, #80]	; (800207c <SystemInit+0xf4>)
 800202a:	4a18      	ldr	r2, [pc, #96]	; (800208c <SystemInit+0x104>)
 800202c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <SystemInit+0xf4>)
 8002030:	2200      	movs	r2, #0
 8002032:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <SystemInit+0xf4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a10      	ldr	r2, [pc, #64]	; (800207c <SystemInit+0xf4>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002040:	4b0e      	ldr	r3, [pc, #56]	; (800207c <SystemInit+0xf4>)
 8002042:	2200      	movs	r2, #0
 8002044:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <SystemInit+0x108>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <SystemInit+0x10c>)
 800204c:	4013      	ands	r3, r2
 800204e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002052:	d202      	bcs.n	800205a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <SystemInit+0x110>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <SystemInit+0x114>)
 800205c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002060:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SystemInit+0xec>)
 8002064:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002068:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00
 8002078:	52002000 	.word	0x52002000
 800207c:	58024400 	.word	0x58024400
 8002080:	eaf6ed7f 	.word	0xeaf6ed7f
 8002084:	02020200 	.word	0x02020200
 8002088:	01ff0000 	.word	0x01ff0000
 800208c:	01010280 	.word	0x01010280
 8002090:	5c001000 	.word	0x5c001000
 8002094:	ffff0000 	.word	0xffff0000
 8002098:	51008108 	.word	0x51008108
 800209c:	52004000 	.word	0x52004000

080020a0 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80020aa:	f107 020f 	add.w	r2, r7, #15
 80020ae:	1df9      	adds	r1, r7, #7
 80020b0:	2364      	movs	r3, #100	; 0x64
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2301      	movs	r3, #1
 80020b6:	4804      	ldr	r0, [pc, #16]	; (80020c8 <W25qxx_Spi+0x28>)
 80020b8:	f009 f8a6 	bl	800b208 <HAL_SPI_TransmitReceive>
	return ret;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2400046c 	.word	0x2400046c

080020cc <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2140      	movs	r1, #64	; 0x40
 80020e6:	4813      	ldr	r0, [pc, #76]	; (8002134 <W25qxx_ReadID+0x68>)
 80020e8:	f003 fde8 	bl	8005cbc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80020ec:	209f      	movs	r0, #159	; 0x9f
 80020ee:	f7ff ffd7 	bl	80020a0 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020f2:	20a5      	movs	r0, #165	; 0xa5
 80020f4:	f7ff ffd4 	bl	80020a0 <W25qxx_Spi>
 80020f8:	4603      	mov	r3, r0
 80020fa:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020fc:	20a5      	movs	r0, #165	; 0xa5
 80020fe:	f7ff ffcf 	bl	80020a0 <W25qxx_Spi>
 8002102:	4603      	mov	r3, r0
 8002104:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002106:	20a5      	movs	r0, #165	; 0xa5
 8002108:	f7ff ffca 	bl	80020a0 <W25qxx_Spi>
 800210c:	4603      	mov	r3, r0
 800210e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	2140      	movs	r1, #64	; 0x40
 8002114:	4807      	ldr	r0, [pc, #28]	; (8002134 <W25qxx_ReadID+0x68>)
 8002116:	f003 fdd1 	bl	8005cbc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	041a      	lsls	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	4313      	orrs	r3, r2
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
	return Temp;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	58020400 	.word	0x58020400

08002138 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	2140      	movs	r1, #64	; 0x40
 8002142:	4816      	ldr	r0, [pc, #88]	; (800219c <W25qxx_ReadUniqID+0x64>)
 8002144:	f003 fdba 	bl	8005cbc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8002148:	204b      	movs	r0, #75	; 0x4b
 800214a:	f7ff ffa9 	bl	80020a0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	e005      	b.n	8002160 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002154:	20a5      	movs	r0, #165	; 0xa5
 8002156:	f7ff ffa3 	bl	80020a0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	3301      	adds	r3, #1
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d9f6      	bls.n	8002154 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	71bb      	strb	r3, [r7, #6]
 800216a:	e00b      	b.n	8002184 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800216c:	79bc      	ldrb	r4, [r7, #6]
 800216e:	20a5      	movs	r0, #165	; 0xa5
 8002170:	f7ff ff96 	bl	80020a0 <W25qxx_Spi>
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <W25qxx_ReadUniqID+0x68>)
 800217a:	4423      	add	r3, r4
 800217c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	3301      	adds	r3, #1
 8002182:	71bb      	strb	r3, [r7, #6]
 8002184:	79bb      	ldrb	r3, [r7, #6]
 8002186:	2b07      	cmp	r3, #7
 8002188:	d9f0      	bls.n	800216c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800218a:	2201      	movs	r2, #1
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	4803      	ldr	r0, [pc, #12]	; (800219c <W25qxx_ReadUniqID+0x64>)
 8002190:	f003 fd94 	bl	8005cbc <HAL_GPIO_WritePin>
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bd90      	pop	{r4, r7, pc}
 800219c:	58020400 	.word	0x58020400
 80021a0:	2400054c 	.word	0x2400054c

080021a4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2140      	movs	r1, #64	; 0x40
 80021ac:	4807      	ldr	r0, [pc, #28]	; (80021cc <W25qxx_WriteEnable+0x28>)
 80021ae:	f003 fd85 	bl	8005cbc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80021b2:	2006      	movs	r0, #6
 80021b4:	f7ff ff74 	bl	80020a0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80021b8:	2201      	movs	r2, #1
 80021ba:	2140      	movs	r1, #64	; 0x40
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <W25qxx_WriteEnable+0x28>)
 80021be:	f003 fd7d 	bl	8005cbc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80021c2:	2001      	movs	r0, #1
 80021c4:	f000 fc36 	bl	8002a34 <HAL_Delay>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	58020400 	.word	0x58020400

080021d0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	2140      	movs	r1, #64	; 0x40
 80021e2:	481c      	ldr	r0, [pc, #112]	; (8002254 <W25qxx_ReadStatusRegister+0x84>)
 80021e4:	f003 fd6a 	bl	8005cbc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10c      	bne.n	8002208 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80021ee:	2005      	movs	r0, #5
 80021f0:	f7ff ff56 	bl	80020a0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80021f4:	20a5      	movs	r0, #165	; 0xa5
 80021f6:	f7ff ff53 	bl	80020a0 <W25qxx_Spi>
 80021fa:	4603      	mov	r3, r0
 80021fc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80021fe:	4a16      	ldr	r2, [pc, #88]	; (8002258 <W25qxx_ReadStatusRegister+0x88>)
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002206:	e01b      	b.n	8002240 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d10c      	bne.n	8002228 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800220e:	2035      	movs	r0, #53	; 0x35
 8002210:	f7ff ff46 	bl	80020a0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002214:	20a5      	movs	r0, #165	; 0xa5
 8002216:	f7ff ff43 	bl	80020a0 <W25qxx_Spi>
 800221a:	4603      	mov	r3, r0
 800221c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <W25qxx_ReadStatusRegister+0x88>)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002226:	e00b      	b.n	8002240 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002228:	2015      	movs	r0, #21
 800222a:	f7ff ff39 	bl	80020a0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800222e:	20a5      	movs	r0, #165	; 0xa5
 8002230:	f7ff ff36 	bl	80020a0 <W25qxx_Spi>
 8002234:	4603      	mov	r3, r0
 8002236:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002238:	4a07      	ldr	r2, [pc, #28]	; (8002258 <W25qxx_ReadStatusRegister+0x88>)
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002240:	2201      	movs	r2, #1
 8002242:	2140      	movs	r1, #64	; 0x40
 8002244:	4803      	ldr	r0, [pc, #12]	; (8002254 <W25qxx_ReadStatusRegister+0x84>)
 8002246:	f003 fd39 	bl	8005cbc <HAL_GPIO_WritePin>
	return status;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58020400 	.word	0x58020400
 8002258:	2400054c 	.word	0x2400054c

0800225c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002260:	2001      	movs	r0, #1
 8002262:	f000 fbe7 	bl	8002a34 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	2140      	movs	r1, #64	; 0x40
 800226a:	480f      	ldr	r0, [pc, #60]	; (80022a8 <W25qxx_WaitForWriteEnd+0x4c>)
 800226c:	f003 fd26 	bl	8005cbc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8002270:	2005      	movs	r0, #5
 8002272:	f7ff ff15 	bl	80020a0 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002276:	20a5      	movs	r0, #165	; 0xa5
 8002278:	f7ff ff12 	bl	80020a0 <W25qxx_Spi>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <W25qxx_WaitForWriteEnd+0x50>)
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8002286:	2001      	movs	r0, #1
 8002288:	f000 fbd4 	bl	8002a34 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800228c:	4b07      	ldr	r3, [pc, #28]	; (80022ac <W25qxx_WaitForWriteEnd+0x50>)
 800228e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ed      	bne.n	8002276 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	2140      	movs	r1, #64	; 0x40
 800229e:	4802      	ldr	r0, [pc, #8]	; (80022a8 <W25qxx_WaitForWriteEnd+0x4c>)
 80022a0:	f003 fd0c 	bl	8005cbc <HAL_GPIO_WritePin>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	58020400 	.word	0x58020400
 80022ac:	2400054c 	.word	0x2400054c

080022b0 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80022b6:	4b65      	ldr	r3, [pc, #404]	; (800244c <W25qxx_Init+0x19c>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80022be:	e002      	b.n	80022c6 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f000 fbb7 	bl	8002a34 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80022c6:	f000 fba9 	bl	8002a1c <HAL_GetTick>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b63      	cmp	r3, #99	; 0x63
 80022ce:	d9f7      	bls.n	80022c0 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	2140      	movs	r1, #64	; 0x40
 80022d4:	485e      	ldr	r0, [pc, #376]	; (8002450 <W25qxx_Init+0x1a0>)
 80022d6:	f003 fcf1 	bl	8005cbc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80022da:	2064      	movs	r0, #100	; 0x64
 80022dc:	f000 fbaa 	bl	8002a34 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80022e0:	f7ff fef4 	bl	80020cc <W25qxx_ReadID>
 80022e4:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	3b11      	subs	r3, #17
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d86c      	bhi.n	80023ca <W25qxx_Init+0x11a>
 80022f0:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <W25qxx_Init+0x48>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	080023bd 	.word	0x080023bd
 80022fc:	080023af 	.word	0x080023af
 8002300:	080023a1 	.word	0x080023a1
 8002304:	08002393 	.word	0x08002393
 8002308:	08002385 	.word	0x08002385
 800230c:	08002377 	.word	0x08002377
 8002310:	08002369 	.word	0x08002369
 8002314:	08002359 	.word	0x08002359
 8002318:	08002349 	.word	0x08002349
 800231c:	080023cb 	.word	0x080023cb
 8002320:	080023cb 	.word	0x080023cb
 8002324:	080023cb 	.word	0x080023cb
 8002328:	080023cb 	.word	0x080023cb
 800232c:	080023cb 	.word	0x080023cb
 8002330:	080023cb 	.word	0x080023cb
 8002334:	08002339 	.word	0x08002339
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002338:	4b44      	ldr	r3, [pc, #272]	; (800244c <W25qxx_Init+0x19c>)
 800233a:	220a      	movs	r2, #10
 800233c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800233e:	4b43      	ldr	r3, [pc, #268]	; (800244c <W25qxx_Init+0x19c>)
 8002340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002344:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8002346:	e046      	b.n	80023d6 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002348:	4b40      	ldr	r3, [pc, #256]	; (800244c <W25qxx_Init+0x19c>)
 800234a:	2209      	movs	r2, #9
 800234c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800234e:	4b3f      	ldr	r3, [pc, #252]	; (800244c <W25qxx_Init+0x19c>)
 8002350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002354:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8002356:	e03e      	b.n	80023d6 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002358:	4b3c      	ldr	r3, [pc, #240]	; (800244c <W25qxx_Init+0x19c>)
 800235a:	2208      	movs	r2, #8
 800235c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <W25qxx_Init+0x19c>)
 8002360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002364:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8002366:	e036      	b.n	80023d6 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002368:	4b38      	ldr	r3, [pc, #224]	; (800244c <W25qxx_Init+0x19c>)
 800236a:	2207      	movs	r2, #7
 800236c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <W25qxx_Init+0x19c>)
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002374:	e02f      	b.n	80023d6 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <W25qxx_Init+0x19c>)
 8002378:	2206      	movs	r2, #6
 800237a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800237c:	4b33      	ldr	r3, [pc, #204]	; (800244c <W25qxx_Init+0x19c>)
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002382:	e028      	b.n	80023d6 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <W25qxx_Init+0x19c>)
 8002386:	2205      	movs	r2, #5
 8002388:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800238a:	4b30      	ldr	r3, [pc, #192]	; (800244c <W25qxx_Init+0x19c>)
 800238c:	2220      	movs	r2, #32
 800238e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002390:	e021      	b.n	80023d6 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <W25qxx_Init+0x19c>)
 8002394:	2204      	movs	r2, #4
 8002396:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <W25qxx_Init+0x19c>)
 800239a:	2210      	movs	r2, #16
 800239c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800239e:	e01a      	b.n	80023d6 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <W25qxx_Init+0x19c>)
 80023a2:	2203      	movs	r2, #3
 80023a4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <W25qxx_Init+0x19c>)
 80023a8:	2208      	movs	r2, #8
 80023aa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80023ac:	e013      	b.n	80023d6 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80023ae:	4b27      	ldr	r3, [pc, #156]	; (800244c <W25qxx_Init+0x19c>)
 80023b0:	2202      	movs	r2, #2
 80023b2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <W25qxx_Init+0x19c>)
 80023b6:	2204      	movs	r2, #4
 80023b8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80023ba:	e00c      	b.n	80023d6 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <W25qxx_Init+0x19c>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <W25qxx_Init+0x19c>)
 80023c4:	2202      	movs	r2, #2
 80023c6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80023c8:	e005      	b.n	80023d6 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <W25qxx_Init+0x19c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e036      	b.n	8002444 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <W25qxx_Init+0x19c>)
 80023d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023dc:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <W25qxx_Init+0x19c>)
 80023e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023e4:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80023e6:	4b19      	ldr	r3, [pc, #100]	; (800244c <W25qxx_Init+0x19c>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	4a17      	ldr	r2, [pc, #92]	; (800244c <W25qxx_Init+0x19c>)
 80023ee:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <W25qxx_Init+0x19c>)
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	4a15      	ldr	r2, [pc, #84]	; (800244c <W25qxx_Init+0x19c>)
 80023f6:	6912      	ldr	r2, [r2, #16]
 80023f8:	fb02 f303 	mul.w	r3, r2, r3
 80023fc:	4a13      	ldr	r2, [pc, #76]	; (800244c <W25qxx_Init+0x19c>)
 80023fe:	8952      	ldrh	r2, [r2, #10]
 8002400:	fbb3 f3f2 	udiv	r3, r3, r2
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <W25qxx_Init+0x19c>)
 8002406:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <W25qxx_Init+0x19c>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	4a0f      	ldr	r2, [pc, #60]	; (800244c <W25qxx_Init+0x19c>)
 8002410:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <W25qxx_Init+0x19c>)
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	4a0d      	ldr	r2, [pc, #52]	; (800244c <W25qxx_Init+0x19c>)
 8002418:	6912      	ldr	r2, [r2, #16]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	0a9b      	lsrs	r3, r3, #10
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <W25qxx_Init+0x19c>)
 8002422:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002424:	f7ff fe88 	bl	8002138 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002428:	2001      	movs	r0, #1
 800242a:	f7ff fed1 	bl	80021d0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800242e:	2002      	movs	r0, #2
 8002430:	f7ff fece 	bl	80021d0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002434:	2003      	movs	r0, #3
 8002436:	f7ff fecb 	bl	80021d0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <W25qxx_Init+0x19c>)
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	2400054c 	.word	0x2400054c
 8002450:	58020400 	.word	0x58020400

08002454 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 800245c:	e002      	b.n	8002464 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 800245e:	2001      	movs	r0, #1
 8002460:	f000 fae8 	bl	8002a34 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <W25qxx_EraseSector+0xa8>)
 8002466:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800246a:	2b01      	cmp	r3, #1
 800246c:	d0f7      	beq.n	800245e <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 800246e:	4b23      	ldr	r3, [pc, #140]	; (80024fc <W25qxx_EraseSector+0xa8>)
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8002476:	f7ff fef1 	bl	800225c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <W25qxx_EraseSector+0xa8>)
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	fb02 f303 	mul.w	r3, r2, r3
 8002484:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8002486:	f7ff fe8d 	bl	80021a4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800248a:	2200      	movs	r2, #0
 800248c:	2140      	movs	r1, #64	; 0x40
 800248e:	481c      	ldr	r0, [pc, #112]	; (8002500 <W25qxx_EraseSector+0xac>)
 8002490:	f003 fc14 	bl	8005cbc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <W25qxx_EraseSector+0xa8>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b08      	cmp	r3, #8
 800249a:	d909      	bls.n	80024b0 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 800249c:	2021      	movs	r0, #33	; 0x21
 800249e:	f7ff fdff 	bl	80020a0 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0e1b      	lsrs	r3, r3, #24
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fdf9 	bl	80020a0 <W25qxx_Spi>
 80024ae:	e002      	b.n	80024b6 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80024b0:	2020      	movs	r0, #32
 80024b2:	f7ff fdf5 	bl	80020a0 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fdef 	bl	80020a0 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fde9 	bl	80020a0 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fde4 	bl	80020a0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80024d8:	2201      	movs	r2, #1
 80024da:	2140      	movs	r1, #64	; 0x40
 80024dc:	4808      	ldr	r0, [pc, #32]	; (8002500 <W25qxx_EraseSector+0xac>)
 80024de:	f003 fbed 	bl	8005cbc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80024e2:	f7ff febb 	bl	800225c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f000 faa4 	bl	8002a34 <HAL_Delay>
	w25qxx.Lock = 0;
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <W25qxx_EraseSector+0xa8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2400054c 	.word	0x2400054c
 8002500:	58020400 	.word	0x58020400

08002504 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <W25qxx_SectorToPage+0x28>)
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	4a05      	ldr	r2, [pc, #20]	; (800252c <W25qxx_SectorToPage+0x28>)
 8002518:	8952      	ldrh	r2, [r2, #10]
 800251a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800251e:	4618      	mov	r0, r3
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	2400054c 	.word	0x2400054c

08002530 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800253e:	e002      	b.n	8002546 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002540:	2001      	movs	r0, #1
 8002542:	f000 fa77 	bl	8002a34 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002546:	4b39      	ldr	r3, [pc, #228]	; (800262c <W25qxx_WritePage+0xfc>)
 8002548:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800254c:	2b01      	cmp	r3, #1
 800254e:	d0f7      	beq.n	8002540 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002550:	4b36      	ldr	r3, [pc, #216]	; (800262c <W25qxx_WritePage+0xfc>)
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	4a33      	ldr	r2, [pc, #204]	; (800262c <W25qxx_WritePage+0xfc>)
 8002560:	8952      	ldrh	r2, [r2, #10]
 8002562:	4293      	cmp	r3, r2
 8002564:	d802      	bhi.n	800256c <W25qxx_WritePage+0x3c>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800256c:	4b2f      	ldr	r3, [pc, #188]	; (800262c <W25qxx_WritePage+0xfc>)
 800256e:	895b      	ldrh	r3, [r3, #10]
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	4413      	add	r3, r2
 800257e:	4a2b      	ldr	r2, [pc, #172]	; (800262c <W25qxx_WritePage+0xfc>)
 8002580:	8952      	ldrh	r2, [r2, #10]
 8002582:	4293      	cmp	r3, r2
 8002584:	d905      	bls.n	8002592 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002586:	4b29      	ldr	r3, [pc, #164]	; (800262c <W25qxx_WritePage+0xfc>)
 8002588:	895b      	ldrh	r3, [r3, #10]
 800258a:	461a      	mov	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002592:	f7ff fe63 	bl	800225c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8002596:	f7ff fe05 	bl	80021a4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	2140      	movs	r1, #64	; 0x40
 800259e:	4824      	ldr	r0, [pc, #144]	; (8002630 <W25qxx_WritePage+0x100>)
 80025a0:	f003 fb8c 	bl	8005cbc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80025a4:	4b21      	ldr	r3, [pc, #132]	; (800262c <W25qxx_WritePage+0xfc>)
 80025a6:	895b      	ldrh	r3, [r3, #10]
 80025a8:	461a      	mov	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	fb03 f302 	mul.w	r3, r3, r2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <W25qxx_WritePage+0xfc>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d909      	bls.n	80025d2 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80025be:	2012      	movs	r0, #18
 80025c0:	f7ff fd6e 	bl	80020a0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	0e1b      	lsrs	r3, r3, #24
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fd68 	bl	80020a0 <W25qxx_Spi>
 80025d0:	e002      	b.n	80025d8 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80025d2:	2002      	movs	r0, #2
 80025d4:	f7ff fd64 	bl	80020a0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fd5e 	bl	80020a0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	0a1b      	lsrs	r3, r3, #8
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fd58 	bl	80020a0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fd53 	bl	80020a0 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	2364      	movs	r3, #100	; 0x64
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	480c      	ldr	r0, [pc, #48]	; (8002634 <W25qxx_WritePage+0x104>)
 8002604:	f008 fa1c 	bl	800aa40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002608:	2201      	movs	r2, #1
 800260a:	2140      	movs	r1, #64	; 0x40
 800260c:	4808      	ldr	r0, [pc, #32]	; (8002630 <W25qxx_WritePage+0x100>)
 800260e:	f003 fb55 	bl	8005cbc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002612:	f7ff fe23 	bl	800225c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8002616:	2001      	movs	r0, #1
 8002618:	f000 fa0c 	bl	8002a34 <HAL_Delay>
	w25qxx.Lock = 0;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <W25qxx_WritePage+0xfc>)
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2400054c 	.word	0x2400054c
 8002630:	58020400 	.word	0x58020400
 8002634:	2400046c 	.word	0x2400046c

08002638 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8002646:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <W25qxx_WriteSector+0xc0>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d802      	bhi.n	8002656 <W25qxx_WriteSector+0x1e>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8002656:	4b28      	ldr	r3, [pc, #160]	; (80026f8 <W25qxx_WriteSector+0xc0>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800265c:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <W25qxx_WriteSector+0xc0>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d243      	bcs.n	80026ee <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	441a      	add	r2, r3
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <W25qxx_WriteSector+0xc0>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	429a      	cmp	r2, r3
 8002672:	d905      	bls.n	8002680 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8002674:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <W25qxx_WriteSector+0xc0>)
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e001      	b.n	8002684 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8002684:	68b8      	ldr	r0, [r7, #8]
 8002686:	f7ff ff3d 	bl	8002504 <W25qxx_SectorToPage>
 800268a:	4602      	mov	r2, r0
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <W25qxx_WriteSector+0xc0>)
 800268e:	895b      	ldrh	r3, [r3, #10]
 8002690:	4619      	mov	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	fbb3 f3f1 	udiv	r3, r3, r1
 8002698:	4413      	add	r3, r2
 800269a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <W25qxx_WriteSector+0xc0>)
 800269e:	895b      	ldrh	r3, [r3, #10]
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80026a8:	fb02 f201 	mul.w	r2, r2, r1
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	69f9      	ldr	r1, [r7, #28]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff ff3a 	bl	8002530 <W25qxx_WritePage>
		StartPage++;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3301      	adds	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <W25qxx_WriteSector+0xc0>)
 80026c4:	895b      	ldrh	r3, [r3, #10]
 80026c6:	461a      	mov	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	1a9a      	subs	r2, r3, r2
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <W25qxx_WriteSector+0xc0>)
 80026d4:	895b      	ldrh	r3, [r3, #10]
 80026d6:	461a      	mov	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	dce1      	bgt.n	80026b0 <W25qxx_WriteSector+0x78>
 80026ec:	e000      	b.n	80026f0 <W25qxx_WriteSector+0xb8>
		return;
 80026ee:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2400054c 	.word	0x2400054c

080026fc <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800270a:	e002      	b.n	8002712 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800270c:	2001      	movs	r0, #1
 800270e:	f000 f991 	bl	8002a34 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002712:	4b36      	ldr	r3, [pc, #216]	; (80027ec <W25qxx_ReadPage+0xf0>)
 8002714:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002718:	2b01      	cmp	r3, #1
 800271a:	d0f7      	beq.n	800270c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800271c:	4b33      	ldr	r3, [pc, #204]	; (80027ec <W25qxx_ReadPage+0xf0>)
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <W25qxx_ReadPage+0xf0>)
 8002726:	895b      	ldrh	r3, [r3, #10]
 8002728:	461a      	mov	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4293      	cmp	r3, r2
 800272e:	d802      	bhi.n	8002736 <W25qxx_ReadPage+0x3a>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d102      	bne.n	800273c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <W25qxx_ReadPage+0xf0>)
 8002738:	895b      	ldrh	r3, [r3, #10]
 800273a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	4413      	add	r3, r2
 8002742:	4a2a      	ldr	r2, [pc, #168]	; (80027ec <W25qxx_ReadPage+0xf0>)
 8002744:	8952      	ldrh	r2, [r2, #10]
 8002746:	4293      	cmp	r3, r2
 8002748:	d905      	bls.n	8002756 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <W25qxx_ReadPage+0xf0>)
 800274c:	895b      	ldrh	r3, [r3, #10]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8002756:	4b25      	ldr	r3, [pc, #148]	; (80027ec <W25qxx_ReadPage+0xf0>)
 8002758:	895b      	ldrh	r3, [r3, #10]
 800275a:	461a      	mov	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	fb03 f302 	mul.w	r3, r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	2140      	movs	r1, #64	; 0x40
 800276c:	4820      	ldr	r0, [pc, #128]	; (80027f0 <W25qxx_ReadPage+0xf4>)
 800276e:	f003 faa5 	bl	8005cbc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <W25qxx_ReadPage+0xf0>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d909      	bls.n	800278e <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800277a:	200c      	movs	r0, #12
 800277c:	f7ff fc90 	bl	80020a0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0e1b      	lsrs	r3, r3, #24
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fc8a 	bl	80020a0 <W25qxx_Spi>
 800278c:	e002      	b.n	8002794 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800278e:	200b      	movs	r0, #11
 8002790:	f7ff fc86 	bl	80020a0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	0c1b      	lsrs	r3, r3, #16
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fc80 	bl	80020a0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	0a1b      	lsrs	r3, r3, #8
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fc7a 	bl	80020a0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fc75 	bl	80020a0 <W25qxx_Spi>
	W25qxx_Spi(0);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff fc72 	bl	80020a0 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	2364      	movs	r3, #100	; 0x64
 80027c2:	68f9      	ldr	r1, [r7, #12]
 80027c4:	480b      	ldr	r0, [pc, #44]	; (80027f4 <W25qxx_ReadPage+0xf8>)
 80027c6:	f008 fb2d 	bl	800ae24 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80027ca:	2201      	movs	r2, #1
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	4808      	ldr	r0, [pc, #32]	; (80027f0 <W25qxx_ReadPage+0xf4>)
 80027d0:	f003 fa74 	bl	8005cbc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80027d4:	2001      	movs	r0, #1
 80027d6:	f000 f92d 	bl	8002a34 <HAL_Delay>
	w25qxx.Lock = 0;
 80027da:	4b04      	ldr	r3, [pc, #16]	; (80027ec <W25qxx_ReadPage+0xf0>)
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	2400054c 	.word	0x2400054c
 80027f0:	58020400 	.word	0x58020400
 80027f4:	2400046c 	.word	0x2400046c

080027f8 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8002806:	4b2c      	ldr	r3, [pc, #176]	; (80028b8 <W25qxx_ReadSector+0xc0>)
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d802      	bhi.n	8002816 <W25qxx_ReadSector+0x1e>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d102      	bne.n	800281c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <W25qxx_ReadSector+0xc0>)
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800281c:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <W25qxx_ReadSector+0xc0>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	429a      	cmp	r2, r3
 8002824:	d243      	bcs.n	80028ae <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	441a      	add	r2, r3
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <W25qxx_ReadSector+0xc0>)
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d905      	bls.n	8002840 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <W25qxx_ReadSector+0xc0>)
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	e001      	b.n	8002844 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8002844:	68b8      	ldr	r0, [r7, #8]
 8002846:	f7ff fe5d 	bl	8002504 <W25qxx_SectorToPage>
 800284a:	4602      	mov	r2, r0
 800284c:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <W25qxx_ReadSector+0xc0>)
 800284e:	895b      	ldrh	r3, [r3, #10]
 8002850:	4619      	mov	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	fbb3 f3f1 	udiv	r3, r3, r1
 8002858:	4413      	add	r3, r2
 800285a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <W25qxx_ReadSector+0xc0>)
 800285e:	895b      	ldrh	r3, [r3, #10]
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	fbb3 f1f2 	udiv	r1, r3, r2
 8002868:	fb02 f201 	mul.w	r2, r2, r1
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	69f9      	ldr	r1, [r7, #28]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f7ff ff40 	bl	80026fc <W25qxx_ReadPage>
		StartPage++;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	3301      	adds	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <W25qxx_ReadSector+0xc0>)
 8002884:	895b      	ldrh	r3, [r3, #10]
 8002886:	461a      	mov	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	1a9a      	subs	r2, r3, r2
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	4413      	add	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <W25qxx_ReadSector+0xc0>)
 8002894:	895b      	ldrh	r3, [r3, #10]
 8002896:	461a      	mov	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	dce1      	bgt.n	8002870 <W25qxx_ReadSector+0x78>
 80028ac:	e000      	b.n	80028b0 <W25qxx_ReadSector+0xb8>
		return;
 80028ae:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2400054c 	.word	0x2400054c

080028bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80028bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80028c0:	f7ff fb62 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c4:	480c      	ldr	r0, [pc, #48]	; (80028f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028c6:	490d      	ldr	r1, [pc, #52]	; (80028fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028cc:	e002      	b.n	80028d4 <LoopCopyDataInit>

080028ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028d2:	3304      	adds	r3, #4

080028d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d8:	d3f9      	bcc.n	80028ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028dc:	4c0a      	ldr	r4, [pc, #40]	; (8002908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028e0:	e001      	b.n	80028e6 <LoopFillZerobss>

080028e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e4:	3204      	adds	r2, #4

080028e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e8:	d3fb      	bcc.n	80028e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ea:	f00b fc31 	bl	800e150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ee:	f7fe fbe3 	bl	80010b8 <main>
  bx  lr
 80028f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028fc:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8002900:	08010fcc 	.word	0x08010fcc
  ldr r2, =_sbss
 8002904:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8002908:	24000588 	.word	0x24000588

0800290c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800290c:	e7fe      	b.n	800290c <ADC3_IRQHandler>
	...

08002910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002916:	2003      	movs	r0, #3
 8002918:	f000 f98c 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800291c:	f006 fa56 	bl	8008dcc <HAL_RCC_GetSysClockFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_Init+0x68>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	4913      	ldr	r1, [pc, #76]	; (800297c <HAL_Init+0x6c>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
 8002938:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800293a:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <HAL_Init+0x68>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_Init+0x6c>)
 8002944:	5cd3      	ldrb	r3, [r2, r3]
 8002946:	f003 031f 	and.w	r3, r3, #31
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <HAL_Init+0x70>)
 8002952:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002954:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <HAL_Init+0x74>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800295a:	200f      	movs	r0, #15
 800295c:	f000 f814 	bl	8002988 <HAL_InitTick>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e002      	b.n	8002970 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800296a:	f7fe ffcb 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	58024400 	.word	0x58024400
 800297c:	08010b98 	.word	0x08010b98
 8002980:	24000010 	.word	0x24000010
 8002984:	2400000c 	.word	0x2400000c

08002988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002990:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_InitTick+0x60>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e021      	b.n	80029e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <HAL_InitTick+0x64>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_InitTick+0x60>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f971 	bl	8002c9a <HAL_SYSTICK_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e00e      	b.n	80029e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b0f      	cmp	r3, #15
 80029c6:	d80a      	bhi.n	80029de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c8:	2200      	movs	r2, #0
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f000 f93b 	bl	8002c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d4:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <HAL_InitTick+0x68>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	24000018 	.word	0x24000018
 80029ec:	2400000c 	.word	0x2400000c
 80029f0:	24000014 	.word	0x24000014

080029f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_IncTick+0x20>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_IncTick+0x24>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_IncTick+0x24>)
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	24000018 	.word	0x24000018
 8002a18:	24000574 	.word	0x24000574

08002a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_GetTick+0x14>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	24000574 	.word	0x24000574

08002a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a3c:	f7ff ffee 	bl	8002a1c <HAL_GetTick>
 8002a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d005      	beq.n	8002a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_Delay+0x44>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a5a:	bf00      	nop
 8002a5c:	f7ff ffde 	bl	8002a1c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d8f7      	bhi.n	8002a5c <HAL_Delay+0x28>
  {
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	24000018 	.word	0x24000018

08002a7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_GetREVID+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0c1b      	lsrs	r3, r3, #16
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	5c001000 	.word	0x5c001000

08002a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00
 8002ad8:	05fa0000 	.word	0x05fa0000

08002adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 0307 	and.w	r3, r3, #7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db0b      	blt.n	8002b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4907      	ldr	r1, [pc, #28]	; (8002b30 <__NVIC_EnableIRQ+0x38>)
 8002b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	; (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	bf28      	it	cs
 8002ba6:	2304      	movcs	r3, #4
 8002ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d902      	bls.n	8002bb8 <NVIC_EncodePriority+0x30>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	e000      	b.n	8002bba <NVIC_EncodePriority+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	4313      	orrs	r3, r2
         );
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	; 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c00:	d301      	bcc.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00f      	b.n	8002c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <SysTick_Config+0x40>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	210f      	movs	r1, #15
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
 8002c14:	f7ff ff8e 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <SysTick_Config+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <SysTick_Config+0x40>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff29 	bl	8002a94 <__NVIC_SetPriorityGrouping>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c58:	f7ff ff40 	bl	8002adc <__NVIC_GetPriorityGrouping>
 8002c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	f7ff ff90 	bl	8002b88 <NVIC_EncodePriority>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff5f 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c76:	bf00      	nop
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff33 	bl	8002af8 <__NVIC_EnableIRQ>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff ffa4 	bl	8002bf0 <SysTick_Config>
 8002ca8:	4603      	mov	r3, r0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff feae 	bl	8002a1c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e316      	b.n	80032fa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a66      	ldr	r2, [pc, #408]	; (8002e6c <HAL_DMA_Init+0x1b8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d04a      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a65      	ldr	r2, [pc, #404]	; (8002e70 <HAL_DMA_Init+0x1bc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d045      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a63      	ldr	r2, [pc, #396]	; (8002e74 <HAL_DMA_Init+0x1c0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d040      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a62      	ldr	r2, [pc, #392]	; (8002e78 <HAL_DMA_Init+0x1c4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d03b      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a60      	ldr	r2, [pc, #384]	; (8002e7c <HAL_DMA_Init+0x1c8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d036      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a5f      	ldr	r2, [pc, #380]	; (8002e80 <HAL_DMA_Init+0x1cc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d031      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a5d      	ldr	r2, [pc, #372]	; (8002e84 <HAL_DMA_Init+0x1d0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d02c      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a5c      	ldr	r2, [pc, #368]	; (8002e88 <HAL_DMA_Init+0x1d4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d027      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5a      	ldr	r2, [pc, #360]	; (8002e8c <HAL_DMA_Init+0x1d8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d022      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a59      	ldr	r2, [pc, #356]	; (8002e90 <HAL_DMA_Init+0x1dc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d01d      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a57      	ldr	r2, [pc, #348]	; (8002e94 <HAL_DMA_Init+0x1e0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d018      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a56      	ldr	r2, [pc, #344]	; (8002e98 <HAL_DMA_Init+0x1e4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a54      	ldr	r2, [pc, #336]	; (8002e9c <HAL_DMA_Init+0x1e8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a53      	ldr	r2, [pc, #332]	; (8002ea0 <HAL_DMA_Init+0x1ec>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d009      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a51      	ldr	r2, [pc, #324]	; (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a50      	ldr	r2, [pc, #320]	; (8002ea8 <HAL_DMA_Init+0x1f4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_DMA_Init+0xbc>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_DMA_Init+0xbe>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 813b 	beq.w	8002fee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a37      	ldr	r2, [pc, #220]	; (8002e6c <HAL_DMA_Init+0x1b8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d04a      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a36      	ldr	r2, [pc, #216]	; (8002e70 <HAL_DMA_Init+0x1bc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d045      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a34      	ldr	r2, [pc, #208]	; (8002e74 <HAL_DMA_Init+0x1c0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d040      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a33      	ldr	r2, [pc, #204]	; (8002e78 <HAL_DMA_Init+0x1c4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d03b      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a31      	ldr	r2, [pc, #196]	; (8002e7c <HAL_DMA_Init+0x1c8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d036      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a30      	ldr	r2, [pc, #192]	; (8002e80 <HAL_DMA_Init+0x1cc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d031      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2e      	ldr	r2, [pc, #184]	; (8002e84 <HAL_DMA_Init+0x1d0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02c      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	; (8002e88 <HAL_DMA_Init+0x1d4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d027      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	; (8002e8c <HAL_DMA_Init+0x1d8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2a      	ldr	r2, [pc, #168]	; (8002e90 <HAL_DMA_Init+0x1dc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01d      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a28      	ldr	r2, [pc, #160]	; (8002e94 <HAL_DMA_Init+0x1e0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_DMA_Init+0x1e4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <HAL_DMA_Init+0x1e8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a24      	ldr	r2, [pc, #144]	; (8002ea0 <HAL_DMA_Init+0x1ec>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a22      	ldr	r2, [pc, #136]	; (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <HAL_DMA_Init+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d108      	bne.n	8002e3a <HAL_DMA_Init+0x186>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e007      	b.n	8002e4a <HAL_DMA_Init+0x196>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e4a:	e02f      	b.n	8002eac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4c:	f7ff fde6 	bl	8002a1c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d928      	bls.n	8002eac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2203      	movs	r2, #3
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e246      	b.n	80032fa <HAL_DMA_Init+0x646>
 8002e6c:	40020010 	.word	0x40020010
 8002e70:	40020028 	.word	0x40020028
 8002e74:	40020040 	.word	0x40020040
 8002e78:	40020058 	.word	0x40020058
 8002e7c:	40020070 	.word	0x40020070
 8002e80:	40020088 	.word	0x40020088
 8002e84:	400200a0 	.word	0x400200a0
 8002e88:	400200b8 	.word	0x400200b8
 8002e8c:	40020410 	.word	0x40020410
 8002e90:	40020428 	.word	0x40020428
 8002e94:	40020440 	.word	0x40020440
 8002e98:	40020458 	.word	0x40020458
 8002e9c:	40020470 	.word	0x40020470
 8002ea0:	40020488 	.word	0x40020488
 8002ea4:	400204a0 	.word	0x400204a0
 8002ea8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1c8      	bne.n	8002e4c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4b83      	ldr	r3, [pc, #524]	; (80030d4 <HAL_DMA_Init+0x420>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ed2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ede:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d107      	bne.n	8002f10 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f10:	4b71      	ldr	r3, [pc, #452]	; (80030d8 <HAL_DMA_Init+0x424>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b71      	ldr	r3, [pc, #452]	; (80030dc <HAL_DMA_Init+0x428>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1c:	d328      	bcc.n	8002f70 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b28      	cmp	r3, #40	; 0x28
 8002f24:	d903      	bls.n	8002f2e <HAL_DMA_Init+0x27a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f2c:	d917      	bls.n	8002f5e <HAL_DMA_Init+0x2aa>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b3e      	cmp	r3, #62	; 0x3e
 8002f34:	d903      	bls.n	8002f3e <HAL_DMA_Init+0x28a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b42      	cmp	r3, #66	; 0x42
 8002f3c:	d90f      	bls.n	8002f5e <HAL_DMA_Init+0x2aa>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b46      	cmp	r3, #70	; 0x46
 8002f44:	d903      	bls.n	8002f4e <HAL_DMA_Init+0x29a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b48      	cmp	r3, #72	; 0x48
 8002f4c:	d907      	bls.n	8002f5e <HAL_DMA_Init+0x2aa>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b4e      	cmp	r3, #78	; 0x4e
 8002f54:	d905      	bls.n	8002f62 <HAL_DMA_Init+0x2ae>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b52      	cmp	r3, #82	; 0x52
 8002f5c:	d801      	bhi.n	8002f62 <HAL_DMA_Init+0x2ae>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_DMA_Init+0x2b0>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f6e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0307 	bic.w	r3, r3, #7
 8002f86:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d117      	bne.n	8002fca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f002 fb4b 	bl	8005648 <DMA_CheckFifoParam>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2240      	movs	r2, #64	; 0x40
 8002fbc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e197      	b.n	80032fa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f002 fa86 	bl	80054e4 <DMA_CalcBaseAndBitshift>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	223f      	movs	r2, #63	; 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	e0cd      	b.n	800318a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <HAL_DMA_Init+0x42c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d022      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a39      	ldr	r2, [pc, #228]	; (80030e4 <HAL_DMA_Init+0x430>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01d      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a38      	ldr	r2, [pc, #224]	; (80030e8 <HAL_DMA_Init+0x434>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d018      	beq.n	800303e <HAL_DMA_Init+0x38a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a36      	ldr	r2, [pc, #216]	; (80030ec <HAL_DMA_Init+0x438>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a35      	ldr	r2, [pc, #212]	; (80030f0 <HAL_DMA_Init+0x43c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00e      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a33      	ldr	r2, [pc, #204]	; (80030f4 <HAL_DMA_Init+0x440>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d009      	beq.n	800303e <HAL_DMA_Init+0x38a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a32      	ldr	r2, [pc, #200]	; (80030f8 <HAL_DMA_Init+0x444>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a30      	ldr	r2, [pc, #192]	; (80030fc <HAL_DMA_Init+0x448>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_DMA_Init+0x38e>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_DMA_Init+0x390>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8097 	beq.w	8003178 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a24      	ldr	r2, [pc, #144]	; (80030e0 <HAL_DMA_Init+0x42c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d021      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <HAL_DMA_Init+0x430>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01c      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <HAL_DMA_Init+0x434>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d017      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <HAL_DMA_Init+0x438>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d012      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1e      	ldr	r2, [pc, #120]	; (80030f0 <HAL_DMA_Init+0x43c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00d      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1c      	ldr	r2, [pc, #112]	; (80030f4 <HAL_DMA_Init+0x440>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d008      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <HAL_DMA_Init+0x444>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_DMA_Init+0x448>)
 8003096:	4293      	cmp	r3, r2
 8003098:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <HAL_DMA_Init+0x44c>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b40      	cmp	r3, #64	; 0x40
 80030c0:	d020      	beq.n	8003104 <HAL_DMA_Init+0x450>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b80      	cmp	r3, #128	; 0x80
 80030c8:	d102      	bne.n	80030d0 <HAL_DMA_Init+0x41c>
 80030ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030ce:	e01a      	b.n	8003106 <HAL_DMA_Init+0x452>
 80030d0:	2300      	movs	r3, #0
 80030d2:	e018      	b.n	8003106 <HAL_DMA_Init+0x452>
 80030d4:	fe10803f 	.word	0xfe10803f
 80030d8:	5c001000 	.word	0x5c001000
 80030dc:	ffff0000 	.word	0xffff0000
 80030e0:	58025408 	.word	0x58025408
 80030e4:	5802541c 	.word	0x5802541c
 80030e8:	58025430 	.word	0x58025430
 80030ec:	58025444 	.word	0x58025444
 80030f0:	58025458 	.word	0x58025458
 80030f4:	5802546c 	.word	0x5802546c
 80030f8:	58025480 	.word	0x58025480
 80030fc:	58025494 	.word	0x58025494
 8003100:	fffe000f 	.word	0xfffe000f
 8003104:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68d2      	ldr	r2, [r2, #12]
 800310a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800310c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800311c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003124:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800312c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003134:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	4b6e      	ldr	r3, [pc, #440]	; (8003304 <HAL_DMA_Init+0x650>)
 800314c:	4413      	add	r3, r2
 800314e:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <HAL_DMA_Init+0x654>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	009a      	lsls	r2, r3, #2
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f002 f9c1 	bl	80054e4 <DMA_CalcBaseAndBitshift>
 8003162:	4603      	mov	r3, r0
 8003164:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	2201      	movs	r2, #1
 8003170:	409a      	lsls	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	e008      	b.n	800318a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2240      	movs	r2, #64	; 0x40
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0b7      	b.n	80032fa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5f      	ldr	r2, [pc, #380]	; (800330c <HAL_DMA_Init+0x658>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d072      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5d      	ldr	r2, [pc, #372]	; (8003310 <HAL_DMA_Init+0x65c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d06d      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5c      	ldr	r2, [pc, #368]	; (8003314 <HAL_DMA_Init+0x660>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d068      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a5a      	ldr	r2, [pc, #360]	; (8003318 <HAL_DMA_Init+0x664>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d063      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a59      	ldr	r2, [pc, #356]	; (800331c <HAL_DMA_Init+0x668>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d05e      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a57      	ldr	r2, [pc, #348]	; (8003320 <HAL_DMA_Init+0x66c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d059      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a56      	ldr	r2, [pc, #344]	; (8003324 <HAL_DMA_Init+0x670>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d054      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a54      	ldr	r2, [pc, #336]	; (8003328 <HAL_DMA_Init+0x674>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d04f      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a53      	ldr	r2, [pc, #332]	; (800332c <HAL_DMA_Init+0x678>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a51      	ldr	r2, [pc, #324]	; (8003330 <HAL_DMA_Init+0x67c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a50      	ldr	r2, [pc, #320]	; (8003334 <HAL_DMA_Init+0x680>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <HAL_DMA_Init+0x684>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a4d      	ldr	r2, [pc, #308]	; (800333c <HAL_DMA_Init+0x688>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a4b      	ldr	r2, [pc, #300]	; (8003340 <HAL_DMA_Init+0x68c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a4a      	ldr	r2, [pc, #296]	; (8003344 <HAL_DMA_Init+0x690>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a48      	ldr	r2, [pc, #288]	; (8003348 <HAL_DMA_Init+0x694>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a47      	ldr	r2, [pc, #284]	; (800334c <HAL_DMA_Init+0x698>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a45      	ldr	r2, [pc, #276]	; (8003350 <HAL_DMA_Init+0x69c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a44      	ldr	r2, [pc, #272]	; (8003354 <HAL_DMA_Init+0x6a0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a42      	ldr	r2, [pc, #264]	; (8003358 <HAL_DMA_Init+0x6a4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a41      	ldr	r2, [pc, #260]	; (800335c <HAL_DMA_Init+0x6a8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a3f      	ldr	r2, [pc, #252]	; (8003360 <HAL_DMA_Init+0x6ac>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a3e      	ldr	r2, [pc, #248]	; (8003364 <HAL_DMA_Init+0x6b0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3c      	ldr	r2, [pc, #240]	; (8003368 <HAL_DMA_Init+0x6b4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_DMA_Init+0x5ca>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_DMA_Init+0x5cc>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d032      	beq.n	80032ea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f002 fa5b 	bl	8005740 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b80      	cmp	r3, #128	; 0x80
 8003290:	d102      	bne.n	8003298 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_DMA_Init+0x624>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d80c      	bhi.n	80032d8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f002 fad8 	bl	8005874 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	e008      	b.n	80032ea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	a7fdabf8 	.word	0xa7fdabf8
 8003308:	cccccccd 	.word	0xcccccccd
 800330c:	40020010 	.word	0x40020010
 8003310:	40020028 	.word	0x40020028
 8003314:	40020040 	.word	0x40020040
 8003318:	40020058 	.word	0x40020058
 800331c:	40020070 	.word	0x40020070
 8003320:	40020088 	.word	0x40020088
 8003324:	400200a0 	.word	0x400200a0
 8003328:	400200b8 	.word	0x400200b8
 800332c:	40020410 	.word	0x40020410
 8003330:	40020428 	.word	0x40020428
 8003334:	40020440 	.word	0x40020440
 8003338:	40020458 	.word	0x40020458
 800333c:	40020470 	.word	0x40020470
 8003340:	40020488 	.word	0x40020488
 8003344:	400204a0 	.word	0x400204a0
 8003348:	400204b8 	.word	0x400204b8
 800334c:	58025408 	.word	0x58025408
 8003350:	5802541c 	.word	0x5802541c
 8003354:	58025430 	.word	0x58025430
 8003358:	58025444 	.word	0x58025444
 800335c:	58025458 	.word	0x58025458
 8003360:	5802546c 	.word	0x5802546c
 8003364:	58025480 	.word	0x58025480
 8003368:	58025494 	.word	0x58025494

0800336c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e226      	b.n	80037d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Start_IT+0x2a>
 8003392:	2302      	movs	r3, #2
 8003394:	e21f      	b.n	80037d6 <HAL_DMA_Start_IT+0x46a>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 820a 	bne.w	80037c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a68      	ldr	r2, [pc, #416]	; (8003560 <HAL_DMA_Start_IT+0x1f4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d04a      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a66      	ldr	r2, [pc, #408]	; (8003564 <HAL_DMA_Start_IT+0x1f8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d045      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a65      	ldr	r2, [pc, #404]	; (8003568 <HAL_DMA_Start_IT+0x1fc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d040      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a63      	ldr	r2, [pc, #396]	; (800356c <HAL_DMA_Start_IT+0x200>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d03b      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a62      	ldr	r2, [pc, #392]	; (8003570 <HAL_DMA_Start_IT+0x204>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d036      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a60      	ldr	r2, [pc, #384]	; (8003574 <HAL_DMA_Start_IT+0x208>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d031      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5f      	ldr	r2, [pc, #380]	; (8003578 <HAL_DMA_Start_IT+0x20c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d02c      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5d      	ldr	r2, [pc, #372]	; (800357c <HAL_DMA_Start_IT+0x210>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d027      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a5c      	ldr	r2, [pc, #368]	; (8003580 <HAL_DMA_Start_IT+0x214>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d022      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5a      	ldr	r2, [pc, #360]	; (8003584 <HAL_DMA_Start_IT+0x218>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01d      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a59      	ldr	r2, [pc, #356]	; (8003588 <HAL_DMA_Start_IT+0x21c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d018      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a57      	ldr	r2, [pc, #348]	; (800358c <HAL_DMA_Start_IT+0x220>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a56      	ldr	r2, [pc, #344]	; (8003590 <HAL_DMA_Start_IT+0x224>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a54      	ldr	r2, [pc, #336]	; (8003594 <HAL_DMA_Start_IT+0x228>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a53      	ldr	r2, [pc, #332]	; (8003598 <HAL_DMA_Start_IT+0x22c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a51      	ldr	r2, [pc, #324]	; (800359c <HAL_DMA_Start_IT+0x230>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d108      	bne.n	800346c <HAL_DMA_Start_IT+0x100>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e007      	b.n	800347c <HAL_DMA_Start_IT+0x110>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f001 fe82 	bl	800518c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a34      	ldr	r2, [pc, #208]	; (8003560 <HAL_DMA_Start_IT+0x1f4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d04a      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a33      	ldr	r2, [pc, #204]	; (8003564 <HAL_DMA_Start_IT+0x1f8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d045      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a31      	ldr	r2, [pc, #196]	; (8003568 <HAL_DMA_Start_IT+0x1fc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d040      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a30      	ldr	r2, [pc, #192]	; (800356c <HAL_DMA_Start_IT+0x200>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d03b      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2e      	ldr	r2, [pc, #184]	; (8003570 <HAL_DMA_Start_IT+0x204>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d036      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2d      	ldr	r2, [pc, #180]	; (8003574 <HAL_DMA_Start_IT+0x208>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d031      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <HAL_DMA_Start_IT+0x20c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d02c      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2a      	ldr	r2, [pc, #168]	; (800357c <HAL_DMA_Start_IT+0x210>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d027      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a28      	ldr	r2, [pc, #160]	; (8003580 <HAL_DMA_Start_IT+0x214>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d022      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a27      	ldr	r2, [pc, #156]	; (8003584 <HAL_DMA_Start_IT+0x218>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d01d      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a25      	ldr	r2, [pc, #148]	; (8003588 <HAL_DMA_Start_IT+0x21c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d018      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a24      	ldr	r2, [pc, #144]	; (800358c <HAL_DMA_Start_IT+0x220>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a22      	ldr	r2, [pc, #136]	; (8003590 <HAL_DMA_Start_IT+0x224>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00e      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a21      	ldr	r2, [pc, #132]	; (8003594 <HAL_DMA_Start_IT+0x228>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_DMA_Start_IT+0x22c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_DMA_Start_IT+0x230>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_DMA_Start_IT+0x1c0>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_DMA_Start_IT+0x1c2>
 800352c:	2300      	movs	r3, #0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d036      	beq.n	80035a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 021e 	bic.w	r2, r3, #30
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0216 	orr.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03e      	beq.n	80035cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0208 	orr.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e035      	b.n	80035cc <HAL_DMA_Start_IT+0x260>
 8003560:	40020010 	.word	0x40020010
 8003564:	40020028 	.word	0x40020028
 8003568:	40020040 	.word	0x40020040
 800356c:	40020058 	.word	0x40020058
 8003570:	40020070 	.word	0x40020070
 8003574:	40020088 	.word	0x40020088
 8003578:	400200a0 	.word	0x400200a0
 800357c:	400200b8 	.word	0x400200b8
 8003580:	40020410 	.word	0x40020410
 8003584:	40020428 	.word	0x40020428
 8003588:	40020440 	.word	0x40020440
 800358c:	40020458 	.word	0x40020458
 8003590:	40020470 	.word	0x40020470
 8003594:	40020488 	.word	0x40020488
 8003598:	400204a0 	.word	0x400204a0
 800359c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 020e 	bic.w	r2, r3, #14
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 020a 	orr.w	r2, r2, #10
 80035b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0204 	orr.w	r2, r2, #4
 80035ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a83      	ldr	r2, [pc, #524]	; (80037e0 <HAL_DMA_Start_IT+0x474>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d072      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a82      	ldr	r2, [pc, #520]	; (80037e4 <HAL_DMA_Start_IT+0x478>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d06d      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a80      	ldr	r2, [pc, #512]	; (80037e8 <HAL_DMA_Start_IT+0x47c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d068      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7f      	ldr	r2, [pc, #508]	; (80037ec <HAL_DMA_Start_IT+0x480>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d063      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a7d      	ldr	r2, [pc, #500]	; (80037f0 <HAL_DMA_Start_IT+0x484>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d05e      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a7c      	ldr	r2, [pc, #496]	; (80037f4 <HAL_DMA_Start_IT+0x488>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d059      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a7a      	ldr	r2, [pc, #488]	; (80037f8 <HAL_DMA_Start_IT+0x48c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d054      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a79      	ldr	r2, [pc, #484]	; (80037fc <HAL_DMA_Start_IT+0x490>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04f      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a77      	ldr	r2, [pc, #476]	; (8003800 <HAL_DMA_Start_IT+0x494>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d04a      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a76      	ldr	r2, [pc, #472]	; (8003804 <HAL_DMA_Start_IT+0x498>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d045      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a74      	ldr	r2, [pc, #464]	; (8003808 <HAL_DMA_Start_IT+0x49c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d040      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a73      	ldr	r2, [pc, #460]	; (800380c <HAL_DMA_Start_IT+0x4a0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d03b      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a71      	ldr	r2, [pc, #452]	; (8003810 <HAL_DMA_Start_IT+0x4a4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d036      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a70      	ldr	r2, [pc, #448]	; (8003814 <HAL_DMA_Start_IT+0x4a8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d031      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6e      	ldr	r2, [pc, #440]	; (8003818 <HAL_DMA_Start_IT+0x4ac>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d02c      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6d      	ldr	r2, [pc, #436]	; (800381c <HAL_DMA_Start_IT+0x4b0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d027      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6b      	ldr	r2, [pc, #428]	; (8003820 <HAL_DMA_Start_IT+0x4b4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d022      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6a      	ldr	r2, [pc, #424]	; (8003824 <HAL_DMA_Start_IT+0x4b8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d01d      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a68      	ldr	r2, [pc, #416]	; (8003828 <HAL_DMA_Start_IT+0x4bc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d018      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a67      	ldr	r2, [pc, #412]	; (800382c <HAL_DMA_Start_IT+0x4c0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a65      	ldr	r2, [pc, #404]	; (8003830 <HAL_DMA_Start_IT+0x4c4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00e      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a64      	ldr	r2, [pc, #400]	; (8003834 <HAL_DMA_Start_IT+0x4c8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a62      	ldr	r2, [pc, #392]	; (8003838 <HAL_DMA_Start_IT+0x4cc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a61      	ldr	r2, [pc, #388]	; (800383c <HAL_DMA_Start_IT+0x4d0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d101      	bne.n	80036c0 <HAL_DMA_Start_IT+0x354>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_DMA_Start_IT+0x356>
 80036c0:	2300      	movs	r3, #0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01a      	beq.n	80036fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a37      	ldr	r2, [pc, #220]	; (80037e0 <HAL_DMA_Start_IT+0x474>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d04a      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a36      	ldr	r2, [pc, #216]	; (80037e4 <HAL_DMA_Start_IT+0x478>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d045      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a34      	ldr	r2, [pc, #208]	; (80037e8 <HAL_DMA_Start_IT+0x47c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d040      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a33      	ldr	r2, [pc, #204]	; (80037ec <HAL_DMA_Start_IT+0x480>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d03b      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a31      	ldr	r2, [pc, #196]	; (80037f0 <HAL_DMA_Start_IT+0x484>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d036      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a30      	ldr	r2, [pc, #192]	; (80037f4 <HAL_DMA_Start_IT+0x488>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d031      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2e      	ldr	r2, [pc, #184]	; (80037f8 <HAL_DMA_Start_IT+0x48c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02c      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2d      	ldr	r2, [pc, #180]	; (80037fc <HAL_DMA_Start_IT+0x490>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d027      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2b      	ldr	r2, [pc, #172]	; (8003800 <HAL_DMA_Start_IT+0x494>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d022      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <HAL_DMA_Start_IT+0x498>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d01d      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a28      	ldr	r2, [pc, #160]	; (8003808 <HAL_DMA_Start_IT+0x49c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d018      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a27      	ldr	r2, [pc, #156]	; (800380c <HAL_DMA_Start_IT+0x4a0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a25      	ldr	r2, [pc, #148]	; (8003810 <HAL_DMA_Start_IT+0x4a4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00e      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a24      	ldr	r2, [pc, #144]	; (8003814 <HAL_DMA_Start_IT+0x4a8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a22      	ldr	r2, [pc, #136]	; (8003818 <HAL_DMA_Start_IT+0x4ac>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a21      	ldr	r2, [pc, #132]	; (800381c <HAL_DMA_Start_IT+0x4b0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d108      	bne.n	80037ae <HAL_DMA_Start_IT+0x442>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e012      	b.n	80037d4 <HAL_DMA_Start_IT+0x468>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e009      	b.n	80037d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40020010 	.word	0x40020010
 80037e4:	40020028 	.word	0x40020028
 80037e8:	40020040 	.word	0x40020040
 80037ec:	40020058 	.word	0x40020058
 80037f0:	40020070 	.word	0x40020070
 80037f4:	40020088 	.word	0x40020088
 80037f8:	400200a0 	.word	0x400200a0
 80037fc:	400200b8 	.word	0x400200b8
 8003800:	40020410 	.word	0x40020410
 8003804:	40020428 	.word	0x40020428
 8003808:	40020440 	.word	0x40020440
 800380c:	40020458 	.word	0x40020458
 8003810:	40020470 	.word	0x40020470
 8003814:	40020488 	.word	0x40020488
 8003818:	400204a0 	.word	0x400204a0
 800381c:	400204b8 	.word	0x400204b8
 8003820:	58025408 	.word	0x58025408
 8003824:	5802541c 	.word	0x5802541c
 8003828:	58025430 	.word	0x58025430
 800382c:	58025444 	.word	0x58025444
 8003830:	58025458 	.word	0x58025458
 8003834:	5802546c 	.word	0x5802546c
 8003838:	58025480 	.word	0x58025480
 800383c:	58025494 	.word	0x58025494

08003840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff f8e8 	bl	8002a1c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e2dc      	b.n	8003e12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d008      	beq.n	8003876 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2280      	movs	r2, #128	; 0x80
 8003868:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e2cd      	b.n	8003e12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a76      	ldr	r2, [pc, #472]	; (8003a54 <HAL_DMA_Abort+0x214>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d04a      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a74      	ldr	r2, [pc, #464]	; (8003a58 <HAL_DMA_Abort+0x218>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d045      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a73      	ldr	r2, [pc, #460]	; (8003a5c <HAL_DMA_Abort+0x21c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d040      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a71      	ldr	r2, [pc, #452]	; (8003a60 <HAL_DMA_Abort+0x220>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d03b      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a70      	ldr	r2, [pc, #448]	; (8003a64 <HAL_DMA_Abort+0x224>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d036      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6e      	ldr	r2, [pc, #440]	; (8003a68 <HAL_DMA_Abort+0x228>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d031      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6d      	ldr	r2, [pc, #436]	; (8003a6c <HAL_DMA_Abort+0x22c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d02c      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6b      	ldr	r2, [pc, #428]	; (8003a70 <HAL_DMA_Abort+0x230>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d027      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6a      	ldr	r2, [pc, #424]	; (8003a74 <HAL_DMA_Abort+0x234>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a68      	ldr	r2, [pc, #416]	; (8003a78 <HAL_DMA_Abort+0x238>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01d      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a67      	ldr	r2, [pc, #412]	; (8003a7c <HAL_DMA_Abort+0x23c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d018      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <HAL_DMA_Abort+0x240>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a64      	ldr	r2, [pc, #400]	; (8003a84 <HAL_DMA_Abort+0x244>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00e      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a62      	ldr	r2, [pc, #392]	; (8003a88 <HAL_DMA_Abort+0x248>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a61      	ldr	r2, [pc, #388]	; (8003a8c <HAL_DMA_Abort+0x24c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5f      	ldr	r2, [pc, #380]	; (8003a90 <HAL_DMA_Abort+0x250>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_DMA_Abort+0xda>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_DMA_Abort+0xdc>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 021e 	bic.w	r2, r2, #30
 800392e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800393e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e00a      	b.n	800395e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 020e 	bic.w	r2, r2, #14
 8003956:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <HAL_DMA_Abort+0x214>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d072      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <HAL_DMA_Abort+0x218>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d06d      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a39      	ldr	r2, [pc, #228]	; (8003a5c <HAL_DMA_Abort+0x21c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d068      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a37      	ldr	r2, [pc, #220]	; (8003a60 <HAL_DMA_Abort+0x220>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d063      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a36      	ldr	r2, [pc, #216]	; (8003a64 <HAL_DMA_Abort+0x224>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d05e      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a34      	ldr	r2, [pc, #208]	; (8003a68 <HAL_DMA_Abort+0x228>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d059      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <HAL_DMA_Abort+0x22c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d054      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <HAL_DMA_Abort+0x230>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04f      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <HAL_DMA_Abort+0x234>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d04a      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2e      	ldr	r2, [pc, #184]	; (8003a78 <HAL_DMA_Abort+0x238>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d045      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <HAL_DMA_Abort+0x23c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d040      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2b      	ldr	r2, [pc, #172]	; (8003a80 <HAL_DMA_Abort+0x240>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d03b      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <HAL_DMA_Abort+0x244>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d036      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a28      	ldr	r2, [pc, #160]	; (8003a88 <HAL_DMA_Abort+0x248>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d031      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a27      	ldr	r2, [pc, #156]	; (8003a8c <HAL_DMA_Abort+0x24c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d02c      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <HAL_DMA_Abort+0x250>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d027      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <HAL_DMA_Abort+0x254>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <HAL_DMA_Abort+0x258>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01d      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a21      	ldr	r2, [pc, #132]	; (8003a9c <HAL_DMA_Abort+0x25c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_DMA_Abort+0x260>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	; (8003aa4 <HAL_DMA_Abort+0x264>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1c      	ldr	r2, [pc, #112]	; (8003aa8 <HAL_DMA_Abort+0x268>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HAL_DMA_Abort+0x26c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <HAL_DMA_Abort+0x270>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d132      	bne.n	8003ab4 <HAL_DMA_Abort+0x274>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e031      	b.n	8003ab6 <HAL_DMA_Abort+0x276>
 8003a52:	bf00      	nop
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
 8003a94:	58025408 	.word	0x58025408
 8003a98:	5802541c 	.word	0x5802541c
 8003a9c:	58025430 	.word	0x58025430
 8003aa0:	58025444 	.word	0x58025444
 8003aa4:	58025458 	.word	0x58025458
 8003aa8:	5802546c 	.word	0x5802546c
 8003aac:	58025480 	.word	0x58025480
 8003ab0:	58025494 	.word	0x58025494
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6d      	ldr	r2, [pc, #436]	; (8003c84 <HAL_DMA_Abort+0x444>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d04a      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6b      	ldr	r2, [pc, #428]	; (8003c88 <HAL_DMA_Abort+0x448>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d045      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6a      	ldr	r2, [pc, #424]	; (8003c8c <HAL_DMA_Abort+0x44c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d040      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <HAL_DMA_Abort+0x450>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d03b      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a67      	ldr	r2, [pc, #412]	; (8003c94 <HAL_DMA_Abort+0x454>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d036      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <HAL_DMA_Abort+0x458>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d031      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a64      	ldr	r2, [pc, #400]	; (8003c9c <HAL_DMA_Abort+0x45c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d02c      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a62      	ldr	r2, [pc, #392]	; (8003ca0 <HAL_DMA_Abort+0x460>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d027      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a61      	ldr	r2, [pc, #388]	; (8003ca4 <HAL_DMA_Abort+0x464>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d022      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5f      	ldr	r2, [pc, #380]	; (8003ca8 <HAL_DMA_Abort+0x468>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01d      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <HAL_DMA_Abort+0x46c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5c      	ldr	r2, [pc, #368]	; (8003cb0 <HAL_DMA_Abort+0x470>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5b      	ldr	r2, [pc, #364]	; (8003cb4 <HAL_DMA_Abort+0x474>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a59      	ldr	r2, [pc, #356]	; (8003cb8 <HAL_DMA_Abort+0x478>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_DMA_Abort+0x47c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a56      	ldr	r2, [pc, #344]	; (8003cc0 <HAL_DMA_Abort+0x480>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <HAL_DMA_Abort+0x33c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e007      	b.n	8003b8c <HAL_DMA_Abort+0x34c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003b8c:	e013      	b.n	8003bb6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b8e:	f7fe ff45 	bl	8002a1c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d90c      	bls.n	8003bb6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2203      	movs	r2, #3
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e12d      	b.n	8003e12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <HAL_DMA_Abort+0x444>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d04a      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	; (8003c88 <HAL_DMA_Abort+0x448>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d045      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <HAL_DMA_Abort+0x44c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d040      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	; (8003c90 <HAL_DMA_Abort+0x450>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d03b      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a29      	ldr	r2, [pc, #164]	; (8003c94 <HAL_DMA_Abort+0x454>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d036      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <HAL_DMA_Abort+0x458>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <HAL_DMA_Abort+0x45c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d02c      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <HAL_DMA_Abort+0x460>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d027      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <HAL_DMA_Abort+0x464>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <HAL_DMA_Abort+0x468>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_DMA_Abort+0x46c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_DMA_Abort+0x470>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <HAL_DMA_Abort+0x474>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	; (8003cb8 <HAL_DMA_Abort+0x478>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1a      	ldr	r2, [pc, #104]	; (8003cbc <HAL_DMA_Abort+0x47c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a18      	ldr	r2, [pc, #96]	; (8003cc0 <HAL_DMA_Abort+0x480>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_DMA_Abort+0x426>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_DMA_Abort+0x428>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02b      	beq.n	8003cc4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	223f      	movs	r2, #63	; 0x3f
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	e02a      	b.n	8003cda <HAL_DMA_Abort+0x49a>
 8003c84:	40020010 	.word	0x40020010
 8003c88:	40020028 	.word	0x40020028
 8003c8c:	40020040 	.word	0x40020040
 8003c90:	40020058 	.word	0x40020058
 8003c94:	40020070 	.word	0x40020070
 8003c98:	40020088 	.word	0x40020088
 8003c9c:	400200a0 	.word	0x400200a0
 8003ca0:	400200b8 	.word	0x400200b8
 8003ca4:	40020410 	.word	0x40020410
 8003ca8:	40020428 	.word	0x40020428
 8003cac:	40020440 	.word	0x40020440
 8003cb0:	40020458 	.word	0x40020458
 8003cb4:	40020470 	.word	0x40020470
 8003cb8:	40020488 	.word	0x40020488
 8003cbc:	400204a0 	.word	0x400204a0
 8003cc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a4f      	ldr	r2, [pc, #316]	; (8003e1c <HAL_DMA_Abort+0x5dc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d072      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a4d      	ldr	r2, [pc, #308]	; (8003e20 <HAL_DMA_Abort+0x5e0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d06d      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a4c      	ldr	r2, [pc, #304]	; (8003e24 <HAL_DMA_Abort+0x5e4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d068      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <HAL_DMA_Abort+0x5e8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d063      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a49      	ldr	r2, [pc, #292]	; (8003e2c <HAL_DMA_Abort+0x5ec>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d05e      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a47      	ldr	r2, [pc, #284]	; (8003e30 <HAL_DMA_Abort+0x5f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d059      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a46      	ldr	r2, [pc, #280]	; (8003e34 <HAL_DMA_Abort+0x5f4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d054      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a44      	ldr	r2, [pc, #272]	; (8003e38 <HAL_DMA_Abort+0x5f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d04f      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a43      	ldr	r2, [pc, #268]	; (8003e3c <HAL_DMA_Abort+0x5fc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d04a      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a41      	ldr	r2, [pc, #260]	; (8003e40 <HAL_DMA_Abort+0x600>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d045      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a40      	ldr	r2, [pc, #256]	; (8003e44 <HAL_DMA_Abort+0x604>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d040      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a3e      	ldr	r2, [pc, #248]	; (8003e48 <HAL_DMA_Abort+0x608>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d03b      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a3d      	ldr	r2, [pc, #244]	; (8003e4c <HAL_DMA_Abort+0x60c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d036      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3b      	ldr	r2, [pc, #236]	; (8003e50 <HAL_DMA_Abort+0x610>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d031      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <HAL_DMA_Abort+0x614>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d02c      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a38      	ldr	r2, [pc, #224]	; (8003e58 <HAL_DMA_Abort+0x618>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d027      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a37      	ldr	r2, [pc, #220]	; (8003e5c <HAL_DMA_Abort+0x61c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d022      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a35      	ldr	r2, [pc, #212]	; (8003e60 <HAL_DMA_Abort+0x620>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01d      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a34      	ldr	r2, [pc, #208]	; (8003e64 <HAL_DMA_Abort+0x624>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a32      	ldr	r2, [pc, #200]	; (8003e68 <HAL_DMA_Abort+0x628>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a31      	ldr	r2, [pc, #196]	; (8003e6c <HAL_DMA_Abort+0x62c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2f      	ldr	r2, [pc, #188]	; (8003e70 <HAL_DMA_Abort+0x630>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2e      	ldr	r2, [pc, #184]	; (8003e74 <HAL_DMA_Abort+0x634>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <HAL_DMA_Abort+0x638>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <HAL_DMA_Abort+0x58e>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMA_Abort+0x590>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003ddc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00c      	beq.n	8003e00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003df4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003dfe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40020010 	.word	0x40020010
 8003e20:	40020028 	.word	0x40020028
 8003e24:	40020040 	.word	0x40020040
 8003e28:	40020058 	.word	0x40020058
 8003e2c:	40020070 	.word	0x40020070
 8003e30:	40020088 	.word	0x40020088
 8003e34:	400200a0 	.word	0x400200a0
 8003e38:	400200b8 	.word	0x400200b8
 8003e3c:	40020410 	.word	0x40020410
 8003e40:	40020428 	.word	0x40020428
 8003e44:	40020440 	.word	0x40020440
 8003e48:	40020458 	.word	0x40020458
 8003e4c:	40020470 	.word	0x40020470
 8003e50:	40020488 	.word	0x40020488
 8003e54:	400204a0 	.word	0x400204a0
 8003e58:	400204b8 	.word	0x400204b8
 8003e5c:	58025408 	.word	0x58025408
 8003e60:	5802541c 	.word	0x5802541c
 8003e64:	58025430 	.word	0x58025430
 8003e68:	58025444 	.word	0x58025444
 8003e6c:	58025458 	.word	0x58025458
 8003e70:	5802546c 	.word	0x5802546c
 8003e74:	58025480 	.word	0x58025480
 8003e78:	58025494 	.word	0x58025494

08003e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e205      	b.n	800429a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2280      	movs	r2, #128	; 0x80
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e1fa      	b.n	800429a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a8c      	ldr	r2, [pc, #560]	; (80040dc <HAL_DMA_Abort_IT+0x260>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a8b      	ldr	r2, [pc, #556]	; (80040e0 <HAL_DMA_Abort_IT+0x264>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a89      	ldr	r2, [pc, #548]	; (80040e4 <HAL_DMA_Abort_IT+0x268>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a88      	ldr	r2, [pc, #544]	; (80040e8 <HAL_DMA_Abort_IT+0x26c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a86      	ldr	r2, [pc, #536]	; (80040ec <HAL_DMA_Abort_IT+0x270>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a85      	ldr	r2, [pc, #532]	; (80040f0 <HAL_DMA_Abort_IT+0x274>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a83      	ldr	r2, [pc, #524]	; (80040f4 <HAL_DMA_Abort_IT+0x278>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a82      	ldr	r2, [pc, #520]	; (80040f8 <HAL_DMA_Abort_IT+0x27c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a80      	ldr	r2, [pc, #512]	; (80040fc <HAL_DMA_Abort_IT+0x280>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7f      	ldr	r2, [pc, #508]	; (8004100 <HAL_DMA_Abort_IT+0x284>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7d      	ldr	r2, [pc, #500]	; (8004104 <HAL_DMA_Abort_IT+0x288>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7c      	ldr	r2, [pc, #496]	; (8004108 <HAL_DMA_Abort_IT+0x28c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a7a      	ldr	r2, [pc, #488]	; (800410c <HAL_DMA_Abort_IT+0x290>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a79      	ldr	r2, [pc, #484]	; (8004110 <HAL_DMA_Abort_IT+0x294>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a77      	ldr	r2, [pc, #476]	; (8004114 <HAL_DMA_Abort_IT+0x298>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a76      	ldr	r2, [pc, #472]	; (8004118 <HAL_DMA_Abort_IT+0x29c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_Abort_IT+0xcc>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_DMA_Abort_IT+0xce>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d065      	beq.n	800401a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2204      	movs	r2, #4
 8003f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a60      	ldr	r2, [pc, #384]	; (80040dc <HAL_DMA_Abort_IT+0x260>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04a      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a5e      	ldr	r2, [pc, #376]	; (80040e0 <HAL_DMA_Abort_IT+0x264>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d045      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a5d      	ldr	r2, [pc, #372]	; (80040e4 <HAL_DMA_Abort_IT+0x268>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d040      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5b      	ldr	r2, [pc, #364]	; (80040e8 <HAL_DMA_Abort_IT+0x26c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d03b      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_DMA_Abort_IT+0x270>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d036      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a58      	ldr	r2, [pc, #352]	; (80040f0 <HAL_DMA_Abort_IT+0x274>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d031      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a57      	ldr	r2, [pc, #348]	; (80040f4 <HAL_DMA_Abort_IT+0x278>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d02c      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a55      	ldr	r2, [pc, #340]	; (80040f8 <HAL_DMA_Abort_IT+0x27c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d027      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a54      	ldr	r2, [pc, #336]	; (80040fc <HAL_DMA_Abort_IT+0x280>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d022      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a52      	ldr	r2, [pc, #328]	; (8004100 <HAL_DMA_Abort_IT+0x284>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01d      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a51      	ldr	r2, [pc, #324]	; (8004104 <HAL_DMA_Abort_IT+0x288>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d018      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a4f      	ldr	r2, [pc, #316]	; (8004108 <HAL_DMA_Abort_IT+0x28c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d013      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4e      	ldr	r2, [pc, #312]	; (800410c <HAL_DMA_Abort_IT+0x290>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4c      	ldr	r2, [pc, #304]	; (8004110 <HAL_DMA_Abort_IT+0x294>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d009      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4b      	ldr	r2, [pc, #300]	; (8004114 <HAL_DMA_Abort_IT+0x298>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d004      	beq.n	8003ff6 <HAL_DMA_Abort_IT+0x17a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a49      	ldr	r2, [pc, #292]	; (8004118 <HAL_DMA_Abort_IT+0x29c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <HAL_DMA_Abort_IT+0x18c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e147      	b.n	8004298 <HAL_DMA_Abort_IT+0x41c>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e13e      	b.n	8004298 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 020e 	bic.w	r2, r2, #14
 8004028:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2b      	ldr	r2, [pc, #172]	; (80040dc <HAL_DMA_Abort_IT+0x260>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d04a      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a29      	ldr	r2, [pc, #164]	; (80040e0 <HAL_DMA_Abort_IT+0x264>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d045      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a28      	ldr	r2, [pc, #160]	; (80040e4 <HAL_DMA_Abort_IT+0x268>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d040      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <HAL_DMA_Abort_IT+0x26c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d03b      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a25      	ldr	r2, [pc, #148]	; (80040ec <HAL_DMA_Abort_IT+0x270>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d036      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <HAL_DMA_Abort_IT+0x274>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d031      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <HAL_DMA_Abort_IT+0x278>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d02c      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a20      	ldr	r2, [pc, #128]	; (80040f8 <HAL_DMA_Abort_IT+0x27c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d027      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <HAL_DMA_Abort_IT+0x280>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d022      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <HAL_DMA_Abort_IT+0x284>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01d      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <HAL_DMA_Abort_IT+0x288>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d018      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <HAL_DMA_Abort_IT+0x28c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a19      	ldr	r2, [pc, #100]	; (800410c <HAL_DMA_Abort_IT+0x290>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00e      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a17      	ldr	r2, [pc, #92]	; (8004110 <HAL_DMA_Abort_IT+0x294>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d009      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a16      	ldr	r2, [pc, #88]	; (8004114 <HAL_DMA_Abort_IT+0x298>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d004      	beq.n	80040ca <HAL_DMA_Abort_IT+0x24e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <HAL_DMA_Abort_IT+0x29c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d128      	bne.n	800411c <HAL_DMA_Abort_IT+0x2a0>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0201 	bic.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	e027      	b.n	800412c <HAL_DMA_Abort_IT+0x2b0>
 80040dc:	40020010 	.word	0x40020010
 80040e0:	40020028 	.word	0x40020028
 80040e4:	40020040 	.word	0x40020040
 80040e8:	40020058 	.word	0x40020058
 80040ec:	40020070 	.word	0x40020070
 80040f0:	40020088 	.word	0x40020088
 80040f4:	400200a0 	.word	0x400200a0
 80040f8:	400200b8 	.word	0x400200b8
 80040fc:	40020410 	.word	0x40020410
 8004100:	40020428 	.word	0x40020428
 8004104:	40020440 	.word	0x40020440
 8004108:	40020458 	.word	0x40020458
 800410c:	40020470 	.word	0x40020470
 8004110:	40020488 	.word	0x40020488
 8004114:	400204a0 	.word	0x400204a0
 8004118:	400204b8 	.word	0x400204b8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0201 	bic.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a5c      	ldr	r2, [pc, #368]	; (80042a4 <HAL_DMA_Abort_IT+0x428>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d072      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a5b      	ldr	r2, [pc, #364]	; (80042a8 <HAL_DMA_Abort_IT+0x42c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d06d      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a59      	ldr	r2, [pc, #356]	; (80042ac <HAL_DMA_Abort_IT+0x430>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d068      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a58      	ldr	r2, [pc, #352]	; (80042b0 <HAL_DMA_Abort_IT+0x434>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d063      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a56      	ldr	r2, [pc, #344]	; (80042b4 <HAL_DMA_Abort_IT+0x438>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d05e      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a55      	ldr	r2, [pc, #340]	; (80042b8 <HAL_DMA_Abort_IT+0x43c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d059      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a53      	ldr	r2, [pc, #332]	; (80042bc <HAL_DMA_Abort_IT+0x440>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d054      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a52      	ldr	r2, [pc, #328]	; (80042c0 <HAL_DMA_Abort_IT+0x444>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d04f      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <HAL_DMA_Abort_IT+0x448>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d04a      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a4f      	ldr	r2, [pc, #316]	; (80042c8 <HAL_DMA_Abort_IT+0x44c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d045      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a4d      	ldr	r2, [pc, #308]	; (80042cc <HAL_DMA_Abort_IT+0x450>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d040      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a4c      	ldr	r2, [pc, #304]	; (80042d0 <HAL_DMA_Abort_IT+0x454>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d03b      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a4a      	ldr	r2, [pc, #296]	; (80042d4 <HAL_DMA_Abort_IT+0x458>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d036      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a49      	ldr	r2, [pc, #292]	; (80042d8 <HAL_DMA_Abort_IT+0x45c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d031      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a47      	ldr	r2, [pc, #284]	; (80042dc <HAL_DMA_Abort_IT+0x460>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02c      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a46      	ldr	r2, [pc, #280]	; (80042e0 <HAL_DMA_Abort_IT+0x464>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d027      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a44      	ldr	r2, [pc, #272]	; (80042e4 <HAL_DMA_Abort_IT+0x468>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d022      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a43      	ldr	r2, [pc, #268]	; (80042e8 <HAL_DMA_Abort_IT+0x46c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01d      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a41      	ldr	r2, [pc, #260]	; (80042ec <HAL_DMA_Abort_IT+0x470>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d018      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a40      	ldr	r2, [pc, #256]	; (80042f0 <HAL_DMA_Abort_IT+0x474>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d013      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a3e      	ldr	r2, [pc, #248]	; (80042f4 <HAL_DMA_Abort_IT+0x478>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00e      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3d      	ldr	r2, [pc, #244]	; (80042f8 <HAL_DMA_Abort_IT+0x47c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3b      	ldr	r2, [pc, #236]	; (80042fc <HAL_DMA_Abort_IT+0x480>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d004      	beq.n	800421c <HAL_DMA_Abort_IT+0x3a0>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a3a      	ldr	r2, [pc, #232]	; (8004300 <HAL_DMA_Abort_IT+0x484>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d101      	bne.n	8004220 <HAL_DMA_Abort_IT+0x3a4>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_DMA_Abort_IT+0x3a6>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d028      	beq.n	8004278 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004234:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004254:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004276:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40020010 	.word	0x40020010
 80042a8:	40020028 	.word	0x40020028
 80042ac:	40020040 	.word	0x40020040
 80042b0:	40020058 	.word	0x40020058
 80042b4:	40020070 	.word	0x40020070
 80042b8:	40020088 	.word	0x40020088
 80042bc:	400200a0 	.word	0x400200a0
 80042c0:	400200b8 	.word	0x400200b8
 80042c4:	40020410 	.word	0x40020410
 80042c8:	40020428 	.word	0x40020428
 80042cc:	40020440 	.word	0x40020440
 80042d0:	40020458 	.word	0x40020458
 80042d4:	40020470 	.word	0x40020470
 80042d8:	40020488 	.word	0x40020488
 80042dc:	400204a0 	.word	0x400204a0
 80042e0:	400204b8 	.word	0x400204b8
 80042e4:	58025408 	.word	0x58025408
 80042e8:	5802541c 	.word	0x5802541c
 80042ec:	58025430 	.word	0x58025430
 80042f0:	58025444 	.word	0x58025444
 80042f4:	58025458 	.word	0x58025458
 80042f8:	5802546c 	.word	0x5802546c
 80042fc:	58025480 	.word	0x58025480
 8004300:	58025494 	.word	0x58025494

08004304 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	; 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004310:	4b67      	ldr	r3, [pc, #412]	; (80044b0 <HAL_DMA_IRQHandler+0x1ac>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a67      	ldr	r2, [pc, #412]	; (80044b4 <HAL_DMA_IRQHandler+0x1b0>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	0a9b      	lsrs	r3, r3, #10
 800431c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004322:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a5f      	ldr	r2, [pc, #380]	; (80044b8 <HAL_DMA_IRQHandler+0x1b4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d04a      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_DMA_IRQHandler+0x1b8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d045      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a5c      	ldr	r2, [pc, #368]	; (80044c0 <HAL_DMA_IRQHandler+0x1bc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d040      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a5a      	ldr	r2, [pc, #360]	; (80044c4 <HAL_DMA_IRQHandler+0x1c0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d03b      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a59      	ldr	r2, [pc, #356]	; (80044c8 <HAL_DMA_IRQHandler+0x1c4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d036      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a57      	ldr	r2, [pc, #348]	; (80044cc <HAL_DMA_IRQHandler+0x1c8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d031      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a56      	ldr	r2, [pc, #344]	; (80044d0 <HAL_DMA_IRQHandler+0x1cc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d02c      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a54      	ldr	r2, [pc, #336]	; (80044d4 <HAL_DMA_IRQHandler+0x1d0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d027      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a53      	ldr	r2, [pc, #332]	; (80044d8 <HAL_DMA_IRQHandler+0x1d4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d022      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a51      	ldr	r2, [pc, #324]	; (80044dc <HAL_DMA_IRQHandler+0x1d8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01d      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a50      	ldr	r2, [pc, #320]	; (80044e0 <HAL_DMA_IRQHandler+0x1dc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d018      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a4e      	ldr	r2, [pc, #312]	; (80044e4 <HAL_DMA_IRQHandler+0x1e0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d013      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a4d      	ldr	r2, [pc, #308]	; (80044e8 <HAL_DMA_IRQHandler+0x1e4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00e      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a4b      	ldr	r2, [pc, #300]	; (80044ec <HAL_DMA_IRQHandler+0x1e8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d009      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4a      	ldr	r2, [pc, #296]	; (80044f0 <HAL_DMA_IRQHandler+0x1ec>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xd2>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a48      	ldr	r2, [pc, #288]	; (80044f4 <HAL_DMA_IRQHandler+0x1f0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_DMA_IRQHandler+0xd6>
 80043d6:	2301      	movs	r3, #1
 80043d8:	e000      	b.n	80043dc <HAL_DMA_IRQHandler+0xd8>
 80043da:	2300      	movs	r3, #0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 842b 	beq.w	8004c38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e6:	f003 031f 	and.w	r3, r3, #31
 80043ea:	2208      	movs	r2, #8
 80043ec:	409a      	lsls	r2, r3
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80a2 	beq.w	800453c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2e      	ldr	r2, [pc, #184]	; (80044b8 <HAL_DMA_IRQHandler+0x1b4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d04a      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2d      	ldr	r2, [pc, #180]	; (80044bc <HAL_DMA_IRQHandler+0x1b8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d045      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <HAL_DMA_IRQHandler+0x1bc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d040      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2a      	ldr	r2, [pc, #168]	; (80044c4 <HAL_DMA_IRQHandler+0x1c0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d03b      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a28      	ldr	r2, [pc, #160]	; (80044c8 <HAL_DMA_IRQHandler+0x1c4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d036      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a27      	ldr	r2, [pc, #156]	; (80044cc <HAL_DMA_IRQHandler+0x1c8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d031      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <HAL_DMA_IRQHandler+0x1cc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d02c      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <HAL_DMA_IRQHandler+0x1d0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d027      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a22      	ldr	r2, [pc, #136]	; (80044d8 <HAL_DMA_IRQHandler+0x1d4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d022      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a21      	ldr	r2, [pc, #132]	; (80044dc <HAL_DMA_IRQHandler+0x1d8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d01d      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <HAL_DMA_IRQHandler+0x1dc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d018      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1e      	ldr	r2, [pc, #120]	; (80044e4 <HAL_DMA_IRQHandler+0x1e0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1c      	ldr	r2, [pc, #112]	; (80044e8 <HAL_DMA_IRQHandler+0x1e4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00e      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_DMA_IRQHandler+0x1e8>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <HAL_DMA_IRQHandler+0x1ec>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_DMA_IRQHandler+0x194>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a18      	ldr	r2, [pc, #96]	; (80044f4 <HAL_DMA_IRQHandler+0x1f0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d12f      	bne.n	80044f8 <HAL_DMA_IRQHandler+0x1f4>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	bf14      	ite	ne
 80044a6:	2301      	movne	r3, #1
 80044a8:	2300      	moveq	r3, #0
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	e02e      	b.n	800450c <HAL_DMA_IRQHandler+0x208>
 80044ae:	bf00      	nop
 80044b0:	2400000c 	.word	0x2400000c
 80044b4:	1b4e81b5 	.word	0x1b4e81b5
 80044b8:	40020010 	.word	0x40020010
 80044bc:	40020028 	.word	0x40020028
 80044c0:	40020040 	.word	0x40020040
 80044c4:	40020058 	.word	0x40020058
 80044c8:	40020070 	.word	0x40020070
 80044cc:	40020088 	.word	0x40020088
 80044d0:	400200a0 	.word	0x400200a0
 80044d4:	400200b8 	.word	0x400200b8
 80044d8:	40020410 	.word	0x40020410
 80044dc:	40020428 	.word	0x40020428
 80044e0:	40020440 	.word	0x40020440
 80044e4:	40020458 	.word	0x40020458
 80044e8:	40020470 	.word	0x40020470
 80044ec:	40020488 	.word	0x40020488
 80044f0:	400204a0 	.word	0x400204a0
 80044f4:	400204b8 	.word	0x400204b8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	2208      	movs	r2, #8
 800452a:	409a      	lsls	r2, r3
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	f043 0201 	orr.w	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	f003 031f 	and.w	r3, r3, #31
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d06e      	beq.n	8004630 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a69      	ldr	r2, [pc, #420]	; (80046fc <HAL_DMA_IRQHandler+0x3f8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d04a      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a67      	ldr	r2, [pc, #412]	; (8004700 <HAL_DMA_IRQHandler+0x3fc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d045      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a66      	ldr	r2, [pc, #408]	; (8004704 <HAL_DMA_IRQHandler+0x400>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d040      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a64      	ldr	r2, [pc, #400]	; (8004708 <HAL_DMA_IRQHandler+0x404>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d03b      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a63      	ldr	r2, [pc, #396]	; (800470c <HAL_DMA_IRQHandler+0x408>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d036      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a61      	ldr	r2, [pc, #388]	; (8004710 <HAL_DMA_IRQHandler+0x40c>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d031      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a60      	ldr	r2, [pc, #384]	; (8004714 <HAL_DMA_IRQHandler+0x410>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d02c      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5e      	ldr	r2, [pc, #376]	; (8004718 <HAL_DMA_IRQHandler+0x414>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d027      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a5d      	ldr	r2, [pc, #372]	; (800471c <HAL_DMA_IRQHandler+0x418>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d022      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a5b      	ldr	r2, [pc, #364]	; (8004720 <HAL_DMA_IRQHandler+0x41c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01d      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a5a      	ldr	r2, [pc, #360]	; (8004724 <HAL_DMA_IRQHandler+0x420>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d018      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a58      	ldr	r2, [pc, #352]	; (8004728 <HAL_DMA_IRQHandler+0x424>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a57      	ldr	r2, [pc, #348]	; (800472c <HAL_DMA_IRQHandler+0x428>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d00e      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a55      	ldr	r2, [pc, #340]	; (8004730 <HAL_DMA_IRQHandler+0x42c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d009      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a54      	ldr	r2, [pc, #336]	; (8004734 <HAL_DMA_IRQHandler+0x430>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d004      	beq.n	80045f2 <HAL_DMA_IRQHandler+0x2ee>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a52      	ldr	r2, [pc, #328]	; (8004738 <HAL_DMA_IRQHandler+0x434>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10a      	bne.n	8004608 <HAL_DMA_IRQHandler+0x304>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e003      	b.n	8004610 <HAL_DMA_IRQHandler+0x30c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	2201      	movs	r2, #1
 800461e:	409a      	lsls	r2, r3
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f043 0202 	orr.w	r2, r3, #2
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	2204      	movs	r2, #4
 800463a:	409a      	lsls	r2, r3
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	4013      	ands	r3, r2
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 808f 	beq.w	8004764 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2c      	ldr	r2, [pc, #176]	; (80046fc <HAL_DMA_IRQHandler+0x3f8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d04a      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2a      	ldr	r2, [pc, #168]	; (8004700 <HAL_DMA_IRQHandler+0x3fc>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d045      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a29      	ldr	r2, [pc, #164]	; (8004704 <HAL_DMA_IRQHandler+0x400>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d040      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a27      	ldr	r2, [pc, #156]	; (8004708 <HAL_DMA_IRQHandler+0x404>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d03b      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a26      	ldr	r2, [pc, #152]	; (800470c <HAL_DMA_IRQHandler+0x408>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d036      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a24      	ldr	r2, [pc, #144]	; (8004710 <HAL_DMA_IRQHandler+0x40c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d031      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a23      	ldr	r2, [pc, #140]	; (8004714 <HAL_DMA_IRQHandler+0x410>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d02c      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a21      	ldr	r2, [pc, #132]	; (8004718 <HAL_DMA_IRQHandler+0x414>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d027      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a20      	ldr	r2, [pc, #128]	; (800471c <HAL_DMA_IRQHandler+0x418>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1e      	ldr	r2, [pc, #120]	; (8004720 <HAL_DMA_IRQHandler+0x41c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01d      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <HAL_DMA_IRQHandler+0x420>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	; (8004728 <HAL_DMA_IRQHandler+0x424>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1a      	ldr	r2, [pc, #104]	; (800472c <HAL_DMA_IRQHandler+0x428>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_DMA_IRQHandler+0x42c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a17      	ldr	r2, [pc, #92]	; (8004734 <HAL_DMA_IRQHandler+0x430>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x3e2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_DMA_IRQHandler+0x434>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d12a      	bne.n	800473c <HAL_DMA_IRQHandler+0x438>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e023      	b.n	8004744 <HAL_DMA_IRQHandler+0x440>
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	2204      	movs	r2, #4
 8004752:	409a      	lsls	r2, r3
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	f043 0204 	orr.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004768:	f003 031f 	and.w	r3, r3, #31
 800476c:	2210      	movs	r2, #16
 800476e:	409a      	lsls	r2, r3
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a6 	beq.w	80048c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a85      	ldr	r2, [pc, #532]	; (8004994 <HAL_DMA_IRQHandler+0x690>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d04a      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a83      	ldr	r2, [pc, #524]	; (8004998 <HAL_DMA_IRQHandler+0x694>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d045      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a82      	ldr	r2, [pc, #520]	; (800499c <HAL_DMA_IRQHandler+0x698>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d040      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a80      	ldr	r2, [pc, #512]	; (80049a0 <HAL_DMA_IRQHandler+0x69c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d03b      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a7f      	ldr	r2, [pc, #508]	; (80049a4 <HAL_DMA_IRQHandler+0x6a0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d036      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a7d      	ldr	r2, [pc, #500]	; (80049a8 <HAL_DMA_IRQHandler+0x6a4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d031      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a7c      	ldr	r2, [pc, #496]	; (80049ac <HAL_DMA_IRQHandler+0x6a8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d02c      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a7a      	ldr	r2, [pc, #488]	; (80049b0 <HAL_DMA_IRQHandler+0x6ac>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d027      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a79      	ldr	r2, [pc, #484]	; (80049b4 <HAL_DMA_IRQHandler+0x6b0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d022      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a77      	ldr	r2, [pc, #476]	; (80049b8 <HAL_DMA_IRQHandler+0x6b4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d01d      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a76      	ldr	r2, [pc, #472]	; (80049bc <HAL_DMA_IRQHandler+0x6b8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d018      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a74      	ldr	r2, [pc, #464]	; (80049c0 <HAL_DMA_IRQHandler+0x6bc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a73      	ldr	r2, [pc, #460]	; (80049c4 <HAL_DMA_IRQHandler+0x6c0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a71      	ldr	r2, [pc, #452]	; (80049c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a70      	ldr	r2, [pc, #448]	; (80049cc <HAL_DMA_IRQHandler+0x6c8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_DMA_IRQHandler+0x516>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6e      	ldr	r2, [pc, #440]	; (80049d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10a      	bne.n	8004830 <HAL_DMA_IRQHandler+0x52c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e009      	b.n	8004844 <HAL_DMA_IRQHandler+0x540>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d03e      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	2210      	movs	r2, #16
 8004852:	409a      	lsls	r2, r3
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d018      	beq.n	8004898 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d108      	bne.n	8004886 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d024      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	4798      	blx	r3
 8004884:	e01f      	b.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488a:	2b00      	cmp	r3, #0
 800488c:	d01b      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	4798      	blx	r3
 8004896:	e016      	b.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d107      	bne.n	80048b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0208 	bic.w	r2, r2, #8
 80048b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2220      	movs	r2, #32
 80048d0:	409a      	lsls	r2, r3
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8110 	beq.w	8004afc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <HAL_DMA_IRQHandler+0x690>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d04a      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <HAL_DMA_IRQHandler+0x694>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d045      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a29      	ldr	r2, [pc, #164]	; (800499c <HAL_DMA_IRQHandler+0x698>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d040      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <HAL_DMA_IRQHandler+0x69c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d03b      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <HAL_DMA_IRQHandler+0x6a0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d036      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <HAL_DMA_IRQHandler+0x6a4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d031      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a23      	ldr	r2, [pc, #140]	; (80049ac <HAL_DMA_IRQHandler+0x6a8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02c      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <HAL_DMA_IRQHandler+0x6ac>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d027      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a20      	ldr	r2, [pc, #128]	; (80049b4 <HAL_DMA_IRQHandler+0x6b0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1f      	ldr	r2, [pc, #124]	; (80049b8 <HAL_DMA_IRQHandler+0x6b4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01d      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <HAL_DMA_IRQHandler+0x6b8>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <HAL_DMA_IRQHandler+0x6bc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <HAL_DMA_IRQHandler+0x6c0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a19      	ldr	r2, [pc, #100]	; (80049c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a17      	ldr	r2, [pc, #92]	; (80049cc <HAL_DMA_IRQHandler+0x6c8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_DMA_IRQHandler+0x678>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d12b      	bne.n	80049d4 <HAL_DMA_IRQHandler+0x6d0>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b00      	cmp	r3, #0
 8004988:	bf14      	ite	ne
 800498a:	2301      	movne	r3, #1
 800498c:	2300      	moveq	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e02a      	b.n	80049e8 <HAL_DMA_IRQHandler+0x6e4>
 8004992:	bf00      	nop
 8004994:	40020010 	.word	0x40020010
 8004998:	40020028 	.word	0x40020028
 800499c:	40020040 	.word	0x40020040
 80049a0:	40020058 	.word	0x40020058
 80049a4:	40020070 	.word	0x40020070
 80049a8:	40020088 	.word	0x40020088
 80049ac:	400200a0 	.word	0x400200a0
 80049b0:	400200b8 	.word	0x400200b8
 80049b4:	40020410 	.word	0x40020410
 80049b8:	40020428 	.word	0x40020428
 80049bc:	40020440 	.word	0x40020440
 80049c0:	40020458 	.word	0x40020458
 80049c4:	40020470 	.word	0x40020470
 80049c8:	40020488 	.word	0x40020488
 80049cc:	400204a0 	.word	0x400204a0
 80049d0:	400204b8 	.word	0x400204b8
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bf14      	ite	ne
 80049e2:	2301      	movne	r3, #1
 80049e4:	2300      	moveq	r3, #0
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8087 	beq.w	8004afc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2220      	movs	r2, #32
 80049f8:	409a      	lsls	r2, r3
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d139      	bne.n	8004a7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0216 	bic.w	r2, r2, #22
 8004a18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <HAL_DMA_IRQHandler+0x736>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d007      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0208 	bic.w	r2, r2, #8
 8004a48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	223f      	movs	r2, #63	; 0x3f
 8004a54:	409a      	lsls	r2, r3
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 834a 	beq.w	8005108 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
          }
          return;
 8004a7c:	e344      	b.n	8005108 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d018      	beq.n	8004abe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d108      	bne.n	8004aac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02c      	beq.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
 8004aaa:	e027      	b.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d023      	beq.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	4798      	blx	r3
 8004abc:	e01e      	b.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10f      	bne.n	8004aec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0210 	bic.w	r2, r2, #16
 8004ada:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8306 	beq.w	8005112 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 8088 	beq.w	8004c24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2204      	movs	r2, #4
 8004b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a7a      	ldr	r2, [pc, #488]	; (8004d0c <HAL_DMA_IRQHandler+0xa08>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d04a      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a79      	ldr	r2, [pc, #484]	; (8004d10 <HAL_DMA_IRQHandler+0xa0c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d045      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a77      	ldr	r2, [pc, #476]	; (8004d14 <HAL_DMA_IRQHandler+0xa10>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d040      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a76      	ldr	r2, [pc, #472]	; (8004d18 <HAL_DMA_IRQHandler+0xa14>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d03b      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a74      	ldr	r2, [pc, #464]	; (8004d1c <HAL_DMA_IRQHandler+0xa18>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d036      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a73      	ldr	r2, [pc, #460]	; (8004d20 <HAL_DMA_IRQHandler+0xa1c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d031      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a71      	ldr	r2, [pc, #452]	; (8004d24 <HAL_DMA_IRQHandler+0xa20>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d02c      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a70      	ldr	r2, [pc, #448]	; (8004d28 <HAL_DMA_IRQHandler+0xa24>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d027      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6e      	ldr	r2, [pc, #440]	; (8004d2c <HAL_DMA_IRQHandler+0xa28>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d022      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6d      	ldr	r2, [pc, #436]	; (8004d30 <HAL_DMA_IRQHandler+0xa2c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d01d      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6b      	ldr	r2, [pc, #428]	; (8004d34 <HAL_DMA_IRQHandler+0xa30>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d018      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6a      	ldr	r2, [pc, #424]	; (8004d38 <HAL_DMA_IRQHandler+0xa34>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d013      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a68      	ldr	r2, [pc, #416]	; (8004d3c <HAL_DMA_IRQHandler+0xa38>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00e      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a67      	ldr	r2, [pc, #412]	; (8004d40 <HAL_DMA_IRQHandler+0xa3c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a65      	ldr	r2, [pc, #404]	; (8004d44 <HAL_DMA_IRQHandler+0xa40>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d004      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x8b8>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a64      	ldr	r2, [pc, #400]	; (8004d48 <HAL_DMA_IRQHandler+0xa44>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d108      	bne.n	8004bce <HAL_DMA_IRQHandler+0x8ca>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0201 	bic.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e007      	b.n	8004bde <HAL_DMA_IRQHandler+0x8da>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0201 	bic.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3301      	adds	r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d307      	bcc.n	8004bfa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f2      	bne.n	8004bde <HAL_DMA_IRQHandler+0x8da>
 8004bf8:	e000      	b.n	8004bfc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004bfa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d004      	beq.n	8004c1c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2203      	movs	r2, #3
 8004c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004c1a:	e003      	b.n	8004c24 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 8272 	beq.w	8005112 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
 8004c36:	e26c      	b.n	8005112 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a43      	ldr	r2, [pc, #268]	; (8004d4c <HAL_DMA_IRQHandler+0xa48>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d022      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x984>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a42      	ldr	r2, [pc, #264]	; (8004d50 <HAL_DMA_IRQHandler+0xa4c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d01d      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x984>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a40      	ldr	r2, [pc, #256]	; (8004d54 <HAL_DMA_IRQHandler+0xa50>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d018      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x984>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <HAL_DMA_IRQHandler+0xa54>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x984>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a3d      	ldr	r2, [pc, #244]	; (8004d5c <HAL_DMA_IRQHandler+0xa58>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x984>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <HAL_DMA_IRQHandler+0xa5c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x984>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <HAL_DMA_IRQHandler+0xa60>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x984>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a39      	ldr	r2, [pc, #228]	; (8004d68 <HAL_DMA_IRQHandler+0xa64>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d101      	bne.n	8004c8c <HAL_DMA_IRQHandler+0x988>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e000      	b.n	8004c8e <HAL_DMA_IRQHandler+0x98a>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 823f 	beq.w	8005112 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80cd 	beq.w	8004e4c <HAL_DMA_IRQHandler+0xb48>
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80c7 	beq.w	8004e4c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d049      	beq.n	8004d6c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8210 	beq.w	800510c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf4:	e20a      	b.n	800510c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8206 	beq.w	800510c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d08:	e200      	b.n	800510c <HAL_DMA_IRQHandler+0xe08>
 8004d0a:	bf00      	nop
 8004d0c:	40020010 	.word	0x40020010
 8004d10:	40020028 	.word	0x40020028
 8004d14:	40020040 	.word	0x40020040
 8004d18:	40020058 	.word	0x40020058
 8004d1c:	40020070 	.word	0x40020070
 8004d20:	40020088 	.word	0x40020088
 8004d24:	400200a0 	.word	0x400200a0
 8004d28:	400200b8 	.word	0x400200b8
 8004d2c:	40020410 	.word	0x40020410
 8004d30:	40020428 	.word	0x40020428
 8004d34:	40020440 	.word	0x40020440
 8004d38:	40020458 	.word	0x40020458
 8004d3c:	40020470 	.word	0x40020470
 8004d40:	40020488 	.word	0x40020488
 8004d44:	400204a0 	.word	0x400204a0
 8004d48:	400204b8 	.word	0x400204b8
 8004d4c:	58025408 	.word	0x58025408
 8004d50:	5802541c 	.word	0x5802541c
 8004d54:	58025430 	.word	0x58025430
 8004d58:	58025444 	.word	0x58025444
 8004d5c:	58025458 	.word	0x58025458
 8004d60:	5802546c 	.word	0x5802546c
 8004d64:	58025480 	.word	0x58025480
 8004d68:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d160      	bne.n	8004e38 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a8c      	ldr	r2, [pc, #560]	; (8004fac <HAL_DMA_IRQHandler+0xca8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d04a      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a8a      	ldr	r2, [pc, #552]	; (8004fb0 <HAL_DMA_IRQHandler+0xcac>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d045      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a89      	ldr	r2, [pc, #548]	; (8004fb4 <HAL_DMA_IRQHandler+0xcb0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d040      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a87      	ldr	r2, [pc, #540]	; (8004fb8 <HAL_DMA_IRQHandler+0xcb4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d03b      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a86      	ldr	r2, [pc, #536]	; (8004fbc <HAL_DMA_IRQHandler+0xcb8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d036      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a84      	ldr	r2, [pc, #528]	; (8004fc0 <HAL_DMA_IRQHandler+0xcbc>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d031      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a83      	ldr	r2, [pc, #524]	; (8004fc4 <HAL_DMA_IRQHandler+0xcc0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d02c      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a81      	ldr	r2, [pc, #516]	; (8004fc8 <HAL_DMA_IRQHandler+0xcc4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d027      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a80      	ldr	r2, [pc, #512]	; (8004fcc <HAL_DMA_IRQHandler+0xcc8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d022      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a7e      	ldr	r2, [pc, #504]	; (8004fd0 <HAL_DMA_IRQHandler+0xccc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d01d      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a7d      	ldr	r2, [pc, #500]	; (8004fd4 <HAL_DMA_IRQHandler+0xcd0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d018      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a7b      	ldr	r2, [pc, #492]	; (8004fd8 <HAL_DMA_IRQHandler+0xcd4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a7a      	ldr	r2, [pc, #488]	; (8004fdc <HAL_DMA_IRQHandler+0xcd8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00e      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a78      	ldr	r2, [pc, #480]	; (8004fe0 <HAL_DMA_IRQHandler+0xcdc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d009      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a77      	ldr	r2, [pc, #476]	; (8004fe4 <HAL_DMA_IRQHandler+0xce0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_DMA_IRQHandler+0xb12>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a75      	ldr	r2, [pc, #468]	; (8004fe8 <HAL_DMA_IRQHandler+0xce4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d108      	bne.n	8004e28 <HAL_DMA_IRQHandler+0xb24>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0208 	bic.w	r2, r2, #8
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e007      	b.n	8004e38 <HAL_DMA_IRQHandler+0xb34>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0204 	bic.w	r2, r2, #4
 8004e36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8165 	beq.w	800510c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e4a:	e15f      	b.n	800510c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e50:	f003 031f 	and.w	r3, r3, #31
 8004e54:	2202      	movs	r2, #2
 8004e56:	409a      	lsls	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80c5 	beq.w	8004fec <HAL_DMA_IRQHandler+0xce8>
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80bf 	beq.w	8004fec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2202      	movs	r2, #2
 8004e78:	409a      	lsls	r2, r3
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d018      	beq.n	8004eba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 813a 	beq.w	8005110 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ea4:	e134      	b.n	8005110 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 8130 	beq.w	8005110 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb8:	e12a      	b.n	8005110 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d168      	bne.n	8004f96 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a38      	ldr	r2, [pc, #224]	; (8004fac <HAL_DMA_IRQHandler+0xca8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d04a      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a37      	ldr	r2, [pc, #220]	; (8004fb0 <HAL_DMA_IRQHandler+0xcac>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d045      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a35      	ldr	r2, [pc, #212]	; (8004fb4 <HAL_DMA_IRQHandler+0xcb0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d040      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a34      	ldr	r2, [pc, #208]	; (8004fb8 <HAL_DMA_IRQHandler+0xcb4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d03b      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a32      	ldr	r2, [pc, #200]	; (8004fbc <HAL_DMA_IRQHandler+0xcb8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d036      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a31      	ldr	r2, [pc, #196]	; (8004fc0 <HAL_DMA_IRQHandler+0xcbc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d031      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a2f      	ldr	r2, [pc, #188]	; (8004fc4 <HAL_DMA_IRQHandler+0xcc0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d02c      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2e      	ldr	r2, [pc, #184]	; (8004fc8 <HAL_DMA_IRQHandler+0xcc4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d027      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2c      	ldr	r2, [pc, #176]	; (8004fcc <HAL_DMA_IRQHandler+0xcc8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d022      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2b      	ldr	r2, [pc, #172]	; (8004fd0 <HAL_DMA_IRQHandler+0xccc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d01d      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a29      	ldr	r2, [pc, #164]	; (8004fd4 <HAL_DMA_IRQHandler+0xcd0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d018      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a28      	ldr	r2, [pc, #160]	; (8004fd8 <HAL_DMA_IRQHandler+0xcd4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a26      	ldr	r2, [pc, #152]	; (8004fdc <HAL_DMA_IRQHandler+0xcd8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00e      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a25      	ldr	r2, [pc, #148]	; (8004fe0 <HAL_DMA_IRQHandler+0xcdc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d009      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a23      	ldr	r2, [pc, #140]	; (8004fe4 <HAL_DMA_IRQHandler+0xce0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_DMA_IRQHandler+0xc60>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_DMA_IRQHandler+0xce4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d108      	bne.n	8004f76 <HAL_DMA_IRQHandler+0xc72>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0214 	bic.w	r2, r2, #20
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	e007      	b.n	8004f86 <HAL_DMA_IRQHandler+0xc82>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 020a 	bic.w	r2, r2, #10
 8004f84:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80b8 	beq.w	8005110 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa8:	e0b2      	b.n	8005110 <HAL_DMA_IRQHandler+0xe0c>
 8004faa:	bf00      	nop
 8004fac:	40020010 	.word	0x40020010
 8004fb0:	40020028 	.word	0x40020028
 8004fb4:	40020040 	.word	0x40020040
 8004fb8:	40020058 	.word	0x40020058
 8004fbc:	40020070 	.word	0x40020070
 8004fc0:	40020088 	.word	0x40020088
 8004fc4:	400200a0 	.word	0x400200a0
 8004fc8:	400200b8 	.word	0x400200b8
 8004fcc:	40020410 	.word	0x40020410
 8004fd0:	40020428 	.word	0x40020428
 8004fd4:	40020440 	.word	0x40020440
 8004fd8:	40020458 	.word	0x40020458
 8004fdc:	40020470 	.word	0x40020470
 8004fe0:	40020488 	.word	0x40020488
 8004fe4:	400204a0 	.word	0x400204a0
 8004fe8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8088 	beq.w	8005112 <HAL_DMA_IRQHandler+0xe0e>
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8082 	beq.w	8005112 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a41      	ldr	r2, [pc, #260]	; (8005118 <HAL_DMA_IRQHandler+0xe14>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d04a      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a3f      	ldr	r2, [pc, #252]	; (800511c <HAL_DMA_IRQHandler+0xe18>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d045      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a3e      	ldr	r2, [pc, #248]	; (8005120 <HAL_DMA_IRQHandler+0xe1c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d040      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3c      	ldr	r2, [pc, #240]	; (8005124 <HAL_DMA_IRQHandler+0xe20>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d03b      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a3b      	ldr	r2, [pc, #236]	; (8005128 <HAL_DMA_IRQHandler+0xe24>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d036      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a39      	ldr	r2, [pc, #228]	; (800512c <HAL_DMA_IRQHandler+0xe28>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d031      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a38      	ldr	r2, [pc, #224]	; (8005130 <HAL_DMA_IRQHandler+0xe2c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d02c      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a36      	ldr	r2, [pc, #216]	; (8005134 <HAL_DMA_IRQHandler+0xe30>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d027      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a35      	ldr	r2, [pc, #212]	; (8005138 <HAL_DMA_IRQHandler+0xe34>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d022      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a33      	ldr	r2, [pc, #204]	; (800513c <HAL_DMA_IRQHandler+0xe38>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01d      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a32      	ldr	r2, [pc, #200]	; (8005140 <HAL_DMA_IRQHandler+0xe3c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d018      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a30      	ldr	r2, [pc, #192]	; (8005144 <HAL_DMA_IRQHandler+0xe40>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a2f      	ldr	r2, [pc, #188]	; (8005148 <HAL_DMA_IRQHandler+0xe44>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a2d      	ldr	r2, [pc, #180]	; (800514c <HAL_DMA_IRQHandler+0xe48>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a2c      	ldr	r2, [pc, #176]	; (8005150 <HAL_DMA_IRQHandler+0xe4c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_DMA_IRQHandler+0xdaa>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2a      	ldr	r2, [pc, #168]	; (8005154 <HAL_DMA_IRQHandler+0xe50>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d108      	bne.n	80050c0 <HAL_DMA_IRQHandler+0xdbc>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 021c 	bic.w	r2, r2, #28
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e007      	b.n	80050d0 <HAL_DMA_IRQHandler+0xdcc>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 020e 	bic.w	r2, r2, #14
 80050ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	2201      	movs	r2, #1
 80050da:	409a      	lsls	r2, r3
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d009      	beq.n	8005112 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
 8005106:	e004      	b.n	8005112 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005108:	bf00      	nop
 800510a:	e002      	b.n	8005112 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800510c:	bf00      	nop
 800510e:	e000      	b.n	8005112 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005110:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005112:	3728      	adds	r7, #40	; 0x28
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40020010 	.word	0x40020010
 800511c:	40020028 	.word	0x40020028
 8005120:	40020040 	.word	0x40020040
 8005124:	40020058 	.word	0x40020058
 8005128:	40020070 	.word	0x40020070
 800512c:	40020088 	.word	0x40020088
 8005130:	400200a0 	.word	0x400200a0
 8005134:	400200b8 	.word	0x400200b8
 8005138:	40020410 	.word	0x40020410
 800513c:	40020428 	.word	0x40020428
 8005140:	40020440 	.word	0x40020440
 8005144:	40020458 	.word	0x40020458
 8005148:	40020470 	.word	0x40020470
 800514c:	40020488 	.word	0x40020488
 8005150:	400204a0 	.word	0x400204a0
 8005154:	400204b8 	.word	0x400204b8

08005158 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005166:	b2db      	uxtb	r3, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a84      	ldr	r2, [pc, #528]	; (80053bc <DMA_SetConfig+0x230>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d072      	beq.n	8005296 <DMA_SetConfig+0x10a>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a82      	ldr	r2, [pc, #520]	; (80053c0 <DMA_SetConfig+0x234>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d06d      	beq.n	8005296 <DMA_SetConfig+0x10a>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a81      	ldr	r2, [pc, #516]	; (80053c4 <DMA_SetConfig+0x238>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d068      	beq.n	8005296 <DMA_SetConfig+0x10a>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a7f      	ldr	r2, [pc, #508]	; (80053c8 <DMA_SetConfig+0x23c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d063      	beq.n	8005296 <DMA_SetConfig+0x10a>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a7e      	ldr	r2, [pc, #504]	; (80053cc <DMA_SetConfig+0x240>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d05e      	beq.n	8005296 <DMA_SetConfig+0x10a>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a7c      	ldr	r2, [pc, #496]	; (80053d0 <DMA_SetConfig+0x244>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d059      	beq.n	8005296 <DMA_SetConfig+0x10a>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a7b      	ldr	r2, [pc, #492]	; (80053d4 <DMA_SetConfig+0x248>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d054      	beq.n	8005296 <DMA_SetConfig+0x10a>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a79      	ldr	r2, [pc, #484]	; (80053d8 <DMA_SetConfig+0x24c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d04f      	beq.n	8005296 <DMA_SetConfig+0x10a>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a78      	ldr	r2, [pc, #480]	; (80053dc <DMA_SetConfig+0x250>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d04a      	beq.n	8005296 <DMA_SetConfig+0x10a>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a76      	ldr	r2, [pc, #472]	; (80053e0 <DMA_SetConfig+0x254>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d045      	beq.n	8005296 <DMA_SetConfig+0x10a>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a75      	ldr	r2, [pc, #468]	; (80053e4 <DMA_SetConfig+0x258>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d040      	beq.n	8005296 <DMA_SetConfig+0x10a>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a73      	ldr	r2, [pc, #460]	; (80053e8 <DMA_SetConfig+0x25c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d03b      	beq.n	8005296 <DMA_SetConfig+0x10a>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a72      	ldr	r2, [pc, #456]	; (80053ec <DMA_SetConfig+0x260>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d036      	beq.n	8005296 <DMA_SetConfig+0x10a>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a70      	ldr	r2, [pc, #448]	; (80053f0 <DMA_SetConfig+0x264>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d031      	beq.n	8005296 <DMA_SetConfig+0x10a>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6f      	ldr	r2, [pc, #444]	; (80053f4 <DMA_SetConfig+0x268>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d02c      	beq.n	8005296 <DMA_SetConfig+0x10a>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a6d      	ldr	r2, [pc, #436]	; (80053f8 <DMA_SetConfig+0x26c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d027      	beq.n	8005296 <DMA_SetConfig+0x10a>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6c      	ldr	r2, [pc, #432]	; (80053fc <DMA_SetConfig+0x270>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d022      	beq.n	8005296 <DMA_SetConfig+0x10a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a6a      	ldr	r2, [pc, #424]	; (8005400 <DMA_SetConfig+0x274>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01d      	beq.n	8005296 <DMA_SetConfig+0x10a>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a69      	ldr	r2, [pc, #420]	; (8005404 <DMA_SetConfig+0x278>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d018      	beq.n	8005296 <DMA_SetConfig+0x10a>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a67      	ldr	r2, [pc, #412]	; (8005408 <DMA_SetConfig+0x27c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <DMA_SetConfig+0x10a>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a66      	ldr	r2, [pc, #408]	; (800540c <DMA_SetConfig+0x280>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00e      	beq.n	8005296 <DMA_SetConfig+0x10a>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a64      	ldr	r2, [pc, #400]	; (8005410 <DMA_SetConfig+0x284>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d009      	beq.n	8005296 <DMA_SetConfig+0x10a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a63      	ldr	r2, [pc, #396]	; (8005414 <DMA_SetConfig+0x288>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d004      	beq.n	8005296 <DMA_SetConfig+0x10a>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a61      	ldr	r2, [pc, #388]	; (8005418 <DMA_SetConfig+0x28c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d101      	bne.n	800529a <DMA_SetConfig+0x10e>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <DMA_SetConfig+0x110>
 800529a:	2300      	movs	r3, #0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d004      	beq.n	80052bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a3e      	ldr	r2, [pc, #248]	; (80053bc <DMA_SetConfig+0x230>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d04a      	beq.n	800535c <DMA_SetConfig+0x1d0>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a3d      	ldr	r2, [pc, #244]	; (80053c0 <DMA_SetConfig+0x234>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d045      	beq.n	800535c <DMA_SetConfig+0x1d0>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a3b      	ldr	r2, [pc, #236]	; (80053c4 <DMA_SetConfig+0x238>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d040      	beq.n	800535c <DMA_SetConfig+0x1d0>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3a      	ldr	r2, [pc, #232]	; (80053c8 <DMA_SetConfig+0x23c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d03b      	beq.n	800535c <DMA_SetConfig+0x1d0>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a38      	ldr	r2, [pc, #224]	; (80053cc <DMA_SetConfig+0x240>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d036      	beq.n	800535c <DMA_SetConfig+0x1d0>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a37      	ldr	r2, [pc, #220]	; (80053d0 <DMA_SetConfig+0x244>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d031      	beq.n	800535c <DMA_SetConfig+0x1d0>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a35      	ldr	r2, [pc, #212]	; (80053d4 <DMA_SetConfig+0x248>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d02c      	beq.n	800535c <DMA_SetConfig+0x1d0>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a34      	ldr	r2, [pc, #208]	; (80053d8 <DMA_SetConfig+0x24c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d027      	beq.n	800535c <DMA_SetConfig+0x1d0>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a32      	ldr	r2, [pc, #200]	; (80053dc <DMA_SetConfig+0x250>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d022      	beq.n	800535c <DMA_SetConfig+0x1d0>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a31      	ldr	r2, [pc, #196]	; (80053e0 <DMA_SetConfig+0x254>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01d      	beq.n	800535c <DMA_SetConfig+0x1d0>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <DMA_SetConfig+0x258>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d018      	beq.n	800535c <DMA_SetConfig+0x1d0>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2e      	ldr	r2, [pc, #184]	; (80053e8 <DMA_SetConfig+0x25c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d013      	beq.n	800535c <DMA_SetConfig+0x1d0>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2c      	ldr	r2, [pc, #176]	; (80053ec <DMA_SetConfig+0x260>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00e      	beq.n	800535c <DMA_SetConfig+0x1d0>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2b      	ldr	r2, [pc, #172]	; (80053f0 <DMA_SetConfig+0x264>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d009      	beq.n	800535c <DMA_SetConfig+0x1d0>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <DMA_SetConfig+0x268>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <DMA_SetConfig+0x1d0>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a28      	ldr	r2, [pc, #160]	; (80053f8 <DMA_SetConfig+0x26c>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d101      	bne.n	8005360 <DMA_SetConfig+0x1d4>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <DMA_SetConfig+0x1d6>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d05a      	beq.n	800541c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536a:	f003 031f 	and.w	r3, r3, #31
 800536e:	223f      	movs	r2, #63	; 0x3f
 8005370:	409a      	lsls	r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005384:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d108      	bne.n	80053a8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053a6:	e087      	b.n	80054b8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]
}
 80053b8:	e07e      	b.n	80054b8 <DMA_SetConfig+0x32c>
 80053ba:	bf00      	nop
 80053bc:	40020010 	.word	0x40020010
 80053c0:	40020028 	.word	0x40020028
 80053c4:	40020040 	.word	0x40020040
 80053c8:	40020058 	.word	0x40020058
 80053cc:	40020070 	.word	0x40020070
 80053d0:	40020088 	.word	0x40020088
 80053d4:	400200a0 	.word	0x400200a0
 80053d8:	400200b8 	.word	0x400200b8
 80053dc:	40020410 	.word	0x40020410
 80053e0:	40020428 	.word	0x40020428
 80053e4:	40020440 	.word	0x40020440
 80053e8:	40020458 	.word	0x40020458
 80053ec:	40020470 	.word	0x40020470
 80053f0:	40020488 	.word	0x40020488
 80053f4:	400204a0 	.word	0x400204a0
 80053f8:	400204b8 	.word	0x400204b8
 80053fc:	58025408 	.word	0x58025408
 8005400:	5802541c 	.word	0x5802541c
 8005404:	58025430 	.word	0x58025430
 8005408:	58025444 	.word	0x58025444
 800540c:	58025458 	.word	0x58025458
 8005410:	5802546c 	.word	0x5802546c
 8005414:	58025480 	.word	0x58025480
 8005418:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a28      	ldr	r2, [pc, #160]	; (80054c4 <DMA_SetConfig+0x338>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d022      	beq.n	800546c <DMA_SetConfig+0x2e0>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a27      	ldr	r2, [pc, #156]	; (80054c8 <DMA_SetConfig+0x33c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d01d      	beq.n	800546c <DMA_SetConfig+0x2e0>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a25      	ldr	r2, [pc, #148]	; (80054cc <DMA_SetConfig+0x340>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d018      	beq.n	800546c <DMA_SetConfig+0x2e0>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a24      	ldr	r2, [pc, #144]	; (80054d0 <DMA_SetConfig+0x344>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <DMA_SetConfig+0x2e0>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a22      	ldr	r2, [pc, #136]	; (80054d4 <DMA_SetConfig+0x348>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00e      	beq.n	800546c <DMA_SetConfig+0x2e0>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a21      	ldr	r2, [pc, #132]	; (80054d8 <DMA_SetConfig+0x34c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d009      	beq.n	800546c <DMA_SetConfig+0x2e0>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1f      	ldr	r2, [pc, #124]	; (80054dc <DMA_SetConfig+0x350>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <DMA_SetConfig+0x2e0>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <DMA_SetConfig+0x354>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <DMA_SetConfig+0x2e4>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <DMA_SetConfig+0x2e6>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d020      	beq.n	80054b8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	2201      	movs	r2, #1
 8005480:	409a      	lsls	r2, r3
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b40      	cmp	r3, #64	; 0x40
 8005494:	d108      	bne.n	80054a8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	60da      	str	r2, [r3, #12]
}
 80054a6:	e007      	b.n	80054b8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	60da      	str	r2, [r3, #12]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	58025408 	.word	0x58025408
 80054c8:	5802541c 	.word	0x5802541c
 80054cc:	58025430 	.word	0x58025430
 80054d0:	58025444 	.word	0x58025444
 80054d4:	58025458 	.word	0x58025458
 80054d8:	5802546c 	.word	0x5802546c
 80054dc:	58025480 	.word	0x58025480
 80054e0:	58025494 	.word	0x58025494

080054e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a42      	ldr	r2, [pc, #264]	; (80055fc <DMA_CalcBaseAndBitshift+0x118>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d04a      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a41      	ldr	r2, [pc, #260]	; (8005600 <DMA_CalcBaseAndBitshift+0x11c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d045      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a3f      	ldr	r2, [pc, #252]	; (8005604 <DMA_CalcBaseAndBitshift+0x120>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d040      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a3e      	ldr	r2, [pc, #248]	; (8005608 <DMA_CalcBaseAndBitshift+0x124>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d03b      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a3c      	ldr	r2, [pc, #240]	; (800560c <DMA_CalcBaseAndBitshift+0x128>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d036      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a3b      	ldr	r2, [pc, #236]	; (8005610 <DMA_CalcBaseAndBitshift+0x12c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d031      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a39      	ldr	r2, [pc, #228]	; (8005614 <DMA_CalcBaseAndBitshift+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d02c      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a38      	ldr	r2, [pc, #224]	; (8005618 <DMA_CalcBaseAndBitshift+0x134>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d027      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a36      	ldr	r2, [pc, #216]	; (800561c <DMA_CalcBaseAndBitshift+0x138>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d022      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a35      	ldr	r2, [pc, #212]	; (8005620 <DMA_CalcBaseAndBitshift+0x13c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d01d      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a33      	ldr	r2, [pc, #204]	; (8005624 <DMA_CalcBaseAndBitshift+0x140>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d018      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a32      	ldr	r2, [pc, #200]	; (8005628 <DMA_CalcBaseAndBitshift+0x144>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d013      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a30      	ldr	r2, [pc, #192]	; (800562c <DMA_CalcBaseAndBitshift+0x148>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00e      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a2f      	ldr	r2, [pc, #188]	; (8005630 <DMA_CalcBaseAndBitshift+0x14c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d009      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2d      	ldr	r2, [pc, #180]	; (8005634 <DMA_CalcBaseAndBitshift+0x150>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d004      	beq.n	800558c <DMA_CalcBaseAndBitshift+0xa8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a2c      	ldr	r2, [pc, #176]	; (8005638 <DMA_CalcBaseAndBitshift+0x154>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d101      	bne.n	8005590 <DMA_CalcBaseAndBitshift+0xac>
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <DMA_CalcBaseAndBitshift+0xae>
 8005590:	2300      	movs	r3, #0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d024      	beq.n	80055e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	3b10      	subs	r3, #16
 800559e:	4a27      	ldr	r2, [pc, #156]	; (800563c <DMA_CalcBaseAndBitshift+0x158>)
 80055a0:	fba2 2303 	umull	r2, r3, r2, r3
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	4a24      	ldr	r2, [pc, #144]	; (8005640 <DMA_CalcBaseAndBitshift+0x15c>)
 80055b0:	5cd3      	ldrb	r3, [r2, r3]
 80055b2:	461a      	mov	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d908      	bls.n	80055d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	4b1f      	ldr	r3, [pc, #124]	; (8005644 <DMA_CalcBaseAndBitshift+0x160>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	1d1a      	adds	r2, r3, #4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	659a      	str	r2, [r3, #88]	; 0x58
 80055ce:	e00d      	b.n	80055ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <DMA_CalcBaseAndBitshift+0x160>)
 80055d8:	4013      	ands	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6593      	str	r3, [r2, #88]	; 0x58
 80055de:	e005      	b.n	80055ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40020010 	.word	0x40020010
 8005600:	40020028 	.word	0x40020028
 8005604:	40020040 	.word	0x40020040
 8005608:	40020058 	.word	0x40020058
 800560c:	40020070 	.word	0x40020070
 8005610:	40020088 	.word	0x40020088
 8005614:	400200a0 	.word	0x400200a0
 8005618:	400200b8 	.word	0x400200b8
 800561c:	40020410 	.word	0x40020410
 8005620:	40020428 	.word	0x40020428
 8005624:	40020440 	.word	0x40020440
 8005628:	40020458 	.word	0x40020458
 800562c:	40020470 	.word	0x40020470
 8005630:	40020488 	.word	0x40020488
 8005634:	400204a0 	.word	0x400204a0
 8005638:	400204b8 	.word	0x400204b8
 800563c:	aaaaaaab 	.word	0xaaaaaaab
 8005640:	08010ba8 	.word	0x08010ba8
 8005644:	fffffc00 	.word	0xfffffc00

08005648 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d120      	bne.n	800569e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	2b03      	cmp	r3, #3
 8005662:	d858      	bhi.n	8005716 <DMA_CheckFifoParam+0xce>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <DMA_CheckFifoParam+0x24>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	0800567d 	.word	0x0800567d
 8005670:	0800568f 	.word	0x0800568f
 8005674:	0800567d 	.word	0x0800567d
 8005678:	08005717 	.word	0x08005717
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d048      	beq.n	800571a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800568c:	e045      	b.n	800571a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005696:	d142      	bne.n	800571e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800569c:	e03f      	b.n	800571e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a6:	d123      	bne.n	80056f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d838      	bhi.n	8005722 <DMA_CheckFifoParam+0xda>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <DMA_CheckFifoParam+0x70>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056c9 	.word	0x080056c9
 80056bc:	080056cf 	.word	0x080056cf
 80056c0:	080056c9 	.word	0x080056c9
 80056c4:	080056e1 	.word	0x080056e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	73fb      	strb	r3, [r7, #15]
        break;
 80056cc:	e030      	b.n	8005730 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d025      	beq.n	8005726 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056de:	e022      	b.n	8005726 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056e8:	d11f      	bne.n	800572a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056ee:	e01c      	b.n	800572a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d902      	bls.n	80056fe <DMA_CheckFifoParam+0xb6>
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d003      	beq.n	8005704 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056fc:	e018      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
        break;
 8005702:	e015      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00e      	beq.n	800572e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
    break;
 8005714:	e00b      	b.n	800572e <DMA_CheckFifoParam+0xe6>
        break;
 8005716:	bf00      	nop
 8005718:	e00a      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
        break;
 800571a:	bf00      	nop
 800571c:	e008      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
        break;
 800571e:	bf00      	nop
 8005720:	e006      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
        break;
 8005722:	bf00      	nop
 8005724:	e004      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
        break;
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
        break;
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <DMA_CheckFifoParam+0xe8>
    break;
 800572e:	bf00      	nop
    }
  }

  return status;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop

08005740 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a38      	ldr	r2, [pc, #224]	; (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d022      	beq.n	800579e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a36      	ldr	r2, [pc, #216]	; (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01d      	beq.n	800579e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a35      	ldr	r2, [pc, #212]	; (800583c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d018      	beq.n	800579e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a33      	ldr	r2, [pc, #204]	; (8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a32      	ldr	r2, [pc, #200]	; (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00e      	beq.n	800579e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a30      	ldr	r2, [pc, #192]	; (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d009      	beq.n	800579e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a2f      	ldr	r2, [pc, #188]	; (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a2d      	ldr	r2, [pc, #180]	; (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d101      	bne.n	80057a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80057a2:	2300      	movs	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01a      	beq.n	80057de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	3b08      	subs	r3, #8
 80057b0:	4a28      	ldr	r2, [pc, #160]	; (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4b26      	ldr	r3, [pc, #152]	; (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a24      	ldr	r2, [pc, #144]	; (800585c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 031f 	and.w	r3, r3, #31
 80057d4:	2201      	movs	r2, #1
 80057d6:	409a      	lsls	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057dc:	e024      	b.n	8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	3b10      	subs	r3, #16
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057e8:	fba2 2303 	umull	r2, r3, r2, r3
 80057ec:	091b      	lsrs	r3, r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d806      	bhi.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d902      	bls.n	8005806 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3308      	adds	r3, #8
 8005804:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4b18      	ldr	r3, [pc, #96]	; (800586c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	461a      	mov	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a16      	ldr	r2, [pc, #88]	; (8005870 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005818:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 031f 	and.w	r3, r3, #31
 8005820:	2201      	movs	r2, #1
 8005822:	409a      	lsls	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	58025408 	.word	0x58025408
 8005838:	5802541c 	.word	0x5802541c
 800583c:	58025430 	.word	0x58025430
 8005840:	58025444 	.word	0x58025444
 8005844:	58025458 	.word	0x58025458
 8005848:	5802546c 	.word	0x5802546c
 800584c:	58025480 	.word	0x58025480
 8005850:	58025494 	.word	0x58025494
 8005854:	cccccccd 	.word	0xcccccccd
 8005858:	16009600 	.word	0x16009600
 800585c:	58025880 	.word	0x58025880
 8005860:	aaaaaaab 	.word	0xaaaaaaab
 8005864:	400204b8 	.word	0x400204b8
 8005868:	4002040f 	.word	0x4002040f
 800586c:	10008200 	.word	0x10008200
 8005870:	40020880 	.word	0x40020880

08005874 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d04a      	beq.n	8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b08      	cmp	r3, #8
 800588e:	d847      	bhi.n	8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a25      	ldr	r2, [pc, #148]	; (800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d022      	beq.n	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a24      	ldr	r2, [pc, #144]	; (8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d01d      	beq.n	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a22      	ldr	r2, [pc, #136]	; (8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d018      	beq.n	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a21      	ldr	r2, [pc, #132]	; (8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d013      	beq.n	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1f      	ldr	r2, [pc, #124]	; (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00e      	beq.n	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d009      	beq.n	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1b      	ldr	r2, [pc, #108]	; (8005948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d101      	bne.n	80058e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	4b17      	ldr	r3, [pc, #92]	; (800594c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a15      	ldr	r2, [pc, #84]	; (8005950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058fc:	671a      	str	r2, [r3, #112]	; 0x70
 80058fe:	e009      	b.n	8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4b14      	ldr	r3, [pc, #80]	; (8005954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	461a      	mov	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a11      	ldr	r2, [pc, #68]	; (8005958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005912:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3b01      	subs	r3, #1
 8005918:	2201      	movs	r2, #1
 800591a:	409a      	lsls	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	58025408 	.word	0x58025408
 8005930:	5802541c 	.word	0x5802541c
 8005934:	58025430 	.word	0x58025430
 8005938:	58025444 	.word	0x58025444
 800593c:	58025458 	.word	0x58025458
 8005940:	5802546c 	.word	0x5802546c
 8005944:	58025480 	.word	0x58025480
 8005948:	58025494 	.word	0x58025494
 800594c:	1600963f 	.word	0x1600963f
 8005950:	58025940 	.word	0x58025940
 8005954:	1000823f 	.word	0x1000823f
 8005958:	40020940 	.word	0x40020940

0800595c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800595c:	b480      	push	{r7}
 800595e:	b089      	sub	sp, #36	; 0x24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800596a:	4b89      	ldr	r3, [pc, #548]	; (8005b90 <HAL_GPIO_Init+0x234>)
 800596c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800596e:	e194      	b.n	8005c9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	2101      	movs	r1, #1
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	4013      	ands	r3, r2
 800597e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8186 	beq.w	8005c94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d00b      	beq.n	80059a8 <HAL_GPIO_Init+0x4c>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d007      	beq.n	80059a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800599c:	2b11      	cmp	r3, #17
 800599e:	d003      	beq.n	80059a8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b12      	cmp	r3, #18
 80059a6:	d130      	bne.n	8005a0a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	2203      	movs	r2, #3
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	43db      	mvns	r3, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4013      	ands	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059de:	2201      	movs	r2, #1
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	091b      	lsrs	r3, r3, #4
 80059f4:	f003 0201 	and.w	r2, r3, #1
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	2203      	movs	r2, #3
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689a      	ldr	r2, [r3, #8]
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d003      	beq.n	8005a4a <HAL_GPIO_Init+0xee>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2b12      	cmp	r3, #18
 8005a48:	d123      	bne.n	8005a92 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	08da      	lsrs	r2, r3, #3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3208      	adds	r2, #8
 8005a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	220f      	movs	r2, #15
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	08da      	lsrs	r2, r3, #3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3208      	adds	r2, #8
 8005a8c:	69b9      	ldr	r1, [r7, #24]
 8005a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	2203      	movs	r2, #3
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	43db      	mvns	r3, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0203 	and.w	r2, r3, #3
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80e0 	beq.w	8005c94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ad4:	4b2f      	ldr	r3, [pc, #188]	; (8005b94 <HAL_GPIO_Init+0x238>)
 8005ad6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ada:	4a2e      	ldr	r2, [pc, #184]	; (8005b94 <HAL_GPIO_Init+0x238>)
 8005adc:	f043 0302 	orr.w	r3, r3, #2
 8005ae0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ae4:	4b2b      	ldr	r3, [pc, #172]	; (8005b94 <HAL_GPIO_Init+0x238>)
 8005ae6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005af2:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <HAL_GPIO_Init+0x23c>)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	3302      	adds	r3, #2
 8005afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	220f      	movs	r2, #15
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	4013      	ands	r3, r2
 8005b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a20      	ldr	r2, [pc, #128]	; (8005b9c <HAL_GPIO_Init+0x240>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d052      	beq.n	8005bc4 <HAL_GPIO_Init+0x268>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1f      	ldr	r2, [pc, #124]	; (8005ba0 <HAL_GPIO_Init+0x244>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d031      	beq.n	8005b8a <HAL_GPIO_Init+0x22e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1e      	ldr	r2, [pc, #120]	; (8005ba4 <HAL_GPIO_Init+0x248>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d02b      	beq.n	8005b86 <HAL_GPIO_Init+0x22a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <HAL_GPIO_Init+0x24c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d025      	beq.n	8005b82 <HAL_GPIO_Init+0x226>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <HAL_GPIO_Init+0x250>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01f      	beq.n	8005b7e <HAL_GPIO_Init+0x222>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <HAL_GPIO_Init+0x254>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d019      	beq.n	8005b7a <HAL_GPIO_Init+0x21e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <HAL_GPIO_Init+0x258>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_GPIO_Init+0x21a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a19      	ldr	r2, [pc, #100]	; (8005bb8 <HAL_GPIO_Init+0x25c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00d      	beq.n	8005b72 <HAL_GPIO_Init+0x216>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_GPIO_Init+0x260>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d007      	beq.n	8005b6e <HAL_GPIO_Init+0x212>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <HAL_GPIO_Init+0x264>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d101      	bne.n	8005b6a <HAL_GPIO_Init+0x20e>
 8005b66:	2309      	movs	r3, #9
 8005b68:	e02d      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	e02b      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b6e:	2308      	movs	r3, #8
 8005b70:	e029      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b72:	2307      	movs	r3, #7
 8005b74:	e027      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b76:	2306      	movs	r3, #6
 8005b78:	e025      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b7a:	2305      	movs	r3, #5
 8005b7c:	e023      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b7e:	2304      	movs	r3, #4
 8005b80:	e021      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b82:	2303      	movs	r3, #3
 8005b84:	e01f      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e01d      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e01b      	b.n	8005bc6 <HAL_GPIO_Init+0x26a>
 8005b8e:	bf00      	nop
 8005b90:	58000080 	.word	0x58000080
 8005b94:	58024400 	.word	0x58024400
 8005b98:	58000400 	.word	0x58000400
 8005b9c:	58020000 	.word	0x58020000
 8005ba0:	58020400 	.word	0x58020400
 8005ba4:	58020800 	.word	0x58020800
 8005ba8:	58020c00 	.word	0x58020c00
 8005bac:	58021000 	.word	0x58021000
 8005bb0:	58021400 	.word	0x58021400
 8005bb4:	58021800 	.word	0x58021800
 8005bb8:	58021c00 	.word	0x58021c00
 8005bbc:	58022000 	.word	0x58022000
 8005bc0:	58022400 	.word	0x58022400
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	f002 0203 	and.w	r2, r2, #3
 8005bcc:	0092      	lsls	r2, r2, #2
 8005bce:	4093      	lsls	r3, r2
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bd6:	4938      	ldr	r1, [pc, #224]	; (8005cb8 <HAL_GPIO_Init+0x35c>)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	089b      	lsrs	r3, r3, #2
 8005bdc:	3302      	adds	r3, #2
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	43db      	mvns	r3, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4013      	ands	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	43db      	mvns	r3, r3
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	3301      	adds	r3, #1
 8005c98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f47f ae63 	bne.w	8005970 <HAL_GPIO_Init+0x14>
  }
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	3724      	adds	r7, #36	; 0x24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	58000400 	.word	0x58000400

08005cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ccc:	787b      	ldrb	r3, [r7, #1]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cd2:	887a      	ldrh	r2, [r7, #2]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cd8:	e003      	b.n	8005ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cda:	887b      	ldrh	r3, [r7, #2]
 8005cdc:	041a      	lsls	r2, r3, #16
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	619a      	str	r2, [r3, #24]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d00:	887a      	ldrh	r2, [r7, #2]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4013      	ands	r3, r2
 8005d06:	041a      	lsls	r2, r3, #16
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	43d9      	mvns	r1, r3
 8005d0c:	887b      	ldrh	r3, [r7, #2]
 8005d0e:	400b      	ands	r3, r1
 8005d10:	431a      	orrs	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	619a      	str	r2, [r3, #24]
}
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e07f      	b.n	8005e36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fb fdf4 	bl	8001938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2224      	movs	r2, #36	; 0x24
 8005d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 0201 	bic.w	r2, r2, #1
 8005d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d107      	bne.n	8005d9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d9a:	609a      	str	r2, [r3, #8]
 8005d9c:	e006      	b.n	8005dac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689a      	ldr	r2, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005daa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d104      	bne.n	8005dbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6859      	ldr	r1, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	; (8005e40 <HAL_I2C_Init+0x11c>)
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ddc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	ea42 0103 	orr.w	r1, r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	021a      	lsls	r2, r3, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69d9      	ldr	r1, [r3, #28]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	02008000 	.word	0x02008000

08005e44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b088      	sub	sp, #32
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	4611      	mov	r1, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	817b      	strh	r3, [r7, #10]
 8005e56:	460b      	mov	r3, r1
 8005e58:	813b      	strh	r3, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	f040 80f9 	bne.w	800605e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_I2C_Mem_Write+0x34>
 8005e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d105      	bne.n	8005e84 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0ed      	b.n	8006060 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_I2C_Mem_Write+0x4e>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e0e6      	b.n	8006060 <HAL_I2C_Mem_Write+0x21c>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e9a:	f7fc fdbf 	bl	8002a1c <HAL_GetTick>
 8005e9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	2319      	movs	r3, #25
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f001 fee3 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0d1      	b.n	8006060 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2221      	movs	r2, #33	; 0x21
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2240      	movs	r2, #64	; 0x40
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a3a      	ldr	r2, [r7, #32]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ee4:	88f8      	ldrh	r0, [r7, #6]
 8005ee6:	893a      	ldrh	r2, [r7, #8]
 8005ee8:	8979      	ldrh	r1, [r7, #10]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 ff23 	bl	8006d40 <I2C_RequestMemoryWrite>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0a9      	b.n	8006060 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2bff      	cmp	r3, #255	; 0xff
 8005f14:	d90e      	bls.n	8005f34 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	8979      	ldrh	r1, [r7, #10]
 8005f24:	2300      	movs	r3, #0
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f001 ffc5 	bl	8007ebc <I2C_TransferConfig>
 8005f32:	e00f      	b.n	8005f54 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	8979      	ldrh	r1, [r7, #10]
 8005f46:	2300      	movs	r3, #0
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f001 ffb4 	bl	8007ebc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f001 fecd 	bl	8007cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e07b      	b.n	8006060 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d034      	beq.n	800600c <HAL_I2C_Mem_Write+0x1c8>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d130      	bne.n	800600c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	2180      	movs	r1, #128	; 0x80
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f001 fe5f 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e04d      	b.n	8006060 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2bff      	cmp	r3, #255	; 0xff
 8005fcc:	d90e      	bls.n	8005fec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	22ff      	movs	r2, #255	; 0xff
 8005fd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	8979      	ldrh	r1, [r7, #10]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f001 ff69 	bl	8007ebc <I2C_TransferConfig>
 8005fea:	e00f      	b.n	800600c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	8979      	ldrh	r1, [r7, #10]
 8005ffe:	2300      	movs	r3, #0
 8006000:	9300      	str	r3, [sp, #0]
 8006002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f001 ff58 	bl	8007ebc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d19e      	bne.n	8005f54 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f001 feac 	bl	8007d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e01a      	b.n	8006060 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2220      	movs	r2, #32
 8006030:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6859      	ldr	r1, [r3, #4]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <HAL_I2C_Mem_Write+0x224>)
 800603e:	400b      	ands	r3, r1
 8006040:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800605e:	2302      	movs	r3, #2
  }
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	fe00e800 	.word	0xfe00e800

0800606c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	4608      	mov	r0, r1
 8006076:	4611      	mov	r1, r2
 8006078:	461a      	mov	r2, r3
 800607a:	4603      	mov	r3, r0
 800607c:	817b      	strh	r3, [r7, #10]
 800607e:	460b      	mov	r3, r1
 8006080:	813b      	strh	r3, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b20      	cmp	r3, #32
 8006090:	f040 80fd 	bne.w	800628e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_I2C_Mem_Read+0x34>
 800609a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	d105      	bne.n	80060ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0f1      	b.n	8006290 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_I2C_Mem_Read+0x4e>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e0ea      	b.n	8006290 <HAL_I2C_Mem_Read+0x224>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060c2:	f7fc fcab 	bl	8002a1c <HAL_GetTick>
 80060c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	2319      	movs	r3, #25
 80060ce:	2201      	movs	r2, #1
 80060d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f001 fdcf 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0d5      	b.n	8006290 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2222      	movs	r2, #34	; 0x22
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2240      	movs	r2, #64	; 0x40
 80060f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800610c:	88f8      	ldrh	r0, [r7, #6]
 800610e:	893a      	ldrh	r2, [r7, #8]
 8006110:	8979      	ldrh	r1, [r7, #10]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	4603      	mov	r3, r0
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fe63 	bl	8006de8 <I2C_RequestMemoryRead>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0ad      	b.n	8006290 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	2bff      	cmp	r3, #255	; 0xff
 800613c:	d90e      	bls.n	800615c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	22ff      	movs	r2, #255	; 0xff
 8006142:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006148:	b2da      	uxtb	r2, r3
 800614a:	8979      	ldrh	r1, [r7, #10]
 800614c:	4b52      	ldr	r3, [pc, #328]	; (8006298 <HAL_I2C_Mem_Read+0x22c>)
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f001 feb1 	bl	8007ebc <I2C_TransferConfig>
 800615a:	e00f      	b.n	800617c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616a:	b2da      	uxtb	r2, r3
 800616c:	8979      	ldrh	r1, [r7, #10]
 800616e:	4b4a      	ldr	r3, [pc, #296]	; (8006298 <HAL_I2C_Mem_Read+0x22c>)
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f001 fea0 	bl	8007ebc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2200      	movs	r2, #0
 8006184:	2104      	movs	r1, #4
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f001 fd76 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e07c      	b.n	8006290 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d034      	beq.n	800623c <HAL_I2C_Mem_Read+0x1d0>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d130      	bne.n	800623c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	2200      	movs	r2, #0
 80061e2:	2180      	movs	r1, #128	; 0x80
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f001 fd47 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e04d      	b.n	8006290 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2bff      	cmp	r3, #255	; 0xff
 80061fc:	d90e      	bls.n	800621c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	22ff      	movs	r2, #255	; 0xff
 8006202:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006208:	b2da      	uxtb	r2, r3
 800620a:	8979      	ldrh	r1, [r7, #10]
 800620c:	2300      	movs	r3, #0
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f001 fe51 	bl	8007ebc <I2C_TransferConfig>
 800621a:	e00f      	b.n	800623c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	b2da      	uxtb	r2, r3
 800622c:	8979      	ldrh	r1, [r7, #10]
 800622e:	2300      	movs	r3, #0
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f001 fe40 	bl	8007ebc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d19a      	bne.n	800617c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f001 fd94 	bl	8007d78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e01a      	b.n	8006290 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2220      	movs	r2, #32
 8006260:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b0b      	ldr	r3, [pc, #44]	; (800629c <HAL_I2C_Mem_Read+0x230>)
 800626e:	400b      	ands	r3, r1
 8006270:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e000      	b.n	8006290 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800628e:	2302      	movs	r3, #2
  }
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	80002400 	.word	0x80002400
 800629c:	fe00e800 	.word	0xfe00e800

080062a0 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	4608      	mov	r0, r1
 80062aa:	4611      	mov	r1, r2
 80062ac:	461a      	mov	r2, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	817b      	strh	r3, [r7, #10]
 80062b2:	460b      	mov	r3, r1
 80062b4:	813b      	strh	r3, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	f040 80d5 	bne.w	8006472 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_I2C_Mem_Read_DMA+0x34>
 80062ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d105      	bne.n	80062e0 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0c9      	b.n	8006474 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ee:	d101      	bne.n	80062f4 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80062f0:	2302      	movs	r3, #2
 80062f2:	e0bf      	b.n	8006474 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_I2C_Mem_Read_DMA+0x62>
 80062fe:	2302      	movs	r3, #2
 8006300:	e0b8      	b.n	8006474 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800630a:	f7fc fb87 	bl	8002a1c <HAL_GetTick>
 800630e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2222      	movs	r2, #34	; 0x22
 8006314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2240      	movs	r2, #64	; 0x40
 800631c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a51      	ldr	r2, [pc, #324]	; (800647c <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4a51      	ldr	r2, [pc, #324]	; (8006480 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 800633c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006342:	b29b      	uxth	r3, r3
 8006344:	2bff      	cmp	r3, #255	; 0xff
 8006346:	d906      	bls.n	8006356 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	22ff      	movs	r2, #255	; 0xff
 800634c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800634e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	e007      	b.n	8006366 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006364:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006366:	88f8      	ldrh	r0, [r7, #6]
 8006368:	893a      	ldrh	r2, [r7, #8]
 800636a:	8979      	ldrh	r1, [r7, #10]
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	9301      	str	r3, [sp, #4]
 8006370:	2319      	movs	r3, #25
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	4603      	mov	r3, r0
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fd36 	bl	8006de8 <I2C_RequestMemoryRead>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d005      	beq.n	800638e <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e072      	b.n	8006474 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d020      	beq.n	80063d8 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800639a:	4a3a      	ldr	r2, [pc, #232]	; (8006484 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 800639c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	4a39      	ldr	r2, [pc, #228]	; (8006488 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 80063a4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063aa:	2200      	movs	r2, #0
 80063ac:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	2200      	movs	r2, #0
 80063b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3324      	adds	r3, #36	; 0x24
 80063c0:	4619      	mov	r1, r3
 80063c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c8:	f7fc ffd0 	bl	800336c <HAL_DMA_Start_IT>
 80063cc:	4603      	mov	r3, r0
 80063ce:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d139      	bne.n	800644a <HAL_I2C_Mem_Read_DMA+0x1aa>
 80063d6:	e013      	b.n	8006400 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e039      	b.n	8006474 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006404:	b2da      	uxtb	r2, r3
 8006406:	8979      	ldrh	r1, [r7, #10]
 8006408:	4b20      	ldr	r3, [pc, #128]	; (800648c <HAL_I2C_Mem_Read_DMA+0x1ec>)
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f001 fd54 	bl	8007ebc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	b29a      	uxth	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800642e:	2110      	movs	r1, #16
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f001 fd71 	bl	8007f18 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006444:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	e014      	b.n	8006474 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645e:	f043 0210 	orr.w	r2, r3, #16
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8006472:	2302      	movs	r3, #2
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	3720      	adds	r7, #32
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	ffff0000 	.word	0xffff0000
 8006480:	0800679b 	.word	0x0800679b
 8006484:	08007937 	.word	0x08007937
 8006488:	080079cd 	.word	0x080079cd
 800648c:	80002400 	.word	0x80002400

08006490 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	68f9      	ldr	r1, [r7, #12]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	4798      	blx	r3
  }
}
 80064bc:	bf00      	nop
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	70fb      	strb	r3, [r7, #3]
 8006520:	4613      	mov	r3, r2
 8006522:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <I2C_Slave_ISR_IT+0x24>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e0ec      	b.n	8006792 <I2C_Slave_ISR_IT+0x1fe>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	095b      	lsrs	r3, r3, #5
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d009      	beq.n	80065e0 <I2C_Slave_ISR_IT+0x4c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80065d8:	6939      	ldr	r1, [r7, #16]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fe42 	bl	8007264 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	091b      	lsrs	r3, r3, #4
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d04d      	beq.n	8006688 <I2C_Slave_ISR_IT+0xf4>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	091b      	lsrs	r3, r3, #4
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d047      	beq.n	8006688 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d128      	bne.n	8006654 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b28      	cmp	r3, #40	; 0x28
 800660c:	d108      	bne.n	8006620 <I2C_Slave_ISR_IT+0x8c>
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006614:	d104      	bne.n	8006620 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006616:	6939      	ldr	r1, [r7, #16]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f001 f81b 	bl	8007654 <I2C_ITListenCplt>
 800661e:	e032      	b.n	8006686 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b29      	cmp	r3, #41	; 0x29
 800662a:	d10e      	bne.n	800664a <I2C_Slave_ISR_IT+0xb6>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006632:	d00a      	beq.n	800664a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2210      	movs	r2, #16
 800663a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f001 f956 	bl	80078ee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fce5 	bl	8007012 <I2C_ITSlaveSeqCplt>
 8006648:	e01d      	b.n	8006686 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2210      	movs	r2, #16
 8006650:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006652:	e096      	b.n	8006782 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2210      	movs	r2, #16
 800665a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006660:	f043 0204 	orr.w	r2, r3, #4
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d004      	beq.n	8006678 <I2C_Slave_ISR_IT+0xe4>
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006674:	f040 8085 	bne.w	8006782 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	4619      	mov	r1, r3
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f001 f83e 	bl	8007700 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006684:	e07d      	b.n	8006782 <I2C_Slave_ISR_IT+0x1ee>
 8006686:	e07c      	b.n	8006782 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	089b      	lsrs	r3, r3, #2
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d030      	beq.n	80066f6 <I2C_Slave_ISR_IT+0x162>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	089b      	lsrs	r3, r3, #2
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d02a      	beq.n	80066f6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d018      	beq.n	80066dc <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d14f      	bne.n	8006786 <I2C_Slave_ISR_IT+0x1f2>
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066ec:	d04b      	beq.n	8006786 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fc8f 	bl	8007012 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80066f4:	e047      	b.n	8006786 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	08db      	lsrs	r3, r3, #3
 8006706:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800670a:	2b00      	cmp	r3, #0
 800670c:	d004      	beq.n	8006718 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800670e:	6939      	ldr	r1, [r7, #16]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 fbbd 	bl	8006e90 <I2C_ITAddrCplt>
 8006716:	e037      	b.n	8006788 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d031      	beq.n	8006788 <I2C_Slave_ISR_IT+0x1f4>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d02b      	beq.n	8006788 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d018      	beq.n	800676c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	781a      	ldrb	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	851a      	strh	r2, [r3, #40]	; 0x28
 800676a:	e00d      	b.n	8006788 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006772:	d002      	beq.n	800677a <I2C_Slave_ISR_IT+0x1e6>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d106      	bne.n	8006788 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fc49 	bl	8007012 <I2C_ITSlaveSeqCplt>
 8006780:	e002      	b.n	8006788 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006782:	bf00      	nop
 8006784:	e000      	b.n	8006788 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8006786:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b088      	sub	sp, #32
 800679e:	af02      	add	r7, sp, #8
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d101      	bne.n	80067b4 <I2C_Master_ISR_DMA+0x1a>
 80067b0:	2302      	movs	r3, #2
 80067b2:	e0e1      	b.n	8006978 <I2C_Master_ISR_DMA+0x1de>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	091b      	lsrs	r3, r3, #4
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d017      	beq.n	80067f8 <I2C_Master_ISR_DMA+0x5e>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	091b      	lsrs	r3, r3, #4
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d011      	beq.n	80067f8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2210      	movs	r2, #16
 80067da:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e0:	f043 0204 	orr.w	r2, r3, #4
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80067e8:	2120      	movs	r1, #32
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f001 fb94 	bl	8007f18 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f001 f87c 	bl	80078ee <I2C_Flush_TXDR>
 80067f6:	e0ba      	b.n	800696e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	09db      	lsrs	r3, r3, #7
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d072      	beq.n	80068ea <I2C_Master_ISR_DMA+0x150>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d06c      	beq.n	80068ea <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800681e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d04e      	beq.n	80068c8 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006836:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	2bff      	cmp	r3, #255	; 0xff
 8006840:	d906      	bls.n	8006850 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	22ff      	movs	r2, #255	; 0xff
 8006846:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	e010      	b.n	8006872 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006862:	d003      	beq.n	800686c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	e002      	b.n	8006872 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800686c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006870:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	b2da      	uxtb	r2, r3
 8006878:	8a79      	ldrh	r1, [r7, #18]
 800687a:	2300      	movs	r3, #0
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f001 fb1b 	bl	8007ebc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	b29a      	uxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b22      	cmp	r3, #34	; 0x22
 80068a2:	d108      	bne.n	80068b6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80068b4:	e05b      	b.n	800696e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80068c6:	e052      	b.n	800696e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d6:	d003      	beq.n	80068e0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 fb5d 	bl	8006f98 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80068de:	e046      	b.n	800696e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80068e0:	2140      	movs	r1, #64	; 0x40
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 ff0c 	bl	8007700 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80068e8:	e041      	b.n	800696e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	099b      	lsrs	r3, r3, #6
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d029      	beq.n	800694a <I2C_Master_ISR_DMA+0x1b0>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	099b      	lsrs	r3, r3, #6
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d023      	beq.n	800694a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d119      	bne.n	8006940 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006916:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800691a:	d027      	beq.n	800696c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006924:	d108      	bne.n	8006938 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006934:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006936:	e019      	b.n	800696c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fb2d 	bl	8006f98 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800693e:	e015      	b.n	800696c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006940:	2140      	movs	r1, #64	; 0x40
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fedc 	bl	8007700 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006948:	e010      	b.n	800696c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <I2C_Master_ISR_DMA+0x1d4>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	095b      	lsrs	r3, r3, #5
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 fbb3 	bl	80070d0 <I2C_ITMasterCplt>
 800696a:	e000      	b.n	800696e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800696c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <I2C_Slave_ISR_DMA+0x24>
 80069a0:	2302      	movs	r3, #2
 80069a2:	e1c8      	b.n	8006d36 <I2C_Slave_ISR_DMA+0x3b6>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d009      	beq.n	80069cc <I2C_Slave_ISR_DMA+0x4c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 fc4c 	bl	8007264 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	091b      	lsrs	r3, r3, #4
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 8199 	beq.w	8006d0c <I2C_Slave_ISR_DMA+0x38c>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	091b      	lsrs	r3, r3, #4
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 8192 	beq.w	8006d0c <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	0b9b      	lsrs	r3, r3, #14
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	0bdb      	lsrs	r3, r3, #15
 80069f8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 817e 	beq.w	8006cfe <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d07c      	beq.n	8006b04 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	0bdb      	lsrs	r3, r3, #15
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d076      	beq.n	8006b04 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a8d      	ldr	r2, [pc, #564]	; (8006c54 <I2C_Slave_ISR_DMA+0x2d4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d059      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a8b      	ldr	r2, [pc, #556]	; (8006c58 <I2C_Slave_ISR_DMA+0x2d8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d053      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a89      	ldr	r2, [pc, #548]	; (8006c5c <I2C_Slave_ISR_DMA+0x2dc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d04d      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a87      	ldr	r2, [pc, #540]	; (8006c60 <I2C_Slave_ISR_DMA+0x2e0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d047      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a85      	ldr	r2, [pc, #532]	; (8006c64 <I2C_Slave_ISR_DMA+0x2e4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d041      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a83      	ldr	r2, [pc, #524]	; (8006c68 <I2C_Slave_ISR_DMA+0x2e8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d03b      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a81      	ldr	r2, [pc, #516]	; (8006c6c <I2C_Slave_ISR_DMA+0x2ec>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d035      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a7f      	ldr	r2, [pc, #508]	; (8006c70 <I2C_Slave_ISR_DMA+0x2f0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d02f      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a7d      	ldr	r2, [pc, #500]	; (8006c74 <I2C_Slave_ISR_DMA+0x2f4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d029      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a7b      	ldr	r2, [pc, #492]	; (8006c78 <I2C_Slave_ISR_DMA+0x2f8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d023      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a79      	ldr	r2, [pc, #484]	; (8006c7c <I2C_Slave_ISR_DMA+0x2fc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01d      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a77      	ldr	r2, [pc, #476]	; (8006c80 <I2C_Slave_ISR_DMA+0x300>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d017      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a75      	ldr	r2, [pc, #468]	; (8006c84 <I2C_Slave_ISR_DMA+0x304>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d011      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a73      	ldr	r2, [pc, #460]	; (8006c88 <I2C_Slave_ISR_DMA+0x308>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00b      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a71      	ldr	r2, [pc, #452]	; (8006c8c <I2C_Slave_ISR_DMA+0x30c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d005      	beq.n	8006ad6 <I2C_Slave_ISR_DMA+0x156>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a6f      	ldr	r2, [pc, #444]	; (8006c90 <I2C_Slave_ISR_DMA+0x310>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d109      	bne.n	8006aea <I2C_Slave_ISR_DMA+0x16a>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	bf0c      	ite	eq
 8006ae2:	2301      	moveq	r3, #1
 8006ae4:	2300      	movne	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	e008      	b.n	8006afc <I2C_Slave_ISR_DMA+0x17c>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bf0c      	ite	eq
 8006af6:	2301      	moveq	r3, #1
 8006af8:	2300      	movne	r3, #0
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8006b00:	2301      	movs	r3, #1
 8006b02:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d07c      	beq.n	8006c06 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	0b9b      	lsrs	r3, r3, #14
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d076      	beq.n	8006c06 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a4d      	ldr	r2, [pc, #308]	; (8006c54 <I2C_Slave_ISR_DMA+0x2d4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d059      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a4b      	ldr	r2, [pc, #300]	; (8006c58 <I2C_Slave_ISR_DMA+0x2d8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d053      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a49      	ldr	r2, [pc, #292]	; (8006c5c <I2C_Slave_ISR_DMA+0x2dc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d04d      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a47      	ldr	r2, [pc, #284]	; (8006c60 <I2C_Slave_ISR_DMA+0x2e0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d047      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a45      	ldr	r2, [pc, #276]	; (8006c64 <I2C_Slave_ISR_DMA+0x2e4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d041      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a43      	ldr	r2, [pc, #268]	; (8006c68 <I2C_Slave_ISR_DMA+0x2e8>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d03b      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a41      	ldr	r2, [pc, #260]	; (8006c6c <I2C_Slave_ISR_DMA+0x2ec>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d035      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a3f      	ldr	r2, [pc, #252]	; (8006c70 <I2C_Slave_ISR_DMA+0x2f0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d02f      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a3d      	ldr	r2, [pc, #244]	; (8006c74 <I2C_Slave_ISR_DMA+0x2f4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d029      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a3b      	ldr	r2, [pc, #236]	; (8006c78 <I2C_Slave_ISR_DMA+0x2f8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d023      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a39      	ldr	r2, [pc, #228]	; (8006c7c <I2C_Slave_ISR_DMA+0x2fc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d01d      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a37      	ldr	r2, [pc, #220]	; (8006c80 <I2C_Slave_ISR_DMA+0x300>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d017      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a35      	ldr	r2, [pc, #212]	; (8006c84 <I2C_Slave_ISR_DMA+0x304>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d011      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a33      	ldr	r2, [pc, #204]	; (8006c88 <I2C_Slave_ISR_DMA+0x308>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d00b      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a31      	ldr	r2, [pc, #196]	; (8006c8c <I2C_Slave_ISR_DMA+0x30c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d005      	beq.n	8006bd8 <I2C_Slave_ISR_DMA+0x258>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <I2C_Slave_ISR_DMA+0x310>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d109      	bne.n	8006bec <I2C_Slave_ISR_DMA+0x26c>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	bf0c      	ite	eq
 8006be4:	2301      	moveq	r3, #1
 8006be6:	2300      	movne	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e008      	b.n	8006bfe <I2C_Slave_ISR_DMA+0x27e>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2301      	moveq	r3, #1
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8006c02:	2301      	movs	r3, #1
 8006c04:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d148      	bne.n	8006c9e <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b28      	cmp	r3, #40	; 0x28
 8006c16:	d108      	bne.n	8006c2a <I2C_Slave_ISR_DMA+0x2aa>
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c1e:	d104      	bne.n	8006c2a <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fd16 	bl	8007654 <I2C_ITListenCplt>
 8006c28:	e068      	b.n	8006cfc <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b29      	cmp	r3, #41	; 0x29
 8006c34:	d12e      	bne.n	8006c94 <I2C_Slave_ISR_DMA+0x314>
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c3c:	d02a      	beq.n	8006c94 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2210      	movs	r2, #16
 8006c44:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fe51 	bl	80078ee <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f9e0 	bl	8007012 <I2C_ITSlaveSeqCplt>
 8006c52:	e053      	b.n	8006cfc <I2C_Slave_ISR_DMA+0x37c>
 8006c54:	40020010 	.word	0x40020010
 8006c58:	40020028 	.word	0x40020028
 8006c5c:	40020040 	.word	0x40020040
 8006c60:	40020058 	.word	0x40020058
 8006c64:	40020070 	.word	0x40020070
 8006c68:	40020088 	.word	0x40020088
 8006c6c:	400200a0 	.word	0x400200a0
 8006c70:	400200b8 	.word	0x400200b8
 8006c74:	40020410 	.word	0x40020410
 8006c78:	40020428 	.word	0x40020428
 8006c7c:	40020440 	.word	0x40020440
 8006c80:	40020458 	.word	0x40020458
 8006c84:	40020470 	.word	0x40020470
 8006c88:	40020488 	.word	0x40020488
 8006c8c:	400204a0 	.word	0x400204a0
 8006c90:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2210      	movs	r2, #16
 8006c9a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006c9c:	e034      	b.n	8006d08 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006caa:	f043 0204 	orr.w	r2, r3, #4
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <I2C_Slave_ISR_DMA+0x348>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cc6:	d11f      	bne.n	8006d08 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b21      	cmp	r3, #33	; 0x21
 8006ccc:	d002      	beq.n	8006cd4 <I2C_Slave_ISR_DMA+0x354>
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	2b29      	cmp	r3, #41	; 0x29
 8006cd2:	d103      	bne.n	8006cdc <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2221      	movs	r2, #33	; 0x21
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8006cda:	e008      	b.n	8006cee <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	2b22      	cmp	r3, #34	; 0x22
 8006ce0:	d002      	beq.n	8006ce8 <I2C_Slave_ISR_DMA+0x368>
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce6:	d102      	bne.n	8006cee <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2222      	movs	r2, #34	; 0x22
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 fd03 	bl	8007700 <I2C_ITError>
      if (treatdmanack == 1U)
 8006cfa:	e005      	b.n	8006d08 <I2C_Slave_ISR_DMA+0x388>
 8006cfc:	e004      	b.n	8006d08 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2210      	movs	r2, #16
 8006d04:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d06:	e011      	b.n	8006d2c <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8006d08:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006d0a:	e00f      	b.n	8006d2c <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	08db      	lsrs	r3, r3, #3
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <I2C_Slave_ISR_DMA+0x3ac>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	08db      	lsrs	r3, r3, #3
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006d24:	68b9      	ldr	r1, [r7, #8]
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 f8b2 	bl	8006e90 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop

08006d40 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af02      	add	r7, sp, #8
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	4608      	mov	r0, r1
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	4603      	mov	r3, r0
 8006d50:	817b      	strh	r3, [r7, #10]
 8006d52:	460b      	mov	r3, r1
 8006d54:	813b      	strh	r3, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	8979      	ldrh	r1, [r7, #10]
 8006d60:	4b20      	ldr	r3, [pc, #128]	; (8006de4 <I2C_RequestMemoryWrite+0xa4>)
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f001 f8a7 	bl	8007ebc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	69b9      	ldr	r1, [r7, #24]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 ffc0 	bl	8007cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e02c      	b.n	8006ddc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d82:	88fb      	ldrh	r3, [r7, #6]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d105      	bne.n	8006d94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d88:	893b      	ldrh	r3, [r7, #8]
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	629a      	str	r2, [r3, #40]	; 0x28
 8006d92:	e015      	b.n	8006dc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d94:	893b      	ldrh	r3, [r7, #8]
 8006d96:	0a1b      	lsrs	r3, r3, #8
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	69b9      	ldr	r1, [r7, #24]
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 ffa6 	bl	8007cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e012      	b.n	8006ddc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006db6:	893b      	ldrh	r3, [r7, #8]
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2180      	movs	r1, #128	; 0x80
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 ff54 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	80002000 	.word	0x80002000

08006de8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af02      	add	r7, sp, #8
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	4608      	mov	r0, r1
 8006df2:	4611      	mov	r1, r2
 8006df4:	461a      	mov	r2, r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	817b      	strh	r3, [r7, #10]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	813b      	strh	r3, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	8979      	ldrh	r1, [r7, #10]
 8006e08:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <I2C_RequestMemoryRead+0xa4>)
 8006e0a:	9300      	str	r3, [sp, #0]
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f001 f854 	bl	8007ebc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	69b9      	ldr	r1, [r7, #24]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 ff6d 	bl	8007cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e02c      	b.n	8006e82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e28:	88fb      	ldrh	r3, [r7, #6]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d105      	bne.n	8006e3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e2e:	893b      	ldrh	r3, [r7, #8]
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	629a      	str	r2, [r3, #40]	; 0x28
 8006e38:	e015      	b.n	8006e66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e3a:	893b      	ldrh	r3, [r7, #8]
 8006e3c:	0a1b      	lsrs	r3, r3, #8
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	69b9      	ldr	r1, [r7, #24]
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	f000 ff53 	bl	8007cf8 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e012      	b.n	8006e82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e5c:	893b      	ldrh	r3, [r7, #8]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2140      	movs	r1, #64	; 0x40
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 ff01 	bl	8007c78 <I2C_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	80002000 	.word	0x80002000

08006e90 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ea6:	2b28      	cmp	r3, #40	; 0x28
 8006ea8:	d16a      	bne.n	8006f80 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	0c1b      	lsrs	r3, r3, #16
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	0c1b      	lsrs	r3, r3, #16
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ec8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ed6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006ee4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d138      	bne.n	8006f60 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006eee:	897b      	ldrh	r3, [r7, #10]
 8006ef0:	09db      	lsrs	r3, r3, #7
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	89bb      	ldrh	r3, [r7, #12]
 8006ef6:	4053      	eors	r3, r2
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f003 0306 	and.w	r3, r3, #6
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d11c      	bne.n	8006f3c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006f02:	897b      	ldrh	r3, [r7, #10]
 8006f04:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d13b      	bne.n	8006f90 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2208      	movs	r2, #8
 8006f24:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f2e:	89ba      	ldrh	r2, [r7, #12]
 8006f30:	7bfb      	ldrb	r3, [r7, #15]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff faed 	bl	8006514 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f3a:	e029      	b.n	8006f90 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006f3c:	893b      	ldrh	r3, [r7, #8]
 8006f3e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 f84b 	bl	8007fe0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f52:	89ba      	ldrh	r2, [r7, #12]
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7ff fadb 	bl	8006514 <HAL_I2C_AddrCallback>
}
 8006f5e:	e017      	b.n	8006f90 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 f83b 	bl	8007fe0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f72:	89ba      	ldrh	r2, [r7, #12]
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff facb 	bl	8006514 <HAL_I2C_AddrCallback>
}
 8006f7e:	e007      	b.n	8006f90 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2208      	movs	r2, #8
 8006f86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006f90:	bf00      	nop
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b21      	cmp	r3, #33	; 0x21
 8006fb2:	d115      	bne.n	8006fe0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2211      	movs	r2, #17
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fc8:	2101      	movs	r1, #1
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 f808 	bl	8007fe0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff fa73 	bl	80064c4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fde:	e014      	b.n	800700a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2212      	movs	r2, #18
 8006fec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ff4:	2102      	movs	r1, #2
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fff2 	bl	8007fe0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fa67 	bl	80064d8 <HAL_I2C_MasterRxCpltCallback>
}
 800700a:	bf00      	nop
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	0b9b      	lsrs	r3, r3, #14
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d008      	beq.n	8007048 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	e00d      	b.n	8007064 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	0bdb      	lsrs	r3, r3, #15
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007062:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b29      	cmp	r3, #41	; 0x29
 800706e:	d112      	bne.n	8007096 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2228      	movs	r2, #40	; 0x28
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2221      	movs	r2, #33	; 0x21
 800707c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800707e:	2101      	movs	r1, #1
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 ffad 	bl	8007fe0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7ff fa2c 	bl	80064ec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007094:	e017      	b.n	80070c6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b2a      	cmp	r3, #42	; 0x2a
 80070a0:	d111      	bne.n	80070c6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2228      	movs	r2, #40	; 0x28
 80070a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2222      	movs	r2, #34	; 0x22
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070b0:	2102      	movs	r1, #2
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 ff94 	bl	8007fe0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff fa1d 	bl	8006500 <HAL_I2C_SlaveRxCpltCallback>
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2220      	movs	r2, #32
 80070e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b21      	cmp	r3, #33	; 0x21
 80070f0:	d107      	bne.n	8007102 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070f2:	2101      	movs	r1, #1
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 ff73 	bl	8007fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2211      	movs	r2, #17
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30
 8007100:	e00c      	b.n	800711c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b22      	cmp	r3, #34	; 0x22
 800710c:	d106      	bne.n	800711c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800710e:	2102      	movs	r1, #2
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 ff65 	bl	8007fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2212      	movs	r2, #18
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6859      	ldr	r1, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b4d      	ldr	r3, [pc, #308]	; (800725c <I2C_ITMasterCplt+0x18c>)
 8007128:	400b      	ands	r3, r1
 800712a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a4a      	ldr	r2, [pc, #296]	; (8007260 <I2C_ITMasterCplt+0x190>)
 8007136:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	091b      	lsrs	r3, r3, #4
 800713c:	f003 0301 	and.w	r3, r3, #1
 8007140:	2b00      	cmp	r3, #0
 8007142:	d009      	beq.n	8007158 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2210      	movs	r2, #16
 800714a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007150:	f043 0204 	orr.w	r2, r3, #4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b60      	cmp	r3, #96	; 0x60
 8007162:	d10b      	bne.n	800717c <I2C_ITMasterCplt+0xac>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	089b      	lsrs	r3, r3, #2
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d005      	beq.n	800717c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	b2db      	uxtb	r3, r3
 8007178:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800717a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fbb6 	bl	80078ee <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b60      	cmp	r3, #96	; 0x60
 8007192:	d002      	beq.n	800719a <I2C_ITMasterCplt+0xca>
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d006      	beq.n	80071a8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 faad 	bl	8007700 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80071a6:	e054      	b.n	8007252 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b21      	cmp	r3, #33	; 0x21
 80071b2:	d124      	bne.n	80071fe <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b40      	cmp	r3, #64	; 0x40
 80071cc:	d10b      	bne.n	80071e6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff f9b0 	bl	8006544 <HAL_I2C_MemTxCpltCallback>
}
 80071e4:	e035      	b.n	8007252 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff f964 	bl	80064c4 <HAL_I2C_MasterTxCpltCallback>
}
 80071fc:	e029      	b.n	8007252 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b22      	cmp	r3, #34	; 0x22
 8007208:	d123      	bne.n	8007252 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b40      	cmp	r3, #64	; 0x40
 8007222:	d10b      	bne.n	800723c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff f98f 	bl	8006558 <HAL_I2C_MemRxCpltCallback>
}
 800723a:	e00a      	b.n	8007252 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff f943 	bl	80064d8 <HAL_I2C_MasterRxCpltCallback>
}
 8007252:	bf00      	nop
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	fe00e800 	.word	0xfe00e800
 8007260:	ffff0000 	.word	0xffff0000

08007264 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007280:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2220      	movs	r2, #32
 8007288:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	2b21      	cmp	r3, #33	; 0x21
 800728e:	d002      	beq.n	8007296 <I2C_ITSlaveCplt+0x32>
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b29      	cmp	r3, #41	; 0x29
 8007294:	d108      	bne.n	80072a8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007296:	f248 0101 	movw	r1, #32769	; 0x8001
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fea0 	bl	8007fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2221      	movs	r2, #33	; 0x21
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
 80072a6:	e00d      	b.n	80072c4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	2b22      	cmp	r3, #34	; 0x22
 80072ac:	d002      	beq.n	80072b4 <I2C_ITSlaveCplt+0x50>
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2b2a      	cmp	r3, #42	; 0x2a
 80072b2:	d107      	bne.n	80072c4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80072b4:	f248 0102 	movw	r1, #32770	; 0x8002
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fe91 	bl	8007fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2222      	movs	r2, #34	; 0x22
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072d2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6859      	ldr	r1, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	4b80      	ldr	r3, [pc, #512]	; (80074e0 <I2C_ITSlaveCplt+0x27c>)
 80072e0:	400b      	ands	r3, r1
 80072e2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fb02 	bl	80078ee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	0b9b      	lsrs	r3, r3, #14
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d07a      	beq.n	80073ec <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007304:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8111 	beq.w	8007532 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a73      	ldr	r2, [pc, #460]	; (80074e4 <I2C_ITSlaveCplt+0x280>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d059      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a71      	ldr	r2, [pc, #452]	; (80074e8 <I2C_ITSlaveCplt+0x284>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d053      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a6f      	ldr	r2, [pc, #444]	; (80074ec <I2C_ITSlaveCplt+0x288>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d04d      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a6d      	ldr	r2, [pc, #436]	; (80074f0 <I2C_ITSlaveCplt+0x28c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d047      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a6b      	ldr	r2, [pc, #428]	; (80074f4 <I2C_ITSlaveCplt+0x290>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d041      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a69      	ldr	r2, [pc, #420]	; (80074f8 <I2C_ITSlaveCplt+0x294>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d03b      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a67      	ldr	r2, [pc, #412]	; (80074fc <I2C_ITSlaveCplt+0x298>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d035      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a65      	ldr	r2, [pc, #404]	; (8007500 <I2C_ITSlaveCplt+0x29c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d02f      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a63      	ldr	r2, [pc, #396]	; (8007504 <I2C_ITSlaveCplt+0x2a0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d029      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a61      	ldr	r2, [pc, #388]	; (8007508 <I2C_ITSlaveCplt+0x2a4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d023      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a5f      	ldr	r2, [pc, #380]	; (800750c <I2C_ITSlaveCplt+0x2a8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d01d      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a5d      	ldr	r2, [pc, #372]	; (8007510 <I2C_ITSlaveCplt+0x2ac>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d017      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a5b      	ldr	r2, [pc, #364]	; (8007514 <I2C_ITSlaveCplt+0x2b0>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d011      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a59      	ldr	r2, [pc, #356]	; (8007518 <I2C_ITSlaveCplt+0x2b4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00b      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a57      	ldr	r2, [pc, #348]	; (800751c <I2C_ITSlaveCplt+0x2b8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d005      	beq.n	80073d0 <I2C_ITSlaveCplt+0x16c>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a55      	ldr	r2, [pc, #340]	; (8007520 <I2C_ITSlaveCplt+0x2bc>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d105      	bne.n	80073dc <I2C_ITSlaveCplt+0x178>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	e004      	b.n	80073e6 <I2C_ITSlaveCplt+0x182>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	8553      	strh	r3, [r2, #42]	; 0x2a
 80073ea:	e0a2      	b.n	8007532 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	0bdb      	lsrs	r3, r3, #15
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 809c 	beq.w	8007532 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007408:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	2b00      	cmp	r3, #0
 8007410:	f000 808f 	beq.w	8007532 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a32      	ldr	r2, [pc, #200]	; (80074e4 <I2C_ITSlaveCplt+0x280>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d059      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a30      	ldr	r2, [pc, #192]	; (80074e8 <I2C_ITSlaveCplt+0x284>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d053      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a2e      	ldr	r2, [pc, #184]	; (80074ec <I2C_ITSlaveCplt+0x288>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d04d      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a2c      	ldr	r2, [pc, #176]	; (80074f0 <I2C_ITSlaveCplt+0x28c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d047      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2a      	ldr	r2, [pc, #168]	; (80074f4 <I2C_ITSlaveCplt+0x290>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d041      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a28      	ldr	r2, [pc, #160]	; (80074f8 <I2C_ITSlaveCplt+0x294>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d03b      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a26      	ldr	r2, [pc, #152]	; (80074fc <I2C_ITSlaveCplt+0x298>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d035      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a24      	ldr	r2, [pc, #144]	; (8007500 <I2C_ITSlaveCplt+0x29c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d02f      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a22      	ldr	r2, [pc, #136]	; (8007504 <I2C_ITSlaveCplt+0x2a0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d029      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a20      	ldr	r2, [pc, #128]	; (8007508 <I2C_ITSlaveCplt+0x2a4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d023      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1e      	ldr	r2, [pc, #120]	; (800750c <I2C_ITSlaveCplt+0x2a8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d01d      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a1c      	ldr	r2, [pc, #112]	; (8007510 <I2C_ITSlaveCplt+0x2ac>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d017      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <I2C_ITSlaveCplt+0x2b0>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d011      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a18      	ldr	r2, [pc, #96]	; (8007518 <I2C_ITSlaveCplt+0x2b4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00b      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a16      	ldr	r2, [pc, #88]	; (800751c <I2C_ITSlaveCplt+0x2b8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d005      	beq.n	80074d4 <I2C_ITSlaveCplt+0x270>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a14      	ldr	r2, [pc, #80]	; (8007520 <I2C_ITSlaveCplt+0x2bc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d127      	bne.n	8007524 <I2C_ITSlaveCplt+0x2c0>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	e026      	b.n	800752e <I2C_ITSlaveCplt+0x2ca>
 80074e0:	fe00e800 	.word	0xfe00e800
 80074e4:	40020010 	.word	0x40020010
 80074e8:	40020028 	.word	0x40020028
 80074ec:	40020040 	.word	0x40020040
 80074f0:	40020058 	.word	0x40020058
 80074f4:	40020070 	.word	0x40020070
 80074f8:	40020088 	.word	0x40020088
 80074fc:	400200a0 	.word	0x400200a0
 8007500:	400200b8 	.word	0x400200b8
 8007504:	40020410 	.word	0x40020410
 8007508:	40020428 	.word	0x40020428
 800750c:	40020440 	.word	0x40020440
 8007510:	40020458 	.word	0x40020458
 8007514:	40020470 	.word	0x40020470
 8007518:	40020488 	.word	0x40020488
 800751c:	400204a0 	.word	0x400204a0
 8007520:	400204b8 	.word	0x400204b8
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	b29b      	uxth	r3, r3
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	089b      	lsrs	r3, r3, #2
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d020      	beq.n	8007580 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f023 0304 	bic.w	r3, r3, #4
 8007544:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00c      	beq.n	8007580 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756a:	3b01      	subs	r3, #1
 800756c:	b29a      	uxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007576:	b29b      	uxth	r3, r3
 8007578:	3b01      	subs	r3, #1
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	f043 0204 	orr.w	r2, r3, #4
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f8a4 	bl	8007700 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b28      	cmp	r3, #40	; 0x28
 80075c2:	d141      	bne.n	8007648 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80075c4:	6979      	ldr	r1, [r7, #20]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f844 	bl	8007654 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075cc:	e03c      	b.n	8007648 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075d6:	d014      	beq.n	8007602 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff fd1a 	bl	8007012 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a1b      	ldr	r2, [pc, #108]	; (8007650 <I2C_ITSlaveCplt+0x3ec>)
 80075e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fe ff98 	bl	8006530 <HAL_I2C_ListenCpltCallback>
}
 8007600:	e022      	b.n	8007648 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b22      	cmp	r3, #34	; 0x22
 800760c:	d10e      	bne.n	800762c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7fe ff6b 	bl	8006500 <HAL_I2C_SlaveRxCpltCallback>
}
 800762a:	e00d      	b.n	8007648 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7fe ff52 	bl	80064ec <HAL_I2C_SlaveTxCpltCallback>
}
 8007648:	bf00      	nop
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	ffff0000 	.word	0xffff0000

08007654 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a26      	ldr	r2, [pc, #152]	; (80076fc <I2C_ITListenCplt+0xa8>)
 8007662:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	089b      	lsrs	r3, r3, #2
 8007684:	f003 0301 	and.w	r3, r3, #1
 8007688:	2b00      	cmp	r3, #0
 800768a:	d022      	beq.n	80076d2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d012      	beq.n	80076d2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ca:	f043 0204 	orr.w	r2, r3, #4
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076d2:	f248 0103 	movw	r1, #32771	; 0x8003
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fc82 	bl	8007fe0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2210      	movs	r2, #16
 80076e2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fe ff1f 	bl	8006530 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	ffff0000 	.word	0xffff0000

08007700 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a5d      	ldr	r2, [pc, #372]	; (8007894 <I2C_ITError+0x194>)
 800771e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	431a      	orrs	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	2b28      	cmp	r3, #40	; 0x28
 8007736:	d005      	beq.n	8007744 <I2C_ITError+0x44>
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	2b29      	cmp	r3, #41	; 0x29
 800773c:	d002      	beq.n	8007744 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	2b2a      	cmp	r3, #42	; 0x2a
 8007742:	d10b      	bne.n	800775c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007744:	2103      	movs	r1, #3
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fc4a 	bl	8007fe0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2228      	movs	r2, #40	; 0x28
 8007750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a50      	ldr	r2, [pc, #320]	; (8007898 <I2C_ITError+0x198>)
 8007758:	635a      	str	r2, [r3, #52]	; 0x34
 800775a:	e011      	b.n	8007780 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800775c:	f248 0103 	movw	r1, #32771	; 0x8003
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc3d 	bl	8007fe0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b60      	cmp	r3, #96	; 0x60
 8007770:	d003      	beq.n	800777a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	2b00      	cmp	r3, #0
 800778c:	d039      	beq.n	8007802 <I2C_ITError+0x102>
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b11      	cmp	r3, #17
 8007792:	d002      	beq.n	800779a <I2C_ITError+0x9a>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b21      	cmp	r3, #33	; 0x21
 8007798:	d133      	bne.n	8007802 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077a8:	d107      	bne.n	80077ba <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077b8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fd fcca 	bl	8005158 <HAL_DMA_GetState>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d017      	beq.n	80077fa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ce:	4a33      	ldr	r2, [pc, #204]	; (800789c <I2C_ITError+0x19c>)
 80077d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fc fb4c 	bl	8003e7c <HAL_DMA_Abort_IT>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d04d      	beq.n	8007886 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077f4:	4610      	mov	r0, r2
 80077f6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077f8:	e045      	b.n	8007886 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f850 	bl	80078a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007800:	e041      	b.n	8007886 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d039      	beq.n	800787e <I2C_ITError+0x17e>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b12      	cmp	r3, #18
 800780e:	d002      	beq.n	8007816 <I2C_ITError+0x116>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b22      	cmp	r3, #34	; 0x22
 8007814:	d133      	bne.n	800787e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007824:	d107      	bne.n	8007836 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007834:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783a:	4618      	mov	r0, r3
 800783c:	f7fd fc8c 	bl	8005158 <HAL_DMA_GetState>
 8007840:	4603      	mov	r3, r0
 8007842:	2b01      	cmp	r3, #1
 8007844:	d017      	beq.n	8007876 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784a:	4a14      	ldr	r2, [pc, #80]	; (800789c <I2C_ITError+0x19c>)
 800784c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785a:	4618      	mov	r0, r3
 800785c:	f7fc fb0e 	bl	8003e7c <HAL_DMA_Abort_IT>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d011      	beq.n	800788a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007874:	e009      	b.n	800788a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f812 	bl	80078a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800787c:	e005      	b.n	800788a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f80e 	bl	80078a0 <I2C_TreatErrorCallback>
  }
}
 8007884:	e002      	b.n	800788c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800788a:	bf00      	nop
}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	ffff0000 	.word	0xffff0000
 8007898:	08006595 	.word	0x08006595
 800789c:	08007c3d 	.word	0x08007c3d

080078a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b60      	cmp	r3, #96	; 0x60
 80078b2:	d10e      	bne.n	80078d2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7fe fe58 	bl	8006580 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078d0:	e009      	b.n	80078e6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7fe fe43 	bl	800656c <HAL_I2C_ErrorCallback>
}
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b02      	cmp	r3, #2
 8007902:	d103      	bne.n	800790c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2200      	movs	r2, #0
 800790a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b01      	cmp	r3, #1
 8007918:	d007      	beq.n	800792a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699a      	ldr	r2, [r3, #24]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0201 	orr.w	r2, r2, #1
 8007928:	619a      	str	r2, [r3, #24]
  }
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007952:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800795e:	2120      	movs	r1, #32
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fad9 	bl	8007f18 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007966:	e02d      	b.n	80079c4 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007970:	441a      	add	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797a:	b29b      	uxth	r3, r3
 800797c:	2bff      	cmp	r3, #255	; 0xff
 800797e:	d903      	bls.n	8007988 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	22ff      	movs	r2, #255	; 0xff
 8007984:	851a      	strh	r2, [r3, #40]	; 0x28
 8007986:	e004      	b.n	8007992 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3324      	adds	r3, #36	; 0x24
 800799c:	4619      	mov	r1, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	461a      	mov	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a8:	f7fb fce0 	bl	800336c <HAL_DMA_Start_IT>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d004      	beq.n	80079bc <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80079b2:	2110      	movs	r1, #16
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7ff fea3 	bl	8007700 <I2C_ITError>
}
 80079ba:	e003      	b.n	80079c4 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80079bc:	2140      	movs	r1, #64	; 0x40
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 faaa 	bl	8007f18 <I2C_Enable_IRQ>
}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d076      	beq.n	8007ad4 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a83      	ldr	r2, [pc, #524]	; (8007bfc <I2C_DMAError+0x230>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d059      	beq.n	8007aa6 <I2C_DMAError+0xda>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a81      	ldr	r2, [pc, #516]	; (8007c00 <I2C_DMAError+0x234>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d053      	beq.n	8007aa6 <I2C_DMAError+0xda>
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a7f      	ldr	r2, [pc, #508]	; (8007c04 <I2C_DMAError+0x238>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d04d      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a7d      	ldr	r2, [pc, #500]	; (8007c08 <I2C_DMAError+0x23c>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d047      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a7b      	ldr	r2, [pc, #492]	; (8007c0c <I2C_DMAError+0x240>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d041      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a79      	ldr	r2, [pc, #484]	; (8007c10 <I2C_DMAError+0x244>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d03b      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a77      	ldr	r2, [pc, #476]	; (8007c14 <I2C_DMAError+0x248>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d035      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a75      	ldr	r2, [pc, #468]	; (8007c18 <I2C_DMAError+0x24c>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d02f      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a73      	ldr	r2, [pc, #460]	; (8007c1c <I2C_DMAError+0x250>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d029      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a71      	ldr	r2, [pc, #452]	; (8007c20 <I2C_DMAError+0x254>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d023      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a6f      	ldr	r2, [pc, #444]	; (8007c24 <I2C_DMAError+0x258>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d01d      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a6d      	ldr	r2, [pc, #436]	; (8007c28 <I2C_DMAError+0x25c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d017      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a6b      	ldr	r2, [pc, #428]	; (8007c2c <I2C_DMAError+0x260>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d011      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a69      	ldr	r2, [pc, #420]	; (8007c30 <I2C_DMAError+0x264>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00b      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a67      	ldr	r2, [pc, #412]	; (8007c34 <I2C_DMAError+0x268>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d005      	beq.n	8007aa6 <I2C_DMAError+0xda>
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a65      	ldr	r2, [pc, #404]	; (8007c38 <I2C_DMAError+0x26c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d109      	bne.n	8007aba <I2C_DMAError+0xee>
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	e008      	b.n	8007acc <I2C_DMAError+0x100>
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bf0c      	ite	eq
 8007ac6:	2301      	moveq	r3, #1
 8007ac8:	2300      	movne	r3, #0
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d076      	beq.n	8007bca <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a46      	ldr	r2, [pc, #280]	; (8007bfc <I2C_DMAError+0x230>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d059      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a44      	ldr	r2, [pc, #272]	; (8007c00 <I2C_DMAError+0x234>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d053      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a42      	ldr	r2, [pc, #264]	; (8007c04 <I2C_DMAError+0x238>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d04d      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a40      	ldr	r2, [pc, #256]	; (8007c08 <I2C_DMAError+0x23c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d047      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a3e      	ldr	r2, [pc, #248]	; (8007c0c <I2C_DMAError+0x240>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d041      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a3c      	ldr	r2, [pc, #240]	; (8007c10 <I2C_DMAError+0x244>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d03b      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a3a      	ldr	r2, [pc, #232]	; (8007c14 <I2C_DMAError+0x248>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d035      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a38      	ldr	r2, [pc, #224]	; (8007c18 <I2C_DMAError+0x24c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d02f      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a36      	ldr	r2, [pc, #216]	; (8007c1c <I2C_DMAError+0x250>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d029      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a34      	ldr	r2, [pc, #208]	; (8007c20 <I2C_DMAError+0x254>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d023      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a32      	ldr	r2, [pc, #200]	; (8007c24 <I2C_DMAError+0x258>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d01d      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a30      	ldr	r2, [pc, #192]	; (8007c28 <I2C_DMAError+0x25c>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d017      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a2e      	ldr	r2, [pc, #184]	; (8007c2c <I2C_DMAError+0x260>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d011      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a2c      	ldr	r2, [pc, #176]	; (8007c30 <I2C_DMAError+0x264>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00b      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a2a      	ldr	r2, [pc, #168]	; (8007c34 <I2C_DMAError+0x268>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d005      	beq.n	8007b9c <I2C_DMAError+0x1d0>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a28      	ldr	r2, [pc, #160]	; (8007c38 <I2C_DMAError+0x26c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d109      	bne.n	8007bb0 <I2C_DMAError+0x1e4>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	e008      	b.n	8007bc2 <I2C_DMAError+0x1f6>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bf0c      	ite	eq
 8007bbc:	2301      	moveq	r3, #1
 8007bbe:	2300      	movne	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fd fad2 	bl	8005174 <HAL_DMA_GetError>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d00e      	beq.n	8007bf4 <I2C_DMAError+0x228>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00b      	beq.n	8007bf4 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bea:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007bec:	2110      	movs	r1, #16
 8007bee:	68b8      	ldr	r0, [r7, #8]
 8007bf0:	f7ff fd86 	bl	8007700 <I2C_ITError>
  }
}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	40020010 	.word	0x40020010
 8007c00:	40020028 	.word	0x40020028
 8007c04:	40020040 	.word	0x40020040
 8007c08:	40020058 	.word	0x40020058
 8007c0c:	40020070 	.word	0x40020070
 8007c10:	40020088 	.word	0x40020088
 8007c14:	400200a0 	.word	0x400200a0
 8007c18:	400200b8 	.word	0x400200b8
 8007c1c:	40020410 	.word	0x40020410
 8007c20:	40020428 	.word	0x40020428
 8007c24:	40020440 	.word	0x40020440
 8007c28:	40020458 	.word	0x40020458
 8007c2c:	40020470 	.word	0x40020470
 8007c30:	40020488 	.word	0x40020488
 8007c34:	400204a0 	.word	0x400204a0
 8007c38:	400204b8 	.word	0x400204b8

08007c3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	2200      	movs	r2, #0
 8007c58:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c66:	2200      	movs	r2, #0
 8007c68:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff fe18 	bl	80078a0 <I2C_TreatErrorCallback>
}
 8007c70:	bf00      	nop
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	4613      	mov	r3, r2
 8007c86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c88:	e022      	b.n	8007cd0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d01e      	beq.n	8007cd0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c92:	f7fa fec3 	bl	8002a1c <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	683a      	ldr	r2, [r7, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d113      	bne.n	8007cd0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cac:	f043 0220 	orr.w	r2, r3, #32
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e00f      	b.n	8007cf0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	68ba      	ldr	r2, [r7, #8]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	bf0c      	ite	eq
 8007ce0:	2301      	moveq	r3, #1
 8007ce2:	2300      	movne	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d0cd      	beq.n	8007c8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d04:	e02c      	b.n	8007d60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f870 	bl	8007df0 <I2C_IsAcknowledgeFailed>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e02a      	b.n	8007d70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d20:	d01e      	beq.n	8007d60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d22:	f7fa fe7b 	bl	8002a1c <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d302      	bcc.n	8007d38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d113      	bne.n	8007d60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3c:	f043 0220 	orr.w	r2, r3, #32
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e007      	b.n	8007d70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d1cb      	bne.n	8007d06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d84:	e028      	b.n	8007dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f830 	bl	8007df0 <I2C_IsAcknowledgeFailed>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e026      	b.n	8007de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d9a:	f7fa fe3f 	bl	8002a1c <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d302      	bcc.n	8007db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d113      	bne.n	8007dd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db4:	f043 0220 	orr.w	r2, r3, #32
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	e007      	b.n	8007de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	f003 0320 	and.w	r3, r3, #32
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	d1cf      	bne.n	8007d86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d151      	bne.n	8007eae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e0a:	e022      	b.n	8007e52 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d01e      	beq.n	8007e52 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e14:	f7fa fe02 	bl	8002a1c <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d302      	bcc.n	8007e2a <I2C_IsAcknowledgeFailed+0x3a>
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d113      	bne.n	8007e52 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2e:	f043 0220 	orr.w	r2, r3, #32
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e02e      	b.n	8007eb0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	f003 0320 	and.w	r3, r3, #32
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	d1d5      	bne.n	8007e0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2210      	movs	r2, #16
 8007e66:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f7ff fd3c 	bl	80078ee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6859      	ldr	r1, [r3, #4]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <I2C_IsAcknowledgeFailed+0xc8>)
 8007e82:	400b      	ands	r3, r1
 8007e84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8a:	f043 0204 	orr.w	r2, r3, #4
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	fe00e800 	.word	0xfe00e800

08007ebc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	817b      	strh	r3, [r7, #10]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	0d5b      	lsrs	r3, r3, #21
 8007ed8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007edc:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <I2C_TransferConfig+0x58>)
 8007ede:	430b      	orrs	r3, r1
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	ea02 0103 	and.w	r1, r2, r3
 8007ee6:	897b      	ldrh	r3, [r7, #10]
 8007ee8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007eec:	7a7b      	ldrb	r3, [r7, #9]
 8007eee:	041b      	lsls	r3, r3, #16
 8007ef0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	431a      	orrs	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007f06:	bf00      	nop
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	03ff63ff 	.word	0x03ff63ff

08007f18 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f2c:	4a2a      	ldr	r2, [pc, #168]	; (8007fd8 <I2C_Enable_IRQ+0xc0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007f36:	4a29      	ldr	r2, [pc, #164]	; (8007fdc <I2C_Enable_IRQ+0xc4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d11d      	bne.n	8007f78 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007f3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	da03      	bge.n	8007f4c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007f4a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007f4c:	887b      	ldrh	r3, [r7, #2]
 8007f4e:	2b10      	cmp	r3, #16
 8007f50:	d103      	bne.n	8007f5a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007f58:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007f5a:	887b      	ldrh	r3, [r7, #2]
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d103      	bne.n	8007f68 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007f68:	887b      	ldrh	r3, [r7, #2]
 8007f6a:	2b40      	cmp	r3, #64	; 0x40
 8007f6c:	d125      	bne.n	8007fba <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f74:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007f76:	e020      	b.n	8007fba <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007f78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da03      	bge.n	8007f88 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007f86:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007f88:	887b      	ldrh	r3, [r7, #2]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007f98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007f9a:	887b      	ldrh	r3, [r7, #2]
 8007f9c:	f003 0302 	and.w	r3, r3, #2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007faa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007fac:	887b      	ldrh	r3, [r7, #2]
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d103      	bne.n	8007fba <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f043 0320 	orr.w	r3, r3, #32
 8007fb8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6819      	ldr	r1, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	601a      	str	r2, [r3, #0]
}
 8007fca:	bf00      	nop
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	0800679b 	.word	0x0800679b
 8007fdc:	08006981 	.word	0x08006981

08007fe0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ff0:	887b      	ldrh	r3, [r7, #2]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00f      	beq.n	800801a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008000:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008008:	b2db      	uxtb	r3, r3
 800800a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800800e:	2b28      	cmp	r3, #40	; 0x28
 8008010:	d003      	beq.n	800801a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008018:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800801a:	887b      	ldrh	r3, [r7, #2]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00f      	beq.n	8008044 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800802a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008038:	2b28      	cmp	r3, #40	; 0x28
 800803a:	d003      	beq.n	8008044 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008042:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008044:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008048:	2b00      	cmp	r3, #0
 800804a:	da03      	bge.n	8008054 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008052:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008054:	887b      	ldrh	r3, [r7, #2]
 8008056:	2b10      	cmp	r3, #16
 8008058:	d103      	bne.n	8008062 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008060:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008062:	887b      	ldrh	r3, [r7, #2]
 8008064:	2b20      	cmp	r3, #32
 8008066:	d103      	bne.n	8008070 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f043 0320 	orr.w	r3, r3, #32
 800806e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008070:	887b      	ldrh	r3, [r7, #2]
 8008072:	2b40      	cmp	r3, #64	; 0x40
 8008074:	d103      	bne.n	800807e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800807c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6819      	ldr	r1, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	43da      	mvns	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	400a      	ands	r2, r1
 800808e:	601a      	str	r2, [r3, #0]
}
 8008090:	bf00      	nop
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d138      	bne.n	8008124 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80080bc:	2302      	movs	r3, #2
 80080be:	e032      	b.n	8008126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2224      	movs	r2, #36	; 0x24
 80080cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0201 	bic.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6819      	ldr	r1, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	430a      	orrs	r2, r1
 80080fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f042 0201 	orr.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	e000      	b.n	8008126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008124:	2302      	movs	r3, #2
  }
}
 8008126:	4618      	mov	r0, r3
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008132:	b480      	push	{r7}
 8008134:	b085      	sub	sp, #20
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b20      	cmp	r3, #32
 8008146:	d139      	bne.n	80081bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008152:	2302      	movs	r3, #2
 8008154:	e033      	b.n	80081be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2224      	movs	r2, #36	; 0x24
 8008162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0201 	bic.w	r2, r2, #1
 8008174:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008184:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	4313      	orrs	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0201 	orr.w	r2, r2, #1
 80081a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e000      	b.n	80081be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80081bc:	2302      	movs	r3, #2
  }
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
	...

080081cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80081d4:	4b19      	ldr	r3, [pc, #100]	; (800823c <HAL_PWREx_ConfigSupply+0x70>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d00a      	beq.n	80081f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80081e0:	4b16      	ldr	r3, [pc, #88]	; (800823c <HAL_PWREx_ConfigSupply+0x70>)
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d001      	beq.n	80081f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e01f      	b.n	8008232 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80081f2:	2300      	movs	r3, #0
 80081f4:	e01d      	b.n	8008232 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80081f6:	4b11      	ldr	r3, [pc, #68]	; (800823c <HAL_PWREx_ConfigSupply+0x70>)
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f023 0207 	bic.w	r2, r3, #7
 80081fe:	490f      	ldr	r1, [pc, #60]	; (800823c <HAL_PWREx_ConfigSupply+0x70>)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4313      	orrs	r3, r2
 8008204:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008206:	f7fa fc09 	bl	8002a1c <HAL_GetTick>
 800820a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800820c:	e009      	b.n	8008222 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800820e:	f7fa fc05 	bl	8002a1c <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800821c:	d901      	bls.n	8008222 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e007      	b.n	8008232 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008222:	4b06      	ldr	r3, [pc, #24]	; (800823c <HAL_PWREx_ConfigSupply+0x70>)
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800822a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822e:	d1ee      	bne.n	800820e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	58024800 	.word	0x58024800

08008240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08c      	sub	sp, #48	; 0x30
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e3ff      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 8087 	beq.w	800836e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008260:	4b99      	ldr	r3, [pc, #612]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800826a:	4b97      	ldr	r3, [pc, #604]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008272:	2b10      	cmp	r3, #16
 8008274:	d007      	beq.n	8008286 <HAL_RCC_OscConfig+0x46>
 8008276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008278:	2b18      	cmp	r3, #24
 800827a:	d110      	bne.n	800829e <HAL_RCC_OscConfig+0x5e>
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	f003 0303 	and.w	r3, r3, #3
 8008282:	2b02      	cmp	r3, #2
 8008284:	d10b      	bne.n	800829e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008286:	4b90      	ldr	r3, [pc, #576]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d06c      	beq.n	800836c <HAL_RCC_OscConfig+0x12c>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d168      	bne.n	800836c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e3d9      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082a6:	d106      	bne.n	80082b6 <HAL_RCC_OscConfig+0x76>
 80082a8:	4b87      	ldr	r3, [pc, #540]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a86      	ldr	r2, [pc, #536]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	e02e      	b.n	8008314 <HAL_RCC_OscConfig+0xd4>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10c      	bne.n	80082d8 <HAL_RCC_OscConfig+0x98>
 80082be:	4b82      	ldr	r3, [pc, #520]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a81      	ldr	r2, [pc, #516]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	4b7f      	ldr	r3, [pc, #508]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a7e      	ldr	r2, [pc, #504]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082d4:	6013      	str	r3, [r2, #0]
 80082d6:	e01d      	b.n	8008314 <HAL_RCC_OscConfig+0xd4>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082e0:	d10c      	bne.n	80082fc <HAL_RCC_OscConfig+0xbc>
 80082e2:	4b79      	ldr	r3, [pc, #484]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a78      	ldr	r2, [pc, #480]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082ec:	6013      	str	r3, [r2, #0]
 80082ee:	4b76      	ldr	r3, [pc, #472]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a75      	ldr	r2, [pc, #468]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e00b      	b.n	8008314 <HAL_RCC_OscConfig+0xd4>
 80082fc:	4b72      	ldr	r3, [pc, #456]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a71      	ldr	r2, [pc, #452]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	4b6f      	ldr	r3, [pc, #444]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a6e      	ldr	r2, [pc, #440]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800830e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d013      	beq.n	8008344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800831c:	f7fa fb7e 	bl	8002a1c <HAL_GetTick>
 8008320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008322:	e008      	b.n	8008336 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008324:	f7fa fb7a 	bl	8002a1c <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	2b64      	cmp	r3, #100	; 0x64
 8008330:	d901      	bls.n	8008336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e38d      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008336:	4b64      	ldr	r3, [pc, #400]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0f0      	beq.n	8008324 <HAL_RCC_OscConfig+0xe4>
 8008342:	e014      	b.n	800836e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008344:	f7fa fb6a 	bl	8002a1c <HAL_GetTick>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800834c:	f7fa fb66 	bl	8002a1c <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b64      	cmp	r3, #100	; 0x64
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e379      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800835e:	4b5a      	ldr	r3, [pc, #360]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1f0      	bne.n	800834c <HAL_RCC_OscConfig+0x10c>
 800836a:	e000      	b.n	800836e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800836c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 80ae 	beq.w	80084d8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800837c:	4b52      	ldr	r3, [pc, #328]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008384:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008386:	4b50      	ldr	r3, [pc, #320]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800838c:	6a3b      	ldr	r3, [r7, #32]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d007      	beq.n	80083a2 <HAL_RCC_OscConfig+0x162>
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	2b18      	cmp	r3, #24
 8008396:	d13a      	bne.n	800840e <HAL_RCC_OscConfig+0x1ce>
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d135      	bne.n	800840e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083a2:	4b49      	ldr	r3, [pc, #292]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0304 	and.w	r3, r3, #4
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <HAL_RCC_OscConfig+0x17a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e34b      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ba:	f7fa fb5f 	bl	8002a7c <HAL_GetREVID>
 80083be:	4603      	mov	r3, r0
 80083c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d817      	bhi.n	80083f8 <HAL_RCC_OscConfig+0x1b8>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d108      	bne.n	80083e2 <HAL_RCC_OscConfig+0x1a2>
 80083d0:	4b3d      	ldr	r3, [pc, #244]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80083d8:	4a3b      	ldr	r2, [pc, #236]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083de:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083e0:	e07a      	b.n	80084d8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083e2:	4b39      	ldr	r3, [pc, #228]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	031b      	lsls	r3, r3, #12
 80083f0:	4935      	ldr	r1, [pc, #212]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083f6:	e06f      	b.n	80084d8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f8:	4b33      	ldr	r3, [pc, #204]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	061b      	lsls	r3, r3, #24
 8008406:	4930      	ldr	r1, [pc, #192]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008408:	4313      	orrs	r3, r2
 800840a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800840c:	e064      	b.n	80084d8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d045      	beq.n	80084a2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008416:	4b2c      	ldr	r3, [pc, #176]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f023 0219 	bic.w	r2, r3, #25
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	4929      	ldr	r1, [pc, #164]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008424:	4313      	orrs	r3, r2
 8008426:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008428:	f7fa faf8 	bl	8002a1c <HAL_GetTick>
 800842c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800842e:	e008      	b.n	8008442 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008430:	f7fa faf4 	bl	8002a1c <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	2b02      	cmp	r3, #2
 800843c:	d901      	bls.n	8008442 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e307      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008442:	4b21      	ldr	r3, [pc, #132]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0304 	and.w	r3, r3, #4
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0f0      	beq.n	8008430 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800844e:	f7fa fb15 	bl	8002a7c <HAL_GetREVID>
 8008452:	4603      	mov	r3, r0
 8008454:	f241 0203 	movw	r2, #4099	; 0x1003
 8008458:	4293      	cmp	r3, r2
 800845a:	d817      	bhi.n	800848c <HAL_RCC_OscConfig+0x24c>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	2b40      	cmp	r3, #64	; 0x40
 8008462:	d108      	bne.n	8008476 <HAL_RCC_OscConfig+0x236>
 8008464:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800846c:	4a16      	ldr	r2, [pc, #88]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800846e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008472:	6053      	str	r3, [r2, #4]
 8008474:	e030      	b.n	80084d8 <HAL_RCC_OscConfig+0x298>
 8008476:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	031b      	lsls	r3, r3, #12
 8008484:	4910      	ldr	r1, [pc, #64]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008486:	4313      	orrs	r3, r2
 8008488:	604b      	str	r3, [r1, #4]
 800848a:	e025      	b.n	80084d8 <HAL_RCC_OscConfig+0x298>
 800848c:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	061b      	lsls	r3, r3, #24
 800849a:	490b      	ldr	r1, [pc, #44]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800849c:	4313      	orrs	r3, r2
 800849e:	604b      	str	r3, [r1, #4]
 80084a0:	e01a      	b.n	80084d8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084a2:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a08      	ldr	r2, [pc, #32]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ae:	f7fa fab5 	bl	8002a1c <HAL_GetTick>
 80084b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084b4:	e00a      	b.n	80084cc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084b6:	f7fa fab1 	bl	8002a1c <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d903      	bls.n	80084cc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e2c4      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
 80084c8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084cc:	4ba4      	ldr	r3, [pc, #656]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1ee      	bne.n	80084b6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 80a9 	beq.w	8008638 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084e6:	4b9e      	ldr	r3, [pc, #632]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084f0:	4b9b      	ldr	r3, [pc, #620]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80084f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d007      	beq.n	800850c <HAL_RCC_OscConfig+0x2cc>
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	2b18      	cmp	r3, #24
 8008500:	d13a      	bne.n	8008578 <HAL_RCC_OscConfig+0x338>
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	2b01      	cmp	r3, #1
 800850a:	d135      	bne.n	8008578 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800850c:	4b94      	ldr	r3, [pc, #592]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <HAL_RCC_OscConfig+0x2e4>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d001      	beq.n	8008524 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e296      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008524:	f7fa faaa 	bl	8002a7c <HAL_GetREVID>
 8008528:	4603      	mov	r3, r0
 800852a:	f241 0203 	movw	r2, #4099	; 0x1003
 800852e:	4293      	cmp	r3, r2
 8008530:	d817      	bhi.n	8008562 <HAL_RCC_OscConfig+0x322>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	2b20      	cmp	r3, #32
 8008538:	d108      	bne.n	800854c <HAL_RCC_OscConfig+0x30c>
 800853a:	4b89      	ldr	r3, [pc, #548]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008542:	4a87      	ldr	r2, [pc, #540]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008548:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800854a:	e075      	b.n	8008638 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800854c:	4b84      	ldr	r3, [pc, #528]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	069b      	lsls	r3, r3, #26
 800855a:	4981      	ldr	r1, [pc, #516]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 800855c:	4313      	orrs	r3, r2
 800855e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008560:	e06a      	b.n	8008638 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008562:	4b7f      	ldr	r3, [pc, #508]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	061b      	lsls	r3, r3, #24
 8008570:	497b      	ldr	r1, [pc, #492]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008572:	4313      	orrs	r3, r2
 8008574:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008576:	e05f      	b.n	8008638 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	69db      	ldr	r3, [r3, #28]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d042      	beq.n	8008606 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008580:	4b77      	ldr	r3, [pc, #476]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a76      	ldr	r2, [pc, #472]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800858c:	f7fa fa46 	bl	8002a1c <HAL_GetTick>
 8008590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008592:	e008      	b.n	80085a6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008594:	f7fa fa42 	bl	8002a1c <HAL_GetTick>
 8008598:	4602      	mov	r2, r0
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d901      	bls.n	80085a6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e255      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085a6:	4b6e      	ldr	r3, [pc, #440]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d0f0      	beq.n	8008594 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085b2:	f7fa fa63 	bl	8002a7c <HAL_GetREVID>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80085bc:	4293      	cmp	r3, r2
 80085be:	d817      	bhi.n	80085f0 <HAL_RCC_OscConfig+0x3b0>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	d108      	bne.n	80085da <HAL_RCC_OscConfig+0x39a>
 80085c8:	4b65      	ldr	r3, [pc, #404]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80085d0:	4a63      	ldr	r2, [pc, #396]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80085d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085d6:	6053      	str	r3, [r2, #4]
 80085d8:	e02e      	b.n	8008638 <HAL_RCC_OscConfig+0x3f8>
 80085da:	4b61      	ldr	r3, [pc, #388]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	069b      	lsls	r3, r3, #26
 80085e8:	495d      	ldr	r1, [pc, #372]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	604b      	str	r3, [r1, #4]
 80085ee:	e023      	b.n	8008638 <HAL_RCC_OscConfig+0x3f8>
 80085f0:	4b5b      	ldr	r3, [pc, #364]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a1b      	ldr	r3, [r3, #32]
 80085fc:	061b      	lsls	r3, r3, #24
 80085fe:	4958      	ldr	r1, [pc, #352]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008600:	4313      	orrs	r3, r2
 8008602:	60cb      	str	r3, [r1, #12]
 8008604:	e018      	b.n	8008638 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008606:	4b56      	ldr	r3, [pc, #344]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a55      	ldr	r2, [pc, #340]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 800860c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008612:	f7fa fa03 	bl	8002a1c <HAL_GetTick>
 8008616:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008618:	e008      	b.n	800862c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800861a:	f7fa f9ff 	bl	8002a1c <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b02      	cmp	r3, #2
 8008626:	d901      	bls.n	800862c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e212      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800862c:	4b4c      	ldr	r3, [pc, #304]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f0      	bne.n	800861a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	d036      	beq.n	80086b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d019      	beq.n	8008680 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800864c:	4b44      	ldr	r3, [pc, #272]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 800864e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008650:	4a43      	ldr	r2, [pc, #268]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008658:	f7fa f9e0 	bl	8002a1c <HAL_GetTick>
 800865c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800865e:	e008      	b.n	8008672 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008660:	f7fa f9dc 	bl	8002a1c <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e1ef      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008672:	4b3b      	ldr	r3, [pc, #236]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0f0      	beq.n	8008660 <HAL_RCC_OscConfig+0x420>
 800867e:	e018      	b.n	80086b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008680:	4b37      	ldr	r3, [pc, #220]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008684:	4a36      	ldr	r2, [pc, #216]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800868c:	f7fa f9c6 	bl	8002a1c <HAL_GetTick>
 8008690:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008692:	e008      	b.n	80086a6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008694:	f7fa f9c2 	bl	8002a1c <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d901      	bls.n	80086a6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e1d5      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086a6:	4b2e      	ldr	r3, [pc, #184]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80086a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f0      	bne.n	8008694 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d036      	beq.n	800872c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d019      	beq.n	80086fa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086c6:	4b26      	ldr	r3, [pc, #152]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a25      	ldr	r2, [pc, #148]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80086cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80086d2:	f7fa f9a3 	bl	8002a1c <HAL_GetTick>
 80086d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086d8:	e008      	b.n	80086ec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80086da:	f7fa f99f 	bl	8002a1c <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d901      	bls.n	80086ec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e1b2      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80086ec:	4b1c      	ldr	r3, [pc, #112]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0f0      	beq.n	80086da <HAL_RCC_OscConfig+0x49a>
 80086f8:	e018      	b.n	800872c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086fa:	4b19      	ldr	r3, [pc, #100]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a18      	ldr	r2, [pc, #96]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008704:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008706:	f7fa f989 	bl	8002a1c <HAL_GetTick>
 800870a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800870c:	e008      	b.n	8008720 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800870e:	f7fa f985 	bl	8002a1c <HAL_GetTick>
 8008712:	4602      	mov	r2, r0
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	2b02      	cmp	r3, #2
 800871a:	d901      	bls.n	8008720 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	e198      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008720:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <HAL_RCC_OscConfig+0x520>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f0      	bne.n	800870e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 8085 	beq.w	8008844 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800873a:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <HAL_RCC_OscConfig+0x524>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a09      	ldr	r2, [pc, #36]	; (8008764 <HAL_RCC_OscConfig+0x524>)
 8008740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008744:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008746:	f7fa f969 	bl	8002a1c <HAL_GetTick>
 800874a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800874c:	e00c      	b.n	8008768 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800874e:	f7fa f965 	bl	8002a1c <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b64      	cmp	r3, #100	; 0x64
 800875a:	d905      	bls.n	8008768 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e178      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
 8008760:	58024400 	.word	0x58024400
 8008764:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008768:	4b96      	ldr	r3, [pc, #600]	; (80089c4 <HAL_RCC_OscConfig+0x784>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008770:	2b00      	cmp	r3, #0
 8008772:	d0ec      	beq.n	800874e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d106      	bne.n	800878a <HAL_RCC_OscConfig+0x54a>
 800877c:	4b92      	ldr	r3, [pc, #584]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800877e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008780:	4a91      	ldr	r2, [pc, #580]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	6713      	str	r3, [r2, #112]	; 0x70
 8008788:	e02d      	b.n	80087e6 <HAL_RCC_OscConfig+0x5a6>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10c      	bne.n	80087ac <HAL_RCC_OscConfig+0x56c>
 8008792:	4b8d      	ldr	r3, [pc, #564]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008796:	4a8c      	ldr	r2, [pc, #560]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008798:	f023 0301 	bic.w	r3, r3, #1
 800879c:	6713      	str	r3, [r2, #112]	; 0x70
 800879e:	4b8a      	ldr	r3, [pc, #552]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a2:	4a89      	ldr	r2, [pc, #548]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087a4:	f023 0304 	bic.w	r3, r3, #4
 80087a8:	6713      	str	r3, [r2, #112]	; 0x70
 80087aa:	e01c      	b.n	80087e6 <HAL_RCC_OscConfig+0x5a6>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	2b05      	cmp	r3, #5
 80087b2:	d10c      	bne.n	80087ce <HAL_RCC_OscConfig+0x58e>
 80087b4:	4b84      	ldr	r3, [pc, #528]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b8:	4a83      	ldr	r2, [pc, #524]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087ba:	f043 0304 	orr.w	r3, r3, #4
 80087be:	6713      	str	r3, [r2, #112]	; 0x70
 80087c0:	4b81      	ldr	r3, [pc, #516]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c4:	4a80      	ldr	r2, [pc, #512]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087c6:	f043 0301 	orr.w	r3, r3, #1
 80087ca:	6713      	str	r3, [r2, #112]	; 0x70
 80087cc:	e00b      	b.n	80087e6 <HAL_RCC_OscConfig+0x5a6>
 80087ce:	4b7e      	ldr	r3, [pc, #504]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d2:	4a7d      	ldr	r2, [pc, #500]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087d4:	f023 0301 	bic.w	r3, r3, #1
 80087d8:	6713      	str	r3, [r2, #112]	; 0x70
 80087da:	4b7b      	ldr	r3, [pc, #492]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087de:	4a7a      	ldr	r2, [pc, #488]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80087e0:	f023 0304 	bic.w	r3, r3, #4
 80087e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d015      	beq.n	800881a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ee:	f7fa f915 	bl	8002a1c <HAL_GetTick>
 80087f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087f4:	e00a      	b.n	800880c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087f6:	f7fa f911 	bl	8002a1c <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	f241 3288 	movw	r2, #5000	; 0x1388
 8008804:	4293      	cmp	r3, r2
 8008806:	d901      	bls.n	800880c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e122      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800880c:	4b6e      	ldr	r3, [pc, #440]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800880e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0ee      	beq.n	80087f6 <HAL_RCC_OscConfig+0x5b6>
 8008818:	e014      	b.n	8008844 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800881a:	f7fa f8ff 	bl	8002a1c <HAL_GetTick>
 800881e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008820:	e00a      	b.n	8008838 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008822:	f7fa f8fb 	bl	8002a1c <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008830:	4293      	cmp	r3, r2
 8008832:	d901      	bls.n	8008838 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e10c      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008838:	4b63      	ldr	r3, [pc, #396]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800883a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1ee      	bne.n	8008822 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 8101 	beq.w	8008a50 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800884e:	4b5e      	ldr	r3, [pc, #376]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008856:	2b18      	cmp	r3, #24
 8008858:	f000 80bc 	beq.w	80089d4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b02      	cmp	r3, #2
 8008862:	f040 8095 	bne.w	8008990 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008866:	4b58      	ldr	r3, [pc, #352]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a57      	ldr	r2, [pc, #348]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800886c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008872:	f7fa f8d3 	bl	8002a1c <HAL_GetTick>
 8008876:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008878:	e008      	b.n	800888c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800887a:	f7fa f8cf 	bl	8002a1c <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	2b02      	cmp	r3, #2
 8008886:	d901      	bls.n	800888c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e0e2      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800888c:	4b4e      	ldr	r3, [pc, #312]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1f0      	bne.n	800887a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008898:	4b4b      	ldr	r3, [pc, #300]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800889a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800889c:	4b4b      	ldr	r3, [pc, #300]	; (80089cc <HAL_RCC_OscConfig+0x78c>)
 800889e:	4013      	ands	r3, r2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80088a8:	0112      	lsls	r2, r2, #4
 80088aa:	430a      	orrs	r2, r1
 80088ac:	4946      	ldr	r1, [pc, #280]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	628b      	str	r3, [r1, #40]	; 0x28
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	3b01      	subs	r3, #1
 80088b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c0:	3b01      	subs	r3, #1
 80088c2:	025b      	lsls	r3, r3, #9
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	431a      	orrs	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088cc:	3b01      	subs	r3, #1
 80088ce:	041b      	lsls	r3, r3, #16
 80088d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088da:	3b01      	subs	r3, #1
 80088dc:	061b      	lsls	r3, r3, #24
 80088de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088e2:	4939      	ldr	r1, [pc, #228]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80088e8:	4b37      	ldr	r3, [pc, #220]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	4a36      	ldr	r2, [pc, #216]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80088f4:	4b34      	ldr	r3, [pc, #208]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80088f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f8:	4b35      	ldr	r3, [pc, #212]	; (80089d0 <HAL_RCC_OscConfig+0x790>)
 80088fa:	4013      	ands	r3, r2
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008900:	00d2      	lsls	r2, r2, #3
 8008902:	4931      	ldr	r1, [pc, #196]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008904:	4313      	orrs	r3, r2
 8008906:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008908:	4b2f      	ldr	r3, [pc, #188]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	f023 020c 	bic.w	r2, r3, #12
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	492c      	ldr	r1, [pc, #176]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008916:	4313      	orrs	r3, r2
 8008918:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800891a:	4b2b      	ldr	r3, [pc, #172]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	f023 0202 	bic.w	r2, r3, #2
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008926:	4928      	ldr	r1, [pc, #160]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008928:	4313      	orrs	r3, r2
 800892a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800892c:	4b26      	ldr	r3, [pc, #152]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	4a25      	ldr	r2, [pc, #148]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008938:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	4a22      	ldr	r2, [pc, #136]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800893e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008944:	4b20      	ldr	r3, [pc, #128]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	4a1f      	ldr	r2, [pc, #124]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800894a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800894e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008950:	4b1d      	ldr	r3, [pc, #116]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	4a1c      	ldr	r2, [pc, #112]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800895c:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a19      	ldr	r2, [pc, #100]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008968:	f7fa f858 	bl	8002a1c <HAL_GetTick>
 800896c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800896e:	e008      	b.n	8008982 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008970:	f7fa f854 	bl	8002a1c <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b02      	cmp	r3, #2
 800897c:	d901      	bls.n	8008982 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e067      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008982:	4b11      	ldr	r3, [pc, #68]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0f0      	beq.n	8008970 <HAL_RCC_OscConfig+0x730>
 800898e:	e05f      	b.n	8008a50 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008990:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a0c      	ldr	r2, [pc, #48]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 8008996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800899a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899c:	f7fa f83e 	bl	8002a1c <HAL_GetTick>
 80089a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a4:	f7fa f83a 	bl	8002a1c <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e04d      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089b6:	4b04      	ldr	r3, [pc, #16]	; (80089c8 <HAL_RCC_OscConfig+0x788>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1f0      	bne.n	80089a4 <HAL_RCC_OscConfig+0x764>
 80089c2:	e045      	b.n	8008a50 <HAL_RCC_OscConfig+0x810>
 80089c4:	58024800 	.word	0x58024800
 80089c8:	58024400 	.word	0x58024400
 80089cc:	fffffc0c 	.word	0xfffffc0c
 80089d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80089d4:	4b21      	ldr	r3, [pc, #132]	; (8008a5c <HAL_RCC_OscConfig+0x81c>)
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80089da:	4b20      	ldr	r3, [pc, #128]	; (8008a5c <HAL_RCC_OscConfig+0x81c>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d031      	beq.n	8008a4c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f003 0203 	and.w	r2, r3, #3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d12a      	bne.n	8008a4c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	091b      	lsrs	r3, r3, #4
 80089fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d122      	bne.n	8008a4c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a10:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d11a      	bne.n	8008a4c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	0a5b      	lsrs	r3, r3, #9
 8008a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d111      	bne.n	8008a4c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	0c1b      	lsrs	r3, r3, #16
 8008a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d108      	bne.n	8008a4c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	0e1b      	lsrs	r3, r3, #24
 8008a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a46:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d001      	beq.n	8008a50 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e000      	b.n	8008a52 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3730      	adds	r7, #48	; 0x30
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	58024400 	.word	0x58024400

08008a60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e19c      	b.n	8008dae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a74:	4b8a      	ldr	r3, [pc, #552]	; (8008ca0 <HAL_RCC_ClockConfig+0x240>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 030f 	and.w	r3, r3, #15
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d910      	bls.n	8008aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a82:	4b87      	ldr	r3, [pc, #540]	; (8008ca0 <HAL_RCC_ClockConfig+0x240>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f023 020f 	bic.w	r2, r3, #15
 8008a8a:	4985      	ldr	r1, [pc, #532]	; (8008ca0 <HAL_RCC_ClockConfig+0x240>)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a92:	4b83      	ldr	r3, [pc, #524]	; (8008ca0 <HAL_RCC_ClockConfig+0x240>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 030f 	and.w	r3, r3, #15
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d001      	beq.n	8008aa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e184      	b.n	8008dae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d010      	beq.n	8008ad2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691a      	ldr	r2, [r3, #16]
 8008ab4:	4b7b      	ldr	r3, [pc, #492]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d908      	bls.n	8008ad2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ac0:	4b78      	ldr	r3, [pc, #480]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	4975      	ldr	r1, [pc, #468]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d010      	beq.n	8008b00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	695a      	ldr	r2, [r3, #20]
 8008ae2:	4b70      	ldr	r3, [pc, #448]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d908      	bls.n	8008b00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008aee:	4b6d      	ldr	r3, [pc, #436]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	496a      	ldr	r1, [pc, #424]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0310 	and.w	r3, r3, #16
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d010      	beq.n	8008b2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	699a      	ldr	r2, [r3, #24]
 8008b10:	4b64      	ldr	r3, [pc, #400]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d908      	bls.n	8008b2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b1c:	4b61      	ldr	r3, [pc, #388]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	495e      	ldr	r1, [pc, #376]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d010      	beq.n	8008b5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69da      	ldr	r2, [r3, #28]
 8008b3e:	4b59      	ldr	r3, [pc, #356]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d908      	bls.n	8008b5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008b4a:	4b56      	ldr	r3, [pc, #344]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b4c:	6a1b      	ldr	r3, [r3, #32]
 8008b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	4953      	ldr	r1, [pc, #332]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0302 	and.w	r3, r3, #2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d010      	beq.n	8008b8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	4b4d      	ldr	r3, [pc, #308]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d908      	bls.n	8008b8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b78:	4b4a      	ldr	r3, [pc, #296]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	f023 020f 	bic.w	r2, r3, #15
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	4947      	ldr	r1, [pc, #284]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d055      	beq.n	8008c42 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008b96:	4b43      	ldr	r3, [pc, #268]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	4940      	ldr	r1, [pc, #256]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d107      	bne.n	8008bc0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008bb0:	4b3c      	ldr	r3, [pc, #240]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d121      	bne.n	8008c00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e0f6      	b.n	8008dae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d107      	bne.n	8008bd8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008bc8:	4b36      	ldr	r3, [pc, #216]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d115      	bne.n	8008c00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e0ea      	b.n	8008dae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d107      	bne.n	8008bf0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008be0:	4b30      	ldr	r3, [pc, #192]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d109      	bne.n	8008c00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e0de      	b.n	8008dae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bf0:	4b2c      	ldr	r3, [pc, #176]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0304 	and.w	r3, r3, #4
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e0d6      	b.n	8008dae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c00:	4b28      	ldr	r3, [pc, #160]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	f023 0207 	bic.w	r2, r3, #7
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	4925      	ldr	r1, [pc, #148]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c12:	f7f9 ff03 	bl	8002a1c <HAL_GetTick>
 8008c16:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c18:	e00a      	b.n	8008c30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c1a:	f7f9 feff 	bl	8002a1c <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e0be      	b.n	8008dae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c30:	4b1c      	ldr	r3, [pc, #112]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d1eb      	bne.n	8008c1a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d010      	beq.n	8008c70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68da      	ldr	r2, [r3, #12]
 8008c52:	4b14      	ldr	r3, [pc, #80]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	f003 030f 	and.w	r3, r3, #15
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d208      	bcs.n	8008c70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c5e:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	f023 020f 	bic.w	r2, r3, #15
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	490e      	ldr	r1, [pc, #56]	; (8008ca4 <HAL_RCC_ClockConfig+0x244>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c70:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <HAL_RCC_ClockConfig+0x240>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 030f 	and.w	r3, r3, #15
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d214      	bcs.n	8008ca8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c7e:	4b08      	ldr	r3, [pc, #32]	; (8008ca0 <HAL_RCC_ClockConfig+0x240>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f023 020f 	bic.w	r2, r3, #15
 8008c86:	4906      	ldr	r1, [pc, #24]	; (8008ca0 <HAL_RCC_ClockConfig+0x240>)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c8e:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <HAL_RCC_ClockConfig+0x240>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 030f 	and.w	r3, r3, #15
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d005      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e086      	b.n	8008dae <HAL_RCC_ClockConfig+0x34e>
 8008ca0:	52002000 	.word	0x52002000
 8008ca4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d010      	beq.n	8008cd6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691a      	ldr	r2, [r3, #16]
 8008cb8:	4b3f      	ldr	r3, [pc, #252]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d208      	bcs.n	8008cd6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cc4:	4b3c      	ldr	r3, [pc, #240]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	4939      	ldr	r1, [pc, #228]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0308 	and.w	r3, r3, #8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d010      	beq.n	8008d04 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	695a      	ldr	r2, [r3, #20]
 8008ce6:	4b34      	ldr	r3, [pc, #208]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d208      	bcs.n	8008d04 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cf2:	4b31      	ldr	r3, [pc, #196]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	492e      	ldr	r1, [pc, #184]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0310 	and.w	r3, r3, #16
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d010      	beq.n	8008d32 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	699a      	ldr	r2, [r3, #24]
 8008d14:	4b28      	ldr	r3, [pc, #160]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d208      	bcs.n	8008d32 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d20:	4b25      	ldr	r3, [pc, #148]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	4922      	ldr	r1, [pc, #136]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d010      	beq.n	8008d60 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69da      	ldr	r2, [r3, #28]
 8008d42:	4b1d      	ldr	r3, [pc, #116]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d208      	bcs.n	8008d60 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d4e:	4b1a      	ldr	r3, [pc, #104]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	4917      	ldr	r1, [pc, #92]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008d60:	f000 f834 	bl	8008dcc <HAL_RCC_GetSysClockFreq>
 8008d64:	4602      	mov	r2, r0
 8008d66:	4b14      	ldr	r3, [pc, #80]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	0a1b      	lsrs	r3, r3, #8
 8008d6c:	f003 030f 	and.w	r3, r3, #15
 8008d70:	4912      	ldr	r1, [pc, #72]	; (8008dbc <HAL_RCC_ClockConfig+0x35c>)
 8008d72:	5ccb      	ldrb	r3, [r1, r3]
 8008d74:	f003 031f 	and.w	r3, r3, #31
 8008d78:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d7e:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <HAL_RCC_ClockConfig+0x358>)
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	f003 030f 	and.w	r3, r3, #15
 8008d86:	4a0d      	ldr	r2, [pc, #52]	; (8008dbc <HAL_RCC_ClockConfig+0x35c>)
 8008d88:	5cd3      	ldrb	r3, [r2, r3]
 8008d8a:	f003 031f 	and.w	r3, r3, #31
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
 8008d94:	4a0a      	ldr	r2, [pc, #40]	; (8008dc0 <HAL_RCC_ClockConfig+0x360>)
 8008d96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d98:	4a0a      	ldr	r2, [pc, #40]	; (8008dc4 <HAL_RCC_ClockConfig+0x364>)
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008d9e:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <HAL_RCC_ClockConfig+0x368>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7f9 fdf0 	bl	8002988 <HAL_InitTick>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	58024400 	.word	0x58024400
 8008dbc:	08010b98 	.word	0x08010b98
 8008dc0:	24000010 	.word	0x24000010
 8008dc4:	2400000c 	.word	0x2400000c
 8008dc8:	24000014 	.word	0x24000014

08008dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b089      	sub	sp, #36	; 0x24
 8008dd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008dd2:	4bb3      	ldr	r3, [pc, #716]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dda:	2b18      	cmp	r3, #24
 8008ddc:	f200 8155 	bhi.w	800908a <HAL_RCC_GetSysClockFreq+0x2be>
 8008de0:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de6:	bf00      	nop
 8008de8:	08008e4d 	.word	0x08008e4d
 8008dec:	0800908b 	.word	0x0800908b
 8008df0:	0800908b 	.word	0x0800908b
 8008df4:	0800908b 	.word	0x0800908b
 8008df8:	0800908b 	.word	0x0800908b
 8008dfc:	0800908b 	.word	0x0800908b
 8008e00:	0800908b 	.word	0x0800908b
 8008e04:	0800908b 	.word	0x0800908b
 8008e08:	08008e73 	.word	0x08008e73
 8008e0c:	0800908b 	.word	0x0800908b
 8008e10:	0800908b 	.word	0x0800908b
 8008e14:	0800908b 	.word	0x0800908b
 8008e18:	0800908b 	.word	0x0800908b
 8008e1c:	0800908b 	.word	0x0800908b
 8008e20:	0800908b 	.word	0x0800908b
 8008e24:	0800908b 	.word	0x0800908b
 8008e28:	08008e79 	.word	0x08008e79
 8008e2c:	0800908b 	.word	0x0800908b
 8008e30:	0800908b 	.word	0x0800908b
 8008e34:	0800908b 	.word	0x0800908b
 8008e38:	0800908b 	.word	0x0800908b
 8008e3c:	0800908b 	.word	0x0800908b
 8008e40:	0800908b 	.word	0x0800908b
 8008e44:	0800908b 	.word	0x0800908b
 8008e48:	08008e7f 	.word	0x08008e7f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e4c:	4b94      	ldr	r3, [pc, #592]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0320 	and.w	r3, r3, #32
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d009      	beq.n	8008e6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e58:	4b91      	ldr	r3, [pc, #580]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	08db      	lsrs	r3, r3, #3
 8008e5e:	f003 0303 	and.w	r3, r3, #3
 8008e62:	4a90      	ldr	r2, [pc, #576]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e64:	fa22 f303 	lsr.w	r3, r2, r3
 8008e68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008e6a:	e111      	b.n	8009090 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e6c:	4b8d      	ldr	r3, [pc, #564]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e6e:	61bb      	str	r3, [r7, #24]
    break;
 8008e70:	e10e      	b.n	8009090 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008e72:	4b8d      	ldr	r3, [pc, #564]	; (80090a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e74:	61bb      	str	r3, [r7, #24]
    break;
 8008e76:	e10b      	b.n	8009090 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008e78:	4b8c      	ldr	r3, [pc, #560]	; (80090ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e7a:	61bb      	str	r3, [r7, #24]
    break;
 8008e7c:	e108      	b.n	8009090 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e7e:	4b88      	ldr	r3, [pc, #544]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008e88:	4b85      	ldr	r3, [pc, #532]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8c:	091b      	lsrs	r3, r3, #4
 8008e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e92:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e94:	4b82      	ldr	r3, [pc, #520]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008e9e:	4b80      	ldr	r3, [pc, #512]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea2:	08db      	lsrs	r3, r3, #3
 8008ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	ee07 3a90 	vmov	s15, r3
 8008eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 80e1 	beq.w	8009084 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	f000 8083 	beq.w	8008fd0 <HAL_RCC_GetSysClockFreq+0x204>
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	f200 80a1 	bhi.w	8009014 <HAL_RCC_GetSysClockFreq+0x248>
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <HAL_RCC_GetSysClockFreq+0x114>
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d056      	beq.n	8008f8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008ede:	e099      	b.n	8009014 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ee0:	4b6f      	ldr	r3, [pc, #444]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d02d      	beq.n	8008f48 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eec:	4b6c      	ldr	r3, [pc, #432]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	08db      	lsrs	r3, r3, #3
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	4a6b      	ldr	r2, [pc, #428]	; (80090a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8008efc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	ee07 3a90 	vmov	s15, r3
 8008f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	ee07 3a90 	vmov	s15, r3
 8008f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f16:	4b62      	ldr	r3, [pc, #392]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80090b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008f46:	e087      	b.n	8009058 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f52:	eddf 6a58 	vldr	s13, [pc, #352]	; 80090b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5a:	4b51      	ldr	r3, [pc, #324]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f62:	ee07 3a90 	vmov	s15, r3
 8008f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80090b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f8a:	e065      	b.n	8009058 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	ee07 3a90 	vmov	s15, r3
 8008f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f96:	eddf 6a48 	vldr	s13, [pc, #288]	; 80090b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f9e:	4b40      	ldr	r3, [pc, #256]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fb2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80090b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fce:	e043      	b.n	8009058 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	ee07 3a90 	vmov	s15, r3
 8008fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fda:	eddf 6a38 	vldr	s13, [pc, #224]	; 80090bc <HAL_RCC_GetSysClockFreq+0x2f0>
 8008fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe2:	4b2f      	ldr	r3, [pc, #188]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fea:	ee07 3a90 	vmov	s15, r3
 8008fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ff6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80090b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009012:	e021      	b.n	8009058 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80090b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009026:	4b1e      	ldr	r3, [pc, #120]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009036:	ed97 6a02 	vldr	s12, [r7, #8]
 800903a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80090b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800903e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800904a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800904e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009056:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009058:	4b11      	ldr	r3, [pc, #68]	; (80090a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905c:	0a5b      	lsrs	r3, r3, #9
 800905e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009062:	3301      	adds	r3, #1
 8009064:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009070:	edd7 6a07 	vldr	s13, [r7, #28]
 8009074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800907c:	ee17 3a90 	vmov	r3, s15
 8009080:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009082:	e005      	b.n	8009090 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	61bb      	str	r3, [r7, #24]
    break;
 8009088:	e002      	b.n	8009090 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800908a:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800908c:	61bb      	str	r3, [r7, #24]
    break;
 800908e:	bf00      	nop
  }

  return sysclockfreq;
 8009090:	69bb      	ldr	r3, [r7, #24]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3724      	adds	r7, #36	; 0x24
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	58024400 	.word	0x58024400
 80090a4:	03d09000 	.word	0x03d09000
 80090a8:	003d0900 	.word	0x003d0900
 80090ac:	017d7840 	.word	0x017d7840
 80090b0:	46000000 	.word	0x46000000
 80090b4:	4c742400 	.word	0x4c742400
 80090b8:	4a742400 	.word	0x4a742400
 80090bc:	4bbebc20 	.word	0x4bbebc20

080090c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80090c6:	f7ff fe81 	bl	8008dcc <HAL_RCC_GetSysClockFreq>
 80090ca:	4602      	mov	r2, r0
 80090cc:	4b10      	ldr	r3, [pc, #64]	; (8009110 <HAL_RCC_GetHCLKFreq+0x50>)
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	0a1b      	lsrs	r3, r3, #8
 80090d2:	f003 030f 	and.w	r3, r3, #15
 80090d6:	490f      	ldr	r1, [pc, #60]	; (8009114 <HAL_RCC_GetHCLKFreq+0x54>)
 80090d8:	5ccb      	ldrb	r3, [r1, r3]
 80090da:	f003 031f 	and.w	r3, r3, #31
 80090de:	fa22 f303 	lsr.w	r3, r2, r3
 80090e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80090e4:	4b0a      	ldr	r3, [pc, #40]	; (8009110 <HAL_RCC_GetHCLKFreq+0x50>)
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	f003 030f 	and.w	r3, r3, #15
 80090ec:	4a09      	ldr	r2, [pc, #36]	; (8009114 <HAL_RCC_GetHCLKFreq+0x54>)
 80090ee:	5cd3      	ldrb	r3, [r2, r3]
 80090f0:	f003 031f 	and.w	r3, r3, #31
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	fa22 f303 	lsr.w	r3, r2, r3
 80090fa:	4a07      	ldr	r2, [pc, #28]	; (8009118 <HAL_RCC_GetHCLKFreq+0x58>)
 80090fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80090fe:	4a07      	ldr	r2, [pc, #28]	; (800911c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009104:	4b04      	ldr	r3, [pc, #16]	; (8009118 <HAL_RCC_GetHCLKFreq+0x58>)
 8009106:	681b      	ldr	r3, [r3, #0]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	58024400 	.word	0x58024400
 8009114:	08010b98 	.word	0x08010b98
 8009118:	24000010 	.word	0x24000010
 800911c:	2400000c 	.word	0x2400000c

08009120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009124:	f7ff ffcc 	bl	80090c0 <HAL_RCC_GetHCLKFreq>
 8009128:	4602      	mov	r2, r0
 800912a:	4b06      	ldr	r3, [pc, #24]	; (8009144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	091b      	lsrs	r3, r3, #4
 8009130:	f003 0307 	and.w	r3, r3, #7
 8009134:	4904      	ldr	r1, [pc, #16]	; (8009148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009136:	5ccb      	ldrb	r3, [r1, r3]
 8009138:	f003 031f 	and.w	r3, r3, #31
 800913c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009140:	4618      	mov	r0, r3
 8009142:	bd80      	pop	{r7, pc}
 8009144:	58024400 	.word	0x58024400
 8009148:	08010b98 	.word	0x08010b98

0800914c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009150:	f7ff ffb6 	bl	80090c0 <HAL_RCC_GetHCLKFreq>
 8009154:	4602      	mov	r2, r0
 8009156:	4b06      	ldr	r3, [pc, #24]	; (8009170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	4904      	ldr	r1, [pc, #16]	; (8009174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009162:	5ccb      	ldrb	r3, [r1, r3]
 8009164:	f003 031f 	and.w	r3, r3, #31
 8009168:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800916c:	4618      	mov	r0, r3
 800916e:	bd80      	pop	{r7, pc}
 8009170:	58024400 	.word	0x58024400
 8009174:	08010b98 	.word	0x08010b98

08009178 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009180:	2300      	movs	r3, #0
 8009182:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009184:	2300      	movs	r3, #0
 8009186:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d03f      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800919c:	d02a      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800919e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091a2:	d824      	bhi.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091a8:	d018      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091ae:	d81e      	bhi.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80091b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091b8:	d007      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80091ba:	e018      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091bc:	4bab      	ldr	r3, [pc, #684]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	4aaa      	ldr	r2, [pc, #680]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091c8:	e015      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	3304      	adds	r3, #4
 80091ce:	2102      	movs	r1, #2
 80091d0:	4618      	mov	r0, r3
 80091d2:	f001 f9cf 	bl	800a574 <RCCEx_PLL2_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091da:	e00c      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3324      	adds	r3, #36	; 0x24
 80091e0:	2102      	movs	r1, #2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 fa78 	bl	800a6d8 <RCCEx_PLL3_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80091ec:	e003      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	75fb      	strb	r3, [r7, #23]
      break;
 80091f2:	e000      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80091f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d109      	bne.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80091fc:	4b9b      	ldr	r3, [pc, #620]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009200:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009208:	4998      	ldr	r1, [pc, #608]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800920a:	4313      	orrs	r3, r2
 800920c:	650b      	str	r3, [r1, #80]	; 0x50
 800920e:	e001      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009210:	7dfb      	ldrb	r3, [r7, #23]
 8009212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921c:	2b00      	cmp	r3, #0
 800921e:	d03d      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009224:	2b04      	cmp	r3, #4
 8009226:	d826      	bhi.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009228:	a201      	add	r2, pc, #4	; (adr r2, 8009230 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009245 	.word	0x08009245
 8009234:	08009253 	.word	0x08009253
 8009238:	08009265 	.word	0x08009265
 800923c:	0800927d 	.word	0x0800927d
 8009240:	0800927d 	.word	0x0800927d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009244:	4b89      	ldr	r3, [pc, #548]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	4a88      	ldr	r2, [pc, #544]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800924a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800924e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009250:	e015      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3304      	adds	r3, #4
 8009256:	2100      	movs	r1, #0
 8009258:	4618      	mov	r0, r3
 800925a:	f001 f98b 	bl	800a574 <RCCEx_PLL2_Config>
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009262:	e00c      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3324      	adds	r3, #36	; 0x24
 8009268:	2100      	movs	r1, #0
 800926a:	4618      	mov	r0, r3
 800926c:	f001 fa34 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009270:	4603      	mov	r3, r0
 8009272:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009274:	e003      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	75fb      	strb	r3, [r7, #23]
      break;
 800927a:	e000      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800927c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d109      	bne.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009284:	4b79      	ldr	r3, [pc, #484]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009288:	f023 0207 	bic.w	r2, r3, #7
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009290:	4976      	ldr	r1, [pc, #472]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009292:	4313      	orrs	r3, r2
 8009294:	650b      	str	r3, [r1, #80]	; 0x50
 8009296:	e001      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d042      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b0:	d02b      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80092b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b6:	d825      	bhi.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80092b8:	2bc0      	cmp	r3, #192	; 0xc0
 80092ba:	d028      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80092bc:	2bc0      	cmp	r3, #192	; 0xc0
 80092be:	d821      	bhi.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80092c0:	2b80      	cmp	r3, #128	; 0x80
 80092c2:	d016      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80092c4:	2b80      	cmp	r3, #128	; 0x80
 80092c6:	d81d      	bhi.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80092cc:	2b40      	cmp	r3, #64	; 0x40
 80092ce:	d007      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80092d0:	e018      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092d2:	4b66      	ldr	r3, [pc, #408]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	4a65      	ldr	r2, [pc, #404]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092de:	e017      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3304      	adds	r3, #4
 80092e4:	2100      	movs	r1, #0
 80092e6:	4618      	mov	r0, r3
 80092e8:	f001 f944 	bl	800a574 <RCCEx_PLL2_Config>
 80092ec:	4603      	mov	r3, r0
 80092ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80092f0:	e00e      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3324      	adds	r3, #36	; 0x24
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 f9ed 	bl	800a6d8 <RCCEx_PLL3_Config>
 80092fe:	4603      	mov	r3, r0
 8009300:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009302:	e005      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	75fb      	strb	r3, [r7, #23]
      break;
 8009308:	e002      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800930e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d109      	bne.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009316:	4b55      	ldr	r3, [pc, #340]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009322:	4952      	ldr	r1, [pc, #328]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009324:	4313      	orrs	r3, r2
 8009326:	650b      	str	r3, [r1, #80]	; 0x50
 8009328:	e001      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009336:	2b00      	cmp	r3, #0
 8009338:	d049      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009340:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009344:	d030      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009346:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800934a:	d82a      	bhi.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800934c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009350:	d02c      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009352:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009356:	d824      	bhi.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800935c:	d018      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800935e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009362:	d81e      	bhi.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800936c:	d007      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800936e:	e018      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009370:	4b3e      	ldr	r3, [pc, #248]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	4a3d      	ldr	r2, [pc, #244]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800937a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800937c:	e017      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	3304      	adds	r3, #4
 8009382:	2100      	movs	r1, #0
 8009384:	4618      	mov	r0, r3
 8009386:	f001 f8f5 	bl	800a574 <RCCEx_PLL2_Config>
 800938a:	4603      	mov	r3, r0
 800938c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800938e:	e00e      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3324      	adds	r3, #36	; 0x24
 8009394:	2100      	movs	r1, #0
 8009396:	4618      	mov	r0, r3
 8009398:	f001 f99e 	bl	800a6d8 <RCCEx_PLL3_Config>
 800939c:	4603      	mov	r3, r0
 800939e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80093a0:	e005      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	75fb      	strb	r3, [r7, #23]
      break;
 80093a6:	e002      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80093a8:	bf00      	nop
 80093aa:	e000      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80093ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80093b4:	4b2d      	ldr	r3, [pc, #180]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80093c2:	492a      	ldr	r1, [pc, #168]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	658b      	str	r3, [r1, #88]	; 0x58
 80093c8:	e001      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d04c      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80093e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093e4:	d030      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80093e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093ea:	d82a      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093f0:	d02c      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80093f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80093f6:	d824      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80093f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093fc:	d018      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80093fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009402:	d81e      	bhi.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800940c:	d007      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800940e:	e018      	b.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009410:	4b16      	ldr	r3, [pc, #88]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	4a15      	ldr	r2, [pc, #84]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800941a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800941c:	e017      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3304      	adds	r3, #4
 8009422:	2100      	movs	r1, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f8a5 	bl	800a574 <RCCEx_PLL2_Config>
 800942a:	4603      	mov	r3, r0
 800942c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800942e:	e00e      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3324      	adds	r3, #36	; 0x24
 8009434:	2100      	movs	r1, #0
 8009436:	4618      	mov	r0, r3
 8009438:	f001 f94e 	bl	800a6d8 <RCCEx_PLL3_Config>
 800943c:	4603      	mov	r3, r0
 800943e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009440:	e005      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	75fb      	strb	r3, [r7, #23]
      break;
 8009446:	e002      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009448:	bf00      	nop
 800944a:	e000      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800944c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10d      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009458:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009462:	4902      	ldr	r1, [pc, #8]	; (800946c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009464:	4313      	orrs	r3, r2
 8009466:	658b      	str	r3, [r1, #88]	; 0x58
 8009468:	e004      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800946a:	bf00      	nop
 800946c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d032      	beq.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009484:	2b30      	cmp	r3, #48	; 0x30
 8009486:	d01c      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009488:	2b30      	cmp	r3, #48	; 0x30
 800948a:	d817      	bhi.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800948c:	2b20      	cmp	r3, #32
 800948e:	d00c      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009490:	2b20      	cmp	r3, #32
 8009492:	d813      	bhi.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009494:	2b00      	cmp	r3, #0
 8009496:	d016      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009498:	2b10      	cmp	r3, #16
 800949a:	d10f      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800949c:	4baf      	ldr	r3, [pc, #700]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a0:	4aae      	ldr	r2, [pc, #696]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80094a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80094a8:	e00e      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	3304      	adds	r3, #4
 80094ae:	2102      	movs	r1, #2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f001 f85f 	bl	800a574 <RCCEx_PLL2_Config>
 80094b6:	4603      	mov	r3, r0
 80094b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80094ba:	e005      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	75fb      	strb	r3, [r7, #23]
      break;
 80094c0:	e002      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80094c2:	bf00      	nop
 80094c4:	e000      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80094c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d109      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80094ce:	4ba3      	ldr	r3, [pc, #652]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80094d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094da:	49a0      	ldr	r1, [pc, #640]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80094e0:	e001      	b.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
 80094e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d047      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094fa:	d030      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80094fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009500:	d82a      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009506:	d02c      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009508:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800950c:	d824      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800950e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009512:	d018      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009518:	d81e      	bhi.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800951e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009522:	d007      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009524:	e018      	b.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009526:	4b8d      	ldr	r3, [pc, #564]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952a:	4a8c      	ldr	r2, [pc, #560]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800952c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009530:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009532:	e017      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3304      	adds	r3, #4
 8009538:	2100      	movs	r1, #0
 800953a:	4618      	mov	r0, r3
 800953c:	f001 f81a 	bl	800a574 <RCCEx_PLL2_Config>
 8009540:	4603      	mov	r3, r0
 8009542:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009544:	e00e      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3324      	adds	r3, #36	; 0x24
 800954a:	2100      	movs	r1, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f001 f8c3 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009556:	e005      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	75fb      	strb	r3, [r7, #23]
      break;
 800955c:	e002      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800955e:	bf00      	nop
 8009560:	e000      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009562:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d109      	bne.n	800957e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800956a:	4b7c      	ldr	r3, [pc, #496]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800956c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009576:	4979      	ldr	r1, [pc, #484]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009578:	4313      	orrs	r3, r2
 800957a:	650b      	str	r3, [r1, #80]	; 0x50
 800957c:	e001      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d049      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009592:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009596:	d02e      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800959c:	d828      	bhi.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800959e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095a2:	d02a      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x482>
 80095a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095a8:	d822      	bhi.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095ae:	d026      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x486>
 80095b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095b4:	d81c      	bhi.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ba:	d010      	beq.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x466>
 80095bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095c0:	d816      	bhi.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d01d      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80095c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ca:	d111      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3304      	adds	r3, #4
 80095d0:	2101      	movs	r1, #1
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 ffce 	bl	800a574 <RCCEx_PLL2_Config>
 80095d8:	4603      	mov	r3, r0
 80095da:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80095dc:	e012      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3324      	adds	r3, #36	; 0x24
 80095e2:	2101      	movs	r1, #1
 80095e4:	4618      	mov	r0, r3
 80095e6:	f001 f877 	bl	800a6d8 <RCCEx_PLL3_Config>
 80095ea:	4603      	mov	r3, r0
 80095ec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80095ee:	e009      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	75fb      	strb	r3, [r7, #23]
      break;
 80095f4:	e006      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80095f6:	bf00      	nop
 80095f8:	e004      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80095fa:	bf00      	nop
 80095fc:	e002      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80095fe:	bf00      	nop
 8009600:	e000      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009602:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009604:	7dfb      	ldrb	r3, [r7, #23]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d109      	bne.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800960a:	4b54      	ldr	r3, [pc, #336]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800960c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800960e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009616:	4951      	ldr	r1, [pc, #324]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009618:	4313      	orrs	r3, r2
 800961a:	650b      	str	r3, [r1, #80]	; 0x50
 800961c:	e001      	b.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
 8009620:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d04b      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009638:	d02e      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800963a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800963e:	d828      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009644:	d02a      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964a:	d822      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800964c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009650:	d026      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009652:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009656:	d81c      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800965c:	d010      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800965e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009662:	d816      	bhi.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01d      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800966c:	d111      	bne.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3304      	adds	r3, #4
 8009672:	2101      	movs	r1, #1
 8009674:	4618      	mov	r0, r3
 8009676:	f000 ff7d 	bl	800a574 <RCCEx_PLL2_Config>
 800967a:	4603      	mov	r3, r0
 800967c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800967e:	e012      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	3324      	adds	r3, #36	; 0x24
 8009684:	2101      	movs	r1, #1
 8009686:	4618      	mov	r0, r3
 8009688:	f001 f826 	bl	800a6d8 <RCCEx_PLL3_Config>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009690:	e009      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	75fb      	strb	r3, [r7, #23]
      break;
 8009696:	e006      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009698:	bf00      	nop
 800969a:	e004      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800969c:	bf00      	nop
 800969e:	e002      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096a0:	bf00      	nop
 80096a2:	e000      	b.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80096a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10a      	bne.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096ac:	4b2b      	ldr	r3, [pc, #172]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80096ba:	4928      	ldr	r1, [pc, #160]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	658b      	str	r3, [r1, #88]	; 0x58
 80096c0:	e001      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d02f      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096da:	d00e      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80096dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096e0:	d814      	bhi.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d015      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80096e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096ea:	d10f      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ec:	4b1b      	ldr	r3, [pc, #108]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	4a1a      	ldr	r2, [pc, #104]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80096f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80096f8:	e00c      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3304      	adds	r3, #4
 80096fe:	2101      	movs	r1, #1
 8009700:	4618      	mov	r0, r3
 8009702:	f000 ff37 	bl	800a574 <RCCEx_PLL2_Config>
 8009706:	4603      	mov	r3, r0
 8009708:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800970a:	e003      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	75fb      	strb	r3, [r7, #23]
      break;
 8009710:	e000      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009714:	7dfb      	ldrb	r3, [r7, #23]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d109      	bne.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800971a:	4b10      	ldr	r3, [pc, #64]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800971c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009726:	490d      	ldr	r1, [pc, #52]	; (800975c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009728:	4313      	orrs	r3, r2
 800972a:	650b      	str	r3, [r1, #80]	; 0x50
 800972c:	e001      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972e:	7dfb      	ldrb	r3, [r7, #23]
 8009730:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d033      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009742:	2b03      	cmp	r3, #3
 8009744:	d81c      	bhi.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009746:	a201      	add	r2, pc, #4	; (adr r2, 800974c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	08009787 	.word	0x08009787
 8009750:	08009761 	.word	0x08009761
 8009754:	0800976f 	.word	0x0800976f
 8009758:	08009787 	.word	0x08009787
 800975c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009760:	4bb8      	ldr	r3, [pc, #736]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	4ab7      	ldr	r2, [pc, #732]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800976a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800976c:	e00c      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3304      	adds	r3, #4
 8009772:	2102      	movs	r1, #2
 8009774:	4618      	mov	r0, r3
 8009776:	f000 fefd 	bl	800a574 <RCCEx_PLL2_Config>
 800977a:	4603      	mov	r3, r0
 800977c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800977e:	e003      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	75fb      	strb	r3, [r7, #23]
      break;
 8009784:	e000      	b.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009788:	7dfb      	ldrb	r3, [r7, #23]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d109      	bne.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800978e:	4bad      	ldr	r3, [pc, #692]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009792:	f023 0203 	bic.w	r2, r3, #3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800979a:	49aa      	ldr	r1, [pc, #680]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800979c:	4313      	orrs	r3, r2
 800979e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097a0:	e001      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 8086 	beq.w	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80097b4:	4ba4      	ldr	r3, [pc, #656]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4aa3      	ldr	r2, [pc, #652]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80097ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80097c0:	f7f9 f92c 	bl	8002a1c <HAL_GetTick>
 80097c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097c6:	e009      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097c8:	f7f9 f928 	bl	8002a1c <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b64      	cmp	r3, #100	; 0x64
 80097d4:	d902      	bls.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	75fb      	strb	r3, [r7, #23]
        break;
 80097da:	e005      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097dc:	4b9a      	ldr	r3, [pc, #616]	; (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0ef      	beq.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d166      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80097ee:	4b95      	ldr	r3, [pc, #596]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097f8:	4053      	eors	r3, r2
 80097fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d013      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009802:	4b90      	ldr	r3, [pc, #576]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800980a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800980c:	4b8d      	ldr	r3, [pc, #564]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800980e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009810:	4a8c      	ldr	r2, [pc, #560]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009816:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009818:	4b8a      	ldr	r3, [pc, #552]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800981a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981c:	4a89      	ldr	r2, [pc, #548]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800981e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009822:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009824:	4a87      	ldr	r2, [pc, #540]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009834:	d115      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009836:	f7f9 f8f1 	bl	8002a1c <HAL_GetTick>
 800983a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800983c:	e00b      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800983e:	f7f9 f8ed 	bl	8002a1c <HAL_GetTick>
 8009842:	4602      	mov	r2, r0
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	f241 3288 	movw	r2, #5000	; 0x1388
 800984c:	4293      	cmp	r3, r2
 800984e:	d902      	bls.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	75fb      	strb	r3, [r7, #23]
            break;
 8009854:	e005      	b.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009856:	4b7b      	ldr	r3, [pc, #492]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b00      	cmp	r3, #0
 8009860:	d0ed      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009862:	7dfb      	ldrb	r3, [r7, #23]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d126      	bne.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800986e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009876:	d10d      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009878:	4b72      	ldr	r3, [pc, #456]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009886:	0919      	lsrs	r1, r3, #4
 8009888:	4b70      	ldr	r3, [pc, #448]	; (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800988a:	400b      	ands	r3, r1
 800988c:	496d      	ldr	r1, [pc, #436]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800988e:	4313      	orrs	r3, r2
 8009890:	610b      	str	r3, [r1, #16]
 8009892:	e005      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009894:	4b6b      	ldr	r3, [pc, #428]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	4a6a      	ldr	r2, [pc, #424]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800989a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800989e:	6113      	str	r3, [r2, #16]
 80098a0:	4b68      	ldr	r3, [pc, #416]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80098aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098ae:	4965      	ldr	r1, [pc, #404]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098b0:	4313      	orrs	r3, r2
 80098b2:	670b      	str	r3, [r1, #112]	; 0x70
 80098b4:	e004      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	75bb      	strb	r3, [r7, #22]
 80098ba:	e001      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098bc:	7dfb      	ldrb	r3, [r7, #23]
 80098be:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0301 	and.w	r3, r3, #1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d07e      	beq.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098d0:	2b28      	cmp	r3, #40	; 0x28
 80098d2:	d867      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80098d4:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80098d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098da:	bf00      	nop
 80098dc:	080099ab 	.word	0x080099ab
 80098e0:	080099a5 	.word	0x080099a5
 80098e4:	080099a5 	.word	0x080099a5
 80098e8:	080099a5 	.word	0x080099a5
 80098ec:	080099a5 	.word	0x080099a5
 80098f0:	080099a5 	.word	0x080099a5
 80098f4:	080099a5 	.word	0x080099a5
 80098f8:	080099a5 	.word	0x080099a5
 80098fc:	08009981 	.word	0x08009981
 8009900:	080099a5 	.word	0x080099a5
 8009904:	080099a5 	.word	0x080099a5
 8009908:	080099a5 	.word	0x080099a5
 800990c:	080099a5 	.word	0x080099a5
 8009910:	080099a5 	.word	0x080099a5
 8009914:	080099a5 	.word	0x080099a5
 8009918:	080099a5 	.word	0x080099a5
 800991c:	08009993 	.word	0x08009993
 8009920:	080099a5 	.word	0x080099a5
 8009924:	080099a5 	.word	0x080099a5
 8009928:	080099a5 	.word	0x080099a5
 800992c:	080099a5 	.word	0x080099a5
 8009930:	080099a5 	.word	0x080099a5
 8009934:	080099a5 	.word	0x080099a5
 8009938:	080099a5 	.word	0x080099a5
 800993c:	080099ab 	.word	0x080099ab
 8009940:	080099a5 	.word	0x080099a5
 8009944:	080099a5 	.word	0x080099a5
 8009948:	080099a5 	.word	0x080099a5
 800994c:	080099a5 	.word	0x080099a5
 8009950:	080099a5 	.word	0x080099a5
 8009954:	080099a5 	.word	0x080099a5
 8009958:	080099a5 	.word	0x080099a5
 800995c:	080099ab 	.word	0x080099ab
 8009960:	080099a5 	.word	0x080099a5
 8009964:	080099a5 	.word	0x080099a5
 8009968:	080099a5 	.word	0x080099a5
 800996c:	080099a5 	.word	0x080099a5
 8009970:	080099a5 	.word	0x080099a5
 8009974:	080099a5 	.word	0x080099a5
 8009978:	080099a5 	.word	0x080099a5
 800997c:	080099ab 	.word	0x080099ab
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3304      	adds	r3, #4
 8009984:	2101      	movs	r1, #1
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fdf4 	bl	800a574 <RCCEx_PLL2_Config>
 800998c:	4603      	mov	r3, r0
 800998e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009990:	e00c      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3324      	adds	r3, #36	; 0x24
 8009996:	2101      	movs	r1, #1
 8009998:	4618      	mov	r0, r3
 800999a:	f000 fe9d 	bl	800a6d8 <RCCEx_PLL3_Config>
 800999e:	4603      	mov	r3, r0
 80099a0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80099a2:	e003      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	75fb      	strb	r3, [r7, #23]
      break;
 80099a8:	e000      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80099aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d109      	bne.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80099b2:	4b24      	ldr	r3, [pc, #144]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099be:	4921      	ldr	r1, [pc, #132]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	654b      	str	r3, [r1, #84]	; 0x54
 80099c4:	e001      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c6:	7dfb      	ldrb	r3, [r7, #23]
 80099c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 0302 	and.w	r3, r3, #2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d03e      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099da:	2b05      	cmp	r3, #5
 80099dc:	d820      	bhi.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80099de:	a201      	add	r2, pc, #4	; (adr r2, 80099e4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80099e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e4:	08009a27 	.word	0x08009a27
 80099e8:	080099fd 	.word	0x080099fd
 80099ec:	08009a0f 	.word	0x08009a0f
 80099f0:	08009a27 	.word	0x08009a27
 80099f4:	08009a27 	.word	0x08009a27
 80099f8:	08009a27 	.word	0x08009a27
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3304      	adds	r3, #4
 8009a00:	2101      	movs	r1, #1
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fdb6 	bl	800a574 <RCCEx_PLL2_Config>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a0c:	e00c      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3324      	adds	r3, #36	; 0x24
 8009a12:	2101      	movs	r1, #1
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fe5f 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009a1e:	e003      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	75fb      	strb	r3, [r7, #23]
      break;
 8009a24:	e000      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d110      	bne.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a32:	f023 0207 	bic.w	r2, r3, #7
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a3a:	4902      	ldr	r1, [pc, #8]	; (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	654b      	str	r3, [r1, #84]	; 0x54
 8009a40:	e008      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009a42:	bf00      	nop
 8009a44:	58024400 	.word	0x58024400
 8009a48:	58024800 	.word	0x58024800
 8009a4c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d039      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a66:	2b05      	cmp	r3, #5
 8009a68:	d820      	bhi.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009a6a:	a201      	add	r2, pc, #4	; (adr r2, 8009a70 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a70:	08009ab3 	.word	0x08009ab3
 8009a74:	08009a89 	.word	0x08009a89
 8009a78:	08009a9b 	.word	0x08009a9b
 8009a7c:	08009ab3 	.word	0x08009ab3
 8009a80:	08009ab3 	.word	0x08009ab3
 8009a84:	08009ab3 	.word	0x08009ab3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fd70 	bl	800a574 <RCCEx_PLL2_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009a98:	e00c      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3324      	adds	r3, #36	; 0x24
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 fe19 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009aaa:	e003      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab0:	e000      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009ab2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10a      	bne.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009aba:	4bb7      	ldr	r3, [pc, #732]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009abe:	f023 0207 	bic.w	r2, r3, #7
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ac8:	49b3      	ldr	r1, [pc, #716]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	658b      	str	r3, [r1, #88]	; 0x58
 8009ace:	e001      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
 8009ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d04b      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aea:	d02e      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009af0:	d828      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009af6:	d02a      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009afc:	d822      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009afe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b02:	d026      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009b04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b08:	d81c      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b0e:	d010      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009b10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b14:	d816      	bhi.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d01d      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009b1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b1e:	d111      	bne.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3304      	adds	r3, #4
 8009b24:	2100      	movs	r1, #0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 fd24 	bl	800a574 <RCCEx_PLL2_Config>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b30:	e012      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	3324      	adds	r3, #36	; 0x24
 8009b36:	2102      	movs	r1, #2
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 fdcd 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009b42:	e009      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	75fb      	strb	r3, [r7, #23]
      break;
 8009b48:	e006      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b4a:	bf00      	nop
 8009b4c:	e004      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b4e:	bf00      	nop
 8009b50:	e002      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b52:	bf00      	nop
 8009b54:	e000      	b.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b5e:	4b8e      	ldr	r3, [pc, #568]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b6c:	498a      	ldr	r1, [pc, #552]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	654b      	str	r3, [r1, #84]	; 0x54
 8009b72:	e001      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
 8009b76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d04b      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b8a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b8e:	d02e      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009b90:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009b94:	d828      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b9a:	d02a      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba0:	d822      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009ba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ba6:	d026      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009ba8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bac:	d81c      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bb2:	d010      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bb8:	d816      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d01d      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc2:	d111      	bne.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	2100      	movs	r1, #0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fcd2 	bl	800a574 <RCCEx_PLL2_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009bd4:	e012      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3324      	adds	r3, #36	; 0x24
 8009bda:	2102      	movs	r1, #2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fd7b 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009be2:	4603      	mov	r3, r0
 8009be4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009be6:	e009      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	75fb      	strb	r3, [r7, #23]
      break;
 8009bec:	e006      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009bee:	bf00      	nop
 8009bf0:	e004      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009bf2:	bf00      	nop
 8009bf4:	e002      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009bf6:	bf00      	nop
 8009bf8:	e000      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10a      	bne.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c02:	4b65      	ldr	r3, [pc, #404]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c10:	4961      	ldr	r1, [pc, #388]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	658b      	str	r3, [r1, #88]	; 0x58
 8009c16:	e001      	b.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d04b      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c32:	d02e      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009c34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009c38:	d828      	bhi.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c3e:	d02a      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c44:	d822      	bhi.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c4a:	d026      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009c4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009c50:	d81c      	bhi.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c56:	d010      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c5c:	d816      	bhi.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d01d      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c66:	d111      	bne.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fc80 	bl	800a574 <RCCEx_PLL2_Config>
 8009c74:	4603      	mov	r3, r0
 8009c76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c78:	e012      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	3324      	adds	r3, #36	; 0x24
 8009c7e:	2102      	movs	r1, #2
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fd29 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009c86:	4603      	mov	r3, r0
 8009c88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009c8a:	e009      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8009c90:	e006      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009c92:	bf00      	nop
 8009c94:	e004      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009c96:	bf00      	nop
 8009c98:	e002      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009c9a:	bf00      	nop
 8009c9c:	e000      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10a      	bne.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ca6:	4b3c      	ldr	r3, [pc, #240]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cb4:	4938      	ldr	r1, [pc, #224]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	658b      	str	r3, [r1, #88]	; 0x58
 8009cba:	e001      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0308 	and.w	r3, r3, #8
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01a      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cd6:	d10a      	bne.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	3324      	adds	r3, #36	; 0x24
 8009cdc:	2102      	movs	r1, #2
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fcfa 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009cee:	4b2a      	ldr	r3, [pc, #168]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cfc:	4926      	ldr	r1, [pc, #152]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0310 	and.w	r3, r3, #16
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01a      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d18:	d10a      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3324      	adds	r3, #36	; 0x24
 8009d1e:	2102      	movs	r1, #2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 fcd9 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d30:	4b19      	ldr	r3, [pc, #100]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d3e:	4916      	ldr	r1, [pc, #88]	; (8009d98 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d036      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d5a:	d01f      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d60:	d817      	bhi.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d6a:	d009      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009d6c:	e011      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3304      	adds	r3, #4
 8009d72:	2100      	movs	r1, #0
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 fbfd 	bl	800a574 <RCCEx_PLL2_Config>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d7e:	e00e      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	3324      	adds	r3, #36	; 0x24
 8009d84:	2102      	movs	r1, #2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 fca6 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009d90:	e005      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	75fb      	strb	r3, [r7, #23]
      break;
 8009d96:	e002      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009d98:	58024400 	.word	0x58024400
      break;
 8009d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10a      	bne.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009da4:	4b93      	ldr	r3, [pc, #588]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009db2:	4990      	ldr	r1, [pc, #576]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009db4:	4313      	orrs	r3, r2
 8009db6:	658b      	str	r3, [r1, #88]	; 0x58
 8009db8:	e001      	b.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d033      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009dd4:	d01c      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009dd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009dda:	d816      	bhi.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009de0:	d003      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009de2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009de6:	d007      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009de8:	e00f      	b.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dea:	4b82      	ldr	r3, [pc, #520]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dee:	4a81      	ldr	r2, [pc, #516]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009df6:	e00c      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3324      	adds	r3, #36	; 0x24
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fc6a 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009e04:	4603      	mov	r3, r0
 8009e06:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009e08:	e003      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009e0e:	e000      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e12:	7dfb      	ldrb	r3, [r7, #23]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10a      	bne.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e18:	4b76      	ldr	r3, [pc, #472]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e26:	4973      	ldr	r1, [pc, #460]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	654b      	str	r3, [r1, #84]	; 0x54
 8009e2c:	e001      	b.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
 8009e30:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d029      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e4a:	d007      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009e4c:	e00f      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e4e:	4b69      	ldr	r3, [pc, #420]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	4a68      	ldr	r2, [pc, #416]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e5a:	e00b      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	2102      	movs	r1, #2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 fb86 	bl	800a574 <RCCEx_PLL2_Config>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009e6c:	e002      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	75fb      	strb	r3, [r7, #23]
      break;
 8009e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d109      	bne.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e7a:	4b5e      	ldr	r3, [pc, #376]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e86:	495b      	ldr	r1, [pc, #364]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e8c:	e001      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8e:	7dfb      	ldrb	r3, [r7, #23]
 8009e90:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00a      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	3324      	adds	r3, #36	; 0x24
 8009ea2:	2102      	movs	r1, #2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 fc17 	bl	800a6d8 <RCCEx_PLL3_Config>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d030      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ec8:	d017      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ece:	d811      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ed4:	d013      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eda:	d80b      	bhi.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d010      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee4:	d106      	bne.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee6:	4b43      	ldr	r3, [pc, #268]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eea:	4a42      	ldr	r2, [pc, #264]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009ef2:	e007      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef8:	e004      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009efa:	bf00      	nop
 8009efc:	e002      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009efe:	bf00      	nop
 8009f00:	e000      	b.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d109      	bne.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f0a:	4b3a      	ldr	r3, [pc, #232]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f16:	4937      	ldr	r1, [pc, #220]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	654b      	str	r3, [r1, #84]	; 0x54
 8009f1c:	e001      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1e:	7dfb      	ldrb	r3, [r7, #23]
 8009f20:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d008      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f2e:	4b31      	ldr	r3, [pc, #196]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3a:	492e      	ldr	r1, [pc, #184]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d009      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f4c:	4b29      	ldr	r3, [pc, #164]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f5a:	4926      	ldr	r1, [pc, #152]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d008      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f6c:	4b21      	ldr	r3, [pc, #132]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f70:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f78:	491e      	ldr	r1, [pc, #120]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00d      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f8a:	4b1a      	ldr	r3, [pc, #104]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	4a19      	ldr	r2, [pc, #100]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f94:	6113      	str	r3, [r2, #16]
 8009f96:	4b17      	ldr	r3, [pc, #92]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009f98:	691a      	ldr	r2, [r3, #16]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009fa0:	4914      	ldr	r1, [pc, #80]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	da08      	bge.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009fae:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fba:	490e      	ldr	r1, [pc, #56]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d009      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009fcc:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fda:	4906      	ldr	r1, [pc, #24]	; (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009fe0:	7dbb      	ldrb	r3, [r7, #22]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	e000      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3718      	adds	r7, #24
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	58024400 	.word	0x58024400

08009ff8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ffc:	f7ff f860 	bl	80090c0 <HAL_RCC_GetHCLKFreq>
 800a000:	4602      	mov	r2, r0
 800a002:	4b06      	ldr	r3, [pc, #24]	; (800a01c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a004:	6a1b      	ldr	r3, [r3, #32]
 800a006:	091b      	lsrs	r3, r3, #4
 800a008:	f003 0307 	and.w	r3, r3, #7
 800a00c:	4904      	ldr	r1, [pc, #16]	; (800a020 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a00e:	5ccb      	ldrb	r3, [r1, r3]
 800a010:	f003 031f 	and.w	r3, r3, #31
 800a014:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a018:	4618      	mov	r0, r3
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	58024400 	.word	0x58024400
 800a020:	08010b98 	.word	0x08010b98

0800a024 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a024:	b480      	push	{r7}
 800a026:	b089      	sub	sp, #36	; 0x24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a02c:	4ba1      	ldr	r3, [pc, #644]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a030:	f003 0303 	and.w	r3, r3, #3
 800a034:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a036:	4b9f      	ldr	r3, [pc, #636]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03a:	0b1b      	lsrs	r3, r3, #12
 800a03c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a040:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a042:	4b9c      	ldr	r3, [pc, #624]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	091b      	lsrs	r3, r3, #4
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a04e:	4b99      	ldr	r3, [pc, #612]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a052:	08db      	lsrs	r3, r3, #3
 800a054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	fb02 f303 	mul.w	r3, r2, r3
 800a05e:	ee07 3a90 	vmov	s15, r3
 800a062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a066:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 8111 	beq.w	800a294 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	2b02      	cmp	r3, #2
 800a076:	f000 8083 	beq.w	800a180 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	f200 80a1 	bhi.w	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d003      	beq.n	800a090 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d056      	beq.n	800a13c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a08e:	e099      	b.n	800a1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a090:	4b88      	ldr	r3, [pc, #544]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0320 	and.w	r3, r3, #32
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d02d      	beq.n	800a0f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a09c:	4b85      	ldr	r3, [pc, #532]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	08db      	lsrs	r3, r3, #3
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	4a84      	ldr	r2, [pc, #528]	; (800a2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	ee07 3a90 	vmov	s15, r3
 800a0b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c6:	4b7b      	ldr	r3, [pc, #492]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ce:	ee07 3a90 	vmov	s15, r3
 800a0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0da:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a0f6:	e087      	b.n	800a208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	ee07 3a90 	vmov	s15, r3
 800a0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a102:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a10a:	4b6a      	ldr	r3, [pc, #424]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a112:	ee07 3a90 	vmov	s15, r3
 800a116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a11a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a11e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a12a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a13a:	e065      	b.n	800a208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a14a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a14e:	4b59      	ldr	r3, [pc, #356]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a156:	ee07 3a90 	vmov	s15, r3
 800a15a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a15e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a162:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a16a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a16e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a17a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a17e:	e043      	b.n	800a208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	ee07 3a90 	vmov	s15, r3
 800a186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a18e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a192:	4b48      	ldr	r3, [pc, #288]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19a:	ee07 3a90 	vmov	s15, r3
 800a19e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a1c2:	e021      	b.n	800a208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	ee07 3a90 	vmov	s15, r3
 800a1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d6:	4b37      	ldr	r3, [pc, #220]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1de:	ee07 3a90 	vmov	s15, r3
 800a1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a2bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a206:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a208:	4b2a      	ldr	r3, [pc, #168]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20c:	0a5b      	lsrs	r3, r3, #9
 800a20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a21a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a21e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a222:	edd7 6a07 	vldr	s13, [r7, #28]
 800a226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a22a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a22e:	ee17 2a90 	vmov	r2, s15
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a236:	4b1f      	ldr	r3, [pc, #124]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23a:	0c1b      	lsrs	r3, r3, #16
 800a23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a240:	ee07 3a90 	vmov	s15, r3
 800a244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a24c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a250:	edd7 6a07 	vldr	s13, [r7, #28]
 800a254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a25c:	ee17 2a90 	vmov	r2, s15
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a264:	4b13      	ldr	r3, [pc, #76]	; (800a2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a268:	0e1b      	lsrs	r3, r3, #24
 800a26a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a26e:	ee07 3a90 	vmov	s15, r3
 800a272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a27a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a27e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a28a:	ee17 2a90 	vmov	r2, s15
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a292:	e008      	b.n	800a2a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	609a      	str	r2, [r3, #8]
}
 800a2a6:	bf00      	nop
 800a2a8:	3724      	adds	r7, #36	; 0x24
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr
 800a2b2:	bf00      	nop
 800a2b4:	58024400 	.word	0x58024400
 800a2b8:	03d09000 	.word	0x03d09000
 800a2bc:	46000000 	.word	0x46000000
 800a2c0:	4c742400 	.word	0x4c742400
 800a2c4:	4a742400 	.word	0x4a742400
 800a2c8:	4bbebc20 	.word	0x4bbebc20

0800a2cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b089      	sub	sp, #36	; 0x24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2d4:	4ba1      	ldr	r3, [pc, #644]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d8:	f003 0303 	and.w	r3, r3, #3
 800a2dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a2de:	4b9f      	ldr	r3, [pc, #636]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e2:	0d1b      	lsrs	r3, r3, #20
 800a2e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a2ea:	4b9c      	ldr	r3, [pc, #624]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ee:	0a1b      	lsrs	r3, r3, #8
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a2f6:	4b99      	ldr	r3, [pc, #612]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fa:	08db      	lsrs	r3, r3, #3
 800a2fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	fb02 f303 	mul.w	r3, r2, r3
 800a306:	ee07 3a90 	vmov	s15, r3
 800a30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a30e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f000 8111 	beq.w	800a53c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	f000 8083 	beq.w	800a428 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	2b02      	cmp	r3, #2
 800a326:	f200 80a1 	bhi.w	800a46c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d056      	beq.n	800a3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a336:	e099      	b.n	800a46c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a338:	4b88      	ldr	r3, [pc, #544]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0320 	and.w	r3, r3, #32
 800a340:	2b00      	cmp	r3, #0
 800a342:	d02d      	beq.n	800a3a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a344:	4b85      	ldr	r3, [pc, #532]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	08db      	lsrs	r3, r3, #3
 800a34a:	f003 0303 	and.w	r3, r3, #3
 800a34e:	4a84      	ldr	r2, [pc, #528]	; (800a560 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a350:	fa22 f303 	lsr.w	r3, r2, r3
 800a354:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	ee07 3a90 	vmov	s15, r3
 800a35c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	ee07 3a90 	vmov	s15, r3
 800a366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a36e:	4b7b      	ldr	r3, [pc, #492]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a376:	ee07 3a90 	vmov	s15, r3
 800a37a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a37e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a382:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a38a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a38e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a39e:	e087      	b.n	800a4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	ee07 3a90 	vmov	s15, r3
 800a3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a568 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a3ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3b2:	4b6a      	ldr	r3, [pc, #424]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3ba:	ee07 3a90 	vmov	s15, r3
 800a3be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a3ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3e2:	e065      	b.n	800a4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	ee07 3a90 	vmov	s15, r3
 800a3ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a56c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a3f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3f6:	4b59      	ldr	r3, [pc, #356]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a406:	ed97 6a03 	vldr	s12, [r7, #12]
 800a40a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a40e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a41e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a426:	e043      	b.n	800a4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	ee07 3a90 	vmov	s15, r3
 800a42e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a432:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a43a:	4b48      	ldr	r3, [pc, #288]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a442:	ee07 3a90 	vmov	s15, r3
 800a446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a44a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a44e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a45a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a466:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a46a:	e021      	b.n	800a4b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	ee07 3a90 	vmov	s15, r3
 800a472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a476:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a56c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a47e:	4b37      	ldr	r3, [pc, #220]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a486:	ee07 3a90 	vmov	s15, r3
 800a48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a48e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a492:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a49e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a4ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a4b0:	4b2a      	ldr	r3, [pc, #168]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b4:	0a5b      	lsrs	r3, r3, #9
 800a4b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4d6:	ee17 2a90 	vmov	r2, s15
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a4de:	4b1f      	ldr	r3, [pc, #124]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	0c1b      	lsrs	r3, r3, #16
 800a4e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4e8:	ee07 3a90 	vmov	s15, r3
 800a4ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a504:	ee17 2a90 	vmov	r2, s15
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a50c:	4b13      	ldr	r3, [pc, #76]	; (800a55c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a510:	0e1b      	lsrs	r3, r3, #24
 800a512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a516:	ee07 3a90 	vmov	s15, r3
 800a51a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a522:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a526:	edd7 6a07 	vldr	s13, [r7, #28]
 800a52a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a52e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a532:	ee17 2a90 	vmov	r2, s15
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a53a:	e008      	b.n	800a54e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	609a      	str	r2, [r3, #8]
}
 800a54e:	bf00      	nop
 800a550:	3724      	adds	r7, #36	; 0x24
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	58024400 	.word	0x58024400
 800a560:	03d09000 	.word	0x03d09000
 800a564:	46000000 	.word	0x46000000
 800a568:	4c742400 	.word	0x4c742400
 800a56c:	4a742400 	.word	0x4a742400
 800a570:	4bbebc20 	.word	0x4bbebc20

0800a574 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a582:	4b53      	ldr	r3, [pc, #332]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a586:	f003 0303 	and.w	r3, r3, #3
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d101      	bne.n	800a592 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e099      	b.n	800a6c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a592:	4b4f      	ldr	r3, [pc, #316]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a4e      	ldr	r2, [pc, #312]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a598:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a59c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a59e:	f7f8 fa3d 	bl	8002a1c <HAL_GetTick>
 800a5a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5a4:	e008      	b.n	800a5b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a5a6:	f7f8 fa39 	bl	8002a1c <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d901      	bls.n	800a5b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e086      	b.n	800a6c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a5b8:	4b45      	ldr	r3, [pc, #276]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1f0      	bne.n	800a5a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a5c4:	4b42      	ldr	r3, [pc, #264]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a5c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	031b      	lsls	r3, r3, #12
 800a5d2:	493f      	ldr	r1, [pc, #252]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	628b      	str	r3, [r1, #40]	; 0x28
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	025b      	lsls	r3, r3, #9
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	041b      	lsls	r3, r3, #16
 800a5f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5fa:	431a      	orrs	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	3b01      	subs	r3, #1
 800a602:	061b      	lsls	r3, r3, #24
 800a604:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a608:	4931      	ldr	r1, [pc, #196]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a60e:	4b30      	ldr	r3, [pc, #192]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a612:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	492d      	ldr	r1, [pc, #180]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a61c:	4313      	orrs	r3, r2
 800a61e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a620:	4b2b      	ldr	r3, [pc, #172]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a624:	f023 0220 	bic.w	r2, r3, #32
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	4928      	ldr	r1, [pc, #160]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a632:	4b27      	ldr	r3, [pc, #156]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a636:	4a26      	ldr	r2, [pc, #152]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a638:	f023 0310 	bic.w	r3, r3, #16
 800a63c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a63e:	4b24      	ldr	r3, [pc, #144]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a642:	4b24      	ldr	r3, [pc, #144]	; (800a6d4 <RCCEx_PLL2_Config+0x160>)
 800a644:	4013      	ands	r3, r2
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	69d2      	ldr	r2, [r2, #28]
 800a64a:	00d2      	lsls	r2, r2, #3
 800a64c:	4920      	ldr	r1, [pc, #128]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a652:	4b1f      	ldr	r3, [pc, #124]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	4a1e      	ldr	r2, [pc, #120]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a658:	f043 0310 	orr.w	r3, r3, #16
 800a65c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d106      	bne.n	800a672 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a664:	4b1a      	ldr	r3, [pc, #104]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a668:	4a19      	ldr	r2, [pc, #100]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a66a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a66e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a670:	e00f      	b.n	800a692 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d106      	bne.n	800a686 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a678:	4b15      	ldr	r3, [pc, #84]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67c:	4a14      	ldr	r2, [pc, #80]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a67e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a682:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a684:	e005      	b.n	800a692 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a686:	4b12      	ldr	r3, [pc, #72]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68a:	4a11      	ldr	r2, [pc, #68]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a68c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a690:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a692:	4b0f      	ldr	r3, [pc, #60]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a0e      	ldr	r2, [pc, #56]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a698:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a69c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a69e:	f7f8 f9bd 	bl	8002a1c <HAL_GetTick>
 800a6a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6a4:	e008      	b.n	800a6b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a6a6:	f7f8 f9b9 	bl	8002a1c <HAL_GetTick>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d901      	bls.n	800a6b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6b4:	2303      	movs	r3, #3
 800a6b6:	e006      	b.n	800a6c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a6b8:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <RCCEx_PLL2_Config+0x15c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d0f0      	beq.n	800a6a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	58024400 	.word	0x58024400
 800a6d4:	ffff0007 	.word	0xffff0007

0800a6d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6e6:	4b53      	ldr	r3, [pc, #332]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ea:	f003 0303 	and.w	r3, r3, #3
 800a6ee:	2b03      	cmp	r3, #3
 800a6f0:	d101      	bne.n	800a6f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e099      	b.n	800a82a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a6f6:	4b4f      	ldr	r3, [pc, #316]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a4e      	ldr	r2, [pc, #312]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a6fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a702:	f7f8 f98b 	bl	8002a1c <HAL_GetTick>
 800a706:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a708:	e008      	b.n	800a71c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a70a:	f7f8 f987 	bl	8002a1c <HAL_GetTick>
 800a70e:	4602      	mov	r2, r0
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	2b02      	cmp	r3, #2
 800a716:	d901      	bls.n	800a71c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a718:	2303      	movs	r3, #3
 800a71a:	e086      	b.n	800a82a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a71c:	4b45      	ldr	r3, [pc, #276]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1f0      	bne.n	800a70a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a728:	4b42      	ldr	r3, [pc, #264]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	051b      	lsls	r3, r3, #20
 800a736:	493f      	ldr	r1, [pc, #252]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a738:	4313      	orrs	r3, r2
 800a73a:	628b      	str	r3, [r1, #40]	; 0x28
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	3b01      	subs	r3, #1
 800a742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	3b01      	subs	r3, #1
 800a74c:	025b      	lsls	r3, r3, #9
 800a74e:	b29b      	uxth	r3, r3
 800a750:	431a      	orrs	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	3b01      	subs	r3, #1
 800a758:	041b      	lsls	r3, r3, #16
 800a75a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	3b01      	subs	r3, #1
 800a766:	061b      	lsls	r3, r3, #24
 800a768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a76c:	4931      	ldr	r1, [pc, #196]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a772:	4b30      	ldr	r3, [pc, #192]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	492d      	ldr	r1, [pc, #180]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a780:	4313      	orrs	r3, r2
 800a782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a784:	4b2b      	ldr	r3, [pc, #172]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a788:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	4928      	ldr	r1, [pc, #160]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a792:	4313      	orrs	r3, r2
 800a794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a796:	4b27      	ldr	r3, [pc, #156]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79a:	4a26      	ldr	r2, [pc, #152]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a79c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a7a2:	4b24      	ldr	r3, [pc, #144]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7a6:	4b24      	ldr	r3, [pc, #144]	; (800a838 <RCCEx_PLL3_Config+0x160>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	69d2      	ldr	r2, [r2, #28]
 800a7ae:	00d2      	lsls	r2, r2, #3
 800a7b0:	4920      	ldr	r1, [pc, #128]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a7b6:	4b1f      	ldr	r3, [pc, #124]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ba:	4a1e      	ldr	r2, [pc, #120]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d106      	bne.n	800a7d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a7c8:	4b1a      	ldr	r3, [pc, #104]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7cc:	4a19      	ldr	r2, [pc, #100]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a7d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7d4:	e00f      	b.n	800a7f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d106      	bne.n	800a7ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a7dc:	4b15      	ldr	r3, [pc, #84]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e0:	4a14      	ldr	r2, [pc, #80]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7e8:	e005      	b.n	800a7f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a7ea:	4b12      	ldr	r3, [pc, #72]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ee:	4a11      	ldr	r2, [pc, #68]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a0e      	ldr	r2, [pc, #56]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a7fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a802:	f7f8 f90b 	bl	8002a1c <HAL_GetTick>
 800a806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a808:	e008      	b.n	800a81c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a80a:	f7f8 f907 	bl	8002a1c <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	2b02      	cmp	r3, #2
 800a816:	d901      	bls.n	800a81c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a818:	2303      	movs	r3, #3
 800a81a:	e006      	b.n	800a82a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a81c:	4b05      	ldr	r3, [pc, #20]	; (800a834 <RCCEx_PLL3_Config+0x15c>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d0f0      	beq.n	800a80a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a828:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	58024400 	.word	0x58024400
 800a838:	ffff0007 	.word	0xffff0007

0800a83c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800a844:	2300      	movs	r3, #0
 800a846:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e0eb      	b.n	800aa2a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a75      	ldr	r2, [pc, #468]	; (800aa34 <HAL_SPI_Init+0x1f8>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d00f      	beq.n	800a882 <HAL_SPI_Init+0x46>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a74      	ldr	r2, [pc, #464]	; (800aa38 <HAL_SPI_Init+0x1fc>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d00a      	beq.n	800a882 <HAL_SPI_Init+0x46>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a72      	ldr	r2, [pc, #456]	; (800aa3c <HAL_SPI_Init+0x200>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d005      	beq.n	800a882 <HAL_SPI_Init+0x46>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	2b0f      	cmp	r3, #15
 800a87c:	d901      	bls.n	800a882 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e0d3      	b.n	800aa2a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f001 f87a 	bl	800b97c <SPI_GetPacketSize>
 800a888:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a69      	ldr	r2, [pc, #420]	; (800aa34 <HAL_SPI_Init+0x1f8>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d00c      	beq.n	800a8ae <HAL_SPI_Init+0x72>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a67      	ldr	r2, [pc, #412]	; (800aa38 <HAL_SPI_Init+0x1fc>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d007      	beq.n	800a8ae <HAL_SPI_Init+0x72>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a66      	ldr	r2, [pc, #408]	; (800aa3c <HAL_SPI_Init+0x200>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d002      	beq.n	800a8ae <HAL_SPI_Init+0x72>
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b08      	cmp	r3, #8
 800a8ac:	d811      	bhi.n	800a8d2 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a8b2:	4a60      	ldr	r2, [pc, #384]	; (800aa34 <HAL_SPI_Init+0x1f8>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d009      	beq.n	800a8cc <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a5e      	ldr	r2, [pc, #376]	; (800aa38 <HAL_SPI_Init+0x1fc>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d004      	beq.n	800a8cc <HAL_SPI_Init+0x90>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a5d      	ldr	r2, [pc, #372]	; (800aa3c <HAL_SPI_Init+0x200>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d104      	bne.n	800a8d6 <HAL_SPI_Init+0x9a>
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	2b10      	cmp	r3, #16
 800a8d0:	d901      	bls.n	800a8d6 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e0a9      	b.n	800aa2a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d106      	bne.n	800a8f0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7f7 f8c2 	bl	8001a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f022 0201 	bic.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a910:	d119      	bne.n	800a946 <HAL_SPI_Init+0x10a>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a91a:	d103      	bne.n	800a924 <HAL_SPI_Init+0xe8>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	2b00      	cmp	r3, #0
 800a922:	d008      	beq.n	800a936 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10c      	bne.n	800a946 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a934:	d107      	bne.n	800a946 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a944:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	69da      	ldr	r2, [r3, #28]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a94e:	431a      	orrs	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	431a      	orrs	r2, r3
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a958:	ea42 0103 	orr.w	r1, r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68da      	ldr	r2, [r3, #12]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	430a      	orrs	r2, r1
 800a966:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	431a      	orrs	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	431a      	orrs	r2, r3
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	431a      	orrs	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	431a      	orrs	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	431a      	orrs	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	431a      	orrs	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a99a:	431a      	orrs	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9a6:	ea42 0103 	orr.w	r1, r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d113      	bne.n	800a9e6 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a9e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f022 0201 	bic.w	r2, r2, #1
 800a9f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00a      	beq.n	800aa18 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	40013000 	.word	0x40013000
 800aa38:	40003800 	.word	0x40003800
 800aa3c:	40003c00 	.word	0x40003c00

0800aa40 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08a      	sub	sp, #40	; 0x28
 800aa44:	af02      	add	r7, sp, #8
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	603b      	str	r3, [r7, #0]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	3320      	adds	r3, #32
 800aa56:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d101      	bne.n	800aa6a <HAL_SPI_Transmit+0x2a>
 800aa66:	2302      	movs	r3, #2
 800aa68:	e1d7      	b.n	800ae1a <HAL_SPI_Transmit+0x3da>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa72:	f7f7 ffd3 	bl	8002a1c <HAL_GetTick>
 800aa76:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d007      	beq.n	800aa94 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800aa84:	2302      	movs	r3, #2
 800aa86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aa90:	7efb      	ldrb	r3, [r7, #27]
 800aa92:	e1c2      	b.n	800ae1a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d002      	beq.n	800aaa0 <HAL_SPI_Transmit+0x60>
 800aa9a:	88fb      	ldrh	r3, [r7, #6]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d107      	bne.n	800aab0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aaac:	7efb      	ldrb	r3, [r7, #27]
 800aaae:	e1b4      	b.n	800ae1a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2203      	movs	r2, #3
 800aab4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	68ba      	ldr	r2, [r7, #8]
 800aac4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	88fa      	ldrh	r2, [r7, #6]
 800aaca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	88fa      	ldrh	r2, [r7, #6]
 800aad2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ab00:	d107      	bne.n	800ab12 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab10:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	4b96      	ldr	r3, [pc, #600]	; (800ad74 <HAL_SPI_Transmit+0x334>)
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	88f9      	ldrh	r1, [r7, #6]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	6812      	ldr	r2, [r2, #0]
 800ab22:	430b      	orrs	r3, r1
 800ab24:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f042 0201 	orr.w	r2, r2, #1
 800ab34:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab3e:	d107      	bne.n	800ab50 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	2b0f      	cmp	r3, #15
 800ab56:	d947      	bls.n	800abe8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ab58:	e03f      	b.n	800abda <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	f003 0302 	and.w	r3, r3, #2
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d114      	bne.n	800ab92 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6812      	ldr	r2, [r2, #0]
 800ab72:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab78:	1d1a      	adds	r2, r3, #4
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	3b01      	subs	r3, #1
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab90:	e023      	b.n	800abda <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab92:	f7f7 ff43 	bl	8002a1c <HAL_GetTick>
 800ab96:	4602      	mov	r2, r0
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d803      	bhi.n	800abaa <HAL_SPI_Transmit+0x16a>
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba8:	d102      	bne.n	800abb0 <HAL_SPI_Transmit+0x170>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d114      	bne.n	800abda <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f000 fe15 	bl	800b7e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e11f      	b.n	800ae1a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1b9      	bne.n	800ab5a <HAL_SPI_Transmit+0x11a>
 800abe6:	e0f2      	b.n	800adce <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	2b07      	cmp	r3, #7
 800abee:	f240 80e7 	bls.w	800adc0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800abf2:	e05d      	b.n	800acb0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	695b      	ldr	r3, [r3, #20]
 800abfa:	f003 0302 	and.w	r3, r3, #2
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d132      	bne.n	800ac68 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d918      	bls.n	800ac40 <HAL_SPI_Transmit+0x200>
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d014      	beq.n	800ac40 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	6812      	ldr	r2, [r2, #0]
 800ac20:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac26:	1d1a      	adds	r2, r3, #4
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	3b02      	subs	r3, #2
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ac3e:	e037      	b.n	800acb0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac44:	881a      	ldrh	r2, [r3, #0]
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac4e:	1c9a      	adds	r2, r3, #2
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	3b01      	subs	r3, #1
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ac66:	e023      	b.n	800acb0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac68:	f7f7 fed8 	bl	8002a1c <HAL_GetTick>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d803      	bhi.n	800ac80 <HAL_SPI_Transmit+0x240>
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7e:	d102      	bne.n	800ac86 <HAL_SPI_Transmit+0x246>
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d114      	bne.n	800acb0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 fdaa 	bl	800b7e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e0b4      	b.n	800ae1a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d19b      	bne.n	800abf4 <HAL_SPI_Transmit+0x1b4>
 800acbc:	e087      	b.n	800adce <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	695b      	ldr	r3, [r3, #20]
 800acc4:	f003 0302 	and.w	r3, r3, #2
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d155      	bne.n	800ad78 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d918      	bls.n	800ad0a <HAL_SPI_Transmit+0x2ca>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acdc:	2b40      	cmp	r3, #64	; 0x40
 800acde:	d914      	bls.n	800ad0a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	6812      	ldr	r2, [r2, #0]
 800acea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acf0:	1d1a      	adds	r2, r3, #4
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	3b04      	subs	r3, #4
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ad08:	e05a      	b.n	800adc0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d917      	bls.n	800ad46 <HAL_SPI_Transmit+0x306>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d013      	beq.n	800ad46 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad22:	881a      	ldrh	r2, [r3, #0]
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad2c:	1c9a      	adds	r2, r3, #2
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	3b02      	subs	r3, #2
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ad44:	e03c      	b.n	800adc0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	3320      	adds	r3, #32
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	3b01      	subs	r3, #1
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ad70:	e026      	b.n	800adc0 <HAL_SPI_Transmit+0x380>
 800ad72:	bf00      	nop
 800ad74:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad78:	f7f7 fe50 	bl	8002a1c <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d803      	bhi.n	800ad90 <HAL_SPI_Transmit+0x350>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8e:	d102      	bne.n	800ad96 <HAL_SPI_Transmit+0x356>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d114      	bne.n	800adc0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 fd22 	bl	800b7e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e02c      	b.n	800ae1a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f47f af78 	bne.w	800acbe <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2200      	movs	r2, #0
 800add6:	2108      	movs	r1, #8
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 fda1 	bl	800b920 <SPI_WaitOnFlagUntilTimeout>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d007      	beq.n	800adf4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adea:	f043 0220 	orr.w	r2, r3, #32
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 fcf3 	bl	800b7e0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e000      	b.n	800ae1a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ae18:	7efb      	ldrb	r3, [r7, #27]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3720      	adds	r7, #32
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop

0800ae24 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08a      	sub	sp, #40	; 0x28
 800ae28:	af02      	add	r7, sp, #8
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	603b      	str	r3, [r7, #0]
 800ae30:	4613      	mov	r3, r2
 800ae32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	3330      	adds	r3, #48	; 0x30
 800ae3e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae48:	d112      	bne.n	800ae70 <HAL_SPI_Receive+0x4c>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10e      	bne.n	800ae70 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2204      	movs	r2, #4
 800ae56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ae5a:	88fa      	ldrh	r2, [r7, #6]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	4613      	mov	r3, r2
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 f9ce 	bl	800b208 <HAL_SPI_TransmitReceive>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	e1c7      	b.n	800b200 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d101      	bne.n	800ae7e <HAL_SPI_Receive+0x5a>
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	e1c0      	b.n	800b200 <HAL_SPI_Receive+0x3dc>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2201      	movs	r2, #1
 800ae82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae86:	f7f7 fdc9 	bl	8002a1c <HAL_GetTick>
 800ae8a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d007      	beq.n	800aea8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ae98:	2302      	movs	r3, #2
 800ae9a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aea4:	7ffb      	ldrb	r3, [r7, #31]
 800aea6:	e1ab      	b.n	800b200 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d002      	beq.n	800aeb4 <HAL_SPI_Receive+0x90>
 800aeae:	88fb      	ldrh	r3, [r7, #6]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d107      	bne.n	800aec4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aec0:	7ffb      	ldrb	r3, [r7, #31]
 800aec2:	e19d      	b.n	800b200 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2204      	movs	r2, #4
 800aec8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2200      	movs	r2, #0
 800aed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	88fa      	ldrh	r2, [r7, #6]
 800aede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	88fa      	ldrh	r2, [r7, #6]
 800aee6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800af14:	d107      	bne.n	800af26 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af24:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	685a      	ldr	r2, [r3, #4]
 800af2c:	4b94      	ldr	r3, [pc, #592]	; (800b180 <HAL_SPI_Receive+0x35c>)
 800af2e:	4013      	ands	r3, r2
 800af30:	88f9      	ldrh	r1, [r7, #6]
 800af32:	68fa      	ldr	r2, [r7, #12]
 800af34:	6812      	ldr	r2, [r2, #0]
 800af36:	430b      	orrs	r3, r1
 800af38:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f042 0201 	orr.w	r2, r2, #1
 800af48:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af52:	d107      	bne.n	800af64 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	2b0f      	cmp	r3, #15
 800af6a:	d948      	bls.n	800affe <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800af6c:	e040      	b.n	800aff0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	695a      	ldr	r2, [r3, #20]
 800af74:	f248 0308 	movw	r3, #32776	; 0x8008
 800af78:	4013      	ands	r3, r2
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d014      	beq.n	800afa8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af88:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af8e:	1d1a      	adds	r2, r3, #4
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	3b01      	subs	r3, #1
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800afa6:	e023      	b.n	800aff0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afa8:	f7f7 fd38 	bl	8002a1c <HAL_GetTick>
 800afac:	4602      	mov	r2, r0
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d803      	bhi.n	800afc0 <HAL_SPI_Receive+0x19c>
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afbe:	d102      	bne.n	800afc6 <HAL_SPI_Receive+0x1a2>
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d114      	bne.n	800aff0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 fc0a 	bl	800b7e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e107      	b.n	800b200 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1b8      	bne.n	800af6e <HAL_SPI_Receive+0x14a>
 800affc:	e0ed      	b.n	800b1da <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	2b07      	cmp	r3, #7
 800b004:	f240 80e2 	bls.w	800b1cc <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800b008:	e05b      	b.n	800b0c2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	695b      	ldr	r3, [r3, #20]
 800b010:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d030      	beq.n	800b07a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d014      	beq.n	800b050 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b02e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b030:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b036:	1d1a      	adds	r2, r3, #4
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b042:	b29b      	uxth	r3, r3
 800b044:	3b02      	subs	r3, #2
 800b046:	b29a      	uxth	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b04e:	e038      	b.n	800b0c2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	8812      	ldrh	r2, [r2, #0]
 800b058:	b292      	uxth	r2, r2
 800b05a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b060:	1c9a      	adds	r2, r3, #2
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	3b01      	subs	r3, #1
 800b070:	b29a      	uxth	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b078:	e023      	b.n	800b0c2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b07a:	f7f7 fccf 	bl	8002a1c <HAL_GetTick>
 800b07e:	4602      	mov	r2, r0
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d803      	bhi.n	800b092 <HAL_SPI_Receive+0x26e>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b090:	d102      	bne.n	800b098 <HAL_SPI_Receive+0x274>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d114      	bne.n	800b0c2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 fba1 	bl	800b7e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e09e      	b.n	800b200 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d19d      	bne.n	800b00a <HAL_SPI_Receive+0x1e6>
 800b0ce:	e084      	b.n	800b1da <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d052      	beq.n	800b184 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d014      	beq.n	800b116 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b0f6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0fc:	1d1a      	adds	r2, r3, #4
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b108:	b29b      	uxth	r3, r3
 800b10a:	3b04      	subs	r3, #4
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b114:	e05a      	b.n	800b1cc <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b124:	d914      	bls.n	800b150 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b12a:	69ba      	ldr	r2, [r7, #24]
 800b12c:	8812      	ldrh	r2, [r2, #0]
 800b12e:	b292      	uxth	r2, r2
 800b130:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b136:	1c9a      	adds	r2, r3, #2
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b142:	b29b      	uxth	r3, r3
 800b144:	3b02      	subs	r3, #2
 800b146:	b29a      	uxth	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b14e:	e03d      	b.n	800b1cc <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b15c:	7812      	ldrb	r2, [r2, #0]
 800b15e:	b2d2      	uxtb	r2, r2
 800b160:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b172:	b29b      	uxth	r3, r3
 800b174:	3b01      	subs	r3, #1
 800b176:	b29a      	uxth	r2, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b17e:	e025      	b.n	800b1cc <HAL_SPI_Receive+0x3a8>
 800b180:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b184:	f7f7 fc4a 	bl	8002a1c <HAL_GetTick>
 800b188:	4602      	mov	r2, r0
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	1ad3      	subs	r3, r2, r3
 800b18e:	683a      	ldr	r2, [r7, #0]
 800b190:	429a      	cmp	r2, r3
 800b192:	d803      	bhi.n	800b19c <HAL_SPI_Receive+0x378>
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19a:	d102      	bne.n	800b1a2 <HAL_SPI_Receive+0x37e>
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d114      	bne.n	800b1cc <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f000 fb1c 	bl	800b7e0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e019      	b.n	800b200 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f47f af7b 	bne.w	800b0d0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f000 fb00 	bl	800b7e0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e000      	b.n	800b200 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800b1fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3720      	adds	r7, #32
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08e      	sub	sp, #56	; 0x38
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b216:	2300      	movs	r3, #0
 800b218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3320      	adds	r3, #32
 800b222:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	3330      	adds	r3, #48	; 0x30
 800b22a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b232:	2b01      	cmp	r3, #1
 800b234:	d101      	bne.n	800b23a <HAL_SPI_TransmitReceive+0x32>
 800b236:	2302      	movs	r3, #2
 800b238:	e2ce      	b.n	800b7d8 <HAL_SPI_TransmitReceive+0x5d0>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2201      	movs	r2, #1
 800b23e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b242:	f7f7 fbeb 	bl	8002a1c <HAL_GetTick>
 800b246:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800b248:	887b      	ldrh	r3, [r7, #2]
 800b24a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800b24c:	887b      	ldrh	r3, [r7, #2]
 800b24e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b256:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b25e:	7efb      	ldrb	r3, [r7, #27]
 800b260:	2b01      	cmp	r3, #1
 800b262:	d014      	beq.n	800b28e <HAL_SPI_TransmitReceive+0x86>
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b26a:	d106      	bne.n	800b27a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d102      	bne.n	800b27a <HAL_SPI_TransmitReceive+0x72>
 800b274:	7efb      	ldrb	r3, [r7, #27]
 800b276:	2b04      	cmp	r3, #4
 800b278:	d009      	beq.n	800b28e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800b27a:	2302      	movs	r3, #2
 800b27c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b28c:	e2a4      	b.n	800b7d8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d005      	beq.n	800b2a0 <HAL_SPI_TransmitReceive+0x98>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <HAL_SPI_TransmitReceive+0x98>
 800b29a:	887b      	ldrh	r3, [r7, #2]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d109      	bne.n	800b2b4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b2ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2b2:	e291      	b.n	800b7d8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b04      	cmp	r3, #4
 800b2be:	d003      	beq.n	800b2c8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2205      	movs	r2, #5
 800b2c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	887a      	ldrh	r2, [r7, #2]
 800b2da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	887a      	ldrh	r2, [r7, #2]
 800b2e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	887a      	ldrh	r2, [r7, #2]
 800b2f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	887a      	ldrh	r2, [r7, #2]
 800b2f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	4b9f      	ldr	r3, [pc, #636]	; (800b58c <HAL_SPI_TransmitReceive+0x384>)
 800b310:	4013      	ands	r3, r2
 800b312:	8879      	ldrh	r1, [r7, #2]
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	6812      	ldr	r2, [r2, #0]
 800b318:	430b      	orrs	r3, r1
 800b31a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f042 0201 	orr.w	r2, r2, #1
 800b32a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b334:	d107      	bne.n	800b346 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	2b0f      	cmp	r3, #15
 800b34c:	d970      	bls.n	800b430 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b34e:	e068      	b.n	800b422 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	695b      	ldr	r3, [r3, #20]
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d11a      	bne.n	800b394 <HAL_SPI_TransmitReceive+0x18c>
 800b35e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b360:	2b00      	cmp	r3, #0
 800b362:	d017      	beq.n	800b394 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6812      	ldr	r2, [r2, #0]
 800b36e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b374:	1d1a      	adds	r2, r3, #4
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b380:	b29b      	uxth	r3, r3
 800b382:	3b01      	subs	r3, #1
 800b384:	b29a      	uxth	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b392:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	695a      	ldr	r2, [r3, #20]
 800b39a:	f248 0308 	movw	r3, #32776	; 0x8008
 800b39e:	4013      	ands	r3, r2
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d01a      	beq.n	800b3da <HAL_SPI_TransmitReceive+0x1d2>
 800b3a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d017      	beq.n	800b3da <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b3b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3ba:	1d1a      	adds	r2, r3, #4
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b29a      	uxth	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b3d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3da:	f7f7 fb1f 	bl	8002a1c <HAL_GetTick>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	1ad3      	subs	r3, r2, r3
 800b3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d803      	bhi.n	800b3f2 <HAL_SPI_TransmitReceive+0x1ea>
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f0:	d102      	bne.n	800b3f8 <HAL_SPI_TransmitReceive+0x1f0>
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d114      	bne.n	800b422 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 f9f1 	bl	800b7e0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b40c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b41e:	2301      	movs	r3, #1
 800b420:	e1da      	b.n	800b7d8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b422:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b424:	2b00      	cmp	r3, #0
 800b426:	d193      	bne.n	800b350 <HAL_SPI_TransmitReceive+0x148>
 800b428:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d190      	bne.n	800b350 <HAL_SPI_TransmitReceive+0x148>
 800b42e:	e1ac      	b.n	800b78a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	2b07      	cmp	r3, #7
 800b436:	f240 81a0 	bls.w	800b77a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b43a:	e0a9      	b.n	800b590 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	f003 0302 	and.w	r3, r3, #2
 800b446:	2b02      	cmp	r3, #2
 800b448:	d139      	bne.n	800b4be <HAL_SPI_TransmitReceive+0x2b6>
 800b44a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d036      	beq.n	800b4be <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b450:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b452:	2b01      	cmp	r3, #1
 800b454:	d91c      	bls.n	800b490 <HAL_SPI_TransmitReceive+0x288>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d018      	beq.n	800b490 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	6812      	ldr	r2, [r2, #0]
 800b468:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b46e:	1d1a      	adds	r2, r3, #4
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	3b02      	subs	r3, #2
 800b47e:	b29a      	uxth	r2, r3
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b48c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b48e:	e016      	b.n	800b4be <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b494:	881a      	ldrh	r2, [r3, #0]
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b49e:	1c9a      	adds	r2, r3, #2
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b4bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	695b      	ldr	r3, [r3, #20]
 800b4c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d03a      	beq.n	800b542 <HAL_SPI_TransmitReceive+0x33a>
 800b4cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d037      	beq.n	800b542 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d018      	beq.n	800b512 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b4ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4f0:	1d1a      	adds	r2, r3, #4
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	3b02      	subs	r3, #2
 800b500:	b29a      	uxth	r2, r3
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b50e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b510:	e017      	b.n	800b542 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b516:	6a3a      	ldr	r2, [r7, #32]
 800b518:	8812      	ldrh	r2, [r2, #0]
 800b51a:	b292      	uxth	r2, r2
 800b51c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b522:	1c9a      	adds	r2, r3, #2
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b52e:	b29b      	uxth	r3, r3
 800b530:	3b01      	subs	r3, #1
 800b532:	b29a      	uxth	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b540:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b542:	f7f7 fa6b 	bl	8002a1c <HAL_GetTick>
 800b546:	4602      	mov	r2, r0
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b54e:	429a      	cmp	r2, r3
 800b550:	d803      	bhi.n	800b55a <HAL_SPI_TransmitReceive+0x352>
 800b552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b558:	d102      	bne.n	800b560 <HAL_SPI_TransmitReceive+0x358>
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d117      	bne.n	800b590 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 f93d 	bl	800b7e0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b574:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	e126      	b.n	800b7d8 <HAL_SPI_TransmitReceive+0x5d0>
 800b58a:	bf00      	nop
 800b58c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b590:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b592:	2b00      	cmp	r3, #0
 800b594:	f47f af52 	bne.w	800b43c <HAL_SPI_TransmitReceive+0x234>
 800b598:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f47f af4e 	bne.w	800b43c <HAL_SPI_TransmitReceive+0x234>
 800b5a0:	e0f3      	b.n	800b78a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	f003 0302 	and.w	r3, r3, #2
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d15a      	bne.n	800b666 <HAL_SPI_TransmitReceive+0x45e>
 800b5b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d057      	beq.n	800b666 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b5b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d91c      	bls.n	800b5f6 <HAL_SPI_TransmitReceive+0x3ee>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5c0:	2b40      	cmp	r3, #64	; 0x40
 800b5c2:	d918      	bls.n	800b5f6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6812      	ldr	r2, [r2, #0]
 800b5ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5d4:	1d1a      	adds	r2, r3, #4
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	3b04      	subs	r3, #4
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b5f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b5f4:	e037      	b.n	800b666 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b5f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d91b      	bls.n	800b634 <HAL_SPI_TransmitReceive+0x42c>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d017      	beq.n	800b634 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b608:	881a      	ldrh	r2, [r3, #0]
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b612:	1c9a      	adds	r2, r3, #2
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b61e:	b29b      	uxth	r3, r3
 800b620:	3b02      	subs	r3, #2
 800b622:	b29a      	uxth	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b630:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b632:	e018      	b.n	800b666 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	3320      	adds	r3, #32
 800b63e:	7812      	ldrb	r2, [r2, #0]
 800b640:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b646:	1c5a      	adds	r2, r3, #1
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b652:	b29b      	uxth	r3, r3
 800b654:	3b01      	subs	r3, #1
 800b656:	b29a      	uxth	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b664:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d05e      	beq.n	800b732 <HAL_SPI_TransmitReceive+0x52a>
 800b674:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b676:	2b00      	cmp	r3, #0
 800b678:	d05b      	beq.n	800b732 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	695b      	ldr	r3, [r3, #20]
 800b680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d018      	beq.n	800b6ba <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681a      	ldr	r2, [r3, #0]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b690:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b692:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b698:	1d1a      	adds	r2, r3, #4
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	3b04      	subs	r3, #4
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b6b8:	e03b      	b.n	800b732 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b6c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6c8:	d918      	bls.n	800b6fc <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6ce:	6a3a      	ldr	r2, [r7, #32]
 800b6d0:	8812      	ldrh	r2, [r2, #0]
 800b6d2:	b292      	uxth	r2, r2
 800b6d4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6da:	1c9a      	adds	r2, r3, #2
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	3b02      	subs	r3, #2
 800b6ea:	b29a      	uxth	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b6f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b6fa:	e01a      	b.n	800b732 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b708:	7812      	ldrb	r2, [r2, #0]
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b712:	1c5a      	adds	r2, r3, #1
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b71e:	b29b      	uxth	r3, r3
 800b720:	3b01      	subs	r3, #1
 800b722:	b29a      	uxth	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b730:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b732:	f7f7 f973 	bl	8002a1c <HAL_GetTick>
 800b736:	4602      	mov	r2, r0
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b73e:	429a      	cmp	r2, r3
 800b740:	d803      	bhi.n	800b74a <HAL_SPI_TransmitReceive+0x542>
 800b742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b748:	d102      	bne.n	800b750 <HAL_SPI_TransmitReceive+0x548>
 800b74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d114      	bne.n	800b77a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f000 f845 	bl	800b7e0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b764:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	e02e      	b.n	800b7d8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b77a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f47f af10 	bne.w	800b5a2 <HAL_SPI_TransmitReceive+0x39a>
 800b782:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b784:	2b00      	cmp	r3, #0
 800b786:	f47f af0c 	bne.w	800b5a2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	2200      	movs	r2, #0
 800b792:	2108      	movs	r1, #8
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f000 f8c3 	bl	800b920 <SPI_WaitOnFlagUntilTimeout>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d007      	beq.n	800b7b0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7a6:	f043 0220 	orr.w	r2, r3, #32
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f000 f815 	bl	800b7e0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d001      	beq.n	800b7d4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e001      	b.n	800b7d8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800b7d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3730      	adds	r7, #48	; 0x30
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	699a      	ldr	r2, [r3, #24]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f042 0208 	orr.w	r2, r2, #8
 800b7fe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699a      	ldr	r2, [r3, #24]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f042 0210 	orr.w	r2, r2, #16
 800b80e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f022 0201 	bic.w	r2, r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	6919      	ldr	r1, [r3, #16]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	4b3c      	ldr	r3, [pc, #240]	; (800b91c <SPI_CloseTransfer+0x13c>)
 800b82c:	400b      	ands	r3, r1
 800b82e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689a      	ldr	r2, [r3, #8]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b83e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b04      	cmp	r3, #4
 800b84a:	d014      	beq.n	800b876 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f003 0320 	and.w	r3, r3, #32
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00f      	beq.n	800b876 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b85c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	699a      	ldr	r2, [r3, #24]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f042 0220 	orr.w	r2, r2, #32
 800b874:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d014      	beq.n	800b8ac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00f      	beq.n	800b8ac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b892:	f043 0204 	orr.w	r2, r3, #4
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	699a      	ldr	r2, [r3, #24]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8aa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00f      	beq.n	800b8d6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8bc:	f043 0201 	orr.w	r2, r3, #1
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	699a      	ldr	r2, [r3, #24]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8d4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00f      	beq.n	800b900 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8e6:	f043 0208 	orr.w	r2, r3, #8
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	699a      	ldr	r2, [r3, #24]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8fe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b910:	bf00      	nop
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	fffffc90 	.word	0xfffffc90

0800b920 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	4613      	mov	r3, r2
 800b92e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b930:	e010      	b.n	800b954 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b932:	f7f7 f873 	bl	8002a1c <HAL_GetTick>
 800b936:	4602      	mov	r2, r0
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	69ba      	ldr	r2, [r7, #24]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d803      	bhi.n	800b94a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b948:	d102      	bne.n	800b950 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b94a:	69bb      	ldr	r3, [r7, #24]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d101      	bne.n	800b954 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b950:	2303      	movs	r3, #3
 800b952:	e00f      	b.n	800b974 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	695a      	ldr	r2, [r3, #20]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	4013      	ands	r3, r2
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	429a      	cmp	r2, r3
 800b962:	bf0c      	ite	eq
 800b964:	2301      	moveq	r3, #1
 800b966:	2300      	movne	r3, #0
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	461a      	mov	r2, r3
 800b96c:	79fb      	ldrb	r3, [r7, #7]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d0df      	beq.n	800b932 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b988:	095b      	lsrs	r3, r3, #5
 800b98a:	3301      	adds	r3, #1
 800b98c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	3301      	adds	r3, #1
 800b994:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	3307      	adds	r3, #7
 800b99a:	08db      	lsrs	r3, r3, #3
 800b99c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e049      	b.n	800ba58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d106      	bne.n	800b9de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7f6 f8b1 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	4610      	mov	r0, r2
 800b9f2:	f000 f9ed 	bl	800bdd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d001      	beq.n	800ba78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	e04f      	b.n	800bb18 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68da      	ldr	r2, [r3, #12]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f042 0201 	orr.w	r2, r2, #1
 800ba8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a23      	ldr	r2, [pc, #140]	; (800bb24 <HAL_TIM_Base_Start_IT+0xc4>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d01d      	beq.n	800bad6 <HAL_TIM_Base_Start_IT+0x76>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa2:	d018      	beq.n	800bad6 <HAL_TIM_Base_Start_IT+0x76>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a1f      	ldr	r2, [pc, #124]	; (800bb28 <HAL_TIM_Base_Start_IT+0xc8>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d013      	beq.n	800bad6 <HAL_TIM_Base_Start_IT+0x76>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a1e      	ldr	r2, [pc, #120]	; (800bb2c <HAL_TIM_Base_Start_IT+0xcc>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d00e      	beq.n	800bad6 <HAL_TIM_Base_Start_IT+0x76>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4a1c      	ldr	r2, [pc, #112]	; (800bb30 <HAL_TIM_Base_Start_IT+0xd0>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d009      	beq.n	800bad6 <HAL_TIM_Base_Start_IT+0x76>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a1b      	ldr	r2, [pc, #108]	; (800bb34 <HAL_TIM_Base_Start_IT+0xd4>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d004      	beq.n	800bad6 <HAL_TIM_Base_Start_IT+0x76>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a19      	ldr	r2, [pc, #100]	; (800bb38 <HAL_TIM_Base_Start_IT+0xd8>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d115      	bne.n	800bb02 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	689a      	ldr	r2, [r3, #8]
 800badc:	4b17      	ldr	r3, [pc, #92]	; (800bb3c <HAL_TIM_Base_Start_IT+0xdc>)
 800bade:	4013      	ands	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2b06      	cmp	r3, #6
 800bae6:	d015      	beq.n	800bb14 <HAL_TIM_Base_Start_IT+0xb4>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baee:	d011      	beq.n	800bb14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f042 0201 	orr.w	r2, r2, #1
 800bafe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb00:	e008      	b.n	800bb14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f042 0201 	orr.w	r2, r2, #1
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	e000      	b.n	800bb16 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	40010000 	.word	0x40010000
 800bb28:	40000400 	.word	0x40000400
 800bb2c:	40000800 	.word	0x40000800
 800bb30:	40000c00 	.word	0x40000c00
 800bb34:	40010400 	.word	0x40010400
 800bb38:	40001800 	.word	0x40001800
 800bb3c:	00010007 	.word	0x00010007

0800bb40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	f003 0302 	and.w	r3, r3, #2
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d122      	bne.n	800bb9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	f003 0302 	and.w	r3, r3, #2
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d11b      	bne.n	800bb9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f06f 0202 	mvn.w	r2, #2
 800bb6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2201      	movs	r2, #1
 800bb72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	699b      	ldr	r3, [r3, #24]
 800bb7a:	f003 0303 	and.w	r3, r3, #3
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d003      	beq.n	800bb8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f905 	bl	800bd92 <HAL_TIM_IC_CaptureCallback>
 800bb88:	e005      	b.n	800bb96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f8f7 	bl	800bd7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f908 	bl	800bda6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	f003 0304 	and.w	r3, r3, #4
 800bba6:	2b04      	cmp	r3, #4
 800bba8:	d122      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68db      	ldr	r3, [r3, #12]
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b04      	cmp	r3, #4
 800bbb6:	d11b      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f06f 0204 	mvn.w	r2, #4
 800bbc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 f8db 	bl	800bd92 <HAL_TIM_IC_CaptureCallback>
 800bbdc:	e005      	b.n	800bbea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 f8cd 	bl	800bd7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f8de 	bl	800bda6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	f003 0308 	and.w	r3, r3, #8
 800bbfa:	2b08      	cmp	r3, #8
 800bbfc:	d122      	bne.n	800bc44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f003 0308 	and.w	r3, r3, #8
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d11b      	bne.n	800bc44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f06f 0208 	mvn.w	r2, #8
 800bc14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2204      	movs	r2, #4
 800bc1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	69db      	ldr	r3, [r3, #28]
 800bc22:	f003 0303 	and.w	r3, r3, #3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f8b1 	bl	800bd92 <HAL_TIM_IC_CaptureCallback>
 800bc30:	e005      	b.n	800bc3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f8a3 	bl	800bd7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 f8b4 	bl	800bda6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	f003 0310 	and.w	r3, r3, #16
 800bc4e:	2b10      	cmp	r3, #16
 800bc50:	d122      	bne.n	800bc98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	f003 0310 	and.w	r3, r3, #16
 800bc5c:	2b10      	cmp	r3, #16
 800bc5e:	d11b      	bne.n	800bc98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f06f 0210 	mvn.w	r2, #16
 800bc68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2208      	movs	r2, #8
 800bc6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	69db      	ldr	r3, [r3, #28]
 800bc76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d003      	beq.n	800bc86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f887 	bl	800bd92 <HAL_TIM_IC_CaptureCallback>
 800bc84:	e005      	b.n	800bc92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f879 	bl	800bd7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f88a 	bl	800bda6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d10e      	bne.n	800bcc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d107      	bne.n	800bcc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f06f 0201 	mvn.w	r2, #1
 800bcbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7f6 f860 	bl	8001d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcce:	2b80      	cmp	r3, #128	; 0x80
 800bcd0:	d10e      	bne.n	800bcf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcdc:	2b80      	cmp	r3, #128	; 0x80
 800bcde:	d107      	bne.n	800bcf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f99c 	bl	800c028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcfe:	d10e      	bne.n	800bd1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd0a:	2b80      	cmp	r3, #128	; 0x80
 800bd0c:	d107      	bne.n	800bd1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bd16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 f98f 	bl	800c03c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	691b      	ldr	r3, [r3, #16]
 800bd24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd28:	2b40      	cmp	r3, #64	; 0x40
 800bd2a:	d10e      	bne.n	800bd4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd36:	2b40      	cmp	r3, #64	; 0x40
 800bd38:	d107      	bne.n	800bd4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 f838 	bl	800bdba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	f003 0320 	and.w	r3, r3, #32
 800bd54:	2b20      	cmp	r3, #32
 800bd56:	d10e      	bne.n	800bd76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	f003 0320 	and.w	r3, r3, #32
 800bd62:	2b20      	cmp	r3, #32
 800bd64:	d107      	bne.n	800bd76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f06f 0220 	mvn.w	r2, #32
 800bd6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f94f 	bl	800c014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd76:	bf00      	nop
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd7e:	b480      	push	{r7}
 800bd80:	b083      	sub	sp, #12
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd86:	bf00      	nop
 800bd88:	370c      	adds	r7, #12
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd92:	b480      	push	{r7}
 800bd94:	b083      	sub	sp, #12
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd9a:	bf00      	nop
 800bd9c:	370c      	adds	r7, #12
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr

0800bda6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bda6:	b480      	push	{r7}
 800bda8:	b083      	sub	sp, #12
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdae:	bf00      	nop
 800bdb0:	370c      	adds	r7, #12
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdc2:	bf00      	nop
 800bdc4:	370c      	adds	r7, #12
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
	...

0800bdd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a40      	ldr	r2, [pc, #256]	; (800bee4 <TIM_Base_SetConfig+0x114>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d013      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdee:	d00f      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a3d      	ldr	r2, [pc, #244]	; (800bee8 <TIM_Base_SetConfig+0x118>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d00b      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a3c      	ldr	r2, [pc, #240]	; (800beec <TIM_Base_SetConfig+0x11c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d007      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a3b      	ldr	r2, [pc, #236]	; (800bef0 <TIM_Base_SetConfig+0x120>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d003      	beq.n	800be10 <TIM_Base_SetConfig+0x40>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a3a      	ldr	r2, [pc, #232]	; (800bef4 <TIM_Base_SetConfig+0x124>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d108      	bne.n	800be22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4313      	orrs	r3, r2
 800be20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a2f      	ldr	r2, [pc, #188]	; (800bee4 <TIM_Base_SetConfig+0x114>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d01f      	beq.n	800be6a <TIM_Base_SetConfig+0x9a>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be30:	d01b      	beq.n	800be6a <TIM_Base_SetConfig+0x9a>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a2c      	ldr	r2, [pc, #176]	; (800bee8 <TIM_Base_SetConfig+0x118>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d017      	beq.n	800be6a <TIM_Base_SetConfig+0x9a>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a2b      	ldr	r2, [pc, #172]	; (800beec <TIM_Base_SetConfig+0x11c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d013      	beq.n	800be6a <TIM_Base_SetConfig+0x9a>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a2a      	ldr	r2, [pc, #168]	; (800bef0 <TIM_Base_SetConfig+0x120>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d00f      	beq.n	800be6a <TIM_Base_SetConfig+0x9a>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a29      	ldr	r2, [pc, #164]	; (800bef4 <TIM_Base_SetConfig+0x124>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d00b      	beq.n	800be6a <TIM_Base_SetConfig+0x9a>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a28      	ldr	r2, [pc, #160]	; (800bef8 <TIM_Base_SetConfig+0x128>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d007      	beq.n	800be6a <TIM_Base_SetConfig+0x9a>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a27      	ldr	r2, [pc, #156]	; (800befc <TIM_Base_SetConfig+0x12c>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d003      	beq.n	800be6a <TIM_Base_SetConfig+0x9a>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a26      	ldr	r2, [pc, #152]	; (800bf00 <TIM_Base_SetConfig+0x130>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d108      	bne.n	800be7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	4313      	orrs	r3, r2
 800be7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	689a      	ldr	r2, [r3, #8]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a10      	ldr	r2, [pc, #64]	; (800bee4 <TIM_Base_SetConfig+0x114>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d00f      	beq.n	800bec8 <TIM_Base_SetConfig+0xf8>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a12      	ldr	r2, [pc, #72]	; (800bef4 <TIM_Base_SetConfig+0x124>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d00b      	beq.n	800bec8 <TIM_Base_SetConfig+0xf8>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	4a11      	ldr	r2, [pc, #68]	; (800bef8 <TIM_Base_SetConfig+0x128>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d007      	beq.n	800bec8 <TIM_Base_SetConfig+0xf8>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a10      	ldr	r2, [pc, #64]	; (800befc <TIM_Base_SetConfig+0x12c>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d003      	beq.n	800bec8 <TIM_Base_SetConfig+0xf8>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a0f      	ldr	r2, [pc, #60]	; (800bf00 <TIM_Base_SetConfig+0x130>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d103      	bne.n	800bed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	691a      	ldr	r2, [r3, #16]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	615a      	str	r2, [r3, #20]
}
 800bed6:	bf00      	nop
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	40010000 	.word	0x40010000
 800bee8:	40000400 	.word	0x40000400
 800beec:	40000800 	.word	0x40000800
 800bef0:	40000c00 	.word	0x40000c00
 800bef4:	40010400 	.word	0x40010400
 800bef8:	40014000 	.word	0x40014000
 800befc:	40014400 	.word	0x40014400
 800bf00:	40014800 	.word	0x40014800

0800bf04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d101      	bne.n	800bf1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	e068      	b.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2202      	movs	r2, #2
 800bf28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a2e      	ldr	r2, [pc, #184]	; (800bffc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d004      	beq.n	800bf50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a2d      	ldr	r2, [pc, #180]	; (800c000 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d108      	bne.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bf56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68fa      	ldr	r2, [r7, #12]
 800bf7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a1e      	ldr	r2, [pc, #120]	; (800bffc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d01d      	beq.n	800bfc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf8e:	d018      	beq.n	800bfc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a1b      	ldr	r2, [pc, #108]	; (800c004 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d013      	beq.n	800bfc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a1a      	ldr	r2, [pc, #104]	; (800c008 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d00e      	beq.n	800bfc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a18      	ldr	r2, [pc, #96]	; (800c00c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d009      	beq.n	800bfc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a13      	ldr	r2, [pc, #76]	; (800c000 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d004      	beq.n	800bfc2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a14      	ldr	r2, [pc, #80]	; (800c010 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d10c      	bne.n	800bfdc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	40010000 	.word	0x40010000
 800c000:	40010400 	.word	0x40010400
 800c004:	40000400 	.word	0x40000400
 800c008:	40000800 	.word	0x40000800
 800c00c:	40000c00 	.word	0x40000c00
 800c010:	40001800 	.word	0x40001800

0800c014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c01c:	bf00      	nop
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c05e:	2301      	movs	r3, #1
 800c060:	e042      	b.n	800c0e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d106      	bne.n	800c07a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f7f5 fd8b 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2224      	movs	r2, #36	; 0x24
 800c07e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	681a      	ldr	r2, [r3, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f022 0201 	bic.w	r2, r2, #1
 800c090:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fbd6 	bl	800c844 <UART_SetConfig>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d101      	bne.n	800c0a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e022      	b.n	800c0e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d002      	beq.n	800c0b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f001 f92a 	bl	800d304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c0be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689a      	ldr	r2, [r3, #8]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c0ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f042 0201 	orr.w	r2, r2, #1
 800c0de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f001 f9b1 	bl	800d448 <UART_CheckIdleState>
 800c0e6:	4603      	mov	r3, r0
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c104:	2b20      	cmp	r3, #32
 800c106:	d131      	bne.n	800c16c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d002      	beq.n	800c114 <HAL_UART_Receive_IT+0x24>
 800c10e:	88fb      	ldrh	r3, [r7, #6]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d101      	bne.n	800c118 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	e02a      	b.n	800c16e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d101      	bne.n	800c126 <HAL_UART_Receive_IT+0x36>
 800c122:	2302      	movs	r3, #2
 800c124:	e023      	b.n	800c16e <HAL_UART_Receive_IT+0x7e>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2201      	movs	r2, #1
 800c12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a0f      	ldr	r2, [pc, #60]	; (800c178 <HAL_UART_Receive_IT+0x88>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d00e      	beq.n	800c15c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d007      	beq.n	800c15c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c15a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c15c:	88fb      	ldrh	r3, [r7, #6]
 800c15e:	461a      	mov	r2, r3
 800c160:	68b9      	ldr	r1, [r7, #8]
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f001 fa3c 	bl	800d5e0 <UART_Start_Receive_IT>
 800c168:	4603      	mov	r3, r0
 800c16a:	e000      	b.n	800c16e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c16c:	2302      	movs	r3, #2
  }
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}
 800c176:	bf00      	nop
 800c178:	58000c00 	.word	0x58000c00

0800c17c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	4613      	mov	r3, r2
 800c188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c190:	2b20      	cmp	r3, #32
 800c192:	d168      	bne.n	800c266 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <HAL_UART_Transmit_DMA+0x24>
 800c19a:	88fb      	ldrh	r3, [r7, #6]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d101      	bne.n	800c1a4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e061      	b.n	800c268 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d101      	bne.n	800c1b2 <HAL_UART_Transmit_DMA+0x36>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	e05a      	b.n	800c268 <HAL_UART_Transmit_DMA+0xec>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	88fa      	ldrh	r2, [r7, #6]
 800c1c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	88fa      	ldrh	r2, [r7, #6]
 800c1cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2221      	movs	r2, #33	; 0x21
 800c1dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d02c      	beq.n	800c242 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1ec:	4a20      	ldr	r2, [pc, #128]	; (800c270 <HAL_UART_Transmit_DMA+0xf4>)
 800c1ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1f4:	4a1f      	ldr	r2, [pc, #124]	; (800c274 <HAL_UART_Transmit_DMA+0xf8>)
 800c1f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1fc:	4a1e      	ldr	r2, [pc, #120]	; (800c278 <HAL_UART_Transmit_DMA+0xfc>)
 800c1fe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c204:	2200      	movs	r2, #0
 800c206:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c210:	4619      	mov	r1, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3328      	adds	r3, #40	; 0x28
 800c218:	461a      	mov	r2, r3
 800c21a:	88fb      	ldrh	r3, [r7, #6]
 800c21c:	f7f7 f8a6 	bl	800336c <HAL_DMA_Start_IT>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00d      	beq.n	800c242 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2210      	movs	r2, #16
 800c22a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2220      	movs	r2, #32
 800c23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e012      	b.n	800c268 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2240      	movs	r2, #64	; 0x40
 800c248:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	689a      	ldr	r2, [r3, #8]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c260:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	e000      	b.n	800c268 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800c266:	2302      	movs	r3, #2
  }
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	0800d7fd 	.word	0x0800d7fd
 800c274:	0800d84d 	.word	0x0800d84d
 800c278:	0800d869 	.word	0x0800d869

0800c27c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b088      	sub	sp, #32
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	69db      	ldr	r3, [r3, #28]
 800c28a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c29c:	69fa      	ldr	r2, [r7, #28]
 800c29e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d118      	bne.n	800c2de <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	f003 0320 	and.w	r3, r3, #32
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d013      	beq.n	800c2de <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	f003 0320 	and.w	r3, r3, #32
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d104      	bne.n	800c2ca <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d009      	beq.n	800c2de <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 8282 	beq.w	800c7d8 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	4798      	blx	r3
      }
      return;
 800c2dc:	e27c      	b.n	800c7d8 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f000 80ef 	beq.w	800c4c4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	4b73      	ldr	r3, [pc, #460]	; (800c4b8 <HAL_UART_IRQHandler+0x23c>)
 800c2ea:	4013      	ands	r3, r2
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d105      	bne.n	800c2fc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c2f0:	69ba      	ldr	r2, [r7, #24]
 800c2f2:	4b72      	ldr	r3, [pc, #456]	; (800c4bc <HAL_UART_IRQHandler+0x240>)
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 80e4 	beq.w	800c4c4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	f003 0301 	and.w	r3, r3, #1
 800c302:	2b00      	cmp	r3, #0
 800c304:	d010      	beq.n	800c328 <HAL_UART_IRQHandler+0xac>
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2201      	movs	r2, #1
 800c316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c31e:	f043 0201 	orr.w	r2, r3, #1
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	f003 0302 	and.w	r3, r3, #2
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d010      	beq.n	800c354 <HAL_UART_IRQHandler+0xd8>
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2202      	movs	r2, #2
 800c342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c34a:	f043 0204 	orr.w	r2, r3, #4
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c354:	69fb      	ldr	r3, [r7, #28]
 800c356:	f003 0304 	and.w	r3, r3, #4
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d010      	beq.n	800c380 <HAL_UART_IRQHandler+0x104>
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	f003 0301 	and.w	r3, r3, #1
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00b      	beq.n	800c380 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2204      	movs	r2, #4
 800c36e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c376:	f043 0202 	orr.w	r2, r3, #2
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	f003 0308 	and.w	r3, r3, #8
 800c386:	2b00      	cmp	r3, #0
 800c388:	d015      	beq.n	800c3b6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	f003 0320 	and.w	r3, r3, #32
 800c390:	2b00      	cmp	r3, #0
 800c392:	d104      	bne.n	800c39e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	4b48      	ldr	r3, [pc, #288]	; (800c4b8 <HAL_UART_IRQHandler+0x23c>)
 800c398:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00b      	beq.n	800c3b6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2208      	movs	r2, #8
 800c3a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ac:	f043 0208 	orr.w	r2, r3, #8
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d011      	beq.n	800c3e4 <HAL_UART_IRQHandler+0x168>
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d00c      	beq.n	800c3e4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3da:	f043 0220 	orr.w	r2, r3, #32
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 81f6 	beq.w	800c7dc <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d011      	beq.n	800c41e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	f003 0320 	and.w	r3, r3, #32
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d007      	beq.n	800c41e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c424:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c430:	2b40      	cmp	r3, #64	; 0x40
 800c432:	d004      	beq.n	800c43e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d031      	beq.n	800c4a2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f001 f9aa 	bl	800d798 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c44e:	2b40      	cmp	r3, #64	; 0x40
 800c450:	d123      	bne.n	800c49a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	689a      	ldr	r2, [r3, #8]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c460:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d013      	beq.n	800c492 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c46e:	4a14      	ldr	r2, [pc, #80]	; (800c4c0 <HAL_UART_IRQHandler+0x244>)
 800c470:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c476:	4618      	mov	r0, r3
 800c478:	f7f7 fd00 	bl	8003e7c <HAL_DMA_Abort_IT>
 800c47c:	4603      	mov	r3, r0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d017      	beq.n	800c4b2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c48c:	4610      	mov	r0, r2
 800c48e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c490:	e00f      	b.n	800c4b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 f9c0 	bl	800c818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c498:	e00b      	b.n	800c4b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f9bc 	bl	800c818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4a0:	e007      	b.n	800c4b2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 f9b8 	bl	800c818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c4b0:	e194      	b.n	800c7dc <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4b2:	bf00      	nop
    return;
 800c4b4:	e192      	b.n	800c7dc <HAL_UART_IRQHandler+0x560>
 800c4b6:	bf00      	nop
 800c4b8:	10000001 	.word	0x10000001
 800c4bc:	04000120 	.word	0x04000120
 800c4c0:	0800d8e9 	.word	0x0800d8e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	f040 810f 	bne.w	800c6ec <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c4ce:	69fb      	ldr	r3, [r7, #28]
 800c4d0:	f003 0310 	and.w	r3, r3, #16
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 8109 	beq.w	800c6ec <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	f003 0310 	and.w	r3, r3, #16
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 8103 	beq.w	800c6ec <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2210      	movs	r2, #16
 800c4ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f8:	2b40      	cmp	r3, #64	; 0x40
 800c4fa:	f040 80bb 	bne.w	800c674 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a96      	ldr	r2, [pc, #600]	; (800c760 <HAL_UART_IRQHandler+0x4e4>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d059      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a94      	ldr	r2, [pc, #592]	; (800c764 <HAL_UART_IRQHandler+0x4e8>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d053      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a92      	ldr	r2, [pc, #584]	; (800c768 <HAL_UART_IRQHandler+0x4ec>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d04d      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a90      	ldr	r2, [pc, #576]	; (800c76c <HAL_UART_IRQHandler+0x4f0>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d047      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a8e      	ldr	r2, [pc, #568]	; (800c770 <HAL_UART_IRQHandler+0x4f4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d041      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a8c      	ldr	r2, [pc, #560]	; (800c774 <HAL_UART_IRQHandler+0x4f8>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d03b      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a8a      	ldr	r2, [pc, #552]	; (800c778 <HAL_UART_IRQHandler+0x4fc>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d035      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a88      	ldr	r2, [pc, #544]	; (800c77c <HAL_UART_IRQHandler+0x500>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d02f      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a86      	ldr	r2, [pc, #536]	; (800c780 <HAL_UART_IRQHandler+0x504>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d029      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a84      	ldr	r2, [pc, #528]	; (800c784 <HAL_UART_IRQHandler+0x508>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d023      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a82      	ldr	r2, [pc, #520]	; (800c788 <HAL_UART_IRQHandler+0x50c>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d01d      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a80      	ldr	r2, [pc, #512]	; (800c78c <HAL_UART_IRQHandler+0x510>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d017      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a7e      	ldr	r2, [pc, #504]	; (800c790 <HAL_UART_IRQHandler+0x514>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d011      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a7c      	ldr	r2, [pc, #496]	; (800c794 <HAL_UART_IRQHandler+0x518>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d00b      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a7a      	ldr	r2, [pc, #488]	; (800c798 <HAL_UART_IRQHandler+0x51c>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d005      	beq.n	800c5be <HAL_UART_IRQHandler+0x342>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a78      	ldr	r2, [pc, #480]	; (800c79c <HAL_UART_IRQHandler+0x520>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d105      	bne.n	800c5ca <HAL_UART_IRQHandler+0x34e>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	e004      	b.n	800c5d4 <HAL_UART_IRQHandler+0x358>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c5d6:	893b      	ldrh	r3, [r7, #8]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 8101 	beq.w	800c7e0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5e4:	893a      	ldrh	r2, [r7, #8]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	f080 80fa 	bcs.w	800c7e0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	893a      	ldrh	r2, [r7, #8]
 800c5f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5f8:	69db      	ldr	r3, [r3, #28]
 800c5fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5fe:	d02b      	beq.n	800c658 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c60e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	689a      	ldr	r2, [r3, #8]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f022 0201 	bic.w	r2, r2, #1
 800c61e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	689a      	ldr	r2, [r3, #8]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c62e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2220      	movs	r2, #32
 800c634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f022 0210 	bic.w	r2, r2, #16
 800c64c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c652:	4618      	mov	r0, r3
 800c654:	f7f7 f8f4 	bl	8003840 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c664:	b29b      	uxth	r3, r3
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	b29b      	uxth	r3, r3
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f8dd 	bl	800c82c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c672:	e0b5      	b.n	800c7e0 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c680:	b29b      	uxth	r3, r3
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f000 80a8 	beq.w	800c7e4 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800c694:	897b      	ldrh	r3, [r7, #10]
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 80a4 	beq.w	800c7e4 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c6aa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6899      	ldr	r1, [r3, #8]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681a      	ldr	r2, [r3, #0]
 800c6b6:	4b3a      	ldr	r3, [pc, #232]	; (800c7a0 <HAL_UART_IRQHandler+0x524>)
 800c6b8:	400b      	ands	r3, r1
 800c6ba:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2220      	movs	r2, #32
 800c6c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f022 0210 	bic.w	r2, r2, #16
 800c6de:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6e0:	897b      	ldrh	r3, [r7, #10]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f8a1 	bl	800c82c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6ea:	e07b      	b.n	800c7e4 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00d      	beq.n	800c712 <HAL_UART_IRQHandler+0x496>
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d008      	beq.n	800c712 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f001 fbf8 	bl	800df00 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c710:	e06b      	b.n	800c7ea <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d012      	beq.n	800c742 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c722:	2b00      	cmp	r3, #0
 800c724:	d104      	bne.n	800c730 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d008      	beq.n	800c742 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c734:	2b00      	cmp	r3, #0
 800c736:	d057      	beq.n	800c7e8 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	4798      	blx	r3
    }
    return;
 800c740:	e052      	b.n	800c7e8 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c742:	69fb      	ldr	r3, [r7, #28]
 800c744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d02b      	beq.n	800c7a4 <HAL_UART_IRQHandler+0x528>
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c752:	2b00      	cmp	r3, #0
 800c754:	d026      	beq.n	800c7a4 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f001 f8dc 	bl	800d914 <UART_EndTransmit_IT>
    return;
 800c75c:	e045      	b.n	800c7ea <HAL_UART_IRQHandler+0x56e>
 800c75e:	bf00      	nop
 800c760:	40020010 	.word	0x40020010
 800c764:	40020028 	.word	0x40020028
 800c768:	40020040 	.word	0x40020040
 800c76c:	40020058 	.word	0x40020058
 800c770:	40020070 	.word	0x40020070
 800c774:	40020088 	.word	0x40020088
 800c778:	400200a0 	.word	0x400200a0
 800c77c:	400200b8 	.word	0x400200b8
 800c780:	40020410 	.word	0x40020410
 800c784:	40020428 	.word	0x40020428
 800c788:	40020440 	.word	0x40020440
 800c78c:	40020458 	.word	0x40020458
 800c790:	40020470 	.word	0x40020470
 800c794:	40020488 	.word	0x40020488
 800c798:	400204a0 	.word	0x400204a0
 800c79c:	400204b8 	.word	0x400204b8
 800c7a0:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d008      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x544>
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d003      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 fbb5 	bl	800df28 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7be:	e014      	b.n	800c7ea <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00f      	beq.n	800c7ea <HAL_UART_IRQHandler+0x56e>
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	da0c      	bge.n	800c7ea <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f001 fb9f 	bl	800df14 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7d6:	e008      	b.n	800c7ea <HAL_UART_IRQHandler+0x56e>
      return;
 800c7d8:	bf00      	nop
 800c7da:	e006      	b.n	800c7ea <HAL_UART_IRQHandler+0x56e>
    return;
 800c7dc:	bf00      	nop
 800c7de:	e004      	b.n	800c7ea <HAL_UART_IRQHandler+0x56e>
      return;
 800c7e0:	bf00      	nop
 800c7e2:	e002      	b.n	800c7ea <HAL_UART_IRQHandler+0x56e>
      return;
 800c7e4:	bf00      	nop
 800c7e6:	e000      	b.n	800c7ea <HAL_UART_IRQHandler+0x56e>
    return;
 800c7e8:	bf00      	nop
  }
}
 800c7ea:	3720      	adds	r7, #32
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c838:	bf00      	nop
 800c83a:	370c      	adds	r7, #12
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c844:	b5b0      	push	{r4, r5, r7, lr}
 800c846:	b08e      	sub	sp, #56	; 0x38
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	689a      	ldr	r2, [r3, #8]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	431a      	orrs	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	69db      	ldr	r3, [r3, #28]
 800c866:	4313      	orrs	r3, r2
 800c868:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	4bbf      	ldr	r3, [pc, #764]	; (800cb70 <UART_SetConfig+0x32c>)
 800c872:	4013      	ands	r3, r2
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	6812      	ldr	r2, [r2, #0]
 800c878:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c87a:	430b      	orrs	r3, r1
 800c87c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	68da      	ldr	r2, [r3, #12]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	430a      	orrs	r2, r1
 800c892:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4ab5      	ldr	r2, [pc, #724]	; (800cb74 <UART_SetConfig+0x330>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d004      	beq.n	800c8ae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a1b      	ldr	r3, [r3, #32]
 800c8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	689a      	ldr	r2, [r3, #8]
 800c8b4:	4bb0      	ldr	r3, [pc, #704]	; (800cb78 <UART_SetConfig+0x334>)
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	6812      	ldr	r2, [r2, #0]
 800c8bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c8be:	430b      	orrs	r3, r1
 800c8c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c8:	f023 010f 	bic.w	r1, r3, #15
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4aa7      	ldr	r2, [pc, #668]	; (800cb7c <UART_SetConfig+0x338>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d176      	bne.n	800c9d0 <UART_SetConfig+0x18c>
 800c8e2:	4ba7      	ldr	r3, [pc, #668]	; (800cb80 <UART_SetConfig+0x33c>)
 800c8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8ea:	2b28      	cmp	r3, #40	; 0x28
 800c8ec:	d86c      	bhi.n	800c9c8 <UART_SetConfig+0x184>
 800c8ee:	a201      	add	r2, pc, #4	; (adr r2, 800c8f4 <UART_SetConfig+0xb0>)
 800c8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f4:	0800c999 	.word	0x0800c999
 800c8f8:	0800c9c9 	.word	0x0800c9c9
 800c8fc:	0800c9c9 	.word	0x0800c9c9
 800c900:	0800c9c9 	.word	0x0800c9c9
 800c904:	0800c9c9 	.word	0x0800c9c9
 800c908:	0800c9c9 	.word	0x0800c9c9
 800c90c:	0800c9c9 	.word	0x0800c9c9
 800c910:	0800c9c9 	.word	0x0800c9c9
 800c914:	0800c9a1 	.word	0x0800c9a1
 800c918:	0800c9c9 	.word	0x0800c9c9
 800c91c:	0800c9c9 	.word	0x0800c9c9
 800c920:	0800c9c9 	.word	0x0800c9c9
 800c924:	0800c9c9 	.word	0x0800c9c9
 800c928:	0800c9c9 	.word	0x0800c9c9
 800c92c:	0800c9c9 	.word	0x0800c9c9
 800c930:	0800c9c9 	.word	0x0800c9c9
 800c934:	0800c9a9 	.word	0x0800c9a9
 800c938:	0800c9c9 	.word	0x0800c9c9
 800c93c:	0800c9c9 	.word	0x0800c9c9
 800c940:	0800c9c9 	.word	0x0800c9c9
 800c944:	0800c9c9 	.word	0x0800c9c9
 800c948:	0800c9c9 	.word	0x0800c9c9
 800c94c:	0800c9c9 	.word	0x0800c9c9
 800c950:	0800c9c9 	.word	0x0800c9c9
 800c954:	0800c9b1 	.word	0x0800c9b1
 800c958:	0800c9c9 	.word	0x0800c9c9
 800c95c:	0800c9c9 	.word	0x0800c9c9
 800c960:	0800c9c9 	.word	0x0800c9c9
 800c964:	0800c9c9 	.word	0x0800c9c9
 800c968:	0800c9c9 	.word	0x0800c9c9
 800c96c:	0800c9c9 	.word	0x0800c9c9
 800c970:	0800c9c9 	.word	0x0800c9c9
 800c974:	0800c9b9 	.word	0x0800c9b9
 800c978:	0800c9c9 	.word	0x0800c9c9
 800c97c:	0800c9c9 	.word	0x0800c9c9
 800c980:	0800c9c9 	.word	0x0800c9c9
 800c984:	0800c9c9 	.word	0x0800c9c9
 800c988:	0800c9c9 	.word	0x0800c9c9
 800c98c:	0800c9c9 	.word	0x0800c9c9
 800c990:	0800c9c9 	.word	0x0800c9c9
 800c994:	0800c9c1 	.word	0x0800c9c1
 800c998:	2301      	movs	r3, #1
 800c99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99e:	e222      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800c9a0:	2304      	movs	r3, #4
 800c9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a6:	e21e      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800c9a8:	2308      	movs	r3, #8
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ae:	e21a      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800c9b0:	2310      	movs	r3, #16
 800c9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b6:	e216      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800c9b8:	2320      	movs	r3, #32
 800c9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9be:	e212      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800c9c0:	2340      	movs	r3, #64	; 0x40
 800c9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c6:	e20e      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800c9c8:	2380      	movs	r3, #128	; 0x80
 800c9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ce:	e20a      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a6b      	ldr	r2, [pc, #428]	; (800cb84 <UART_SetConfig+0x340>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d130      	bne.n	800ca3c <UART_SetConfig+0x1f8>
 800c9da:	4b69      	ldr	r3, [pc, #420]	; (800cb80 <UART_SetConfig+0x33c>)
 800c9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	2b05      	cmp	r3, #5
 800c9e4:	d826      	bhi.n	800ca34 <UART_SetConfig+0x1f0>
 800c9e6:	a201      	add	r2, pc, #4	; (adr r2, 800c9ec <UART_SetConfig+0x1a8>)
 800c9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ec:	0800ca05 	.word	0x0800ca05
 800c9f0:	0800ca0d 	.word	0x0800ca0d
 800c9f4:	0800ca15 	.word	0x0800ca15
 800c9f8:	0800ca1d 	.word	0x0800ca1d
 800c9fc:	0800ca25 	.word	0x0800ca25
 800ca00:	0800ca2d 	.word	0x0800ca2d
 800ca04:	2300      	movs	r3, #0
 800ca06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0a:	e1ec      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca0c:	2304      	movs	r3, #4
 800ca0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca12:	e1e8      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca14:	2308      	movs	r3, #8
 800ca16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1a:	e1e4      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca1c:	2310      	movs	r3, #16
 800ca1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca22:	e1e0      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca24:	2320      	movs	r3, #32
 800ca26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca2a:	e1dc      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca32:	e1d8      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca34:	2380      	movs	r3, #128	; 0x80
 800ca36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca3a:	e1d4      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a51      	ldr	r2, [pc, #324]	; (800cb88 <UART_SetConfig+0x344>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d130      	bne.n	800caa8 <UART_SetConfig+0x264>
 800ca46:	4b4e      	ldr	r3, [pc, #312]	; (800cb80 <UART_SetConfig+0x33c>)
 800ca48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca4a:	f003 0307 	and.w	r3, r3, #7
 800ca4e:	2b05      	cmp	r3, #5
 800ca50:	d826      	bhi.n	800caa0 <UART_SetConfig+0x25c>
 800ca52:	a201      	add	r2, pc, #4	; (adr r2, 800ca58 <UART_SetConfig+0x214>)
 800ca54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca58:	0800ca71 	.word	0x0800ca71
 800ca5c:	0800ca79 	.word	0x0800ca79
 800ca60:	0800ca81 	.word	0x0800ca81
 800ca64:	0800ca89 	.word	0x0800ca89
 800ca68:	0800ca91 	.word	0x0800ca91
 800ca6c:	0800ca99 	.word	0x0800ca99
 800ca70:	2300      	movs	r3, #0
 800ca72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca76:	e1b6      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca78:	2304      	movs	r3, #4
 800ca7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca7e:	e1b2      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca80:	2308      	movs	r3, #8
 800ca82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca86:	e1ae      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca88:	2310      	movs	r3, #16
 800ca8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca8e:	e1aa      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca90:	2320      	movs	r3, #32
 800ca92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca96:	e1a6      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ca98:	2340      	movs	r3, #64	; 0x40
 800ca9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca9e:	e1a2      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800caa0:	2380      	movs	r3, #128	; 0x80
 800caa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa6:	e19e      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a37      	ldr	r2, [pc, #220]	; (800cb8c <UART_SetConfig+0x348>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d130      	bne.n	800cb14 <UART_SetConfig+0x2d0>
 800cab2:	4b33      	ldr	r3, [pc, #204]	; (800cb80 <UART_SetConfig+0x33c>)
 800cab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab6:	f003 0307 	and.w	r3, r3, #7
 800caba:	2b05      	cmp	r3, #5
 800cabc:	d826      	bhi.n	800cb0c <UART_SetConfig+0x2c8>
 800cabe:	a201      	add	r2, pc, #4	; (adr r2, 800cac4 <UART_SetConfig+0x280>)
 800cac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac4:	0800cadd 	.word	0x0800cadd
 800cac8:	0800cae5 	.word	0x0800cae5
 800cacc:	0800caed 	.word	0x0800caed
 800cad0:	0800caf5 	.word	0x0800caf5
 800cad4:	0800cafd 	.word	0x0800cafd
 800cad8:	0800cb05 	.word	0x0800cb05
 800cadc:	2300      	movs	r3, #0
 800cade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cae2:	e180      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cae4:	2304      	movs	r3, #4
 800cae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caea:	e17c      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800caec:	2308      	movs	r3, #8
 800caee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf2:	e178      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800caf4:	2310      	movs	r3, #16
 800caf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafa:	e174      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cafc:	2320      	movs	r3, #32
 800cafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb02:	e170      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cb04:	2340      	movs	r3, #64	; 0x40
 800cb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb0a:	e16c      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cb0c:	2380      	movs	r3, #128	; 0x80
 800cb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb12:	e168      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a1d      	ldr	r2, [pc, #116]	; (800cb90 <UART_SetConfig+0x34c>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d142      	bne.n	800cba4 <UART_SetConfig+0x360>
 800cb1e:	4b18      	ldr	r3, [pc, #96]	; (800cb80 <UART_SetConfig+0x33c>)
 800cb20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb22:	f003 0307 	and.w	r3, r3, #7
 800cb26:	2b05      	cmp	r3, #5
 800cb28:	d838      	bhi.n	800cb9c <UART_SetConfig+0x358>
 800cb2a:	a201      	add	r2, pc, #4	; (adr r2, 800cb30 <UART_SetConfig+0x2ec>)
 800cb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb30:	0800cb49 	.word	0x0800cb49
 800cb34:	0800cb51 	.word	0x0800cb51
 800cb38:	0800cb59 	.word	0x0800cb59
 800cb3c:	0800cb61 	.word	0x0800cb61
 800cb40:	0800cb69 	.word	0x0800cb69
 800cb44:	0800cb95 	.word	0x0800cb95
 800cb48:	2300      	movs	r3, #0
 800cb4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb4e:	e14a      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cb50:	2304      	movs	r3, #4
 800cb52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb56:	e146      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cb58:	2308      	movs	r3, #8
 800cb5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb5e:	e142      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cb60:	2310      	movs	r3, #16
 800cb62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb66:	e13e      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cb68:	2320      	movs	r3, #32
 800cb6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb6e:	e13a      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cb70:	cfff69f3 	.word	0xcfff69f3
 800cb74:	58000c00 	.word	0x58000c00
 800cb78:	11fff4ff 	.word	0x11fff4ff
 800cb7c:	40011000 	.word	0x40011000
 800cb80:	58024400 	.word	0x58024400
 800cb84:	40004400 	.word	0x40004400
 800cb88:	40004800 	.word	0x40004800
 800cb8c:	40004c00 	.word	0x40004c00
 800cb90:	40005000 	.word	0x40005000
 800cb94:	2340      	movs	r3, #64	; 0x40
 800cb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9a:	e124      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cb9c:	2380      	movs	r3, #128	; 0x80
 800cb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cba2:	e120      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4acc      	ldr	r2, [pc, #816]	; (800cedc <UART_SetConfig+0x698>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d176      	bne.n	800cc9c <UART_SetConfig+0x458>
 800cbae:	4bcc      	ldr	r3, [pc, #816]	; (800cee0 <UART_SetConfig+0x69c>)
 800cbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbb6:	2b28      	cmp	r3, #40	; 0x28
 800cbb8:	d86c      	bhi.n	800cc94 <UART_SetConfig+0x450>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <UART_SetConfig+0x37c>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cc65 	.word	0x0800cc65
 800cbc4:	0800cc95 	.word	0x0800cc95
 800cbc8:	0800cc95 	.word	0x0800cc95
 800cbcc:	0800cc95 	.word	0x0800cc95
 800cbd0:	0800cc95 	.word	0x0800cc95
 800cbd4:	0800cc95 	.word	0x0800cc95
 800cbd8:	0800cc95 	.word	0x0800cc95
 800cbdc:	0800cc95 	.word	0x0800cc95
 800cbe0:	0800cc6d 	.word	0x0800cc6d
 800cbe4:	0800cc95 	.word	0x0800cc95
 800cbe8:	0800cc95 	.word	0x0800cc95
 800cbec:	0800cc95 	.word	0x0800cc95
 800cbf0:	0800cc95 	.word	0x0800cc95
 800cbf4:	0800cc95 	.word	0x0800cc95
 800cbf8:	0800cc95 	.word	0x0800cc95
 800cbfc:	0800cc95 	.word	0x0800cc95
 800cc00:	0800cc75 	.word	0x0800cc75
 800cc04:	0800cc95 	.word	0x0800cc95
 800cc08:	0800cc95 	.word	0x0800cc95
 800cc0c:	0800cc95 	.word	0x0800cc95
 800cc10:	0800cc95 	.word	0x0800cc95
 800cc14:	0800cc95 	.word	0x0800cc95
 800cc18:	0800cc95 	.word	0x0800cc95
 800cc1c:	0800cc95 	.word	0x0800cc95
 800cc20:	0800cc7d 	.word	0x0800cc7d
 800cc24:	0800cc95 	.word	0x0800cc95
 800cc28:	0800cc95 	.word	0x0800cc95
 800cc2c:	0800cc95 	.word	0x0800cc95
 800cc30:	0800cc95 	.word	0x0800cc95
 800cc34:	0800cc95 	.word	0x0800cc95
 800cc38:	0800cc95 	.word	0x0800cc95
 800cc3c:	0800cc95 	.word	0x0800cc95
 800cc40:	0800cc85 	.word	0x0800cc85
 800cc44:	0800cc95 	.word	0x0800cc95
 800cc48:	0800cc95 	.word	0x0800cc95
 800cc4c:	0800cc95 	.word	0x0800cc95
 800cc50:	0800cc95 	.word	0x0800cc95
 800cc54:	0800cc95 	.word	0x0800cc95
 800cc58:	0800cc95 	.word	0x0800cc95
 800cc5c:	0800cc95 	.word	0x0800cc95
 800cc60:	0800cc8d 	.word	0x0800cc8d
 800cc64:	2301      	movs	r3, #1
 800cc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6a:	e0bc      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cc6c:	2304      	movs	r3, #4
 800cc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc72:	e0b8      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cc74:	2308      	movs	r3, #8
 800cc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7a:	e0b4      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cc7c:	2310      	movs	r3, #16
 800cc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc82:	e0b0      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cc84:	2320      	movs	r3, #32
 800cc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc8a:	e0ac      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cc8c:	2340      	movs	r3, #64	; 0x40
 800cc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc92:	e0a8      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cc94:	2380      	movs	r3, #128	; 0x80
 800cc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc9a:	e0a4      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a90      	ldr	r2, [pc, #576]	; (800cee4 <UART_SetConfig+0x6a0>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d130      	bne.n	800cd08 <UART_SetConfig+0x4c4>
 800cca6:	4b8e      	ldr	r3, [pc, #568]	; (800cee0 <UART_SetConfig+0x69c>)
 800cca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccaa:	f003 0307 	and.w	r3, r3, #7
 800ccae:	2b05      	cmp	r3, #5
 800ccb0:	d826      	bhi.n	800cd00 <UART_SetConfig+0x4bc>
 800ccb2:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <UART_SetConfig+0x474>)
 800ccb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb8:	0800ccd1 	.word	0x0800ccd1
 800ccbc:	0800ccd9 	.word	0x0800ccd9
 800ccc0:	0800cce1 	.word	0x0800cce1
 800ccc4:	0800cce9 	.word	0x0800cce9
 800ccc8:	0800ccf1 	.word	0x0800ccf1
 800cccc:	0800ccf9 	.word	0x0800ccf9
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd6:	e086      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ccd8:	2304      	movs	r3, #4
 800ccda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccde:	e082      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cce0:	2308      	movs	r3, #8
 800cce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cce6:	e07e      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cce8:	2310      	movs	r3, #16
 800ccea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccee:	e07a      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ccf0:	2320      	movs	r3, #32
 800ccf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccf6:	e076      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800ccf8:	2340      	movs	r3, #64	; 0x40
 800ccfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfe:	e072      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cd00:	2380      	movs	r3, #128	; 0x80
 800cd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd06:	e06e      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a76      	ldr	r2, [pc, #472]	; (800cee8 <UART_SetConfig+0x6a4>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d130      	bne.n	800cd74 <UART_SetConfig+0x530>
 800cd12:	4b73      	ldr	r3, [pc, #460]	; (800cee0 <UART_SetConfig+0x69c>)
 800cd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd16:	f003 0307 	and.w	r3, r3, #7
 800cd1a:	2b05      	cmp	r3, #5
 800cd1c:	d826      	bhi.n	800cd6c <UART_SetConfig+0x528>
 800cd1e:	a201      	add	r2, pc, #4	; (adr r2, 800cd24 <UART_SetConfig+0x4e0>)
 800cd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd24:	0800cd3d 	.word	0x0800cd3d
 800cd28:	0800cd45 	.word	0x0800cd45
 800cd2c:	0800cd4d 	.word	0x0800cd4d
 800cd30:	0800cd55 	.word	0x0800cd55
 800cd34:	0800cd5d 	.word	0x0800cd5d
 800cd38:	0800cd65 	.word	0x0800cd65
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd42:	e050      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cd44:	2304      	movs	r3, #4
 800cd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd4a:	e04c      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cd4c:	2308      	movs	r3, #8
 800cd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd52:	e048      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cd54:	2310      	movs	r3, #16
 800cd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd5a:	e044      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cd5c:	2320      	movs	r3, #32
 800cd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd62:	e040      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cd64:	2340      	movs	r3, #64	; 0x40
 800cd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6a:	e03c      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cd6c:	2380      	movs	r3, #128	; 0x80
 800cd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd72:	e038      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a5c      	ldr	r2, [pc, #368]	; (800ceec <UART_SetConfig+0x6a8>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d130      	bne.n	800cde0 <UART_SetConfig+0x59c>
 800cd7e:	4b58      	ldr	r3, [pc, #352]	; (800cee0 <UART_SetConfig+0x69c>)
 800cd80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd82:	f003 0307 	and.w	r3, r3, #7
 800cd86:	2b05      	cmp	r3, #5
 800cd88:	d826      	bhi.n	800cdd8 <UART_SetConfig+0x594>
 800cd8a:	a201      	add	r2, pc, #4	; (adr r2, 800cd90 <UART_SetConfig+0x54c>)
 800cd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd90:	0800cda9 	.word	0x0800cda9
 800cd94:	0800cdb1 	.word	0x0800cdb1
 800cd98:	0800cdb9 	.word	0x0800cdb9
 800cd9c:	0800cdc1 	.word	0x0800cdc1
 800cda0:	0800cdc9 	.word	0x0800cdc9
 800cda4:	0800cdd1 	.word	0x0800cdd1
 800cda8:	2302      	movs	r3, #2
 800cdaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdae:	e01a      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cdb0:	2304      	movs	r3, #4
 800cdb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdb6:	e016      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cdb8:	2308      	movs	r3, #8
 800cdba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdbe:	e012      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cdc0:	2310      	movs	r3, #16
 800cdc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdc6:	e00e      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cdc8:	2320      	movs	r3, #32
 800cdca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdce:	e00a      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cdd0:	2340      	movs	r3, #64	; 0x40
 800cdd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdd6:	e006      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cdd8:	2380      	movs	r3, #128	; 0x80
 800cdda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdde:	e002      	b.n	800cde6 <UART_SetConfig+0x5a2>
 800cde0:	2380      	movs	r3, #128	; 0x80
 800cde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a40      	ldr	r2, [pc, #256]	; (800ceec <UART_SetConfig+0x6a8>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	f040 80ef 	bne.w	800cfd0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cdf6:	2b20      	cmp	r3, #32
 800cdf8:	dc46      	bgt.n	800ce88 <UART_SetConfig+0x644>
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	f2c0 8081 	blt.w	800cf02 <UART_SetConfig+0x6be>
 800ce00:	3b02      	subs	r3, #2
 800ce02:	2b1e      	cmp	r3, #30
 800ce04:	d87d      	bhi.n	800cf02 <UART_SetConfig+0x6be>
 800ce06:	a201      	add	r2, pc, #4	; (adr r2, 800ce0c <UART_SetConfig+0x5c8>)
 800ce08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0c:	0800ce8f 	.word	0x0800ce8f
 800ce10:	0800cf03 	.word	0x0800cf03
 800ce14:	0800ce97 	.word	0x0800ce97
 800ce18:	0800cf03 	.word	0x0800cf03
 800ce1c:	0800cf03 	.word	0x0800cf03
 800ce20:	0800cf03 	.word	0x0800cf03
 800ce24:	0800cea7 	.word	0x0800cea7
 800ce28:	0800cf03 	.word	0x0800cf03
 800ce2c:	0800cf03 	.word	0x0800cf03
 800ce30:	0800cf03 	.word	0x0800cf03
 800ce34:	0800cf03 	.word	0x0800cf03
 800ce38:	0800cf03 	.word	0x0800cf03
 800ce3c:	0800cf03 	.word	0x0800cf03
 800ce40:	0800cf03 	.word	0x0800cf03
 800ce44:	0800ceb7 	.word	0x0800ceb7
 800ce48:	0800cf03 	.word	0x0800cf03
 800ce4c:	0800cf03 	.word	0x0800cf03
 800ce50:	0800cf03 	.word	0x0800cf03
 800ce54:	0800cf03 	.word	0x0800cf03
 800ce58:	0800cf03 	.word	0x0800cf03
 800ce5c:	0800cf03 	.word	0x0800cf03
 800ce60:	0800cf03 	.word	0x0800cf03
 800ce64:	0800cf03 	.word	0x0800cf03
 800ce68:	0800cf03 	.word	0x0800cf03
 800ce6c:	0800cf03 	.word	0x0800cf03
 800ce70:	0800cf03 	.word	0x0800cf03
 800ce74:	0800cf03 	.word	0x0800cf03
 800ce78:	0800cf03 	.word	0x0800cf03
 800ce7c:	0800cf03 	.word	0x0800cf03
 800ce80:	0800cf03 	.word	0x0800cf03
 800ce84:	0800cef5 	.word	0x0800cef5
 800ce88:	2b40      	cmp	r3, #64	; 0x40
 800ce8a:	d036      	beq.n	800cefa <UART_SetConfig+0x6b6>
 800ce8c:	e039      	b.n	800cf02 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce8e:	f7fd f8b3 	bl	8009ff8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce94:	e03b      	b.n	800cf0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce96:	f107 0314 	add.w	r3, r7, #20
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fd f8c2 	bl	800a024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cea4:	e033      	b.n	800cf0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cea6:	f107 0308 	add.w	r3, r7, #8
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f7fd fa0e 	bl	800a2cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ceb4:	e02b      	b.n	800cf0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceb6:	4b0a      	ldr	r3, [pc, #40]	; (800cee0 <UART_SetConfig+0x69c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 0320 	and.w	r3, r3, #32
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d009      	beq.n	800ced6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cec2:	4b07      	ldr	r3, [pc, #28]	; (800cee0 <UART_SetConfig+0x69c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	08db      	lsrs	r3, r3, #3
 800cec8:	f003 0303 	and.w	r3, r3, #3
 800cecc:	4a08      	ldr	r2, [pc, #32]	; (800cef0 <UART_SetConfig+0x6ac>)
 800cece:	fa22 f303 	lsr.w	r3, r2, r3
 800ced2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ced4:	e01b      	b.n	800cf0e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ced6:	4b06      	ldr	r3, [pc, #24]	; (800cef0 <UART_SetConfig+0x6ac>)
 800ced8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ceda:	e018      	b.n	800cf0e <UART_SetConfig+0x6ca>
 800cedc:	40011400 	.word	0x40011400
 800cee0:	58024400 	.word	0x58024400
 800cee4:	40007800 	.word	0x40007800
 800cee8:	40007c00 	.word	0x40007c00
 800ceec:	58000c00 	.word	0x58000c00
 800cef0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cef4:	4bc4      	ldr	r3, [pc, #784]	; (800d208 <UART_SetConfig+0x9c4>)
 800cef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cef8:	e009      	b.n	800cf0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cefa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cefe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cf00:	e005      	b.n	800cf0e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800cf02:	2300      	movs	r3, #0
 800cf04:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cf06:	2301      	movs	r3, #1
 800cf08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cf0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 81da 	beq.w	800d2ca <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1a:	4abc      	ldr	r2, [pc, #752]	; (800d20c <UART_SetConfig+0x9c8>)
 800cf1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf20:	461a      	mov	r2, r3
 800cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf24:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf28:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	685a      	ldr	r2, [r3, #4]
 800cf2e:	4613      	mov	r3, r2
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4413      	add	r3, r2
 800cf34:	6a3a      	ldr	r2, [r7, #32]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d305      	bcc.n	800cf46 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf40:	6a3a      	ldr	r2, [r7, #32]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d903      	bls.n	800cf4e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cf4c:	e1bd      	b.n	800d2ca <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	4618      	mov	r0, r3
 800cf52:	f04f 0100 	mov.w	r1, #0
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf5a:	4aac      	ldr	r2, [pc, #688]	; (800d20c <UART_SetConfig+0x9c8>)
 800cf5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	f04f 0300 	mov.w	r3, #0
 800cf66:	f7f3 fa13 	bl	8000390 <__aeabi_uldivmod>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	4610      	mov	r0, r2
 800cf70:	4619      	mov	r1, r3
 800cf72:	f04f 0200 	mov.w	r2, #0
 800cf76:	f04f 0300 	mov.w	r3, #0
 800cf7a:	020b      	lsls	r3, r1, #8
 800cf7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf80:	0202      	lsls	r2, r0, #8
 800cf82:	6879      	ldr	r1, [r7, #4]
 800cf84:	6849      	ldr	r1, [r1, #4]
 800cf86:	0849      	lsrs	r1, r1, #1
 800cf88:	4608      	mov	r0, r1
 800cf8a:	f04f 0100 	mov.w	r1, #0
 800cf8e:	1814      	adds	r4, r2, r0
 800cf90:	eb43 0501 	adc.w	r5, r3, r1
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	f04f 0300 	mov.w	r3, #0
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f7f3 f9f5 	bl	8000390 <__aeabi_uldivmod>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	4613      	mov	r3, r2
 800cfac:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfb4:	d308      	bcc.n	800cfc8 <UART_SetConfig+0x784>
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfbc:	d204      	bcs.n	800cfc8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfc4:	60da      	str	r2, [r3, #12]
 800cfc6:	e180      	b.n	800d2ca <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cfce:	e17c      	b.n	800d2ca <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	69db      	ldr	r3, [r3, #28]
 800cfd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfd8:	f040 80bf 	bne.w	800d15a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800cfdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cfe0:	2b20      	cmp	r3, #32
 800cfe2:	dc49      	bgt.n	800d078 <UART_SetConfig+0x834>
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	db7c      	blt.n	800d0e2 <UART_SetConfig+0x89e>
 800cfe8:	2b20      	cmp	r3, #32
 800cfea:	d87a      	bhi.n	800d0e2 <UART_SetConfig+0x89e>
 800cfec:	a201      	add	r2, pc, #4	; (adr r2, 800cff4 <UART_SetConfig+0x7b0>)
 800cfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff2:	bf00      	nop
 800cff4:	0800d07f 	.word	0x0800d07f
 800cff8:	0800d087 	.word	0x0800d087
 800cffc:	0800d0e3 	.word	0x0800d0e3
 800d000:	0800d0e3 	.word	0x0800d0e3
 800d004:	0800d08f 	.word	0x0800d08f
 800d008:	0800d0e3 	.word	0x0800d0e3
 800d00c:	0800d0e3 	.word	0x0800d0e3
 800d010:	0800d0e3 	.word	0x0800d0e3
 800d014:	0800d09f 	.word	0x0800d09f
 800d018:	0800d0e3 	.word	0x0800d0e3
 800d01c:	0800d0e3 	.word	0x0800d0e3
 800d020:	0800d0e3 	.word	0x0800d0e3
 800d024:	0800d0e3 	.word	0x0800d0e3
 800d028:	0800d0e3 	.word	0x0800d0e3
 800d02c:	0800d0e3 	.word	0x0800d0e3
 800d030:	0800d0e3 	.word	0x0800d0e3
 800d034:	0800d0af 	.word	0x0800d0af
 800d038:	0800d0e3 	.word	0x0800d0e3
 800d03c:	0800d0e3 	.word	0x0800d0e3
 800d040:	0800d0e3 	.word	0x0800d0e3
 800d044:	0800d0e3 	.word	0x0800d0e3
 800d048:	0800d0e3 	.word	0x0800d0e3
 800d04c:	0800d0e3 	.word	0x0800d0e3
 800d050:	0800d0e3 	.word	0x0800d0e3
 800d054:	0800d0e3 	.word	0x0800d0e3
 800d058:	0800d0e3 	.word	0x0800d0e3
 800d05c:	0800d0e3 	.word	0x0800d0e3
 800d060:	0800d0e3 	.word	0x0800d0e3
 800d064:	0800d0e3 	.word	0x0800d0e3
 800d068:	0800d0e3 	.word	0x0800d0e3
 800d06c:	0800d0e3 	.word	0x0800d0e3
 800d070:	0800d0e3 	.word	0x0800d0e3
 800d074:	0800d0d5 	.word	0x0800d0d5
 800d078:	2b40      	cmp	r3, #64	; 0x40
 800d07a:	d02e      	beq.n	800d0da <UART_SetConfig+0x896>
 800d07c:	e031      	b.n	800d0e2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d07e:	f7fc f84f 	bl	8009120 <HAL_RCC_GetPCLK1Freq>
 800d082:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d084:	e033      	b.n	800d0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d086:	f7fc f861 	bl	800914c <HAL_RCC_GetPCLK2Freq>
 800d08a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d08c:	e02f      	b.n	800d0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d08e:	f107 0314 	add.w	r3, r7, #20
 800d092:	4618      	mov	r0, r3
 800d094:	f7fc ffc6 	bl	800a024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d09c:	e027      	b.n	800d0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d09e:	f107 0308 	add.w	r3, r7, #8
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fd f912 	bl	800a2cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0ac:	e01f      	b.n	800d0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0ae:	4b58      	ldr	r3, [pc, #352]	; (800d210 <UART_SetConfig+0x9cc>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 0320 	and.w	r3, r3, #32
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d009      	beq.n	800d0ce <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0ba:	4b55      	ldr	r3, [pc, #340]	; (800d210 <UART_SetConfig+0x9cc>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	08db      	lsrs	r3, r3, #3
 800d0c0:	f003 0303 	and.w	r3, r3, #3
 800d0c4:	4a53      	ldr	r2, [pc, #332]	; (800d214 <UART_SetConfig+0x9d0>)
 800d0c6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0cc:	e00f      	b.n	800d0ee <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d0ce:	4b51      	ldr	r3, [pc, #324]	; (800d214 <UART_SetConfig+0x9d0>)
 800d0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0d2:	e00c      	b.n	800d0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0d4:	4b4c      	ldr	r3, [pc, #304]	; (800d208 <UART_SetConfig+0x9c4>)
 800d0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0d8:	e009      	b.n	800d0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0e0:	e005      	b.n	800d0ee <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d0ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f000 80ea 	beq.w	800d2ca <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fa:	4a44      	ldr	r2, [pc, #272]	; (800d20c <UART_SetConfig+0x9c8>)
 800d0fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d100:	461a      	mov	r2, r3
 800d102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d104:	fbb3 f3f2 	udiv	r3, r3, r2
 800d108:	005a      	lsls	r2, r3, #1
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	085b      	lsrs	r3, r3, #1
 800d110:	441a      	add	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	fbb2 f3f3 	udiv	r3, r2, r3
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	2b0f      	cmp	r3, #15
 800d122:	d916      	bls.n	800d152 <UART_SetConfig+0x90e>
 800d124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d12a:	d212      	bcs.n	800d152 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	b29b      	uxth	r3, r3
 800d130:	f023 030f 	bic.w	r3, r3, #15
 800d134:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	085b      	lsrs	r3, r3, #1
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	f003 0307 	and.w	r3, r3, #7
 800d140:	b29a      	uxth	r2, r3
 800d142:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d144:	4313      	orrs	r3, r2
 800d146:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d14e:	60da      	str	r2, [r3, #12]
 800d150:	e0bb      	b.n	800d2ca <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d158:	e0b7      	b.n	800d2ca <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d15a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d15e:	2b20      	cmp	r3, #32
 800d160:	dc4a      	bgt.n	800d1f8 <UART_SetConfig+0x9b4>
 800d162:	2b00      	cmp	r3, #0
 800d164:	f2c0 8086 	blt.w	800d274 <UART_SetConfig+0xa30>
 800d168:	2b20      	cmp	r3, #32
 800d16a:	f200 8083 	bhi.w	800d274 <UART_SetConfig+0xa30>
 800d16e:	a201      	add	r2, pc, #4	; (adr r2, 800d174 <UART_SetConfig+0x930>)
 800d170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d174:	0800d1ff 	.word	0x0800d1ff
 800d178:	0800d219 	.word	0x0800d219
 800d17c:	0800d275 	.word	0x0800d275
 800d180:	0800d275 	.word	0x0800d275
 800d184:	0800d221 	.word	0x0800d221
 800d188:	0800d275 	.word	0x0800d275
 800d18c:	0800d275 	.word	0x0800d275
 800d190:	0800d275 	.word	0x0800d275
 800d194:	0800d231 	.word	0x0800d231
 800d198:	0800d275 	.word	0x0800d275
 800d19c:	0800d275 	.word	0x0800d275
 800d1a0:	0800d275 	.word	0x0800d275
 800d1a4:	0800d275 	.word	0x0800d275
 800d1a8:	0800d275 	.word	0x0800d275
 800d1ac:	0800d275 	.word	0x0800d275
 800d1b0:	0800d275 	.word	0x0800d275
 800d1b4:	0800d241 	.word	0x0800d241
 800d1b8:	0800d275 	.word	0x0800d275
 800d1bc:	0800d275 	.word	0x0800d275
 800d1c0:	0800d275 	.word	0x0800d275
 800d1c4:	0800d275 	.word	0x0800d275
 800d1c8:	0800d275 	.word	0x0800d275
 800d1cc:	0800d275 	.word	0x0800d275
 800d1d0:	0800d275 	.word	0x0800d275
 800d1d4:	0800d275 	.word	0x0800d275
 800d1d8:	0800d275 	.word	0x0800d275
 800d1dc:	0800d275 	.word	0x0800d275
 800d1e0:	0800d275 	.word	0x0800d275
 800d1e4:	0800d275 	.word	0x0800d275
 800d1e8:	0800d275 	.word	0x0800d275
 800d1ec:	0800d275 	.word	0x0800d275
 800d1f0:	0800d275 	.word	0x0800d275
 800d1f4:	0800d267 	.word	0x0800d267
 800d1f8:	2b40      	cmp	r3, #64	; 0x40
 800d1fa:	d037      	beq.n	800d26c <UART_SetConfig+0xa28>
 800d1fc:	e03a      	b.n	800d274 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1fe:	f7fb ff8f 	bl	8009120 <HAL_RCC_GetPCLK1Freq>
 800d202:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d204:	e03c      	b.n	800d280 <UART_SetConfig+0xa3c>
 800d206:	bf00      	nop
 800d208:	003d0900 	.word	0x003d0900
 800d20c:	08010bb0 	.word	0x08010bb0
 800d210:	58024400 	.word	0x58024400
 800d214:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d218:	f7fb ff98 	bl	800914c <HAL_RCC_GetPCLK2Freq>
 800d21c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d21e:	e02f      	b.n	800d280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d220:	f107 0314 	add.w	r3, r7, #20
 800d224:	4618      	mov	r0, r3
 800d226:	f7fc fefd 	bl	800a024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d22e:	e027      	b.n	800d280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d230:	f107 0308 	add.w	r3, r7, #8
 800d234:	4618      	mov	r0, r3
 800d236:	f7fd f849 	bl	800a2cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d23e:	e01f      	b.n	800d280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d240:	4b2c      	ldr	r3, [pc, #176]	; (800d2f4 <UART_SetConfig+0xab0>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 0320 	and.w	r3, r3, #32
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d009      	beq.n	800d260 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d24c:	4b29      	ldr	r3, [pc, #164]	; (800d2f4 <UART_SetConfig+0xab0>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	08db      	lsrs	r3, r3, #3
 800d252:	f003 0303 	and.w	r3, r3, #3
 800d256:	4a28      	ldr	r2, [pc, #160]	; (800d2f8 <UART_SetConfig+0xab4>)
 800d258:	fa22 f303 	lsr.w	r3, r2, r3
 800d25c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d25e:	e00f      	b.n	800d280 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d260:	4b25      	ldr	r3, [pc, #148]	; (800d2f8 <UART_SetConfig+0xab4>)
 800d262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d264:	e00c      	b.n	800d280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d266:	4b25      	ldr	r3, [pc, #148]	; (800d2fc <UART_SetConfig+0xab8>)
 800d268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d26a:	e009      	b.n	800d280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d26c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d272:	e005      	b.n	800d280 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d274:	2300      	movs	r3, #0
 800d276:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d278:	2301      	movs	r3, #1
 800d27a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d27e:	bf00      	nop
    }

    if (pclk != 0U)
 800d280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d282:	2b00      	cmp	r3, #0
 800d284:	d021      	beq.n	800d2ca <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28a:	4a1d      	ldr	r2, [pc, #116]	; (800d300 <UART_SetConfig+0xabc>)
 800d28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d290:	461a      	mov	r2, r3
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	fbb3 f2f2 	udiv	r2, r3, r2
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	085b      	lsrs	r3, r3, #1
 800d29e:	441a      	add	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	2b0f      	cmp	r3, #15
 800d2b0:	d908      	bls.n	800d2c4 <UART_SetConfig+0xa80>
 800d2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2b8:	d204      	bcs.n	800d2c4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2c0:	60da      	str	r2, [r3, #12]
 800d2c2:	e002      	b.n	800d2ca <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d2e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3738      	adds	r7, #56	; 0x38
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bdb0      	pop	{r4, r5, r7, pc}
 800d2f2:	bf00      	nop
 800d2f4:	58024400 	.word	0x58024400
 800d2f8:	03d09000 	.word	0x03d09000
 800d2fc:	003d0900 	.word	0x003d0900
 800d300:	08010bb0 	.word	0x08010bb0

0800d304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d310:	f003 0301 	and.w	r3, r3, #1
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00a      	beq.n	800d32e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	430a      	orrs	r2, r1
 800d32c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d332:	f003 0302 	and.w	r3, r3, #2
 800d336:	2b00      	cmp	r3, #0
 800d338:	d00a      	beq.n	800d350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	430a      	orrs	r2, r1
 800d34e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d354:	f003 0304 	and.w	r3, r3, #4
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00a      	beq.n	800d372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	430a      	orrs	r2, r1
 800d370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d376:	f003 0308 	and.w	r3, r3, #8
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d00a      	beq.n	800d394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	430a      	orrs	r2, r1
 800d392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d398:	f003 0310 	and.w	r3, r3, #16
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d00a      	beq.n	800d3b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	430a      	orrs	r2, r1
 800d3b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ba:	f003 0320 	and.w	r3, r3, #32
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00a      	beq.n	800d3d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	430a      	orrs	r2, r1
 800d3d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d01a      	beq.n	800d41a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	430a      	orrs	r2, r1
 800d3f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d402:	d10a      	bne.n	800d41a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	430a      	orrs	r2, r1
 800d418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00a      	beq.n	800d43c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	430a      	orrs	r2, r1
 800d43a:	605a      	str	r2, [r3, #4]
  }
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d458:	f7f5 fae0 	bl	8002a1c <HAL_GetTick>
 800d45c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f003 0308 	and.w	r3, r3, #8
 800d468:	2b08      	cmp	r3, #8
 800d46a:	d10e      	bne.n	800d48a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d46c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2200      	movs	r2, #0
 800d476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f82f 	bl	800d4de <UART_WaitOnFlagUntilTimeout>
 800d480:	4603      	mov	r3, r0
 800d482:	2b00      	cmp	r3, #0
 800d484:	d001      	beq.n	800d48a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d486:	2303      	movs	r3, #3
 800d488:	e025      	b.n	800d4d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f003 0304 	and.w	r3, r3, #4
 800d494:	2b04      	cmp	r3, #4
 800d496:	d10e      	bne.n	800d4b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 f819 	bl	800d4de <UART_WaitOnFlagUntilTimeout>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	e00f      	b.n	800d4d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2220      	movs	r2, #32
 800d4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2220      	movs	r2, #32
 800d4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3710      	adds	r7, #16
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}

0800d4de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b084      	sub	sp, #16
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	60f8      	str	r0, [r7, #12]
 800d4e6:	60b9      	str	r1, [r7, #8]
 800d4e8:	603b      	str	r3, [r7, #0]
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4ee:	e062      	b.n	800d5b6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f6:	d05e      	beq.n	800d5b6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4f8:	f7f5 fa90 	bl	8002a1c <HAL_GetTick>
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	1ad3      	subs	r3, r2, r3
 800d502:	69ba      	ldr	r2, [r7, #24]
 800d504:	429a      	cmp	r2, r3
 800d506:	d302      	bcc.n	800d50e <UART_WaitOnFlagUntilTimeout+0x30>
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d11d      	bne.n	800d54a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d51c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	689a      	ldr	r2, [r3, #8]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f022 0201 	bic.w	r2, r2, #1
 800d52c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2220      	movs	r2, #32
 800d532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2220      	movs	r2, #32
 800d53a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2200      	movs	r2, #0
 800d542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d546:	2303      	movs	r3, #3
 800d548:	e045      	b.n	800d5d6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f003 0304 	and.w	r3, r3, #4
 800d554:	2b00      	cmp	r3, #0
 800d556:	d02e      	beq.n	800d5b6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	69db      	ldr	r3, [r3, #28]
 800d55e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d566:	d126      	bne.n	800d5b6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d570:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d580:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	689a      	ldr	r2, [r3, #8]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f022 0201 	bic.w	r2, r2, #1
 800d590:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2220      	movs	r2, #32
 800d596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2220      	movs	r2, #32
 800d59e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2220      	movs	r2, #32
 800d5a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	e00f      	b.n	800d5d6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	69da      	ldr	r2, [r3, #28]
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	4013      	ands	r3, r2
 800d5c0:	68ba      	ldr	r2, [r7, #8]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	bf0c      	ite	eq
 800d5c6:	2301      	moveq	r3, #1
 800d5c8:	2300      	movne	r3, #0
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	79fb      	ldrb	r3, [r7, #7]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d08d      	beq.n	800d4f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5d4:	2300      	movs	r3, #0
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
	...

0800d5e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60f8      	str	r0, [r7, #12]
 800d5e8:	60b9      	str	r1, [r7, #8]
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	88fa      	ldrh	r2, [r7, #6]
 800d5f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	88fa      	ldrh	r2, [r7, #6]
 800d600:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2200      	movs	r2, #0
 800d608:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d612:	d10e      	bne.n	800d632 <UART_Start_Receive_IT+0x52>
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d105      	bne.n	800d628 <UART_Start_Receive_IT+0x48>
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d622:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d626:	e02d      	b.n	800d684 <UART_Start_Receive_IT+0xa4>
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	22ff      	movs	r2, #255	; 0xff
 800d62c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d630:	e028      	b.n	800d684 <UART_Start_Receive_IT+0xa4>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10d      	bne.n	800d656 <UART_Start_Receive_IT+0x76>
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	691b      	ldr	r3, [r3, #16]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d104      	bne.n	800d64c <UART_Start_Receive_IT+0x6c>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	22ff      	movs	r2, #255	; 0xff
 800d646:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d64a:	e01b      	b.n	800d684 <UART_Start_Receive_IT+0xa4>
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	227f      	movs	r2, #127	; 0x7f
 800d650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d654:	e016      	b.n	800d684 <UART_Start_Receive_IT+0xa4>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	689b      	ldr	r3, [r3, #8]
 800d65a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d65e:	d10d      	bne.n	800d67c <UART_Start_Receive_IT+0x9c>
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d104      	bne.n	800d672 <UART_Start_Receive_IT+0x92>
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	227f      	movs	r2, #127	; 0x7f
 800d66c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d670:	e008      	b.n	800d684 <UART_Start_Receive_IT+0xa4>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	223f      	movs	r2, #63	; 0x3f
 800d676:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d67a:	e003      	b.n	800d684 <UART_Start_Receive_IT+0xa4>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2200      	movs	r2, #0
 800d688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2222      	movs	r2, #34	; 0x22
 800d690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	689a      	ldr	r2, [r3, #8]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f042 0201 	orr.w	r2, r2, #1
 800d6a2:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6ac:	d12a      	bne.n	800d704 <UART_Start_Receive_IT+0x124>
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d6b4:	88fa      	ldrh	r2, [r7, #6]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d324      	bcc.n	800d704 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6c2:	d107      	bne.n	800d6d4 <UART_Start_Receive_IT+0xf4>
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	691b      	ldr	r3, [r3, #16]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d103      	bne.n	800d6d4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	4a1f      	ldr	r2, [pc, #124]	; (800d74c <UART_Start_Receive_IT+0x16c>)
 800d6d0:	671a      	str	r2, [r3, #112]	; 0x70
 800d6d2:	e002      	b.n	800d6da <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	4a1e      	ldr	r2, [pc, #120]	; (800d750 <UART_Start_Receive_IT+0x170>)
 800d6d8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6f0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	689a      	ldr	r2, [r3, #8]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d700:	609a      	str	r2, [r3, #8]
 800d702:	e01b      	b.n	800d73c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d70c:	d107      	bne.n	800d71e <UART_Start_Receive_IT+0x13e>
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d103      	bne.n	800d71e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	4a0e      	ldr	r2, [pc, #56]	; (800d754 <UART_Start_Receive_IT+0x174>)
 800d71a:	671a      	str	r2, [r3, #112]	; 0x70
 800d71c:	e002      	b.n	800d724 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	4a0d      	ldr	r2, [pc, #52]	; (800d758 <UART_Start_Receive_IT+0x178>)
 800d722:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800d73a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3714      	adds	r7, #20
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
 800d74a:	bf00      	nop
 800d74c:	0800dcfd 	.word	0x0800dcfd
 800d750:	0800daf9 	.word	0x0800daf9
 800d754:	0800da21 	.word	0x0800da21
 800d758:	0800d949 	.word	0x0800d949

0800d75c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b083      	sub	sp, #12
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d772:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689a      	ldr	r2, [r3, #8]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d782:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2220      	movs	r2, #32
 800d788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d78c:	bf00      	nop
 800d78e:	370c      	adds	r7, #12
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d7ae:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6899      	ldr	r1, [r3, #8]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <UART_EndRxTransfer+0x60>)
 800d7bc:	400b      	ands	r3, r1
 800d7be:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d107      	bne.n	800d7d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f022 0210 	bic.w	r2, r2, #16
 800d7d6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2220      	movs	r2, #32
 800d7dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d7ec:	bf00      	nop
 800d7ee:	370c      	adds	r7, #12
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	effffffe 	.word	0xeffffffe

0800d7fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d808:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	69db      	ldr	r3, [r3, #28]
 800d80e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d812:	d014      	beq.n	800d83e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	689a      	ldr	r2, [r3, #8]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d82a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d83a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d83c:	e002      	b.n	800d844 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f7fe ffd6 	bl	800c7f0 <HAL_UART_TxCpltCallback>
}
 800d844:	bf00      	nop
 800d846:	3710      	adds	r7, #16
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d858:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f7fe ffd2 	bl	800c804 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d860:	bf00      	nop
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b086      	sub	sp, #24
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d874:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d87c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d884:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	689b      	ldr	r3, [r3, #8]
 800d88c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d890:	2b80      	cmp	r3, #128	; 0x80
 800d892:	d109      	bne.n	800d8a8 <UART_DMAError+0x40>
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	2b21      	cmp	r3, #33	; 0x21
 800d898:	d106      	bne.n	800d8a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d8a2:	6978      	ldr	r0, [r7, #20]
 800d8a4:	f7ff ff5a 	bl	800d75c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	689b      	ldr	r3, [r3, #8]
 800d8ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8b2:	2b40      	cmp	r3, #64	; 0x40
 800d8b4:	d109      	bne.n	800d8ca <UART_DMAError+0x62>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2b22      	cmp	r3, #34	; 0x22
 800d8ba:	d106      	bne.n	800d8ca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d8c4:	6978      	ldr	r0, [r7, #20]
 800d8c6:	f7ff ff67 	bl	800d798 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d8d0:	f043 0210 	orr.w	r2, r3, #16
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d8da:	6978      	ldr	r0, [r7, #20]
 800d8dc:	f7fe ff9c 	bl	800c818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8e0:	bf00      	nop
 800d8e2:	3718      	adds	r7, #24
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f7fe ff86 	bl	800c818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d90c:	bf00      	nop
 800d90e:	3710      	adds	r7, #16
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d92a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2220      	movs	r2, #32
 800d930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2200      	movs	r2, #0
 800d938:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7fe ff58 	bl	800c7f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d940:	bf00      	nop
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d956:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d95e:	2b22      	cmp	r3, #34	; 0x22
 800d960:	d152      	bne.n	800da08 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d968:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d96a:	89bb      	ldrh	r3, [r7, #12]
 800d96c:	b2d9      	uxtb	r1, r3
 800d96e:	89fb      	ldrh	r3, [r7, #14]
 800d970:	b2da      	uxtb	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d976:	400a      	ands	r2, r1
 800d978:	b2d2      	uxtb	r2, r2
 800d97a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d980:	1c5a      	adds	r2, r3, #1
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	3b01      	subs	r3, #1
 800d990:	b29a      	uxth	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d139      	bne.n	800da18 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d9b2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	689a      	ldr	r2, [r3, #8]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f022 0201 	bic.w	r2, r2, #1
 800d9c2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2220      	movs	r2, #32
 800d9c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d10f      	bne.n	800d9fa <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f022 0210 	bic.w	r2, r2, #16
 800d9e8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9f0:	4619      	mov	r1, r3
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7fe ff1a 	bl	800c82c <HAL_UARTEx_RxEventCallback>
 800d9f8:	e002      	b.n	800da00 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7f4 f9fc 	bl	8001df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800da06:	e007      	b.n	800da18 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	699a      	ldr	r2, [r3, #24]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f042 0208 	orr.w	r2, r2, #8
 800da16:	619a      	str	r2, [r3, #24]
}
 800da18:	bf00      	nop
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da2e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da36:	2b22      	cmp	r3, #34	; 0x22
 800da38:	d152      	bne.n	800dae0 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da40:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da46:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800da48:	89ba      	ldrh	r2, [r7, #12]
 800da4a:	89fb      	ldrh	r3, [r7, #14]
 800da4c:	4013      	ands	r3, r2
 800da4e:	b29a      	uxth	r2, r3
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da58:	1c9a      	adds	r2, r3, #2
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da64:	b29b      	uxth	r3, r3
 800da66:	3b01      	subs	r3, #1
 800da68:	b29a      	uxth	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800da76:	b29b      	uxth	r3, r3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d139      	bne.n	800daf0 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800da8a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	689a      	ldr	r2, [r3, #8]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f022 0201 	bic.w	r2, r2, #1
 800da9a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2220      	movs	r2, #32
 800daa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d10f      	bne.n	800dad2 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	681a      	ldr	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	f022 0210 	bic.w	r2, r2, #16
 800dac0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dac8:	4619      	mov	r1, r3
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7fe feae 	bl	800c82c <HAL_UARTEx_RxEventCallback>
 800dad0:	e002      	b.n	800dad8 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7f4 f990 	bl	8001df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dade:	e007      	b.n	800daf0 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	699a      	ldr	r2, [r3, #24]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f042 0208 	orr.w	r2, r2, #8
 800daee:	619a      	str	r2, [r3, #24]
}
 800daf0:	bf00      	nop
 800daf2:	3710      	adds	r7, #16
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b088      	sub	sp, #32
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db06:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	69db      	ldr	r3, [r3, #28]
 800db0e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db26:	2b22      	cmp	r3, #34	; 0x22
 800db28:	f040 80d8 	bne.w	800dcdc <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800db32:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db34:	e0a8      	b.n	800dc88 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800db3e:	89bb      	ldrh	r3, [r7, #12]
 800db40:	b2d9      	uxtb	r1, r3
 800db42:	8b7b      	ldrh	r3, [r7, #26]
 800db44:	b2da      	uxtb	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db4a:	400a      	ands	r2, r1
 800db4c:	b2d2      	uxtb	r2, r2
 800db4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db54:	1c5a      	adds	r2, r3, #1
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800db60:	b29b      	uxth	r3, r3
 800db62:	3b01      	subs	r3, #1
 800db64:	b29a      	uxth	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	69db      	ldr	r3, [r3, #28]
 800db72:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	f003 0307 	and.w	r3, r3, #7
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d04d      	beq.n	800dc1a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	f003 0301 	and.w	r3, r3, #1
 800db84:	2b00      	cmp	r3, #0
 800db86:	d010      	beq.n	800dbaa <UART_RxISR_8BIT_FIFOEN+0xb2>
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00b      	beq.n	800dbaa <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2201      	movs	r2, #1
 800db98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dba0:	f043 0201 	orr.w	r2, r3, #1
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	f003 0302 	and.w	r3, r3, #2
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d010      	beq.n	800dbd6 <UART_RxISR_8BIT_FIFOEN+0xde>
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d00b      	beq.n	800dbd6 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2202      	movs	r2, #2
 800dbc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbcc:	f043 0204 	orr.w	r2, r3, #4
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	f003 0304 	and.w	r3, r3, #4
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d010      	beq.n	800dc02 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d00b      	beq.n	800dc02 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2204      	movs	r2, #4
 800dbf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbf8:	f043 0202 	orr.w	r2, r3, #2
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d006      	beq.n	800dc1a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7fe fe03 	bl	800c818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2200      	movs	r2, #0
 800dc16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d130      	bne.n	800dc88 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc34:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6899      	ldr	r1, [r3, #8]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	4b2c      	ldr	r3, [pc, #176]	; (800dcf4 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800dc42:	400b      	ands	r3, r1
 800dc44:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2220      	movs	r2, #32
 800dc4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d10f      	bne.n	800dc7c <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f022 0210 	bic.w	r2, r2, #16
 800dc6a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7fe fdd9 	bl	800c82c <HAL_UARTEx_RxEventCallback>
 800dc7a:	e002      	b.n	800dc82 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f7f4 f8bb 	bl	8001df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc88:	89fb      	ldrh	r3, [r7, #14]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d005      	beq.n	800dc9a <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	f003 0320 	and.w	r3, r3, #32
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	f47f af4e 	bne.w	800db36 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dca0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dca2:	897b      	ldrh	r3, [r7, #10]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d021      	beq.n	800dcec <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dcae:	897a      	ldrh	r2, [r7, #10]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d21b      	bcs.n	800dcec <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	689a      	ldr	r2, [r3, #8]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dcc2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4a0c      	ldr	r2, [pc, #48]	; (800dcf8 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800dcc8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f042 0220 	orr.w	r2, r2, #32
 800dcd8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dcda:	e007      	b.n	800dcec <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	699a      	ldr	r2, [r3, #24]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f042 0208 	orr.w	r2, r2, #8
 800dcea:	619a      	str	r2, [r3, #24]
}
 800dcec:	bf00      	nop
 800dcee:	3720      	adds	r7, #32
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	effffffe 	.word	0xeffffffe
 800dcf8:	0800d949 	.word	0x0800d949

0800dcfc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b08a      	sub	sp, #40	; 0x28
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd0a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	689b      	ldr	r3, [r3, #8]
 800dd22:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd2a:	2b22      	cmp	r3, #34	; 0x22
 800dd2c:	f040 80d8 	bne.w	800dee0 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dd36:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dd38:	e0a8      	b.n	800de8c <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd40:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd46:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800dd48:	8aba      	ldrh	r2, [r7, #20]
 800dd4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd4c:	4013      	ands	r3, r2
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd58:	1c9a      	adds	r2, r3, #2
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	3b01      	subs	r3, #1
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	69db      	ldr	r3, [r3, #28]
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	f003 0307 	and.w	r3, r3, #7
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d04d      	beq.n	800de1e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd84:	f003 0301 	and.w	r3, r3, #1
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d010      	beq.n	800ddae <UART_RxISR_16BIT_FIFOEN+0xb2>
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00b      	beq.n	800ddae <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dda4:	f043 0201 	orr.w	r2, r3, #1
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb0:	f003 0302 	and.w	r3, r3, #2
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d010      	beq.n	800ddda <UART_RxISR_16BIT_FIFOEN+0xde>
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	f003 0301 	and.w	r3, r3, #1
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00b      	beq.n	800ddda <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2202      	movs	r2, #2
 800ddc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddd0:	f043 0204 	orr.w	r2, r3, #4
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	f003 0304 	and.w	r3, r3, #4
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d010      	beq.n	800de06 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800dde4:	69bb      	ldr	r3, [r7, #24]
 800dde6:	f003 0301 	and.w	r3, r3, #1
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00b      	beq.n	800de06 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2204      	movs	r2, #4
 800ddf4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddfc:	f043 0202 	orr.w	r2, r3, #2
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d006      	beq.n	800de1e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7fe fd01 	bl	800c818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de24:	b29b      	uxth	r3, r3
 800de26:	2b00      	cmp	r3, #0
 800de28:	d130      	bne.n	800de8c <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	681a      	ldr	r2, [r3, #0]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800de38:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	6899      	ldr	r1, [r3, #8]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	4b2c      	ldr	r3, [pc, #176]	; (800def8 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800de46:	400b      	ands	r3, r1
 800de48:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2220      	movs	r2, #32
 800de4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d10f      	bne.n	800de80 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f022 0210 	bic.w	r2, r2, #16
 800de6e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de76:	4619      	mov	r1, r3
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7fe fcd7 	bl	800c82c <HAL_UARTEx_RxEventCallback>
 800de7e:	e002      	b.n	800de86 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7f3 ffb9 	bl	8001df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800de8c:	8afb      	ldrh	r3, [r7, #22]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d005      	beq.n	800de9e <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800de92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de94:	f003 0320 	and.w	r3, r3, #32
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f47f af4e 	bne.w	800dd3a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dea4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dea6:	89fb      	ldrh	r3, [r7, #14]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d021      	beq.n	800def0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800deb2:	89fa      	ldrh	r2, [r7, #14]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d21b      	bcs.n	800def0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	689a      	ldr	r2, [r3, #8]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dec6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4a0c      	ldr	r2, [pc, #48]	; (800defc <UART_RxISR_16BIT_FIFOEN+0x200>)
 800decc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f042 0220 	orr.w	r2, r2, #32
 800dedc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dede:	e007      	b.n	800def0 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	699a      	ldr	r2, [r3, #24]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f042 0208 	orr.w	r2, r2, #8
 800deee:	619a      	str	r2, [r3, #24]
}
 800def0:	bf00      	nop
 800def2:	3728      	adds	r7, #40	; 0x28
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	effffffe 	.word	0xeffffffe
 800defc:	0800da21 	.word	0x0800da21

0800df00 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800df08:	bf00      	nop
 800df0a:	370c      	adds	r7, #12
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800df1c:	bf00      	nop
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800df30:	bf00      	nop
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr

0800df3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b085      	sub	sp, #20
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d101      	bne.n	800df52 <HAL_UARTEx_DisableFifoMode+0x16>
 800df4e:	2302      	movs	r3, #2
 800df50:	e027      	b.n	800dfa2 <HAL_UARTEx_DisableFifoMode+0x66>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2224      	movs	r2, #36	; 0x24
 800df5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	681a      	ldr	r2, [r3, #0]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f022 0201 	bic.w	r2, r2, #1
 800df78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800df80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2200      	movs	r2, #0
 800df86:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2220      	movs	r2, #32
 800df94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr

0800dfae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b084      	sub	sp, #16
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
 800dfb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d101      	bne.n	800dfc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dfc2:	2302      	movs	r3, #2
 800dfc4:	e02d      	b.n	800e022 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2224      	movs	r2, #36	; 0x24
 800dfd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f022 0201 	bic.w	r2, r2, #1
 800dfec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	683a      	ldr	r2, [r7, #0]
 800dffe:	430a      	orrs	r2, r1
 800e000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f850 	bl	800e0a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2220      	movs	r2, #32
 800e014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e020:	2300      	movs	r3, #0
}
 800e022:	4618      	mov	r0, r3
 800e024:	3710      	adds	r7, #16
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}

0800e02a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b084      	sub	sp, #16
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d101      	bne.n	800e042 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e03e:	2302      	movs	r3, #2
 800e040:	e02d      	b.n	800e09e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2201      	movs	r2, #1
 800e046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2224      	movs	r2, #36	; 0x24
 800e04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f022 0201 	bic.w	r2, r2, #1
 800e068:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	683a      	ldr	r2, [r7, #0]
 800e07a:	430a      	orrs	r2, r1
 800e07c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 f812 	bl	800e0a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2220      	movs	r2, #32
 800e090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
	...

0800e0a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d108      	bne.n	800e0ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e0c8:	e031      	b.n	800e12e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e0ca:	2310      	movs	r3, #16
 800e0cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e0ce:	2310      	movs	r3, #16
 800e0d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	0e5b      	lsrs	r3, r3, #25
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f003 0307 	and.w	r3, r3, #7
 800e0e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	0f5b      	lsrs	r3, r3, #29
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f003 0307 	and.w	r3, r3, #7
 800e0f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e0f2:	7bbb      	ldrb	r3, [r7, #14]
 800e0f4:	7b3a      	ldrb	r2, [r7, #12]
 800e0f6:	4911      	ldr	r1, [pc, #68]	; (800e13c <UARTEx_SetNbDataToProcess+0x94>)
 800e0f8:	5c8a      	ldrb	r2, [r1, r2]
 800e0fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e0fe:	7b3a      	ldrb	r2, [r7, #12]
 800e100:	490f      	ldr	r1, [pc, #60]	; (800e140 <UARTEx_SetNbDataToProcess+0x98>)
 800e102:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e104:	fb93 f3f2 	sdiv	r3, r3, r2
 800e108:	b29a      	uxth	r2, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	7b7a      	ldrb	r2, [r7, #13]
 800e114:	4909      	ldr	r1, [pc, #36]	; (800e13c <UARTEx_SetNbDataToProcess+0x94>)
 800e116:	5c8a      	ldrb	r2, [r1, r2]
 800e118:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e11c:	7b7a      	ldrb	r2, [r7, #13]
 800e11e:	4908      	ldr	r1, [pc, #32]	; (800e140 <UARTEx_SetNbDataToProcess+0x98>)
 800e120:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e122:	fb93 f3f2 	sdiv	r3, r3, r2
 800e126:	b29a      	uxth	r2, r3
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e12e:	bf00      	nop
 800e130:	3714      	adds	r7, #20
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	08010bc8 	.word	0x08010bc8
 800e140:	08010bd0 	.word	0x08010bd0

0800e144 <__errno>:
 800e144:	4b01      	ldr	r3, [pc, #4]	; (800e14c <__errno+0x8>)
 800e146:	6818      	ldr	r0, [r3, #0]
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	2400001c 	.word	0x2400001c

0800e150 <__libc_init_array>:
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	4d0d      	ldr	r5, [pc, #52]	; (800e188 <__libc_init_array+0x38>)
 800e154:	4c0d      	ldr	r4, [pc, #52]	; (800e18c <__libc_init_array+0x3c>)
 800e156:	1b64      	subs	r4, r4, r5
 800e158:	10a4      	asrs	r4, r4, #2
 800e15a:	2600      	movs	r6, #0
 800e15c:	42a6      	cmp	r6, r4
 800e15e:	d109      	bne.n	800e174 <__libc_init_array+0x24>
 800e160:	4d0b      	ldr	r5, [pc, #44]	; (800e190 <__libc_init_array+0x40>)
 800e162:	4c0c      	ldr	r4, [pc, #48]	; (800e194 <__libc_init_array+0x44>)
 800e164:	f002 fcec 	bl	8010b40 <_init>
 800e168:	1b64      	subs	r4, r4, r5
 800e16a:	10a4      	asrs	r4, r4, #2
 800e16c:	2600      	movs	r6, #0
 800e16e:	42a6      	cmp	r6, r4
 800e170:	d105      	bne.n	800e17e <__libc_init_array+0x2e>
 800e172:	bd70      	pop	{r4, r5, r6, pc}
 800e174:	f855 3b04 	ldr.w	r3, [r5], #4
 800e178:	4798      	blx	r3
 800e17a:	3601      	adds	r6, #1
 800e17c:	e7ee      	b.n	800e15c <__libc_init_array+0xc>
 800e17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e182:	4798      	blx	r3
 800e184:	3601      	adds	r6, #1
 800e186:	e7f2      	b.n	800e16e <__libc_init_array+0x1e>
 800e188:	08010fc4 	.word	0x08010fc4
 800e18c:	08010fc4 	.word	0x08010fc4
 800e190:	08010fc4 	.word	0x08010fc4
 800e194:	08010fc8 	.word	0x08010fc8

0800e198 <memset>:
 800e198:	4402      	add	r2, r0
 800e19a:	4603      	mov	r3, r0
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d100      	bne.n	800e1a2 <memset+0xa>
 800e1a0:	4770      	bx	lr
 800e1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e1a6:	e7f9      	b.n	800e19c <memset+0x4>

0800e1a8 <__cvt>:
 800e1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1aa:	ed2d 8b02 	vpush	{d8}
 800e1ae:	eeb0 8b40 	vmov.f64	d8, d0
 800e1b2:	b085      	sub	sp, #20
 800e1b4:	4617      	mov	r7, r2
 800e1b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e1b8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e1ba:	ee18 2a90 	vmov	r2, s17
 800e1be:	f025 0520 	bic.w	r5, r5, #32
 800e1c2:	2a00      	cmp	r2, #0
 800e1c4:	bfb6      	itet	lt
 800e1c6:	222d      	movlt	r2, #45	; 0x2d
 800e1c8:	2200      	movge	r2, #0
 800e1ca:	eeb1 8b40 	vneglt.f64	d8, d0
 800e1ce:	2d46      	cmp	r5, #70	; 0x46
 800e1d0:	460c      	mov	r4, r1
 800e1d2:	701a      	strb	r2, [r3, #0]
 800e1d4:	d004      	beq.n	800e1e0 <__cvt+0x38>
 800e1d6:	2d45      	cmp	r5, #69	; 0x45
 800e1d8:	d100      	bne.n	800e1dc <__cvt+0x34>
 800e1da:	3401      	adds	r4, #1
 800e1dc:	2102      	movs	r1, #2
 800e1de:	e000      	b.n	800e1e2 <__cvt+0x3a>
 800e1e0:	2103      	movs	r1, #3
 800e1e2:	ab03      	add	r3, sp, #12
 800e1e4:	9301      	str	r3, [sp, #4]
 800e1e6:	ab02      	add	r3, sp, #8
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	4622      	mov	r2, r4
 800e1ec:	4633      	mov	r3, r6
 800e1ee:	eeb0 0b48 	vmov.f64	d0, d8
 800e1f2:	f000 fdf5 	bl	800ede0 <_dtoa_r>
 800e1f6:	2d47      	cmp	r5, #71	; 0x47
 800e1f8:	d109      	bne.n	800e20e <__cvt+0x66>
 800e1fa:	07fb      	lsls	r3, r7, #31
 800e1fc:	d407      	bmi.n	800e20e <__cvt+0x66>
 800e1fe:	9b03      	ldr	r3, [sp, #12]
 800e200:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e202:	1a1b      	subs	r3, r3, r0
 800e204:	6013      	str	r3, [r2, #0]
 800e206:	b005      	add	sp, #20
 800e208:	ecbd 8b02 	vpop	{d8}
 800e20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e20e:	2d46      	cmp	r5, #70	; 0x46
 800e210:	eb00 0204 	add.w	r2, r0, r4
 800e214:	d10c      	bne.n	800e230 <__cvt+0x88>
 800e216:	7803      	ldrb	r3, [r0, #0]
 800e218:	2b30      	cmp	r3, #48	; 0x30
 800e21a:	d107      	bne.n	800e22c <__cvt+0x84>
 800e21c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e224:	bf1c      	itt	ne
 800e226:	f1c4 0401 	rsbne	r4, r4, #1
 800e22a:	6034      	strne	r4, [r6, #0]
 800e22c:	6833      	ldr	r3, [r6, #0]
 800e22e:	441a      	add	r2, r3
 800e230:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e238:	bf08      	it	eq
 800e23a:	9203      	streq	r2, [sp, #12]
 800e23c:	2130      	movs	r1, #48	; 0x30
 800e23e:	9b03      	ldr	r3, [sp, #12]
 800e240:	4293      	cmp	r3, r2
 800e242:	d2dc      	bcs.n	800e1fe <__cvt+0x56>
 800e244:	1c5c      	adds	r4, r3, #1
 800e246:	9403      	str	r4, [sp, #12]
 800e248:	7019      	strb	r1, [r3, #0]
 800e24a:	e7f8      	b.n	800e23e <__cvt+0x96>

0800e24c <__exponent>:
 800e24c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e24e:	4603      	mov	r3, r0
 800e250:	2900      	cmp	r1, #0
 800e252:	bfb8      	it	lt
 800e254:	4249      	neglt	r1, r1
 800e256:	f803 2b02 	strb.w	r2, [r3], #2
 800e25a:	bfb4      	ite	lt
 800e25c:	222d      	movlt	r2, #45	; 0x2d
 800e25e:	222b      	movge	r2, #43	; 0x2b
 800e260:	2909      	cmp	r1, #9
 800e262:	7042      	strb	r2, [r0, #1]
 800e264:	dd2a      	ble.n	800e2bc <__exponent+0x70>
 800e266:	f10d 0407 	add.w	r4, sp, #7
 800e26a:	46a4      	mov	ip, r4
 800e26c:	270a      	movs	r7, #10
 800e26e:	46a6      	mov	lr, r4
 800e270:	460a      	mov	r2, r1
 800e272:	fb91 f6f7 	sdiv	r6, r1, r7
 800e276:	fb07 1516 	mls	r5, r7, r6, r1
 800e27a:	3530      	adds	r5, #48	; 0x30
 800e27c:	2a63      	cmp	r2, #99	; 0x63
 800e27e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e282:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e286:	4631      	mov	r1, r6
 800e288:	dcf1      	bgt.n	800e26e <__exponent+0x22>
 800e28a:	3130      	adds	r1, #48	; 0x30
 800e28c:	f1ae 0502 	sub.w	r5, lr, #2
 800e290:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e294:	1c44      	adds	r4, r0, #1
 800e296:	4629      	mov	r1, r5
 800e298:	4561      	cmp	r1, ip
 800e29a:	d30a      	bcc.n	800e2b2 <__exponent+0x66>
 800e29c:	f10d 0209 	add.w	r2, sp, #9
 800e2a0:	eba2 020e 	sub.w	r2, r2, lr
 800e2a4:	4565      	cmp	r5, ip
 800e2a6:	bf88      	it	hi
 800e2a8:	2200      	movhi	r2, #0
 800e2aa:	4413      	add	r3, r2
 800e2ac:	1a18      	subs	r0, r3, r0
 800e2ae:	b003      	add	sp, #12
 800e2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e2ba:	e7ed      	b.n	800e298 <__exponent+0x4c>
 800e2bc:	2330      	movs	r3, #48	; 0x30
 800e2be:	3130      	adds	r1, #48	; 0x30
 800e2c0:	7083      	strb	r3, [r0, #2]
 800e2c2:	70c1      	strb	r1, [r0, #3]
 800e2c4:	1d03      	adds	r3, r0, #4
 800e2c6:	e7f1      	b.n	800e2ac <__exponent+0x60>

0800e2c8 <_printf_float>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	b08b      	sub	sp, #44	; 0x2c
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e2d4:	4616      	mov	r6, r2
 800e2d6:	461f      	mov	r7, r3
 800e2d8:	4605      	mov	r5, r0
 800e2da:	f001 fcbb 	bl	800fc54 <_localeconv_r>
 800e2de:	f8d0 b000 	ldr.w	fp, [r0]
 800e2e2:	4658      	mov	r0, fp
 800e2e4:	f7f1 fffc 	bl	80002e0 <strlen>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	9308      	str	r3, [sp, #32]
 800e2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800e2f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e2f4:	6822      	ldr	r2, [r4, #0]
 800e2f6:	3307      	adds	r3, #7
 800e2f8:	f023 0307 	bic.w	r3, r3, #7
 800e2fc:	f103 0108 	add.w	r1, r3, #8
 800e300:	f8c8 1000 	str.w	r1, [r8]
 800e304:	4682      	mov	sl, r0
 800e306:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e30a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e30e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e570 <_printf_float+0x2a8>
 800e312:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e316:	eeb0 6bc0 	vabs.f64	d6, d0
 800e31a:	eeb4 6b47 	vcmp.f64	d6, d7
 800e31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e322:	dd24      	ble.n	800e36e <_printf_float+0xa6>
 800e324:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e32c:	d502      	bpl.n	800e334 <_printf_float+0x6c>
 800e32e:	232d      	movs	r3, #45	; 0x2d
 800e330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e334:	4b90      	ldr	r3, [pc, #576]	; (800e578 <_printf_float+0x2b0>)
 800e336:	4891      	ldr	r0, [pc, #580]	; (800e57c <_printf_float+0x2b4>)
 800e338:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e33c:	bf94      	ite	ls
 800e33e:	4698      	movls	r8, r3
 800e340:	4680      	movhi	r8, r0
 800e342:	2303      	movs	r3, #3
 800e344:	6123      	str	r3, [r4, #16]
 800e346:	f022 0204 	bic.w	r2, r2, #4
 800e34a:	2300      	movs	r3, #0
 800e34c:	6022      	str	r2, [r4, #0]
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	9700      	str	r7, [sp, #0]
 800e352:	4633      	mov	r3, r6
 800e354:	aa09      	add	r2, sp, #36	; 0x24
 800e356:	4621      	mov	r1, r4
 800e358:	4628      	mov	r0, r5
 800e35a:	f000 f9d3 	bl	800e704 <_printf_common>
 800e35e:	3001      	adds	r0, #1
 800e360:	f040 808a 	bne.w	800e478 <_printf_float+0x1b0>
 800e364:	f04f 30ff 	mov.w	r0, #4294967295
 800e368:	b00b      	add	sp, #44	; 0x2c
 800e36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e36e:	eeb4 0b40 	vcmp.f64	d0, d0
 800e372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e376:	d709      	bvc.n	800e38c <_printf_float+0xc4>
 800e378:	ee10 3a90 	vmov	r3, s1
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	bfbc      	itt	lt
 800e380:	232d      	movlt	r3, #45	; 0x2d
 800e382:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e386:	487e      	ldr	r0, [pc, #504]	; (800e580 <_printf_float+0x2b8>)
 800e388:	4b7e      	ldr	r3, [pc, #504]	; (800e584 <_printf_float+0x2bc>)
 800e38a:	e7d5      	b.n	800e338 <_printf_float+0x70>
 800e38c:	6863      	ldr	r3, [r4, #4]
 800e38e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e392:	9104      	str	r1, [sp, #16]
 800e394:	1c59      	adds	r1, r3, #1
 800e396:	d13c      	bne.n	800e412 <_printf_float+0x14a>
 800e398:	2306      	movs	r3, #6
 800e39a:	6063      	str	r3, [r4, #4]
 800e39c:	2300      	movs	r3, #0
 800e39e:	9303      	str	r3, [sp, #12]
 800e3a0:	ab08      	add	r3, sp, #32
 800e3a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e3a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e3aa:	ab07      	add	r3, sp, #28
 800e3ac:	6861      	ldr	r1, [r4, #4]
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	6022      	str	r2, [r4, #0]
 800e3b2:	f10d 031b 	add.w	r3, sp, #27
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f7ff fef6 	bl	800e1a8 <__cvt>
 800e3bc:	9b04      	ldr	r3, [sp, #16]
 800e3be:	9907      	ldr	r1, [sp, #28]
 800e3c0:	2b47      	cmp	r3, #71	; 0x47
 800e3c2:	4680      	mov	r8, r0
 800e3c4:	d108      	bne.n	800e3d8 <_printf_float+0x110>
 800e3c6:	1cc8      	adds	r0, r1, #3
 800e3c8:	db02      	blt.n	800e3d0 <_printf_float+0x108>
 800e3ca:	6863      	ldr	r3, [r4, #4]
 800e3cc:	4299      	cmp	r1, r3
 800e3ce:	dd41      	ble.n	800e454 <_printf_float+0x18c>
 800e3d0:	f1a9 0902 	sub.w	r9, r9, #2
 800e3d4:	fa5f f989 	uxtb.w	r9, r9
 800e3d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e3dc:	d820      	bhi.n	800e420 <_printf_float+0x158>
 800e3de:	3901      	subs	r1, #1
 800e3e0:	464a      	mov	r2, r9
 800e3e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e3e6:	9107      	str	r1, [sp, #28]
 800e3e8:	f7ff ff30 	bl	800e24c <__exponent>
 800e3ec:	9a08      	ldr	r2, [sp, #32]
 800e3ee:	9004      	str	r0, [sp, #16]
 800e3f0:	1813      	adds	r3, r2, r0
 800e3f2:	2a01      	cmp	r2, #1
 800e3f4:	6123      	str	r3, [r4, #16]
 800e3f6:	dc02      	bgt.n	800e3fe <_printf_float+0x136>
 800e3f8:	6822      	ldr	r2, [r4, #0]
 800e3fa:	07d2      	lsls	r2, r2, #31
 800e3fc:	d501      	bpl.n	800e402 <_printf_float+0x13a>
 800e3fe:	3301      	adds	r3, #1
 800e400:	6123      	str	r3, [r4, #16]
 800e402:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d0a2      	beq.n	800e350 <_printf_float+0x88>
 800e40a:	232d      	movs	r3, #45	; 0x2d
 800e40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e410:	e79e      	b.n	800e350 <_printf_float+0x88>
 800e412:	9904      	ldr	r1, [sp, #16]
 800e414:	2947      	cmp	r1, #71	; 0x47
 800e416:	d1c1      	bne.n	800e39c <_printf_float+0xd4>
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d1bf      	bne.n	800e39c <_printf_float+0xd4>
 800e41c:	2301      	movs	r3, #1
 800e41e:	e7bc      	b.n	800e39a <_printf_float+0xd2>
 800e420:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e424:	d118      	bne.n	800e458 <_printf_float+0x190>
 800e426:	2900      	cmp	r1, #0
 800e428:	6863      	ldr	r3, [r4, #4]
 800e42a:	dd0b      	ble.n	800e444 <_printf_float+0x17c>
 800e42c:	6121      	str	r1, [r4, #16]
 800e42e:	b913      	cbnz	r3, 800e436 <_printf_float+0x16e>
 800e430:	6822      	ldr	r2, [r4, #0]
 800e432:	07d0      	lsls	r0, r2, #31
 800e434:	d502      	bpl.n	800e43c <_printf_float+0x174>
 800e436:	3301      	adds	r3, #1
 800e438:	440b      	add	r3, r1
 800e43a:	6123      	str	r3, [r4, #16]
 800e43c:	2300      	movs	r3, #0
 800e43e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e440:	9304      	str	r3, [sp, #16]
 800e442:	e7de      	b.n	800e402 <_printf_float+0x13a>
 800e444:	b913      	cbnz	r3, 800e44c <_printf_float+0x184>
 800e446:	6822      	ldr	r2, [r4, #0]
 800e448:	07d2      	lsls	r2, r2, #31
 800e44a:	d501      	bpl.n	800e450 <_printf_float+0x188>
 800e44c:	3302      	adds	r3, #2
 800e44e:	e7f4      	b.n	800e43a <_printf_float+0x172>
 800e450:	2301      	movs	r3, #1
 800e452:	e7f2      	b.n	800e43a <_printf_float+0x172>
 800e454:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e458:	9b08      	ldr	r3, [sp, #32]
 800e45a:	4299      	cmp	r1, r3
 800e45c:	db05      	blt.n	800e46a <_printf_float+0x1a2>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	6121      	str	r1, [r4, #16]
 800e462:	07d8      	lsls	r0, r3, #31
 800e464:	d5ea      	bpl.n	800e43c <_printf_float+0x174>
 800e466:	1c4b      	adds	r3, r1, #1
 800e468:	e7e7      	b.n	800e43a <_printf_float+0x172>
 800e46a:	2900      	cmp	r1, #0
 800e46c:	bfd4      	ite	le
 800e46e:	f1c1 0202 	rsble	r2, r1, #2
 800e472:	2201      	movgt	r2, #1
 800e474:	4413      	add	r3, r2
 800e476:	e7e0      	b.n	800e43a <_printf_float+0x172>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	055a      	lsls	r2, r3, #21
 800e47c:	d407      	bmi.n	800e48e <_printf_float+0x1c6>
 800e47e:	6923      	ldr	r3, [r4, #16]
 800e480:	4642      	mov	r2, r8
 800e482:	4631      	mov	r1, r6
 800e484:	4628      	mov	r0, r5
 800e486:	47b8      	blx	r7
 800e488:	3001      	adds	r0, #1
 800e48a:	d12a      	bne.n	800e4e2 <_printf_float+0x21a>
 800e48c:	e76a      	b.n	800e364 <_printf_float+0x9c>
 800e48e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e492:	f240 80e2 	bls.w	800e65a <_printf_float+0x392>
 800e496:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e49a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a2:	d133      	bne.n	800e50c <_printf_float+0x244>
 800e4a4:	4a38      	ldr	r2, [pc, #224]	; (800e588 <_printf_float+0x2c0>)
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	4631      	mov	r1, r6
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	47b8      	blx	r7
 800e4ae:	3001      	adds	r0, #1
 800e4b0:	f43f af58 	beq.w	800e364 <_printf_float+0x9c>
 800e4b4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	db02      	blt.n	800e4c2 <_printf_float+0x1fa>
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	07d8      	lsls	r0, r3, #31
 800e4c0:	d50f      	bpl.n	800e4e2 <_printf_float+0x21a>
 800e4c2:	4653      	mov	r3, sl
 800e4c4:	465a      	mov	r2, fp
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	47b8      	blx	r7
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	f43f af49 	beq.w	800e364 <_printf_float+0x9c>
 800e4d2:	f04f 0800 	mov.w	r8, #0
 800e4d6:	f104 091a 	add.w	r9, r4, #26
 800e4da:	9b08      	ldr	r3, [sp, #32]
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	4543      	cmp	r3, r8
 800e4e0:	dc09      	bgt.n	800e4f6 <_printf_float+0x22e>
 800e4e2:	6823      	ldr	r3, [r4, #0]
 800e4e4:	079b      	lsls	r3, r3, #30
 800e4e6:	f100 8108 	bmi.w	800e6fa <_printf_float+0x432>
 800e4ea:	68e0      	ldr	r0, [r4, #12]
 800e4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ee:	4298      	cmp	r0, r3
 800e4f0:	bfb8      	it	lt
 800e4f2:	4618      	movlt	r0, r3
 800e4f4:	e738      	b.n	800e368 <_printf_float+0xa0>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	464a      	mov	r2, r9
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	47b8      	blx	r7
 800e500:	3001      	adds	r0, #1
 800e502:	f43f af2f 	beq.w	800e364 <_printf_float+0x9c>
 800e506:	f108 0801 	add.w	r8, r8, #1
 800e50a:	e7e6      	b.n	800e4da <_printf_float+0x212>
 800e50c:	9b07      	ldr	r3, [sp, #28]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	dc3c      	bgt.n	800e58c <_printf_float+0x2c4>
 800e512:	4a1d      	ldr	r2, [pc, #116]	; (800e588 <_printf_float+0x2c0>)
 800e514:	2301      	movs	r3, #1
 800e516:	4631      	mov	r1, r6
 800e518:	4628      	mov	r0, r5
 800e51a:	47b8      	blx	r7
 800e51c:	3001      	adds	r0, #1
 800e51e:	f43f af21 	beq.w	800e364 <_printf_float+0x9c>
 800e522:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e526:	4313      	orrs	r3, r2
 800e528:	d102      	bne.n	800e530 <_printf_float+0x268>
 800e52a:	6823      	ldr	r3, [r4, #0]
 800e52c:	07d9      	lsls	r1, r3, #31
 800e52e:	d5d8      	bpl.n	800e4e2 <_printf_float+0x21a>
 800e530:	4653      	mov	r3, sl
 800e532:	465a      	mov	r2, fp
 800e534:	4631      	mov	r1, r6
 800e536:	4628      	mov	r0, r5
 800e538:	47b8      	blx	r7
 800e53a:	3001      	adds	r0, #1
 800e53c:	f43f af12 	beq.w	800e364 <_printf_float+0x9c>
 800e540:	f04f 0900 	mov.w	r9, #0
 800e544:	f104 0a1a 	add.w	sl, r4, #26
 800e548:	9b07      	ldr	r3, [sp, #28]
 800e54a:	425b      	negs	r3, r3
 800e54c:	454b      	cmp	r3, r9
 800e54e:	dc01      	bgt.n	800e554 <_printf_float+0x28c>
 800e550:	9b08      	ldr	r3, [sp, #32]
 800e552:	e795      	b.n	800e480 <_printf_float+0x1b8>
 800e554:	2301      	movs	r3, #1
 800e556:	4652      	mov	r2, sl
 800e558:	4631      	mov	r1, r6
 800e55a:	4628      	mov	r0, r5
 800e55c:	47b8      	blx	r7
 800e55e:	3001      	adds	r0, #1
 800e560:	f43f af00 	beq.w	800e364 <_printf_float+0x9c>
 800e564:	f109 0901 	add.w	r9, r9, #1
 800e568:	e7ee      	b.n	800e548 <_printf_float+0x280>
 800e56a:	bf00      	nop
 800e56c:	f3af 8000 	nop.w
 800e570:	ffffffff 	.word	0xffffffff
 800e574:	7fefffff 	.word	0x7fefffff
 800e578:	08010bdc 	.word	0x08010bdc
 800e57c:	08010be0 	.word	0x08010be0
 800e580:	08010be8 	.word	0x08010be8
 800e584:	08010be4 	.word	0x08010be4
 800e588:	08010bec 	.word	0x08010bec
 800e58c:	9a08      	ldr	r2, [sp, #32]
 800e58e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e590:	429a      	cmp	r2, r3
 800e592:	bfa8      	it	ge
 800e594:	461a      	movge	r2, r3
 800e596:	2a00      	cmp	r2, #0
 800e598:	4691      	mov	r9, r2
 800e59a:	dc38      	bgt.n	800e60e <_printf_float+0x346>
 800e59c:	2300      	movs	r3, #0
 800e59e:	9305      	str	r3, [sp, #20]
 800e5a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5a4:	f104 021a 	add.w	r2, r4, #26
 800e5a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e5aa:	9905      	ldr	r1, [sp, #20]
 800e5ac:	9304      	str	r3, [sp, #16]
 800e5ae:	eba3 0309 	sub.w	r3, r3, r9
 800e5b2:	428b      	cmp	r3, r1
 800e5b4:	dc33      	bgt.n	800e61e <_printf_float+0x356>
 800e5b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	db3c      	blt.n	800e638 <_printf_float+0x370>
 800e5be:	6823      	ldr	r3, [r4, #0]
 800e5c0:	07da      	lsls	r2, r3, #31
 800e5c2:	d439      	bmi.n	800e638 <_printf_float+0x370>
 800e5c4:	9a08      	ldr	r2, [sp, #32]
 800e5c6:	9b04      	ldr	r3, [sp, #16]
 800e5c8:	9907      	ldr	r1, [sp, #28]
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	eba2 0901 	sub.w	r9, r2, r1
 800e5d0:	4599      	cmp	r9, r3
 800e5d2:	bfa8      	it	ge
 800e5d4:	4699      	movge	r9, r3
 800e5d6:	f1b9 0f00 	cmp.w	r9, #0
 800e5da:	dc35      	bgt.n	800e648 <_printf_float+0x380>
 800e5dc:	f04f 0800 	mov.w	r8, #0
 800e5e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5e4:	f104 0a1a 	add.w	sl, r4, #26
 800e5e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e5ec:	1a9b      	subs	r3, r3, r2
 800e5ee:	eba3 0309 	sub.w	r3, r3, r9
 800e5f2:	4543      	cmp	r3, r8
 800e5f4:	f77f af75 	ble.w	800e4e2 <_printf_float+0x21a>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	4652      	mov	r2, sl
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4628      	mov	r0, r5
 800e600:	47b8      	blx	r7
 800e602:	3001      	adds	r0, #1
 800e604:	f43f aeae 	beq.w	800e364 <_printf_float+0x9c>
 800e608:	f108 0801 	add.w	r8, r8, #1
 800e60c:	e7ec      	b.n	800e5e8 <_printf_float+0x320>
 800e60e:	4613      	mov	r3, r2
 800e610:	4631      	mov	r1, r6
 800e612:	4642      	mov	r2, r8
 800e614:	4628      	mov	r0, r5
 800e616:	47b8      	blx	r7
 800e618:	3001      	adds	r0, #1
 800e61a:	d1bf      	bne.n	800e59c <_printf_float+0x2d4>
 800e61c:	e6a2      	b.n	800e364 <_printf_float+0x9c>
 800e61e:	2301      	movs	r3, #1
 800e620:	4631      	mov	r1, r6
 800e622:	4628      	mov	r0, r5
 800e624:	9204      	str	r2, [sp, #16]
 800e626:	47b8      	blx	r7
 800e628:	3001      	adds	r0, #1
 800e62a:	f43f ae9b 	beq.w	800e364 <_printf_float+0x9c>
 800e62e:	9b05      	ldr	r3, [sp, #20]
 800e630:	9a04      	ldr	r2, [sp, #16]
 800e632:	3301      	adds	r3, #1
 800e634:	9305      	str	r3, [sp, #20]
 800e636:	e7b7      	b.n	800e5a8 <_printf_float+0x2e0>
 800e638:	4653      	mov	r3, sl
 800e63a:	465a      	mov	r2, fp
 800e63c:	4631      	mov	r1, r6
 800e63e:	4628      	mov	r0, r5
 800e640:	47b8      	blx	r7
 800e642:	3001      	adds	r0, #1
 800e644:	d1be      	bne.n	800e5c4 <_printf_float+0x2fc>
 800e646:	e68d      	b.n	800e364 <_printf_float+0x9c>
 800e648:	9a04      	ldr	r2, [sp, #16]
 800e64a:	464b      	mov	r3, r9
 800e64c:	4442      	add	r2, r8
 800e64e:	4631      	mov	r1, r6
 800e650:	4628      	mov	r0, r5
 800e652:	47b8      	blx	r7
 800e654:	3001      	adds	r0, #1
 800e656:	d1c1      	bne.n	800e5dc <_printf_float+0x314>
 800e658:	e684      	b.n	800e364 <_printf_float+0x9c>
 800e65a:	9a08      	ldr	r2, [sp, #32]
 800e65c:	2a01      	cmp	r2, #1
 800e65e:	dc01      	bgt.n	800e664 <_printf_float+0x39c>
 800e660:	07db      	lsls	r3, r3, #31
 800e662:	d537      	bpl.n	800e6d4 <_printf_float+0x40c>
 800e664:	2301      	movs	r3, #1
 800e666:	4642      	mov	r2, r8
 800e668:	4631      	mov	r1, r6
 800e66a:	4628      	mov	r0, r5
 800e66c:	47b8      	blx	r7
 800e66e:	3001      	adds	r0, #1
 800e670:	f43f ae78 	beq.w	800e364 <_printf_float+0x9c>
 800e674:	4653      	mov	r3, sl
 800e676:	465a      	mov	r2, fp
 800e678:	4631      	mov	r1, r6
 800e67a:	4628      	mov	r0, r5
 800e67c:	47b8      	blx	r7
 800e67e:	3001      	adds	r0, #1
 800e680:	f43f ae70 	beq.w	800e364 <_printf_float+0x9c>
 800e684:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e688:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e690:	d01b      	beq.n	800e6ca <_printf_float+0x402>
 800e692:	9b08      	ldr	r3, [sp, #32]
 800e694:	f108 0201 	add.w	r2, r8, #1
 800e698:	3b01      	subs	r3, #1
 800e69a:	4631      	mov	r1, r6
 800e69c:	4628      	mov	r0, r5
 800e69e:	47b8      	blx	r7
 800e6a0:	3001      	adds	r0, #1
 800e6a2:	d10e      	bne.n	800e6c2 <_printf_float+0x3fa>
 800e6a4:	e65e      	b.n	800e364 <_printf_float+0x9c>
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	464a      	mov	r2, r9
 800e6aa:	4631      	mov	r1, r6
 800e6ac:	4628      	mov	r0, r5
 800e6ae:	47b8      	blx	r7
 800e6b0:	3001      	adds	r0, #1
 800e6b2:	f43f ae57 	beq.w	800e364 <_printf_float+0x9c>
 800e6b6:	f108 0801 	add.w	r8, r8, #1
 800e6ba:	9b08      	ldr	r3, [sp, #32]
 800e6bc:	3b01      	subs	r3, #1
 800e6be:	4543      	cmp	r3, r8
 800e6c0:	dcf1      	bgt.n	800e6a6 <_printf_float+0x3de>
 800e6c2:	9b04      	ldr	r3, [sp, #16]
 800e6c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e6c8:	e6db      	b.n	800e482 <_printf_float+0x1ba>
 800e6ca:	f04f 0800 	mov.w	r8, #0
 800e6ce:	f104 091a 	add.w	r9, r4, #26
 800e6d2:	e7f2      	b.n	800e6ba <_printf_float+0x3f2>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	4642      	mov	r2, r8
 800e6d8:	e7df      	b.n	800e69a <_printf_float+0x3d2>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	464a      	mov	r2, r9
 800e6de:	4631      	mov	r1, r6
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	47b8      	blx	r7
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	f43f ae3d 	beq.w	800e364 <_printf_float+0x9c>
 800e6ea:	f108 0801 	add.w	r8, r8, #1
 800e6ee:	68e3      	ldr	r3, [r4, #12]
 800e6f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6f2:	1a5b      	subs	r3, r3, r1
 800e6f4:	4543      	cmp	r3, r8
 800e6f6:	dcf0      	bgt.n	800e6da <_printf_float+0x412>
 800e6f8:	e6f7      	b.n	800e4ea <_printf_float+0x222>
 800e6fa:	f04f 0800 	mov.w	r8, #0
 800e6fe:	f104 0919 	add.w	r9, r4, #25
 800e702:	e7f4      	b.n	800e6ee <_printf_float+0x426>

0800e704 <_printf_common>:
 800e704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e708:	4616      	mov	r6, r2
 800e70a:	4699      	mov	r9, r3
 800e70c:	688a      	ldr	r2, [r1, #8]
 800e70e:	690b      	ldr	r3, [r1, #16]
 800e710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e714:	4293      	cmp	r3, r2
 800e716:	bfb8      	it	lt
 800e718:	4613      	movlt	r3, r2
 800e71a:	6033      	str	r3, [r6, #0]
 800e71c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e720:	4607      	mov	r7, r0
 800e722:	460c      	mov	r4, r1
 800e724:	b10a      	cbz	r2, 800e72a <_printf_common+0x26>
 800e726:	3301      	adds	r3, #1
 800e728:	6033      	str	r3, [r6, #0]
 800e72a:	6823      	ldr	r3, [r4, #0]
 800e72c:	0699      	lsls	r1, r3, #26
 800e72e:	bf42      	ittt	mi
 800e730:	6833      	ldrmi	r3, [r6, #0]
 800e732:	3302      	addmi	r3, #2
 800e734:	6033      	strmi	r3, [r6, #0]
 800e736:	6825      	ldr	r5, [r4, #0]
 800e738:	f015 0506 	ands.w	r5, r5, #6
 800e73c:	d106      	bne.n	800e74c <_printf_common+0x48>
 800e73e:	f104 0a19 	add.w	sl, r4, #25
 800e742:	68e3      	ldr	r3, [r4, #12]
 800e744:	6832      	ldr	r2, [r6, #0]
 800e746:	1a9b      	subs	r3, r3, r2
 800e748:	42ab      	cmp	r3, r5
 800e74a:	dc26      	bgt.n	800e79a <_printf_common+0x96>
 800e74c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e750:	1e13      	subs	r3, r2, #0
 800e752:	6822      	ldr	r2, [r4, #0]
 800e754:	bf18      	it	ne
 800e756:	2301      	movne	r3, #1
 800e758:	0692      	lsls	r2, r2, #26
 800e75a:	d42b      	bmi.n	800e7b4 <_printf_common+0xb0>
 800e75c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e760:	4649      	mov	r1, r9
 800e762:	4638      	mov	r0, r7
 800e764:	47c0      	blx	r8
 800e766:	3001      	adds	r0, #1
 800e768:	d01e      	beq.n	800e7a8 <_printf_common+0xa4>
 800e76a:	6823      	ldr	r3, [r4, #0]
 800e76c:	68e5      	ldr	r5, [r4, #12]
 800e76e:	6832      	ldr	r2, [r6, #0]
 800e770:	f003 0306 	and.w	r3, r3, #6
 800e774:	2b04      	cmp	r3, #4
 800e776:	bf08      	it	eq
 800e778:	1aad      	subeq	r5, r5, r2
 800e77a:	68a3      	ldr	r3, [r4, #8]
 800e77c:	6922      	ldr	r2, [r4, #16]
 800e77e:	bf0c      	ite	eq
 800e780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e784:	2500      	movne	r5, #0
 800e786:	4293      	cmp	r3, r2
 800e788:	bfc4      	itt	gt
 800e78a:	1a9b      	subgt	r3, r3, r2
 800e78c:	18ed      	addgt	r5, r5, r3
 800e78e:	2600      	movs	r6, #0
 800e790:	341a      	adds	r4, #26
 800e792:	42b5      	cmp	r5, r6
 800e794:	d11a      	bne.n	800e7cc <_printf_common+0xc8>
 800e796:	2000      	movs	r0, #0
 800e798:	e008      	b.n	800e7ac <_printf_common+0xa8>
 800e79a:	2301      	movs	r3, #1
 800e79c:	4652      	mov	r2, sl
 800e79e:	4649      	mov	r1, r9
 800e7a0:	4638      	mov	r0, r7
 800e7a2:	47c0      	blx	r8
 800e7a4:	3001      	adds	r0, #1
 800e7a6:	d103      	bne.n	800e7b0 <_printf_common+0xac>
 800e7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7b0:	3501      	adds	r5, #1
 800e7b2:	e7c6      	b.n	800e742 <_printf_common+0x3e>
 800e7b4:	18e1      	adds	r1, r4, r3
 800e7b6:	1c5a      	adds	r2, r3, #1
 800e7b8:	2030      	movs	r0, #48	; 0x30
 800e7ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7be:	4422      	add	r2, r4
 800e7c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e7c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e7c8:	3302      	adds	r3, #2
 800e7ca:	e7c7      	b.n	800e75c <_printf_common+0x58>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	4622      	mov	r2, r4
 800e7d0:	4649      	mov	r1, r9
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	47c0      	blx	r8
 800e7d6:	3001      	adds	r0, #1
 800e7d8:	d0e6      	beq.n	800e7a8 <_printf_common+0xa4>
 800e7da:	3601      	adds	r6, #1
 800e7dc:	e7d9      	b.n	800e792 <_printf_common+0x8e>
	...

0800e7e0 <_printf_i>:
 800e7e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e4:	460c      	mov	r4, r1
 800e7e6:	4691      	mov	r9, r2
 800e7e8:	7e27      	ldrb	r7, [r4, #24]
 800e7ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e7ec:	2f78      	cmp	r7, #120	; 0x78
 800e7ee:	4680      	mov	r8, r0
 800e7f0:	469a      	mov	sl, r3
 800e7f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7f6:	d807      	bhi.n	800e808 <_printf_i+0x28>
 800e7f8:	2f62      	cmp	r7, #98	; 0x62
 800e7fa:	d80a      	bhi.n	800e812 <_printf_i+0x32>
 800e7fc:	2f00      	cmp	r7, #0
 800e7fe:	f000 80d8 	beq.w	800e9b2 <_printf_i+0x1d2>
 800e802:	2f58      	cmp	r7, #88	; 0x58
 800e804:	f000 80a3 	beq.w	800e94e <_printf_i+0x16e>
 800e808:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e80c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e810:	e03a      	b.n	800e888 <_printf_i+0xa8>
 800e812:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e816:	2b15      	cmp	r3, #21
 800e818:	d8f6      	bhi.n	800e808 <_printf_i+0x28>
 800e81a:	a001      	add	r0, pc, #4	; (adr r0, 800e820 <_printf_i+0x40>)
 800e81c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e820:	0800e879 	.word	0x0800e879
 800e824:	0800e88d 	.word	0x0800e88d
 800e828:	0800e809 	.word	0x0800e809
 800e82c:	0800e809 	.word	0x0800e809
 800e830:	0800e809 	.word	0x0800e809
 800e834:	0800e809 	.word	0x0800e809
 800e838:	0800e88d 	.word	0x0800e88d
 800e83c:	0800e809 	.word	0x0800e809
 800e840:	0800e809 	.word	0x0800e809
 800e844:	0800e809 	.word	0x0800e809
 800e848:	0800e809 	.word	0x0800e809
 800e84c:	0800e999 	.word	0x0800e999
 800e850:	0800e8bd 	.word	0x0800e8bd
 800e854:	0800e97b 	.word	0x0800e97b
 800e858:	0800e809 	.word	0x0800e809
 800e85c:	0800e809 	.word	0x0800e809
 800e860:	0800e9bb 	.word	0x0800e9bb
 800e864:	0800e809 	.word	0x0800e809
 800e868:	0800e8bd 	.word	0x0800e8bd
 800e86c:	0800e809 	.word	0x0800e809
 800e870:	0800e809 	.word	0x0800e809
 800e874:	0800e983 	.word	0x0800e983
 800e878:	680b      	ldr	r3, [r1, #0]
 800e87a:	1d1a      	adds	r2, r3, #4
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	600a      	str	r2, [r1, #0]
 800e880:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e884:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e888:	2301      	movs	r3, #1
 800e88a:	e0a3      	b.n	800e9d4 <_printf_i+0x1f4>
 800e88c:	6825      	ldr	r5, [r4, #0]
 800e88e:	6808      	ldr	r0, [r1, #0]
 800e890:	062e      	lsls	r6, r5, #24
 800e892:	f100 0304 	add.w	r3, r0, #4
 800e896:	d50a      	bpl.n	800e8ae <_printf_i+0xce>
 800e898:	6805      	ldr	r5, [r0, #0]
 800e89a:	600b      	str	r3, [r1, #0]
 800e89c:	2d00      	cmp	r5, #0
 800e89e:	da03      	bge.n	800e8a8 <_printf_i+0xc8>
 800e8a0:	232d      	movs	r3, #45	; 0x2d
 800e8a2:	426d      	negs	r5, r5
 800e8a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8a8:	485e      	ldr	r0, [pc, #376]	; (800ea24 <_printf_i+0x244>)
 800e8aa:	230a      	movs	r3, #10
 800e8ac:	e019      	b.n	800e8e2 <_printf_i+0x102>
 800e8ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e8b2:	6805      	ldr	r5, [r0, #0]
 800e8b4:	600b      	str	r3, [r1, #0]
 800e8b6:	bf18      	it	ne
 800e8b8:	b22d      	sxthne	r5, r5
 800e8ba:	e7ef      	b.n	800e89c <_printf_i+0xbc>
 800e8bc:	680b      	ldr	r3, [r1, #0]
 800e8be:	6825      	ldr	r5, [r4, #0]
 800e8c0:	1d18      	adds	r0, r3, #4
 800e8c2:	6008      	str	r0, [r1, #0]
 800e8c4:	0628      	lsls	r0, r5, #24
 800e8c6:	d501      	bpl.n	800e8cc <_printf_i+0xec>
 800e8c8:	681d      	ldr	r5, [r3, #0]
 800e8ca:	e002      	b.n	800e8d2 <_printf_i+0xf2>
 800e8cc:	0669      	lsls	r1, r5, #25
 800e8ce:	d5fb      	bpl.n	800e8c8 <_printf_i+0xe8>
 800e8d0:	881d      	ldrh	r5, [r3, #0]
 800e8d2:	4854      	ldr	r0, [pc, #336]	; (800ea24 <_printf_i+0x244>)
 800e8d4:	2f6f      	cmp	r7, #111	; 0x6f
 800e8d6:	bf0c      	ite	eq
 800e8d8:	2308      	moveq	r3, #8
 800e8da:	230a      	movne	r3, #10
 800e8dc:	2100      	movs	r1, #0
 800e8de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8e2:	6866      	ldr	r6, [r4, #4]
 800e8e4:	60a6      	str	r6, [r4, #8]
 800e8e6:	2e00      	cmp	r6, #0
 800e8e8:	bfa2      	ittt	ge
 800e8ea:	6821      	ldrge	r1, [r4, #0]
 800e8ec:	f021 0104 	bicge.w	r1, r1, #4
 800e8f0:	6021      	strge	r1, [r4, #0]
 800e8f2:	b90d      	cbnz	r5, 800e8f8 <_printf_i+0x118>
 800e8f4:	2e00      	cmp	r6, #0
 800e8f6:	d04d      	beq.n	800e994 <_printf_i+0x1b4>
 800e8f8:	4616      	mov	r6, r2
 800e8fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800e8fe:	fb03 5711 	mls	r7, r3, r1, r5
 800e902:	5dc7      	ldrb	r7, [r0, r7]
 800e904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e908:	462f      	mov	r7, r5
 800e90a:	42bb      	cmp	r3, r7
 800e90c:	460d      	mov	r5, r1
 800e90e:	d9f4      	bls.n	800e8fa <_printf_i+0x11a>
 800e910:	2b08      	cmp	r3, #8
 800e912:	d10b      	bne.n	800e92c <_printf_i+0x14c>
 800e914:	6823      	ldr	r3, [r4, #0]
 800e916:	07df      	lsls	r7, r3, #31
 800e918:	d508      	bpl.n	800e92c <_printf_i+0x14c>
 800e91a:	6923      	ldr	r3, [r4, #16]
 800e91c:	6861      	ldr	r1, [r4, #4]
 800e91e:	4299      	cmp	r1, r3
 800e920:	bfde      	ittt	le
 800e922:	2330      	movle	r3, #48	; 0x30
 800e924:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e928:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e92c:	1b92      	subs	r2, r2, r6
 800e92e:	6122      	str	r2, [r4, #16]
 800e930:	f8cd a000 	str.w	sl, [sp]
 800e934:	464b      	mov	r3, r9
 800e936:	aa03      	add	r2, sp, #12
 800e938:	4621      	mov	r1, r4
 800e93a:	4640      	mov	r0, r8
 800e93c:	f7ff fee2 	bl	800e704 <_printf_common>
 800e940:	3001      	adds	r0, #1
 800e942:	d14c      	bne.n	800e9de <_printf_i+0x1fe>
 800e944:	f04f 30ff 	mov.w	r0, #4294967295
 800e948:	b004      	add	sp, #16
 800e94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e94e:	4835      	ldr	r0, [pc, #212]	; (800ea24 <_printf_i+0x244>)
 800e950:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e954:	6823      	ldr	r3, [r4, #0]
 800e956:	680e      	ldr	r6, [r1, #0]
 800e958:	061f      	lsls	r7, r3, #24
 800e95a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e95e:	600e      	str	r6, [r1, #0]
 800e960:	d514      	bpl.n	800e98c <_printf_i+0x1ac>
 800e962:	07d9      	lsls	r1, r3, #31
 800e964:	bf44      	itt	mi
 800e966:	f043 0320 	orrmi.w	r3, r3, #32
 800e96a:	6023      	strmi	r3, [r4, #0]
 800e96c:	b91d      	cbnz	r5, 800e976 <_printf_i+0x196>
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	f023 0320 	bic.w	r3, r3, #32
 800e974:	6023      	str	r3, [r4, #0]
 800e976:	2310      	movs	r3, #16
 800e978:	e7b0      	b.n	800e8dc <_printf_i+0xfc>
 800e97a:	6823      	ldr	r3, [r4, #0]
 800e97c:	f043 0320 	orr.w	r3, r3, #32
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	2378      	movs	r3, #120	; 0x78
 800e984:	4828      	ldr	r0, [pc, #160]	; (800ea28 <_printf_i+0x248>)
 800e986:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e98a:	e7e3      	b.n	800e954 <_printf_i+0x174>
 800e98c:	065e      	lsls	r6, r3, #25
 800e98e:	bf48      	it	mi
 800e990:	b2ad      	uxthmi	r5, r5
 800e992:	e7e6      	b.n	800e962 <_printf_i+0x182>
 800e994:	4616      	mov	r6, r2
 800e996:	e7bb      	b.n	800e910 <_printf_i+0x130>
 800e998:	680b      	ldr	r3, [r1, #0]
 800e99a:	6826      	ldr	r6, [r4, #0]
 800e99c:	6960      	ldr	r0, [r4, #20]
 800e99e:	1d1d      	adds	r5, r3, #4
 800e9a0:	600d      	str	r5, [r1, #0]
 800e9a2:	0635      	lsls	r5, r6, #24
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	d501      	bpl.n	800e9ac <_printf_i+0x1cc>
 800e9a8:	6018      	str	r0, [r3, #0]
 800e9aa:	e002      	b.n	800e9b2 <_printf_i+0x1d2>
 800e9ac:	0671      	lsls	r1, r6, #25
 800e9ae:	d5fb      	bpl.n	800e9a8 <_printf_i+0x1c8>
 800e9b0:	8018      	strh	r0, [r3, #0]
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	6123      	str	r3, [r4, #16]
 800e9b6:	4616      	mov	r6, r2
 800e9b8:	e7ba      	b.n	800e930 <_printf_i+0x150>
 800e9ba:	680b      	ldr	r3, [r1, #0]
 800e9bc:	1d1a      	adds	r2, r3, #4
 800e9be:	600a      	str	r2, [r1, #0]
 800e9c0:	681e      	ldr	r6, [r3, #0]
 800e9c2:	6862      	ldr	r2, [r4, #4]
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f7f1 fc92 	bl	80002f0 <memchr>
 800e9cc:	b108      	cbz	r0, 800e9d2 <_printf_i+0x1f2>
 800e9ce:	1b80      	subs	r0, r0, r6
 800e9d0:	6060      	str	r0, [r4, #4]
 800e9d2:	6863      	ldr	r3, [r4, #4]
 800e9d4:	6123      	str	r3, [r4, #16]
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9dc:	e7a8      	b.n	800e930 <_printf_i+0x150>
 800e9de:	6923      	ldr	r3, [r4, #16]
 800e9e0:	4632      	mov	r2, r6
 800e9e2:	4649      	mov	r1, r9
 800e9e4:	4640      	mov	r0, r8
 800e9e6:	47d0      	blx	sl
 800e9e8:	3001      	adds	r0, #1
 800e9ea:	d0ab      	beq.n	800e944 <_printf_i+0x164>
 800e9ec:	6823      	ldr	r3, [r4, #0]
 800e9ee:	079b      	lsls	r3, r3, #30
 800e9f0:	d413      	bmi.n	800ea1a <_printf_i+0x23a>
 800e9f2:	68e0      	ldr	r0, [r4, #12]
 800e9f4:	9b03      	ldr	r3, [sp, #12]
 800e9f6:	4298      	cmp	r0, r3
 800e9f8:	bfb8      	it	lt
 800e9fa:	4618      	movlt	r0, r3
 800e9fc:	e7a4      	b.n	800e948 <_printf_i+0x168>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	4632      	mov	r2, r6
 800ea02:	4649      	mov	r1, r9
 800ea04:	4640      	mov	r0, r8
 800ea06:	47d0      	blx	sl
 800ea08:	3001      	adds	r0, #1
 800ea0a:	d09b      	beq.n	800e944 <_printf_i+0x164>
 800ea0c:	3501      	adds	r5, #1
 800ea0e:	68e3      	ldr	r3, [r4, #12]
 800ea10:	9903      	ldr	r1, [sp, #12]
 800ea12:	1a5b      	subs	r3, r3, r1
 800ea14:	42ab      	cmp	r3, r5
 800ea16:	dcf2      	bgt.n	800e9fe <_printf_i+0x21e>
 800ea18:	e7eb      	b.n	800e9f2 <_printf_i+0x212>
 800ea1a:	2500      	movs	r5, #0
 800ea1c:	f104 0619 	add.w	r6, r4, #25
 800ea20:	e7f5      	b.n	800ea0e <_printf_i+0x22e>
 800ea22:	bf00      	nop
 800ea24:	08010bee 	.word	0x08010bee
 800ea28:	08010bff 	.word	0x08010bff

0800ea2c <iprintf>:
 800ea2c:	b40f      	push	{r0, r1, r2, r3}
 800ea2e:	4b0a      	ldr	r3, [pc, #40]	; (800ea58 <iprintf+0x2c>)
 800ea30:	b513      	push	{r0, r1, r4, lr}
 800ea32:	681c      	ldr	r4, [r3, #0]
 800ea34:	b124      	cbz	r4, 800ea40 <iprintf+0x14>
 800ea36:	69a3      	ldr	r3, [r4, #24]
 800ea38:	b913      	cbnz	r3, 800ea40 <iprintf+0x14>
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f001 f86c 	bl	800fb18 <__sinit>
 800ea40:	ab05      	add	r3, sp, #20
 800ea42:	9a04      	ldr	r2, [sp, #16]
 800ea44:	68a1      	ldr	r1, [r4, #8]
 800ea46:	9301      	str	r3, [sp, #4]
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f001 fde7 	bl	801061c <_vfiprintf_r>
 800ea4e:	b002      	add	sp, #8
 800ea50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea54:	b004      	add	sp, #16
 800ea56:	4770      	bx	lr
 800ea58:	2400001c 	.word	0x2400001c

0800ea5c <_puts_r>:
 800ea5c:	b570      	push	{r4, r5, r6, lr}
 800ea5e:	460e      	mov	r6, r1
 800ea60:	4605      	mov	r5, r0
 800ea62:	b118      	cbz	r0, 800ea6c <_puts_r+0x10>
 800ea64:	6983      	ldr	r3, [r0, #24]
 800ea66:	b90b      	cbnz	r3, 800ea6c <_puts_r+0x10>
 800ea68:	f001 f856 	bl	800fb18 <__sinit>
 800ea6c:	69ab      	ldr	r3, [r5, #24]
 800ea6e:	68ac      	ldr	r4, [r5, #8]
 800ea70:	b913      	cbnz	r3, 800ea78 <_puts_r+0x1c>
 800ea72:	4628      	mov	r0, r5
 800ea74:	f001 f850 	bl	800fb18 <__sinit>
 800ea78:	4b2c      	ldr	r3, [pc, #176]	; (800eb2c <_puts_r+0xd0>)
 800ea7a:	429c      	cmp	r4, r3
 800ea7c:	d120      	bne.n	800eac0 <_puts_r+0x64>
 800ea7e:	686c      	ldr	r4, [r5, #4]
 800ea80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea82:	07db      	lsls	r3, r3, #31
 800ea84:	d405      	bmi.n	800ea92 <_puts_r+0x36>
 800ea86:	89a3      	ldrh	r3, [r4, #12]
 800ea88:	0598      	lsls	r0, r3, #22
 800ea8a:	d402      	bmi.n	800ea92 <_puts_r+0x36>
 800ea8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea8e:	f001 f8e6 	bl	800fc5e <__retarget_lock_acquire_recursive>
 800ea92:	89a3      	ldrh	r3, [r4, #12]
 800ea94:	0719      	lsls	r1, r3, #28
 800ea96:	d51d      	bpl.n	800ead4 <_puts_r+0x78>
 800ea98:	6923      	ldr	r3, [r4, #16]
 800ea9a:	b1db      	cbz	r3, 800ead4 <_puts_r+0x78>
 800ea9c:	3e01      	subs	r6, #1
 800ea9e:	68a3      	ldr	r3, [r4, #8]
 800eaa0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	60a3      	str	r3, [r4, #8]
 800eaa8:	bb39      	cbnz	r1, 800eafa <_puts_r+0x9e>
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	da38      	bge.n	800eb20 <_puts_r+0xc4>
 800eaae:	4622      	mov	r2, r4
 800eab0:	210a      	movs	r1, #10
 800eab2:	4628      	mov	r0, r5
 800eab4:	f000 f848 	bl	800eb48 <__swbuf_r>
 800eab8:	3001      	adds	r0, #1
 800eaba:	d011      	beq.n	800eae0 <_puts_r+0x84>
 800eabc:	250a      	movs	r5, #10
 800eabe:	e011      	b.n	800eae4 <_puts_r+0x88>
 800eac0:	4b1b      	ldr	r3, [pc, #108]	; (800eb30 <_puts_r+0xd4>)
 800eac2:	429c      	cmp	r4, r3
 800eac4:	d101      	bne.n	800eaca <_puts_r+0x6e>
 800eac6:	68ac      	ldr	r4, [r5, #8]
 800eac8:	e7da      	b.n	800ea80 <_puts_r+0x24>
 800eaca:	4b1a      	ldr	r3, [pc, #104]	; (800eb34 <_puts_r+0xd8>)
 800eacc:	429c      	cmp	r4, r3
 800eace:	bf08      	it	eq
 800ead0:	68ec      	ldreq	r4, [r5, #12]
 800ead2:	e7d5      	b.n	800ea80 <_puts_r+0x24>
 800ead4:	4621      	mov	r1, r4
 800ead6:	4628      	mov	r0, r5
 800ead8:	f000 f888 	bl	800ebec <__swsetup_r>
 800eadc:	2800      	cmp	r0, #0
 800eade:	d0dd      	beq.n	800ea9c <_puts_r+0x40>
 800eae0:	f04f 35ff 	mov.w	r5, #4294967295
 800eae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eae6:	07da      	lsls	r2, r3, #31
 800eae8:	d405      	bmi.n	800eaf6 <_puts_r+0x9a>
 800eaea:	89a3      	ldrh	r3, [r4, #12]
 800eaec:	059b      	lsls	r3, r3, #22
 800eaee:	d402      	bmi.n	800eaf6 <_puts_r+0x9a>
 800eaf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaf2:	f001 f8b5 	bl	800fc60 <__retarget_lock_release_recursive>
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	bd70      	pop	{r4, r5, r6, pc}
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	da04      	bge.n	800eb08 <_puts_r+0xac>
 800eafe:	69a2      	ldr	r2, [r4, #24]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	dc06      	bgt.n	800eb12 <_puts_r+0xb6>
 800eb04:	290a      	cmp	r1, #10
 800eb06:	d004      	beq.n	800eb12 <_puts_r+0xb6>
 800eb08:	6823      	ldr	r3, [r4, #0]
 800eb0a:	1c5a      	adds	r2, r3, #1
 800eb0c:	6022      	str	r2, [r4, #0]
 800eb0e:	7019      	strb	r1, [r3, #0]
 800eb10:	e7c5      	b.n	800ea9e <_puts_r+0x42>
 800eb12:	4622      	mov	r2, r4
 800eb14:	4628      	mov	r0, r5
 800eb16:	f000 f817 	bl	800eb48 <__swbuf_r>
 800eb1a:	3001      	adds	r0, #1
 800eb1c:	d1bf      	bne.n	800ea9e <_puts_r+0x42>
 800eb1e:	e7df      	b.n	800eae0 <_puts_r+0x84>
 800eb20:	6823      	ldr	r3, [r4, #0]
 800eb22:	250a      	movs	r5, #10
 800eb24:	1c5a      	adds	r2, r3, #1
 800eb26:	6022      	str	r2, [r4, #0]
 800eb28:	701d      	strb	r5, [r3, #0]
 800eb2a:	e7db      	b.n	800eae4 <_puts_r+0x88>
 800eb2c:	08010cc4 	.word	0x08010cc4
 800eb30:	08010ce4 	.word	0x08010ce4
 800eb34:	08010ca4 	.word	0x08010ca4

0800eb38 <puts>:
 800eb38:	4b02      	ldr	r3, [pc, #8]	; (800eb44 <puts+0xc>)
 800eb3a:	4601      	mov	r1, r0
 800eb3c:	6818      	ldr	r0, [r3, #0]
 800eb3e:	f7ff bf8d 	b.w	800ea5c <_puts_r>
 800eb42:	bf00      	nop
 800eb44:	2400001c 	.word	0x2400001c

0800eb48 <__swbuf_r>:
 800eb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb4a:	460e      	mov	r6, r1
 800eb4c:	4614      	mov	r4, r2
 800eb4e:	4605      	mov	r5, r0
 800eb50:	b118      	cbz	r0, 800eb5a <__swbuf_r+0x12>
 800eb52:	6983      	ldr	r3, [r0, #24]
 800eb54:	b90b      	cbnz	r3, 800eb5a <__swbuf_r+0x12>
 800eb56:	f000 ffdf 	bl	800fb18 <__sinit>
 800eb5a:	4b21      	ldr	r3, [pc, #132]	; (800ebe0 <__swbuf_r+0x98>)
 800eb5c:	429c      	cmp	r4, r3
 800eb5e:	d12b      	bne.n	800ebb8 <__swbuf_r+0x70>
 800eb60:	686c      	ldr	r4, [r5, #4]
 800eb62:	69a3      	ldr	r3, [r4, #24]
 800eb64:	60a3      	str	r3, [r4, #8]
 800eb66:	89a3      	ldrh	r3, [r4, #12]
 800eb68:	071a      	lsls	r2, r3, #28
 800eb6a:	d52f      	bpl.n	800ebcc <__swbuf_r+0x84>
 800eb6c:	6923      	ldr	r3, [r4, #16]
 800eb6e:	b36b      	cbz	r3, 800ebcc <__swbuf_r+0x84>
 800eb70:	6923      	ldr	r3, [r4, #16]
 800eb72:	6820      	ldr	r0, [r4, #0]
 800eb74:	1ac0      	subs	r0, r0, r3
 800eb76:	6963      	ldr	r3, [r4, #20]
 800eb78:	b2f6      	uxtb	r6, r6
 800eb7a:	4283      	cmp	r3, r0
 800eb7c:	4637      	mov	r7, r6
 800eb7e:	dc04      	bgt.n	800eb8a <__swbuf_r+0x42>
 800eb80:	4621      	mov	r1, r4
 800eb82:	4628      	mov	r0, r5
 800eb84:	f000 ff34 	bl	800f9f0 <_fflush_r>
 800eb88:	bb30      	cbnz	r0, 800ebd8 <__swbuf_r+0x90>
 800eb8a:	68a3      	ldr	r3, [r4, #8]
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	60a3      	str	r3, [r4, #8]
 800eb90:	6823      	ldr	r3, [r4, #0]
 800eb92:	1c5a      	adds	r2, r3, #1
 800eb94:	6022      	str	r2, [r4, #0]
 800eb96:	701e      	strb	r6, [r3, #0]
 800eb98:	6963      	ldr	r3, [r4, #20]
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	4283      	cmp	r3, r0
 800eb9e:	d004      	beq.n	800ebaa <__swbuf_r+0x62>
 800eba0:	89a3      	ldrh	r3, [r4, #12]
 800eba2:	07db      	lsls	r3, r3, #31
 800eba4:	d506      	bpl.n	800ebb4 <__swbuf_r+0x6c>
 800eba6:	2e0a      	cmp	r6, #10
 800eba8:	d104      	bne.n	800ebb4 <__swbuf_r+0x6c>
 800ebaa:	4621      	mov	r1, r4
 800ebac:	4628      	mov	r0, r5
 800ebae:	f000 ff1f 	bl	800f9f0 <_fflush_r>
 800ebb2:	b988      	cbnz	r0, 800ebd8 <__swbuf_r+0x90>
 800ebb4:	4638      	mov	r0, r7
 800ebb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb8:	4b0a      	ldr	r3, [pc, #40]	; (800ebe4 <__swbuf_r+0x9c>)
 800ebba:	429c      	cmp	r4, r3
 800ebbc:	d101      	bne.n	800ebc2 <__swbuf_r+0x7a>
 800ebbe:	68ac      	ldr	r4, [r5, #8]
 800ebc0:	e7cf      	b.n	800eb62 <__swbuf_r+0x1a>
 800ebc2:	4b09      	ldr	r3, [pc, #36]	; (800ebe8 <__swbuf_r+0xa0>)
 800ebc4:	429c      	cmp	r4, r3
 800ebc6:	bf08      	it	eq
 800ebc8:	68ec      	ldreq	r4, [r5, #12]
 800ebca:	e7ca      	b.n	800eb62 <__swbuf_r+0x1a>
 800ebcc:	4621      	mov	r1, r4
 800ebce:	4628      	mov	r0, r5
 800ebd0:	f000 f80c 	bl	800ebec <__swsetup_r>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	d0cb      	beq.n	800eb70 <__swbuf_r+0x28>
 800ebd8:	f04f 37ff 	mov.w	r7, #4294967295
 800ebdc:	e7ea      	b.n	800ebb4 <__swbuf_r+0x6c>
 800ebde:	bf00      	nop
 800ebe0:	08010cc4 	.word	0x08010cc4
 800ebe4:	08010ce4 	.word	0x08010ce4
 800ebe8:	08010ca4 	.word	0x08010ca4

0800ebec <__swsetup_r>:
 800ebec:	4b32      	ldr	r3, [pc, #200]	; (800ecb8 <__swsetup_r+0xcc>)
 800ebee:	b570      	push	{r4, r5, r6, lr}
 800ebf0:	681d      	ldr	r5, [r3, #0]
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	460c      	mov	r4, r1
 800ebf6:	b125      	cbz	r5, 800ec02 <__swsetup_r+0x16>
 800ebf8:	69ab      	ldr	r3, [r5, #24]
 800ebfa:	b913      	cbnz	r3, 800ec02 <__swsetup_r+0x16>
 800ebfc:	4628      	mov	r0, r5
 800ebfe:	f000 ff8b 	bl	800fb18 <__sinit>
 800ec02:	4b2e      	ldr	r3, [pc, #184]	; (800ecbc <__swsetup_r+0xd0>)
 800ec04:	429c      	cmp	r4, r3
 800ec06:	d10f      	bne.n	800ec28 <__swsetup_r+0x3c>
 800ec08:	686c      	ldr	r4, [r5, #4]
 800ec0a:	89a3      	ldrh	r3, [r4, #12]
 800ec0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec10:	0719      	lsls	r1, r3, #28
 800ec12:	d42c      	bmi.n	800ec6e <__swsetup_r+0x82>
 800ec14:	06dd      	lsls	r5, r3, #27
 800ec16:	d411      	bmi.n	800ec3c <__swsetup_r+0x50>
 800ec18:	2309      	movs	r3, #9
 800ec1a:	6033      	str	r3, [r6, #0]
 800ec1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec20:	81a3      	strh	r3, [r4, #12]
 800ec22:	f04f 30ff 	mov.w	r0, #4294967295
 800ec26:	e03e      	b.n	800eca6 <__swsetup_r+0xba>
 800ec28:	4b25      	ldr	r3, [pc, #148]	; (800ecc0 <__swsetup_r+0xd4>)
 800ec2a:	429c      	cmp	r4, r3
 800ec2c:	d101      	bne.n	800ec32 <__swsetup_r+0x46>
 800ec2e:	68ac      	ldr	r4, [r5, #8]
 800ec30:	e7eb      	b.n	800ec0a <__swsetup_r+0x1e>
 800ec32:	4b24      	ldr	r3, [pc, #144]	; (800ecc4 <__swsetup_r+0xd8>)
 800ec34:	429c      	cmp	r4, r3
 800ec36:	bf08      	it	eq
 800ec38:	68ec      	ldreq	r4, [r5, #12]
 800ec3a:	e7e6      	b.n	800ec0a <__swsetup_r+0x1e>
 800ec3c:	0758      	lsls	r0, r3, #29
 800ec3e:	d512      	bpl.n	800ec66 <__swsetup_r+0x7a>
 800ec40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec42:	b141      	cbz	r1, 800ec56 <__swsetup_r+0x6a>
 800ec44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec48:	4299      	cmp	r1, r3
 800ec4a:	d002      	beq.n	800ec52 <__swsetup_r+0x66>
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	f001 fc11 	bl	8010474 <_free_r>
 800ec52:	2300      	movs	r3, #0
 800ec54:	6363      	str	r3, [r4, #52]	; 0x34
 800ec56:	89a3      	ldrh	r3, [r4, #12]
 800ec58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	2300      	movs	r3, #0
 800ec60:	6063      	str	r3, [r4, #4]
 800ec62:	6923      	ldr	r3, [r4, #16]
 800ec64:	6023      	str	r3, [r4, #0]
 800ec66:	89a3      	ldrh	r3, [r4, #12]
 800ec68:	f043 0308 	orr.w	r3, r3, #8
 800ec6c:	81a3      	strh	r3, [r4, #12]
 800ec6e:	6923      	ldr	r3, [r4, #16]
 800ec70:	b94b      	cbnz	r3, 800ec86 <__swsetup_r+0x9a>
 800ec72:	89a3      	ldrh	r3, [r4, #12]
 800ec74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec7c:	d003      	beq.n	800ec86 <__swsetup_r+0x9a>
 800ec7e:	4621      	mov	r1, r4
 800ec80:	4630      	mov	r0, r6
 800ec82:	f001 f813 	bl	800fcac <__smakebuf_r>
 800ec86:	89a0      	ldrh	r0, [r4, #12]
 800ec88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec8c:	f010 0301 	ands.w	r3, r0, #1
 800ec90:	d00a      	beq.n	800eca8 <__swsetup_r+0xbc>
 800ec92:	2300      	movs	r3, #0
 800ec94:	60a3      	str	r3, [r4, #8]
 800ec96:	6963      	ldr	r3, [r4, #20]
 800ec98:	425b      	negs	r3, r3
 800ec9a:	61a3      	str	r3, [r4, #24]
 800ec9c:	6923      	ldr	r3, [r4, #16]
 800ec9e:	b943      	cbnz	r3, 800ecb2 <__swsetup_r+0xc6>
 800eca0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eca4:	d1ba      	bne.n	800ec1c <__swsetup_r+0x30>
 800eca6:	bd70      	pop	{r4, r5, r6, pc}
 800eca8:	0781      	lsls	r1, r0, #30
 800ecaa:	bf58      	it	pl
 800ecac:	6963      	ldrpl	r3, [r4, #20]
 800ecae:	60a3      	str	r3, [r4, #8]
 800ecb0:	e7f4      	b.n	800ec9c <__swsetup_r+0xb0>
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	e7f7      	b.n	800eca6 <__swsetup_r+0xba>
 800ecb6:	bf00      	nop
 800ecb8:	2400001c 	.word	0x2400001c
 800ecbc:	08010cc4 	.word	0x08010cc4
 800ecc0:	08010ce4 	.word	0x08010ce4
 800ecc4:	08010ca4 	.word	0x08010ca4

0800ecc8 <quorem>:
 800ecc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eccc:	6903      	ldr	r3, [r0, #16]
 800ecce:	690c      	ldr	r4, [r1, #16]
 800ecd0:	42a3      	cmp	r3, r4
 800ecd2:	4607      	mov	r7, r0
 800ecd4:	f2c0 8081 	blt.w	800edda <quorem+0x112>
 800ecd8:	3c01      	subs	r4, #1
 800ecda:	f101 0814 	add.w	r8, r1, #20
 800ecde:	f100 0514 	add.w	r5, r0, #20
 800ece2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ece6:	9301      	str	r3, [sp, #4]
 800ece8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ecec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ecf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ecfc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ed00:	d331      	bcc.n	800ed66 <quorem+0x9e>
 800ed02:	f04f 0e00 	mov.w	lr, #0
 800ed06:	4640      	mov	r0, r8
 800ed08:	46ac      	mov	ip, r5
 800ed0a:	46f2      	mov	sl, lr
 800ed0c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ed10:	b293      	uxth	r3, r2
 800ed12:	fb06 e303 	mla	r3, r6, r3, lr
 800ed16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	ebaa 0303 	sub.w	r3, sl, r3
 800ed20:	0c12      	lsrs	r2, r2, #16
 800ed22:	f8dc a000 	ldr.w	sl, [ip]
 800ed26:	fb06 e202 	mla	r2, r6, r2, lr
 800ed2a:	fa13 f38a 	uxtah	r3, r3, sl
 800ed2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ed32:	fa1f fa82 	uxth.w	sl, r2
 800ed36:	f8dc 2000 	ldr.w	r2, [ip]
 800ed3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ed3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed48:	4581      	cmp	r9, r0
 800ed4a:	f84c 3b04 	str.w	r3, [ip], #4
 800ed4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ed52:	d2db      	bcs.n	800ed0c <quorem+0x44>
 800ed54:	f855 300b 	ldr.w	r3, [r5, fp]
 800ed58:	b92b      	cbnz	r3, 800ed66 <quorem+0x9e>
 800ed5a:	9b01      	ldr	r3, [sp, #4]
 800ed5c:	3b04      	subs	r3, #4
 800ed5e:	429d      	cmp	r5, r3
 800ed60:	461a      	mov	r2, r3
 800ed62:	d32e      	bcc.n	800edc2 <quorem+0xfa>
 800ed64:	613c      	str	r4, [r7, #16]
 800ed66:	4638      	mov	r0, r7
 800ed68:	f001 fa74 	bl	8010254 <__mcmp>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	db24      	blt.n	800edba <quorem+0xf2>
 800ed70:	3601      	adds	r6, #1
 800ed72:	4628      	mov	r0, r5
 800ed74:	f04f 0c00 	mov.w	ip, #0
 800ed78:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed7c:	f8d0 e000 	ldr.w	lr, [r0]
 800ed80:	b293      	uxth	r3, r2
 800ed82:	ebac 0303 	sub.w	r3, ip, r3
 800ed86:	0c12      	lsrs	r2, r2, #16
 800ed88:	fa13 f38e 	uxtah	r3, r3, lr
 800ed8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ed90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed9a:	45c1      	cmp	r9, r8
 800ed9c:	f840 3b04 	str.w	r3, [r0], #4
 800eda0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eda4:	d2e8      	bcs.n	800ed78 <quorem+0xb0>
 800eda6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edae:	b922      	cbnz	r2, 800edba <quorem+0xf2>
 800edb0:	3b04      	subs	r3, #4
 800edb2:	429d      	cmp	r5, r3
 800edb4:	461a      	mov	r2, r3
 800edb6:	d30a      	bcc.n	800edce <quorem+0x106>
 800edb8:	613c      	str	r4, [r7, #16]
 800edba:	4630      	mov	r0, r6
 800edbc:	b003      	add	sp, #12
 800edbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc2:	6812      	ldr	r2, [r2, #0]
 800edc4:	3b04      	subs	r3, #4
 800edc6:	2a00      	cmp	r2, #0
 800edc8:	d1cc      	bne.n	800ed64 <quorem+0x9c>
 800edca:	3c01      	subs	r4, #1
 800edcc:	e7c7      	b.n	800ed5e <quorem+0x96>
 800edce:	6812      	ldr	r2, [r2, #0]
 800edd0:	3b04      	subs	r3, #4
 800edd2:	2a00      	cmp	r2, #0
 800edd4:	d1f0      	bne.n	800edb8 <quorem+0xf0>
 800edd6:	3c01      	subs	r4, #1
 800edd8:	e7eb      	b.n	800edb2 <quorem+0xea>
 800edda:	2000      	movs	r0, #0
 800eddc:	e7ee      	b.n	800edbc <quorem+0xf4>
	...

0800ede0 <_dtoa_r>:
 800ede0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede4:	ec59 8b10 	vmov	r8, r9, d0
 800ede8:	b095      	sub	sp, #84	; 0x54
 800edea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800edec:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800edee:	9107      	str	r1, [sp, #28]
 800edf0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800edf4:	4606      	mov	r6, r0
 800edf6:	9209      	str	r2, [sp, #36]	; 0x24
 800edf8:	9310      	str	r3, [sp, #64]	; 0x40
 800edfa:	b975      	cbnz	r5, 800ee1a <_dtoa_r+0x3a>
 800edfc:	2010      	movs	r0, #16
 800edfe:	f000 ff95 	bl	800fd2c <malloc>
 800ee02:	4602      	mov	r2, r0
 800ee04:	6270      	str	r0, [r6, #36]	; 0x24
 800ee06:	b920      	cbnz	r0, 800ee12 <_dtoa_r+0x32>
 800ee08:	4bab      	ldr	r3, [pc, #684]	; (800f0b8 <_dtoa_r+0x2d8>)
 800ee0a:	21ea      	movs	r1, #234	; 0xea
 800ee0c:	48ab      	ldr	r0, [pc, #684]	; (800f0bc <_dtoa_r+0x2dc>)
 800ee0e:	f001 fd9b 	bl	8010948 <__assert_func>
 800ee12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ee16:	6005      	str	r5, [r0, #0]
 800ee18:	60c5      	str	r5, [r0, #12]
 800ee1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ee1c:	6819      	ldr	r1, [r3, #0]
 800ee1e:	b151      	cbz	r1, 800ee36 <_dtoa_r+0x56>
 800ee20:	685a      	ldr	r2, [r3, #4]
 800ee22:	604a      	str	r2, [r1, #4]
 800ee24:	2301      	movs	r3, #1
 800ee26:	4093      	lsls	r3, r2
 800ee28:	608b      	str	r3, [r1, #8]
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	f000 ffd4 	bl	800fdd8 <_Bfree>
 800ee30:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ee32:	2200      	movs	r2, #0
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	f1b9 0300 	subs.w	r3, r9, #0
 800ee3a:	bfbb      	ittet	lt
 800ee3c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ee40:	9303      	strlt	r3, [sp, #12]
 800ee42:	2300      	movge	r3, #0
 800ee44:	2201      	movlt	r2, #1
 800ee46:	bfac      	ite	ge
 800ee48:	6023      	strge	r3, [r4, #0]
 800ee4a:	6022      	strlt	r2, [r4, #0]
 800ee4c:	4b9c      	ldr	r3, [pc, #624]	; (800f0c0 <_dtoa_r+0x2e0>)
 800ee4e:	9c03      	ldr	r4, [sp, #12]
 800ee50:	43a3      	bics	r3, r4
 800ee52:	d11a      	bne.n	800ee8a <_dtoa_r+0xaa>
 800ee54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee56:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee5a:	6013      	str	r3, [r2, #0]
 800ee5c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ee60:	ea53 0308 	orrs.w	r3, r3, r8
 800ee64:	f000 8512 	beq.w	800f88c <_dtoa_r+0xaac>
 800ee68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ee6a:	b953      	cbnz	r3, 800ee82 <_dtoa_r+0xa2>
 800ee6c:	4b95      	ldr	r3, [pc, #596]	; (800f0c4 <_dtoa_r+0x2e4>)
 800ee6e:	e01f      	b.n	800eeb0 <_dtoa_r+0xd0>
 800ee70:	4b95      	ldr	r3, [pc, #596]	; (800f0c8 <_dtoa_r+0x2e8>)
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	3308      	adds	r3, #8
 800ee76:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ee78:	6013      	str	r3, [r2, #0]
 800ee7a:	9800      	ldr	r0, [sp, #0]
 800ee7c:	b015      	add	sp, #84	; 0x54
 800ee7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee82:	4b90      	ldr	r3, [pc, #576]	; (800f0c4 <_dtoa_r+0x2e4>)
 800ee84:	9300      	str	r3, [sp, #0]
 800ee86:	3303      	adds	r3, #3
 800ee88:	e7f5      	b.n	800ee76 <_dtoa_r+0x96>
 800ee8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee96:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ee9a:	d10b      	bne.n	800eeb4 <_dtoa_r+0xd4>
 800ee9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ee9e:	2301      	movs	r3, #1
 800eea0:	6013      	str	r3, [r2, #0]
 800eea2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	f000 84ee 	beq.w	800f886 <_dtoa_r+0xaa6>
 800eeaa:	4888      	ldr	r0, [pc, #544]	; (800f0cc <_dtoa_r+0x2ec>)
 800eeac:	6018      	str	r0, [r3, #0]
 800eeae:	1e43      	subs	r3, r0, #1
 800eeb0:	9300      	str	r3, [sp, #0]
 800eeb2:	e7e2      	b.n	800ee7a <_dtoa_r+0x9a>
 800eeb4:	a913      	add	r1, sp, #76	; 0x4c
 800eeb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800eeba:	aa12      	add	r2, sp, #72	; 0x48
 800eebc:	4630      	mov	r0, r6
 800eebe:	f001 fa6d 	bl	801039c <__d2b>
 800eec2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800eec6:	4605      	mov	r5, r0
 800eec8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800eeca:	2900      	cmp	r1, #0
 800eecc:	d047      	beq.n	800ef5e <_dtoa_r+0x17e>
 800eece:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800eed0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800eed4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800eed8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800eedc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eee0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800eee4:	2400      	movs	r4, #0
 800eee6:	ec43 2b16 	vmov	d6, r2, r3
 800eeea:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800eeee:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800f0a0 <_dtoa_r+0x2c0>
 800eef2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800eef6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f0a8 <_dtoa_r+0x2c8>
 800eefa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800eefe:	eeb0 7b46 	vmov.f64	d7, d6
 800ef02:	ee06 1a90 	vmov	s13, r1
 800ef06:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800ef0a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f0b0 <_dtoa_r+0x2d0>
 800ef0e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ef12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ef16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ef1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1e:	ee16 ba90 	vmov	fp, s13
 800ef22:	9411      	str	r4, [sp, #68]	; 0x44
 800ef24:	d508      	bpl.n	800ef38 <_dtoa_r+0x158>
 800ef26:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ef2a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ef2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef32:	bf18      	it	ne
 800ef34:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ef38:	f1bb 0f16 	cmp.w	fp, #22
 800ef3c:	d832      	bhi.n	800efa4 <_dtoa_r+0x1c4>
 800ef3e:	4b64      	ldr	r3, [pc, #400]	; (800f0d0 <_dtoa_r+0x2f0>)
 800ef40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ef44:	ed93 7b00 	vldr	d7, [r3]
 800ef48:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ef4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef54:	d501      	bpl.n	800ef5a <_dtoa_r+0x17a>
 800ef56:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	e023      	b.n	800efa6 <_dtoa_r+0x1c6>
 800ef5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ef60:	4401      	add	r1, r0
 800ef62:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ef66:	2b20      	cmp	r3, #32
 800ef68:	bfc3      	ittte	gt
 800ef6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ef6e:	fa04 f303 	lslgt.w	r3, r4, r3
 800ef72:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ef76:	f1c3 0320 	rsble	r3, r3, #32
 800ef7a:	bfc6      	itte	gt
 800ef7c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ef80:	ea43 0308 	orrgt.w	r3, r3, r8
 800ef84:	fa08 f303 	lslle.w	r3, r8, r3
 800ef88:	ee07 3a90 	vmov	s15, r3
 800ef8c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ef90:	3901      	subs	r1, #1
 800ef92:	ed8d 7b00 	vstr	d7, [sp]
 800ef96:	9c01      	ldr	r4, [sp, #4]
 800ef98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef9c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800efa0:	2401      	movs	r4, #1
 800efa2:	e7a0      	b.n	800eee6 <_dtoa_r+0x106>
 800efa4:	2301      	movs	r3, #1
 800efa6:	930f      	str	r3, [sp, #60]	; 0x3c
 800efa8:	1a43      	subs	r3, r0, r1
 800efaa:	1e5a      	subs	r2, r3, #1
 800efac:	bf45      	ittet	mi
 800efae:	f1c3 0301 	rsbmi	r3, r3, #1
 800efb2:	9305      	strmi	r3, [sp, #20]
 800efb4:	2300      	movpl	r3, #0
 800efb6:	2300      	movmi	r3, #0
 800efb8:	9206      	str	r2, [sp, #24]
 800efba:	bf54      	ite	pl
 800efbc:	9305      	strpl	r3, [sp, #20]
 800efbe:	9306      	strmi	r3, [sp, #24]
 800efc0:	f1bb 0f00 	cmp.w	fp, #0
 800efc4:	db18      	blt.n	800eff8 <_dtoa_r+0x218>
 800efc6:	9b06      	ldr	r3, [sp, #24]
 800efc8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800efcc:	445b      	add	r3, fp
 800efce:	9306      	str	r3, [sp, #24]
 800efd0:	2300      	movs	r3, #0
 800efd2:	9a07      	ldr	r2, [sp, #28]
 800efd4:	2a09      	cmp	r2, #9
 800efd6:	d849      	bhi.n	800f06c <_dtoa_r+0x28c>
 800efd8:	2a05      	cmp	r2, #5
 800efda:	bfc4      	itt	gt
 800efdc:	3a04      	subgt	r2, #4
 800efde:	9207      	strgt	r2, [sp, #28]
 800efe0:	9a07      	ldr	r2, [sp, #28]
 800efe2:	f1a2 0202 	sub.w	r2, r2, #2
 800efe6:	bfcc      	ite	gt
 800efe8:	2400      	movgt	r4, #0
 800efea:	2401      	movle	r4, #1
 800efec:	2a03      	cmp	r2, #3
 800efee:	d848      	bhi.n	800f082 <_dtoa_r+0x2a2>
 800eff0:	e8df f002 	tbb	[pc, r2]
 800eff4:	3a2c2e0b 	.word	0x3a2c2e0b
 800eff8:	9b05      	ldr	r3, [sp, #20]
 800effa:	2200      	movs	r2, #0
 800effc:	eba3 030b 	sub.w	r3, r3, fp
 800f000:	9305      	str	r3, [sp, #20]
 800f002:	920e      	str	r2, [sp, #56]	; 0x38
 800f004:	f1cb 0300 	rsb	r3, fp, #0
 800f008:	e7e3      	b.n	800efd2 <_dtoa_r+0x1f2>
 800f00a:	2200      	movs	r2, #0
 800f00c:	9208      	str	r2, [sp, #32]
 800f00e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f010:	2a00      	cmp	r2, #0
 800f012:	dc39      	bgt.n	800f088 <_dtoa_r+0x2a8>
 800f014:	f04f 0a01 	mov.w	sl, #1
 800f018:	46d1      	mov	r9, sl
 800f01a:	4652      	mov	r2, sl
 800f01c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f020:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f022:	2100      	movs	r1, #0
 800f024:	6079      	str	r1, [r7, #4]
 800f026:	2004      	movs	r0, #4
 800f028:	f100 0c14 	add.w	ip, r0, #20
 800f02c:	4594      	cmp	ip, r2
 800f02e:	6879      	ldr	r1, [r7, #4]
 800f030:	d92f      	bls.n	800f092 <_dtoa_r+0x2b2>
 800f032:	4630      	mov	r0, r6
 800f034:	930c      	str	r3, [sp, #48]	; 0x30
 800f036:	f000 fe8f 	bl	800fd58 <_Balloc>
 800f03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f03c:	9000      	str	r0, [sp, #0]
 800f03e:	4602      	mov	r2, r0
 800f040:	2800      	cmp	r0, #0
 800f042:	d149      	bne.n	800f0d8 <_dtoa_r+0x2f8>
 800f044:	4b23      	ldr	r3, [pc, #140]	; (800f0d4 <_dtoa_r+0x2f4>)
 800f046:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f04a:	e6df      	b.n	800ee0c <_dtoa_r+0x2c>
 800f04c:	2201      	movs	r2, #1
 800f04e:	e7dd      	b.n	800f00c <_dtoa_r+0x22c>
 800f050:	2200      	movs	r2, #0
 800f052:	9208      	str	r2, [sp, #32]
 800f054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f056:	eb0b 0a02 	add.w	sl, fp, r2
 800f05a:	f10a 0901 	add.w	r9, sl, #1
 800f05e:	464a      	mov	r2, r9
 800f060:	2a01      	cmp	r2, #1
 800f062:	bfb8      	it	lt
 800f064:	2201      	movlt	r2, #1
 800f066:	e7db      	b.n	800f020 <_dtoa_r+0x240>
 800f068:	2201      	movs	r2, #1
 800f06a:	e7f2      	b.n	800f052 <_dtoa_r+0x272>
 800f06c:	2401      	movs	r4, #1
 800f06e:	2200      	movs	r2, #0
 800f070:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f074:	f04f 3aff 	mov.w	sl, #4294967295
 800f078:	2100      	movs	r1, #0
 800f07a:	46d1      	mov	r9, sl
 800f07c:	2212      	movs	r2, #18
 800f07e:	9109      	str	r1, [sp, #36]	; 0x24
 800f080:	e7ce      	b.n	800f020 <_dtoa_r+0x240>
 800f082:	2201      	movs	r2, #1
 800f084:	9208      	str	r2, [sp, #32]
 800f086:	e7f5      	b.n	800f074 <_dtoa_r+0x294>
 800f088:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f08c:	46d1      	mov	r9, sl
 800f08e:	4652      	mov	r2, sl
 800f090:	e7c6      	b.n	800f020 <_dtoa_r+0x240>
 800f092:	3101      	adds	r1, #1
 800f094:	6079      	str	r1, [r7, #4]
 800f096:	0040      	lsls	r0, r0, #1
 800f098:	e7c6      	b.n	800f028 <_dtoa_r+0x248>
 800f09a:	bf00      	nop
 800f09c:	f3af 8000 	nop.w
 800f0a0:	636f4361 	.word	0x636f4361
 800f0a4:	3fd287a7 	.word	0x3fd287a7
 800f0a8:	8b60c8b3 	.word	0x8b60c8b3
 800f0ac:	3fc68a28 	.word	0x3fc68a28
 800f0b0:	509f79fb 	.word	0x509f79fb
 800f0b4:	3fd34413 	.word	0x3fd34413
 800f0b8:	08010c1d 	.word	0x08010c1d
 800f0bc:	08010c34 	.word	0x08010c34
 800f0c0:	7ff00000 	.word	0x7ff00000
 800f0c4:	08010c19 	.word	0x08010c19
 800f0c8:	08010c10 	.word	0x08010c10
 800f0cc:	08010bed 	.word	0x08010bed
 800f0d0:	08010d90 	.word	0x08010d90
 800f0d4:	08010c93 	.word	0x08010c93
 800f0d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f0da:	9900      	ldr	r1, [sp, #0]
 800f0dc:	6011      	str	r1, [r2, #0]
 800f0de:	f1b9 0f0e 	cmp.w	r9, #14
 800f0e2:	d872      	bhi.n	800f1ca <_dtoa_r+0x3ea>
 800f0e4:	2c00      	cmp	r4, #0
 800f0e6:	d070      	beq.n	800f1ca <_dtoa_r+0x3ea>
 800f0e8:	f1bb 0f00 	cmp.w	fp, #0
 800f0ec:	f340 80a6 	ble.w	800f23c <_dtoa_r+0x45c>
 800f0f0:	49ca      	ldr	r1, [pc, #808]	; (800f41c <_dtoa_r+0x63c>)
 800f0f2:	f00b 020f 	and.w	r2, fp, #15
 800f0f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f0fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f0fe:	ed92 7b00 	vldr	d7, [r2]
 800f102:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f106:	f000 808d 	beq.w	800f224 <_dtoa_r+0x444>
 800f10a:	4ac5      	ldr	r2, [pc, #788]	; (800f420 <_dtoa_r+0x640>)
 800f10c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f110:	ed92 6b08 	vldr	d6, [r2, #32]
 800f114:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800f118:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f11c:	f001 010f 	and.w	r1, r1, #15
 800f120:	2203      	movs	r2, #3
 800f122:	48bf      	ldr	r0, [pc, #764]	; (800f420 <_dtoa_r+0x640>)
 800f124:	2900      	cmp	r1, #0
 800f126:	d17f      	bne.n	800f228 <_dtoa_r+0x448>
 800f128:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f12c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f130:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f134:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f136:	2900      	cmp	r1, #0
 800f138:	f000 80b2 	beq.w	800f2a0 <_dtoa_r+0x4c0>
 800f13c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f140:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f144:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14c:	f140 80a8 	bpl.w	800f2a0 <_dtoa_r+0x4c0>
 800f150:	f1b9 0f00 	cmp.w	r9, #0
 800f154:	f000 80a4 	beq.w	800f2a0 <_dtoa_r+0x4c0>
 800f158:	f1ba 0f00 	cmp.w	sl, #0
 800f15c:	dd31      	ble.n	800f1c2 <_dtoa_r+0x3e2>
 800f15e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f162:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f166:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f16a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f16e:	3201      	adds	r2, #1
 800f170:	4650      	mov	r0, sl
 800f172:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f176:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f17a:	ee07 2a90 	vmov	s15, r2
 800f17e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f182:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f186:	ed8d 5b02 	vstr	d5, [sp, #8]
 800f18a:	9c03      	ldr	r4, [sp, #12]
 800f18c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f190:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f194:	2800      	cmp	r0, #0
 800f196:	f040 8086 	bne.w	800f2a6 <_dtoa_r+0x4c6>
 800f19a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f19e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f1a2:	ec42 1b17 	vmov	d7, r1, r2
 800f1a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ae:	f300 8272 	bgt.w	800f696 <_dtoa_r+0x8b6>
 800f1b2:	eeb1 7b47 	vneg.f64	d7, d7
 800f1b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1be:	f100 8267 	bmi.w	800f690 <_dtoa_r+0x8b0>
 800f1c2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800f1c6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800f1ca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f1cc:	2a00      	cmp	r2, #0
 800f1ce:	f2c0 8129 	blt.w	800f424 <_dtoa_r+0x644>
 800f1d2:	f1bb 0f0e 	cmp.w	fp, #14
 800f1d6:	f300 8125 	bgt.w	800f424 <_dtoa_r+0x644>
 800f1da:	4b90      	ldr	r3, [pc, #576]	; (800f41c <_dtoa_r+0x63c>)
 800f1dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f1e0:	ed93 6b00 	vldr	d6, [r3]
 800f1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f280 80c3 	bge.w	800f372 <_dtoa_r+0x592>
 800f1ec:	f1b9 0f00 	cmp.w	r9, #0
 800f1f0:	f300 80bf 	bgt.w	800f372 <_dtoa_r+0x592>
 800f1f4:	f040 824c 	bne.w	800f690 <_dtoa_r+0x8b0>
 800f1f8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f1fc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f200:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f204:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20c:	464c      	mov	r4, r9
 800f20e:	464f      	mov	r7, r9
 800f210:	f280 8222 	bge.w	800f658 <_dtoa_r+0x878>
 800f214:	f8dd 8000 	ldr.w	r8, [sp]
 800f218:	2331      	movs	r3, #49	; 0x31
 800f21a:	f808 3b01 	strb.w	r3, [r8], #1
 800f21e:	f10b 0b01 	add.w	fp, fp, #1
 800f222:	e21e      	b.n	800f662 <_dtoa_r+0x882>
 800f224:	2202      	movs	r2, #2
 800f226:	e77c      	b.n	800f122 <_dtoa_r+0x342>
 800f228:	07cc      	lsls	r4, r1, #31
 800f22a:	d504      	bpl.n	800f236 <_dtoa_r+0x456>
 800f22c:	ed90 6b00 	vldr	d6, [r0]
 800f230:	3201      	adds	r2, #1
 800f232:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f236:	1049      	asrs	r1, r1, #1
 800f238:	3008      	adds	r0, #8
 800f23a:	e773      	b.n	800f124 <_dtoa_r+0x344>
 800f23c:	d02e      	beq.n	800f29c <_dtoa_r+0x4bc>
 800f23e:	f1cb 0100 	rsb	r1, fp, #0
 800f242:	4a76      	ldr	r2, [pc, #472]	; (800f41c <_dtoa_r+0x63c>)
 800f244:	f001 000f 	and.w	r0, r1, #15
 800f248:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f24c:	ed92 7b00 	vldr	d7, [r2]
 800f250:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f254:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f258:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f25c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800f260:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f264:	486e      	ldr	r0, [pc, #440]	; (800f420 <_dtoa_r+0x640>)
 800f266:	1109      	asrs	r1, r1, #4
 800f268:	2400      	movs	r4, #0
 800f26a:	2202      	movs	r2, #2
 800f26c:	b939      	cbnz	r1, 800f27e <_dtoa_r+0x49e>
 800f26e:	2c00      	cmp	r4, #0
 800f270:	f43f af60 	beq.w	800f134 <_dtoa_r+0x354>
 800f274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f27c:	e75a      	b.n	800f134 <_dtoa_r+0x354>
 800f27e:	07cf      	lsls	r7, r1, #31
 800f280:	d509      	bpl.n	800f296 <_dtoa_r+0x4b6>
 800f282:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f286:	ed90 7b00 	vldr	d7, [r0]
 800f28a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f28e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f292:	3201      	adds	r2, #1
 800f294:	2401      	movs	r4, #1
 800f296:	1049      	asrs	r1, r1, #1
 800f298:	3008      	adds	r0, #8
 800f29a:	e7e7      	b.n	800f26c <_dtoa_r+0x48c>
 800f29c:	2202      	movs	r2, #2
 800f29e:	e749      	b.n	800f134 <_dtoa_r+0x354>
 800f2a0:	465f      	mov	r7, fp
 800f2a2:	4648      	mov	r0, r9
 800f2a4:	e765      	b.n	800f172 <_dtoa_r+0x392>
 800f2a6:	ec42 1b17 	vmov	d7, r1, r2
 800f2aa:	4a5c      	ldr	r2, [pc, #368]	; (800f41c <_dtoa_r+0x63c>)
 800f2ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f2b0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f2b4:	9a00      	ldr	r2, [sp, #0]
 800f2b6:	1814      	adds	r4, r2, r0
 800f2b8:	9a08      	ldr	r2, [sp, #32]
 800f2ba:	b352      	cbz	r2, 800f312 <_dtoa_r+0x532>
 800f2bc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f2c0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f2c4:	f8dd 8000 	ldr.w	r8, [sp]
 800f2c8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f2cc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f2d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f2d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f2d8:	ee14 2a90 	vmov	r2, s9
 800f2dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f2e0:	3230      	adds	r2, #48	; 0x30
 800f2e2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f2e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ee:	f808 2b01 	strb.w	r2, [r8], #1
 800f2f2:	d439      	bmi.n	800f368 <_dtoa_r+0x588>
 800f2f4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f2f8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f300:	d472      	bmi.n	800f3e8 <_dtoa_r+0x608>
 800f302:	45a0      	cmp	r8, r4
 800f304:	f43f af5d 	beq.w	800f1c2 <_dtoa_r+0x3e2>
 800f308:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f30c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f310:	e7e0      	b.n	800f2d4 <_dtoa_r+0x4f4>
 800f312:	f8dd 8000 	ldr.w	r8, [sp]
 800f316:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f31a:	4621      	mov	r1, r4
 800f31c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f320:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f324:	ee14 2a90 	vmov	r2, s9
 800f328:	3230      	adds	r2, #48	; 0x30
 800f32a:	f808 2b01 	strb.w	r2, [r8], #1
 800f32e:	45a0      	cmp	r8, r4
 800f330:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f334:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f338:	d118      	bne.n	800f36c <_dtoa_r+0x58c>
 800f33a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f33e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f342:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f34a:	dc4d      	bgt.n	800f3e8 <_dtoa_r+0x608>
 800f34c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f350:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f358:	f57f af33 	bpl.w	800f1c2 <_dtoa_r+0x3e2>
 800f35c:	4688      	mov	r8, r1
 800f35e:	3901      	subs	r1, #1
 800f360:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f364:	2b30      	cmp	r3, #48	; 0x30
 800f366:	d0f9      	beq.n	800f35c <_dtoa_r+0x57c>
 800f368:	46bb      	mov	fp, r7
 800f36a:	e02a      	b.n	800f3c2 <_dtoa_r+0x5e2>
 800f36c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f370:	e7d6      	b.n	800f320 <_dtoa_r+0x540>
 800f372:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f376:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f37a:	f8dd 8000 	ldr.w	r8, [sp]
 800f37e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f382:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f386:	ee15 3a10 	vmov	r3, s10
 800f38a:	3330      	adds	r3, #48	; 0x30
 800f38c:	f808 3b01 	strb.w	r3, [r8], #1
 800f390:	9b00      	ldr	r3, [sp, #0]
 800f392:	eba8 0303 	sub.w	r3, r8, r3
 800f396:	4599      	cmp	r9, r3
 800f398:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f39c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f3a0:	d133      	bne.n	800f40a <_dtoa_r+0x62a>
 800f3a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f3a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ae:	dc1a      	bgt.n	800f3e6 <_dtoa_r+0x606>
 800f3b0:	eeb4 7b46 	vcmp.f64	d7, d6
 800f3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b8:	d103      	bne.n	800f3c2 <_dtoa_r+0x5e2>
 800f3ba:	ee15 3a10 	vmov	r3, s10
 800f3be:	07d9      	lsls	r1, r3, #31
 800f3c0:	d411      	bmi.n	800f3e6 <_dtoa_r+0x606>
 800f3c2:	4629      	mov	r1, r5
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f000 fd07 	bl	800fdd8 <_Bfree>
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f3ce:	f888 3000 	strb.w	r3, [r8]
 800f3d2:	f10b 0301 	add.w	r3, fp, #1
 800f3d6:	6013      	str	r3, [r2, #0]
 800f3d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f43f ad4d 	beq.w	800ee7a <_dtoa_r+0x9a>
 800f3e0:	f8c3 8000 	str.w	r8, [r3]
 800f3e4:	e549      	b.n	800ee7a <_dtoa_r+0x9a>
 800f3e6:	465f      	mov	r7, fp
 800f3e8:	4643      	mov	r3, r8
 800f3ea:	4698      	mov	r8, r3
 800f3ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3f0:	2a39      	cmp	r2, #57	; 0x39
 800f3f2:	d106      	bne.n	800f402 <_dtoa_r+0x622>
 800f3f4:	9a00      	ldr	r2, [sp, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d1f7      	bne.n	800f3ea <_dtoa_r+0x60a>
 800f3fa:	9900      	ldr	r1, [sp, #0]
 800f3fc:	2230      	movs	r2, #48	; 0x30
 800f3fe:	3701      	adds	r7, #1
 800f400:	700a      	strb	r2, [r1, #0]
 800f402:	781a      	ldrb	r2, [r3, #0]
 800f404:	3201      	adds	r2, #1
 800f406:	701a      	strb	r2, [r3, #0]
 800f408:	e7ae      	b.n	800f368 <_dtoa_r+0x588>
 800f40a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f40e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f416:	d1b2      	bne.n	800f37e <_dtoa_r+0x59e>
 800f418:	e7d3      	b.n	800f3c2 <_dtoa_r+0x5e2>
 800f41a:	bf00      	nop
 800f41c:	08010d90 	.word	0x08010d90
 800f420:	08010d68 	.word	0x08010d68
 800f424:	9908      	ldr	r1, [sp, #32]
 800f426:	2900      	cmp	r1, #0
 800f428:	f000 80d1 	beq.w	800f5ce <_dtoa_r+0x7ee>
 800f42c:	9907      	ldr	r1, [sp, #28]
 800f42e:	2901      	cmp	r1, #1
 800f430:	f300 80b4 	bgt.w	800f59c <_dtoa_r+0x7bc>
 800f434:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f436:	2900      	cmp	r1, #0
 800f438:	f000 80ac 	beq.w	800f594 <_dtoa_r+0x7b4>
 800f43c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f440:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f444:	461c      	mov	r4, r3
 800f446:	930a      	str	r3, [sp, #40]	; 0x28
 800f448:	9b05      	ldr	r3, [sp, #20]
 800f44a:	4413      	add	r3, r2
 800f44c:	9305      	str	r3, [sp, #20]
 800f44e:	9b06      	ldr	r3, [sp, #24]
 800f450:	2101      	movs	r1, #1
 800f452:	4413      	add	r3, r2
 800f454:	4630      	mov	r0, r6
 800f456:	9306      	str	r3, [sp, #24]
 800f458:	f000 fd7a 	bl	800ff50 <__i2b>
 800f45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f45e:	4607      	mov	r7, r0
 800f460:	f1b8 0f00 	cmp.w	r8, #0
 800f464:	dd0d      	ble.n	800f482 <_dtoa_r+0x6a2>
 800f466:	9a06      	ldr	r2, [sp, #24]
 800f468:	2a00      	cmp	r2, #0
 800f46a:	dd0a      	ble.n	800f482 <_dtoa_r+0x6a2>
 800f46c:	4542      	cmp	r2, r8
 800f46e:	9905      	ldr	r1, [sp, #20]
 800f470:	bfa8      	it	ge
 800f472:	4642      	movge	r2, r8
 800f474:	1a89      	subs	r1, r1, r2
 800f476:	9105      	str	r1, [sp, #20]
 800f478:	9906      	ldr	r1, [sp, #24]
 800f47a:	eba8 0802 	sub.w	r8, r8, r2
 800f47e:	1a8a      	subs	r2, r1, r2
 800f480:	9206      	str	r2, [sp, #24]
 800f482:	b303      	cbz	r3, 800f4c6 <_dtoa_r+0x6e6>
 800f484:	9a08      	ldr	r2, [sp, #32]
 800f486:	2a00      	cmp	r2, #0
 800f488:	f000 80a6 	beq.w	800f5d8 <_dtoa_r+0x7f8>
 800f48c:	2c00      	cmp	r4, #0
 800f48e:	dd13      	ble.n	800f4b8 <_dtoa_r+0x6d8>
 800f490:	4639      	mov	r1, r7
 800f492:	4622      	mov	r2, r4
 800f494:	4630      	mov	r0, r6
 800f496:	930c      	str	r3, [sp, #48]	; 0x30
 800f498:	f000 fe16 	bl	80100c8 <__pow5mult>
 800f49c:	462a      	mov	r2, r5
 800f49e:	4601      	mov	r1, r0
 800f4a0:	4607      	mov	r7, r0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f000 fd6a 	bl	800ff7c <__multiply>
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	900a      	str	r0, [sp, #40]	; 0x28
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	f000 fc93 	bl	800fdd8 <_Bfree>
 800f4b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4b6:	4615      	mov	r5, r2
 800f4b8:	1b1a      	subs	r2, r3, r4
 800f4ba:	d004      	beq.n	800f4c6 <_dtoa_r+0x6e6>
 800f4bc:	4629      	mov	r1, r5
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f000 fe02 	bl	80100c8 <__pow5mult>
 800f4c4:	4605      	mov	r5, r0
 800f4c6:	2101      	movs	r1, #1
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f000 fd41 	bl	800ff50 <__i2b>
 800f4ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	f340 8082 	ble.w	800f5dc <_dtoa_r+0x7fc>
 800f4d8:	461a      	mov	r2, r3
 800f4da:	4601      	mov	r1, r0
 800f4dc:	4630      	mov	r0, r6
 800f4de:	f000 fdf3 	bl	80100c8 <__pow5mult>
 800f4e2:	9b07      	ldr	r3, [sp, #28]
 800f4e4:	2b01      	cmp	r3, #1
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	dd7b      	ble.n	800f5e2 <_dtoa_r+0x802>
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	930a      	str	r3, [sp, #40]	; 0x28
 800f4ee:	6922      	ldr	r2, [r4, #16]
 800f4f0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f4f4:	6910      	ldr	r0, [r2, #16]
 800f4f6:	f000 fcdb 	bl	800feb0 <__hi0bits>
 800f4fa:	f1c0 0020 	rsb	r0, r0, #32
 800f4fe:	9b06      	ldr	r3, [sp, #24]
 800f500:	4418      	add	r0, r3
 800f502:	f010 001f 	ands.w	r0, r0, #31
 800f506:	f000 808d 	beq.w	800f624 <_dtoa_r+0x844>
 800f50a:	f1c0 0220 	rsb	r2, r0, #32
 800f50e:	2a04      	cmp	r2, #4
 800f510:	f340 8086 	ble.w	800f620 <_dtoa_r+0x840>
 800f514:	f1c0 001c 	rsb	r0, r0, #28
 800f518:	9b05      	ldr	r3, [sp, #20]
 800f51a:	4403      	add	r3, r0
 800f51c:	9305      	str	r3, [sp, #20]
 800f51e:	9b06      	ldr	r3, [sp, #24]
 800f520:	4403      	add	r3, r0
 800f522:	4480      	add	r8, r0
 800f524:	9306      	str	r3, [sp, #24]
 800f526:	9b05      	ldr	r3, [sp, #20]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	dd05      	ble.n	800f538 <_dtoa_r+0x758>
 800f52c:	4629      	mov	r1, r5
 800f52e:	461a      	mov	r2, r3
 800f530:	4630      	mov	r0, r6
 800f532:	f000 fe23 	bl	801017c <__lshift>
 800f536:	4605      	mov	r5, r0
 800f538:	9b06      	ldr	r3, [sp, #24]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	dd05      	ble.n	800f54a <_dtoa_r+0x76a>
 800f53e:	4621      	mov	r1, r4
 800f540:	461a      	mov	r2, r3
 800f542:	4630      	mov	r0, r6
 800f544:	f000 fe1a 	bl	801017c <__lshift>
 800f548:	4604      	mov	r4, r0
 800f54a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d06b      	beq.n	800f628 <_dtoa_r+0x848>
 800f550:	4621      	mov	r1, r4
 800f552:	4628      	mov	r0, r5
 800f554:	f000 fe7e 	bl	8010254 <__mcmp>
 800f558:	2800      	cmp	r0, #0
 800f55a:	da65      	bge.n	800f628 <_dtoa_r+0x848>
 800f55c:	2300      	movs	r3, #0
 800f55e:	4629      	mov	r1, r5
 800f560:	220a      	movs	r2, #10
 800f562:	4630      	mov	r0, r6
 800f564:	f000 fc5a 	bl	800fe1c <__multadd>
 800f568:	9b08      	ldr	r3, [sp, #32]
 800f56a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f56e:	4605      	mov	r5, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	f000 8192 	beq.w	800f89a <_dtoa_r+0xaba>
 800f576:	4639      	mov	r1, r7
 800f578:	2300      	movs	r3, #0
 800f57a:	220a      	movs	r2, #10
 800f57c:	4630      	mov	r0, r6
 800f57e:	f000 fc4d 	bl	800fe1c <__multadd>
 800f582:	f1ba 0f00 	cmp.w	sl, #0
 800f586:	4607      	mov	r7, r0
 800f588:	f300 808e 	bgt.w	800f6a8 <_dtoa_r+0x8c8>
 800f58c:	9b07      	ldr	r3, [sp, #28]
 800f58e:	2b02      	cmp	r3, #2
 800f590:	dc51      	bgt.n	800f636 <_dtoa_r+0x856>
 800f592:	e089      	b.n	800f6a8 <_dtoa_r+0x8c8>
 800f594:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f596:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f59a:	e751      	b.n	800f440 <_dtoa_r+0x660>
 800f59c:	f109 34ff 	add.w	r4, r9, #4294967295
 800f5a0:	42a3      	cmp	r3, r4
 800f5a2:	bfbf      	itttt	lt
 800f5a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f5a6:	1ae3      	sublt	r3, r4, r3
 800f5a8:	18d2      	addlt	r2, r2, r3
 800f5aa:	4613      	movlt	r3, r2
 800f5ac:	bfb7      	itett	lt
 800f5ae:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f5b0:	1b1c      	subge	r4, r3, r4
 800f5b2:	4623      	movlt	r3, r4
 800f5b4:	2400      	movlt	r4, #0
 800f5b6:	f1b9 0f00 	cmp.w	r9, #0
 800f5ba:	bfb5      	itete	lt
 800f5bc:	9a05      	ldrlt	r2, [sp, #20]
 800f5be:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f5c2:	eba2 0809 	sublt.w	r8, r2, r9
 800f5c6:	464a      	movge	r2, r9
 800f5c8:	bfb8      	it	lt
 800f5ca:	2200      	movlt	r2, #0
 800f5cc:	e73b      	b.n	800f446 <_dtoa_r+0x666>
 800f5ce:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f5d2:	9f08      	ldr	r7, [sp, #32]
 800f5d4:	461c      	mov	r4, r3
 800f5d6:	e743      	b.n	800f460 <_dtoa_r+0x680>
 800f5d8:	461a      	mov	r2, r3
 800f5da:	e76f      	b.n	800f4bc <_dtoa_r+0x6dc>
 800f5dc:	9b07      	ldr	r3, [sp, #28]
 800f5de:	2b01      	cmp	r3, #1
 800f5e0:	dc18      	bgt.n	800f614 <_dtoa_r+0x834>
 800f5e2:	9b02      	ldr	r3, [sp, #8]
 800f5e4:	b9b3      	cbnz	r3, 800f614 <_dtoa_r+0x834>
 800f5e6:	9b03      	ldr	r3, [sp, #12]
 800f5e8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f5ec:	b9a2      	cbnz	r2, 800f618 <_dtoa_r+0x838>
 800f5ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f5f2:	0d12      	lsrs	r2, r2, #20
 800f5f4:	0512      	lsls	r2, r2, #20
 800f5f6:	b18a      	cbz	r2, 800f61c <_dtoa_r+0x83c>
 800f5f8:	9b05      	ldr	r3, [sp, #20]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	9305      	str	r3, [sp, #20]
 800f5fe:	9b06      	ldr	r3, [sp, #24]
 800f600:	3301      	adds	r3, #1
 800f602:	9306      	str	r3, [sp, #24]
 800f604:	2301      	movs	r3, #1
 800f606:	930a      	str	r3, [sp, #40]	; 0x28
 800f608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f47f af6f 	bne.w	800f4ee <_dtoa_r+0x70e>
 800f610:	2001      	movs	r0, #1
 800f612:	e774      	b.n	800f4fe <_dtoa_r+0x71e>
 800f614:	2300      	movs	r3, #0
 800f616:	e7f6      	b.n	800f606 <_dtoa_r+0x826>
 800f618:	9b02      	ldr	r3, [sp, #8]
 800f61a:	e7f4      	b.n	800f606 <_dtoa_r+0x826>
 800f61c:	920a      	str	r2, [sp, #40]	; 0x28
 800f61e:	e7f3      	b.n	800f608 <_dtoa_r+0x828>
 800f620:	d081      	beq.n	800f526 <_dtoa_r+0x746>
 800f622:	4610      	mov	r0, r2
 800f624:	301c      	adds	r0, #28
 800f626:	e777      	b.n	800f518 <_dtoa_r+0x738>
 800f628:	f1b9 0f00 	cmp.w	r9, #0
 800f62c:	dc37      	bgt.n	800f69e <_dtoa_r+0x8be>
 800f62e:	9b07      	ldr	r3, [sp, #28]
 800f630:	2b02      	cmp	r3, #2
 800f632:	dd34      	ble.n	800f69e <_dtoa_r+0x8be>
 800f634:	46ca      	mov	sl, r9
 800f636:	f1ba 0f00 	cmp.w	sl, #0
 800f63a:	d10d      	bne.n	800f658 <_dtoa_r+0x878>
 800f63c:	4621      	mov	r1, r4
 800f63e:	4653      	mov	r3, sl
 800f640:	2205      	movs	r2, #5
 800f642:	4630      	mov	r0, r6
 800f644:	f000 fbea 	bl	800fe1c <__multadd>
 800f648:	4601      	mov	r1, r0
 800f64a:	4604      	mov	r4, r0
 800f64c:	4628      	mov	r0, r5
 800f64e:	f000 fe01 	bl	8010254 <__mcmp>
 800f652:	2800      	cmp	r0, #0
 800f654:	f73f adde 	bgt.w	800f214 <_dtoa_r+0x434>
 800f658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f65a:	f8dd 8000 	ldr.w	r8, [sp]
 800f65e:	ea6f 0b03 	mvn.w	fp, r3
 800f662:	f04f 0900 	mov.w	r9, #0
 800f666:	4621      	mov	r1, r4
 800f668:	4630      	mov	r0, r6
 800f66a:	f000 fbb5 	bl	800fdd8 <_Bfree>
 800f66e:	2f00      	cmp	r7, #0
 800f670:	f43f aea7 	beq.w	800f3c2 <_dtoa_r+0x5e2>
 800f674:	f1b9 0f00 	cmp.w	r9, #0
 800f678:	d005      	beq.n	800f686 <_dtoa_r+0x8a6>
 800f67a:	45b9      	cmp	r9, r7
 800f67c:	d003      	beq.n	800f686 <_dtoa_r+0x8a6>
 800f67e:	4649      	mov	r1, r9
 800f680:	4630      	mov	r0, r6
 800f682:	f000 fba9 	bl	800fdd8 <_Bfree>
 800f686:	4639      	mov	r1, r7
 800f688:	4630      	mov	r0, r6
 800f68a:	f000 fba5 	bl	800fdd8 <_Bfree>
 800f68e:	e698      	b.n	800f3c2 <_dtoa_r+0x5e2>
 800f690:	2400      	movs	r4, #0
 800f692:	4627      	mov	r7, r4
 800f694:	e7e0      	b.n	800f658 <_dtoa_r+0x878>
 800f696:	46bb      	mov	fp, r7
 800f698:	4604      	mov	r4, r0
 800f69a:	4607      	mov	r7, r0
 800f69c:	e5ba      	b.n	800f214 <_dtoa_r+0x434>
 800f69e:	9b08      	ldr	r3, [sp, #32]
 800f6a0:	46ca      	mov	sl, r9
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f000 8100 	beq.w	800f8a8 <_dtoa_r+0xac8>
 800f6a8:	f1b8 0f00 	cmp.w	r8, #0
 800f6ac:	dd05      	ble.n	800f6ba <_dtoa_r+0x8da>
 800f6ae:	4639      	mov	r1, r7
 800f6b0:	4642      	mov	r2, r8
 800f6b2:	4630      	mov	r0, r6
 800f6b4:	f000 fd62 	bl	801017c <__lshift>
 800f6b8:	4607      	mov	r7, r0
 800f6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d05d      	beq.n	800f77c <_dtoa_r+0x99c>
 800f6c0:	6879      	ldr	r1, [r7, #4]
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	f000 fb48 	bl	800fd58 <_Balloc>
 800f6c8:	4680      	mov	r8, r0
 800f6ca:	b928      	cbnz	r0, 800f6d8 <_dtoa_r+0x8f8>
 800f6cc:	4b82      	ldr	r3, [pc, #520]	; (800f8d8 <_dtoa_r+0xaf8>)
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f6d4:	f7ff bb9a 	b.w	800ee0c <_dtoa_r+0x2c>
 800f6d8:	693a      	ldr	r2, [r7, #16]
 800f6da:	3202      	adds	r2, #2
 800f6dc:	0092      	lsls	r2, r2, #2
 800f6de:	f107 010c 	add.w	r1, r7, #12
 800f6e2:	300c      	adds	r0, #12
 800f6e4:	f000 fb2a 	bl	800fd3c <memcpy>
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	4641      	mov	r1, r8
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	f000 fd45 	bl	801017c <__lshift>
 800f6f2:	9b00      	ldr	r3, [sp, #0]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	9305      	str	r3, [sp, #20]
 800f6f8:	9b00      	ldr	r3, [sp, #0]
 800f6fa:	4453      	add	r3, sl
 800f6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f6fe:	9b02      	ldr	r3, [sp, #8]
 800f700:	f003 0301 	and.w	r3, r3, #1
 800f704:	46b9      	mov	r9, r7
 800f706:	9308      	str	r3, [sp, #32]
 800f708:	4607      	mov	r7, r0
 800f70a:	9b05      	ldr	r3, [sp, #20]
 800f70c:	4621      	mov	r1, r4
 800f70e:	3b01      	subs	r3, #1
 800f710:	4628      	mov	r0, r5
 800f712:	9302      	str	r3, [sp, #8]
 800f714:	f7ff fad8 	bl	800ecc8 <quorem>
 800f718:	4603      	mov	r3, r0
 800f71a:	3330      	adds	r3, #48	; 0x30
 800f71c:	9006      	str	r0, [sp, #24]
 800f71e:	4649      	mov	r1, r9
 800f720:	4628      	mov	r0, r5
 800f722:	930a      	str	r3, [sp, #40]	; 0x28
 800f724:	f000 fd96 	bl	8010254 <__mcmp>
 800f728:	463a      	mov	r2, r7
 800f72a:	4682      	mov	sl, r0
 800f72c:	4621      	mov	r1, r4
 800f72e:	4630      	mov	r0, r6
 800f730:	f000 fdac 	bl	801028c <__mdiff>
 800f734:	68c2      	ldr	r2, [r0, #12]
 800f736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f738:	4680      	mov	r8, r0
 800f73a:	bb0a      	cbnz	r2, 800f780 <_dtoa_r+0x9a0>
 800f73c:	4601      	mov	r1, r0
 800f73e:	4628      	mov	r0, r5
 800f740:	f000 fd88 	bl	8010254 <__mcmp>
 800f744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f746:	4602      	mov	r2, r0
 800f748:	4641      	mov	r1, r8
 800f74a:	4630      	mov	r0, r6
 800f74c:	920e      	str	r2, [sp, #56]	; 0x38
 800f74e:	930a      	str	r3, [sp, #40]	; 0x28
 800f750:	f000 fb42 	bl	800fdd8 <_Bfree>
 800f754:	9b07      	ldr	r3, [sp, #28]
 800f756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f758:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f75c:	ea43 0102 	orr.w	r1, r3, r2
 800f760:	9b08      	ldr	r3, [sp, #32]
 800f762:	430b      	orrs	r3, r1
 800f764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f766:	d10d      	bne.n	800f784 <_dtoa_r+0x9a4>
 800f768:	2b39      	cmp	r3, #57	; 0x39
 800f76a:	d029      	beq.n	800f7c0 <_dtoa_r+0x9e0>
 800f76c:	f1ba 0f00 	cmp.w	sl, #0
 800f770:	dd01      	ble.n	800f776 <_dtoa_r+0x996>
 800f772:	9b06      	ldr	r3, [sp, #24]
 800f774:	3331      	adds	r3, #49	; 0x31
 800f776:	9a02      	ldr	r2, [sp, #8]
 800f778:	7013      	strb	r3, [r2, #0]
 800f77a:	e774      	b.n	800f666 <_dtoa_r+0x886>
 800f77c:	4638      	mov	r0, r7
 800f77e:	e7b8      	b.n	800f6f2 <_dtoa_r+0x912>
 800f780:	2201      	movs	r2, #1
 800f782:	e7e1      	b.n	800f748 <_dtoa_r+0x968>
 800f784:	f1ba 0f00 	cmp.w	sl, #0
 800f788:	db06      	blt.n	800f798 <_dtoa_r+0x9b8>
 800f78a:	9907      	ldr	r1, [sp, #28]
 800f78c:	ea41 0a0a 	orr.w	sl, r1, sl
 800f790:	9908      	ldr	r1, [sp, #32]
 800f792:	ea5a 0101 	orrs.w	r1, sl, r1
 800f796:	d120      	bne.n	800f7da <_dtoa_r+0x9fa>
 800f798:	2a00      	cmp	r2, #0
 800f79a:	ddec      	ble.n	800f776 <_dtoa_r+0x996>
 800f79c:	4629      	mov	r1, r5
 800f79e:	2201      	movs	r2, #1
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	9305      	str	r3, [sp, #20]
 800f7a4:	f000 fcea 	bl	801017c <__lshift>
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	4605      	mov	r5, r0
 800f7ac:	f000 fd52 	bl	8010254 <__mcmp>
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	9b05      	ldr	r3, [sp, #20]
 800f7b4:	dc02      	bgt.n	800f7bc <_dtoa_r+0x9dc>
 800f7b6:	d1de      	bne.n	800f776 <_dtoa_r+0x996>
 800f7b8:	07da      	lsls	r2, r3, #31
 800f7ba:	d5dc      	bpl.n	800f776 <_dtoa_r+0x996>
 800f7bc:	2b39      	cmp	r3, #57	; 0x39
 800f7be:	d1d8      	bne.n	800f772 <_dtoa_r+0x992>
 800f7c0:	9a02      	ldr	r2, [sp, #8]
 800f7c2:	2339      	movs	r3, #57	; 0x39
 800f7c4:	7013      	strb	r3, [r2, #0]
 800f7c6:	4643      	mov	r3, r8
 800f7c8:	4698      	mov	r8, r3
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f7d0:	2a39      	cmp	r2, #57	; 0x39
 800f7d2:	d051      	beq.n	800f878 <_dtoa_r+0xa98>
 800f7d4:	3201      	adds	r2, #1
 800f7d6:	701a      	strb	r2, [r3, #0]
 800f7d8:	e745      	b.n	800f666 <_dtoa_r+0x886>
 800f7da:	2a00      	cmp	r2, #0
 800f7dc:	dd03      	ble.n	800f7e6 <_dtoa_r+0xa06>
 800f7de:	2b39      	cmp	r3, #57	; 0x39
 800f7e0:	d0ee      	beq.n	800f7c0 <_dtoa_r+0x9e0>
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	e7c7      	b.n	800f776 <_dtoa_r+0x996>
 800f7e6:	9a05      	ldr	r2, [sp, #20]
 800f7e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f7ee:	428a      	cmp	r2, r1
 800f7f0:	d02b      	beq.n	800f84a <_dtoa_r+0xa6a>
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	220a      	movs	r2, #10
 800f7f8:	4630      	mov	r0, r6
 800f7fa:	f000 fb0f 	bl	800fe1c <__multadd>
 800f7fe:	45b9      	cmp	r9, r7
 800f800:	4605      	mov	r5, r0
 800f802:	f04f 0300 	mov.w	r3, #0
 800f806:	f04f 020a 	mov.w	r2, #10
 800f80a:	4649      	mov	r1, r9
 800f80c:	4630      	mov	r0, r6
 800f80e:	d107      	bne.n	800f820 <_dtoa_r+0xa40>
 800f810:	f000 fb04 	bl	800fe1c <__multadd>
 800f814:	4681      	mov	r9, r0
 800f816:	4607      	mov	r7, r0
 800f818:	9b05      	ldr	r3, [sp, #20]
 800f81a:	3301      	adds	r3, #1
 800f81c:	9305      	str	r3, [sp, #20]
 800f81e:	e774      	b.n	800f70a <_dtoa_r+0x92a>
 800f820:	f000 fafc 	bl	800fe1c <__multadd>
 800f824:	4639      	mov	r1, r7
 800f826:	4681      	mov	r9, r0
 800f828:	2300      	movs	r3, #0
 800f82a:	220a      	movs	r2, #10
 800f82c:	4630      	mov	r0, r6
 800f82e:	f000 faf5 	bl	800fe1c <__multadd>
 800f832:	4607      	mov	r7, r0
 800f834:	e7f0      	b.n	800f818 <_dtoa_r+0xa38>
 800f836:	f1ba 0f00 	cmp.w	sl, #0
 800f83a:	9a00      	ldr	r2, [sp, #0]
 800f83c:	bfcc      	ite	gt
 800f83e:	46d0      	movgt	r8, sl
 800f840:	f04f 0801 	movle.w	r8, #1
 800f844:	4490      	add	r8, r2
 800f846:	f04f 0900 	mov.w	r9, #0
 800f84a:	4629      	mov	r1, r5
 800f84c:	2201      	movs	r2, #1
 800f84e:	4630      	mov	r0, r6
 800f850:	9302      	str	r3, [sp, #8]
 800f852:	f000 fc93 	bl	801017c <__lshift>
 800f856:	4621      	mov	r1, r4
 800f858:	4605      	mov	r5, r0
 800f85a:	f000 fcfb 	bl	8010254 <__mcmp>
 800f85e:	2800      	cmp	r0, #0
 800f860:	dcb1      	bgt.n	800f7c6 <_dtoa_r+0x9e6>
 800f862:	d102      	bne.n	800f86a <_dtoa_r+0xa8a>
 800f864:	9b02      	ldr	r3, [sp, #8]
 800f866:	07db      	lsls	r3, r3, #31
 800f868:	d4ad      	bmi.n	800f7c6 <_dtoa_r+0x9e6>
 800f86a:	4643      	mov	r3, r8
 800f86c:	4698      	mov	r8, r3
 800f86e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f872:	2a30      	cmp	r2, #48	; 0x30
 800f874:	d0fa      	beq.n	800f86c <_dtoa_r+0xa8c>
 800f876:	e6f6      	b.n	800f666 <_dtoa_r+0x886>
 800f878:	9a00      	ldr	r2, [sp, #0]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d1a4      	bne.n	800f7c8 <_dtoa_r+0x9e8>
 800f87e:	f10b 0b01 	add.w	fp, fp, #1
 800f882:	2331      	movs	r3, #49	; 0x31
 800f884:	e778      	b.n	800f778 <_dtoa_r+0x998>
 800f886:	4b15      	ldr	r3, [pc, #84]	; (800f8dc <_dtoa_r+0xafc>)
 800f888:	f7ff bb12 	b.w	800eeb0 <_dtoa_r+0xd0>
 800f88c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f47f aaee 	bne.w	800ee70 <_dtoa_r+0x90>
 800f894:	4b12      	ldr	r3, [pc, #72]	; (800f8e0 <_dtoa_r+0xb00>)
 800f896:	f7ff bb0b 	b.w	800eeb0 <_dtoa_r+0xd0>
 800f89a:	f1ba 0f00 	cmp.w	sl, #0
 800f89e:	dc03      	bgt.n	800f8a8 <_dtoa_r+0xac8>
 800f8a0:	9b07      	ldr	r3, [sp, #28]
 800f8a2:	2b02      	cmp	r3, #2
 800f8a4:	f73f aec7 	bgt.w	800f636 <_dtoa_r+0x856>
 800f8a8:	f8dd 8000 	ldr.w	r8, [sp]
 800f8ac:	4621      	mov	r1, r4
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	f7ff fa0a 	bl	800ecc8 <quorem>
 800f8b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f8b8:	f808 3b01 	strb.w	r3, [r8], #1
 800f8bc:	9a00      	ldr	r2, [sp, #0]
 800f8be:	eba8 0202 	sub.w	r2, r8, r2
 800f8c2:	4592      	cmp	sl, r2
 800f8c4:	ddb7      	ble.n	800f836 <_dtoa_r+0xa56>
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	220a      	movs	r2, #10
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f000 faa5 	bl	800fe1c <__multadd>
 800f8d2:	4605      	mov	r5, r0
 800f8d4:	e7ea      	b.n	800f8ac <_dtoa_r+0xacc>
 800f8d6:	bf00      	nop
 800f8d8:	08010c93 	.word	0x08010c93
 800f8dc:	08010bec 	.word	0x08010bec
 800f8e0:	08010c10 	.word	0x08010c10

0800f8e4 <__sflush_r>:
 800f8e4:	898a      	ldrh	r2, [r1, #12]
 800f8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	0710      	lsls	r0, r2, #28
 800f8ee:	460c      	mov	r4, r1
 800f8f0:	d458      	bmi.n	800f9a4 <__sflush_r+0xc0>
 800f8f2:	684b      	ldr	r3, [r1, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	dc05      	bgt.n	800f904 <__sflush_r+0x20>
 800f8f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	dc02      	bgt.n	800f904 <__sflush_r+0x20>
 800f8fe:	2000      	movs	r0, #0
 800f900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f906:	2e00      	cmp	r6, #0
 800f908:	d0f9      	beq.n	800f8fe <__sflush_r+0x1a>
 800f90a:	2300      	movs	r3, #0
 800f90c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f910:	682f      	ldr	r7, [r5, #0]
 800f912:	602b      	str	r3, [r5, #0]
 800f914:	d032      	beq.n	800f97c <__sflush_r+0x98>
 800f916:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f918:	89a3      	ldrh	r3, [r4, #12]
 800f91a:	075a      	lsls	r2, r3, #29
 800f91c:	d505      	bpl.n	800f92a <__sflush_r+0x46>
 800f91e:	6863      	ldr	r3, [r4, #4]
 800f920:	1ac0      	subs	r0, r0, r3
 800f922:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f924:	b10b      	cbz	r3, 800f92a <__sflush_r+0x46>
 800f926:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f928:	1ac0      	subs	r0, r0, r3
 800f92a:	2300      	movs	r3, #0
 800f92c:	4602      	mov	r2, r0
 800f92e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f930:	6a21      	ldr	r1, [r4, #32]
 800f932:	4628      	mov	r0, r5
 800f934:	47b0      	blx	r6
 800f936:	1c43      	adds	r3, r0, #1
 800f938:	89a3      	ldrh	r3, [r4, #12]
 800f93a:	d106      	bne.n	800f94a <__sflush_r+0x66>
 800f93c:	6829      	ldr	r1, [r5, #0]
 800f93e:	291d      	cmp	r1, #29
 800f940:	d82c      	bhi.n	800f99c <__sflush_r+0xb8>
 800f942:	4a2a      	ldr	r2, [pc, #168]	; (800f9ec <__sflush_r+0x108>)
 800f944:	40ca      	lsrs	r2, r1
 800f946:	07d6      	lsls	r6, r2, #31
 800f948:	d528      	bpl.n	800f99c <__sflush_r+0xb8>
 800f94a:	2200      	movs	r2, #0
 800f94c:	6062      	str	r2, [r4, #4]
 800f94e:	04d9      	lsls	r1, r3, #19
 800f950:	6922      	ldr	r2, [r4, #16]
 800f952:	6022      	str	r2, [r4, #0]
 800f954:	d504      	bpl.n	800f960 <__sflush_r+0x7c>
 800f956:	1c42      	adds	r2, r0, #1
 800f958:	d101      	bne.n	800f95e <__sflush_r+0x7a>
 800f95a:	682b      	ldr	r3, [r5, #0]
 800f95c:	b903      	cbnz	r3, 800f960 <__sflush_r+0x7c>
 800f95e:	6560      	str	r0, [r4, #84]	; 0x54
 800f960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f962:	602f      	str	r7, [r5, #0]
 800f964:	2900      	cmp	r1, #0
 800f966:	d0ca      	beq.n	800f8fe <__sflush_r+0x1a>
 800f968:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f96c:	4299      	cmp	r1, r3
 800f96e:	d002      	beq.n	800f976 <__sflush_r+0x92>
 800f970:	4628      	mov	r0, r5
 800f972:	f000 fd7f 	bl	8010474 <_free_r>
 800f976:	2000      	movs	r0, #0
 800f978:	6360      	str	r0, [r4, #52]	; 0x34
 800f97a:	e7c1      	b.n	800f900 <__sflush_r+0x1c>
 800f97c:	6a21      	ldr	r1, [r4, #32]
 800f97e:	2301      	movs	r3, #1
 800f980:	4628      	mov	r0, r5
 800f982:	47b0      	blx	r6
 800f984:	1c41      	adds	r1, r0, #1
 800f986:	d1c7      	bne.n	800f918 <__sflush_r+0x34>
 800f988:	682b      	ldr	r3, [r5, #0]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d0c4      	beq.n	800f918 <__sflush_r+0x34>
 800f98e:	2b1d      	cmp	r3, #29
 800f990:	d001      	beq.n	800f996 <__sflush_r+0xb2>
 800f992:	2b16      	cmp	r3, #22
 800f994:	d101      	bne.n	800f99a <__sflush_r+0xb6>
 800f996:	602f      	str	r7, [r5, #0]
 800f998:	e7b1      	b.n	800f8fe <__sflush_r+0x1a>
 800f99a:	89a3      	ldrh	r3, [r4, #12]
 800f99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a0:	81a3      	strh	r3, [r4, #12]
 800f9a2:	e7ad      	b.n	800f900 <__sflush_r+0x1c>
 800f9a4:	690f      	ldr	r7, [r1, #16]
 800f9a6:	2f00      	cmp	r7, #0
 800f9a8:	d0a9      	beq.n	800f8fe <__sflush_r+0x1a>
 800f9aa:	0793      	lsls	r3, r2, #30
 800f9ac:	680e      	ldr	r6, [r1, #0]
 800f9ae:	bf08      	it	eq
 800f9b0:	694b      	ldreq	r3, [r1, #20]
 800f9b2:	600f      	str	r7, [r1, #0]
 800f9b4:	bf18      	it	ne
 800f9b6:	2300      	movne	r3, #0
 800f9b8:	eba6 0807 	sub.w	r8, r6, r7
 800f9bc:	608b      	str	r3, [r1, #8]
 800f9be:	f1b8 0f00 	cmp.w	r8, #0
 800f9c2:	dd9c      	ble.n	800f8fe <__sflush_r+0x1a>
 800f9c4:	6a21      	ldr	r1, [r4, #32]
 800f9c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f9c8:	4643      	mov	r3, r8
 800f9ca:	463a      	mov	r2, r7
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	47b0      	blx	r6
 800f9d0:	2800      	cmp	r0, #0
 800f9d2:	dc06      	bgt.n	800f9e2 <__sflush_r+0xfe>
 800f9d4:	89a3      	ldrh	r3, [r4, #12]
 800f9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9da:	81a3      	strh	r3, [r4, #12]
 800f9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e0:	e78e      	b.n	800f900 <__sflush_r+0x1c>
 800f9e2:	4407      	add	r7, r0
 800f9e4:	eba8 0800 	sub.w	r8, r8, r0
 800f9e8:	e7e9      	b.n	800f9be <__sflush_r+0xda>
 800f9ea:	bf00      	nop
 800f9ec:	20400001 	.word	0x20400001

0800f9f0 <_fflush_r>:
 800f9f0:	b538      	push	{r3, r4, r5, lr}
 800f9f2:	690b      	ldr	r3, [r1, #16]
 800f9f4:	4605      	mov	r5, r0
 800f9f6:	460c      	mov	r4, r1
 800f9f8:	b913      	cbnz	r3, 800fa00 <_fflush_r+0x10>
 800f9fa:	2500      	movs	r5, #0
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	bd38      	pop	{r3, r4, r5, pc}
 800fa00:	b118      	cbz	r0, 800fa0a <_fflush_r+0x1a>
 800fa02:	6983      	ldr	r3, [r0, #24]
 800fa04:	b90b      	cbnz	r3, 800fa0a <_fflush_r+0x1a>
 800fa06:	f000 f887 	bl	800fb18 <__sinit>
 800fa0a:	4b14      	ldr	r3, [pc, #80]	; (800fa5c <_fflush_r+0x6c>)
 800fa0c:	429c      	cmp	r4, r3
 800fa0e:	d11b      	bne.n	800fa48 <_fflush_r+0x58>
 800fa10:	686c      	ldr	r4, [r5, #4]
 800fa12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d0ef      	beq.n	800f9fa <_fflush_r+0xa>
 800fa1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa1c:	07d0      	lsls	r0, r2, #31
 800fa1e:	d404      	bmi.n	800fa2a <_fflush_r+0x3a>
 800fa20:	0599      	lsls	r1, r3, #22
 800fa22:	d402      	bmi.n	800fa2a <_fflush_r+0x3a>
 800fa24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa26:	f000 f91a 	bl	800fc5e <__retarget_lock_acquire_recursive>
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	4621      	mov	r1, r4
 800fa2e:	f7ff ff59 	bl	800f8e4 <__sflush_r>
 800fa32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa34:	07da      	lsls	r2, r3, #31
 800fa36:	4605      	mov	r5, r0
 800fa38:	d4e0      	bmi.n	800f9fc <_fflush_r+0xc>
 800fa3a:	89a3      	ldrh	r3, [r4, #12]
 800fa3c:	059b      	lsls	r3, r3, #22
 800fa3e:	d4dd      	bmi.n	800f9fc <_fflush_r+0xc>
 800fa40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa42:	f000 f90d 	bl	800fc60 <__retarget_lock_release_recursive>
 800fa46:	e7d9      	b.n	800f9fc <_fflush_r+0xc>
 800fa48:	4b05      	ldr	r3, [pc, #20]	; (800fa60 <_fflush_r+0x70>)
 800fa4a:	429c      	cmp	r4, r3
 800fa4c:	d101      	bne.n	800fa52 <_fflush_r+0x62>
 800fa4e:	68ac      	ldr	r4, [r5, #8]
 800fa50:	e7df      	b.n	800fa12 <_fflush_r+0x22>
 800fa52:	4b04      	ldr	r3, [pc, #16]	; (800fa64 <_fflush_r+0x74>)
 800fa54:	429c      	cmp	r4, r3
 800fa56:	bf08      	it	eq
 800fa58:	68ec      	ldreq	r4, [r5, #12]
 800fa5a:	e7da      	b.n	800fa12 <_fflush_r+0x22>
 800fa5c:	08010cc4 	.word	0x08010cc4
 800fa60:	08010ce4 	.word	0x08010ce4
 800fa64:	08010ca4 	.word	0x08010ca4

0800fa68 <std>:
 800fa68:	2300      	movs	r3, #0
 800fa6a:	b510      	push	{r4, lr}
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	e9c0 3300 	strd	r3, r3, [r0]
 800fa72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa76:	6083      	str	r3, [r0, #8]
 800fa78:	8181      	strh	r1, [r0, #12]
 800fa7a:	6643      	str	r3, [r0, #100]	; 0x64
 800fa7c:	81c2      	strh	r2, [r0, #14]
 800fa7e:	6183      	str	r3, [r0, #24]
 800fa80:	4619      	mov	r1, r3
 800fa82:	2208      	movs	r2, #8
 800fa84:	305c      	adds	r0, #92	; 0x5c
 800fa86:	f7fe fb87 	bl	800e198 <memset>
 800fa8a:	4b05      	ldr	r3, [pc, #20]	; (800faa0 <std+0x38>)
 800fa8c:	6263      	str	r3, [r4, #36]	; 0x24
 800fa8e:	4b05      	ldr	r3, [pc, #20]	; (800faa4 <std+0x3c>)
 800fa90:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa92:	4b05      	ldr	r3, [pc, #20]	; (800faa8 <std+0x40>)
 800fa94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa96:	4b05      	ldr	r3, [pc, #20]	; (800faac <std+0x44>)
 800fa98:	6224      	str	r4, [r4, #32]
 800fa9a:	6323      	str	r3, [r4, #48]	; 0x30
 800fa9c:	bd10      	pop	{r4, pc}
 800fa9e:	bf00      	nop
 800faa0:	0801089d 	.word	0x0801089d
 800faa4:	080108bf 	.word	0x080108bf
 800faa8:	080108f7 	.word	0x080108f7
 800faac:	0801091b 	.word	0x0801091b

0800fab0 <_cleanup_r>:
 800fab0:	4901      	ldr	r1, [pc, #4]	; (800fab8 <_cleanup_r+0x8>)
 800fab2:	f000 b8af 	b.w	800fc14 <_fwalk_reent>
 800fab6:	bf00      	nop
 800fab8:	0800f9f1 	.word	0x0800f9f1

0800fabc <__sfmoreglue>:
 800fabc:	b570      	push	{r4, r5, r6, lr}
 800fabe:	1e4a      	subs	r2, r1, #1
 800fac0:	2568      	movs	r5, #104	; 0x68
 800fac2:	4355      	muls	r5, r2
 800fac4:	460e      	mov	r6, r1
 800fac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800faca:	f000 fd23 	bl	8010514 <_malloc_r>
 800face:	4604      	mov	r4, r0
 800fad0:	b140      	cbz	r0, 800fae4 <__sfmoreglue+0x28>
 800fad2:	2100      	movs	r1, #0
 800fad4:	e9c0 1600 	strd	r1, r6, [r0]
 800fad8:	300c      	adds	r0, #12
 800fada:	60a0      	str	r0, [r4, #8]
 800fadc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fae0:	f7fe fb5a 	bl	800e198 <memset>
 800fae4:	4620      	mov	r0, r4
 800fae6:	bd70      	pop	{r4, r5, r6, pc}

0800fae8 <__sfp_lock_acquire>:
 800fae8:	4801      	ldr	r0, [pc, #4]	; (800faf0 <__sfp_lock_acquire+0x8>)
 800faea:	f000 b8b8 	b.w	800fc5e <__retarget_lock_acquire_recursive>
 800faee:	bf00      	nop
 800faf0:	24000580 	.word	0x24000580

0800faf4 <__sfp_lock_release>:
 800faf4:	4801      	ldr	r0, [pc, #4]	; (800fafc <__sfp_lock_release+0x8>)
 800faf6:	f000 b8b3 	b.w	800fc60 <__retarget_lock_release_recursive>
 800fafa:	bf00      	nop
 800fafc:	24000580 	.word	0x24000580

0800fb00 <__sinit_lock_acquire>:
 800fb00:	4801      	ldr	r0, [pc, #4]	; (800fb08 <__sinit_lock_acquire+0x8>)
 800fb02:	f000 b8ac 	b.w	800fc5e <__retarget_lock_acquire_recursive>
 800fb06:	bf00      	nop
 800fb08:	2400057b 	.word	0x2400057b

0800fb0c <__sinit_lock_release>:
 800fb0c:	4801      	ldr	r0, [pc, #4]	; (800fb14 <__sinit_lock_release+0x8>)
 800fb0e:	f000 b8a7 	b.w	800fc60 <__retarget_lock_release_recursive>
 800fb12:	bf00      	nop
 800fb14:	2400057b 	.word	0x2400057b

0800fb18 <__sinit>:
 800fb18:	b510      	push	{r4, lr}
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	f7ff fff0 	bl	800fb00 <__sinit_lock_acquire>
 800fb20:	69a3      	ldr	r3, [r4, #24]
 800fb22:	b11b      	cbz	r3, 800fb2c <__sinit+0x14>
 800fb24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb28:	f7ff bff0 	b.w	800fb0c <__sinit_lock_release>
 800fb2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fb30:	6523      	str	r3, [r4, #80]	; 0x50
 800fb32:	4b13      	ldr	r3, [pc, #76]	; (800fb80 <__sinit+0x68>)
 800fb34:	4a13      	ldr	r2, [pc, #76]	; (800fb84 <__sinit+0x6c>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	62a2      	str	r2, [r4, #40]	; 0x28
 800fb3a:	42a3      	cmp	r3, r4
 800fb3c:	bf04      	itt	eq
 800fb3e:	2301      	moveq	r3, #1
 800fb40:	61a3      	streq	r3, [r4, #24]
 800fb42:	4620      	mov	r0, r4
 800fb44:	f000 f820 	bl	800fb88 <__sfp>
 800fb48:	6060      	str	r0, [r4, #4]
 800fb4a:	4620      	mov	r0, r4
 800fb4c:	f000 f81c 	bl	800fb88 <__sfp>
 800fb50:	60a0      	str	r0, [r4, #8]
 800fb52:	4620      	mov	r0, r4
 800fb54:	f000 f818 	bl	800fb88 <__sfp>
 800fb58:	2200      	movs	r2, #0
 800fb5a:	60e0      	str	r0, [r4, #12]
 800fb5c:	2104      	movs	r1, #4
 800fb5e:	6860      	ldr	r0, [r4, #4]
 800fb60:	f7ff ff82 	bl	800fa68 <std>
 800fb64:	68a0      	ldr	r0, [r4, #8]
 800fb66:	2201      	movs	r2, #1
 800fb68:	2109      	movs	r1, #9
 800fb6a:	f7ff ff7d 	bl	800fa68 <std>
 800fb6e:	68e0      	ldr	r0, [r4, #12]
 800fb70:	2202      	movs	r2, #2
 800fb72:	2112      	movs	r1, #18
 800fb74:	f7ff ff78 	bl	800fa68 <std>
 800fb78:	2301      	movs	r3, #1
 800fb7a:	61a3      	str	r3, [r4, #24]
 800fb7c:	e7d2      	b.n	800fb24 <__sinit+0xc>
 800fb7e:	bf00      	nop
 800fb80:	08010bd8 	.word	0x08010bd8
 800fb84:	0800fab1 	.word	0x0800fab1

0800fb88 <__sfp>:
 800fb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb8a:	4607      	mov	r7, r0
 800fb8c:	f7ff ffac 	bl	800fae8 <__sfp_lock_acquire>
 800fb90:	4b1e      	ldr	r3, [pc, #120]	; (800fc0c <__sfp+0x84>)
 800fb92:	681e      	ldr	r6, [r3, #0]
 800fb94:	69b3      	ldr	r3, [r6, #24]
 800fb96:	b913      	cbnz	r3, 800fb9e <__sfp+0x16>
 800fb98:	4630      	mov	r0, r6
 800fb9a:	f7ff ffbd 	bl	800fb18 <__sinit>
 800fb9e:	3648      	adds	r6, #72	; 0x48
 800fba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fba4:	3b01      	subs	r3, #1
 800fba6:	d503      	bpl.n	800fbb0 <__sfp+0x28>
 800fba8:	6833      	ldr	r3, [r6, #0]
 800fbaa:	b30b      	cbz	r3, 800fbf0 <__sfp+0x68>
 800fbac:	6836      	ldr	r6, [r6, #0]
 800fbae:	e7f7      	b.n	800fba0 <__sfp+0x18>
 800fbb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fbb4:	b9d5      	cbnz	r5, 800fbec <__sfp+0x64>
 800fbb6:	4b16      	ldr	r3, [pc, #88]	; (800fc10 <__sfp+0x88>)
 800fbb8:	60e3      	str	r3, [r4, #12]
 800fbba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fbbe:	6665      	str	r5, [r4, #100]	; 0x64
 800fbc0:	f000 f84c 	bl	800fc5c <__retarget_lock_init_recursive>
 800fbc4:	f7ff ff96 	bl	800faf4 <__sfp_lock_release>
 800fbc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fbcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fbd0:	6025      	str	r5, [r4, #0]
 800fbd2:	61a5      	str	r5, [r4, #24]
 800fbd4:	2208      	movs	r2, #8
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fbdc:	f7fe fadc 	bl	800e198 <memset>
 800fbe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fbe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fbe8:	4620      	mov	r0, r4
 800fbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbec:	3468      	adds	r4, #104	; 0x68
 800fbee:	e7d9      	b.n	800fba4 <__sfp+0x1c>
 800fbf0:	2104      	movs	r1, #4
 800fbf2:	4638      	mov	r0, r7
 800fbf4:	f7ff ff62 	bl	800fabc <__sfmoreglue>
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	6030      	str	r0, [r6, #0]
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d1d5      	bne.n	800fbac <__sfp+0x24>
 800fc00:	f7ff ff78 	bl	800faf4 <__sfp_lock_release>
 800fc04:	230c      	movs	r3, #12
 800fc06:	603b      	str	r3, [r7, #0]
 800fc08:	e7ee      	b.n	800fbe8 <__sfp+0x60>
 800fc0a:	bf00      	nop
 800fc0c:	08010bd8 	.word	0x08010bd8
 800fc10:	ffff0001 	.word	0xffff0001

0800fc14 <_fwalk_reent>:
 800fc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc18:	4606      	mov	r6, r0
 800fc1a:	4688      	mov	r8, r1
 800fc1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fc20:	2700      	movs	r7, #0
 800fc22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fc26:	f1b9 0901 	subs.w	r9, r9, #1
 800fc2a:	d505      	bpl.n	800fc38 <_fwalk_reent+0x24>
 800fc2c:	6824      	ldr	r4, [r4, #0]
 800fc2e:	2c00      	cmp	r4, #0
 800fc30:	d1f7      	bne.n	800fc22 <_fwalk_reent+0xe>
 800fc32:	4638      	mov	r0, r7
 800fc34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc38:	89ab      	ldrh	r3, [r5, #12]
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d907      	bls.n	800fc4e <_fwalk_reent+0x3a>
 800fc3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc42:	3301      	adds	r3, #1
 800fc44:	d003      	beq.n	800fc4e <_fwalk_reent+0x3a>
 800fc46:	4629      	mov	r1, r5
 800fc48:	4630      	mov	r0, r6
 800fc4a:	47c0      	blx	r8
 800fc4c:	4307      	orrs	r7, r0
 800fc4e:	3568      	adds	r5, #104	; 0x68
 800fc50:	e7e9      	b.n	800fc26 <_fwalk_reent+0x12>
	...

0800fc54 <_localeconv_r>:
 800fc54:	4800      	ldr	r0, [pc, #0]	; (800fc58 <_localeconv_r+0x4>)
 800fc56:	4770      	bx	lr
 800fc58:	24000170 	.word	0x24000170

0800fc5c <__retarget_lock_init_recursive>:
 800fc5c:	4770      	bx	lr

0800fc5e <__retarget_lock_acquire_recursive>:
 800fc5e:	4770      	bx	lr

0800fc60 <__retarget_lock_release_recursive>:
 800fc60:	4770      	bx	lr

0800fc62 <__swhatbuf_r>:
 800fc62:	b570      	push	{r4, r5, r6, lr}
 800fc64:	460e      	mov	r6, r1
 800fc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc6a:	2900      	cmp	r1, #0
 800fc6c:	b096      	sub	sp, #88	; 0x58
 800fc6e:	4614      	mov	r4, r2
 800fc70:	461d      	mov	r5, r3
 800fc72:	da07      	bge.n	800fc84 <__swhatbuf_r+0x22>
 800fc74:	2300      	movs	r3, #0
 800fc76:	602b      	str	r3, [r5, #0]
 800fc78:	89b3      	ldrh	r3, [r6, #12]
 800fc7a:	061a      	lsls	r2, r3, #24
 800fc7c:	d410      	bmi.n	800fca0 <__swhatbuf_r+0x3e>
 800fc7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc82:	e00e      	b.n	800fca2 <__swhatbuf_r+0x40>
 800fc84:	466a      	mov	r2, sp
 800fc86:	f000 fe9f 	bl	80109c8 <_fstat_r>
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	dbf2      	blt.n	800fc74 <__swhatbuf_r+0x12>
 800fc8e:	9a01      	ldr	r2, [sp, #4]
 800fc90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc98:	425a      	negs	r2, r3
 800fc9a:	415a      	adcs	r2, r3
 800fc9c:	602a      	str	r2, [r5, #0]
 800fc9e:	e7ee      	b.n	800fc7e <__swhatbuf_r+0x1c>
 800fca0:	2340      	movs	r3, #64	; 0x40
 800fca2:	2000      	movs	r0, #0
 800fca4:	6023      	str	r3, [r4, #0]
 800fca6:	b016      	add	sp, #88	; 0x58
 800fca8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fcac <__smakebuf_r>:
 800fcac:	898b      	ldrh	r3, [r1, #12]
 800fcae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fcb0:	079d      	lsls	r5, r3, #30
 800fcb2:	4606      	mov	r6, r0
 800fcb4:	460c      	mov	r4, r1
 800fcb6:	d507      	bpl.n	800fcc8 <__smakebuf_r+0x1c>
 800fcb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fcbc:	6023      	str	r3, [r4, #0]
 800fcbe:	6123      	str	r3, [r4, #16]
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	6163      	str	r3, [r4, #20]
 800fcc4:	b002      	add	sp, #8
 800fcc6:	bd70      	pop	{r4, r5, r6, pc}
 800fcc8:	ab01      	add	r3, sp, #4
 800fcca:	466a      	mov	r2, sp
 800fccc:	f7ff ffc9 	bl	800fc62 <__swhatbuf_r>
 800fcd0:	9900      	ldr	r1, [sp, #0]
 800fcd2:	4605      	mov	r5, r0
 800fcd4:	4630      	mov	r0, r6
 800fcd6:	f000 fc1d 	bl	8010514 <_malloc_r>
 800fcda:	b948      	cbnz	r0, 800fcf0 <__smakebuf_r+0x44>
 800fcdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fce0:	059a      	lsls	r2, r3, #22
 800fce2:	d4ef      	bmi.n	800fcc4 <__smakebuf_r+0x18>
 800fce4:	f023 0303 	bic.w	r3, r3, #3
 800fce8:	f043 0302 	orr.w	r3, r3, #2
 800fcec:	81a3      	strh	r3, [r4, #12]
 800fcee:	e7e3      	b.n	800fcb8 <__smakebuf_r+0xc>
 800fcf0:	4b0d      	ldr	r3, [pc, #52]	; (800fd28 <__smakebuf_r+0x7c>)
 800fcf2:	62b3      	str	r3, [r6, #40]	; 0x28
 800fcf4:	89a3      	ldrh	r3, [r4, #12]
 800fcf6:	6020      	str	r0, [r4, #0]
 800fcf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcfc:	81a3      	strh	r3, [r4, #12]
 800fcfe:	9b00      	ldr	r3, [sp, #0]
 800fd00:	6163      	str	r3, [r4, #20]
 800fd02:	9b01      	ldr	r3, [sp, #4]
 800fd04:	6120      	str	r0, [r4, #16]
 800fd06:	b15b      	cbz	r3, 800fd20 <__smakebuf_r+0x74>
 800fd08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	f000 fe6d 	bl	80109ec <_isatty_r>
 800fd12:	b128      	cbz	r0, 800fd20 <__smakebuf_r+0x74>
 800fd14:	89a3      	ldrh	r3, [r4, #12]
 800fd16:	f023 0303 	bic.w	r3, r3, #3
 800fd1a:	f043 0301 	orr.w	r3, r3, #1
 800fd1e:	81a3      	strh	r3, [r4, #12]
 800fd20:	89a0      	ldrh	r0, [r4, #12]
 800fd22:	4305      	orrs	r5, r0
 800fd24:	81a5      	strh	r5, [r4, #12]
 800fd26:	e7cd      	b.n	800fcc4 <__smakebuf_r+0x18>
 800fd28:	0800fab1 	.word	0x0800fab1

0800fd2c <malloc>:
 800fd2c:	4b02      	ldr	r3, [pc, #8]	; (800fd38 <malloc+0xc>)
 800fd2e:	4601      	mov	r1, r0
 800fd30:	6818      	ldr	r0, [r3, #0]
 800fd32:	f000 bbef 	b.w	8010514 <_malloc_r>
 800fd36:	bf00      	nop
 800fd38:	2400001c 	.word	0x2400001c

0800fd3c <memcpy>:
 800fd3c:	440a      	add	r2, r1
 800fd3e:	4291      	cmp	r1, r2
 800fd40:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd44:	d100      	bne.n	800fd48 <memcpy+0xc>
 800fd46:	4770      	bx	lr
 800fd48:	b510      	push	{r4, lr}
 800fd4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd52:	4291      	cmp	r1, r2
 800fd54:	d1f9      	bne.n	800fd4a <memcpy+0xe>
 800fd56:	bd10      	pop	{r4, pc}

0800fd58 <_Balloc>:
 800fd58:	b570      	push	{r4, r5, r6, lr}
 800fd5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	460d      	mov	r5, r1
 800fd60:	b976      	cbnz	r6, 800fd80 <_Balloc+0x28>
 800fd62:	2010      	movs	r0, #16
 800fd64:	f7ff ffe2 	bl	800fd2c <malloc>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	6260      	str	r0, [r4, #36]	; 0x24
 800fd6c:	b920      	cbnz	r0, 800fd78 <_Balloc+0x20>
 800fd6e:	4b18      	ldr	r3, [pc, #96]	; (800fdd0 <_Balloc+0x78>)
 800fd70:	4818      	ldr	r0, [pc, #96]	; (800fdd4 <_Balloc+0x7c>)
 800fd72:	2166      	movs	r1, #102	; 0x66
 800fd74:	f000 fde8 	bl	8010948 <__assert_func>
 800fd78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd7c:	6006      	str	r6, [r0, #0]
 800fd7e:	60c6      	str	r6, [r0, #12]
 800fd80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fd82:	68f3      	ldr	r3, [r6, #12]
 800fd84:	b183      	cbz	r3, 800fda8 <_Balloc+0x50>
 800fd86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd8e:	b9b8      	cbnz	r0, 800fdc0 <_Balloc+0x68>
 800fd90:	2101      	movs	r1, #1
 800fd92:	fa01 f605 	lsl.w	r6, r1, r5
 800fd96:	1d72      	adds	r2, r6, #5
 800fd98:	0092      	lsls	r2, r2, #2
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f000 fb5a 	bl	8010454 <_calloc_r>
 800fda0:	b160      	cbz	r0, 800fdbc <_Balloc+0x64>
 800fda2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fda6:	e00e      	b.n	800fdc6 <_Balloc+0x6e>
 800fda8:	2221      	movs	r2, #33	; 0x21
 800fdaa:	2104      	movs	r1, #4
 800fdac:	4620      	mov	r0, r4
 800fdae:	f000 fb51 	bl	8010454 <_calloc_r>
 800fdb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdb4:	60f0      	str	r0, [r6, #12]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1e4      	bne.n	800fd86 <_Balloc+0x2e>
 800fdbc:	2000      	movs	r0, #0
 800fdbe:	bd70      	pop	{r4, r5, r6, pc}
 800fdc0:	6802      	ldr	r2, [r0, #0]
 800fdc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fdcc:	e7f7      	b.n	800fdbe <_Balloc+0x66>
 800fdce:	bf00      	nop
 800fdd0:	08010c1d 	.word	0x08010c1d
 800fdd4:	08010d04 	.word	0x08010d04

0800fdd8 <_Bfree>:
 800fdd8:	b570      	push	{r4, r5, r6, lr}
 800fdda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fddc:	4605      	mov	r5, r0
 800fdde:	460c      	mov	r4, r1
 800fde0:	b976      	cbnz	r6, 800fe00 <_Bfree+0x28>
 800fde2:	2010      	movs	r0, #16
 800fde4:	f7ff ffa2 	bl	800fd2c <malloc>
 800fde8:	4602      	mov	r2, r0
 800fdea:	6268      	str	r0, [r5, #36]	; 0x24
 800fdec:	b920      	cbnz	r0, 800fdf8 <_Bfree+0x20>
 800fdee:	4b09      	ldr	r3, [pc, #36]	; (800fe14 <_Bfree+0x3c>)
 800fdf0:	4809      	ldr	r0, [pc, #36]	; (800fe18 <_Bfree+0x40>)
 800fdf2:	218a      	movs	r1, #138	; 0x8a
 800fdf4:	f000 fda8 	bl	8010948 <__assert_func>
 800fdf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fdfc:	6006      	str	r6, [r0, #0]
 800fdfe:	60c6      	str	r6, [r0, #12]
 800fe00:	b13c      	cbz	r4, 800fe12 <_Bfree+0x3a>
 800fe02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fe04:	6862      	ldr	r2, [r4, #4]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe0c:	6021      	str	r1, [r4, #0]
 800fe0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	08010c1d 	.word	0x08010c1d
 800fe18:	08010d04 	.word	0x08010d04

0800fe1c <__multadd>:
 800fe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe20:	690e      	ldr	r6, [r1, #16]
 800fe22:	4607      	mov	r7, r0
 800fe24:	4698      	mov	r8, r3
 800fe26:	460c      	mov	r4, r1
 800fe28:	f101 0014 	add.w	r0, r1, #20
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	6805      	ldr	r5, [r0, #0]
 800fe30:	b2a9      	uxth	r1, r5
 800fe32:	fb02 8101 	mla	r1, r2, r1, r8
 800fe36:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fe3a:	0c2d      	lsrs	r5, r5, #16
 800fe3c:	fb02 c505 	mla	r5, r2, r5, ip
 800fe40:	b289      	uxth	r1, r1
 800fe42:	3301      	adds	r3, #1
 800fe44:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fe48:	429e      	cmp	r6, r3
 800fe4a:	f840 1b04 	str.w	r1, [r0], #4
 800fe4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fe52:	dcec      	bgt.n	800fe2e <__multadd+0x12>
 800fe54:	f1b8 0f00 	cmp.w	r8, #0
 800fe58:	d022      	beq.n	800fea0 <__multadd+0x84>
 800fe5a:	68a3      	ldr	r3, [r4, #8]
 800fe5c:	42b3      	cmp	r3, r6
 800fe5e:	dc19      	bgt.n	800fe94 <__multadd+0x78>
 800fe60:	6861      	ldr	r1, [r4, #4]
 800fe62:	4638      	mov	r0, r7
 800fe64:	3101      	adds	r1, #1
 800fe66:	f7ff ff77 	bl	800fd58 <_Balloc>
 800fe6a:	4605      	mov	r5, r0
 800fe6c:	b928      	cbnz	r0, 800fe7a <__multadd+0x5e>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	4b0d      	ldr	r3, [pc, #52]	; (800fea8 <__multadd+0x8c>)
 800fe72:	480e      	ldr	r0, [pc, #56]	; (800feac <__multadd+0x90>)
 800fe74:	21b5      	movs	r1, #181	; 0xb5
 800fe76:	f000 fd67 	bl	8010948 <__assert_func>
 800fe7a:	6922      	ldr	r2, [r4, #16]
 800fe7c:	3202      	adds	r2, #2
 800fe7e:	f104 010c 	add.w	r1, r4, #12
 800fe82:	0092      	lsls	r2, r2, #2
 800fe84:	300c      	adds	r0, #12
 800fe86:	f7ff ff59 	bl	800fd3c <memcpy>
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	4638      	mov	r0, r7
 800fe8e:	f7ff ffa3 	bl	800fdd8 <_Bfree>
 800fe92:	462c      	mov	r4, r5
 800fe94:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fe98:	3601      	adds	r6, #1
 800fe9a:	f8c3 8014 	str.w	r8, [r3, #20]
 800fe9e:	6126      	str	r6, [r4, #16]
 800fea0:	4620      	mov	r0, r4
 800fea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea6:	bf00      	nop
 800fea8:	08010c93 	.word	0x08010c93
 800feac:	08010d04 	.word	0x08010d04

0800feb0 <__hi0bits>:
 800feb0:	0c03      	lsrs	r3, r0, #16
 800feb2:	041b      	lsls	r3, r3, #16
 800feb4:	b9d3      	cbnz	r3, 800feec <__hi0bits+0x3c>
 800feb6:	0400      	lsls	r0, r0, #16
 800feb8:	2310      	movs	r3, #16
 800feba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800febe:	bf04      	itt	eq
 800fec0:	0200      	lsleq	r0, r0, #8
 800fec2:	3308      	addeq	r3, #8
 800fec4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fec8:	bf04      	itt	eq
 800feca:	0100      	lsleq	r0, r0, #4
 800fecc:	3304      	addeq	r3, #4
 800fece:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fed2:	bf04      	itt	eq
 800fed4:	0080      	lsleq	r0, r0, #2
 800fed6:	3302      	addeq	r3, #2
 800fed8:	2800      	cmp	r0, #0
 800feda:	db05      	blt.n	800fee8 <__hi0bits+0x38>
 800fedc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fee0:	f103 0301 	add.w	r3, r3, #1
 800fee4:	bf08      	it	eq
 800fee6:	2320      	moveq	r3, #32
 800fee8:	4618      	mov	r0, r3
 800feea:	4770      	bx	lr
 800feec:	2300      	movs	r3, #0
 800feee:	e7e4      	b.n	800feba <__hi0bits+0xa>

0800fef0 <__lo0bits>:
 800fef0:	6803      	ldr	r3, [r0, #0]
 800fef2:	f013 0207 	ands.w	r2, r3, #7
 800fef6:	4601      	mov	r1, r0
 800fef8:	d00b      	beq.n	800ff12 <__lo0bits+0x22>
 800fefa:	07da      	lsls	r2, r3, #31
 800fefc:	d424      	bmi.n	800ff48 <__lo0bits+0x58>
 800fefe:	0798      	lsls	r0, r3, #30
 800ff00:	bf49      	itett	mi
 800ff02:	085b      	lsrmi	r3, r3, #1
 800ff04:	089b      	lsrpl	r3, r3, #2
 800ff06:	2001      	movmi	r0, #1
 800ff08:	600b      	strmi	r3, [r1, #0]
 800ff0a:	bf5c      	itt	pl
 800ff0c:	600b      	strpl	r3, [r1, #0]
 800ff0e:	2002      	movpl	r0, #2
 800ff10:	4770      	bx	lr
 800ff12:	b298      	uxth	r0, r3
 800ff14:	b9b0      	cbnz	r0, 800ff44 <__lo0bits+0x54>
 800ff16:	0c1b      	lsrs	r3, r3, #16
 800ff18:	2010      	movs	r0, #16
 800ff1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ff1e:	bf04      	itt	eq
 800ff20:	0a1b      	lsreq	r3, r3, #8
 800ff22:	3008      	addeq	r0, #8
 800ff24:	071a      	lsls	r2, r3, #28
 800ff26:	bf04      	itt	eq
 800ff28:	091b      	lsreq	r3, r3, #4
 800ff2a:	3004      	addeq	r0, #4
 800ff2c:	079a      	lsls	r2, r3, #30
 800ff2e:	bf04      	itt	eq
 800ff30:	089b      	lsreq	r3, r3, #2
 800ff32:	3002      	addeq	r0, #2
 800ff34:	07da      	lsls	r2, r3, #31
 800ff36:	d403      	bmi.n	800ff40 <__lo0bits+0x50>
 800ff38:	085b      	lsrs	r3, r3, #1
 800ff3a:	f100 0001 	add.w	r0, r0, #1
 800ff3e:	d005      	beq.n	800ff4c <__lo0bits+0x5c>
 800ff40:	600b      	str	r3, [r1, #0]
 800ff42:	4770      	bx	lr
 800ff44:	4610      	mov	r0, r2
 800ff46:	e7e8      	b.n	800ff1a <__lo0bits+0x2a>
 800ff48:	2000      	movs	r0, #0
 800ff4a:	4770      	bx	lr
 800ff4c:	2020      	movs	r0, #32
 800ff4e:	4770      	bx	lr

0800ff50 <__i2b>:
 800ff50:	b510      	push	{r4, lr}
 800ff52:	460c      	mov	r4, r1
 800ff54:	2101      	movs	r1, #1
 800ff56:	f7ff feff 	bl	800fd58 <_Balloc>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	b928      	cbnz	r0, 800ff6a <__i2b+0x1a>
 800ff5e:	4b05      	ldr	r3, [pc, #20]	; (800ff74 <__i2b+0x24>)
 800ff60:	4805      	ldr	r0, [pc, #20]	; (800ff78 <__i2b+0x28>)
 800ff62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ff66:	f000 fcef 	bl	8010948 <__assert_func>
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	6144      	str	r4, [r0, #20]
 800ff6e:	6103      	str	r3, [r0, #16]
 800ff70:	bd10      	pop	{r4, pc}
 800ff72:	bf00      	nop
 800ff74:	08010c93 	.word	0x08010c93
 800ff78:	08010d04 	.word	0x08010d04

0800ff7c <__multiply>:
 800ff7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff80:	4614      	mov	r4, r2
 800ff82:	690a      	ldr	r2, [r1, #16]
 800ff84:	6923      	ldr	r3, [r4, #16]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	bfb8      	it	lt
 800ff8a:	460b      	movlt	r3, r1
 800ff8c:	460d      	mov	r5, r1
 800ff8e:	bfbc      	itt	lt
 800ff90:	4625      	movlt	r5, r4
 800ff92:	461c      	movlt	r4, r3
 800ff94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ff98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ff9c:	68ab      	ldr	r3, [r5, #8]
 800ff9e:	6869      	ldr	r1, [r5, #4]
 800ffa0:	eb0a 0709 	add.w	r7, sl, r9
 800ffa4:	42bb      	cmp	r3, r7
 800ffa6:	b085      	sub	sp, #20
 800ffa8:	bfb8      	it	lt
 800ffaa:	3101      	addlt	r1, #1
 800ffac:	f7ff fed4 	bl	800fd58 <_Balloc>
 800ffb0:	b930      	cbnz	r0, 800ffc0 <__multiply+0x44>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	4b42      	ldr	r3, [pc, #264]	; (80100c0 <__multiply+0x144>)
 800ffb6:	4843      	ldr	r0, [pc, #268]	; (80100c4 <__multiply+0x148>)
 800ffb8:	f240 115d 	movw	r1, #349	; 0x15d
 800ffbc:	f000 fcc4 	bl	8010948 <__assert_func>
 800ffc0:	f100 0614 	add.w	r6, r0, #20
 800ffc4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ffc8:	4633      	mov	r3, r6
 800ffca:	2200      	movs	r2, #0
 800ffcc:	4543      	cmp	r3, r8
 800ffce:	d31e      	bcc.n	801000e <__multiply+0x92>
 800ffd0:	f105 0c14 	add.w	ip, r5, #20
 800ffd4:	f104 0314 	add.w	r3, r4, #20
 800ffd8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ffdc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ffe0:	9202      	str	r2, [sp, #8]
 800ffe2:	ebac 0205 	sub.w	r2, ip, r5
 800ffe6:	3a15      	subs	r2, #21
 800ffe8:	f022 0203 	bic.w	r2, r2, #3
 800ffec:	3204      	adds	r2, #4
 800ffee:	f105 0115 	add.w	r1, r5, #21
 800fff2:	458c      	cmp	ip, r1
 800fff4:	bf38      	it	cc
 800fff6:	2204      	movcc	r2, #4
 800fff8:	9201      	str	r2, [sp, #4]
 800fffa:	9a02      	ldr	r2, [sp, #8]
 800fffc:	9303      	str	r3, [sp, #12]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d808      	bhi.n	8010014 <__multiply+0x98>
 8010002:	2f00      	cmp	r7, #0
 8010004:	dc55      	bgt.n	80100b2 <__multiply+0x136>
 8010006:	6107      	str	r7, [r0, #16]
 8010008:	b005      	add	sp, #20
 801000a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000e:	f843 2b04 	str.w	r2, [r3], #4
 8010012:	e7db      	b.n	800ffcc <__multiply+0x50>
 8010014:	f8b3 a000 	ldrh.w	sl, [r3]
 8010018:	f1ba 0f00 	cmp.w	sl, #0
 801001c:	d020      	beq.n	8010060 <__multiply+0xe4>
 801001e:	f105 0e14 	add.w	lr, r5, #20
 8010022:	46b1      	mov	r9, r6
 8010024:	2200      	movs	r2, #0
 8010026:	f85e 4b04 	ldr.w	r4, [lr], #4
 801002a:	f8d9 b000 	ldr.w	fp, [r9]
 801002e:	b2a1      	uxth	r1, r4
 8010030:	fa1f fb8b 	uxth.w	fp, fp
 8010034:	fb0a b101 	mla	r1, sl, r1, fp
 8010038:	4411      	add	r1, r2
 801003a:	f8d9 2000 	ldr.w	r2, [r9]
 801003e:	0c24      	lsrs	r4, r4, #16
 8010040:	0c12      	lsrs	r2, r2, #16
 8010042:	fb0a 2404 	mla	r4, sl, r4, r2
 8010046:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801004a:	b289      	uxth	r1, r1
 801004c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010050:	45f4      	cmp	ip, lr
 8010052:	f849 1b04 	str.w	r1, [r9], #4
 8010056:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801005a:	d8e4      	bhi.n	8010026 <__multiply+0xaa>
 801005c:	9901      	ldr	r1, [sp, #4]
 801005e:	5072      	str	r2, [r6, r1]
 8010060:	9a03      	ldr	r2, [sp, #12]
 8010062:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010066:	3304      	adds	r3, #4
 8010068:	f1b9 0f00 	cmp.w	r9, #0
 801006c:	d01f      	beq.n	80100ae <__multiply+0x132>
 801006e:	6834      	ldr	r4, [r6, #0]
 8010070:	f105 0114 	add.w	r1, r5, #20
 8010074:	46b6      	mov	lr, r6
 8010076:	f04f 0a00 	mov.w	sl, #0
 801007a:	880a      	ldrh	r2, [r1, #0]
 801007c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010080:	fb09 b202 	mla	r2, r9, r2, fp
 8010084:	4492      	add	sl, r2
 8010086:	b2a4      	uxth	r4, r4
 8010088:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801008c:	f84e 4b04 	str.w	r4, [lr], #4
 8010090:	f851 4b04 	ldr.w	r4, [r1], #4
 8010094:	f8be 2000 	ldrh.w	r2, [lr]
 8010098:	0c24      	lsrs	r4, r4, #16
 801009a:	fb09 2404 	mla	r4, r9, r4, r2
 801009e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80100a2:	458c      	cmp	ip, r1
 80100a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80100a8:	d8e7      	bhi.n	801007a <__multiply+0xfe>
 80100aa:	9a01      	ldr	r2, [sp, #4]
 80100ac:	50b4      	str	r4, [r6, r2]
 80100ae:	3604      	adds	r6, #4
 80100b0:	e7a3      	b.n	800fffa <__multiply+0x7e>
 80100b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d1a5      	bne.n	8010006 <__multiply+0x8a>
 80100ba:	3f01      	subs	r7, #1
 80100bc:	e7a1      	b.n	8010002 <__multiply+0x86>
 80100be:	bf00      	nop
 80100c0:	08010c93 	.word	0x08010c93
 80100c4:	08010d04 	.word	0x08010d04

080100c8 <__pow5mult>:
 80100c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100cc:	4615      	mov	r5, r2
 80100ce:	f012 0203 	ands.w	r2, r2, #3
 80100d2:	4606      	mov	r6, r0
 80100d4:	460f      	mov	r7, r1
 80100d6:	d007      	beq.n	80100e8 <__pow5mult+0x20>
 80100d8:	4c25      	ldr	r4, [pc, #148]	; (8010170 <__pow5mult+0xa8>)
 80100da:	3a01      	subs	r2, #1
 80100dc:	2300      	movs	r3, #0
 80100de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80100e2:	f7ff fe9b 	bl	800fe1c <__multadd>
 80100e6:	4607      	mov	r7, r0
 80100e8:	10ad      	asrs	r5, r5, #2
 80100ea:	d03d      	beq.n	8010168 <__pow5mult+0xa0>
 80100ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80100ee:	b97c      	cbnz	r4, 8010110 <__pow5mult+0x48>
 80100f0:	2010      	movs	r0, #16
 80100f2:	f7ff fe1b 	bl	800fd2c <malloc>
 80100f6:	4602      	mov	r2, r0
 80100f8:	6270      	str	r0, [r6, #36]	; 0x24
 80100fa:	b928      	cbnz	r0, 8010108 <__pow5mult+0x40>
 80100fc:	4b1d      	ldr	r3, [pc, #116]	; (8010174 <__pow5mult+0xac>)
 80100fe:	481e      	ldr	r0, [pc, #120]	; (8010178 <__pow5mult+0xb0>)
 8010100:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010104:	f000 fc20 	bl	8010948 <__assert_func>
 8010108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801010c:	6004      	str	r4, [r0, #0]
 801010e:	60c4      	str	r4, [r0, #12]
 8010110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010118:	b94c      	cbnz	r4, 801012e <__pow5mult+0x66>
 801011a:	f240 2171 	movw	r1, #625	; 0x271
 801011e:	4630      	mov	r0, r6
 8010120:	f7ff ff16 	bl	800ff50 <__i2b>
 8010124:	2300      	movs	r3, #0
 8010126:	f8c8 0008 	str.w	r0, [r8, #8]
 801012a:	4604      	mov	r4, r0
 801012c:	6003      	str	r3, [r0, #0]
 801012e:	f04f 0900 	mov.w	r9, #0
 8010132:	07eb      	lsls	r3, r5, #31
 8010134:	d50a      	bpl.n	801014c <__pow5mult+0x84>
 8010136:	4639      	mov	r1, r7
 8010138:	4622      	mov	r2, r4
 801013a:	4630      	mov	r0, r6
 801013c:	f7ff ff1e 	bl	800ff7c <__multiply>
 8010140:	4639      	mov	r1, r7
 8010142:	4680      	mov	r8, r0
 8010144:	4630      	mov	r0, r6
 8010146:	f7ff fe47 	bl	800fdd8 <_Bfree>
 801014a:	4647      	mov	r7, r8
 801014c:	106d      	asrs	r5, r5, #1
 801014e:	d00b      	beq.n	8010168 <__pow5mult+0xa0>
 8010150:	6820      	ldr	r0, [r4, #0]
 8010152:	b938      	cbnz	r0, 8010164 <__pow5mult+0x9c>
 8010154:	4622      	mov	r2, r4
 8010156:	4621      	mov	r1, r4
 8010158:	4630      	mov	r0, r6
 801015a:	f7ff ff0f 	bl	800ff7c <__multiply>
 801015e:	6020      	str	r0, [r4, #0]
 8010160:	f8c0 9000 	str.w	r9, [r0]
 8010164:	4604      	mov	r4, r0
 8010166:	e7e4      	b.n	8010132 <__pow5mult+0x6a>
 8010168:	4638      	mov	r0, r7
 801016a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801016e:	bf00      	nop
 8010170:	08010e58 	.word	0x08010e58
 8010174:	08010c1d 	.word	0x08010c1d
 8010178:	08010d04 	.word	0x08010d04

0801017c <__lshift>:
 801017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010180:	460c      	mov	r4, r1
 8010182:	6849      	ldr	r1, [r1, #4]
 8010184:	6923      	ldr	r3, [r4, #16]
 8010186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801018a:	68a3      	ldr	r3, [r4, #8]
 801018c:	4607      	mov	r7, r0
 801018e:	4691      	mov	r9, r2
 8010190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010194:	f108 0601 	add.w	r6, r8, #1
 8010198:	42b3      	cmp	r3, r6
 801019a:	db0b      	blt.n	80101b4 <__lshift+0x38>
 801019c:	4638      	mov	r0, r7
 801019e:	f7ff fddb 	bl	800fd58 <_Balloc>
 80101a2:	4605      	mov	r5, r0
 80101a4:	b948      	cbnz	r0, 80101ba <__lshift+0x3e>
 80101a6:	4602      	mov	r2, r0
 80101a8:	4b28      	ldr	r3, [pc, #160]	; (801024c <__lshift+0xd0>)
 80101aa:	4829      	ldr	r0, [pc, #164]	; (8010250 <__lshift+0xd4>)
 80101ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80101b0:	f000 fbca 	bl	8010948 <__assert_func>
 80101b4:	3101      	adds	r1, #1
 80101b6:	005b      	lsls	r3, r3, #1
 80101b8:	e7ee      	b.n	8010198 <__lshift+0x1c>
 80101ba:	2300      	movs	r3, #0
 80101bc:	f100 0114 	add.w	r1, r0, #20
 80101c0:	f100 0210 	add.w	r2, r0, #16
 80101c4:	4618      	mov	r0, r3
 80101c6:	4553      	cmp	r3, sl
 80101c8:	db33      	blt.n	8010232 <__lshift+0xb6>
 80101ca:	6920      	ldr	r0, [r4, #16]
 80101cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101d0:	f104 0314 	add.w	r3, r4, #20
 80101d4:	f019 091f 	ands.w	r9, r9, #31
 80101d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80101dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80101e0:	d02b      	beq.n	801023a <__lshift+0xbe>
 80101e2:	f1c9 0e20 	rsb	lr, r9, #32
 80101e6:	468a      	mov	sl, r1
 80101e8:	2200      	movs	r2, #0
 80101ea:	6818      	ldr	r0, [r3, #0]
 80101ec:	fa00 f009 	lsl.w	r0, r0, r9
 80101f0:	4302      	orrs	r2, r0
 80101f2:	f84a 2b04 	str.w	r2, [sl], #4
 80101f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80101fa:	459c      	cmp	ip, r3
 80101fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8010200:	d8f3      	bhi.n	80101ea <__lshift+0x6e>
 8010202:	ebac 0304 	sub.w	r3, ip, r4
 8010206:	3b15      	subs	r3, #21
 8010208:	f023 0303 	bic.w	r3, r3, #3
 801020c:	3304      	adds	r3, #4
 801020e:	f104 0015 	add.w	r0, r4, #21
 8010212:	4584      	cmp	ip, r0
 8010214:	bf38      	it	cc
 8010216:	2304      	movcc	r3, #4
 8010218:	50ca      	str	r2, [r1, r3]
 801021a:	b10a      	cbz	r2, 8010220 <__lshift+0xa4>
 801021c:	f108 0602 	add.w	r6, r8, #2
 8010220:	3e01      	subs	r6, #1
 8010222:	4638      	mov	r0, r7
 8010224:	612e      	str	r6, [r5, #16]
 8010226:	4621      	mov	r1, r4
 8010228:	f7ff fdd6 	bl	800fdd8 <_Bfree>
 801022c:	4628      	mov	r0, r5
 801022e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010232:	f842 0f04 	str.w	r0, [r2, #4]!
 8010236:	3301      	adds	r3, #1
 8010238:	e7c5      	b.n	80101c6 <__lshift+0x4a>
 801023a:	3904      	subs	r1, #4
 801023c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010240:	f841 2f04 	str.w	r2, [r1, #4]!
 8010244:	459c      	cmp	ip, r3
 8010246:	d8f9      	bhi.n	801023c <__lshift+0xc0>
 8010248:	e7ea      	b.n	8010220 <__lshift+0xa4>
 801024a:	bf00      	nop
 801024c:	08010c93 	.word	0x08010c93
 8010250:	08010d04 	.word	0x08010d04

08010254 <__mcmp>:
 8010254:	b530      	push	{r4, r5, lr}
 8010256:	6902      	ldr	r2, [r0, #16]
 8010258:	690c      	ldr	r4, [r1, #16]
 801025a:	1b12      	subs	r2, r2, r4
 801025c:	d10e      	bne.n	801027c <__mcmp+0x28>
 801025e:	f100 0314 	add.w	r3, r0, #20
 8010262:	3114      	adds	r1, #20
 8010264:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010268:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801026c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010270:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010274:	42a5      	cmp	r5, r4
 8010276:	d003      	beq.n	8010280 <__mcmp+0x2c>
 8010278:	d305      	bcc.n	8010286 <__mcmp+0x32>
 801027a:	2201      	movs	r2, #1
 801027c:	4610      	mov	r0, r2
 801027e:	bd30      	pop	{r4, r5, pc}
 8010280:	4283      	cmp	r3, r0
 8010282:	d3f3      	bcc.n	801026c <__mcmp+0x18>
 8010284:	e7fa      	b.n	801027c <__mcmp+0x28>
 8010286:	f04f 32ff 	mov.w	r2, #4294967295
 801028a:	e7f7      	b.n	801027c <__mcmp+0x28>

0801028c <__mdiff>:
 801028c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010290:	460c      	mov	r4, r1
 8010292:	4606      	mov	r6, r0
 8010294:	4611      	mov	r1, r2
 8010296:	4620      	mov	r0, r4
 8010298:	4617      	mov	r7, r2
 801029a:	f7ff ffdb 	bl	8010254 <__mcmp>
 801029e:	1e05      	subs	r5, r0, #0
 80102a0:	d110      	bne.n	80102c4 <__mdiff+0x38>
 80102a2:	4629      	mov	r1, r5
 80102a4:	4630      	mov	r0, r6
 80102a6:	f7ff fd57 	bl	800fd58 <_Balloc>
 80102aa:	b930      	cbnz	r0, 80102ba <__mdiff+0x2e>
 80102ac:	4b39      	ldr	r3, [pc, #228]	; (8010394 <__mdiff+0x108>)
 80102ae:	4602      	mov	r2, r0
 80102b0:	f240 2132 	movw	r1, #562	; 0x232
 80102b4:	4838      	ldr	r0, [pc, #224]	; (8010398 <__mdiff+0x10c>)
 80102b6:	f000 fb47 	bl	8010948 <__assert_func>
 80102ba:	2301      	movs	r3, #1
 80102bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80102c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c4:	bfa4      	itt	ge
 80102c6:	463b      	movge	r3, r7
 80102c8:	4627      	movge	r7, r4
 80102ca:	4630      	mov	r0, r6
 80102cc:	6879      	ldr	r1, [r7, #4]
 80102ce:	bfa6      	itte	ge
 80102d0:	461c      	movge	r4, r3
 80102d2:	2500      	movge	r5, #0
 80102d4:	2501      	movlt	r5, #1
 80102d6:	f7ff fd3f 	bl	800fd58 <_Balloc>
 80102da:	b920      	cbnz	r0, 80102e6 <__mdiff+0x5a>
 80102dc:	4b2d      	ldr	r3, [pc, #180]	; (8010394 <__mdiff+0x108>)
 80102de:	4602      	mov	r2, r0
 80102e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80102e4:	e7e6      	b.n	80102b4 <__mdiff+0x28>
 80102e6:	693e      	ldr	r6, [r7, #16]
 80102e8:	60c5      	str	r5, [r0, #12]
 80102ea:	6925      	ldr	r5, [r4, #16]
 80102ec:	f107 0114 	add.w	r1, r7, #20
 80102f0:	f104 0914 	add.w	r9, r4, #20
 80102f4:	f100 0e14 	add.w	lr, r0, #20
 80102f8:	f107 0210 	add.w	r2, r7, #16
 80102fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010300:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010304:	46f2      	mov	sl, lr
 8010306:	2700      	movs	r7, #0
 8010308:	f859 3b04 	ldr.w	r3, [r9], #4
 801030c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010310:	fa1f f883 	uxth.w	r8, r3
 8010314:	fa17 f78b 	uxtah	r7, r7, fp
 8010318:	0c1b      	lsrs	r3, r3, #16
 801031a:	eba7 0808 	sub.w	r8, r7, r8
 801031e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010322:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010326:	fa1f f888 	uxth.w	r8, r8
 801032a:	141f      	asrs	r7, r3, #16
 801032c:	454d      	cmp	r5, r9
 801032e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010332:	f84a 3b04 	str.w	r3, [sl], #4
 8010336:	d8e7      	bhi.n	8010308 <__mdiff+0x7c>
 8010338:	1b2b      	subs	r3, r5, r4
 801033a:	3b15      	subs	r3, #21
 801033c:	f023 0303 	bic.w	r3, r3, #3
 8010340:	3304      	adds	r3, #4
 8010342:	3415      	adds	r4, #21
 8010344:	42a5      	cmp	r5, r4
 8010346:	bf38      	it	cc
 8010348:	2304      	movcc	r3, #4
 801034a:	4419      	add	r1, r3
 801034c:	4473      	add	r3, lr
 801034e:	469e      	mov	lr, r3
 8010350:	460d      	mov	r5, r1
 8010352:	4565      	cmp	r5, ip
 8010354:	d30e      	bcc.n	8010374 <__mdiff+0xe8>
 8010356:	f10c 0203 	add.w	r2, ip, #3
 801035a:	1a52      	subs	r2, r2, r1
 801035c:	f022 0203 	bic.w	r2, r2, #3
 8010360:	3903      	subs	r1, #3
 8010362:	458c      	cmp	ip, r1
 8010364:	bf38      	it	cc
 8010366:	2200      	movcc	r2, #0
 8010368:	441a      	add	r2, r3
 801036a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801036e:	b17b      	cbz	r3, 8010390 <__mdiff+0x104>
 8010370:	6106      	str	r6, [r0, #16]
 8010372:	e7a5      	b.n	80102c0 <__mdiff+0x34>
 8010374:	f855 8b04 	ldr.w	r8, [r5], #4
 8010378:	fa17 f488 	uxtah	r4, r7, r8
 801037c:	1422      	asrs	r2, r4, #16
 801037e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010382:	b2a4      	uxth	r4, r4
 8010384:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010388:	f84e 4b04 	str.w	r4, [lr], #4
 801038c:	1417      	asrs	r7, r2, #16
 801038e:	e7e0      	b.n	8010352 <__mdiff+0xc6>
 8010390:	3e01      	subs	r6, #1
 8010392:	e7ea      	b.n	801036a <__mdiff+0xde>
 8010394:	08010c93 	.word	0x08010c93
 8010398:	08010d04 	.word	0x08010d04

0801039c <__d2b>:
 801039c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80103a0:	4689      	mov	r9, r1
 80103a2:	2101      	movs	r1, #1
 80103a4:	ec57 6b10 	vmov	r6, r7, d0
 80103a8:	4690      	mov	r8, r2
 80103aa:	f7ff fcd5 	bl	800fd58 <_Balloc>
 80103ae:	4604      	mov	r4, r0
 80103b0:	b930      	cbnz	r0, 80103c0 <__d2b+0x24>
 80103b2:	4602      	mov	r2, r0
 80103b4:	4b25      	ldr	r3, [pc, #148]	; (801044c <__d2b+0xb0>)
 80103b6:	4826      	ldr	r0, [pc, #152]	; (8010450 <__d2b+0xb4>)
 80103b8:	f240 310a 	movw	r1, #778	; 0x30a
 80103bc:	f000 fac4 	bl	8010948 <__assert_func>
 80103c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80103c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80103c8:	bb35      	cbnz	r5, 8010418 <__d2b+0x7c>
 80103ca:	2e00      	cmp	r6, #0
 80103cc:	9301      	str	r3, [sp, #4]
 80103ce:	d028      	beq.n	8010422 <__d2b+0x86>
 80103d0:	4668      	mov	r0, sp
 80103d2:	9600      	str	r6, [sp, #0]
 80103d4:	f7ff fd8c 	bl	800fef0 <__lo0bits>
 80103d8:	9900      	ldr	r1, [sp, #0]
 80103da:	b300      	cbz	r0, 801041e <__d2b+0x82>
 80103dc:	9a01      	ldr	r2, [sp, #4]
 80103de:	f1c0 0320 	rsb	r3, r0, #32
 80103e2:	fa02 f303 	lsl.w	r3, r2, r3
 80103e6:	430b      	orrs	r3, r1
 80103e8:	40c2      	lsrs	r2, r0
 80103ea:	6163      	str	r3, [r4, #20]
 80103ec:	9201      	str	r2, [sp, #4]
 80103ee:	9b01      	ldr	r3, [sp, #4]
 80103f0:	61a3      	str	r3, [r4, #24]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	bf14      	ite	ne
 80103f6:	2202      	movne	r2, #2
 80103f8:	2201      	moveq	r2, #1
 80103fa:	6122      	str	r2, [r4, #16]
 80103fc:	b1d5      	cbz	r5, 8010434 <__d2b+0x98>
 80103fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010402:	4405      	add	r5, r0
 8010404:	f8c9 5000 	str.w	r5, [r9]
 8010408:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801040c:	f8c8 0000 	str.w	r0, [r8]
 8010410:	4620      	mov	r0, r4
 8010412:	b003      	add	sp, #12
 8010414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801041c:	e7d5      	b.n	80103ca <__d2b+0x2e>
 801041e:	6161      	str	r1, [r4, #20]
 8010420:	e7e5      	b.n	80103ee <__d2b+0x52>
 8010422:	a801      	add	r0, sp, #4
 8010424:	f7ff fd64 	bl	800fef0 <__lo0bits>
 8010428:	9b01      	ldr	r3, [sp, #4]
 801042a:	6163      	str	r3, [r4, #20]
 801042c:	2201      	movs	r2, #1
 801042e:	6122      	str	r2, [r4, #16]
 8010430:	3020      	adds	r0, #32
 8010432:	e7e3      	b.n	80103fc <__d2b+0x60>
 8010434:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010438:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801043c:	f8c9 0000 	str.w	r0, [r9]
 8010440:	6918      	ldr	r0, [r3, #16]
 8010442:	f7ff fd35 	bl	800feb0 <__hi0bits>
 8010446:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801044a:	e7df      	b.n	801040c <__d2b+0x70>
 801044c:	08010c93 	.word	0x08010c93
 8010450:	08010d04 	.word	0x08010d04

08010454 <_calloc_r>:
 8010454:	b513      	push	{r0, r1, r4, lr}
 8010456:	434a      	muls	r2, r1
 8010458:	4611      	mov	r1, r2
 801045a:	9201      	str	r2, [sp, #4]
 801045c:	f000 f85a 	bl	8010514 <_malloc_r>
 8010460:	4604      	mov	r4, r0
 8010462:	b118      	cbz	r0, 801046c <_calloc_r+0x18>
 8010464:	9a01      	ldr	r2, [sp, #4]
 8010466:	2100      	movs	r1, #0
 8010468:	f7fd fe96 	bl	800e198 <memset>
 801046c:	4620      	mov	r0, r4
 801046e:	b002      	add	sp, #8
 8010470:	bd10      	pop	{r4, pc}
	...

08010474 <_free_r>:
 8010474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010476:	2900      	cmp	r1, #0
 8010478:	d048      	beq.n	801050c <_free_r+0x98>
 801047a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801047e:	9001      	str	r0, [sp, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	f1a1 0404 	sub.w	r4, r1, #4
 8010486:	bfb8      	it	lt
 8010488:	18e4      	addlt	r4, r4, r3
 801048a:	f000 fae3 	bl	8010a54 <__malloc_lock>
 801048e:	4a20      	ldr	r2, [pc, #128]	; (8010510 <_free_r+0x9c>)
 8010490:	9801      	ldr	r0, [sp, #4]
 8010492:	6813      	ldr	r3, [r2, #0]
 8010494:	4615      	mov	r5, r2
 8010496:	b933      	cbnz	r3, 80104a6 <_free_r+0x32>
 8010498:	6063      	str	r3, [r4, #4]
 801049a:	6014      	str	r4, [r2, #0]
 801049c:	b003      	add	sp, #12
 801049e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104a2:	f000 badd 	b.w	8010a60 <__malloc_unlock>
 80104a6:	42a3      	cmp	r3, r4
 80104a8:	d90b      	bls.n	80104c2 <_free_r+0x4e>
 80104aa:	6821      	ldr	r1, [r4, #0]
 80104ac:	1862      	adds	r2, r4, r1
 80104ae:	4293      	cmp	r3, r2
 80104b0:	bf04      	itt	eq
 80104b2:	681a      	ldreq	r2, [r3, #0]
 80104b4:	685b      	ldreq	r3, [r3, #4]
 80104b6:	6063      	str	r3, [r4, #4]
 80104b8:	bf04      	itt	eq
 80104ba:	1852      	addeq	r2, r2, r1
 80104bc:	6022      	streq	r2, [r4, #0]
 80104be:	602c      	str	r4, [r5, #0]
 80104c0:	e7ec      	b.n	801049c <_free_r+0x28>
 80104c2:	461a      	mov	r2, r3
 80104c4:	685b      	ldr	r3, [r3, #4]
 80104c6:	b10b      	cbz	r3, 80104cc <_free_r+0x58>
 80104c8:	42a3      	cmp	r3, r4
 80104ca:	d9fa      	bls.n	80104c2 <_free_r+0x4e>
 80104cc:	6811      	ldr	r1, [r2, #0]
 80104ce:	1855      	adds	r5, r2, r1
 80104d0:	42a5      	cmp	r5, r4
 80104d2:	d10b      	bne.n	80104ec <_free_r+0x78>
 80104d4:	6824      	ldr	r4, [r4, #0]
 80104d6:	4421      	add	r1, r4
 80104d8:	1854      	adds	r4, r2, r1
 80104da:	42a3      	cmp	r3, r4
 80104dc:	6011      	str	r1, [r2, #0]
 80104de:	d1dd      	bne.n	801049c <_free_r+0x28>
 80104e0:	681c      	ldr	r4, [r3, #0]
 80104e2:	685b      	ldr	r3, [r3, #4]
 80104e4:	6053      	str	r3, [r2, #4]
 80104e6:	4421      	add	r1, r4
 80104e8:	6011      	str	r1, [r2, #0]
 80104ea:	e7d7      	b.n	801049c <_free_r+0x28>
 80104ec:	d902      	bls.n	80104f4 <_free_r+0x80>
 80104ee:	230c      	movs	r3, #12
 80104f0:	6003      	str	r3, [r0, #0]
 80104f2:	e7d3      	b.n	801049c <_free_r+0x28>
 80104f4:	6825      	ldr	r5, [r4, #0]
 80104f6:	1961      	adds	r1, r4, r5
 80104f8:	428b      	cmp	r3, r1
 80104fa:	bf04      	itt	eq
 80104fc:	6819      	ldreq	r1, [r3, #0]
 80104fe:	685b      	ldreq	r3, [r3, #4]
 8010500:	6063      	str	r3, [r4, #4]
 8010502:	bf04      	itt	eq
 8010504:	1949      	addeq	r1, r1, r5
 8010506:	6021      	streq	r1, [r4, #0]
 8010508:	6054      	str	r4, [r2, #4]
 801050a:	e7c7      	b.n	801049c <_free_r+0x28>
 801050c:	b003      	add	sp, #12
 801050e:	bd30      	pop	{r4, r5, pc}
 8010510:	24000214 	.word	0x24000214

08010514 <_malloc_r>:
 8010514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010516:	1ccd      	adds	r5, r1, #3
 8010518:	f025 0503 	bic.w	r5, r5, #3
 801051c:	3508      	adds	r5, #8
 801051e:	2d0c      	cmp	r5, #12
 8010520:	bf38      	it	cc
 8010522:	250c      	movcc	r5, #12
 8010524:	2d00      	cmp	r5, #0
 8010526:	4606      	mov	r6, r0
 8010528:	db01      	blt.n	801052e <_malloc_r+0x1a>
 801052a:	42a9      	cmp	r1, r5
 801052c:	d903      	bls.n	8010536 <_malloc_r+0x22>
 801052e:	230c      	movs	r3, #12
 8010530:	6033      	str	r3, [r6, #0]
 8010532:	2000      	movs	r0, #0
 8010534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010536:	f000 fa8d 	bl	8010a54 <__malloc_lock>
 801053a:	4921      	ldr	r1, [pc, #132]	; (80105c0 <_malloc_r+0xac>)
 801053c:	680a      	ldr	r2, [r1, #0]
 801053e:	4614      	mov	r4, r2
 8010540:	b99c      	cbnz	r4, 801056a <_malloc_r+0x56>
 8010542:	4f20      	ldr	r7, [pc, #128]	; (80105c4 <_malloc_r+0xb0>)
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	b923      	cbnz	r3, 8010552 <_malloc_r+0x3e>
 8010548:	4621      	mov	r1, r4
 801054a:	4630      	mov	r0, r6
 801054c:	f000 f996 	bl	801087c <_sbrk_r>
 8010550:	6038      	str	r0, [r7, #0]
 8010552:	4629      	mov	r1, r5
 8010554:	4630      	mov	r0, r6
 8010556:	f000 f991 	bl	801087c <_sbrk_r>
 801055a:	1c43      	adds	r3, r0, #1
 801055c:	d123      	bne.n	80105a6 <_malloc_r+0x92>
 801055e:	230c      	movs	r3, #12
 8010560:	6033      	str	r3, [r6, #0]
 8010562:	4630      	mov	r0, r6
 8010564:	f000 fa7c 	bl	8010a60 <__malloc_unlock>
 8010568:	e7e3      	b.n	8010532 <_malloc_r+0x1e>
 801056a:	6823      	ldr	r3, [r4, #0]
 801056c:	1b5b      	subs	r3, r3, r5
 801056e:	d417      	bmi.n	80105a0 <_malloc_r+0x8c>
 8010570:	2b0b      	cmp	r3, #11
 8010572:	d903      	bls.n	801057c <_malloc_r+0x68>
 8010574:	6023      	str	r3, [r4, #0]
 8010576:	441c      	add	r4, r3
 8010578:	6025      	str	r5, [r4, #0]
 801057a:	e004      	b.n	8010586 <_malloc_r+0x72>
 801057c:	6863      	ldr	r3, [r4, #4]
 801057e:	42a2      	cmp	r2, r4
 8010580:	bf0c      	ite	eq
 8010582:	600b      	streq	r3, [r1, #0]
 8010584:	6053      	strne	r3, [r2, #4]
 8010586:	4630      	mov	r0, r6
 8010588:	f000 fa6a 	bl	8010a60 <__malloc_unlock>
 801058c:	f104 000b 	add.w	r0, r4, #11
 8010590:	1d23      	adds	r3, r4, #4
 8010592:	f020 0007 	bic.w	r0, r0, #7
 8010596:	1ac2      	subs	r2, r0, r3
 8010598:	d0cc      	beq.n	8010534 <_malloc_r+0x20>
 801059a:	1a1b      	subs	r3, r3, r0
 801059c:	50a3      	str	r3, [r4, r2]
 801059e:	e7c9      	b.n	8010534 <_malloc_r+0x20>
 80105a0:	4622      	mov	r2, r4
 80105a2:	6864      	ldr	r4, [r4, #4]
 80105a4:	e7cc      	b.n	8010540 <_malloc_r+0x2c>
 80105a6:	1cc4      	adds	r4, r0, #3
 80105a8:	f024 0403 	bic.w	r4, r4, #3
 80105ac:	42a0      	cmp	r0, r4
 80105ae:	d0e3      	beq.n	8010578 <_malloc_r+0x64>
 80105b0:	1a21      	subs	r1, r4, r0
 80105b2:	4630      	mov	r0, r6
 80105b4:	f000 f962 	bl	801087c <_sbrk_r>
 80105b8:	3001      	adds	r0, #1
 80105ba:	d1dd      	bne.n	8010578 <_malloc_r+0x64>
 80105bc:	e7cf      	b.n	801055e <_malloc_r+0x4a>
 80105be:	bf00      	nop
 80105c0:	24000214 	.word	0x24000214
 80105c4:	24000218 	.word	0x24000218

080105c8 <__sfputc_r>:
 80105c8:	6893      	ldr	r3, [r2, #8]
 80105ca:	3b01      	subs	r3, #1
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	b410      	push	{r4}
 80105d0:	6093      	str	r3, [r2, #8]
 80105d2:	da08      	bge.n	80105e6 <__sfputc_r+0x1e>
 80105d4:	6994      	ldr	r4, [r2, #24]
 80105d6:	42a3      	cmp	r3, r4
 80105d8:	db01      	blt.n	80105de <__sfputc_r+0x16>
 80105da:	290a      	cmp	r1, #10
 80105dc:	d103      	bne.n	80105e6 <__sfputc_r+0x1e>
 80105de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105e2:	f7fe bab1 	b.w	800eb48 <__swbuf_r>
 80105e6:	6813      	ldr	r3, [r2, #0]
 80105e8:	1c58      	adds	r0, r3, #1
 80105ea:	6010      	str	r0, [r2, #0]
 80105ec:	7019      	strb	r1, [r3, #0]
 80105ee:	4608      	mov	r0, r1
 80105f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <__sfputs_r>:
 80105f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105f8:	4606      	mov	r6, r0
 80105fa:	460f      	mov	r7, r1
 80105fc:	4614      	mov	r4, r2
 80105fe:	18d5      	adds	r5, r2, r3
 8010600:	42ac      	cmp	r4, r5
 8010602:	d101      	bne.n	8010608 <__sfputs_r+0x12>
 8010604:	2000      	movs	r0, #0
 8010606:	e007      	b.n	8010618 <__sfputs_r+0x22>
 8010608:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060c:	463a      	mov	r2, r7
 801060e:	4630      	mov	r0, r6
 8010610:	f7ff ffda 	bl	80105c8 <__sfputc_r>
 8010614:	1c43      	adds	r3, r0, #1
 8010616:	d1f3      	bne.n	8010600 <__sfputs_r+0xa>
 8010618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801061c <_vfiprintf_r>:
 801061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010620:	460d      	mov	r5, r1
 8010622:	b09d      	sub	sp, #116	; 0x74
 8010624:	4614      	mov	r4, r2
 8010626:	4698      	mov	r8, r3
 8010628:	4606      	mov	r6, r0
 801062a:	b118      	cbz	r0, 8010634 <_vfiprintf_r+0x18>
 801062c:	6983      	ldr	r3, [r0, #24]
 801062e:	b90b      	cbnz	r3, 8010634 <_vfiprintf_r+0x18>
 8010630:	f7ff fa72 	bl	800fb18 <__sinit>
 8010634:	4b89      	ldr	r3, [pc, #548]	; (801085c <_vfiprintf_r+0x240>)
 8010636:	429d      	cmp	r5, r3
 8010638:	d11b      	bne.n	8010672 <_vfiprintf_r+0x56>
 801063a:	6875      	ldr	r5, [r6, #4]
 801063c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801063e:	07d9      	lsls	r1, r3, #31
 8010640:	d405      	bmi.n	801064e <_vfiprintf_r+0x32>
 8010642:	89ab      	ldrh	r3, [r5, #12]
 8010644:	059a      	lsls	r2, r3, #22
 8010646:	d402      	bmi.n	801064e <_vfiprintf_r+0x32>
 8010648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801064a:	f7ff fb08 	bl	800fc5e <__retarget_lock_acquire_recursive>
 801064e:	89ab      	ldrh	r3, [r5, #12]
 8010650:	071b      	lsls	r3, r3, #28
 8010652:	d501      	bpl.n	8010658 <_vfiprintf_r+0x3c>
 8010654:	692b      	ldr	r3, [r5, #16]
 8010656:	b9eb      	cbnz	r3, 8010694 <_vfiprintf_r+0x78>
 8010658:	4629      	mov	r1, r5
 801065a:	4630      	mov	r0, r6
 801065c:	f7fe fac6 	bl	800ebec <__swsetup_r>
 8010660:	b1c0      	cbz	r0, 8010694 <_vfiprintf_r+0x78>
 8010662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010664:	07dc      	lsls	r4, r3, #31
 8010666:	d50e      	bpl.n	8010686 <_vfiprintf_r+0x6a>
 8010668:	f04f 30ff 	mov.w	r0, #4294967295
 801066c:	b01d      	add	sp, #116	; 0x74
 801066e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010672:	4b7b      	ldr	r3, [pc, #492]	; (8010860 <_vfiprintf_r+0x244>)
 8010674:	429d      	cmp	r5, r3
 8010676:	d101      	bne.n	801067c <_vfiprintf_r+0x60>
 8010678:	68b5      	ldr	r5, [r6, #8]
 801067a:	e7df      	b.n	801063c <_vfiprintf_r+0x20>
 801067c:	4b79      	ldr	r3, [pc, #484]	; (8010864 <_vfiprintf_r+0x248>)
 801067e:	429d      	cmp	r5, r3
 8010680:	bf08      	it	eq
 8010682:	68f5      	ldreq	r5, [r6, #12]
 8010684:	e7da      	b.n	801063c <_vfiprintf_r+0x20>
 8010686:	89ab      	ldrh	r3, [r5, #12]
 8010688:	0598      	lsls	r0, r3, #22
 801068a:	d4ed      	bmi.n	8010668 <_vfiprintf_r+0x4c>
 801068c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801068e:	f7ff fae7 	bl	800fc60 <__retarget_lock_release_recursive>
 8010692:	e7e9      	b.n	8010668 <_vfiprintf_r+0x4c>
 8010694:	2300      	movs	r3, #0
 8010696:	9309      	str	r3, [sp, #36]	; 0x24
 8010698:	2320      	movs	r3, #32
 801069a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801069e:	f8cd 800c 	str.w	r8, [sp, #12]
 80106a2:	2330      	movs	r3, #48	; 0x30
 80106a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010868 <_vfiprintf_r+0x24c>
 80106a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80106ac:	f04f 0901 	mov.w	r9, #1
 80106b0:	4623      	mov	r3, r4
 80106b2:	469a      	mov	sl, r3
 80106b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106b8:	b10a      	cbz	r2, 80106be <_vfiprintf_r+0xa2>
 80106ba:	2a25      	cmp	r2, #37	; 0x25
 80106bc:	d1f9      	bne.n	80106b2 <_vfiprintf_r+0x96>
 80106be:	ebba 0b04 	subs.w	fp, sl, r4
 80106c2:	d00b      	beq.n	80106dc <_vfiprintf_r+0xc0>
 80106c4:	465b      	mov	r3, fp
 80106c6:	4622      	mov	r2, r4
 80106c8:	4629      	mov	r1, r5
 80106ca:	4630      	mov	r0, r6
 80106cc:	f7ff ff93 	bl	80105f6 <__sfputs_r>
 80106d0:	3001      	adds	r0, #1
 80106d2:	f000 80aa 	beq.w	801082a <_vfiprintf_r+0x20e>
 80106d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106d8:	445a      	add	r2, fp
 80106da:	9209      	str	r2, [sp, #36]	; 0x24
 80106dc:	f89a 3000 	ldrb.w	r3, [sl]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f000 80a2 	beq.w	801082a <_vfiprintf_r+0x20e>
 80106e6:	2300      	movs	r3, #0
 80106e8:	f04f 32ff 	mov.w	r2, #4294967295
 80106ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106f0:	f10a 0a01 	add.w	sl, sl, #1
 80106f4:	9304      	str	r3, [sp, #16]
 80106f6:	9307      	str	r3, [sp, #28]
 80106f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106fc:	931a      	str	r3, [sp, #104]	; 0x68
 80106fe:	4654      	mov	r4, sl
 8010700:	2205      	movs	r2, #5
 8010702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010706:	4858      	ldr	r0, [pc, #352]	; (8010868 <_vfiprintf_r+0x24c>)
 8010708:	f7ef fdf2 	bl	80002f0 <memchr>
 801070c:	9a04      	ldr	r2, [sp, #16]
 801070e:	b9d8      	cbnz	r0, 8010748 <_vfiprintf_r+0x12c>
 8010710:	06d1      	lsls	r1, r2, #27
 8010712:	bf44      	itt	mi
 8010714:	2320      	movmi	r3, #32
 8010716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801071a:	0713      	lsls	r3, r2, #28
 801071c:	bf44      	itt	mi
 801071e:	232b      	movmi	r3, #43	; 0x2b
 8010720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010724:	f89a 3000 	ldrb.w	r3, [sl]
 8010728:	2b2a      	cmp	r3, #42	; 0x2a
 801072a:	d015      	beq.n	8010758 <_vfiprintf_r+0x13c>
 801072c:	9a07      	ldr	r2, [sp, #28]
 801072e:	4654      	mov	r4, sl
 8010730:	2000      	movs	r0, #0
 8010732:	f04f 0c0a 	mov.w	ip, #10
 8010736:	4621      	mov	r1, r4
 8010738:	f811 3b01 	ldrb.w	r3, [r1], #1
 801073c:	3b30      	subs	r3, #48	; 0x30
 801073e:	2b09      	cmp	r3, #9
 8010740:	d94e      	bls.n	80107e0 <_vfiprintf_r+0x1c4>
 8010742:	b1b0      	cbz	r0, 8010772 <_vfiprintf_r+0x156>
 8010744:	9207      	str	r2, [sp, #28]
 8010746:	e014      	b.n	8010772 <_vfiprintf_r+0x156>
 8010748:	eba0 0308 	sub.w	r3, r0, r8
 801074c:	fa09 f303 	lsl.w	r3, r9, r3
 8010750:	4313      	orrs	r3, r2
 8010752:	9304      	str	r3, [sp, #16]
 8010754:	46a2      	mov	sl, r4
 8010756:	e7d2      	b.n	80106fe <_vfiprintf_r+0xe2>
 8010758:	9b03      	ldr	r3, [sp, #12]
 801075a:	1d19      	adds	r1, r3, #4
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	9103      	str	r1, [sp, #12]
 8010760:	2b00      	cmp	r3, #0
 8010762:	bfbb      	ittet	lt
 8010764:	425b      	neglt	r3, r3
 8010766:	f042 0202 	orrlt.w	r2, r2, #2
 801076a:	9307      	strge	r3, [sp, #28]
 801076c:	9307      	strlt	r3, [sp, #28]
 801076e:	bfb8      	it	lt
 8010770:	9204      	strlt	r2, [sp, #16]
 8010772:	7823      	ldrb	r3, [r4, #0]
 8010774:	2b2e      	cmp	r3, #46	; 0x2e
 8010776:	d10c      	bne.n	8010792 <_vfiprintf_r+0x176>
 8010778:	7863      	ldrb	r3, [r4, #1]
 801077a:	2b2a      	cmp	r3, #42	; 0x2a
 801077c:	d135      	bne.n	80107ea <_vfiprintf_r+0x1ce>
 801077e:	9b03      	ldr	r3, [sp, #12]
 8010780:	1d1a      	adds	r2, r3, #4
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	9203      	str	r2, [sp, #12]
 8010786:	2b00      	cmp	r3, #0
 8010788:	bfb8      	it	lt
 801078a:	f04f 33ff 	movlt.w	r3, #4294967295
 801078e:	3402      	adds	r4, #2
 8010790:	9305      	str	r3, [sp, #20]
 8010792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010878 <_vfiprintf_r+0x25c>
 8010796:	7821      	ldrb	r1, [r4, #0]
 8010798:	2203      	movs	r2, #3
 801079a:	4650      	mov	r0, sl
 801079c:	f7ef fda8 	bl	80002f0 <memchr>
 80107a0:	b140      	cbz	r0, 80107b4 <_vfiprintf_r+0x198>
 80107a2:	2340      	movs	r3, #64	; 0x40
 80107a4:	eba0 000a 	sub.w	r0, r0, sl
 80107a8:	fa03 f000 	lsl.w	r0, r3, r0
 80107ac:	9b04      	ldr	r3, [sp, #16]
 80107ae:	4303      	orrs	r3, r0
 80107b0:	3401      	adds	r4, #1
 80107b2:	9304      	str	r3, [sp, #16]
 80107b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107b8:	482c      	ldr	r0, [pc, #176]	; (801086c <_vfiprintf_r+0x250>)
 80107ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80107be:	2206      	movs	r2, #6
 80107c0:	f7ef fd96 	bl	80002f0 <memchr>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	d03f      	beq.n	8010848 <_vfiprintf_r+0x22c>
 80107c8:	4b29      	ldr	r3, [pc, #164]	; (8010870 <_vfiprintf_r+0x254>)
 80107ca:	bb1b      	cbnz	r3, 8010814 <_vfiprintf_r+0x1f8>
 80107cc:	9b03      	ldr	r3, [sp, #12]
 80107ce:	3307      	adds	r3, #7
 80107d0:	f023 0307 	bic.w	r3, r3, #7
 80107d4:	3308      	adds	r3, #8
 80107d6:	9303      	str	r3, [sp, #12]
 80107d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107da:	443b      	add	r3, r7
 80107dc:	9309      	str	r3, [sp, #36]	; 0x24
 80107de:	e767      	b.n	80106b0 <_vfiprintf_r+0x94>
 80107e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80107e4:	460c      	mov	r4, r1
 80107e6:	2001      	movs	r0, #1
 80107e8:	e7a5      	b.n	8010736 <_vfiprintf_r+0x11a>
 80107ea:	2300      	movs	r3, #0
 80107ec:	3401      	adds	r4, #1
 80107ee:	9305      	str	r3, [sp, #20]
 80107f0:	4619      	mov	r1, r3
 80107f2:	f04f 0c0a 	mov.w	ip, #10
 80107f6:	4620      	mov	r0, r4
 80107f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107fc:	3a30      	subs	r2, #48	; 0x30
 80107fe:	2a09      	cmp	r2, #9
 8010800:	d903      	bls.n	801080a <_vfiprintf_r+0x1ee>
 8010802:	2b00      	cmp	r3, #0
 8010804:	d0c5      	beq.n	8010792 <_vfiprintf_r+0x176>
 8010806:	9105      	str	r1, [sp, #20]
 8010808:	e7c3      	b.n	8010792 <_vfiprintf_r+0x176>
 801080a:	fb0c 2101 	mla	r1, ip, r1, r2
 801080e:	4604      	mov	r4, r0
 8010810:	2301      	movs	r3, #1
 8010812:	e7f0      	b.n	80107f6 <_vfiprintf_r+0x1da>
 8010814:	ab03      	add	r3, sp, #12
 8010816:	9300      	str	r3, [sp, #0]
 8010818:	462a      	mov	r2, r5
 801081a:	4b16      	ldr	r3, [pc, #88]	; (8010874 <_vfiprintf_r+0x258>)
 801081c:	a904      	add	r1, sp, #16
 801081e:	4630      	mov	r0, r6
 8010820:	f7fd fd52 	bl	800e2c8 <_printf_float>
 8010824:	4607      	mov	r7, r0
 8010826:	1c78      	adds	r0, r7, #1
 8010828:	d1d6      	bne.n	80107d8 <_vfiprintf_r+0x1bc>
 801082a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801082c:	07d9      	lsls	r1, r3, #31
 801082e:	d405      	bmi.n	801083c <_vfiprintf_r+0x220>
 8010830:	89ab      	ldrh	r3, [r5, #12]
 8010832:	059a      	lsls	r2, r3, #22
 8010834:	d402      	bmi.n	801083c <_vfiprintf_r+0x220>
 8010836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010838:	f7ff fa12 	bl	800fc60 <__retarget_lock_release_recursive>
 801083c:	89ab      	ldrh	r3, [r5, #12]
 801083e:	065b      	lsls	r3, r3, #25
 8010840:	f53f af12 	bmi.w	8010668 <_vfiprintf_r+0x4c>
 8010844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010846:	e711      	b.n	801066c <_vfiprintf_r+0x50>
 8010848:	ab03      	add	r3, sp, #12
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	462a      	mov	r2, r5
 801084e:	4b09      	ldr	r3, [pc, #36]	; (8010874 <_vfiprintf_r+0x258>)
 8010850:	a904      	add	r1, sp, #16
 8010852:	4630      	mov	r0, r6
 8010854:	f7fd ffc4 	bl	800e7e0 <_printf_i>
 8010858:	e7e4      	b.n	8010824 <_vfiprintf_r+0x208>
 801085a:	bf00      	nop
 801085c:	08010cc4 	.word	0x08010cc4
 8010860:	08010ce4 	.word	0x08010ce4
 8010864:	08010ca4 	.word	0x08010ca4
 8010868:	08010e64 	.word	0x08010e64
 801086c:	08010e6e 	.word	0x08010e6e
 8010870:	0800e2c9 	.word	0x0800e2c9
 8010874:	080105f7 	.word	0x080105f7
 8010878:	08010e6a 	.word	0x08010e6a

0801087c <_sbrk_r>:
 801087c:	b538      	push	{r3, r4, r5, lr}
 801087e:	4d06      	ldr	r5, [pc, #24]	; (8010898 <_sbrk_r+0x1c>)
 8010880:	2300      	movs	r3, #0
 8010882:	4604      	mov	r4, r0
 8010884:	4608      	mov	r0, r1
 8010886:	602b      	str	r3, [r5, #0]
 8010888:	f7f1 fb48 	bl	8001f1c <_sbrk>
 801088c:	1c43      	adds	r3, r0, #1
 801088e:	d102      	bne.n	8010896 <_sbrk_r+0x1a>
 8010890:	682b      	ldr	r3, [r5, #0]
 8010892:	b103      	cbz	r3, 8010896 <_sbrk_r+0x1a>
 8010894:	6023      	str	r3, [r4, #0]
 8010896:	bd38      	pop	{r3, r4, r5, pc}
 8010898:	24000584 	.word	0x24000584

0801089c <__sread>:
 801089c:	b510      	push	{r4, lr}
 801089e:	460c      	mov	r4, r1
 80108a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a4:	f000 f8e2 	bl	8010a6c <_read_r>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	bfab      	itete	ge
 80108ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80108ae:	89a3      	ldrhlt	r3, [r4, #12]
 80108b0:	181b      	addge	r3, r3, r0
 80108b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80108b6:	bfac      	ite	ge
 80108b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80108ba:	81a3      	strhlt	r3, [r4, #12]
 80108bc:	bd10      	pop	{r4, pc}

080108be <__swrite>:
 80108be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c2:	461f      	mov	r7, r3
 80108c4:	898b      	ldrh	r3, [r1, #12]
 80108c6:	05db      	lsls	r3, r3, #23
 80108c8:	4605      	mov	r5, r0
 80108ca:	460c      	mov	r4, r1
 80108cc:	4616      	mov	r6, r2
 80108ce:	d505      	bpl.n	80108dc <__swrite+0x1e>
 80108d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108d4:	2302      	movs	r3, #2
 80108d6:	2200      	movs	r2, #0
 80108d8:	f000 f898 	bl	8010a0c <_lseek_r>
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80108e6:	81a3      	strh	r3, [r4, #12]
 80108e8:	4632      	mov	r2, r6
 80108ea:	463b      	mov	r3, r7
 80108ec:	4628      	mov	r0, r5
 80108ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108f2:	f000 b817 	b.w	8010924 <_write_r>

080108f6 <__sseek>:
 80108f6:	b510      	push	{r4, lr}
 80108f8:	460c      	mov	r4, r1
 80108fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108fe:	f000 f885 	bl	8010a0c <_lseek_r>
 8010902:	1c43      	adds	r3, r0, #1
 8010904:	89a3      	ldrh	r3, [r4, #12]
 8010906:	bf15      	itete	ne
 8010908:	6560      	strne	r0, [r4, #84]	; 0x54
 801090a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801090e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010912:	81a3      	strheq	r3, [r4, #12]
 8010914:	bf18      	it	ne
 8010916:	81a3      	strhne	r3, [r4, #12]
 8010918:	bd10      	pop	{r4, pc}

0801091a <__sclose>:
 801091a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801091e:	f000 b831 	b.w	8010984 <_close_r>
	...

08010924 <_write_r>:
 8010924:	b538      	push	{r3, r4, r5, lr}
 8010926:	4d07      	ldr	r5, [pc, #28]	; (8010944 <_write_r+0x20>)
 8010928:	4604      	mov	r4, r0
 801092a:	4608      	mov	r0, r1
 801092c:	4611      	mov	r1, r2
 801092e:	2200      	movs	r2, #0
 8010930:	602a      	str	r2, [r5, #0]
 8010932:	461a      	mov	r2, r3
 8010934:	f7f0 fbac 	bl	8001090 <_write>
 8010938:	1c43      	adds	r3, r0, #1
 801093a:	d102      	bne.n	8010942 <_write_r+0x1e>
 801093c:	682b      	ldr	r3, [r5, #0]
 801093e:	b103      	cbz	r3, 8010942 <_write_r+0x1e>
 8010940:	6023      	str	r3, [r4, #0]
 8010942:	bd38      	pop	{r3, r4, r5, pc}
 8010944:	24000584 	.word	0x24000584

08010948 <__assert_func>:
 8010948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801094a:	4614      	mov	r4, r2
 801094c:	461a      	mov	r2, r3
 801094e:	4b09      	ldr	r3, [pc, #36]	; (8010974 <__assert_func+0x2c>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4605      	mov	r5, r0
 8010954:	68d8      	ldr	r0, [r3, #12]
 8010956:	b14c      	cbz	r4, 801096c <__assert_func+0x24>
 8010958:	4b07      	ldr	r3, [pc, #28]	; (8010978 <__assert_func+0x30>)
 801095a:	9100      	str	r1, [sp, #0]
 801095c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010960:	4906      	ldr	r1, [pc, #24]	; (801097c <__assert_func+0x34>)
 8010962:	462b      	mov	r3, r5
 8010964:	f000 f81e 	bl	80109a4 <fiprintf>
 8010968:	f000 f89f 	bl	8010aaa <abort>
 801096c:	4b04      	ldr	r3, [pc, #16]	; (8010980 <__assert_func+0x38>)
 801096e:	461c      	mov	r4, r3
 8010970:	e7f3      	b.n	801095a <__assert_func+0x12>
 8010972:	bf00      	nop
 8010974:	2400001c 	.word	0x2400001c
 8010978:	08010e75 	.word	0x08010e75
 801097c:	08010e82 	.word	0x08010e82
 8010980:	08010eb0 	.word	0x08010eb0

08010984 <_close_r>:
 8010984:	b538      	push	{r3, r4, r5, lr}
 8010986:	4d06      	ldr	r5, [pc, #24]	; (80109a0 <_close_r+0x1c>)
 8010988:	2300      	movs	r3, #0
 801098a:	4604      	mov	r4, r0
 801098c:	4608      	mov	r0, r1
 801098e:	602b      	str	r3, [r5, #0]
 8010990:	f7f1 fa8f 	bl	8001eb2 <_close>
 8010994:	1c43      	adds	r3, r0, #1
 8010996:	d102      	bne.n	801099e <_close_r+0x1a>
 8010998:	682b      	ldr	r3, [r5, #0]
 801099a:	b103      	cbz	r3, 801099e <_close_r+0x1a>
 801099c:	6023      	str	r3, [r4, #0]
 801099e:	bd38      	pop	{r3, r4, r5, pc}
 80109a0:	24000584 	.word	0x24000584

080109a4 <fiprintf>:
 80109a4:	b40e      	push	{r1, r2, r3}
 80109a6:	b503      	push	{r0, r1, lr}
 80109a8:	4601      	mov	r1, r0
 80109aa:	ab03      	add	r3, sp, #12
 80109ac:	4805      	ldr	r0, [pc, #20]	; (80109c4 <fiprintf+0x20>)
 80109ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80109b2:	6800      	ldr	r0, [r0, #0]
 80109b4:	9301      	str	r3, [sp, #4]
 80109b6:	f7ff fe31 	bl	801061c <_vfiprintf_r>
 80109ba:	b002      	add	sp, #8
 80109bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80109c0:	b003      	add	sp, #12
 80109c2:	4770      	bx	lr
 80109c4:	2400001c 	.word	0x2400001c

080109c8 <_fstat_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	4d07      	ldr	r5, [pc, #28]	; (80109e8 <_fstat_r+0x20>)
 80109cc:	2300      	movs	r3, #0
 80109ce:	4604      	mov	r4, r0
 80109d0:	4608      	mov	r0, r1
 80109d2:	4611      	mov	r1, r2
 80109d4:	602b      	str	r3, [r5, #0]
 80109d6:	f7f1 fa78 	bl	8001eca <_fstat>
 80109da:	1c43      	adds	r3, r0, #1
 80109dc:	d102      	bne.n	80109e4 <_fstat_r+0x1c>
 80109de:	682b      	ldr	r3, [r5, #0]
 80109e0:	b103      	cbz	r3, 80109e4 <_fstat_r+0x1c>
 80109e2:	6023      	str	r3, [r4, #0]
 80109e4:	bd38      	pop	{r3, r4, r5, pc}
 80109e6:	bf00      	nop
 80109e8:	24000584 	.word	0x24000584

080109ec <_isatty_r>:
 80109ec:	b538      	push	{r3, r4, r5, lr}
 80109ee:	4d06      	ldr	r5, [pc, #24]	; (8010a08 <_isatty_r+0x1c>)
 80109f0:	2300      	movs	r3, #0
 80109f2:	4604      	mov	r4, r0
 80109f4:	4608      	mov	r0, r1
 80109f6:	602b      	str	r3, [r5, #0]
 80109f8:	f7f1 fa77 	bl	8001eea <_isatty>
 80109fc:	1c43      	adds	r3, r0, #1
 80109fe:	d102      	bne.n	8010a06 <_isatty_r+0x1a>
 8010a00:	682b      	ldr	r3, [r5, #0]
 8010a02:	b103      	cbz	r3, 8010a06 <_isatty_r+0x1a>
 8010a04:	6023      	str	r3, [r4, #0]
 8010a06:	bd38      	pop	{r3, r4, r5, pc}
 8010a08:	24000584 	.word	0x24000584

08010a0c <_lseek_r>:
 8010a0c:	b538      	push	{r3, r4, r5, lr}
 8010a0e:	4d07      	ldr	r5, [pc, #28]	; (8010a2c <_lseek_r+0x20>)
 8010a10:	4604      	mov	r4, r0
 8010a12:	4608      	mov	r0, r1
 8010a14:	4611      	mov	r1, r2
 8010a16:	2200      	movs	r2, #0
 8010a18:	602a      	str	r2, [r5, #0]
 8010a1a:	461a      	mov	r2, r3
 8010a1c:	f7f1 fa70 	bl	8001f00 <_lseek>
 8010a20:	1c43      	adds	r3, r0, #1
 8010a22:	d102      	bne.n	8010a2a <_lseek_r+0x1e>
 8010a24:	682b      	ldr	r3, [r5, #0]
 8010a26:	b103      	cbz	r3, 8010a2a <_lseek_r+0x1e>
 8010a28:	6023      	str	r3, [r4, #0]
 8010a2a:	bd38      	pop	{r3, r4, r5, pc}
 8010a2c:	24000584 	.word	0x24000584

08010a30 <__ascii_mbtowc>:
 8010a30:	b082      	sub	sp, #8
 8010a32:	b901      	cbnz	r1, 8010a36 <__ascii_mbtowc+0x6>
 8010a34:	a901      	add	r1, sp, #4
 8010a36:	b142      	cbz	r2, 8010a4a <__ascii_mbtowc+0x1a>
 8010a38:	b14b      	cbz	r3, 8010a4e <__ascii_mbtowc+0x1e>
 8010a3a:	7813      	ldrb	r3, [r2, #0]
 8010a3c:	600b      	str	r3, [r1, #0]
 8010a3e:	7812      	ldrb	r2, [r2, #0]
 8010a40:	1e10      	subs	r0, r2, #0
 8010a42:	bf18      	it	ne
 8010a44:	2001      	movne	r0, #1
 8010a46:	b002      	add	sp, #8
 8010a48:	4770      	bx	lr
 8010a4a:	4610      	mov	r0, r2
 8010a4c:	e7fb      	b.n	8010a46 <__ascii_mbtowc+0x16>
 8010a4e:	f06f 0001 	mvn.w	r0, #1
 8010a52:	e7f8      	b.n	8010a46 <__ascii_mbtowc+0x16>

08010a54 <__malloc_lock>:
 8010a54:	4801      	ldr	r0, [pc, #4]	; (8010a5c <__malloc_lock+0x8>)
 8010a56:	f7ff b902 	b.w	800fc5e <__retarget_lock_acquire_recursive>
 8010a5a:	bf00      	nop
 8010a5c:	2400057c 	.word	0x2400057c

08010a60 <__malloc_unlock>:
 8010a60:	4801      	ldr	r0, [pc, #4]	; (8010a68 <__malloc_unlock+0x8>)
 8010a62:	f7ff b8fd 	b.w	800fc60 <__retarget_lock_release_recursive>
 8010a66:	bf00      	nop
 8010a68:	2400057c 	.word	0x2400057c

08010a6c <_read_r>:
 8010a6c:	b538      	push	{r3, r4, r5, lr}
 8010a6e:	4d07      	ldr	r5, [pc, #28]	; (8010a8c <_read_r+0x20>)
 8010a70:	4604      	mov	r4, r0
 8010a72:	4608      	mov	r0, r1
 8010a74:	4611      	mov	r1, r2
 8010a76:	2200      	movs	r2, #0
 8010a78:	602a      	str	r2, [r5, #0]
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	f7f1 f9fc 	bl	8001e78 <_read>
 8010a80:	1c43      	adds	r3, r0, #1
 8010a82:	d102      	bne.n	8010a8a <_read_r+0x1e>
 8010a84:	682b      	ldr	r3, [r5, #0]
 8010a86:	b103      	cbz	r3, 8010a8a <_read_r+0x1e>
 8010a88:	6023      	str	r3, [r4, #0]
 8010a8a:	bd38      	pop	{r3, r4, r5, pc}
 8010a8c:	24000584 	.word	0x24000584

08010a90 <__ascii_wctomb>:
 8010a90:	b149      	cbz	r1, 8010aa6 <__ascii_wctomb+0x16>
 8010a92:	2aff      	cmp	r2, #255	; 0xff
 8010a94:	bf85      	ittet	hi
 8010a96:	238a      	movhi	r3, #138	; 0x8a
 8010a98:	6003      	strhi	r3, [r0, #0]
 8010a9a:	700a      	strbls	r2, [r1, #0]
 8010a9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010aa0:	bf98      	it	ls
 8010aa2:	2001      	movls	r0, #1
 8010aa4:	4770      	bx	lr
 8010aa6:	4608      	mov	r0, r1
 8010aa8:	4770      	bx	lr

08010aaa <abort>:
 8010aaa:	b508      	push	{r3, lr}
 8010aac:	2006      	movs	r0, #6
 8010aae:	f000 f82b 	bl	8010b08 <raise>
 8010ab2:	2001      	movs	r0, #1
 8010ab4:	f7f1 f9d6 	bl	8001e64 <_exit>

08010ab8 <_raise_r>:
 8010ab8:	291f      	cmp	r1, #31
 8010aba:	b538      	push	{r3, r4, r5, lr}
 8010abc:	4604      	mov	r4, r0
 8010abe:	460d      	mov	r5, r1
 8010ac0:	d904      	bls.n	8010acc <_raise_r+0x14>
 8010ac2:	2316      	movs	r3, #22
 8010ac4:	6003      	str	r3, [r0, #0]
 8010ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aca:	bd38      	pop	{r3, r4, r5, pc}
 8010acc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010ace:	b112      	cbz	r2, 8010ad6 <_raise_r+0x1e>
 8010ad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ad4:	b94b      	cbnz	r3, 8010aea <_raise_r+0x32>
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 f830 	bl	8010b3c <_getpid_r>
 8010adc:	462a      	mov	r2, r5
 8010ade:	4601      	mov	r1, r0
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ae6:	f000 b817 	b.w	8010b18 <_kill_r>
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d00a      	beq.n	8010b04 <_raise_r+0x4c>
 8010aee:	1c59      	adds	r1, r3, #1
 8010af0:	d103      	bne.n	8010afa <_raise_r+0x42>
 8010af2:	2316      	movs	r3, #22
 8010af4:	6003      	str	r3, [r0, #0]
 8010af6:	2001      	movs	r0, #1
 8010af8:	e7e7      	b.n	8010aca <_raise_r+0x12>
 8010afa:	2400      	movs	r4, #0
 8010afc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010b00:	4628      	mov	r0, r5
 8010b02:	4798      	blx	r3
 8010b04:	2000      	movs	r0, #0
 8010b06:	e7e0      	b.n	8010aca <_raise_r+0x12>

08010b08 <raise>:
 8010b08:	4b02      	ldr	r3, [pc, #8]	; (8010b14 <raise+0xc>)
 8010b0a:	4601      	mov	r1, r0
 8010b0c:	6818      	ldr	r0, [r3, #0]
 8010b0e:	f7ff bfd3 	b.w	8010ab8 <_raise_r>
 8010b12:	bf00      	nop
 8010b14:	2400001c 	.word	0x2400001c

08010b18 <_kill_r>:
 8010b18:	b538      	push	{r3, r4, r5, lr}
 8010b1a:	4d07      	ldr	r5, [pc, #28]	; (8010b38 <_kill_r+0x20>)
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	4604      	mov	r4, r0
 8010b20:	4608      	mov	r0, r1
 8010b22:	4611      	mov	r1, r2
 8010b24:	602b      	str	r3, [r5, #0]
 8010b26:	f7f1 f98d 	bl	8001e44 <_kill>
 8010b2a:	1c43      	adds	r3, r0, #1
 8010b2c:	d102      	bne.n	8010b34 <_kill_r+0x1c>
 8010b2e:	682b      	ldr	r3, [r5, #0]
 8010b30:	b103      	cbz	r3, 8010b34 <_kill_r+0x1c>
 8010b32:	6023      	str	r3, [r4, #0]
 8010b34:	bd38      	pop	{r3, r4, r5, pc}
 8010b36:	bf00      	nop
 8010b38:	24000584 	.word	0x24000584

08010b3c <_getpid_r>:
 8010b3c:	f7f1 b97a 	b.w	8001e34 <_getpid>

08010b40 <_init>:
 8010b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b42:	bf00      	nop
 8010b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b46:	bc08      	pop	{r3}
 8010b48:	469e      	mov	lr, r3
 8010b4a:	4770      	bx	lr

08010b4c <_fini>:
 8010b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b4e:	bf00      	nop
 8010b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b52:	bc08      	pop	{r3}
 8010b54:	469e      	mov	lr, r3
 8010b56:	4770      	bx	lr
