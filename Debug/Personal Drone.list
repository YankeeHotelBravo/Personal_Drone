
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08015018  08015018  00025018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015580  08015580  00025580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015588  08015588  00025588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801558c  0801558c  0002558c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08015590  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cc8  240001f8  08015788  000301f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000ec0  08015788  00030ec0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c355  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004683  00000000  00000000  0005c57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001858  00000000  00000000  00060c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001738  00000000  00000000  00062458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039524  00000000  00000000  00063b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020113  00000000  00000000  0009d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001688f2  00000000  00000000  000bd1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00225ab9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000787c  00000000  00000000  00225b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ffc 	.word	0x08014ffc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08014ffc 	.word	0x08014ffc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:
uint8_t iBus_failsafe = 0;
uint8_t motor_arming_flag = 0;
uint8_t iBus_rx_cnt = 0;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	815a      	strh	r2, [r3, #10]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	825a      	strh	r2, [r3, #18]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	829a      	strh	r2, [r3, #20]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	81da      	strh	r2, [r3, #14]

	iBus->FailSafe = (data[13] >> 4);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	330d      	adds	r3, #13
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	b2da      	uxtb	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	759a      	strb	r2, [r3, #22]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus* iBus)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7d9b      	ldrb	r3, [r3, #22]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af04      	add	r7, sp, #16
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70bb      	strb	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d81b      	bhi.n	80008e8 <MPU9250_Init+0x58>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <MPU9250_Init+0x28>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	080008d1 	.word	0x080008d1
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	080008e1 	.word	0x080008e1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008ca:	4a5e      	ldr	r2, [pc, #376]	; (8000a44 <MPU9250_Init+0x1b4>)
 80008cc:	601a      	str	r2, [r3, #0]
		break;
 80008ce:	e00c      	b.n	80008ea <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008d0:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008d2:	4a5d      	ldr	r2, [pc, #372]	; (8000a48 <MPU9250_Init+0x1b8>)
 80008d4:	601a      	str	r2, [r3, #0]
		break;
 80008d6:	e008      	b.n	80008ea <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008da:	4a5c      	ldr	r2, [pc, #368]	; (8000a4c <MPU9250_Init+0x1bc>)
 80008dc:	601a      	str	r2, [r3, #0]
		break;
 80008de:	e004      	b.n	80008ea <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008e0:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008e2:	4a5b      	ldr	r2, [pc, #364]	; (8000a50 <MPU9250_Init+0x1c0>)
 80008e4:	601a      	str	r2, [r3, #0]
		break;
 80008e6:	e000      	b.n	80008ea <MPU9250_Init+0x5a>
	default:
		break;
 80008e8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d81f      	bhi.n	8000930 <MPU9250_Init+0xa0>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <MPU9250_Init+0x68>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000909 	.word	0x08000909
 80008fc:	08000913 	.word	0x08000913
 8000900:	0800091d 	.word	0x0800091d
 8000904:	08000927 	.word	0x08000927
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000908:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <MPU9250_Init+0x1c4>)
 800090a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800090e:	601a      	str	r2, [r3, #0]
		break;
 8000910:	e00f      	b.n	8000932 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000914:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000918:	601a      	str	r2, [r3, #0]
		break;
 800091a:	e00a      	b.n	8000932 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MPU9250_Init+0x1c4>)
 800091e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000922:	601a      	str	r2, [r3, #0]
		break;
 8000924:	e005      	b.n	8000932 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000928:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800092c:	601a      	str	r2, [r3, #0]
		break;
 800092e:	e000      	b.n	8000932 <MPU9250_Init+0xa2>
	default:
		break;
 8000930:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	2301      	movs	r3, #1
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <MPU9250_Init+0x1c8>)
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2301      	movs	r3, #1
 8000940:	2275      	movs	r2, #117	; 0x75
 8000942:	21d0      	movs	r1, #208	; 0xd0
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f008 fcbf 	bl	80092c8 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800094a:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <MPU9250_Init+0x1c8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b71      	cmp	r3, #113	; 0x71
 8000950:	d171      	bne.n	8000a36 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2219      	movs	r2, #25
 8000968:	21d0      	movs	r1, #208	; 0xd0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f008 fb98 	bl	80090a0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000970:	200a      	movs	r0, #10
 8000972:	f005 f9a7 	bl	8005cc4 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000976:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000978:	787b      	ldrb	r3, [r7, #1]
 800097a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	221a      	movs	r2, #26
 800098c:	21d0      	movs	r1, #208	; 0xd0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f008 fb86 	bl	80090a0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000994:	200a      	movs	r0, #10
 8000996:	f005 f995 	bl	8005cc4 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009a2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	221b      	movs	r2, #27
 80009b4:	21d0      	movs	r1, #208	; 0xd0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f008 fb72 	bl	80090a0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009bc:	200a      	movs	r0, #10
 80009be:	f005 f981 	bl	8005cc4 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80009c2:	78bb      	ldrb	r3, [r7, #2]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ca:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2301      	movs	r3, #1
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	221c      	movs	r2, #28
 80009dc:	21d0      	movs	r1, #208	; 0xd0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f008 fb5e 	bl	80090a0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f005 f96d 	bl	8005cc4 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	221d      	movs	r2, #29
 8000a00:	21d0      	movs	r1, #208	; 0xd0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f008 fb4c 	bl	80090a0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f005 f95b 	bl	8005cc4 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	226b      	movs	r2, #107	; 0x6b
 8000a24:	21d0      	movs	r1, #208	; 0xd0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f008 fb3a 	bl	80090a0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f005 f949 	bl	8005cc4 <HAL_Delay>

		return 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000000 	.word	0x24000000
 8000a44:	43030000 	.word	0x43030000
 8000a48:	42830000 	.word	0x42830000
 8000a4c:	42033333 	.word	0x42033333
 8000a50:	41833333 	.word	0x41833333
 8000a54:	24000004 	.word	0x24000004
 8000a58:	240002f9 	.word	0x240002f9
 8000a5c:	24000279 	.word	0x24000279

08000a60 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	226a      	movs	r2, #106	; 0x6a
 8000a7e:	21d0      	movs	r1, #208	; 0xd0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f008 fb0d 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f005 f91c 	bl	8005cc4 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	2237      	movs	r2, #55	; 0x37
 8000aa2:	21d0      	movs	r1, #208	; 0xd0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f008 fafb 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f005 f90a 	bl	8005cc4 <HAL_Delay>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000279 	.word	0x24000279

08000abc <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	2237      	movs	r2, #55	; 0x37
 8000ada:	21d0      	movs	r1, #208	; 0xd0
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f008 fadf 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ae2:	200a      	movs	r0, #10
 8000ae4:	f005 f8ee 	bl	8005cc4 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MPU9250_Master+0xa0>)
 8000aea:	2220      	movs	r2, #32
 8000aec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MPU9250_Master+0xa0>)
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	226a      	movs	r2, #106	; 0x6a
 8000afe:	21d0      	movs	r1, #208	; 0xd0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f008 facd 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f005 f8dc 	bl	8005cc4 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b0e:	220d      	movs	r2, #13
 8000b10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2301      	movs	r3, #1
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2224      	movs	r2, #36	; 0x24
 8000b22:	21d0      	movs	r1, #208	; 0xd0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f008 fabb 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f005 f8ca 	bl	8005cc4 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	226b      	movs	r2, #107	; 0x6b
 8000b46:	21d0      	movs	r1, #208	; 0xd0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f008 faa9 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f005 f8b8 	bl	8005cc4 <HAL_Delay>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000279 	.word	0x24000279

08000b60 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b6c:	2216      	movs	r2, #22
 8000b6e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	9302      	str	r3, [sp, #8]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	220a      	movs	r2, #10
 8000b80:	2118      	movs	r1, #24
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f008 fa8c 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b88:	200a      	movs	r0, #10
 8000b8a:	f005 f89b 	bl	8005cc4 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2303      	movs	r3, #3
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	2118      	movs	r1, #24
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f008 fb91 	bl	80092c8 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f005 f88c 	bl	8005cc4 <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bb8:	785a      	ldrb	r2, [r3, #1]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bc2:	789a      	ldrb	r2, [r3, #2]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2303      	movs	r3, #3
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2118      	movs	r1, #24
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f008 fb73 	bl	80092c8 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f005 f86e 	bl	8005cc4 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b48      	cmp	r3, #72	; 0x48
 8000bee:	d101      	bne.n	8000bf4 <MPU9250_AK8963_Setup+0x94>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <MPU9250_AK8963_Setup+0x96>
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000279 	.word	0x24000279
 8000c04:	240002fc 	.word	0x240002fc
 8000c08:	240002f8 	.word	0x240002f8

08000c0c <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c16:	228c      	movs	r2, #140	; 0x8c
 8000c18:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	2225      	movs	r2, #37	; 0x25
 8000c2a:	21d0      	movs	r1, #208	; 0xd0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f008 fa37 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c32:	200a      	movs	r0, #10
 8000c34:	f005 f846 	bl	8005cc4 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2226      	movs	r2, #38	; 0x26
 8000c4e:	21d0      	movs	r1, #208	; 0xd0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f008 fa25 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f005 f834 	bl	8005cc4 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c5e:	2287      	movs	r2, #135	; 0x87
 8000c60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2227      	movs	r2, #39	; 0x27
 8000c72:	21d0      	movs	r1, #208	; 0xd0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f008 fa13 	bl	80090a0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f005 f822 	bl	8005cc4 <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000279 	.word	0x24000279

08000c8c <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c94:	2314      	movs	r3, #20
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <MPU9250_Read_All+0x24>)
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	223b      	movs	r2, #59	; 0x3b
 8000ca0:	21d0      	movs	r1, #208	; 0xd0
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f008 fc2a 	bl	80094fc <HAL_I2C_Mem_Read_DMA>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240002fc 	.word	0x240002fc

08000cb4 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000cbc:	4bb6      	ldr	r3, [pc, #728]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4bb4      	ldr	r3, [pc, #720]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cda:	4baf      	ldr	r3, [pc, #700]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4bad      	ldr	r3, [pc, #692]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000ce4:	78db      	ldrb	r3, [r3, #3]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 8000cf0:	4ba9      	ldr	r3, [pc, #676]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cf2:	791b      	ldrb	r3, [r3, #4]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4ba7      	ldr	r3, [pc, #668]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cfa:	795b      	ldrb	r3, [r3, #5]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000d06:	4ba4      	ldr	r3, [pc, #656]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d08:	7a1b      	ldrb	r3, [r3, #8]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4ba2      	ldr	r3, [pc, #648]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d10:	7a5b      	ldrb	r3, [r3, #9]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000d1c:	4b9e      	ldr	r3, [pc, #632]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d1e:	7a9b      	ldrb	r3, [r3, #10]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b9c      	ldr	r3, [pc, #624]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d26:	7adb      	ldrb	r3, [r3, #11]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	425b      	negs	r3, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d3a:	4b97      	ldr	r3, [pc, #604]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d3c:	7b1b      	ldrb	r3, [r3, #12]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	4b95      	ldr	r3, [pc, #596]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d44:	7b5b      	ldrb	r3, [r3, #13]
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	425b      	negs	r3, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d58:	4b8f      	ldr	r3, [pc, #572]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d5a:	7bdb      	ldrb	r3, [r3, #15]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b8d      	ldr	r3, [pc, #564]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d62:	7b9b      	ldrb	r3, [r3, #14]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	425b      	negs	r3, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d78:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d7a:	7c5b      	ldrb	r3, [r3, #17]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b85      	ldr	r3, [pc, #532]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d82:	7c1b      	ldrb	r3, [r3, #16]
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d90:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d92:	7cdb      	ldrb	r3, [r3, #19]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b7f      	ldr	r3, [pc, #508]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d9a:	7c9b      	ldrb	r3, [r3, #18]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000db6:	4b79      	ldr	r3, [pc, #484]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dd4:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = (DataStruct->Az_Raw / MPU9250_Acc_LSB);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000df4:	ed93 7a00 	vldr	s14, [r3]
 8000df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e10:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e12:	ed93 7a00 	vldr	s14, [r3]
 8000e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e2e:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e30:	ed93 7a00 	vldr	s14, [r3]
 8000e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e4e:	ed93 7a00 	vldr	s14, [r3]
 8000e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000e62:	461a      	mov	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000e6a:	3b80      	subs	r3, #128	; 0x80
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da00      	bge.n	8000e72 <MPU9250_Parsing+0x1be>
 8000e70:	33ff      	adds	r3, #255	; 0xff
 8000e72:	121b      	asrs	r3, r3, #8
 8000e74:	3301      	adds	r3, #1
 8000e76:	fb03 f302 	mul.w	r3, r3, r2
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000e84:	edd3 7a00 	vldr	s15, [r3]
 8000e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000ea0:	3b80      	subs	r3, #128	; 0x80
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da00      	bge.n	8000ea8 <MPU9250_Parsing+0x1f4>
 8000ea6:	33ff      	adds	r3, #255	; 0xff
 8000ea8:	121b      	asrs	r3, r3, #8
 8000eaa:	3301      	adds	r3, #1
 8000eac:	fb03 f302 	mul.w	r3, r3, r2
 8000eb0:	ee07 3a90 	vmov	s15, r3
 8000eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ed6:	3b80      	subs	r3, #128	; 0x80
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da00      	bge.n	8000ede <MPU9250_Parsing+0x22a>
 8000edc:	33ff      	adds	r3, #255	; 0xff
 8000ede:	121b      	asrs	r3, r3, #8
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	fb03 f302 	mul.w	r3, r3, r2
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My -= DataStruct->My_Offset;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f88:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8000f96:	e009      	b.n	8000fac <MPU9250_Parsing+0x2f8>
 8000f98:	240002fc 	.word	0x240002fc
 8000f9c:	24000004 	.word	0x24000004
 8000fa0:	24000000 	.word	0x24000000
 8000fa4:	24000008 	.word	0x24000008
 8000fa8:	3c8efa35 	.word	0x3c8efa35
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fb2:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fc6:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000fe8:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8001006:	4b9b      	ldr	r3, [pc, #620]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b99      	ldr	r3, [pc, #612]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 800101c:	4b95      	ldr	r3, [pc, #596]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b93      	ldr	r3, [pc, #588]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8001032:	4b90      	ldr	r3, [pc, #576]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001034:	7a1b      	ldrb	r3, [r3, #8]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b8e      	ldr	r3, [pc, #568]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800103c:	7a5b      	ldrb	r3, [r3, #9]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21a      	sxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001048:	4b8a      	ldr	r3, [pc, #552]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800104a:	7a9b      	ldrb	r3, [r3, #10]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b88      	ldr	r3, [pc, #544]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001052:	7adb      	ldrb	r3, [r3, #11]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	425b      	negs	r3, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8001066:	4b83      	ldr	r3, [pc, #524]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001068:	7b1b      	ldrb	r3, [r3, #12]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b81      	ldr	r3, [pc, #516]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001070:	7b5b      	ldrb	r3, [r3, #13]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	b29b      	uxth	r3, r3
 800107a:	425b      	negs	r3, r3
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8001084:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001086:	7bdb      	ldrb	r3, [r3, #15]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b79      	ldr	r3, [pc, #484]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800108e:	7b9b      	ldrb	r3, [r3, #14]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29b      	uxth	r3, r3
 8001098:	425b      	negs	r3, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21a      	sxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010a4:	4b73      	ldr	r3, [pc, #460]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010a6:	7c5b      	ldrb	r3, [r3, #17]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b71      	ldr	r3, [pc, #452]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010ae:	7c1b      	ldrb	r3, [r3, #16]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010be:	7cdb      	ldrb	r3, [r3, #19]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010c6:	7c9b      	ldrb	r3, [r3, #18]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e2:	4b65      	ldr	r3, [pc, #404]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001100:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = (DataStruct->Az_Raw / MPU9250_Acc_LSB);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800111e:	4b56      	ldr	r3, [pc, #344]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 8001120:	ed93 7a00 	vldr	s14, [r3]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800113c:	4b4f      	ldr	r3, [pc, #316]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001178:	4b40      	ldr	r3, [pc, #256]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001196:	3b80      	subs	r3, #128	; 0x80
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <MPU9250_Parsing_NoOffset+0x1be>
 800119c:	33ff      	adds	r3, #255	; 0xff
 800119e:	121b      	asrs	r3, r3, #8
 80011a0:	3301      	adds	r3, #1
 80011a2:	fb03 f302 	mul.w	r3, r3, r2
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	4b34      	ldr	r3, [pc, #208]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80011cc:	3b80      	subs	r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da00      	bge.n	80011d4 <MPU9250_Parsing_NoOffset+0x1f4>
 80011d2:	33ff      	adds	r3, #255	; 0xff
 80011d4:	121b      	asrs	r3, r3, #8
 80011d6:	3301      	adds	r3, #1
 80011d8:	fb03 f302 	mul.w	r3, r3, r2
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001202:	3b80      	subs	r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	da00      	bge.n	800120a <MPU9250_Parsing_NoOffset+0x22a>
 8001208:	33ff      	adds	r3, #255	; 0xff
 800120a:	121b      	asrs	r3, r3, #8
 800120c:	3301      	adds	r3, #1
 800120e:	fb03 f302 	mul.w	r3, r3, r2
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001230:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a08 	vldr	s15, [r3, #32]
 8001244:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 8001248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001258:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 800125c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	240002fc 	.word	0x240002fc
 8001278:	24000004 	.word	0x24000004
 800127c:	24000000 	.word	0x24000000
 8001280:	24000008 	.word	0x24000008
 8001284:	3c8efa35 	.word	0x3c8efa35

08001288 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ae      	sub	sp, #184	; 0xb8
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001292:	edc7 0a08 	vstr	s1, [r7, #32]
 8001296:	ed87 1a07 	vstr	s2, [r7, #28]
 800129a:	edc7 1a06 	vstr	s3, [r7, #24]
 800129e:	ed87 2a05 	vstr	s4, [r7, #20]
 80012a2:	edc7 2a04 	vstr	s5, [r7, #16]
 80012a6:	ed87 3a03 	vstr	s6, [r7, #12]
 80012aa:	edc7 3a02 	vstr	s7, [r7, #8]
 80012ae:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80012b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	d11d      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
 80012c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d116      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
 80012ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	d10f      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80012dc:	edd7 2a04 	vldr	s5, [r7, #16]
 80012e0:	ed97 2a05 	vldr	s4, [r7, #20]
 80012e4:	edd7 1a06 	vldr	s3, [r7, #24]
 80012e8:	ed97 1a07 	vldr	s2, [r7, #28]
 80012ec:	edd7 0a08 	vldr	s1, [r7, #32]
 80012f0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80012f4:	f000 ffd6 	bl	80022a4 <MadgwickAHRSupdateIMU>
		return;
 80012f8:	f000 bfb4 	b.w	8002264 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80012fc:	4be6      	ldr	r3, [pc, #920]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eeb1 7a67 	vneg.f32	s14, s15
 8001306:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800130a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130e:	4be3      	ldr	r3, [pc, #908]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001310:	edd3 6a00 	vldr	s13, [r3]
 8001314:	edd7 7a08 	vldr	s15, [r7, #32]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001320:	4bdf      	ldr	r3, [pc, #892]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001322:	edd3 6a00 	vldr	s13, [r3]
 8001326:	edd7 7a07 	vldr	s15, [r7, #28]
 800132a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800133e:	4bd9      	ldr	r3, [pc, #868]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 8001340:	ed93 7a00 	vldr	s14, [r3]
 8001344:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134c:	4bd3      	ldr	r3, [pc, #844]	; (800169c <MadgwickAHRSupdate+0x414>)
 800134e:	edd3 6a00 	vldr	s13, [r3]
 8001352:	edd7 7a07 	vldr	s15, [r7, #28]
 8001356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135e:	4bd0      	ldr	r3, [pc, #832]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001360:	edd3 6a00 	vldr	s13, [r3]
 8001364:	edd7 7a08 	vldr	s15, [r7, #32]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800137c:	4bc9      	ldr	r3, [pc, #804]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	edd7 7a08 	vldr	s15, [r7, #32]
 8001386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138a:	4bc3      	ldr	r3, [pc, #780]	; (8001698 <MadgwickAHRSupdate+0x410>)
 800138c:	edd3 6a00 	vldr	s13, [r3]
 8001390:	edd7 7a07 	vldr	s15, [r7, #28]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800139c:	4bc0      	ldr	r3, [pc, #768]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 800139e:	edd3 6a00 	vldr	s13, [r3]
 80013a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80013ba:	4bba      	ldr	r3, [pc, #744]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c8:	4bb3      	ldr	r3, [pc, #716]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80013ca:	edd3 6a00 	vldr	s13, [r3]
 80013ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80013d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013da:	4bb0      	ldr	r3, [pc, #704]	; (800169c <MadgwickAHRSupdate+0x414>)
 80013dc:	edd3 6a00 	vldr	s13, [r3]
 80013e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80013f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d10e      	bne.n	8001424 <MadgwickAHRSupdate+0x19c>
 8001406:	edd7 7a05 	vldr	s15, [r7, #20]
 800140a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d107      	bne.n	8001424 <MadgwickAHRSupdate+0x19c>
 8001414:	edd7 7a04 	vldr	s15, [r7, #16]
 8001418:	eef5 7a40 	vcmp.f32	s15, #0.0
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	f000 85a6 	beq.w	8001f70 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001424:	edd7 7a06 	vldr	s15, [r7, #24]
 8001428:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800142c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001430:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001438:	edd7 7a04 	vldr	s15, [r7, #16]
 800143c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	f001 fb5a 	bl	8002b00 <invSqrt>
 800144c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001450:	ed97 7a06 	vldr	s14, [r7, #24]
 8001454:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001460:	ed97 7a05 	vldr	s14, [r7, #20]
 8001464:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146c:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001470:	ed97 7a04 	vldr	s14, [r7, #16]
 8001474:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001480:	edd7 7a03 	vldr	s15, [r7, #12]
 8001484:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001488:	edd7 7a02 	vldr	s15, [r7, #8]
 800148c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 7a01 	vldr	s15, [r7, #4]
 8001498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	f001 fb2c 	bl	8002b00 <invSqrt>
 80014a8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80014ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80014b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80014bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80014cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80014dc:	4b71      	ldr	r3, [pc, #452]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ee:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001512:	ed97 7a01 	vldr	s14, [r7, #4]
 8001516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800151e:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001528:	ed97 7a03 	vldr	s14, [r7, #12]
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800153e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001542:	4b55      	ldr	r3, [pc, #340]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800154c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001550:	4b52      	ldr	r3, [pc, #328]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800155a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 800155e:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001568:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001580:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <MadgwickAHRSupdate+0x414>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MadgwickAHRSupdate+0x414>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <MadgwickAHRSupdate+0x414>)
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001652:	ed93 7a00 	vldr	s14, [r3]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001664:	ed97 7a03 	vldr	s14, [r7, #12]
 8001668:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800166c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001672:	edd3 6a00 	vldr	s13, [r3]
 8001676:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001694:	e008      	b.n	80016a8 <MadgwickAHRSupdate+0x420>
 8001696:	bf00      	nop
 8001698:	24000218 	.word	0x24000218
 800169c:	2400021c 	.word	0x2400021c
 80016a0:	24000220 	.word	0x24000220
 80016a4:	24000010 	.word	0x24000010
 80016a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80016b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80016bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016c4:	4bf5      	ldr	r3, [pc, #980]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80016d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	4bf0      	ldr	r3, [pc, #960]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ec:	edd7 6a03 	vldr	s13, [r7, #12]
 80016f0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001700:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001710:	4be3      	ldr	r3, [pc, #908]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001722:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172e:	4bdd      	ldr	r3, [pc, #884]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001730:	edd3 6a00 	vldr	s13, [r3]
 8001734:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001740:	4bd6      	ldr	r3, [pc, #856]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 8001742:	edd3 6a00 	vldr	s13, [r3]
 8001746:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001752:	edd7 6a02 	vldr	s13, [r7, #8]
 8001756:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800175a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001762:	edd7 6a02 	vldr	s13, [r7, #8]
 8001766:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800176a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001772:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001776:	edd7 7a01 	vldr	s15, [r7, #4]
 800177a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800177e:	4bc8      	ldr	r3, [pc, #800]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001790:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80017a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80017ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017b8:	eeb0 0b47 	vmov.f64	d0, d7
 80017bc:	f012 ff7c 	bl	80146b8 <sqrt>
 80017c0:	eeb0 7b40 	vmov.f64	d7, d0
 80017c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80017cc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80017d0:	eeb1 7a67 	vneg.f32	s14, s15
 80017d4:	4bb1      	ldr	r3, [pc, #708]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017de:	4bb1      	ldr	r3, [pc, #708]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 80017e0:	edd3 6a00 	vldr	s13, [r3]
 80017e4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001800:	4ba7      	ldr	r3, [pc, #668]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001802:	edd3 6a00 	vldr	s13, [r3]
 8001806:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001812:	edd7 6a01 	vldr	s13, [r7, #4]
 8001816:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800181a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001822:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001826:	edd7 7a02 	vldr	s15, [r7, #8]
 800182a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800182e:	4b9c      	ldr	r3, [pc, #624]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001840:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee37 7a67 	vsub.f32	s14, s14, s15
 800184c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001850:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001860:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001864:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001868:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 800186c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001870:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001874:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001878:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800187c:	eeb1 7a67 	vneg.f32	s14, s15
 8001880:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001884:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001888:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800188c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001890:	edd7 7a06 	vldr	s15, [r7, #24]
 8001894:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018b4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80018c2:	edd3 6a00 	vldr	s13, [r3]
 80018c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80018d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018d6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018de:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ea:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80018ee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018f2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018fe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001902:	edd7 7a03 	vldr	s15, [r7, #12]
 8001906:	ee76 7a67 	vsub.f32	s15, s12, s15
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001912:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001916:	eef1 6a67 	vneg.f32	s13, s15
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001924:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001926:	ed93 6a00 	vldr	s12, [r3]
 800192a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800192e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001932:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001936:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800193a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800193e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001942:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001946:	ee26 6a27 	vmul.f32	s12, s12, s15
 800194a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800194e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001952:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001956:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800195a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800195e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	ee76 7a67 	vsub.f32	s15, s12, s15
 800196a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 8001974:	edd3 6a00 	vldr	s13, [r3]
 8001978:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800197c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001980:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001984:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001988:	ee36 6a27 	vadd.f32	s12, s12, s15
 800198c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001990:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001994:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001998:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800199c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80019c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019d0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019ec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a00:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a1a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a22:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a26:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a32:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001a48:	edd3 6a00 	vldr	s13, [r3]
 8001a4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a54:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a58:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a68:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a70:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a74:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a78:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a98:	e006      	b.n	8001aa8 <MadgwickAHRSupdate+0x820>
 8001a9a:	bf00      	nop
 8001a9c:	2400021c 	.word	0x2400021c
 8001aa0:	24000220 	.word	0x24000220
 8001aa4:	24000218 	.word	0x24000218
 8001aa8:	4bf6      	ldr	r3, [pc, #984]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001aaa:	edd3 6a00 	vldr	s13, [r3]
 8001aae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ab2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ab6:	4bf4      	ldr	r3, [pc, #976]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001ab8:	ed93 6a00 	vldr	s12, [r3]
 8001abc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ac0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ac4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ac8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001acc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ad0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ad4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001adc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001ae0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ae4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ae8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001af0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001af4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001af8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b04:	4be1      	ldr	r3, [pc, #900]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001b06:	edd3 6a00 	vldr	s13, [r3]
 8001b0a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b12:	4bdf      	ldr	r3, [pc, #892]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001b14:	ed93 6a00 	vldr	s12, [r3]
 8001b18:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b24:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b2c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b38:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b3c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b40:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b44:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b48:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b50:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b6c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b70:	eeb1 7a67 	vneg.f32	s14, s15
 8001b74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b7c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b84:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b90:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b94:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b98:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ba8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb4:	4bb3      	ldr	r3, [pc, #716]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001bbe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bc2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001bce:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bd2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bda:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001bf2:	eef1 6a67 	vneg.f32	s13, s15
 8001bf6:	4ba3      	ldr	r3, [pc, #652]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c00:	4ba1      	ldr	r3, [pc, #644]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001c02:	ed93 6a00 	vldr	s12, [r3]
 8001c06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c12:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c16:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c1a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c1e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c22:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c26:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c2e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c32:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c36:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c3e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c42:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c56:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001c58:	edd3 6a00 	vldr	s13, [r3]
 8001c5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c64:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001c66:	ed93 6a00 	vldr	s12, [r3]
 8001c6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c76:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c7a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c7e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c8a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c8e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c92:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb2:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001cb4:	edd3 6a00 	vldr	s13, [r3]
 8001cb8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc0:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001cc2:	ed93 6a00 	vldr	s12, [r3]
 8001cc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cd2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001cd6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cda:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cde:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ce2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cee:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cf2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cf6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cfa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cfe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d02:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d1a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d1e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d22:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d42:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d52:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d62:	eef1 6a67 	vneg.f32	s13, s15
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d70:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001d72:	ed93 6a00 	vldr	s12, [r3]
 8001d76:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d82:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001d86:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d8a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d8e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d92:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d9a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d9e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001da2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001da6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001daa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001db2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001db6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dba:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dca:	eef1 6a67 	vneg.f32	s13, s15
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001dda:	ed93 6a00 	vldr	s12, [r3]
 8001dde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001de6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dea:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001dee:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001df2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001df6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dfe:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e02:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e06:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e0e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e12:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001e28:	edd3 6a00 	vldr	s13, [r3]
 8001e2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e34:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e38:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e48:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e4c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e50:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e58:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001e7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e80:	e008      	b.n	8001e94 <MadgwickAHRSupdate+0xc0c>
 8001e82:	bf00      	nop
 8001e84:	2400021c 	.word	0x2400021c
 8001e88:	24000010 	.word	0x24000010
 8001e8c:	24000220 	.word	0x24000220
 8001e90:	24000218 	.word	0x24000218
 8001e94:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e98:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ea8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec0:	f000 fe1e 	bl	8002b00 <invSqrt>
 8001ec4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001ec8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ecc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001ed8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001edc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001ee8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001eec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001ef8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001efc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f08:	4bd8      	ldr	r3, [pc, #864]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001f22:	4bd2      	ldr	r3, [pc, #840]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f38:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f3c:	4bcb      	ldr	r3, [pc, #812]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f3e:	ed93 7a00 	vldr	s14, [r3]
 8001f42:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001f56:	4bc5      	ldr	r3, [pc, #788]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001f70:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f74:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001f78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f7c:	4bbd      	ldr	r3, [pc, #756]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f86:	4bbb      	ldr	r3, [pc, #748]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001f88:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001f8c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001f90:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001f94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f98:	4bb7      	ldr	r3, [pc, #732]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa2:	4bb5      	ldr	r3, [pc, #724]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001fa4:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001fa8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001fac:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001fb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fb4:	4bb1      	ldr	r3, [pc, #708]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	4baf      	ldr	r3, [pc, #700]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8001fc0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001fc4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fc8:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd0:	4bab      	ldr	r3, [pc, #684]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	4ba9      	ldr	r3, [pc, #676]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8001fdc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001fe0:	4ba4      	ldr	r3, [pc, #656]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001fe2:	ed93 7a00 	vldr	s14, [r3]
 8001fe6:	4ba3      	ldr	r3, [pc, #652]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff0:	4ba1      	ldr	r3, [pc, #644]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001ff2:	edd3 6a00 	vldr	s13, [r3]
 8001ff6:	4ba0      	ldr	r3, [pc, #640]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002004:	4b9d      	ldr	r3, [pc, #628]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002006:	edd3 6a00 	vldr	s13, [r3]
 800200a:	4b9c      	ldr	r3, [pc, #624]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002018:	4b99      	ldr	r3, [pc, #612]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 800201a:	edd3 6a00 	vldr	s13, [r3]
 800201e:	4b98      	ldr	r3, [pc, #608]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	f000 fd66 	bl	8002b00 <invSqrt>
 8002034:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8002038:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800204c:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205a:	4b87      	ldr	r3, [pc, #540]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800205c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002060:	4b86      	ldr	r3, [pc, #536]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206e:	4b83      	ldr	r3, [pc, #524]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002074:	4b82      	ldr	r3, [pc, #520]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002076:	ed93 7a00 	vldr	s14, [r3]
 800207a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002084:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002088:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800208a:	ed93 7a00 	vldr	s14, [r3]
 800208e:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002098:	4b78      	ldr	r3, [pc, #480]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800209a:	edd3 6a00 	vldr	s13, [r3]
 800209e:	4b78      	ldr	r3, [pc, #480]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020ae:	ed93 7a00 	vldr	s14, [r3]
 80020b2:	4b71      	ldr	r3, [pc, #452]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c4:	4b6d      	ldr	r3, [pc, #436]	; (800227c <MadgwickAHRSupdate+0xff4>)
 80020c6:	edd3 6a00 	vldr	s13, [r3]
 80020ca:	4b6c      	ldr	r3, [pc, #432]	; (800227c <MadgwickAHRSupdate+0xff4>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d8:	eef0 0a67 	vmov.f32	s1, s15
 80020dc:	eeb0 0a46 	vmov.f32	s0, s12
 80020e0:	f012 fb46 	bl	8014770 <atan2f>
 80020e4:	eef0 7a40 	vmov.f32	s15, s0
 80020e8:	4b66      	ldr	r3, [pc, #408]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80020ea:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 80020ee:	4b62      	ldr	r3, [pc, #392]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	4b62      	ldr	r3, [pc, #392]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002100:	edd3 6a00 	vldr	s13, [r3]
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002112:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	f012 faf5 	bl	801470c <asinf>
 8002122:	eef0 7a40 	vmov.f32	s15, s0
 8002126:	4b58      	ldr	r3, [pc, #352]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002128:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	4b52      	ldr	r3, [pc, #328]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213c:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800213e:	edd3 6a00 	vldr	s13, [r3]
 8002142:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800215a:	ed93 6a00 	vldr	s12, [r3]
 800215e:	4b45      	ldr	r3, [pc, #276]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002160:	edd3 6a00 	vldr	s13, [r3]
 8002164:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002168:	4b43      	ldr	r3, [pc, #268]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800216a:	edd3 5a00 	vldr	s11, [r3]
 800216e:	4b42      	ldr	r3, [pc, #264]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8002170:	edd3 6a00 	vldr	s13, [r3]
 8002174:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002178:	ee36 6a26 	vadd.f32	s12, s12, s13
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800217e:	edd3 5a00 	vldr	s11, [r3]
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800218c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002192:	edd3 5a00 	vldr	s11, [r3]
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002198:	edd3 6a00 	vldr	s13, [r3]
 800219c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021a0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80021a4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021a8:	eeb0 1b46 	vmov.f64	d1, d6
 80021ac:	eeb0 0b47 	vmov.f64	d0, d7
 80021b0:	f012 fa7e 	bl	80146b0 <atan2>
 80021b4:	eeb0 7b40 	vmov.f64	d7, d0
 80021b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021be:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80021d2:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 80021e6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021fa:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <MadgwickAHRSupdate+0x100c>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 8002210:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MadgwickAHRSupdate+0x1010>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002226:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <MadgwickAHRSupdate+0x1004>)
 800222c:	ed93 7a00 	vldr	s14, [r3]
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MadgwickAHRSupdate+0x1014>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MadgwickAHRSupdate+0x1004>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	d509      	bpl.n	8002264 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022a0 <MadgwickAHRSupdate+0x1018>
 800225a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002260:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002264:	37b8      	adds	r7, #184	; 0xb8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2400000c 	.word	0x2400000c
 8002270:	3b03126f 	.word	0x3b03126f
 8002274:	24000010 	.word	0x24000010
 8002278:	24000218 	.word	0x24000218
 800227c:	2400021c 	.word	0x2400021c
 8002280:	24000220 	.word	0x24000220
 8002284:	24000314 	.word	0x24000314
 8002288:	24000318 	.word	0x24000318
 800228c:	24000310 	.word	0x24000310
 8002290:	42652ee1 	.word	0x42652ee1
 8002294:	24000224 	.word	0x24000224
 8002298:	24000228 	.word	0x24000228
 800229c:	2400022c 	.word	0x2400022c
 80022a0:	43b40000 	.word	0x43b40000

080022a4 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b09c      	sub	sp, #112	; 0x70
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80022ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80022b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80022b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80022ba:	ed87 2a01 	vstr	s4, [r7, #4]
 80022be:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80022c2:	4bee      	ldr	r3, [pc, #952]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb1 7a67 	vneg.f32	s14, s15
 80022cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d4:	4bea      	ldr	r3, [pc, #936]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80022d6:	edd3 6a00 	vldr	s13, [r3]
 80022da:	edd7 7a04 	vldr	s15, [r7, #16]
 80022de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022e6:	4be7      	ldr	r3, [pc, #924]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 80022e8:	edd3 6a00 	vldr	s13, [r3]
 80022ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002300:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002304:	4be0      	ldr	r3, [pc, #896]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	edd7 7a05 	vldr	s15, [r7, #20]
 800230e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002312:	4bdb      	ldr	r3, [pc, #876]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002314:	edd3 6a00 	vldr	s13, [r3]
 8002318:	edd7 7a03 	vldr	s15, [r7, #12]
 800231c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002324:	4bd7      	ldr	r3, [pc, #860]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002326:	edd3 6a00 	vldr	s13, [r3]
 800232a:	edd7 7a04 	vldr	s15, [r7, #16]
 800232e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002336:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800233a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002342:	4bd1      	ldr	r3, [pc, #836]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	edd7 7a04 	vldr	s15, [r7, #16]
 800234c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002350:	4bca      	ldr	r3, [pc, #808]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002352:	edd3 6a00 	vldr	s13, [r3]
 8002356:	edd7 7a03 	vldr	s15, [r7, #12]
 800235a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002362:	4bc8      	ldr	r3, [pc, #800]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002364:	edd3 6a00 	vldr	s13, [r3]
 8002368:	edd7 7a05 	vldr	s15, [r7, #20]
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002380:	4bc1      	ldr	r3, [pc, #772]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	edd7 7a03 	vldr	s15, [r7, #12]
 800238a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238e:	4bbb      	ldr	r3, [pc, #748]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002390:	edd3 6a00 	vldr	s13, [r3]
 8002394:	edd7 7a04 	vldr	s15, [r7, #16]
 8002398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a0:	4bb7      	ldr	r3, [pc, #732]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80023a2:	edd3 6a00 	vldr	s13, [r3]
 80023a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80023aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80023be:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	d10e      	bne.n	80023ea <MadgwickAHRSupdateIMU+0x146>
 80023cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d107      	bne.n	80023ea <MadgwickAHRSupdateIMU+0x146>
 80023da:	edd7 7a00 	vldr	s15, [r7]
 80023de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	f000 81e5 	beq.w	80027b4 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80023ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fe:	edd7 7a00 	vldr	s15, [r7]
 8002402:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f000 fb77 	bl	8002b00 <invSqrt>
 8002412:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8002416:	ed97 7a02 	vldr	s14, [r7, #8]
 800241a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002426:	ed97 7a01 	vldr	s14, [r7, #4]
 800242a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8002436:	ed97 7a00 	vldr	s14, [r7]
 800243a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002446:	4b90      	ldr	r3, [pc, #576]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002450:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8002454:	4b89      	ldr	r3, [pc, #548]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800245e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8002462:	4b87      	ldr	r3, [pc, #540]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800246c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8002470:	4b84      	ldr	r3, [pc, #528]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800247a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8002490:	4b7a      	ldr	r3, [pc, #488]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800249a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80024a2:	4b77      	ldr	r3, [pc, #476]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 80024b4:	4b71      	ldr	r3, [pc, #452]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 80024d8:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 80024da:	ed93 7a00 	vldr	s14, [r3]
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 80024ec:	4b63      	ldr	r3, [pc, #396]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024ee:	ed93 7a00 	vldr	s14, [r3]
 80024f2:	4b62      	ldr	r3, [pc, #392]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002516:	ed93 7a00 	vldr	s14, [r3]
 800251a:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002524:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002528:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800252c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002534:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002538:	edd7 7a02 	vldr	s15, [r7, #8]
 800253c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002544:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002548:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800254c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002554:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002558:	edd7 7a01 	vldr	s15, [r7, #4]
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002564:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002568:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800256c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002574:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002578:	edd7 7a02 	vldr	s15, [r7, #8]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002584:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002588:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800258c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80025a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025b6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80025ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80025ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80025da:	edd7 7a00 	vldr	s15, [r7]
 80025de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80025ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025ee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80025f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002604:	edd7 7a02 	vldr	s15, [r7, #8]
 8002608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002610:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002620:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002624:	edd7 7a01 	vldr	s15, [r7, #4]
 8002628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002630:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002638:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800263c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002648:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800264c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002658:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800265c:	edd7 7a00 	vldr	s15, [r7]
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800266c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002670:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002674:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002678:	e008      	b.n	800268c <MadgwickAHRSupdateIMU+0x3e8>
 800267a:	bf00      	nop
 800267c:	24000218 	.word	0x24000218
 8002680:	2400021c 	.word	0x2400021c
 8002684:	24000220 	.word	0x24000220
 8002688:	24000010 	.word	0x24000010
 800268c:	4be0      	ldr	r3, [pc, #896]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800269a:	edd7 7a02 	vldr	s15, [r7, #8]
 800269e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026aa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80026ae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026b2:	4bd7      	ldr	r3, [pc, #860]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80026c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d0:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80026d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80026e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	f000 f9fc 	bl	8002b00 <invSqrt>
 8002708:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 800270c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002710:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002718:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 800271c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002720:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 800272c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002730:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 800273c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002740:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 800274c:	4bb1      	ldr	r3, [pc, #708]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 800274e:	ed93 7a00 	vldr	s14, [r3]
 8002752:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800275e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002762:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002766:	4bab      	ldr	r3, [pc, #684]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 8002768:	ed93 7a00 	vldr	s14, [r3]
 800276c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002780:	4ba4      	ldr	r3, [pc, #656]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	edd7 7a07 	vldr	s15, [r7, #28]
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 800279a:	4b9e      	ldr	r3, [pc, #632]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 800279c:	ed93 7a00 	vldr	s14, [r3]
 80027a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80027ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80027b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80027b8:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027c0:	4b96      	ldr	r3, [pc, #600]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ca:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80027cc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80027d0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80027d4:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027dc:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	4b8e      	ldr	r3, [pc, #568]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80027e8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80027ec:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80027f0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f8:	4b8a      	ldr	r3, [pc, #552]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002804:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002808:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800280c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 8002810:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002820:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002824:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002834:	4b7a      	ldr	r3, [pc, #488]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002836:	edd3 6a00 	vldr	s13, [r3]
 800283a:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002848:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800284a:	edd3 6a00 	vldr	s13, [r3]
 800284e:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800285e:	edd3 6a00 	vldr	s13, [r3]
 8002862:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002870:	eeb0 0a67 	vmov.f32	s0, s15
 8002874:	f000 f944 	bl	8002b00 <invSqrt>
 8002878:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 800287c:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800287e:	ed93 7a00 	vldr	s14, [r3]
 8002882:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800288c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002890:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	4b60      	ldr	r3, [pc, #384]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028a0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80028a4:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028a6:	ed93 7a00 	vldr	s14, [r3]
 80028aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b2:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028b4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80028b8:	4b55      	ldr	r3, [pc, #340]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028ba:	ed93 7a00 	vldr	s14, [r3]
 80028be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c6:	4b52      	ldr	r3, [pc, #328]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028dc:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028de:	edd3 6a00 	vldr	s13, [r3]
 80028e2:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ec:	ee37 6a27 	vadd.f32	s12, s14, s15
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800290a:	edd3 6a00 	vldr	s13, [r3]
 800290e:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291c:	eef0 0a67 	vmov.f32	s1, s15
 8002920:	eeb0 0a46 	vmov.f32	s0, s12
 8002924:	f011 ff24 	bl	8014770 <atan2f>
 8002928:	eef0 7a40 	vmov.f32	s15, s0
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <MadgwickAHRSupdateIMU+0x784>)
 800292e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002934:	ed93 7a00 	vldr	s14, [r3]
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002944:	edd3 6a00 	vldr	s13, [r3]
 8002948:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800295a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295e:	eeb0 0a67 	vmov.f32	s0, s15
 8002962:	f011 fed3 	bl	801470c <asinf>
 8002966:	eef0 7a40 	vmov.f32	s15, s0
 800296a:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <MadgwickAHRSupdateIMU+0x788>)
 800296c:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002982:	edd3 6a00 	vldr	s13, [r3]
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800299e:	ed93 6a00 	vldr	s12, [r3]
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80029a4:	edd3 6a00 	vldr	s13, [r3]
 80029a8:	ee26 6a26 	vmul.f32	s12, s12, s13
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80029ae:	edd3 5a00 	vldr	s11, [r3]
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80029b4:	edd3 6a00 	vldr	s13, [r3]
 80029b8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029bc:	ee36 6a26 	vadd.f32	s12, s12, s13
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80029c2:	edd3 5a00 	vldr	s11, [r3]
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80029c8:	edd3 6a00 	vldr	s13, [r3]
 80029cc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029d0:	ee36 6a66 	vsub.f32	s12, s12, s13
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80029d6:	edd3 5a00 	vldr	s11, [r3]
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80029dc:	edd3 6a00 	vldr	s13, [r3]
 80029e0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80029e8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80029ec:	eeb0 1b46 	vmov.f64	d1, d6
 80029f0:	eeb0 0b47 	vmov.f64	d0, d7
 80029f4:	f011 fe5c 	bl	80146b0 <atan2>
 80029f8:	eeb0 7b40 	vmov.f64	d7, d0
 80029fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <MadgwickAHRSupdateIMU+0x78c>)
 8002a02:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MadgwickAHRSupdateIMU+0x784>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	e014      	b.n	8002a38 <MadgwickAHRSupdateIMU+0x794>
 8002a0e:	bf00      	nop
 8002a10:	24000220 	.word	0x24000220
 8002a14:	2400000c 	.word	0x2400000c
 8002a18:	3b03126f 	.word	0x3b03126f
 8002a1c:	24000010 	.word	0x24000010
 8002a20:	24000218 	.word	0x24000218
 8002a24:	2400021c 	.word	0x2400021c
 8002a28:	24000314 	.word	0x24000314
 8002a2c:	24000318 	.word	0x24000318
 8002a30:	24000310 	.word	0x24000310
 8002a34:	42652ee1 	.word	0x42652ee1
 8002a38:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002a34 <MadgwickAHRSupdateIMU+0x790>
 8002a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a42:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ae8 <MadgwickAHRSupdateIMU+0x844>
 8002a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a54:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a56:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ae8 <MadgwickAHRSupdateIMU+0x844>
 8002a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a6a:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <MadgwickAHRSupdateIMU+0x84c>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a80:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a86:	ed93 7a00 	vldr	s14, [r3]
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <MadgwickAHRSupdateIMU+0x850>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a96:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a9c:	ed93 7a00 	vldr	s14, [r3]
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <MadgwickAHRSupdateIMU+0x854>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	d400      	bmi.n	8002ac2 <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002ac0:	e009      	b.n	8002ad6 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002afc <MadgwickAHRSupdateIMU+0x858>
 8002acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ad2:	edc3 7a00 	vstr	s15, [r3]
}
 8002ad6:	bf00      	nop
 8002ad8:	3770      	adds	r7, #112	; 0x70
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	24000314 	.word	0x24000314
 8002ae4:	24000318 	.word	0x24000318
 8002ae8:	42652ee1 	.word	0x42652ee1
 8002aec:	24000310 	.word	0x24000310
 8002af0:	24000224 	.word	0x24000224
 8002af4:	24000228 	.word	0x24000228
 8002af8:	2400022c 	.word	0x2400022c
 8002afc:	43b40000 	.word	0x43b40000

08002b00 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b16:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	105a      	asrs	r2, r3, #1
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <invSqrt+0x74>)
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b38:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b44:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	ee07 3a90 	vmov	s15, r3
}
 8002b66:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	5f3759df 	.word	0x5f3759df

08002b78 <Double_PID_Calculation_Rate>:
	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result;
	/*********** Double PID Inner End *************/
}

void Double_PID_Calculation_Rate(PIDDouble* axis, float set_point, float value, float rate, float out_error_sum_max, float in_error_sum_max, int out_filter, int in_filter, int is_yaw)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b08b      	sub	sp, #44	; 0x2c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6278      	str	r0, [r7, #36]	; 0x24
 8002b80:	ed87 0a08 	vstr	s0, [r7, #32]
 8002b84:	edc7 0a07 	vstr	s1, [r7, #28]
 8002b88:	ed87 1a06 	vstr	s2, [r7, #24]
 8002b8c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002b90:	ed87 2a04 	vstr	s4, [r7, #16]
 8002b94:	60f9      	str	r1, [r7, #12]
 8002b96:	60ba      	str	r2, [r7, #8]
 8002b98:	607b      	str	r3, [r7, #4]
	/*********** Double PID Outer Begin *************/
	axis->out.reference = set_point;
 8002b9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	axis->out.meas_value = value;
 8002ba8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80

	axis->out.error = axis->out.reference - axis->out.meas_value;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8002bc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002bc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	axis->out.p_result = axis->out.error * axis->out.kp;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	axis->out.error_sum += axis->out.error * DT;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002bf2:	eddf 6a97 	vldr	s13, [pc, #604]	; 8002e50 <Double_PID_Calculation_Rate+0x2d8>
 8002bf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

	axis->out.error_sum_max = out_error_sum_max;
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	axis->out.error_sum_min = -out_error_sum_max;
 8002c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c10:	eef1 7a67 	vneg.f32	s15, s15
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	if(axis->out.error_sum > axis->out.error_sum_max) axis->out.error_sum = axis->out.error_sum_max;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8002c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	dd06      	ble.n	8002c3e <Double_PID_Calculation_Rate+0xc6>
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002c3c:	e010      	b.n	8002c60 <Double_PID_Calculation_Rate+0xe8>
	else if(axis->out.error_sum < axis->out.error_sum_min) axis->out.error_sum = axis->out.error_sum_min;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c52:	d505      	bpl.n	8002c60 <Double_PID_Calculation_Rate+0xe8>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	axis->out.i_result = axis->out.error_sum * axis->out.ki;
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

	axis->out.error_deriv = -rate;
 8002c76:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c7a:	eef1 7a67 	vneg.f32	s15, s15
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8002ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8002cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	/*********** Double PID Outer End *************/

	/*********** Double PID Inner Begin *************/
	axis->in.reference = axis->out.pid_result;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8002cc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	ed83 7b04 	vstr	d7, [r3, #16]
	axis->in.meas_value = rate;
 8002cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	ed83 7b06 	vstr	d7, [r3, #24]

	axis->in.error = axis->in.reference - axis->in.meas_value;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	ed93 6b04 	vldr	d6, [r3, #16]
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	ed93 7b06 	vldr	d7, [r3, #24]
 8002ce4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ce8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	axis->in.p_result = axis->in.error * axis->in.kp;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002d14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8002e50 <Double_PID_Calculation_Rate+0x2d8>
 8002d18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	axis->in.error_sum_max = in_error_sum_max;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	64da      	str	r2, [r3, #76]	; 0x4c
	axis->in.error_sum_min = -in_error_sum_max;
 8002d2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d30:	eef1 7a67 	vneg.f32	s15, s15
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	if(axis->in.error_sum > axis->in.error_sum_max) axis->in.error_sum = axis->in.error_sum_max;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002d46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4e:	dd04      	ble.n	8002d5a <Double_PID_Calculation_Rate+0x1e2>
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
 8002d58:	e00e      	b.n	8002d78 <Double_PID_Calculation_Rate+0x200>
	else if(axis->in.error_sum < axis->in.error_sum_min) axis->in.error_sum = axis->in.error_sum_min;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	d503      	bpl.n	8002d78 <Double_PID_Calculation_Rate+0x200>
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
	axis->in.i_result = axis->in.error_sum * axis->in.ki;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	ed93 6b06 	vldr	d6, [r3, #24]
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	ed93 7b08 	vldr	d7, [r3, #32]
 8002d9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d9e:	eeb1 6b47 	vneg.f64	d6, d7
 8002da2:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8002e48 <Double_PID_Calculation_Rate+0x2d0>
 8002da6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002daa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	axis->in.meas_value_prev = axis->in.meas_value;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbc:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if(in_filter == 0) axis->in.d_result = axis->in.error_deriv * axis->in.kd;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <Double_PID_Calculation_Rate+0x266>
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8002ddc:	e01d      	b.n	8002e1a <Double_PID_Calculation_Rate+0x2a2>
	else
	{
		axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002de4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002de8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002df2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002df6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	}

	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	/*********** Double PID Inner End *************/
}
 8002e3a:	bf00      	nop
 8002e3c:	372c      	adds	r7, #44	; 0x2c
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e0000000 	.word	0xe0000000
 8002e4c:	3f60624d 	.word	0x3f60624d
 8002e50:	3b03126f 	.word	0x3b03126f
 8002e54:	00000000 	.word	0x00000000

08002e58 <Single_PID_Calculation>:

void Single_PID_Calculation(PIDDouble* axis, float set_point, float value, float out_error_sum_max, int out_filter, int is_yaw)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6178      	str	r0, [r7, #20]
 8002e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e6c:	6079      	str	r1, [r7, #4]
 8002e6e:	603a      	str	r2, [r7, #0]
	/*********** Double PID Outer Begin *************/
	axis->out.reference = set_point;	//Set point of outer PID control
 8002e70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	axis->out.meas_value = value;			//Current Value
 8002e7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	//error + P output
	axis->out.error = axis->out.reference - axis->out.meas_value;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	ed93 6b1e 	vldr	d6, [r3, #120]	; 0x78
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	ed93 7b20 	vldr	d7, [r3, #128]	; 0x80
 8002e98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002e9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	if(is_yaw == 1)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d128      	bne.n	8002efe <Single_PID_Calculation+0xa6>
	{
		if(axis->out.error > 180.f) axis->out.error -= 360.f;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002eb2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003068 <Single_PID_Calculation+0x210>
 8002eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	dd0a      	ble.n	8002ed6 <Single_PID_Calculation+0x7e>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002ec6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800306c <Single_PID_Calculation+0x214>
 8002eca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 8002ed4:	e013      	b.n	8002efe <Single_PID_Calculation+0xa6>
		else if(axis->out.error < -180.f) axis->out.error += 360.f;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002edc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003070 <Single_PID_Calculation+0x218>
 8002ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee8:	d509      	bpl.n	8002efe <Single_PID_Calculation+0xa6>
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002ef0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800306c <Single_PID_Calculation+0x214>
 8002ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	}
	axis->out.p_result = axis->out.error * axis->out.kp;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	edc3 7a2f 	vstr	s15, [r3, #188]	; 0xbc
	axis->out.error_sum += axis->out.error * DT;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002f20:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003074 <Single_PID_Calculation+0x21c>
 8002f24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	// i output
	axis->out.error_sum_max = out_error_sum_max;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	axis->out.error_sum_min = -out_error_sum_max;
 8002f3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f3e:	eef1 7a67 	vneg.f32	s15, s15
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	edc3 7a2e 	vstr	s15, [r3, #184]	; 0xb8
	if(axis->out.error_sum > axis->out.error_sum_max) axis->out.error_sum = axis->out.error_sum_max;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8002f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5c:	dd06      	ble.n	8002f6c <Single_PID_Calculation+0x114>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002f6a:	e010      	b.n	8002f8e <Single_PID_Calculation+0x136>
	else if(axis->out.error_sum < axis->out.error_sum_min) axis->out.error_sum = axis->out.error_sum_min;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8002f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f80:	d505      	bpl.n	8002f8e <Single_PID_Calculation+0x136>
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	axis->out.i_result = axis->out.error_sum * axis->out.ki;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
	//d output
	axis->out.error_deriv = -(axis->out.meas_value - axis->out.meas_value_prev) / DT;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	ed93 6b20 	vldr	d6, [r3, #128]	; 0x80
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	ed93 7b22 	vldr	d7, [r3, #136]	; 0x88
 8002fb0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002fb4:	eeb1 6b47 	vneg.f64	d6, d7
 8002fb8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 8003060 <Single_PID_Calculation+0x208>
 8002fbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002fc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	axis->out.meas_value_prev = axis->out.meas_value;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002fd0:	6979      	ldr	r1, [r7, #20]
 8002fd2:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	if(out_filter == 0) axis->out.d_result = axis->out.error_deriv * axis->out.kd;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10b      	bne.n	8002ff4 <Single_PID_Calculation+0x19c>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
 8002ff2:	e01d      	b.n	8003030 <Single_PID_Calculation+0x1d8>
	else
	{
		axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.3f + axis->out.error_deriv * 0.7f;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002ffa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003078 <Single_PID_Calculation+0x220>
 8002ffe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8003008:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800307c <Single_PID_Calculation+0x224>
 800300c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
		axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
	}
	//result
	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800303c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8003046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
	/*********** Double PID Outer End *************/
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	f3af 8000 	nop.w
 8003060:	e0000000 	.word	0xe0000000
 8003064:	3f60624d 	.word	0x3f60624d
 8003068:	43340000 	.word	0x43340000
 800306c:	43b40000 	.word	0x43b40000
 8003070:	c3340000 	.word	0xc3340000
 8003074:	3b03126f 	.word	0x3b03126f
 8003078:	3e99999a 	.word	0x3e99999a
 800307c:	3f333333 	.word	0x3f333333

08003080 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <_write+0x24>)
 8003096:	f00d f89f 	bl	80101d8 <HAL_UART_Transmit_DMA>
	return len;
 800309a:	687b      	ldr	r3, [r7, #4]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	24000be4 	.word	0x24000be4

080030a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ac:	b088      	sub	sp, #32
 80030ae:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	MPU9250.Gx_Offset = 0.43;
 80030b0:	4bb0      	ldr	r3, [pc, #704]	; (8003374 <main+0x2cc>)
 80030b2:	4ab1      	ldr	r2, [pc, #708]	; (8003378 <main+0x2d0>)
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250.Gy_Offset = -0.49;
 80030b6:	4baf      	ldr	r3, [pc, #700]	; (8003374 <main+0x2cc>)
 80030b8:	4ab0      	ldr	r2, [pc, #704]	; (800337c <main+0x2d4>)
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
	MPU9250.Gz_Offset = -1.40;
 80030bc:	4bad      	ldr	r3, [pc, #692]	; (8003374 <main+0x2cc>)
 80030be:	4ab0      	ldr	r2, [pc, #704]	; (8003380 <main+0x2d8>)
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250.Mx_Offset = 0;
 80030c2:	4bac      	ldr	r3, [pc, #688]	; (8003374 <main+0x2cc>)
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250.My_Offset = 0;
 80030ca:	4baa      	ldr	r3, [pc, #680]	; (8003374 <main+0x2cc>)
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	669a      	str	r2, [r3, #104]	; 0x68
	MPU9250.Mz_Offset = 0;
 80030d2:	4ba8      	ldr	r3, [pc, #672]	; (8003374 <main+0x2cc>)
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030da:	f002 fd61 	bl	8005ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030de:	f000 fd09 	bl	8003af4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80030e2:	f000 fd85 	bl	8003bf0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030e6:	f001 f827 	bl	8004138 <MX_GPIO_Init>
  MX_DMA_Init();
 80030ea:	f000 ffe5 	bl	80040b8 <MX_DMA_Init>
  MX_TIM7_Init();
 80030ee:	f000 fec9 	bl	8003e84 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80030f2:	f000 fefd 	bl	8003ef0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80030f6:	f000 fd97 	bl	8003c28 <MX_I2C1_Init>
  MX_SPI1_Init();
 80030fa:	f000 fdd5 	bl	8003ca8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80030fe:	f000 ff43 	bl	8003f88 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8003102:	f000 fe27 	bl	8003d54 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8003106:	f000 ff8b 	bl	8004020 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800310a:	2200      	movs	r2, #0
 800310c:	2102      	movs	r1, #2
 800310e:	489d      	ldr	r0, [pc, #628]	; (8003384 <main+0x2dc>)
 8003110:	f005 ff1c 	bl	8008f4c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003118:	f002 fdd4 	bl	8005cc4 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800311c:	2201      	movs	r2, #1
 800311e:	2102      	movs	r1, #2
 8003120:	4898      	ldr	r0, [pc, #608]	; (8003384 <main+0x2dc>)
 8003122:	f005 ff13 	bl	8008f4c <HAL_GPIO_WritePin>

  //General Timer HAL
  HAL_TIM_Base_Start_IT(&htim7);
 8003126:	4898      	ldr	r0, [pc, #608]	; (8003388 <main+0x2e0>)
 8003128:	f00b fdc8 	bl	800ecbc <HAL_TIM_Base_Start_IT>
  //General PWM LL
//  LL_TIM_EnableCounter(TIM7);
//  LL_TIM_EnableIT_UPDATE(TIM7);

  //USART Channels HAL
  HAL_UART_Receive_DMA(&huart1, &uart1_rx_data, 1); //FTDI
 800312c:	2201      	movs	r2, #1
 800312e:	4997      	ldr	r1, [pc, #604]	; (800338c <main+0x2e4>)
 8003130:	4897      	ldr	r0, [pc, #604]	; (8003390 <main+0x2e8>)
 8003132:	f00d f8d1 	bl	80102d8 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, &uart2_rx_data, 1); //Receiver
 8003136:	2201      	movs	r2, #1
 8003138:	4996      	ldr	r1, [pc, #600]	; (8003394 <main+0x2ec>)
 800313a:	4897      	ldr	r0, [pc, #604]	; (8003398 <main+0x2f0>)
 800313c:	f00d f8cc 	bl	80102d8 <HAL_UART_Receive_DMA>

	//Motor PWM HAL
	HAL_TIM_Base_Start_IT(&htim3);
 8003140:	4896      	ldr	r0, [pc, #600]	; (800339c <main+0x2f4>)
 8003142:	f00b fdbb 	bl	800ecbc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8003146:	2100      	movs	r1, #0
 8003148:	4894      	ldr	r0, [pc, #592]	; (800339c <main+0x2f4>)
 800314a:	f00b fe89 	bl	800ee60 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 800314e:	2104      	movs	r1, #4
 8003150:	4892      	ldr	r0, [pc, #584]	; (800339c <main+0x2f4>)
 8003152:	f00b fe85 	bl	800ee60 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8003156:	2108      	movs	r1, #8
 8003158:	4890      	ldr	r0, [pc, #576]	; (800339c <main+0x2f4>)
 800315a:	f00b fe81 	bl	800ee60 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 800315e:	210c      	movs	r1, #12
 8003160:	488e      	ldr	r0, [pc, #568]	; (800339c <main+0x2f4>)
 8003162:	f00b fe7d 	bl	800ee60 <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8003166:	e009      	b.n	800317c <main+0xd4>
	{
		if(tim1_20ms_flag == 1)
 8003168:	4b8d      	ldr	r3, [pc, #564]	; (80033a0 <main+0x2f8>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d105      	bne.n	800317c <main+0xd4>
		{
			tim1_20ms_flag = 0;
 8003170:	4b8b      	ldr	r3, [pc, #556]	; (80033a0 <main+0x2f8>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8003176:	488b      	ldr	r0, [pc, #556]	; (80033a4 <main+0x2fc>)
 8003178:	f00f fa96 	bl	80126a8 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 800317c:	2303      	movs	r3, #3
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2303      	movs	r3, #3
 8003182:	2203      	movs	r2, #3
 8003184:	2103      	movs	r1, #3
 8003186:	4888      	ldr	r0, [pc, #544]	; (80033a8 <main+0x300>)
 8003188:	f7fd fb82 	bl	8000890 <MPU9250_Init>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ea      	beq.n	8003168 <main+0xc0>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8003192:	4885      	ldr	r0, [pc, #532]	; (80033a8 <main+0x300>)
 8003194:	f7fd fc64 	bl	8000a60 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8003198:	e009      	b.n	80031ae <main+0x106>
	{
		if(tim1_20ms_flag == 1)
 800319a:	4b81      	ldr	r3, [pc, #516]	; (80033a0 <main+0x2f8>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d105      	bne.n	80031ae <main+0x106>
		{
			tim1_20ms_flag = 0;
 80031a2:	4b7f      	ldr	r3, [pc, #508]	; (80033a0 <main+0x2f8>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 80031a8:	4880      	ldr	r0, [pc, #512]	; (80033ac <main+0x304>)
 80031aa:	f00f fa7d 	bl	80126a8 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 80031ae:	4971      	ldr	r1, [pc, #452]	; (8003374 <main+0x2cc>)
 80031b0:	487d      	ldr	r0, [pc, #500]	; (80033a8 <main+0x300>)
 80031b2:	f7fd fcd5 	bl	8000b60 <MPU9250_AK8963_Setup>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ee      	beq.n	800319a <main+0xf2>
		}
	}
	MPU9250_Master(&hi2c1);
 80031bc:	487a      	ldr	r0, [pc, #488]	; (80033a8 <main+0x300>)
 80031be:	f7fd fc7d 	bl	8000abc <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 80031c2:	4879      	ldr	r0, [pc, #484]	; (80033a8 <main+0x300>)
 80031c4:	f7fd fd22 	bl	8000c0c <MPU9250_Slave0_Enable>

	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 80031c8:	f002 f9ba 	bl	8005540 <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 80031cc:	230c      	movs	r3, #12
 80031ce:	2200      	movs	r2, #0
 80031d0:	2100      	movs	r1, #0
 80031d2:	4877      	ldr	r0, [pc, #476]	; (80033b0 <main+0x308>)
 80031d4:	f002 fc58 	bl	8005a88 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 80031d8:	4b75      	ldr	r3, [pc, #468]	; (80033b0 <main+0x308>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a65      	ldr	r2, [pc, #404]	; (8003374 <main+0x2cc>)
 80031de:	6653      	str	r3, [r2, #100]	; 0x64
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 80031e0:	4b74      	ldr	r3, [pc, #464]	; (80033b4 <main+0x30c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a63      	ldr	r2, [pc, #396]	; (8003374 <main+0x2cc>)
 80031e6:	6693      	str	r3, [r2, #104]	; 0x68
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 80031e8:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <main+0x310>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a61      	ldr	r2, [pc, #388]	; (8003374 <main+0x2cc>)
 80031ee:	66d3      	str	r3, [r2, #108]	; 0x6c

	//Receiver Check
	printf("Receiver Status Check \n"); HAL_Delay(10);
 80031f0:	4872      	ldr	r0, [pc, #456]	; (80033bc <main+0x314>)
 80031f2:	f00f fa59 	bl	80126a8 <puts>
 80031f6:	200a      	movs	r0, #10
 80031f8:	f002 fd64 	bl	8005cc4 <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 80031fc:	e011      	b.n	8003222 <main+0x17a>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80031fe:	2200      	movs	r2, #0
 8003200:	2102      	movs	r1, #2
 8003202:	4860      	ldr	r0, [pc, #384]	; (8003384 <main+0x2dc>)
 8003204:	f005 fea2 	bl	8008f4c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003208:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800320c:	f002 fd5a 	bl	8005cc4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003210:	2201      	movs	r2, #1
 8003212:	2102      	movs	r1, #2
 8003214:	485b      	ldr	r0, [pc, #364]	; (8003384 <main+0x2dc>)
 8003216:	f005 fe99 	bl	8008f4c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800321a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800321e:	f002 fd51 	bl	8005cc4 <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8003222:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <main+0x318>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fef0 	bl	800500c <Is_iBus_Received>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0e5      	beq.n	80031fe <main+0x156>
	}
	while(Is_Throttle_Min() == 0)
 8003232:	e01d      	b.n	8003270 <main+0x1c8>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003234:	2200      	movs	r2, #0
 8003236:	2102      	movs	r1, #2
 8003238:	4852      	ldr	r0, [pc, #328]	; (8003384 <main+0x2dc>)
 800323a:	f005 fe87 	bl	8008f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_GPIO_Port, GPIO_PIN_SET);
 800323e:	2201      	movs	r2, #1
 8003240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003244:	485f      	ldr	r0, [pc, #380]	; (80033c4 <main+0x31c>)
 8003246:	f005 fe81 	bl	8008f4c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800324a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800324e:	f002 fd39 	bl	8005cc4 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003252:	2201      	movs	r2, #1
 8003254:	2102      	movs	r1, #2
 8003256:	484b      	ldr	r0, [pc, #300]	; (8003384 <main+0x2dc>)
 8003258:	f005 fe78 	bl	8008f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_GPIO_Port, GPIO_PIN_RESET);
 800325c:	2200      	movs	r2, #0
 800325e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003262:	4858      	ldr	r0, [pc, #352]	; (80033c4 <main+0x31c>)
 8003264:	f005 fe72 	bl	8008f4c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8003268:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800326c:	f002 fd2a 	bl	8005cc4 <HAL_Delay>
	while(Is_Throttle_Min() == 0)
 8003270:	f001 ff04 	bl	800507c <Is_Throttle_Min>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0dc      	beq.n	8003234 <main+0x18c>
	}
	printf("Receiver OK \n"); HAL_Delay(10);
 800327a:	4853      	ldr	r0, [pc, #332]	; (80033c8 <main+0x320>)
 800327c:	f00f fa14 	bl	80126a8 <puts>
 8003280:	200a      	movs	r0, #10
 8003282:	f002 fd1f 	bl	8005cc4 <HAL_Delay>

	//ESC Calibration
	if(iBus.SwB == 2000 && iBus.SwC == 2000)
 8003286:	4b51      	ldr	r3, [pc, #324]	; (80033cc <main+0x324>)
 8003288:	895b      	ldrh	r3, [r3, #10]
 800328a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800328e:	d111      	bne.n	80032b4 <main+0x20c>
 8003290:	4b4e      	ldr	r3, [pc, #312]	; (80033cc <main+0x324>)
 8003292:	899b      	ldrh	r3, [r3, #12]
 8003294:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003298:	d10c      	bne.n	80032b4 <main+0x20c>
	{
		ESC_Calibration();
 800329a:	f001 f8d7 	bl	800444c <ESC_Calibration>
		while(iBus.SwB != 1000) Is_iBus_Received(ibus_rx_cplt_flag);
 800329e:	e004      	b.n	80032aa <main+0x202>
 80032a0:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <main+0x318>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f001 feb1 	bl	800500c <Is_iBus_Received>
 80032aa:	4b48      	ldr	r3, [pc, #288]	; (80033cc <main+0x324>)
 80032ac:	895b      	ldrh	r3, [r3, #10]
 80032ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b2:	d1f5      	bne.n	80032a0 <main+0x1f8>
	}

	while (1)
	{
		//UART Message Check
		Receive_Command();
 80032b4:	f001 fe32 	bl	8004f1c <Receive_Command>
		Compass_Calibration(mag_calibration_enable);
 80032b8:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <main+0x328>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 ffd7 	bl	8004270 <Compass_Calibration>

		//Receiver Channel Check
		Is_iBus_Received(ibus_rx_cplt_flag);
 80032c2:	4b3f      	ldr	r3, [pc, #252]	; (80033c0 <main+0x318>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fea0 	bl	800500c <Is_iBus_Received>
		if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 80032cc:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <main+0x324>)
 80032ce:	891b      	ldrh	r3, [r3, #8]
 80032d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032d4:	d111      	bne.n	80032fa <main+0x252>
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <main+0x32c>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032de:	d00c      	beq.n	80032fa <main+0x252>
		{
			if(iBus.LV < 1010)
 80032e0:	4b3a      	ldr	r3, [pc, #232]	; (80033cc <main+0x324>)
 80032e2:	889b      	ldrh	r3, [r3, #4]
 80032e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d806      	bhi.n	80032fa <main+0x252>
			{
				motor_arming_flag = 1;
 80032ec:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <main+0x330>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	701a      	strb	r2, [r3, #0]
				yaw_heading_reference = System_Yaw;
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <main+0x334>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <main+0x338>)
 80032f8:	6013      	str	r3, [r2, #0]
			}
		}
		iBus_SwA_Prev = iBus.SwA;
 80032fa:	4b34      	ldr	r3, [pc, #208]	; (80033cc <main+0x324>)
 80032fc:	891a      	ldrh	r2, [r3, #8]
 80032fe:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <main+0x32c>)
 8003300:	801a      	strh	r2, [r3, #0]
		if(iBus.SwA != 2000)
 8003302:	4b32      	ldr	r3, [pc, #200]	; (80033cc <main+0x324>)
 8003304:	891b      	ldrh	r3, [r3, #8]
 8003306:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800330a:	d002      	beq.n	8003312 <main+0x26a>
		{
			motor_arming_flag = 0;
 800330c:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <main+0x330>)
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
		}
		if(motor_arming_flag == 1)
 8003312:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <main+0x330>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b01      	cmp	r3, #1
 8003318:	f040 809f 	bne.w	800345a <main+0x3b2>
		{
			if(iBus_failsafe == 0)
 800331c:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <main+0x33c>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f040 8095 	bne.w	8003450 <main+0x3a8>
			{
				if(iBus.LV > 1010)
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <main+0x324>)
 8003328:	889b      	ldrh	r3, [r3, #4]
 800332a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800332e:	4293      	cmp	r3, r2
 8003330:	f240 8089 	bls.w	8003446 <main+0x39e>
				{
					TIM3->CCR1 = ccr1 > 20000 ? 19900 : ccr1 < 10000 ? 10000 : ccr1;
 8003334:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <main+0x340>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f644 6220 	movw	r2, #20000	; 0x4e20
 800333c:	4293      	cmp	r3, r2
 800333e:	d807      	bhi.n	8003350 <main+0x2a8>
 8003340:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <main+0x340>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f242 7210 	movw	r2, #10000	; 0x2710
 8003348:	4293      	cmp	r3, r2
 800334a:	bf38      	it	cc
 800334c:	4613      	movcc	r3, r2
 800334e:	e001      	b.n	8003354 <main+0x2ac>
 8003350:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8003354:	4a25      	ldr	r2, [pc, #148]	; (80033ec <main+0x344>)
 8003356:	6353      	str	r3, [r2, #52]	; 0x34
					TIM3->CCR2 = ccr2 > 20000 ? 19900 : ccr2 < 10000 ? 10000 : ccr2;
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <main+0x348>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003360:	4293      	cmp	r3, r2
 8003362:	d847      	bhi.n	80033f4 <main+0x34c>
 8003364:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <main+0x348>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f242 7210 	movw	r2, #10000	; 0x2710
 800336c:	4293      	cmp	r3, r2
 800336e:	bf38      	it	cc
 8003370:	4613      	movcc	r3, r2
 8003372:	e041      	b.n	80033f8 <main+0x350>
 8003374:	2400027c 	.word	0x2400027c
 8003378:	3edc28f6 	.word	0x3edc28f6
 800337c:	befae148 	.word	0xbefae148
 8003380:	bfb33333 	.word	0xbfb33333
 8003384:	58020000 	.word	0x58020000
 8003388:	24000e14 	.word	0x24000e14
 800338c:	24000241 	.word	0x24000241
 8003390:	24000be4 	.word	0x24000be4
 8003394:	24000243 	.word	0x24000243
 8003398:	24000d78 	.word	0x24000d78
 800339c:	24000aa0 	.word	0x24000aa0
 80033a0:	2400023e 	.word	0x2400023e
 80033a4:	08015018 	.word	0x08015018
 80033a8:	24000a54 	.word	0x24000a54
 80033ac:	0801502c 	.word	0x0801502c
 80033b0:	24000e08 	.word	0x24000e08
 80033b4:	24000e0c 	.word	0x24000e0c
 80033b8:	24000e10 	.word	0x24000e10
 80033bc:	08015040 	.word	0x08015040
 80033c0:	24000244 	.word	0x24000244
 80033c4:	58021000 	.word	0x58021000
 80033c8:	08015058 	.word	0x08015058
 80033cc:	2400025c 	.word	0x2400025c
 80033d0:	24000231 	.word	0x24000231
 80033d4:	24000234 	.word	0x24000234
 80033d8:	24000215 	.word	0x24000215
 80033dc:	24000310 	.word	0x24000310
 80033e0:	24000238 	.word	0x24000238
 80033e4:	24000214 	.word	0x24000214
 80033e8:	24000948 	.word	0x24000948
 80033ec:	40000400 	.word	0x40000400
 80033f0:	24000bdc 	.word	0x24000bdc
 80033f4:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 80033f8:	4ac9      	ldr	r2, [pc, #804]	; (8003720 <main+0x678>)
 80033fa:	6393      	str	r3, [r2, #56]	; 0x38
					TIM3->CCR3 = ccr3 > 20000 ? 19900 : ccr3 < 10000 ? 10000 : ccr3;
 80033fc:	4bc9      	ldr	r3, [pc, #804]	; (8003724 <main+0x67c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003404:	4293      	cmp	r3, r2
 8003406:	d807      	bhi.n	8003418 <main+0x370>
 8003408:	4bc6      	ldr	r3, [pc, #792]	; (8003724 <main+0x67c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003410:	4293      	cmp	r3, r2
 8003412:	bf38      	it	cc
 8003414:	4613      	movcc	r3, r2
 8003416:	e001      	b.n	800341c <main+0x374>
 8003418:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 800341c:	4ac0      	ldr	r2, [pc, #768]	; (8003720 <main+0x678>)
 800341e:	63d3      	str	r3, [r2, #60]	; 0x3c
					TIM3->CCR4 = ccr4 > 20000 ? 19900 : ccr4 < 10000 ? 10000 : ccr4;
 8003420:	4bc1      	ldr	r3, [pc, #772]	; (8003728 <main+0x680>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003428:	4293      	cmp	r3, r2
 800342a:	d807      	bhi.n	800343c <main+0x394>
 800342c:	4bbe      	ldr	r3, [pc, #760]	; (8003728 <main+0x680>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f242 7210 	movw	r2, #10000	; 0x2710
 8003434:	4293      	cmp	r3, r2
 8003436:	bf38      	it	cc
 8003438:	4613      	movcc	r3, r2
 800343a:	e001      	b.n	8003440 <main+0x398>
 800343c:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8003440:	4ab7      	ldr	r2, [pc, #732]	; (8003720 <main+0x678>)
 8003442:	6413      	str	r3, [r2, #64]	; 0x40
 8003444:	e00d      	b.n	8003462 <main+0x3ba>
				}
				else Stop_Motor(10000);
 8003446:	f242 7010 	movw	r0, #10000	; 0x2710
 800344a:	f001 f82d 	bl	80044a8 <Stop_Motor>
 800344e:	e008      	b.n	8003462 <main+0x3ba>
			}
			else Stop_Motor(10000);
 8003450:	f242 7010 	movw	r0, #10000	; 0x2710
 8003454:	f001 f828 	bl	80044a8 <Stop_Motor>
 8003458:	e003      	b.n	8003462 <main+0x3ba>
		}
		else
			Stop_Motor(10000);
 800345a:	f242 7010 	movw	r0, #10000	; 0x2710
 800345e:	f001 f823 	bl	80044a8 <Stop_Motor>

		if(iBus.SwD == 2000) HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8003462:	4bb2      	ldr	r3, [pc, #712]	; (800372c <main+0x684>)
 8003464:	89db      	ldrh	r3, [r3, #14]
 8003466:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800346a:	d105      	bne.n	8003478 <main+0x3d0>
 800346c:	2201      	movs	r2, #1
 800346e:	2108      	movs	r1, #8
 8003470:	48af      	ldr	r0, [pc, #700]	; (8003730 <main+0x688>)
 8003472:	f005 fd6b 	bl	8008f4c <HAL_GPIO_WritePin>
 8003476:	e004      	b.n	8003482 <main+0x3da>
		else HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8003478:	2200      	movs	r2, #0
 800347a:	2108      	movs	r1, #8
 800347c:	48ac      	ldr	r0, [pc, #688]	; (8003730 <main+0x688>)
 800347e:	f005 fd65 	bl	8008f4c <HAL_GPIO_WritePin>

		//Read MPU9250 + Motor PID
		if(tim1_2ms_flag == 1)
 8003482:	4bac      	ldr	r3, [pc, #688]	; (8003734 <main+0x68c>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	f040 8221 	bne.w	80038ce <main+0x826>
		{
			tim1_2ms_flag = 0;
 800348c:	4ba9      	ldr	r3, [pc, #676]	; (8003734 <main+0x68c>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8003492:	48a9      	ldr	r0, [pc, #676]	; (8003738 <main+0x690>)
 8003494:	f7fd fbfa 	bl	8000c8c <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8003498:	48a8      	ldr	r0, [pc, #672]	; (800373c <main+0x694>)
 800349a:	f7fd fc0b 	bl	8000cb4 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 800349e:	4ba7      	ldr	r3, [pc, #668]	; (800373c <main+0x694>)
 80034a0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80034a4:	4ba5      	ldr	r3, [pc, #660]	; (800373c <main+0x694>)
 80034a6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80034aa:	4ba4      	ldr	r3, [pc, #656]	; (800373c <main+0x694>)
 80034ac:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80034b0:	4ba2      	ldr	r3, [pc, #648]	; (800373c <main+0x694>)
 80034b2:	ed93 6a02 	vldr	s12, [r3, #8]
 80034b6:	4ba1      	ldr	r3, [pc, #644]	; (800373c <main+0x694>)
 80034b8:	edd3 5a03 	vldr	s11, [r3, #12]
 80034bc:	4b9f      	ldr	r3, [pc, #636]	; (800373c <main+0x694>)
 80034be:	ed93 5a04 	vldr	s10, [r3, #16]
 80034c2:	4b9e      	ldr	r3, [pc, #632]	; (800373c <main+0x694>)
 80034c4:	edd3 4a1c 	vldr	s9, [r3, #112]	; 0x70
 80034c8:	4b9c      	ldr	r3, [pc, #624]	; (800373c <main+0x694>)
 80034ca:	edd3 3a1d 	vldr	s7, [r3, #116]	; 0x74
 80034ce:	4b9b      	ldr	r3, [pc, #620]	; (800373c <main+0x694>)
 80034d0:	ed93 4a1e 	vldr	s8, [r3, #120]	; 0x78
 80034d4:	eeb0 3a64 	vmov.f32	s6, s9
 80034d8:	eef0 2a45 	vmov.f32	s5, s10
 80034dc:	eeb0 2a65 	vmov.f32	s4, s11
 80034e0:	eef0 1a46 	vmov.f32	s3, s12
 80034e4:	eeb0 1a66 	vmov.f32	s2, s13
 80034e8:	eef0 0a47 	vmov.f32	s1, s14
 80034ec:	eeb0 0a67 	vmov.f32	s0, s15
 80034f0:	f7fd feca 	bl	8001288 <MadgwickAHRSupdate>
			Double_PID_Calculation_Rate(&roll, (iBus.LH - 1500) * 0.7, System_Roll, MPU9250.Gx, 1000, 500, 0, 1, 0);
 80034f4:	4b8d      	ldr	r3, [pc, #564]	; (800372c <main+0x684>)
 80034f6:	88db      	ldrh	r3, [r3, #6]
 80034f8:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80034fc:	ee07 3a90 	vmov	s15, r3
 8003500:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003504:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8003718 <main+0x670>
 8003508:	ee27 7b06 	vmul.f64	d7, d7, d6
 800350c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003510:	4b8b      	ldr	r3, [pc, #556]	; (8003740 <main+0x698>)
 8003512:	ed93 7a00 	vldr	s14, [r3]
 8003516:	4b89      	ldr	r3, [pc, #548]	; (800373c <main+0x694>)
 8003518:	edd3 6a07 	vldr	s13, [r3, #28]
 800351c:	2300      	movs	r3, #0
 800351e:	2201      	movs	r2, #1
 8003520:	2100      	movs	r1, #0
 8003522:	ed9f 2a88 	vldr	s4, [pc, #544]	; 8003744 <main+0x69c>
 8003526:	eddf 1a88 	vldr	s3, [pc, #544]	; 8003748 <main+0x6a0>
 800352a:	eeb0 1a66 	vmov.f32	s2, s13
 800352e:	eef0 0a47 	vmov.f32	s1, s14
 8003532:	eeb0 0a67 	vmov.f32	s0, s15
 8003536:	4885      	ldr	r0, [pc, #532]	; (800374c <main+0x6a4>)
 8003538:	f7ff fb1e 	bl	8002b78 <Double_PID_Calculation_Rate>
			Double_PID_Calculation_Rate(&pitch, -(iBus.LH - 1500) * 0.7, System_Pitch, MPU9250.Gy, 1000, 500, 0, 1, 0);
 800353c:	4b7b      	ldr	r3, [pc, #492]	; (800372c <main+0x684>)
 800353e:	88db      	ldrh	r3, [r3, #6]
 8003540:	461a      	mov	r2, r3
 8003542:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	ee07 3a90 	vmov	s15, r3
 800354c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003550:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8003718 <main+0x670>
 8003554:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003558:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800355c:	4b7c      	ldr	r3, [pc, #496]	; (8003750 <main+0x6a8>)
 800355e:	ed93 7a00 	vldr	s14, [r3]
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <main+0x694>)
 8003564:	edd3 6a08 	vldr	s13, [r3, #32]
 8003568:	2300      	movs	r3, #0
 800356a:	2201      	movs	r2, #1
 800356c:	2100      	movs	r1, #0
 800356e:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8003744 <main+0x69c>
 8003572:	eddf 1a75 	vldr	s3, [pc, #468]	; 8003748 <main+0x6a0>
 8003576:	eeb0 1a66 	vmov.f32	s2, s13
 800357a:	eef0 0a47 	vmov.f32	s1, s14
 800357e:	eeb0 0a67 	vmov.f32	s0, s15
 8003582:	4874      	ldr	r0, [pc, #464]	; (8003754 <main+0x6ac>)
 8003584:	f7ff faf8 	bl	8002b78 <Double_PID_Calculation_Rate>

			if(iBus.LH > 1480 && iBus.LH < 1520) is_yaw_middle = 1;
 8003588:	4b68      	ldr	r3, [pc, #416]	; (800372c <main+0x684>)
 800358a:	88db      	ldrh	r3, [r3, #6]
 800358c:	f5b3 6fb9 	cmp.w	r3, #1480	; 0x5c8
 8003590:	d908      	bls.n	80035a4 <main+0x4fc>
 8003592:	4b66      	ldr	r3, [pc, #408]	; (800372c <main+0x684>)
 8003594:	88db      	ldrh	r3, [r3, #6]
 8003596:	f5b3 6fbe 	cmp.w	r3, #1520	; 0x5f0
 800359a:	d203      	bcs.n	80035a4 <main+0x4fc>
 800359c:	4b6e      	ldr	r3, [pc, #440]	; (8003758 <main+0x6b0>)
 800359e:	2201      	movs	r2, #1
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e002      	b.n	80035aa <main+0x502>
			else is_yaw_middle = 0;
 80035a4:	4b6c      	ldr	r3, [pc, #432]	; (8003758 <main+0x6b0>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]

			if(is_yaw_middle == 0)
 80035aa:	4b6b      	ldr	r3, [pc, #428]	; (8003758 <main+0x6b0>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 80e0 	bne.w	8003774 <main+0x6cc>
			{
				yaw_heading_reference = System_Yaw;
 80035b4:	4b69      	ldr	r3, [pc, #420]	; (800375c <main+0x6b4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a69      	ldr	r2, [pc, #420]	; (8003760 <main+0x6b8>)
 80035ba:	6013      	str	r3, [r2, #0]
				Single_PID_Calculation(&yaw_rate, (iBus.LH-1500), MPU9250.Gz, 200,1 ,1);
 80035bc:	4b5b      	ldr	r3, [pc, #364]	; (800372c <main+0x684>)
 80035be:	88db      	ldrh	r3, [r3, #6]
 80035c0:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035cc:	4b5b      	ldr	r3, [pc, #364]	; (800373c <main+0x694>)
 80035ce:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80035d2:	2201      	movs	r2, #1
 80035d4:	2101      	movs	r1, #1
 80035d6:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8003764 <main+0x6bc>
 80035da:	eef0 0a47 	vmov.f32	s1, s14
 80035de:	eeb0 0a67 	vmov.f32	s0, s15
 80035e2:	4861      	ldr	r0, [pc, #388]	; (8003768 <main+0x6c0>)
 80035e4:	f7ff fc38 	bl	8002e58 <Single_PID_Calculation>
				ccr1 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result + pitch.in.pid_result - yaw_rate.out.pid_result;
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <main+0x684>)
 80035ea:	889b      	ldrh	r3, [r3, #4]
 80035ec:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	461a      	mov	r2, r3
 80035fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80035fe:	4413      	add	r3, r2
 8003600:	ee07 3a90 	vmov	s15, r3
 8003604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <main+0x6a4>)
 800360a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800360e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003612:	4b50      	ldr	r3, [pc, #320]	; (8003754 <main+0x6ac>)
 8003614:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361c:	4b52      	ldr	r3, [pc, #328]	; (8003768 <main+0x6c0>)
 800361e:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362a:	ee17 2a90 	vmov	r2, s15
 800362e:	4b4f      	ldr	r3, [pc, #316]	; (800376c <main+0x6c4>)
 8003630:	601a      	str	r2, [r3, #0]
				ccr2 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result - pitch.in.pid_result + yaw_rate.out.pid_result;
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <main+0x684>)
 8003634:	889b      	ldrh	r3, [r3, #4]
 8003636:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	461a      	mov	r2, r3
 8003644:	f242 7310 	movw	r3, #10000	; 0x2710
 8003648:	4413      	add	r3, r2
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003652:	4b3e      	ldr	r3, [pc, #248]	; (800374c <main+0x6a4>)
 8003654:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800365c:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <main+0x6ac>)
 800365e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003662:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003666:	4b40      	ldr	r3, [pc, #256]	; (8003768 <main+0x6c0>)
 8003668:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800366c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003674:	ee17 2a90 	vmov	r2, s15
 8003678:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <main+0x6c8>)
 800367a:	601a      	str	r2, [r3, #0]
				ccr3 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result - pitch.in.pid_result + yaw_rate.out.pid_result;
 800367c:	4b2b      	ldr	r3, [pc, #172]	; (800372c <main+0x684>)
 800367e:	889b      	ldrh	r3, [r3, #4]
 8003680:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	461a      	mov	r2, r3
 800368e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003692:	4413      	add	r3, r2
 8003694:	ee07 3a90 	vmov	s15, r3
 8003698:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800369c:	4b2b      	ldr	r3, [pc, #172]	; (800374c <main+0x6a4>)
 800369e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80036a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036a6:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <main+0x6ac>)
 80036a8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80036ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036b0:	4b2d      	ldr	r3, [pc, #180]	; (8003768 <main+0x6c0>)
 80036b2:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 80036b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036be:	ee17 2a90 	vmov	r2, s15
 80036c2:	4b18      	ldr	r3, [pc, #96]	; (8003724 <main+0x67c>)
 80036c4:	601a      	str	r2, [r3, #0]
				ccr4 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result + pitch.in.pid_result - yaw_rate.out.pid_result;
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <main+0x684>)
 80036c8:	889b      	ldrh	r3, [r3, #4]
 80036ca:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	461a      	mov	r2, r3
 80036d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80036dc:	4413      	add	r3, r2
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <main+0x6a4>)
 80036e8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80036ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036f0:	4b18      	ldr	r3, [pc, #96]	; (8003754 <main+0x6ac>)
 80036f2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80036f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <main+0x6c0>)
 80036fc:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8003700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003708:	ee17 2a90 	vmov	r2, s15
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <main+0x680>)
 800370e:	601a      	str	r2, [r3, #0]
 8003710:	e0dd      	b.n	80038ce <main+0x826>
 8003712:	bf00      	nop
 8003714:	f3af 8000 	nop.w
 8003718:	66666666 	.word	0x66666666
 800371c:	3fe66666 	.word	0x3fe66666
 8003720:	40000400 	.word	0x40000400
 8003724:	24000d74 	.word	0x24000d74
 8003728:	24000be0 	.word	0x24000be0
 800372c:	2400025c 	.word	0x2400025c
 8003730:	58021000 	.word	0x58021000
 8003734:	2400023c 	.word	0x2400023c
 8003738:	24000a54 	.word	0x24000a54
 800373c:	2400027c 	.word	0x2400027c
 8003740:	24000314 	.word	0x24000314
 8003744:	43fa0000 	.word	0x43fa0000
 8003748:	447a0000 	.word	0x447a0000
 800374c:	24000730 	.word	0x24000730
 8003750:	24000318 	.word	0x24000318
 8003754:	24000660 	.word	0x24000660
 8003758:	24000232 	.word	0x24000232
 800375c:	24000310 	.word	0x24000310
 8003760:	24000238 	.word	0x24000238
 8003764:	43480000 	.word	0x43480000
 8003768:	24000320 	.word	0x24000320
 800376c:	24000948 	.word	0x24000948
 8003770:	24000bdc 	.word	0x24000bdc
			}
			else
			{
				Double_PID_Calculation_Rate(&yaw_heading, yaw_heading_reference, System_Yaw, MPU9250.Gz, 400, 150, 0, 1, 1);
 8003774:	4bc8      	ldr	r3, [pc, #800]	; (8003a98 <main+0x9f0>)
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	4bc8      	ldr	r3, [pc, #800]	; (8003a9c <main+0x9f4>)
 800377c:	ed93 7a00 	vldr	s14, [r3]
 8003780:	4bc7      	ldr	r3, [pc, #796]	; (8003aa0 <main+0x9f8>)
 8003782:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003786:	2301      	movs	r3, #1
 8003788:	2201      	movs	r2, #1
 800378a:	2100      	movs	r1, #0
 800378c:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 8003aa4 <main+0x9fc>
 8003790:	eddf 1ac5 	vldr	s3, [pc, #788]	; 8003aa8 <main+0xa00>
 8003794:	eeb0 1a66 	vmov.f32	s2, s13
 8003798:	eef0 0a47 	vmov.f32	s1, s14
 800379c:	eeb0 0a67 	vmov.f32	s0, s15
 80037a0:	48c2      	ldr	r0, [pc, #776]	; (8003aac <main+0xa04>)
 80037a2:	f7ff f9e9 	bl	8002b78 <Double_PID_Calculation_Rate>
				ccr1 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result + pitch.in.pid_result - yaw_heading.in.pid_result;
 80037a6:	4bc2      	ldr	r3, [pc, #776]	; (8003ab0 <main+0xa08>)
 80037a8:	889b      	ldrh	r3, [r3, #4]
 80037aa:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	461a      	mov	r2, r3
 80037b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80037bc:	4413      	add	r3, r2
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c6:	4bbb      	ldr	r3, [pc, #748]	; (8003ab4 <main+0xa0c>)
 80037c8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037d0:	4bb9      	ldr	r3, [pc, #740]	; (8003ab8 <main+0xa10>)
 80037d2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037da:	4bb4      	ldr	r3, [pc, #720]	; (8003aac <main+0xa04>)
 80037dc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037e8:	ee17 2a90 	vmov	r2, s15
 80037ec:	4bb3      	ldr	r3, [pc, #716]	; (8003abc <main+0xa14>)
 80037ee:	601a      	str	r2, [r3, #0]
				ccr2 = 10000 + (iBus.LV-1000)*10 + roll.in.pid_result - pitch.in.pid_result + yaw_heading.in.pid_result;
 80037f0:	4baf      	ldr	r3, [pc, #700]	; (8003ab0 <main+0xa08>)
 80037f2:	889b      	ldrh	r3, [r3, #4]
 80037f4:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 80037f8:	4613      	mov	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	4413      	add	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	461a      	mov	r2, r3
 8003802:	f242 7310 	movw	r3, #10000	; 0x2710
 8003806:	4413      	add	r3, r2
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003810:	4ba8      	ldr	r3, [pc, #672]	; (8003ab4 <main+0xa0c>)
 8003812:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800381a:	4ba7      	ldr	r3, [pc, #668]	; (8003ab8 <main+0xa10>)
 800381c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003820:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003824:	4ba1      	ldr	r3, [pc, #644]	; (8003aac <main+0xa04>)
 8003826:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800382a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003832:	ee17 2a90 	vmov	r2, s15
 8003836:	4ba2      	ldr	r3, [pc, #648]	; (8003ac0 <main+0xa18>)
 8003838:	601a      	str	r2, [r3, #0]
				ccr3 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result - pitch.in.pid_result + yaw_heading.in.pid_result;
 800383a:	4b9d      	ldr	r3, [pc, #628]	; (8003ab0 <main+0xa08>)
 800383c:	889b      	ldrh	r3, [r3, #4]
 800383e:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	461a      	mov	r2, r3
 800384c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003850:	4413      	add	r3, r2
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800385a:	4b96      	ldr	r3, [pc, #600]	; (8003ab4 <main+0xa0c>)
 800385c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003860:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003864:	4b94      	ldr	r3, [pc, #592]	; (8003ab8 <main+0xa10>)
 8003866:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800386a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800386e:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <main+0xa04>)
 8003870:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800387c:	ee17 2a90 	vmov	r2, s15
 8003880:	4b90      	ldr	r3, [pc, #576]	; (8003ac4 <main+0xa1c>)
 8003882:	601a      	str	r2, [r3, #0]
				ccr4 = 10000 + (iBus.LV-1000)*10 - roll.in.pid_result + pitch.in.pid_result - yaw_heading.in.pid_result;
 8003884:	4b8a      	ldr	r3, [pc, #552]	; (8003ab0 <main+0xa08>)
 8003886:	889b      	ldrh	r3, [r3, #4]
 8003888:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	461a      	mov	r2, r3
 8003896:	f242 7310 	movw	r3, #10000	; 0x2710
 800389a:	4413      	add	r3, r2
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038a4:	4b83      	ldr	r3, [pc, #524]	; (8003ab4 <main+0xa0c>)
 80038a6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80038aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038ae:	4b82      	ldr	r3, [pc, #520]	; (8003ab8 <main+0xa10>)
 80038b0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80038b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b8:	4b7c      	ldr	r3, [pc, #496]	; (8003aac <main+0xa04>)
 80038ba:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80038be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c6:	ee17 2a90 	vmov	r2, s15
 80038ca:	4b7f      	ldr	r3, [pc, #508]	; (8003ac8 <main+0xa20>)
 80038cc:	601a      	str	r2, [r3, #0]
			}
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 80038ce:	4b7f      	ldr	r3, [pc, #508]	; (8003acc <main+0xa24>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	f040 80ca 	bne.w	8003a6c <main+0x9c4>
		{
			tim1_20ms_flag = 0;
 80038d8:	4b7c      	ldr	r3, [pc, #496]	; (8003acc <main+0xa24>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 80038de:	4b7c      	ldr	r3, [pc, #496]	; (8003ad0 <main+0xa28>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	2b0a      	cmp	r3, #10
 80038e6:	f200 80c3 	bhi.w	8003a70 <main+0x9c8>
 80038ea:	a201      	add	r2, pc, #4	; (adr r2, 80038f0 <main+0x848>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	0800391d 	.word	0x0800391d
 80038f4:	08003a71 	.word	0x08003a71
 80038f8:	0800394f 	.word	0x0800394f
 80038fc:	08003981 	.word	0x08003981
 8003900:	080039b3 	.word	0x080039b3
 8003904:	080039e5 	.word	0x080039e5
 8003908:	08003a71 	.word	0x08003a71
 800390c:	08003a71 	.word	0x08003a71
 8003910:	08003a71 	.word	0x08003a71
 8003914:	08003a71 	.word	0x08003a71
 8003918:	08003a17 	.word	0x08003a17
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 800391c:	4b6d      	ldr	r3, [pc, #436]	; (8003ad4 <main+0xa2c>)
 800391e:	edd3 7a00 	vldr	s15, [r3]
 8003922:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003926:	4b6c      	ldr	r3, [pc, #432]	; (8003ad8 <main+0xa30>)
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003930:	4b5a      	ldr	r3, [pc, #360]	; (8003a9c <main+0x9f4>)
 8003932:	edd3 6a00 	vldr	s13, [r3]
 8003936:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800393a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800393e:	ed8d 7b00 	vstr	d7, [sp]
 8003942:	ec53 2b15 	vmov	r2, r3, d5
 8003946:	4865      	ldr	r0, [pc, #404]	; (8003adc <main+0xa34>)
 8003948:	f00e fe28 	bl	801259c <iprintf>
 800394c:	e091      	b.n	8003a72 <main+0x9ca>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 800394e:	4b54      	ldr	r3, [pc, #336]	; (8003aa0 <main+0x9f8>)
 8003950:	edd3 7a07 	vldr	s15, [r3, #28]
 8003954:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003958:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <main+0x9f8>)
 800395a:	edd3 7a08 	vldr	s15, [r3, #32]
 800395e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003962:	4b4f      	ldr	r3, [pc, #316]	; (8003aa0 <main+0x9f8>)
 8003964:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003968:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800396c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003970:	ed8d 7b00 	vstr	d7, [sp]
 8003974:	ec53 2b15 	vmov	r2, r3, d5
 8003978:	4858      	ldr	r0, [pc, #352]	; (8003adc <main+0xa34>)
 800397a:	f00e fe0f 	bl	801259c <iprintf>
 800397e:	e078      	b.n	8003a72 <main+0x9ca>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8003980:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <main+0x9f8>)
 8003982:	edd3 7a02 	vldr	s15, [r3, #8]
 8003986:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800398a:	4b45      	ldr	r3, [pc, #276]	; (8003aa0 <main+0x9f8>)
 800398c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003990:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003994:	4b42      	ldr	r3, [pc, #264]	; (8003aa0 <main+0x9f8>)
 8003996:	edd3 6a04 	vldr	s13, [r3, #16]
 800399a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800399e:	ed8d 6b02 	vstr	d6, [sp, #8]
 80039a2:	ed8d 7b00 	vstr	d7, [sp]
 80039a6:	ec53 2b15 	vmov	r2, r3, d5
 80039aa:	484c      	ldr	r0, [pc, #304]	; (8003adc <main+0xa34>)
 80039ac:	f00e fdf6 	bl	801259c <iprintf>
 80039b0:	e05f      	b.n	8003a72 <main+0x9ca>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 80039b2:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <main+0x9f8>)
 80039b4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80039b8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80039bc:	4b38      	ldr	r3, [pc, #224]	; (8003aa0 <main+0x9f8>)
 80039be:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80039c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039c6:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <main+0x9f8>)
 80039c8:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 80039cc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80039d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80039d4:	ed8d 7b00 	vstr	d7, [sp]
 80039d8:	ec53 2b15 	vmov	r2, r3, d5
 80039dc:	483f      	ldr	r0, [pc, #252]	; (8003adc <main+0xa34>)
 80039de:	f00e fddd 	bl	801259c <iprintf>
 80039e2:	e046      	b.n	8003a72 <main+0x9ca>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 80039e4:	4b2e      	ldr	r3, [pc, #184]	; (8003aa0 <main+0x9f8>)
 80039e6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80039ea:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <main+0x9f8>)
 80039f0:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80039f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80039f8:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <main+0x9f8>)
 80039fa:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80039fe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003a02:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003a06:	ed8d 7b00 	vstr	d7, [sp]
 8003a0a:	ec53 2b15 	vmov	r2, r3, d5
 8003a0e:	4834      	ldr	r0, [pc, #208]	; (8003ae0 <main+0xa38>)
 8003a10:	f00e fdc4 	bl	801259c <iprintf>
 8003a14:	e02d      	b.n	8003a72 <main+0x9ca>
			case 11: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8003a16:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <main+0xa08>)
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	469c      	mov	ip, r3
 8003a1c:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <main+0xa08>)
 8003a1e:	885b      	ldrh	r3, [r3, #2]
 8003a20:	469e      	mov	lr, r3
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <main+0xa08>)
 8003a24:	889b      	ldrh	r3, [r3, #4]
 8003a26:	4698      	mov	r8, r3
 8003a28:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <main+0xa08>)
 8003a2a:	88db      	ldrh	r3, [r3, #6]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <main+0xa08>)
 8003a30:	891b      	ldrh	r3, [r3, #8]
 8003a32:	4619      	mov	r1, r3
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <main+0xa08>)
 8003a36:	895b      	ldrh	r3, [r3, #10]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <main+0xa08>)
 8003a3c:	8a5b      	ldrh	r3, [r3, #18]
 8003a3e:	461c      	mov	r4, r3
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <main+0xa08>)
 8003a42:	8a9b      	ldrh	r3, [r3, #20]
 8003a44:	461d      	mov	r5, r3
 8003a46:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <main+0xa08>)
 8003a48:	899b      	ldrh	r3, [r3, #12]
 8003a4a:	461e      	mov	r6, r3
 8003a4c:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <main+0xa08>)
 8003a4e:	89db      	ldrh	r3, [r3, #14]
 8003a50:	9306      	str	r3, [sp, #24]
 8003a52:	9605      	str	r6, [sp, #20]
 8003a54:	9504      	str	r5, [sp, #16]
 8003a56:	9403      	str	r4, [sp, #12]
 8003a58:	9002      	str	r0, [sp, #8]
 8003a5a:	9101      	str	r1, [sp, #4]
 8003a5c:	9200      	str	r2, [sp, #0]
 8003a5e:	4643      	mov	r3, r8
 8003a60:	4672      	mov	r2, lr
 8003a62:	4661      	mov	r1, ip
 8003a64:	481f      	ldr	r0, [pc, #124]	; (8003ae4 <main+0xa3c>)
 8003a66:	f00e fd99 	bl	801259c <iprintf>
 8003a6a:	e002      	b.n	8003a72 <main+0x9ca>
			default: break;
			}
		}
 8003a6c:	bf00      	nop
 8003a6e:	e000      	b.n	8003a72 <main+0x9ca>
			default: break;
 8003a70:	bf00      	nop

		//iBus Connection Failsafe
		if(tim1_500ms_flag == 1)
 8003a72:	4b1d      	ldr	r3, [pc, #116]	; (8003ae8 <main+0xa40>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	f47f ac1c 	bne.w	80032b4 <main+0x20c>
		{
			tim1_500ms_flag = 0;
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <main+0xa40>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
			if(iBus_rx_cnt == 0)
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <main+0xa44>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <main+0x9e8>
			{
				iBus_failsafe = 2;
 8003a8a:	4b19      	ldr	r3, [pc, #100]	; (8003af0 <main+0xa48>)
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	701a      	strb	r2, [r3, #0]
			}
			iBus_rx_cnt = 0;
 8003a90:	4b16      	ldr	r3, [pc, #88]	; (8003aec <main+0xa44>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
	{
 8003a96:	e40d      	b.n	80032b4 <main+0x20c>
 8003a98:	24000238 	.word	0x24000238
 8003a9c:	24000310 	.word	0x24000310
 8003aa0:	2400027c 	.word	0x2400027c
 8003aa4:	43160000 	.word	0x43160000
 8003aa8:	43c80000 	.word	0x43c80000
 8003aac:	24000590 	.word	0x24000590
 8003ab0:	2400025c 	.word	0x2400025c
 8003ab4:	24000730 	.word	0x24000730
 8003ab8:	24000660 	.word	0x24000660
 8003abc:	24000948 	.word	0x24000948
 8003ac0:	24000bdc 	.word	0x24000bdc
 8003ac4:	24000d74 	.word	0x24000d74
 8003ac8:	24000be0 	.word	0x24000be0
 8003acc:	2400023e 	.word	0x2400023e
 8003ad0:	24000230 	.word	0x24000230
 8003ad4:	24000314 	.word	0x24000314
 8003ad8:	24000318 	.word	0x24000318
 8003adc:	08015068 	.word	0x08015068
 8003ae0:	08015080 	.word	0x08015080
 8003ae4:	08015094 	.word	0x08015094
 8003ae8:	2400023f 	.word	0x2400023f
 8003aec:	24000216 	.word	0x24000216
 8003af0:	24000214 	.word	0x24000214

08003af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b09c      	sub	sp, #112	; 0x70
 8003af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003afe:	224c      	movs	r2, #76	; 0x4c
 8003b00:	2100      	movs	r1, #0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f00e f900 	bl	8011d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b08:	1d3b      	adds	r3, r7, #4
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f00e f8fa 	bl	8011d08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003b14:	2002      	movs	r0, #2
 8003b16:	f007 fc87 	bl	800b428 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4b32      	ldr	r3, [pc, #200]	; (8003be8 <SystemClock_Config+0xf4>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	4a31      	ldr	r2, [pc, #196]	; (8003be8 <SystemClock_Config+0xf4>)
 8003b24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b28:	6193      	str	r3, [r2, #24]
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <SystemClock_Config+0xf4>)
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <SystemClock_Config+0xf8>)
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	4a2c      	ldr	r2, [pc, #176]	; (8003bec <SystemClock_Config+0xf8>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <SystemClock_Config+0xf8>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003b4c:	bf00      	nop
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <SystemClock_Config+0xf4>)
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5a:	d1f8      	bne.n	8003b4e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003b66:	2301      	movs	r3, #1
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b6a:	2340      	movs	r3, #64	; 0x40
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b72:	2302      	movs	r3, #2
 8003b74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003b76:	2305      	movs	r3, #5
 8003b78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8003b7a:	23c0      	movs	r3, #192	; 0xc0
 8003b7c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b82:	2302      	movs	r3, #2
 8003b84:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b86:	2302      	movs	r3, #2
 8003b88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f007 fc7e 	bl	800b49c <HAL_RCC_OscConfig>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003ba6:	f000 fc97 	bl	80044d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003baa:	233f      	movs	r3, #63	; 0x3f
 8003bac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003bba:	2340      	movs	r3, #64	; 0x40
 8003bbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003bbe:	2340      	movs	r3, #64	; 0x40
 8003bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003bc8:	2340      	movs	r3, #64	; 0x40
 8003bca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003bcc:	1d3b      	adds	r3, r7, #4
 8003bce:	2104      	movs	r1, #4
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f008 f873 	bl	800bcbc <HAL_RCC_ClockConfig>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003bdc:	f000 fc7c 	bl	80044d8 <Error_Handler>
  }
}
 8003be0:	bf00      	nop
 8003be2:	3770      	adds	r7, #112	; 0x70
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	58024800 	.word	0x58024800
 8003bec:	58000400 	.word	0x58000400

08003bf0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b0b0      	sub	sp, #192	; 0xc0
 8003bf4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bf6:	1d3b      	adds	r3, r7, #4
 8003bf8:	22bc      	movs	r2, #188	; 0xbc
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f00e f883 	bl	8011d08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8003c02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003c06:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c0c:	1d3b      	adds	r3, r7, #4
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f008 fbe0 	bl	800c3d4 <HAL_RCCEx_PeriphCLKConfig>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8003c1a:	f000 fc5d 	bl	80044d8 <Error_Handler>
  }
}
 8003c1e:	bf00      	nop
 8003c20:	37c0      	adds	r7, #192	; 0xc0
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <MX_I2C1_Init+0x78>)
 8003c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8003c32:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c34:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <MX_I2C1_Init+0x7c>)
 8003c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c38:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c3e:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c44:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c50:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c62:	480e      	ldr	r0, [pc, #56]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c64:	f005 f98c 	bl	8008f80 <HAL_I2C_Init>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c6e:	f000 fc33 	bl	80044d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c72:	2100      	movs	r1, #0
 8003c74:	4809      	ldr	r0, [pc, #36]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c76:	f007 fb3f 	bl	800b2f8 <HAL_I2CEx_ConfigAnalogFilter>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003c80:	f000 fc2a 	bl	80044d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003c84:	2100      	movs	r1, #0
 8003c86:	4805      	ldr	r0, [pc, #20]	; (8003c9c <MX_I2C1_Init+0x74>)
 8003c88:	f007 fb81 	bl	800b38e <HAL_I2CEx_ConfigDigitalFilter>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003c92:	f000 fc21 	bl	80044d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	24000a54 	.word	0x24000a54
 8003ca0:	40005400 	.word	0x40005400
 8003ca4:	00b03fdb 	.word	0x00b03fdb

08003ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cae:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <MX_SPI1_Init+0xa8>)
 8003cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003cba:	4b24      	ldr	r3, [pc, #144]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003cc0:	4b22      	ldr	r3, [pc, #136]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cc6:	4b21      	ldr	r3, [pc, #132]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ccc:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cd2:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003cda:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cdc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003ce0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ce2:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ce8:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003cfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d00:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003d02:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d14:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003d38:	4804      	ldr	r0, [pc, #16]	; (8003d4c <MX_SPI1_Init+0xa4>)
 8003d3a:	f009 fead 	bl	800da98 <HAL_SPI_Init>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003d44:	f000 fbc8 	bl	80044d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	24000cec 	.word	0x24000cec
 8003d50:	40013000 	.word	0x40013000

08003d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d68:	f107 031c 	add.w	r3, r7, #28
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d74:	463b      	mov	r3, r7
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	609a      	str	r2, [r3, #8]
 8003d7e:	60da      	str	r2, [r3, #12]
 8003d80:	611a      	str	r2, [r3, #16]
 8003d82:	615a      	str	r2, [r3, #20]
 8003d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003d86:	4b3d      	ldr	r3, [pc, #244]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003d88:	4a3d      	ldr	r2, [pc, #244]	; (8003e80 <MX_TIM3_Init+0x12c>)
 8003d8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003d8c:	4b3b      	ldr	r3, [pc, #236]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003d8e:	2217      	movs	r2, #23
 8003d90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d92:	4b3a      	ldr	r3, [pc, #232]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003d98:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003d9a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003d9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da0:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da6:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003dac:	4833      	ldr	r0, [pc, #204]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003dae:	f00a ff2e 	bl	800ec0e <HAL_TIM_Base_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003db8:	f000 fb8e 	bl	80044d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	482c      	ldr	r0, [pc, #176]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003dca:	f00b fbc7 	bl	800f55c <HAL_TIM_ConfigClockSource>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003dd4:	f000 fb80 	bl	80044d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003dd8:	4828      	ldr	r0, [pc, #160]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003dda:	f00a ffdf 	bl	800ed9c <HAL_TIM_PWM_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003de4:	f000 fb78 	bl	80044d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003df0:	f107 031c 	add.w	r3, r7, #28
 8003df4:	4619      	mov	r1, r3
 8003df6:	4821      	ldr	r0, [pc, #132]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003df8:	f00c f8f8 	bl	800ffec <HAL_TIMEx_MasterConfigSynchronization>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003e02:	f000 fb69 	bl	80044d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e06:	2360      	movs	r3, #96	; 0x60
 8003e08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e16:	463b      	mov	r3, r7
 8003e18:	2200      	movs	r2, #0
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4817      	ldr	r0, [pc, #92]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e1e:	f00b fa8d 	bl	800f33c <HAL_TIM_PWM_ConfigChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003e28:	f000 fb56 	bl	80044d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	2204      	movs	r2, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4812      	ldr	r0, [pc, #72]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e34:	f00b fa82 	bl	800f33c <HAL_TIM_PWM_ConfigChannel>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003e3e:	f000 fb4b 	bl	80044d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e42:	463b      	mov	r3, r7
 8003e44:	2208      	movs	r2, #8
 8003e46:	4619      	mov	r1, r3
 8003e48:	480c      	ldr	r0, [pc, #48]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e4a:	f00b fa77 	bl	800f33c <HAL_TIM_PWM_ConfigChannel>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8003e54:	f000 fb40 	bl	80044d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e58:	463b      	mov	r3, r7
 8003e5a:	220c      	movs	r2, #12
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4807      	ldr	r0, [pc, #28]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e60:	f00b fa6c 	bl	800f33c <HAL_TIM_PWM_ConfigChannel>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8003e6a:	f000 fb35 	bl	80044d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003e6e:	4803      	ldr	r0, [pc, #12]	; (8003e7c <MX_TIM3_Init+0x128>)
 8003e70:	f000 fc9e 	bl	80047b0 <HAL_TIM_MspPostInit>

}
 8003e74:	bf00      	nop
 8003e76:	3738      	adds	r7, #56	; 0x38
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	24000aa0 	.word	0x24000aa0
 8003e80:	40000400 	.word	0x40000400

08003e84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003e96:	4a15      	ldr	r2, [pc, #84]	; (8003eec <MX_TIM7_Init+0x68>)
 8003e98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003e9c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003ea0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8003ea8:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003eaa:	2205      	movs	r2, #5
 8003eac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003eb4:	480c      	ldr	r0, [pc, #48]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003eb6:	f00a feaa 	bl	800ec0e <HAL_TIM_Base_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003ec0:	f000 fb0a 	bl	80044d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4805      	ldr	r0, [pc, #20]	; (8003ee8 <MX_TIM7_Init+0x64>)
 8003ed2:	f00c f88b 	bl	800ffec <HAL_TIMEx_MasterConfigSynchronization>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003edc:	f000 fafc 	bl	80044d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	24000e14 	.word	0x24000e14
 8003eec:	40001400 	.word	0x40001400

08003ef0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003ef6:	4a23      	ldr	r2, [pc, #140]	; (8003f84 <MX_USART1_UART_Init+0x94>)
 8003ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003efa:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f02:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f16:	220c      	movs	r2, #12
 8003f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f1a:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f20:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f26:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f32:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f38:	4811      	ldr	r0, [pc, #68]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f3a:	f00c f8fd 	bl	8010138 <HAL_UART_Init>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f44:	f000 fac8 	bl	80044d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f48:	2100      	movs	r1, #0
 8003f4a:	480d      	ldr	r0, [pc, #52]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f4c:	f00d fde8 	bl	8011b20 <HAL_UARTEx_SetTxFifoThreshold>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f56:	f000 fabf 	bl	80044d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4808      	ldr	r0, [pc, #32]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f5e:	f00d fe1d 	bl	8011b9c <HAL_UARTEx_SetRxFifoThreshold>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f68:	f000 fab6 	bl	80044d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f6c:	4804      	ldr	r0, [pc, #16]	; (8003f80 <MX_USART1_UART_Init+0x90>)
 8003f6e:	f00d fd9e 	bl	8011aae <HAL_UARTEx_DisableFifoMode>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003f78:	f000 faae 	bl	80044d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	24000be4 	.word	0x24000be4
 8003f84:	40011000 	.word	0x40011000

08003f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003f8e:	4a23      	ldr	r2, [pc, #140]	; (800401c <MX_USART2_UART_Init+0x94>)
 8003f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003f92:	4b21      	ldr	r3, [pc, #132]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f9a:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fa6:	4b1c      	ldr	r3, [pc, #112]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fae:	220c      	movs	r2, #12
 8003fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fb2:	4b19      	ldr	r3, [pc, #100]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fb8:	4b17      	ldr	r3, [pc, #92]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fbe:	4b16      	ldr	r3, [pc, #88]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fc4:	4b14      	ldr	r3, [pc, #80]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fd0:	4811      	ldr	r0, [pc, #68]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fd2:	f00c f8b1 	bl	8010138 <HAL_UART_Init>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003fdc:	f000 fa7c 	bl	80044d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	480d      	ldr	r0, [pc, #52]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003fe4:	f00d fd9c 	bl	8011b20 <HAL_UARTEx_SetTxFifoThreshold>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003fee:	f000 fa73 	bl	80044d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4808      	ldr	r0, [pc, #32]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8003ff6:	f00d fdd1 	bl	8011b9c <HAL_UARTEx_SetRxFifoThreshold>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004000:	f000 fa6a 	bl	80044d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004004:	4804      	ldr	r0, [pc, #16]	; (8004018 <MX_USART2_UART_Init+0x90>)
 8004006:	f00d fd52 	bl	8011aae <HAL_UARTEx_DisableFifoMode>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004010:	f000 fa62 	bl	80044d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	24000d78 	.word	0x24000d78
 800401c:	40004400 	.word	0x40004400

08004020 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004026:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <MX_USART3_UART_Init+0x94>)
 8004028:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 800402a:	4b21      	ldr	r3, [pc, #132]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800402c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004030:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004032:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004038:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800403a:	2200      	movs	r2, #0
 800403c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004040:	2200      	movs	r2, #0
 8004042:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004046:	220c      	movs	r2, #12
 8004048:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800404a:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800404c:	2200      	movs	r2, #0
 800404e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004052:	2200      	movs	r2, #0
 8004054:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004058:	2200      	movs	r2, #0
 800405a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800405e:	2200      	movs	r2, #0
 8004060:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004062:	4b13      	ldr	r3, [pc, #76]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 8004064:	2200      	movs	r2, #0
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004068:	4811      	ldr	r0, [pc, #68]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800406a:	f00c f865 	bl	8010138 <HAL_UART_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004074:	f000 fa30 	bl	80044d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004078:	2100      	movs	r1, #0
 800407a:	480d      	ldr	r0, [pc, #52]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800407c:	f00d fd50 	bl	8011b20 <HAL_UARTEx_SetTxFifoThreshold>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004086:	f000 fa27 	bl	80044d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800408a:	2100      	movs	r1, #0
 800408c:	4808      	ldr	r0, [pc, #32]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800408e:	f00d fd85 	bl	8011b9c <HAL_UARTEx_SetRxFifoThreshold>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004098:	f000 fa1e 	bl	80044d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800409c:	4804      	ldr	r0, [pc, #16]	; (80040b0 <MX_USART3_UART_Init+0x90>)
 800409e:	f00d fd06 	bl	8011aae <HAL_UARTEx_DisableFifoMode>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80040a8:	f000 fa16 	bl	80044d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040ac:	bf00      	nop
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	240009c4 	.word	0x240009c4
 80040b4:	40004800 	.word	0x40004800

080040b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <MX_DMA_Init+0x7c>)
 80040c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040c4:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <MX_DMA_Init+0x7c>)
 80040c6:	f043 0301 	orr.w	r3, r3, #1
 80040ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80040ce:	4b19      	ldr	r3, [pc, #100]	; (8004134 <MX_DMA_Init+0x7c>)
 80040d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80040dc:	2200      	movs	r2, #0
 80040de:	2100      	movs	r1, #0
 80040e0:	200b      	movs	r0, #11
 80040e2:	f001 fefa 	bl	8005eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80040e6:	200b      	movs	r0, #11
 80040e8:	f001 ff11 	bl	8005f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80040ec:	2200      	movs	r2, #0
 80040ee:	2100      	movs	r1, #0
 80040f0:	200c      	movs	r0, #12
 80040f2:	f001 fef2 	bl	8005eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80040f6:	200c      	movs	r0, #12
 80040f8:	f001 ff09 	bl	8005f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80040fc:	2200      	movs	r2, #0
 80040fe:	2100      	movs	r1, #0
 8004100:	200d      	movs	r0, #13
 8004102:	f001 feea 	bl	8005eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004106:	200d      	movs	r0, #13
 8004108:	f001 ff01 	bl	8005f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800410c:	2200      	movs	r2, #0
 800410e:	2100      	movs	r1, #0
 8004110:	200e      	movs	r0, #14
 8004112:	f001 fee2 	bl	8005eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004116:	200e      	movs	r0, #14
 8004118:	f001 fef9 	bl	8005f0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800411c:	2200      	movs	r2, #0
 800411e:	2100      	movs	r1, #0
 8004120:	200f      	movs	r0, #15
 8004122:	f001 feda 	bl	8005eda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004126:	200f      	movs	r0, #15
 8004128:	f001 fef1 	bl	8005f0e <HAL_NVIC_EnableIRQ>

}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	58024400 	.word	0x58024400

08004138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413e:	f107 0314 	add.w	r3, r7, #20
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	609a      	str	r2, [r3, #8]
 800414a:	60da      	str	r2, [r3, #12]
 800414c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800414e:	4b44      	ldr	r3, [pc, #272]	; (8004260 <MX_GPIO_Init+0x128>)
 8004150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004154:	4a42      	ldr	r2, [pc, #264]	; (8004260 <MX_GPIO_Init+0x128>)
 8004156:	f043 0310 	orr.w	r3, r3, #16
 800415a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800415e:	4b40      	ldr	r3, [pc, #256]	; (8004260 <MX_GPIO_Init+0x128>)
 8004160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800416c:	4b3c      	ldr	r3, [pc, #240]	; (8004260 <MX_GPIO_Init+0x128>)
 800416e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004172:	4a3b      	ldr	r2, [pc, #236]	; (8004260 <MX_GPIO_Init+0x128>)
 8004174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004178:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800417c:	4b38      	ldr	r3, [pc, #224]	; (8004260 <MX_GPIO_Init+0x128>)
 800417e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	4b35      	ldr	r3, [pc, #212]	; (8004260 <MX_GPIO_Init+0x128>)
 800418c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004190:	4a33      	ldr	r2, [pc, #204]	; (8004260 <MX_GPIO_Init+0x128>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800419a:	4b31      	ldr	r3, [pc, #196]	; (8004260 <MX_GPIO_Init+0x128>)
 800419c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a8:	4b2d      	ldr	r3, [pc, #180]	; (8004260 <MX_GPIO_Init+0x128>)
 80041aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ae:	4a2c      	ldr	r2, [pc, #176]	; (8004260 <MX_GPIO_Init+0x128>)
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <MX_GPIO_Init+0x128>)
 80041ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <MX_GPIO_Init+0x128>)
 80041c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041cc:	4a24      	ldr	r2, [pc, #144]	; (8004260 <MX_GPIO_Init+0x128>)
 80041ce:	f043 0304 	orr.w	r3, r3, #4
 80041d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <MX_GPIO_Init+0x128>)
 80041d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	603b      	str	r3, [r7, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80041e4:	2200      	movs	r2, #0
 80041e6:	2108      	movs	r1, #8
 80041e8:	481e      	ldr	r0, [pc, #120]	; (8004264 <MX_GPIO_Init+0x12c>)
 80041ea:	f004 feaf 	bl	8008f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80041ee:	2200      	movs	r2, #0
 80041f0:	2102      	movs	r1, #2
 80041f2:	481d      	ldr	r0, [pc, #116]	; (8004268 <MX_GPIO_Init+0x130>)
 80041f4:	f004 feaa 	bl	8008f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25qxx_CS_GPIO_Port, W25qxx_CS_Pin, GPIO_PIN_RESET);
 80041f8:	2200      	movs	r2, #0
 80041fa:	2140      	movs	r1, #64	; 0x40
 80041fc:	481b      	ldr	r0, [pc, #108]	; (800426c <MX_GPIO_Init+0x134>)
 80041fe:	f004 fea5 	bl	8008f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8004202:	2308      	movs	r3, #8
 8004204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004206:	2301      	movs	r3, #1
 8004208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420e:	2300      	movs	r3, #0
 8004210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	4619      	mov	r1, r3
 8004218:	4812      	ldr	r0, [pc, #72]	; (8004264 <MX_GPIO_Init+0x12c>)
 800421a:	f004 fce7 	bl	8008bec <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800421e:	2302      	movs	r3, #2
 8004220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004222:	2301      	movs	r3, #1
 8004224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422a:	2300      	movs	r3, #0
 800422c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800422e:	f107 0314 	add.w	r3, r7, #20
 8004232:	4619      	mov	r1, r3
 8004234:	480c      	ldr	r0, [pc, #48]	; (8004268 <MX_GPIO_Init+0x130>)
 8004236:	f004 fcd9 	bl	8008bec <HAL_GPIO_Init>

  /*Configure GPIO pin : W25qxx_CS_Pin */
  GPIO_InitStruct.Pin = W25qxx_CS_Pin;
 800423a:	2340      	movs	r3, #64	; 0x40
 800423c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800423e:	2301      	movs	r3, #1
 8004240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004246:	2300      	movs	r3, #0
 8004248:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W25qxx_CS_GPIO_Port, &GPIO_InitStruct);
 800424a:	f107 0314 	add.w	r3, r7, #20
 800424e:	4619      	mov	r1, r3
 8004250:	4806      	ldr	r0, [pc, #24]	; (800426c <MX_GPIO_Init+0x134>)
 8004252:	f004 fccb 	bl	8008bec <HAL_GPIO_Init>

}
 8004256:	bf00      	nop
 8004258:	3728      	adds	r7, #40	; 0x28
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	58024400 	.word	0x58024400
 8004264:	58021000 	.word	0x58021000
 8004268:	58020000 	.word	0x58020000
 800426c:	58020400 	.word	0x58020400

08004270 <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	2b01      	cmp	r3, #1
 800427e:	f040 80d6 	bne.w	800442e <Compass_Calibration+0x1be>
	{
		for(int i =0;i<5;i++)
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e00b      	b.n	80042a0 <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 8004288:	486b      	ldr	r0, [pc, #428]	; (8004438 <Compass_Calibration+0x1c8>)
 800428a:	f7fc fcff 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 800428e:	2001      	movs	r0, #1
 8004290:	f001 fd18 	bl	8005cc4 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8004294:	4869      	ldr	r0, [pc, #420]	; (800443c <Compass_Calibration+0x1cc>)
 8004296:	f7fc fea3 	bl	8000fe0 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3301      	adds	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	ddf0      	ble.n	8004288 <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 80042a6:	4b65      	ldr	r3, [pc, #404]	; (800443c <Compass_Calibration+0x1cc>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a64      	ldr	r2, [pc, #400]	; (800443c <Compass_Calibration+0x1cc>)
 80042ac:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mx_Min = MPU9250.Mx;
 80042ae:	4b63      	ldr	r3, [pc, #396]	; (800443c <Compass_Calibration+0x1cc>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a62      	ldr	r2, [pc, #392]	; (800443c <Compass_Calibration+0x1cc>)
 80042b4:	64d3      	str	r3, [r2, #76]	; 0x4c
		MPU9250.My_Max = MPU9250.My;
 80042b6:	4b61      	ldr	r3, [pc, #388]	; (800443c <Compass_Calibration+0x1cc>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ba:	4a60      	ldr	r2, [pc, #384]	; (800443c <Compass_Calibration+0x1cc>)
 80042bc:	65d3      	str	r3, [r2, #92]	; 0x5c
		MPU9250.My_Min = MPU9250.My;
 80042be:	4b5f      	ldr	r3, [pc, #380]	; (800443c <Compass_Calibration+0x1cc>)
 80042c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c2:	4a5e      	ldr	r2, [pc, #376]	; (800443c <Compass_Calibration+0x1cc>)
 80042c4:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mz_Max = MPU9250.Mz;
 80042c6:	4b5d      	ldr	r3, [pc, #372]	; (800443c <Compass_Calibration+0x1cc>)
 80042c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ca:	4a5c      	ldr	r2, [pc, #368]	; (800443c <Compass_Calibration+0x1cc>)
 80042cc:	6613      	str	r3, [r2, #96]	; 0x60
		MPU9250.Mz_Min = MPU9250.Mz;
 80042ce:	4b5b      	ldr	r3, [pc, #364]	; (800443c <Compass_Calibration+0x1cc>)
 80042d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042d2:	4a5a      	ldr	r2, [pc, #360]	; (800443c <Compass_Calibration+0x1cc>)
 80042d4:	6553      	str	r3, [r2, #84]	; 0x54

		while(mag_calibration_enable != 0)
 80042d6:	e065      	b.n	80043a4 <Compass_Calibration+0x134>
		{
			Receive_Command();
 80042d8:	f000 fe20 	bl	8004f1c <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 80042dc:	4856      	ldr	r0, [pc, #344]	; (8004438 <Compass_Calibration+0x1c8>)
 80042de:	f7fc fcd5 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 80042e2:	2001      	movs	r0, #1
 80042e4:	f001 fcee 	bl	8005cc4 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 80042e8:	4854      	ldr	r0, [pc, #336]	; (800443c <Compass_Calibration+0x1cc>)
 80042ea:	f7fc fe79 	bl	8000fe0 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 80042ee:	4b53      	ldr	r3, [pc, #332]	; (800443c <Compass_Calibration+0x1cc>)
 80042f0:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80042f4:	4b51      	ldr	r3, [pc, #324]	; (800443c <Compass_Calibration+0x1cc>)
 80042f6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80042fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	dd03      	ble.n	800430c <Compass_Calibration+0x9c>
 8004304:	4b4d      	ldr	r3, [pc, #308]	; (800443c <Compass_Calibration+0x1cc>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a4c      	ldr	r2, [pc, #304]	; (800443c <Compass_Calibration+0x1cc>)
 800430a:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 800430c:	4b4b      	ldr	r3, [pc, #300]	; (800443c <Compass_Calibration+0x1cc>)
 800430e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8004312:	4b4a      	ldr	r3, [pc, #296]	; (800443c <Compass_Calibration+0x1cc>)
 8004314:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004320:	d503      	bpl.n	800432a <Compass_Calibration+0xba>
 8004322:	4b46      	ldr	r3, [pc, #280]	; (800443c <Compass_Calibration+0x1cc>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	4a45      	ldr	r2, [pc, #276]	; (800443c <Compass_Calibration+0x1cc>)
 8004328:	64d3      	str	r3, [r2, #76]	; 0x4c

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 800432a:	4b44      	ldr	r3, [pc, #272]	; (800443c <Compass_Calibration+0x1cc>)
 800432c:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <Compass_Calibration+0x1cc>)
 8004332:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433e:	dd03      	ble.n	8004348 <Compass_Calibration+0xd8>
 8004340:	4b3e      	ldr	r3, [pc, #248]	; (800443c <Compass_Calibration+0x1cc>)
 8004342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004344:	4a3d      	ldr	r2, [pc, #244]	; (800443c <Compass_Calibration+0x1cc>)
 8004346:	65d3      	str	r3, [r2, #92]	; 0x5c
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 8004348:	4b3c      	ldr	r3, [pc, #240]	; (800443c <Compass_Calibration+0x1cc>)
 800434a:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 800434e:	4b3b      	ldr	r3, [pc, #236]	; (800443c <Compass_Calibration+0x1cc>)
 8004350:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8004354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	d503      	bpl.n	8004366 <Compass_Calibration+0xf6>
 800435e:	4b37      	ldr	r3, [pc, #220]	; (800443c <Compass_Calibration+0x1cc>)
 8004360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004362:	4a36      	ldr	r2, [pc, #216]	; (800443c <Compass_Calibration+0x1cc>)
 8004364:	6513      	str	r3, [r2, #80]	; 0x50

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 8004366:	4b35      	ldr	r3, [pc, #212]	; (800443c <Compass_Calibration+0x1cc>)
 8004368:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800436c:	4b33      	ldr	r3, [pc, #204]	; (800443c <Compass_Calibration+0x1cc>)
 800436e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	dd03      	ble.n	8004384 <Compass_Calibration+0x114>
 800437c:	4b2f      	ldr	r3, [pc, #188]	; (800443c <Compass_Calibration+0x1cc>)
 800437e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004380:	4a2e      	ldr	r2, [pc, #184]	; (800443c <Compass_Calibration+0x1cc>)
 8004382:	6613      	str	r3, [r2, #96]	; 0x60
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 8004384:	4b2d      	ldr	r3, [pc, #180]	; (800443c <Compass_Calibration+0x1cc>)
 8004386:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800438a:	4b2c      	ldr	r3, [pc, #176]	; (800443c <Compass_Calibration+0x1cc>)
 800438c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004398:	d400      	bmi.n	800439c <Compass_Calibration+0x12c>
 800439a:	e003      	b.n	80043a4 <Compass_Calibration+0x134>
 800439c:	4b27      	ldr	r3, [pc, #156]	; (800443c <Compass_Calibration+0x1cc>)
 800439e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <Compass_Calibration+0x1cc>)
 80043a2:	6553      	str	r3, [r2, #84]	; 0x54
		while(mag_calibration_enable != 0)
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d196      	bne.n	80042d8 <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <Compass_Calibration+0x1cc>)
 80043ac:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80043b0:	4b22      	ldr	r3, [pc, #136]	; (800443c <Compass_Calibration+0x1cc>)
 80043b2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80043b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80043be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043c2:	4b1e      	ldr	r3, [pc, #120]	; (800443c <Compass_Calibration+0x1cc>)
 80043c4:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 80043c8:	4b1c      	ldr	r3, [pc, #112]	; (800443c <Compass_Calibration+0x1cc>)
 80043ca:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80043ce:	4b1b      	ldr	r3, [pc, #108]	; (800443c <Compass_Calibration+0x1cc>)
 80043d0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80043d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043d8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80043dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043e0:	4b16      	ldr	r3, [pc, #88]	; (800443c <Compass_Calibration+0x1cc>)
 80043e2:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <Compass_Calibration+0x1cc>)
 80043e8:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80043ec:	4b13      	ldr	r3, [pc, #76]	; (800443c <Compass_Calibration+0x1cc>)
 80043ee:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80043f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80043fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <Compass_Calibration+0x1cc>)
 8004400:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8004404:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <Compass_Calibration+0x1d0>)
 8004406:	4b0d      	ldr	r3, [pc, #52]	; (800443c <Compass_Calibration+0x1cc>)
 8004408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440a:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 800440c:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <Compass_Calibration+0x1d4>)
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <Compass_Calibration+0x1cc>)
 8004410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004412:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8004414:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <Compass_Calibration+0x1d8>)
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <Compass_Calibration+0x1cc>)
 8004418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441a:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 800441c:	2000      	movs	r0, #0
 800441e:	f001 f961 	bl	80056e4 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8004422:	230c      	movs	r3, #12
 8004424:	2200      	movs	r2, #0
 8004426:	2100      	movs	r1, #0
 8004428:	4805      	ldr	r0, [pc, #20]	; (8004440 <Compass_Calibration+0x1d0>)
 800442a:	f001 fa4d 	bl	80058c8 <W25qxx_WriteSector>
	}
}
 800442e:	bf00      	nop
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	24000a54 	.word	0x24000a54
 800443c:	2400027c 	.word	0x2400027c
 8004440:	24000e08 	.word	0x24000e08
 8004444:	24000e0c 	.word	0x24000e0c
 8004448:	24000e10 	.word	0x24000e10

0800444c <ESC_Calibration>:

void ESC_Calibration(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 20000;
 8004450:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <ESC_Calibration+0x58>)
 8004452:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004456:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 20000;
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <ESC_Calibration+0x58>)
 800445a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 20000;
 8004460:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <ESC_Calibration+0x58>)
 8004462:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004466:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 20000;
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <ESC_Calibration+0x58>)
 800446a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800446e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 8004470:	f641 3058 	movw	r0, #7000	; 0x1b58
 8004474:	f001 fc26 	bl	8005cc4 <HAL_Delay>
	TIM3->CCR1 = 10000;
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <ESC_Calibration+0x58>)
 800447a:	f242 7210 	movw	r2, #10000	; 0x2710
 800447e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 10000;
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <ESC_Calibration+0x58>)
 8004482:	f242 7210 	movw	r2, #10000	; 0x2710
 8004486:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 10000;
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <ESC_Calibration+0x58>)
 800448a:	f242 7210 	movw	r2, #10000	; 0x2710
 800448e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 10000;
 8004490:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <ESC_Calibration+0x58>)
 8004492:	f242 7210 	movw	r2, #10000	; 0x2710
 8004496:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 8004498:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800449c:	f001 fc12 	bl	8005cc4 <HAL_Delay>
}
 80044a0:	bf00      	nop
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40000400 	.word	0x40000400

080044a8 <Stop_Motor>:

void Stop_Motor(int ccr)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
	TIM3->CCR1 = ccr;
 80044b0:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <Stop_Motor+0x2c>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6353      	str	r3, [r2, #52]	; 0x34
	TIM3->CCR2 = ccr;
 80044b6:	4a07      	ldr	r2, [pc, #28]	; (80044d4 <Stop_Motor+0x2c>)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6393      	str	r3, [r2, #56]	; 0x38
	TIM3->CCR3 = ccr;
 80044bc:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <Stop_Motor+0x2c>)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM3->CCR4 = ccr;
 80044c2:	4a04      	ldr	r2, [pc, #16]	; (80044d4 <Stop_Motor+0x2c>)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	40000400 	.word	0x40000400

080044d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044dc:	b672      	cpsid	i
}
 80044de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80044e0:	e7fe      	b.n	80044e0 <Error_Handler+0x8>
	...

080044e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <HAL_MspInit+0x30>)
 80044ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044f0:	4a08      	ldr	r2, [pc, #32]	; (8004514 <HAL_MspInit+0x30>)
 80044f2:	f043 0302 	orr.w	r3, r3, #2
 80044f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_MspInit+0x30>)
 80044fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	58024400 	.word	0x58024400

08004518 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b0b8      	sub	sp, #224	; 0xe0
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004520:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	605a      	str	r2, [r3, #4]
 800452a:	609a      	str	r2, [r3, #8]
 800452c:	60da      	str	r2, [r3, #12]
 800452e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004530:	f107 0310 	add.w	r3, r7, #16
 8004534:	22bc      	movs	r2, #188	; 0xbc
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f00d fbe5 	bl	8011d08 <memset>
  if(hi2c->Instance==I2C1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a3f      	ldr	r2, [pc, #252]	; (8004640 <HAL_I2C_MspInit+0x128>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d177      	bne.n	8004638 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004548:	2308      	movs	r3, #8
 800454a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004552:	f107 0310 	add.w	r3, r7, #16
 8004556:	4618      	mov	r0, r3
 8004558:	f007 ff3c 	bl	800c3d4 <HAL_RCCEx_PeriphCLKConfig>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004562:	f7ff ffb9 	bl	80044d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004566:	4b37      	ldr	r3, [pc, #220]	; (8004644 <HAL_I2C_MspInit+0x12c>)
 8004568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800456c:	4a35      	ldr	r2, [pc, #212]	; (8004644 <HAL_I2C_MspInit+0x12c>)
 800456e:	f043 0302 	orr.w	r3, r3, #2
 8004572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004576:	4b33      	ldr	r3, [pc, #204]	; (8004644 <HAL_I2C_MspInit+0x12c>)
 8004578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004584:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800458c:	2312      	movs	r3, #18
 800458e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800459e:	2304      	movs	r3, #4
 80045a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80045a8:	4619      	mov	r1, r3
 80045aa:	4827      	ldr	r0, [pc, #156]	; (8004648 <HAL_I2C_MspInit+0x130>)
 80045ac:	f004 fb1e 	bl	8008bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045b0:	4b24      	ldr	r3, [pc, #144]	; (8004644 <HAL_I2C_MspInit+0x12c>)
 80045b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045b6:	4a23      	ldr	r2, [pc, #140]	; (8004644 <HAL_I2C_MspInit+0x12c>)
 80045b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045c0:	4b20      	ldr	r3, [pc, #128]	; (8004644 <HAL_I2C_MspInit+0x12c>)
 80045c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_I2C_MspInit+0x134>)
 80045d0:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <HAL_I2C_MspInit+0x138>)
 80045d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80045d4:	4b1d      	ldr	r3, [pc, #116]	; (800464c <HAL_I2C_MspInit+0x134>)
 80045d6:	2221      	movs	r2, #33	; 0x21
 80045d8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045da:	4b1c      	ldr	r3, [pc, #112]	; (800464c <HAL_I2C_MspInit+0x134>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_I2C_MspInit+0x134>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80045e6:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_I2C_MspInit+0x134>)
 80045e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80045ee:	4b17      	ldr	r3, [pc, #92]	; (800464c <HAL_I2C_MspInit+0x134>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <HAL_I2C_MspInit+0x134>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80045fa:	4b14      	ldr	r3, [pc, #80]	; (800464c <HAL_I2C_MspInit+0x134>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_I2C_MspInit+0x134>)
 8004602:	2200      	movs	r2, #0
 8004604:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004606:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_I2C_MspInit+0x134>)
 8004608:	2200      	movs	r2, #0
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800460c:	480f      	ldr	r0, [pc, #60]	; (800464c <HAL_I2C_MspInit+0x134>)
 800460e:	f001 fc99 	bl	8005f44 <HAL_DMA_Init>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8004618:	f7ff ff5e 	bl	80044d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a0b      	ldr	r2, [pc, #44]	; (800464c <HAL_I2C_MspInit+0x134>)
 8004620:	63da      	str	r2, [r3, #60]	; 0x3c
 8004622:	4a0a      	ldr	r2, [pc, #40]	; (800464c <HAL_I2C_MspInit+0x134>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004628:	2200      	movs	r2, #0
 800462a:	2100      	movs	r1, #0
 800462c:	201f      	movs	r0, #31
 800462e:	f001 fc54 	bl	8005eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004632:	201f      	movs	r0, #31
 8004634:	f001 fc6b 	bl	8005f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004638:	bf00      	nop
 800463a:	37e0      	adds	r7, #224	; 0xe0
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40005400 	.word	0x40005400
 8004644:	58024400 	.word	0x58024400
 8004648:	58020400 	.word	0x58020400
 800464c:	24000c74 	.word	0x24000c74
 8004650:	40020028 	.word	0x40020028

08004654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b0b8      	sub	sp, #224	; 0xe0
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	22bc      	movs	r2, #188	; 0xbc
 8004672:	2100      	movs	r1, #0
 8004674:	4618      	mov	r0, r3
 8004676:	f00d fb47 	bl	8011d08 <memset>
  if(hspi->Instance==SPI1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a25      	ldr	r2, [pc, #148]	; (8004714 <HAL_SPI_MspInit+0xc0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d142      	bne.n	800470a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004688:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800468a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800468e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004690:	f107 0310 	add.w	r3, r7, #16
 8004694:	4618      	mov	r0, r3
 8004696:	f007 fe9d 	bl	800c3d4 <HAL_RCCEx_PeriphCLKConfig>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80046a0:	f7ff ff1a 	bl	80044d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046a4:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_SPI_MspInit+0xc4>)
 80046a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046aa:	4a1b      	ldr	r2, [pc, #108]	; (8004718 <HAL_SPI_MspInit+0xc4>)
 80046ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046b4:	4b18      	ldr	r3, [pc, #96]	; (8004718 <HAL_SPI_MspInit+0xc4>)
 80046b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c2:	4b15      	ldr	r3, [pc, #84]	; (8004718 <HAL_SPI_MspInit+0xc4>)
 80046c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046c8:	4a13      	ldr	r2, [pc, #76]	; (8004718 <HAL_SPI_MspInit+0xc4>)
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046d2:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_SPI_MspInit+0xc4>)
 80046d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80046e0:	23e0      	movs	r3, #224	; 0xe0
 80046e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e6:	2302      	movs	r3, #2
 80046e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f2:	2300      	movs	r3, #0
 80046f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80046f8:	2305      	movs	r3, #5
 80046fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004702:	4619      	mov	r1, r3
 8004704:	4805      	ldr	r0, [pc, #20]	; (800471c <HAL_SPI_MspInit+0xc8>)
 8004706:	f004 fa71 	bl	8008bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800470a:	bf00      	nop
 800470c:	37e0      	adds	r7, #224	; 0xe0
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40013000 	.word	0x40013000
 8004718:	58024400 	.word	0x58024400
 800471c:	58020000 	.word	0x58020000

08004720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <HAL_TIM_Base_MspInit+0x84>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d117      	bne.n	8004762 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004732:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_TIM_Base_MspInit+0x88>)
 8004734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004738:	4a1b      	ldr	r2, [pc, #108]	; (80047a8 <HAL_TIM_Base_MspInit+0x88>)
 800473a:	f043 0302 	orr.w	r3, r3, #2
 800473e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004742:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <HAL_TIM_Base_MspInit+0x88>)
 8004744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004750:	2200      	movs	r2, #0
 8004752:	2100      	movs	r1, #0
 8004754:	201d      	movs	r0, #29
 8004756:	f001 fbc0 	bl	8005eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800475a:	201d      	movs	r0, #29
 800475c:	f001 fbd7 	bl	8005f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004760:	e01b      	b.n	800479a <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a11      	ldr	r2, [pc, #68]	; (80047ac <HAL_TIM_Base_MspInit+0x8c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d116      	bne.n	800479a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800476c:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <HAL_TIM_Base_MspInit+0x88>)
 800476e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004772:	4a0d      	ldr	r2, [pc, #52]	; (80047a8 <HAL_TIM_Base_MspInit+0x88>)
 8004774:	f043 0320 	orr.w	r3, r3, #32
 8004778:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <HAL_TIM_Base_MspInit+0x88>)
 800477e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800478a:	2200      	movs	r2, #0
 800478c:	2100      	movs	r1, #0
 800478e:	2037      	movs	r0, #55	; 0x37
 8004790:	f001 fba3 	bl	8005eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004794:	2037      	movs	r0, #55	; 0x37
 8004796:	f001 fbba 	bl	8005f0e <HAL_NVIC_EnableIRQ>
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40000400 	.word	0x40000400
 80047a8:	58024400 	.word	0x58024400
 80047ac:	40001400 	.word	0x40001400

080047b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b8:	f107 0314 	add.w	r3, r7, #20
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a22      	ldr	r2, [pc, #136]	; (8004858 <HAL_TIM_MspPostInit+0xa8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d13d      	bne.n	800484e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047d2:	4b22      	ldr	r3, [pc, #136]	; (800485c <HAL_TIM_MspPostInit+0xac>)
 80047d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047d8:	4a20      	ldr	r2, [pc, #128]	; (800485c <HAL_TIM_MspPostInit+0xac>)
 80047da:	f043 0302 	orr.w	r3, r3, #2
 80047de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_TIM_MspPostInit+0xac>)
 80047e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047f0:	4b1a      	ldr	r3, [pc, #104]	; (800485c <HAL_TIM_MspPostInit+0xac>)
 80047f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047f6:	4a19      	ldr	r2, [pc, #100]	; (800485c <HAL_TIM_MspPostInit+0xac>)
 80047f8:	f043 0304 	orr.w	r3, r3, #4
 80047fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004800:	4b16      	ldr	r3, [pc, #88]	; (800485c <HAL_TIM_MspPostInit+0xac>)
 8004802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800480e:	2303      	movs	r3, #3
 8004810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004812:	2302      	movs	r3, #2
 8004814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800481a:	2300      	movs	r3, #0
 800481c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800481e:	2302      	movs	r3, #2
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	4619      	mov	r1, r3
 8004828:	480d      	ldr	r0, [pc, #52]	; (8004860 <HAL_TIM_MspPostInit+0xb0>)
 800482a:	f004 f9df 	bl	8008bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800482e:	23c0      	movs	r3, #192	; 0xc0
 8004830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004832:	2302      	movs	r3, #2
 8004834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800483e:	2302      	movs	r3, #2
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004842:	f107 0314 	add.w	r3, r7, #20
 8004846:	4619      	mov	r1, r3
 8004848:	4806      	ldr	r0, [pc, #24]	; (8004864 <HAL_TIM_MspPostInit+0xb4>)
 800484a:	f004 f9cf 	bl	8008bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800484e:	bf00      	nop
 8004850:	3728      	adds	r7, #40	; 0x28
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40000400 	.word	0x40000400
 800485c:	58024400 	.word	0x58024400
 8004860:	58020400 	.word	0x58020400
 8004864:	58020800 	.word	0x58020800

08004868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b0bc      	sub	sp, #240	; 0xf0
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004870:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004880:	f107 0320 	add.w	r3, r7, #32
 8004884:	22bc      	movs	r2, #188	; 0xbc
 8004886:	2100      	movs	r1, #0
 8004888:	4618      	mov	r0, r3
 800488a:	f00d fa3d 	bl	8011d08 <memset>
  if(huart->Instance==USART1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a95      	ldr	r2, [pc, #596]	; (8004ae8 <HAL_UART_MspInit+0x280>)
 8004894:	4293      	cmp	r3, r2
 8004896:	f040 80a7 	bne.w	80049e8 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800489a:	2301      	movs	r3, #1
 800489c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048a4:	f107 0320 	add.w	r3, r7, #32
 80048a8:	4618      	mov	r0, r3
 80048aa:	f007 fd93 	bl	800c3d4 <HAL_RCCEx_PeriphCLKConfig>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80048b4:	f7ff fe10 	bl	80044d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048b8:	4b8c      	ldr	r3, [pc, #560]	; (8004aec <HAL_UART_MspInit+0x284>)
 80048ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048be:	4a8b      	ldr	r2, [pc, #556]	; (8004aec <HAL_UART_MspInit+0x284>)
 80048c0:	f043 0310 	orr.w	r3, r3, #16
 80048c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80048c8:	4b88      	ldr	r3, [pc, #544]	; (8004aec <HAL_UART_MspInit+0x284>)
 80048ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	61fb      	str	r3, [r7, #28]
 80048d4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048d6:	4b85      	ldr	r3, [pc, #532]	; (8004aec <HAL_UART_MspInit+0x284>)
 80048d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048dc:	4a83      	ldr	r2, [pc, #524]	; (8004aec <HAL_UART_MspInit+0x284>)
 80048de:	f043 0302 	orr.w	r3, r3, #2
 80048e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048e6:	4b81      	ldr	r3, [pc, #516]	; (8004aec <HAL_UART_MspInit+0x284>)
 80048e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80048f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80048f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fc:	2302      	movs	r3, #2
 80048fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004908:	2300      	movs	r3, #0
 800490a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800490e:	2304      	movs	r3, #4
 8004910:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004914:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004918:	4619      	mov	r1, r3
 800491a:	4875      	ldr	r0, [pc, #468]	; (8004af0 <HAL_UART_MspInit+0x288>)
 800491c:	f004 f966 	bl	8008bec <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8004920:	4b74      	ldr	r3, [pc, #464]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 8004922:	4a75      	ldr	r2, [pc, #468]	; (8004af8 <HAL_UART_MspInit+0x290>)
 8004924:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8004926:	4b73      	ldr	r3, [pc, #460]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 8004928:	2229      	movs	r2, #41	; 0x29
 800492a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800492c:	4b71      	ldr	r3, [pc, #452]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 800492e:	2200      	movs	r2, #0
 8004930:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004932:	4b70      	ldr	r3, [pc, #448]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 8004934:	2200      	movs	r2, #0
 8004936:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004938:	4b6e      	ldr	r3, [pc, #440]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 800493a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800493e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004940:	4b6c      	ldr	r3, [pc, #432]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 8004942:	2200      	movs	r2, #0
 8004944:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004946:	4b6b      	ldr	r3, [pc, #428]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 8004948:	2200      	movs	r2, #0
 800494a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800494c:	4b69      	ldr	r3, [pc, #420]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 800494e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004952:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004954:	4b67      	ldr	r3, [pc, #412]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 8004956:	2200      	movs	r2, #0
 8004958:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800495a:	4b66      	ldr	r3, [pc, #408]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 800495c:	2200      	movs	r2, #0
 800495e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004960:	4864      	ldr	r0, [pc, #400]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 8004962:	f001 faef 	bl	8005f44 <HAL_DMA_Init>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800496c:	f7ff fdb4 	bl	80044d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a60      	ldr	r2, [pc, #384]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 8004974:	67da      	str	r2, [r3, #124]	; 0x7c
 8004976:	4a5f      	ldr	r2, [pc, #380]	; (8004af4 <HAL_UART_MspInit+0x28c>)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800497c:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <HAL_UART_MspInit+0x294>)
 800497e:	4a60      	ldr	r2, [pc, #384]	; (8004b00 <HAL_UART_MspInit+0x298>)
 8004980:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004982:	4b5e      	ldr	r3, [pc, #376]	; (8004afc <HAL_UART_MspInit+0x294>)
 8004984:	222a      	movs	r2, #42	; 0x2a
 8004986:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004988:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <HAL_UART_MspInit+0x294>)
 800498a:	2240      	movs	r2, #64	; 0x40
 800498c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800498e:	4b5b      	ldr	r3, [pc, #364]	; (8004afc <HAL_UART_MspInit+0x294>)
 8004990:	2200      	movs	r2, #0
 8004992:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004994:	4b59      	ldr	r3, [pc, #356]	; (8004afc <HAL_UART_MspInit+0x294>)
 8004996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800499a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800499c:	4b57      	ldr	r3, [pc, #348]	; (8004afc <HAL_UART_MspInit+0x294>)
 800499e:	2200      	movs	r2, #0
 80049a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049a2:	4b56      	ldr	r3, [pc, #344]	; (8004afc <HAL_UART_MspInit+0x294>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80049a8:	4b54      	ldr	r3, [pc, #336]	; (8004afc <HAL_UART_MspInit+0x294>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049ae:	4b53      	ldr	r3, [pc, #332]	; (8004afc <HAL_UART_MspInit+0x294>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049b4:	4b51      	ldr	r3, [pc, #324]	; (8004afc <HAL_UART_MspInit+0x294>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80049ba:	4850      	ldr	r0, [pc, #320]	; (8004afc <HAL_UART_MspInit+0x294>)
 80049bc:	f001 fac2 	bl	8005f44 <HAL_DMA_Init>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80049c6:	f7ff fd87 	bl	80044d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4b      	ldr	r2, [pc, #300]	; (8004afc <HAL_UART_MspInit+0x294>)
 80049ce:	679a      	str	r2, [r3, #120]	; 0x78
 80049d0:	4a4a      	ldr	r2, [pc, #296]	; (8004afc <HAL_UART_MspInit+0x294>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	2025      	movs	r0, #37	; 0x25
 80049dc:	f001 fa7d 	bl	8005eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049e0:	2025      	movs	r0, #37	; 0x25
 80049e2:	f001 fa94 	bl	8005f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049e6:	e112      	b.n	8004c0e <HAL_UART_MspInit+0x3a6>
  else if(huart->Instance==USART2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a45      	ldr	r2, [pc, #276]	; (8004b04 <HAL_UART_MspInit+0x29c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	f040 8090 	bne.w	8004b14 <HAL_UART_MspInit+0x2ac>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80049f4:	2302      	movs	r3, #2
 80049f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80049f8:	2300      	movs	r3, #0
 80049fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049fe:	f107 0320 	add.w	r3, r7, #32
 8004a02:	4618      	mov	r0, r3
 8004a04:	f007 fce6 	bl	800c3d4 <HAL_RCCEx_PeriphCLKConfig>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8004a0e:	f7ff fd63 	bl	80044d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a12:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_UART_MspInit+0x284>)
 8004a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a18:	4a34      	ldr	r2, [pc, #208]	; (8004aec <HAL_UART_MspInit+0x284>)
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004a22:	4b32      	ldr	r3, [pc, #200]	; (8004aec <HAL_UART_MspInit+0x284>)
 8004a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a30:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_UART_MspInit+0x284>)
 8004a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a36:	4a2d      	ldr	r2, [pc, #180]	; (8004aec <HAL_UART_MspInit+0x284>)
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a40:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <HAL_UART_MspInit+0x284>)
 8004a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a4e:	230c      	movs	r3, #12
 8004a50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a54:	2302      	movs	r3, #2
 8004a56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a66:	2307      	movs	r3, #7
 8004a68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004a70:	4619      	mov	r1, r3
 8004a72:	4825      	ldr	r0, [pc, #148]	; (8004b08 <HAL_UART_MspInit+0x2a0>)
 8004a74:	f004 f8ba 	bl	8008bec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8004a78:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004a7a:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <HAL_UART_MspInit+0x2a8>)
 8004a7c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004a7e:	4b23      	ldr	r3, [pc, #140]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004a80:	222b      	movs	r2, #43	; 0x2b
 8004a82:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a84:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a8a:	4b20      	ldr	r3, [pc, #128]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 8004a90:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a96:	4b1d      	ldr	r3, [pc, #116]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aa8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004aaa:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004aac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004ab0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ab2:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004ab8:	4814      	ldr	r0, [pc, #80]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004aba:	f001 fa43 	bl	8005f44 <HAL_DMA_Init>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_UART_MspInit+0x260>
      Error_Handler();
 8004ac4:	f7ff fd08 	bl	80044d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004acc:	67da      	str	r2, [r3, #124]	; 0x7c
 8004ace:	4a0f      	ldr	r2, [pc, #60]	; (8004b0c <HAL_UART_MspInit+0x2a4>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	2026      	movs	r0, #38	; 0x26
 8004ada:	f001 f9fe 	bl	8005eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ade:	2026      	movs	r0, #38	; 0x26
 8004ae0:	f001 fa15 	bl	8005f0e <HAL_NVIC_EnableIRQ>
}
 8004ae4:	e093      	b.n	8004c0e <HAL_UART_MspInit+0x3a6>
 8004ae6:	bf00      	nop
 8004ae8:	40011000 	.word	0x40011000
 8004aec:	58024400 	.word	0x58024400
 8004af0:	58020400 	.word	0x58020400
 8004af4:	24000b64 	.word	0x24000b64
 8004af8:	40020010 	.word	0x40020010
 8004afc:	24000aec 	.word	0x24000aec
 8004b00:	40020040 	.word	0x40020040
 8004b04:	40004400 	.word	0x40004400
 8004b08:	58020000 	.word	0x58020000
 8004b0c:	240008d0 	.word	0x240008d0
 8004b10:	40020058 	.word	0x40020058
  else if(huart->Instance==USART3)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a3f      	ldr	r2, [pc, #252]	; (8004c18 <HAL_UART_MspInit+0x3b0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d177      	bne.n	8004c0e <HAL_UART_MspInit+0x3a6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004b22:	2300      	movs	r3, #0
 8004b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b28:	f107 0320 	add.w	r3, r7, #32
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f007 fc51 	bl	800c3d4 <HAL_RCCEx_PeriphCLKConfig>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_UART_MspInit+0x2d4>
      Error_Handler();
 8004b38:	f7ff fcce 	bl	80044d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b3c:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <HAL_UART_MspInit+0x3b4>)
 8004b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b42:	4a36      	ldr	r2, [pc, #216]	; (8004c1c <HAL_UART_MspInit+0x3b4>)
 8004b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b4c:	4b33      	ldr	r3, [pc, #204]	; (8004c1c <HAL_UART_MspInit+0x3b4>)
 8004b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b5a:	4b30      	ldr	r3, [pc, #192]	; (8004c1c <HAL_UART_MspInit+0x3b4>)
 8004b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b60:	4a2e      	ldr	r2, [pc, #184]	; (8004c1c <HAL_UART_MspInit+0x3b4>)
 8004b62:	f043 0302 	orr.w	r3, r3, #2
 8004b66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b6a:	4b2c      	ldr	r3, [pc, #176]	; (8004c1c <HAL_UART_MspInit+0x3b4>)
 8004b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	60bb      	str	r3, [r7, #8]
 8004b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b80:	2302      	movs	r3, #2
 8004b82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b92:	2307      	movs	r3, #7
 8004b94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4820      	ldr	r0, [pc, #128]	; (8004c20 <HAL_UART_MspInit+0x3b8>)
 8004ba0:	f004 f824 	bl	8008bec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream4;
 8004ba4:	4b1f      	ldr	r3, [pc, #124]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004ba6:	4a20      	ldr	r2, [pc, #128]	; (8004c28 <HAL_UART_MspInit+0x3c0>)
 8004ba8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004baa:	4b1e      	ldr	r3, [pc, #120]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bac:	222d      	movs	r2, #45	; 0x2d
 8004bae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bb0:	4b1c      	ldr	r3, [pc, #112]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bc2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004bc4:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004bca:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004bd0:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004bd6:	4b13      	ldr	r3, [pc, #76]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004bdc:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004be2:	4810      	ldr	r0, [pc, #64]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004be4:	f001 f9ae 	bl	8005f44 <HAL_DMA_Init>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 8004bee:	f7ff fc73 	bl	80044d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a0b      	ldr	r2, [pc, #44]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bf6:	67da      	str	r2, [r3, #124]	; 0x7c
 8004bf8:	4a0a      	ldr	r2, [pc, #40]	; (8004c24 <HAL_UART_MspInit+0x3bc>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2100      	movs	r1, #0
 8004c02:	2027      	movs	r0, #39	; 0x27
 8004c04:	f001 f969 	bl	8005eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004c08:	2027      	movs	r0, #39	; 0x27
 8004c0a:	f001 f980 	bl	8005f0e <HAL_NVIC_EnableIRQ>
}
 8004c0e:	bf00      	nop
 8004c10:	37f0      	adds	r7, #240	; 0xf0
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40004800 	.word	0x40004800
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	58020400 	.word	0x58020400
 8004c24:	2400094c 	.word	0x2400094c
 8004c28:	40020070 	.word	0x40020070

08004c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004c30:	e7fe      	b.n	8004c30 <NMI_Handler+0x4>

08004c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c32:	b480      	push	{r7}
 8004c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c36:	e7fe      	b.n	8004c36 <HardFault_Handler+0x4>

08004c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c3c:	e7fe      	b.n	8004c3c <MemManage_Handler+0x4>

08004c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c42:	e7fe      	b.n	8004c42 <BusFault_Handler+0x4>

08004c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c48:	e7fe      	b.n	8004c48 <UsageFault_Handler+0x4>

08004c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c4e:	bf00      	nop
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c78:	f001 f804 	bl	8005c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004c84:	4802      	ldr	r0, [pc, #8]	; (8004c90 <DMA1_Stream0_IRQHandler+0x10>)
 8004c86:	f002 fc85 	bl	8007594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	24000b64 	.word	0x24000b64

08004c94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004c98:	4802      	ldr	r0, [pc, #8]	; (8004ca4 <DMA1_Stream1_IRQHandler+0x10>)
 8004c9a:	f002 fc7b 	bl	8007594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	24000c74 	.word	0x24000c74

08004ca8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004cac:	4802      	ldr	r0, [pc, #8]	; (8004cb8 <DMA1_Stream2_IRQHandler+0x10>)
 8004cae:	f002 fc71 	bl	8007594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	24000aec 	.word	0x24000aec

08004cbc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004cc0:	4802      	ldr	r0, [pc, #8]	; (8004ccc <DMA1_Stream3_IRQHandler+0x10>)
 8004cc2:	f002 fc67 	bl	8007594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004cc6:	bf00      	nop
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	240008d0 	.word	0x240008d0

08004cd0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004cd4:	4802      	ldr	r0, [pc, #8]	; (8004ce0 <DMA1_Stream4_IRQHandler+0x10>)
 8004cd6:	f002 fc5d 	bl	8007594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	2400094c 	.word	0x2400094c

08004ce4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004ce8:	4802      	ldr	r0, [pc, #8]	; (8004cf4 <TIM3_IRQHandler+0x10>)
 8004cea:	f00a fa07 	bl	800f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	24000aa0 	.word	0x24000aa0

08004cf8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004cfc:	4802      	ldr	r0, [pc, #8]	; (8004d08 <I2C1_EV_IRQHandler+0x10>)
 8004cfe:	f004 fcf5 	bl	80096ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	24000a54 	.word	0x24000a54

08004d0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d10:	4802      	ldr	r0, [pc, #8]	; (8004d1c <USART1_IRQHandler+0x10>)
 8004d12:	f00b fb27 	bl	8010364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	24000be4 	.word	0x24000be4

08004d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d24:	4802      	ldr	r0, [pc, #8]	; (8004d30 <USART2_IRQHandler+0x10>)
 8004d26:	f00b fb1d 	bl	8010364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d2a:	bf00      	nop
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	24000d78 	.word	0x24000d78

08004d34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004d38:	4802      	ldr	r0, [pc, #8]	; (8004d44 <USART3_IRQHandler+0x10>)
 8004d3a:	f00b fb13 	bl	8010364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	240009c4 	.word	0x240009c4

08004d48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	af00      	add	r7, sp, #0
//			tim1_20ms_count = 0;
//			tim1_20ms_flag = 1;
//		}
//	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004d4c:	4802      	ldr	r0, [pc, #8]	; (8004d58 <TIM7_IRQHandler+0x10>)
 8004d4e:	f00a f9d5 	bl	800f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	24000e14 	.word	0x24000e14

08004d5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	static unsigned short tim1_2ms_count = 0;
	static unsigned short tim1_10ms_count = 0;
	static unsigned short tim1_20ms_count = 0;
	static unsigned short tim1_500ms_count = 0;

	if(htim->Instance == TIM7)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a24      	ldr	r2, [pc, #144]	; (8004dfc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d13f      	bne.n	8004dee <HAL_TIM_PeriodElapsedCallback+0x92>
	{
		tim1_2ms_count++;
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	3301      	adds	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	4b22      	ldr	r3, [pc, #136]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004d78:	801a      	strh	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 8004d7a:	4b21      	ldr	r3, [pc, #132]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d105      	bne.n	8004d8e <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 8004d82:	4b1f      	ldr	r3, [pc, #124]	; (8004e00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	801a      	strh	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8004d88:	4b1e      	ldr	r3, [pc, #120]	; (8004e04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 8004d8e:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004d90:	881b      	ldrh	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004d98:	801a      	strh	r2, [r3, #0]
		if(tim1_10ms_count == 10)
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	2b0a      	cmp	r3, #10
 8004da0:	d105      	bne.n	8004dae <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_10ms_count = 0;
 8004da2:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	801a      	strh	r2, [r3, #0]
			tim1_10ms_flag = 1;
 8004da8:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8004dae:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	3301      	adds	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004db8:	801a      	strh	r2, [r3, #0]
		if(tim1_20ms_count == 20)
 8004dba:	4b15      	ldr	r3, [pc, #84]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	2b14      	cmp	r3, #20
 8004dc0:	d105      	bne.n	8004dce <HAL_TIM_PeriodElapsedCallback+0x72>
		{
			tim1_20ms_count = 0;
 8004dc2:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	801a      	strh	r2, [r3, #0]
			tim1_20ms_flag = 1;
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
		}
		tim1_500ms_count++;
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004dd8:	801a      	strh	r2, [r3, #0]
		if(tim1_500ms_count == 20)
 8004dda:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	2b14      	cmp	r3, #20
 8004de0:	d105      	bne.n	8004dee <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			tim1_500ms_count = 0;
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	801a      	strh	r2, [r3, #0]
			tim1_500ms_flag = 1;
 8004de8:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40001400 	.word	0x40001400
 8004e00:	24000246 	.word	0x24000246
 8004e04:	2400023c 	.word	0x2400023c
 8004e08:	24000248 	.word	0x24000248
 8004e0c:	2400023d 	.word	0x2400023d
 8004e10:	2400024a 	.word	0x2400024a
 8004e14:	2400023e 	.word	0x2400023e
 8004e18:	2400024c 	.word	0x2400024c
 8004e1c:	2400023f 	.word	0x2400023f

08004e20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a33      	ldr	r2, [pc, #204]	; (8004efc <HAL_UART_RxCpltCallback+0xdc>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d103      	bne.n	8004e3a <HAL_UART_RxCpltCallback+0x1a>
	{
		uart1_rx_flag = 1;
 8004e32:	4b33      	ldr	r3, [pc, #204]	; (8004f00 <HAL_UART_RxCpltCallback+0xe0>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
			ibus_rx_buf[cnt]=uart2_rx_data;
			cnt++;
			break;
		}
	}
}
 8004e38:	e059      	b.n	8004eee <HAL_UART_RxCpltCallback+0xce>
	else if(huart->Instance == USART2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a31      	ldr	r2, [pc, #196]	; (8004f04 <HAL_UART_RxCpltCallback+0xe4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d151      	bne.n	8004ee8 <HAL_UART_RxCpltCallback+0xc8>
		uart2_rx_flag = 1;
 8004e44:	4b30      	ldr	r3, [pc, #192]	; (8004f08 <HAL_UART_RxCpltCallback+0xe8>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 8004e4a:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	2b1f      	cmp	r3, #31
 8004e50:	d02e      	beq.n	8004eb0 <HAL_UART_RxCpltCallback+0x90>
 8004e52:	2b1f      	cmp	r3, #31
 8004e54:	dc3a      	bgt.n	8004ecc <HAL_UART_RxCpltCallback+0xac>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_RxCpltCallback+0x40>
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d012      	beq.n	8004e84 <HAL_UART_RxCpltCallback+0x64>
 8004e5e:	e035      	b.n	8004ecc <HAL_UART_RxCpltCallback+0xac>
			if(uart2_rx_data==0x20)
 8004e60:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <HAL_UART_RxCpltCallback+0xf0>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d141      	bne.n	8004eec <HAL_UART_RxCpltCallback+0xcc>
				ibus_rx_buf[cnt]=uart2_rx_data;
 8004e68:	4b28      	ldr	r3, [pc, #160]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_UART_RxCpltCallback+0xf0>)
 8004e70:	7819      	ldrb	r1, [r3, #0]
 8004e72:	4b28      	ldr	r3, [pc, #160]	; (8004f14 <HAL_UART_RxCpltCallback+0xf4>)
 8004e74:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004e76:	4b25      	ldr	r3, [pc, #148]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	4b23      	ldr	r3, [pc, #140]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004e80:	701a      	strb	r2, [r3, #0]
			break;
 8004e82:	e033      	b.n	8004eec <HAL_UART_RxCpltCallback+0xcc>
			if(uart2_rx_data==0x40)
 8004e84:	4b22      	ldr	r3, [pc, #136]	; (8004f10 <HAL_UART_RxCpltCallback+0xf0>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d10d      	bne.n	8004ea8 <HAL_UART_RxCpltCallback+0x88>
				ibus_rx_buf[cnt]=uart2_rx_data;
 8004e8c:	4b1f      	ldr	r3, [pc, #124]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	4b1f      	ldr	r3, [pc, #124]	; (8004f10 <HAL_UART_RxCpltCallback+0xf0>)
 8004e94:	7819      	ldrb	r1, [r3, #0]
 8004e96:	4b1f      	ldr	r3, [pc, #124]	; (8004f14 <HAL_UART_RxCpltCallback+0xf4>)
 8004e98:	5499      	strb	r1, [r3, r2]
				cnt++;
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4b1a      	ldr	r3, [pc, #104]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004ea4:	701a      	strb	r2, [r3, #0]
			break;
 8004ea6:	e022      	b.n	8004eee <HAL_UART_RxCpltCallback+0xce>
				cnt=0;
 8004ea8:	4b18      	ldr	r3, [pc, #96]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
			break;
 8004eae:	e01e      	b.n	8004eee <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 8004eb0:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <HAL_UART_RxCpltCallback+0xf0>)
 8004eb8:	7819      	ldrb	r1, [r3, #0]
 8004eba:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <HAL_UART_RxCpltCallback+0xf4>)
 8004ebc:	5499      	strb	r1, [r3, r2]
			cnt=0;
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004ec4:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <HAL_UART_RxCpltCallback+0xf8>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
			break;
 8004eca:	e010      	b.n	8004eee <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	; (8004f10 <HAL_UART_RxCpltCallback+0xf0>)
 8004ed4:	7819      	ldrb	r1, [r3, #0]
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <HAL_UART_RxCpltCallback+0xf4>)
 8004ed8:	5499      	strb	r1, [r3, r2]
			cnt++;
 8004eda:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <HAL_UART_RxCpltCallback+0xec>)
 8004ee4:	701a      	strb	r2, [r3, #0]
			break;
 8004ee6:	e002      	b.n	8004eee <HAL_UART_RxCpltCallback+0xce>
	}
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_UART_RxCpltCallback+0xce>
			break;
 8004eec:	bf00      	nop
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40011000 	.word	0x40011000
 8004f00:	24000240 	.word	0x24000240
 8004f04:	40004400 	.word	0x40004400
 8004f08:	24000242 	.word	0x24000242
 8004f0c:	2400024e 	.word	0x2400024e
 8004f10:	24000243 	.word	0x24000243
 8004f14:	24000e64 	.word	0x24000e64
 8004f18:	24000244 	.word	0x24000244

08004f1c <Receive_Command>:

void Receive_Command(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 8004f20:	4b36      	ldr	r3, [pc, #216]	; (8004ffc <Receive_Command+0xe0>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d163      	bne.n	8004ff0 <Receive_Command+0xd4>
	{
		uart1_rx_flag = 0;
 8004f28:	4b34      	ldr	r3, [pc, #208]	; (8004ffc <Receive_Command+0xe0>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 8004f2e:	4b34      	ldr	r3, [pc, #208]	; (8005000 <Receive_Command+0xe4>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	2b14      	cmp	r3, #20
 8004f36:	d854      	bhi.n	8004fe2 <Receive_Command+0xc6>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <Receive_Command+0x24>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f95 	.word	0x08004f95
 8004f44:	08004f9d 	.word	0x08004f9d
 8004f48:	08004fa5 	.word	0x08004fa5
 8004f4c:	08004fad 	.word	0x08004fad
 8004f50:	08004fb5 	.word	0x08004fb5
 8004f54:	08004fbd 	.word	0x08004fbd
 8004f58:	08004fe3 	.word	0x08004fe3
 8004f5c:	08004fe3 	.word	0x08004fe3
 8004f60:	08004fe3 	.word	0x08004fe3
 8004f64:	08004fe3 	.word	0x08004fe3
 8004f68:	08004fc5 	.word	0x08004fc5
 8004f6c:	08004fcd 	.word	0x08004fcd
 8004f70:	08004fe3 	.word	0x08004fe3
 8004f74:	08004fe3 	.word	0x08004fe3
 8004f78:	08004fe3 	.word	0x08004fe3
 8004f7c:	08004fe3 	.word	0x08004fe3
 8004f80:	08004fe3 	.word	0x08004fe3
 8004f84:	08004fe3 	.word	0x08004fe3
 8004f88:	08004fe3 	.word	0x08004fe3
 8004f8c:	08004fe3 	.word	0x08004fe3
 8004f90:	08004fd5 	.word	0x08004fd5
		{
		case 1: print_mode = 1; break; //Roll, Pitch, Yaw
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <Receive_Command+0xe8>)
 8004f96:	2201      	movs	r2, #1
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e02a      	b.n	8004ff2 <Receive_Command+0xd6>
		case 2: print_mode = 2; break; //Alt Raw, Alt Filt
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <Receive_Command+0xe8>)
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e026      	b.n	8004ff2 <Receive_Command+0xd6>
		case 3: print_mode = 3; break; //Gyro
 8004fa4:	4b17      	ldr	r3, [pc, #92]	; (8005004 <Receive_Command+0xe8>)
 8004fa6:	2203      	movs	r2, #3
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e022      	b.n	8004ff2 <Receive_Command+0xd6>
		case 4: print_mode = 4; break; //Accel
 8004fac:	4b15      	ldr	r3, [pc, #84]	; (8005004 <Receive_Command+0xe8>)
 8004fae:	2204      	movs	r2, #4
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e01e      	b.n	8004ff2 <Receive_Command+0xd6>
		case 5: print_mode = 5; break; //Mag
 8004fb4:	4b13      	ldr	r3, [pc, #76]	; (8005004 <Receive_Command+0xe8>)
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	e01a      	b.n	8004ff2 <Receive_Command+0xd6>
		case 6: print_mode = 6; break; //Mag_Offset
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <Receive_Command+0xe8>)
 8004fbe:	2206      	movs	r2, #6
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e016      	b.n	8004ff2 <Receive_Command+0xd6>
		case 11: print_mode = 11; break; //Controller Channels
 8004fc4:	4b0f      	ldr	r3, [pc, #60]	; (8005004 <Receive_Command+0xe8>)
 8004fc6:	220b      	movs	r2, #11
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e012      	b.n	8004ff2 <Receive_Command+0xd6>
		case 12: print_mode = 12; break; //GPS
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <Receive_Command+0xe8>)
 8004fce:	220c      	movs	r2, #12
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e00e      	b.n	8004ff2 <Receive_Command+0xd6>
		case 21: mag_calibration_enable = 1; print_mode = 0; break; //Mag Offset
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <Receive_Command+0xec>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <Receive_Command+0xe8>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e007      	b.n	8004ff2 <Receive_Command+0xd6>
		default: mag_calibration_enable = 0; print_mode = 0; break; // Stop Printing
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <Receive_Command+0xec>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	4b06      	ldr	r3, [pc, #24]	; (8005004 <Receive_Command+0xe8>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e000      	b.n	8004ff2 <Receive_Command+0xd6>
		}
	}
 8004ff0:	bf00      	nop
}
 8004ff2:	bf00      	nop
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	24000240 	.word	0x24000240
 8005000:	24000241 	.word	0x24000241
 8005004:	24000230 	.word	0x24000230
 8005008:	24000231 	.word	0x24000231

0800500c <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	71fb      	strb	r3, [r7, #7]
	if(ibus_rx_cplt_flag==1)
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d121      	bne.n	8005060 <Is_iBus_Received+0x54>
	{
		ibus_rx_cplt_flag=0;
 800501c:	2300      	movs	r3, #0
 800501e:	71fb      	strb	r3, [r7, #7]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8005020:	2120      	movs	r1, #32
 8005022:	4812      	ldr	r0, [pc, #72]	; (800506c <Is_iBus_Received+0x60>)
 8005024:	f7fb fb30 	bl	8000688 <iBus_Check_CHKSUM>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d118      	bne.n	8005060 <Is_iBus_Received+0x54>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800502e:	4910      	ldr	r1, [pc, #64]	; (8005070 <Is_iBus_Received+0x64>)
 8005030:	480e      	ldr	r0, [pc, #56]	; (800506c <Is_iBus_Received+0x60>)
 8005032:	f7fb fb60 	bl	80006f6 <iBus_Parsing>
			iBus_rx_cnt++;
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <Is_iBus_Received+0x68>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	3301      	adds	r3, #1
 800503c:	b2da      	uxtb	r2, r3
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <Is_iBus_Received+0x68>)
 8005040:	701a      	strb	r2, [r3, #0]
			if(iBus_isActiveFailSafe(&iBus) == 1)
 8005042:	480b      	ldr	r0, [pc, #44]	; (8005070 <Is_iBus_Received+0x64>)
 8005044:	f7fb fc13 	bl	800086e <iBus_isActiveFailSafe>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d103      	bne.n	8005056 <Is_iBus_Received+0x4a>
			{
				iBus_failsafe = 1;
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <Is_iBus_Received+0x6c>)
 8005050:	2201      	movs	r2, #1
 8005052:	701a      	strb	r2, [r3, #0]
 8005054:	e004      	b.n	8005060 <Is_iBus_Received+0x54>
			}
			else
			{
				iBus_failsafe = 0;
 8005056:	4b08      	ldr	r3, [pc, #32]	; (8005078 <Is_iBus_Received+0x6c>)
 8005058:	2200      	movs	r2, #0
 800505a:	701a      	strb	r2, [r3, #0]
				return 1;
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <Is_iBus_Received+0x56>
			}
		}
	}
	return 0;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	24000e64 	.word	0x24000e64
 8005070:	2400025c 	.word	0x2400025c
 8005074:	24000216 	.word	0x24000216
 8005078:	24000214 	.word	0x24000214

0800507c <Is_Throttle_Min>:

int Is_Throttle_Min(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag==1)
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <Is_Throttle_Min+0x3c>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d114      	bne.n	80050b2 <Is_Throttle_Min+0x36>
	{
		ibus_rx_cplt_flag=0;
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <Is_Throttle_Min+0x3c>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 800508e:	2120      	movs	r1, #32
 8005090:	480a      	ldr	r0, [pc, #40]	; (80050bc <Is_Throttle_Min+0x40>)
 8005092:	f7fb faf9 	bl	8000688 <iBus_Check_CHKSUM>
 8005096:	4603      	mov	r3, r0
 8005098:	2b01      	cmp	r3, #1
 800509a:	d10a      	bne.n	80050b2 <Is_Throttle_Min+0x36>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 800509c:	4908      	ldr	r1, [pc, #32]	; (80050c0 <Is_Throttle_Min+0x44>)
 800509e:	4807      	ldr	r0, [pc, #28]	; (80050bc <Is_Throttle_Min+0x40>)
 80050a0:	f7fb fb29 	bl	80006f6 <iBus_Parsing>
			if(iBus.LV < 1025) return 1;
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <Is_Throttle_Min+0x44>)
 80050a6:	889b      	ldrh	r3, [r3, #4]
 80050a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ac:	d801      	bhi.n	80050b2 <Is_Throttle_Min+0x36>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <Is_Throttle_Min+0x38>
		}
	}
	return 0;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	24000244 	.word	0x24000244
 80050bc:	24000e64 	.word	0x24000e64
 80050c0:	2400025c 	.word	0x2400025c

080050c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
	return 1;
 80050c8:	2301      	movs	r3, #1
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <_kill>:

int _kill(int pid, int sig)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050de:	f00c fde9 	bl	8011cb4 <__errno>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2216      	movs	r2, #22
 80050e6:	601a      	str	r2, [r3, #0]
	return -1;
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_exit>:

void _exit (int status)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ffe7 	bl	80050d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005106:	e7fe      	b.n	8005106 <_exit+0x12>

08005108 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e00a      	b.n	8005130 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800511a:	f3af 8000 	nop.w
 800511e:	4601      	mov	r1, r0
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	60ba      	str	r2, [r7, #8]
 8005126:	b2ca      	uxtb	r2, r1
 8005128:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	3301      	adds	r3, #1
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	429a      	cmp	r2, r3
 8005136:	dbf0      	blt.n	800511a <_read+0x12>
	}

return len;
 8005138:	687b      	ldr	r3, [r7, #4]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
	return -1;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800516a:	605a      	str	r2, [r3, #4]
	return 0;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <_isatty>:

int _isatty(int file)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
	return 1;
 8005182:	2301      	movs	r3, #1
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
	return 0;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <_sbrk+0x5c>)
 80051b6:	4b15      	ldr	r3, [pc, #84]	; (800520c <_sbrk+0x60>)
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051c0:	4b13      	ldr	r3, [pc, #76]	; (8005210 <_sbrk+0x64>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051c8:	4b11      	ldr	r3, [pc, #68]	; (8005210 <_sbrk+0x64>)
 80051ca:	4a12      	ldr	r2, [pc, #72]	; (8005214 <_sbrk+0x68>)
 80051cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <_sbrk+0x64>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d207      	bcs.n	80051ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051dc:	f00c fd6a 	bl	8011cb4 <__errno>
 80051e0:	4603      	mov	r3, r0
 80051e2:	220c      	movs	r2, #12
 80051e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ea:	e009      	b.n	8005200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <_sbrk+0x64>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <_sbrk+0x64>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4413      	add	r3, r2
 80051fa:	4a05      	ldr	r2, [pc, #20]	; (8005210 <_sbrk+0x64>)
 80051fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051fe:	68fb      	ldr	r3, [r7, #12]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	24080000 	.word	0x24080000
 800520c:	00000400 	.word	0x00000400
 8005210:	24000250 	.word	0x24000250
 8005214:	24000ec0 	.word	0x24000ec0

08005218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800521c:	4b39      	ldr	r3, [pc, #228]	; (8005304 <SystemInit+0xec>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005222:	4a38      	ldr	r2, [pc, #224]	; (8005304 <SystemInit+0xec>)
 8005224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800522c:	4b36      	ldr	r3, [pc, #216]	; (8005308 <SystemInit+0xf0>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	2b06      	cmp	r3, #6
 8005236:	d807      	bhi.n	8005248 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005238:	4b33      	ldr	r3, [pc, #204]	; (8005308 <SystemInit+0xf0>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f023 030f 	bic.w	r3, r3, #15
 8005240:	4a31      	ldr	r2, [pc, #196]	; (8005308 <SystemInit+0xf0>)
 8005242:	f043 0307 	orr.w	r3, r3, #7
 8005246:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005248:	4b30      	ldr	r3, [pc, #192]	; (800530c <SystemInit+0xf4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2f      	ldr	r2, [pc, #188]	; (800530c <SystemInit+0xf4>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005254:	4b2d      	ldr	r3, [pc, #180]	; (800530c <SystemInit+0xf4>)
 8005256:	2200      	movs	r2, #0
 8005258:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800525a:	4b2c      	ldr	r3, [pc, #176]	; (800530c <SystemInit+0xf4>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	492b      	ldr	r1, [pc, #172]	; (800530c <SystemInit+0xf4>)
 8005260:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <SystemInit+0xf8>)
 8005262:	4013      	ands	r3, r2
 8005264:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005266:	4b28      	ldr	r3, [pc, #160]	; (8005308 <SystemInit+0xf0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005272:	4b25      	ldr	r3, [pc, #148]	; (8005308 <SystemInit+0xf0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 030f 	bic.w	r3, r3, #15
 800527a:	4a23      	ldr	r2, [pc, #140]	; (8005308 <SystemInit+0xf0>)
 800527c:	f043 0307 	orr.w	r3, r3, #7
 8005280:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005282:	4b22      	ldr	r3, [pc, #136]	; (800530c <SystemInit+0xf4>)
 8005284:	2200      	movs	r2, #0
 8005286:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005288:	4b20      	ldr	r3, [pc, #128]	; (800530c <SystemInit+0xf4>)
 800528a:	2200      	movs	r2, #0
 800528c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800528e:	4b1f      	ldr	r3, [pc, #124]	; (800530c <SystemInit+0xf4>)
 8005290:	2200      	movs	r2, #0
 8005292:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005294:	4b1d      	ldr	r3, [pc, #116]	; (800530c <SystemInit+0xf4>)
 8005296:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <SystemInit+0xfc>)
 8005298:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <SystemInit+0xf4>)
 800529c:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <SystemInit+0x100>)
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80052a0:	4b1a      	ldr	r3, [pc, #104]	; (800530c <SystemInit+0xf4>)
 80052a2:	4a1e      	ldr	r2, [pc, #120]	; (800531c <SystemInit+0x104>)
 80052a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80052a6:	4b19      	ldr	r3, [pc, #100]	; (800530c <SystemInit+0xf4>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80052ac:	4b17      	ldr	r3, [pc, #92]	; (800530c <SystemInit+0xf4>)
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <SystemInit+0x104>)
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80052b2:	4b16      	ldr	r3, [pc, #88]	; (800530c <SystemInit+0xf4>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80052b8:	4b14      	ldr	r3, [pc, #80]	; (800530c <SystemInit+0xf4>)
 80052ba:	4a18      	ldr	r2, [pc, #96]	; (800531c <SystemInit+0x104>)
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <SystemInit+0xf4>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80052c4:	4b11      	ldr	r3, [pc, #68]	; (800530c <SystemInit+0xf4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a10      	ldr	r2, [pc, #64]	; (800530c <SystemInit+0xf4>)
 80052ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <SystemInit+0xf4>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80052d6:	4b12      	ldr	r3, [pc, #72]	; (8005320 <SystemInit+0x108>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4b12      	ldr	r3, [pc, #72]	; (8005324 <SystemInit+0x10c>)
 80052dc:	4013      	ands	r3, r2
 80052de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e2:	d202      	bcs.n	80052ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80052e4:	4b10      	ldr	r3, [pc, #64]	; (8005328 <SystemInit+0x110>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80052ea:	4b10      	ldr	r3, [pc, #64]	; (800532c <SystemInit+0x114>)
 80052ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80052f0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80052f2:	4b04      	ldr	r3, [pc, #16]	; (8005304 <SystemInit+0xec>)
 80052f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052f8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80052fa:	bf00      	nop
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	e000ed00 	.word	0xe000ed00
 8005308:	52002000 	.word	0x52002000
 800530c:	58024400 	.word	0x58024400
 8005310:	eaf6ed7f 	.word	0xeaf6ed7f
 8005314:	02020200 	.word	0x02020200
 8005318:	01ff0000 	.word	0x01ff0000
 800531c:	01010280 	.word	0x01010280
 8005320:	5c001000 	.word	0x5c001000
 8005324:	ffff0000 	.word	0xffff0000
 8005328:	51008108 	.word	0x51008108
 800532c:	52004000 	.word	0x52004000

08005330 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af02      	add	r7, sp, #8
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800533a:	f107 020f 	add.w	r2, r7, #15
 800533e:	1df9      	adds	r1, r7, #7
 8005340:	2364      	movs	r3, #100	; 0x64
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	2301      	movs	r3, #1
 8005346:	4804      	ldr	r0, [pc, #16]	; (8005358 <W25qxx_Spi+0x28>)
 8005348:	f009 f88c 	bl	800e464 <HAL_SPI_TransmitReceive>
	return ret;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	24000cec 	.word	0x24000cec

0800535c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	2300      	movs	r3, #0
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	2300      	movs	r3, #0
 8005370:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005372:	2200      	movs	r2, #0
 8005374:	2140      	movs	r1, #64	; 0x40
 8005376:	4813      	ldr	r0, [pc, #76]	; (80053c4 <W25qxx_ReadID+0x68>)
 8005378:	f003 fde8 	bl	8008f4c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800537c:	209f      	movs	r0, #159	; 0x9f
 800537e:	f7ff ffd7 	bl	8005330 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005382:	20a5      	movs	r0, #165	; 0xa5
 8005384:	f7ff ffd4 	bl	8005330 <W25qxx_Spi>
 8005388:	4603      	mov	r3, r0
 800538a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800538c:	20a5      	movs	r0, #165	; 0xa5
 800538e:	f7ff ffcf 	bl	8005330 <W25qxx_Spi>
 8005392:	4603      	mov	r3, r0
 8005394:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005396:	20a5      	movs	r0, #165	; 0xa5
 8005398:	f7ff ffca 	bl	8005330 <W25qxx_Spi>
 800539c:	4603      	mov	r3, r0
 800539e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80053a0:	2201      	movs	r2, #1
 80053a2:	2140      	movs	r1, #64	; 0x40
 80053a4:	4807      	ldr	r0, [pc, #28]	; (80053c4 <W25qxx_ReadID+0x68>)
 80053a6:	f003 fdd1 	bl	8008f4c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	041a      	lsls	r2, r3, #16
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	021b      	lsls	r3, r3, #8
 80053b2:	4313      	orrs	r3, r2
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
	return Temp;
 80053ba:	68fb      	ldr	r3, [r7, #12]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	58020400 	.word	0x58020400

080053c8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2140      	movs	r1, #64	; 0x40
 80053d2:	4816      	ldr	r0, [pc, #88]	; (800542c <W25qxx_ReadUniqID+0x64>)
 80053d4:	f003 fdba 	bl	8008f4c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 80053d8:	204b      	movs	r0, #75	; 0x4b
 80053da:	f7ff ffa9 	bl	8005330 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80053de:	2300      	movs	r3, #0
 80053e0:	71fb      	strb	r3, [r7, #7]
 80053e2:	e005      	b.n	80053f0 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80053e4:	20a5      	movs	r0, #165	; 0xa5
 80053e6:	f7ff ffa3 	bl	8005330 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	3301      	adds	r3, #1
 80053ee:	71fb      	strb	r3, [r7, #7]
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d9f6      	bls.n	80053e4 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80053f6:	2300      	movs	r3, #0
 80053f8:	71bb      	strb	r3, [r7, #6]
 80053fa:	e00b      	b.n	8005414 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80053fc:	79bc      	ldrb	r4, [r7, #6]
 80053fe:	20a5      	movs	r0, #165	; 0xa5
 8005400:	f7ff ff96 	bl	8005330 <W25qxx_Spi>
 8005404:	4603      	mov	r3, r0
 8005406:	461a      	mov	r2, r3
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <W25qxx_ReadUniqID+0x68>)
 800540a:	4423      	add	r3, r4
 800540c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800540e:	79bb      	ldrb	r3, [r7, #6]
 8005410:	3301      	adds	r3, #1
 8005412:	71bb      	strb	r3, [r7, #6]
 8005414:	79bb      	ldrb	r3, [r7, #6]
 8005416:	2b07      	cmp	r3, #7
 8005418:	d9f0      	bls.n	80053fc <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800541a:	2201      	movs	r2, #1
 800541c:	2140      	movs	r1, #64	; 0x40
 800541e:	4803      	ldr	r0, [pc, #12]	; (800542c <W25qxx_ReadUniqID+0x64>)
 8005420:	f003 fd94 	bl	8008f4c <HAL_GPIO_WritePin>
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bd90      	pop	{r4, r7, pc}
 800542c:	58020400 	.word	0x58020400
 8005430:	24000e84 	.word	0x24000e84

08005434 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005438:	2200      	movs	r2, #0
 800543a:	2140      	movs	r1, #64	; 0x40
 800543c:	4807      	ldr	r0, [pc, #28]	; (800545c <W25qxx_WriteEnable+0x28>)
 800543e:	f003 fd85 	bl	8008f4c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8005442:	2006      	movs	r0, #6
 8005444:	f7ff ff74 	bl	8005330 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005448:	2201      	movs	r2, #1
 800544a:	2140      	movs	r1, #64	; 0x40
 800544c:	4803      	ldr	r0, [pc, #12]	; (800545c <W25qxx_WriteEnable+0x28>)
 800544e:	f003 fd7d 	bl	8008f4c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8005452:	2001      	movs	r0, #1
 8005454:	f000 fc36 	bl	8005cc4 <HAL_Delay>
}
 8005458:	bf00      	nop
 800545a:	bd80      	pop	{r7, pc}
 800545c:	58020400 	.word	0x58020400

08005460 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800546e:	2200      	movs	r2, #0
 8005470:	2140      	movs	r1, #64	; 0x40
 8005472:	481c      	ldr	r0, [pc, #112]	; (80054e4 <W25qxx_ReadStatusRegister+0x84>)
 8005474:	f003 fd6a 	bl	8008f4c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10c      	bne.n	8005498 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800547e:	2005      	movs	r0, #5
 8005480:	f7ff ff56 	bl	8005330 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005484:	20a5      	movs	r0, #165	; 0xa5
 8005486:	f7ff ff53 	bl	8005330 <W25qxx_Spi>
 800548a:	4603      	mov	r3, r0
 800548c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800548e:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <W25qxx_ReadStatusRegister+0x88>)
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8005496:	e01b      	b.n	80054d0 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d10c      	bne.n	80054b8 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800549e:	2035      	movs	r0, #53	; 0x35
 80054a0:	f7ff ff46 	bl	8005330 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80054a4:	20a5      	movs	r0, #165	; 0xa5
 80054a6:	f7ff ff43 	bl	8005330 <W25qxx_Spi>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80054ae:	4a0e      	ldr	r2, [pc, #56]	; (80054e8 <W25qxx_ReadStatusRegister+0x88>)
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80054b6:	e00b      	b.n	80054d0 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80054b8:	2015      	movs	r0, #21
 80054ba:	f7ff ff39 	bl	8005330 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80054be:	20a5      	movs	r0, #165	; 0xa5
 80054c0:	f7ff ff36 	bl	8005330 <W25qxx_Spi>
 80054c4:	4603      	mov	r3, r0
 80054c6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80054c8:	4a07      	ldr	r2, [pc, #28]	; (80054e8 <W25qxx_ReadStatusRegister+0x88>)
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80054d0:	2201      	movs	r2, #1
 80054d2:	2140      	movs	r1, #64	; 0x40
 80054d4:	4803      	ldr	r0, [pc, #12]	; (80054e4 <W25qxx_ReadStatusRegister+0x84>)
 80054d6:	f003 fd39 	bl	8008f4c <HAL_GPIO_WritePin>
	return status;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58020400 	.word	0x58020400
 80054e8:	24000e84 	.word	0x24000e84

080054ec <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80054f0:	2001      	movs	r0, #1
 80054f2:	f000 fbe7 	bl	8005cc4 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80054f6:	2200      	movs	r2, #0
 80054f8:	2140      	movs	r1, #64	; 0x40
 80054fa:	480f      	ldr	r0, [pc, #60]	; (8005538 <W25qxx_WaitForWriteEnd+0x4c>)
 80054fc:	f003 fd26 	bl	8008f4c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8005500:	2005      	movs	r0, #5
 8005502:	f7ff ff15 	bl	8005330 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005506:	20a5      	movs	r0, #165	; 0xa5
 8005508:	f7ff ff12 	bl	8005330 <W25qxx_Spi>
 800550c:	4603      	mov	r3, r0
 800550e:	461a      	mov	r2, r3
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <W25qxx_WaitForWriteEnd+0x50>)
 8005512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8005516:	2001      	movs	r0, #1
 8005518:	f000 fbd4 	bl	8005cc4 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800551c:	4b07      	ldr	r3, [pc, #28]	; (800553c <W25qxx_WaitForWriteEnd+0x50>)
 800551e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1ed      	bne.n	8005506 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800552a:	2201      	movs	r2, #1
 800552c:	2140      	movs	r1, #64	; 0x40
 800552e:	4802      	ldr	r0, [pc, #8]	; (8005538 <W25qxx_WaitForWriteEnd+0x4c>)
 8005530:	f003 fd0c 	bl	8008f4c <HAL_GPIO_WritePin>
}
 8005534:	bf00      	nop
 8005536:	bd80      	pop	{r7, pc}
 8005538:	58020400 	.word	0x58020400
 800553c:	24000e84 	.word	0x24000e84

08005540 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8005546:	4b65      	ldr	r3, [pc, #404]	; (80056dc <W25qxx_Init+0x19c>)
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800554e:	e002      	b.n	8005556 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8005550:	2001      	movs	r0, #1
 8005552:	f000 fbb7 	bl	8005cc4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8005556:	f000 fba9 	bl	8005cac <HAL_GetTick>
 800555a:	4603      	mov	r3, r0
 800555c:	2b63      	cmp	r3, #99	; 0x63
 800555e:	d9f7      	bls.n	8005550 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005560:	2201      	movs	r2, #1
 8005562:	2140      	movs	r1, #64	; 0x40
 8005564:	485e      	ldr	r0, [pc, #376]	; (80056e0 <W25qxx_Init+0x1a0>)
 8005566:	f003 fcf1 	bl	8008f4c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800556a:	2064      	movs	r0, #100	; 0x64
 800556c:	f000 fbaa 	bl	8005cc4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8005570:	f7ff fef4 	bl	800535c <W25qxx_ReadID>
 8005574:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	3b11      	subs	r3, #17
 800557c:	2b0f      	cmp	r3, #15
 800557e:	d86c      	bhi.n	800565a <W25qxx_Init+0x11a>
 8005580:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <W25qxx_Init+0x48>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	0800564d 	.word	0x0800564d
 800558c:	0800563f 	.word	0x0800563f
 8005590:	08005631 	.word	0x08005631
 8005594:	08005623 	.word	0x08005623
 8005598:	08005615 	.word	0x08005615
 800559c:	08005607 	.word	0x08005607
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	080055e9 	.word	0x080055e9
 80055a8:	080055d9 	.word	0x080055d9
 80055ac:	0800565b 	.word	0x0800565b
 80055b0:	0800565b 	.word	0x0800565b
 80055b4:	0800565b 	.word	0x0800565b
 80055b8:	0800565b 	.word	0x0800565b
 80055bc:	0800565b 	.word	0x0800565b
 80055c0:	0800565b 	.word	0x0800565b
 80055c4:	080055c9 	.word	0x080055c9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80055c8:	4b44      	ldr	r3, [pc, #272]	; (80056dc <W25qxx_Init+0x19c>)
 80055ca:	220a      	movs	r2, #10
 80055cc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80055ce:	4b43      	ldr	r3, [pc, #268]	; (80056dc <W25qxx_Init+0x19c>)
 80055d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055d4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 80055d6:	e046      	b.n	8005666 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80055d8:	4b40      	ldr	r3, [pc, #256]	; (80056dc <W25qxx_Init+0x19c>)
 80055da:	2209      	movs	r2, #9
 80055dc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80055de:	4b3f      	ldr	r3, [pc, #252]	; (80056dc <W25qxx_Init+0x19c>)
 80055e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 80055e6:	e03e      	b.n	8005666 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80055e8:	4b3c      	ldr	r3, [pc, #240]	; (80056dc <W25qxx_Init+0x19c>)
 80055ea:	2208      	movs	r2, #8
 80055ec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80055ee:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <W25qxx_Init+0x19c>)
 80055f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055f4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80055f6:	e036      	b.n	8005666 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80055f8:	4b38      	ldr	r3, [pc, #224]	; (80056dc <W25qxx_Init+0x19c>)
 80055fa:	2207      	movs	r2, #7
 80055fc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80055fe:	4b37      	ldr	r3, [pc, #220]	; (80056dc <W25qxx_Init+0x19c>)
 8005600:	2280      	movs	r2, #128	; 0x80
 8005602:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8005604:	e02f      	b.n	8005666 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8005606:	4b35      	ldr	r3, [pc, #212]	; (80056dc <W25qxx_Init+0x19c>)
 8005608:	2206      	movs	r2, #6
 800560a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800560c:	4b33      	ldr	r3, [pc, #204]	; (80056dc <W25qxx_Init+0x19c>)
 800560e:	2240      	movs	r2, #64	; 0x40
 8005610:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8005612:	e028      	b.n	8005666 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <W25qxx_Init+0x19c>)
 8005616:	2205      	movs	r2, #5
 8005618:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800561a:	4b30      	ldr	r3, [pc, #192]	; (80056dc <W25qxx_Init+0x19c>)
 800561c:	2220      	movs	r2, #32
 800561e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8005620:	e021      	b.n	8005666 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8005622:	4b2e      	ldr	r3, [pc, #184]	; (80056dc <W25qxx_Init+0x19c>)
 8005624:	2204      	movs	r2, #4
 8005626:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8005628:	4b2c      	ldr	r3, [pc, #176]	; (80056dc <W25qxx_Init+0x19c>)
 800562a:	2210      	movs	r2, #16
 800562c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800562e:	e01a      	b.n	8005666 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8005630:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <W25qxx_Init+0x19c>)
 8005632:	2203      	movs	r2, #3
 8005634:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8005636:	4b29      	ldr	r3, [pc, #164]	; (80056dc <W25qxx_Init+0x19c>)
 8005638:	2208      	movs	r2, #8
 800563a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800563c:	e013      	b.n	8005666 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800563e:	4b27      	ldr	r3, [pc, #156]	; (80056dc <W25qxx_Init+0x19c>)
 8005640:	2202      	movs	r2, #2
 8005642:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8005644:	4b25      	ldr	r3, [pc, #148]	; (80056dc <W25qxx_Init+0x19c>)
 8005646:	2204      	movs	r2, #4
 8005648:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800564a:	e00c      	b.n	8005666 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800564c:	4b23      	ldr	r3, [pc, #140]	; (80056dc <W25qxx_Init+0x19c>)
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8005652:	4b22      	ldr	r3, [pc, #136]	; (80056dc <W25qxx_Init+0x19c>)
 8005654:	2202      	movs	r2, #2
 8005656:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8005658:	e005      	b.n	8005666 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800565a:	4b20      	ldr	r3, [pc, #128]	; (80056dc <W25qxx_Init+0x19c>)
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8005662:	2300      	movs	r3, #0
 8005664:	e036      	b.n	80056d4 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8005666:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <W25qxx_Init+0x19c>)
 8005668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800566c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800566e:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <W25qxx_Init+0x19c>)
 8005670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005674:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8005676:	4b19      	ldr	r3, [pc, #100]	; (80056dc <W25qxx_Init+0x19c>)
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	4a17      	ldr	r2, [pc, #92]	; (80056dc <W25qxx_Init+0x19c>)
 800567e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8005680:	4b16      	ldr	r3, [pc, #88]	; (80056dc <W25qxx_Init+0x19c>)
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	4a15      	ldr	r2, [pc, #84]	; (80056dc <W25qxx_Init+0x19c>)
 8005686:	6912      	ldr	r2, [r2, #16]
 8005688:	fb02 f303 	mul.w	r3, r2, r3
 800568c:	4a13      	ldr	r2, [pc, #76]	; (80056dc <W25qxx_Init+0x19c>)
 800568e:	8952      	ldrh	r2, [r2, #10]
 8005690:	fbb3 f3f2 	udiv	r3, r3, r2
 8005694:	4a11      	ldr	r2, [pc, #68]	; (80056dc <W25qxx_Init+0x19c>)
 8005696:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <W25qxx_Init+0x19c>)
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	4a0f      	ldr	r2, [pc, #60]	; (80056dc <W25qxx_Init+0x19c>)
 80056a0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80056a2:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <W25qxx_Init+0x19c>)
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <W25qxx_Init+0x19c>)
 80056a8:	6912      	ldr	r2, [r2, #16]
 80056aa:	fb02 f303 	mul.w	r3, r2, r3
 80056ae:	0a9b      	lsrs	r3, r3, #10
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <W25qxx_Init+0x19c>)
 80056b2:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80056b4:	f7ff fe88 	bl	80053c8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80056b8:	2001      	movs	r0, #1
 80056ba:	f7ff fed1 	bl	8005460 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80056be:	2002      	movs	r0, #2
 80056c0:	f7ff fece 	bl	8005460 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80056c4:	2003      	movs	r0, #3
 80056c6:	f7ff fecb 	bl	8005460 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80056ca:	4b04      	ldr	r3, [pc, #16]	; (80056dc <W25qxx_Init+0x19c>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80056d2:	2301      	movs	r3, #1
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	24000e84 	.word	0x24000e84
 80056e0:	58020400 	.word	0x58020400

080056e4 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80056ec:	e002      	b.n	80056f4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80056ee:	2001      	movs	r0, #1
 80056f0:	f000 fae8 	bl	8005cc4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80056f4:	4b25      	ldr	r3, [pc, #148]	; (800578c <W25qxx_EraseSector+0xa8>)
 80056f6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d0f7      	beq.n	80056ee <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80056fe:	4b23      	ldr	r3, [pc, #140]	; (800578c <W25qxx_EraseSector+0xa8>)
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8005706:	f7ff fef1 	bl	80054ec <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 800570a:	4b20      	ldr	r3, [pc, #128]	; (800578c <W25qxx_EraseSector+0xa8>)
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	fb02 f303 	mul.w	r3, r2, r3
 8005714:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8005716:	f7ff fe8d 	bl	8005434 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800571a:	2200      	movs	r2, #0
 800571c:	2140      	movs	r1, #64	; 0x40
 800571e:	481c      	ldr	r0, [pc, #112]	; (8005790 <W25qxx_EraseSector+0xac>)
 8005720:	f003 fc14 	bl	8008f4c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8005724:	4b19      	ldr	r3, [pc, #100]	; (800578c <W25qxx_EraseSector+0xa8>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b08      	cmp	r3, #8
 800572a:	d909      	bls.n	8005740 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 800572c:	2021      	movs	r0, #33	; 0x21
 800572e:	f7ff fdff 	bl	8005330 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	0e1b      	lsrs	r3, r3, #24
 8005736:	b2db      	uxtb	r3, r3
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fdf9 	bl	8005330 <W25qxx_Spi>
 800573e:	e002      	b.n	8005746 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8005740:	2020      	movs	r0, #32
 8005742:	f7ff fdf5 	bl	8005330 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	b2db      	uxtb	r3, r3
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fdef 	bl	8005330 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	b2db      	uxtb	r3, r3
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff fde9 	bl	8005330 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	b2db      	uxtb	r3, r3
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff fde4 	bl	8005330 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005768:	2201      	movs	r2, #1
 800576a:	2140      	movs	r1, #64	; 0x40
 800576c:	4808      	ldr	r0, [pc, #32]	; (8005790 <W25qxx_EraseSector+0xac>)
 800576e:	f003 fbed 	bl	8008f4c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8005772:	f7ff febb 	bl	80054ec <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8005776:	2001      	movs	r0, #1
 8005778:	f000 faa4 	bl	8005cc4 <HAL_Delay>
	w25qxx.Lock = 0;
 800577c:	4b03      	ldr	r3, [pc, #12]	; (800578c <W25qxx_EraseSector+0xa8>)
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	24000e84 	.word	0x24000e84
 8005790:	58020400 	.word	0x58020400

08005794 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 800579c:	4b07      	ldr	r3, [pc, #28]	; (80057bc <W25qxx_SectorToPage+0x28>)
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
 80057a6:	4a05      	ldr	r2, [pc, #20]	; (80057bc <W25qxx_SectorToPage+0x28>)
 80057a8:	8952      	ldrh	r2, [r2, #10]
 80057aa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	24000e84 	.word	0x24000e84

080057c0 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80057ce:	e002      	b.n	80057d6 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80057d0:	2001      	movs	r0, #1
 80057d2:	f000 fa77 	bl	8005cc4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80057d6:	4b39      	ldr	r3, [pc, #228]	; (80058bc <W25qxx_WritePage+0xfc>)
 80057d8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d0f7      	beq.n	80057d0 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80057e0:	4b36      	ldr	r3, [pc, #216]	; (80058bc <W25qxx_WritePage+0xfc>)
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	4a33      	ldr	r2, [pc, #204]	; (80058bc <W25qxx_WritePage+0xfc>)
 80057f0:	8952      	ldrh	r2, [r2, #10]
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d802      	bhi.n	80057fc <W25qxx_WritePage+0x3c>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d105      	bne.n	8005808 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80057fc:	4b2f      	ldr	r3, [pc, #188]	; (80058bc <W25qxx_WritePage+0xfc>)
 80057fe:	895b      	ldrh	r3, [r3, #10]
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	4413      	add	r3, r2
 800580e:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <W25qxx_WritePage+0xfc>)
 8005810:	8952      	ldrh	r2, [r2, #10]
 8005812:	4293      	cmp	r3, r2
 8005814:	d905      	bls.n	8005822 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8005816:	4b29      	ldr	r3, [pc, #164]	; (80058bc <W25qxx_WritePage+0xfc>)
 8005818:	895b      	ldrh	r3, [r3, #10]
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8005822:	f7ff fe63 	bl	80054ec <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8005826:	f7ff fe05 	bl	8005434 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800582a:	2200      	movs	r2, #0
 800582c:	2140      	movs	r1, #64	; 0x40
 800582e:	4824      	ldr	r0, [pc, #144]	; (80058c0 <W25qxx_WritePage+0x100>)
 8005830:	f003 fb8c 	bl	8008f4c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8005834:	4b21      	ldr	r3, [pc, #132]	; (80058bc <W25qxx_WritePage+0xfc>)
 8005836:	895b      	ldrh	r3, [r3, #10]
 8005838:	461a      	mov	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	fb03 f302 	mul.w	r3, r3, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	4413      	add	r3, r2
 8005844:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8005846:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <W25qxx_WritePage+0xfc>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b08      	cmp	r3, #8
 800584c:	d909      	bls.n	8005862 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 800584e:	2012      	movs	r0, #18
 8005850:	f7ff fd6e 	bl	8005330 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	0e1b      	lsrs	r3, r3, #24
 8005858:	b2db      	uxtb	r3, r3
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fd68 	bl	8005330 <W25qxx_Spi>
 8005860:	e002      	b.n	8005868 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8005862:	2002      	movs	r0, #2
 8005864:	f7ff fd64 	bl	8005330 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	0c1b      	lsrs	r3, r3, #16
 800586c:	b2db      	uxtb	r3, r3
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fd5e 	bl	8005330 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	0a1b      	lsrs	r3, r3, #8
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fd58 	bl	8005330 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff fd53 	bl	8005330 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	b29a      	uxth	r2, r3
 800588e:	2364      	movs	r3, #100	; 0x64
 8005890:	68f9      	ldr	r1, [r7, #12]
 8005892:	480c      	ldr	r0, [pc, #48]	; (80058c4 <W25qxx_WritePage+0x104>)
 8005894:	f008 fa02 	bl	800dc9c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005898:	2201      	movs	r2, #1
 800589a:	2140      	movs	r1, #64	; 0x40
 800589c:	4808      	ldr	r0, [pc, #32]	; (80058c0 <W25qxx_WritePage+0x100>)
 800589e:	f003 fb55 	bl	8008f4c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80058a2:	f7ff fe23 	bl	80054ec <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80058a6:	2001      	movs	r0, #1
 80058a8:	f000 fa0c 	bl	8005cc4 <HAL_Delay>
	w25qxx.Lock = 0;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <W25qxx_WritePage+0xfc>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	24000e84 	.word	0x24000e84
 80058c0:	58020400 	.word	0x58020400
 80058c4:	24000cec 	.word	0x24000cec

080058c8 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 80058d6:	4b2c      	ldr	r3, [pc, #176]	; (8005988 <W25qxx_WriteSector+0xc0>)
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d802      	bhi.n	80058e6 <W25qxx_WriteSector+0x1e>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 80058e6:	4b28      	ldr	r3, [pc, #160]	; (8005988 <W25qxx_WriteSector+0xc0>)
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 80058ec:	4b26      	ldr	r3, [pc, #152]	; (8005988 <W25qxx_WriteSector+0xc0>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d243      	bcs.n	800597e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	441a      	add	r2, r3
 80058fc:	4b22      	ldr	r3, [pc, #136]	; (8005988 <W25qxx_WriteSector+0xc0>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d905      	bls.n	8005910 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8005904:	4b20      	ldr	r3, [pc, #128]	; (8005988 <W25qxx_WriteSector+0xc0>)
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	e001      	b.n	8005914 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005914:	68b8      	ldr	r0, [r7, #8]
 8005916:	f7ff ff3d 	bl	8005794 <W25qxx_SectorToPage>
 800591a:	4602      	mov	r2, r0
 800591c:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <W25qxx_WriteSector+0xc0>)
 800591e:	895b      	ldrh	r3, [r3, #10]
 8005920:	4619      	mov	r1, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	fbb3 f3f1 	udiv	r3, r3, r1
 8005928:	4413      	add	r3, r2
 800592a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800592c:	4b16      	ldr	r3, [pc, #88]	; (8005988 <W25qxx_WriteSector+0xc0>)
 800592e:	895b      	ldrh	r3, [r3, #10]
 8005930:	461a      	mov	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	fbb3 f1f2 	udiv	r1, r3, r2
 8005938:	fb02 f201 	mul.w	r2, r2, r1
 800593c:	1a9b      	subs	r3, r3, r2
 800593e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	69f9      	ldr	r1, [r7, #28]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff ff3a 	bl	80057c0 <W25qxx_WritePage>
		StartPage++;
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	3301      	adds	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8005952:	4b0d      	ldr	r3, [pc, #52]	; (8005988 <W25qxx_WriteSector+0xc0>)
 8005954:	895b      	ldrh	r3, [r3, #10]
 8005956:	461a      	mov	r2, r3
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	1a9a      	subs	r2, r3, r2
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	4413      	add	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8005962:	4b09      	ldr	r3, [pc, #36]	; (8005988 <W25qxx_WriteSector+0xc0>)
 8005964:	895b      	ldrh	r3, [r3, #10]
 8005966:	461a      	mov	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4413      	add	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	dce1      	bgt.n	8005940 <W25qxx_WriteSector+0x78>
 800597c:	e000      	b.n	8005980 <W25qxx_WriteSector+0xb8>
		return;
 800597e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8005980:	3720      	adds	r7, #32
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	24000e84 	.word	0x24000e84

0800598c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800599a:	e002      	b.n	80059a2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800599c:	2001      	movs	r0, #1
 800599e:	f000 f991 	bl	8005cc4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80059a2:	4b36      	ldr	r3, [pc, #216]	; (8005a7c <W25qxx_ReadPage+0xf0>)
 80059a4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d0f7      	beq.n	800599c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80059ac:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <W25qxx_ReadPage+0xf0>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80059b4:	4b31      	ldr	r3, [pc, #196]	; (8005a7c <W25qxx_ReadPage+0xf0>)
 80059b6:	895b      	ldrh	r3, [r3, #10]
 80059b8:	461a      	mov	r2, r3
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	4293      	cmp	r3, r2
 80059be:	d802      	bhi.n	80059c6 <W25qxx_ReadPage+0x3a>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80059c6:	4b2d      	ldr	r3, [pc, #180]	; (8005a7c <W25qxx_ReadPage+0xf0>)
 80059c8:	895b      	ldrh	r3, [r3, #10]
 80059ca:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	4413      	add	r3, r2
 80059d2:	4a2a      	ldr	r2, [pc, #168]	; (8005a7c <W25qxx_ReadPage+0xf0>)
 80059d4:	8952      	ldrh	r2, [r2, #10]
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d905      	bls.n	80059e6 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80059da:	4b28      	ldr	r3, [pc, #160]	; (8005a7c <W25qxx_ReadPage+0xf0>)
 80059dc:	895b      	ldrh	r3, [r3, #10]
 80059de:	461a      	mov	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80059e6:	4b25      	ldr	r3, [pc, #148]	; (8005a7c <W25qxx_ReadPage+0xf0>)
 80059e8:	895b      	ldrh	r3, [r3, #10]
 80059ea:	461a      	mov	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	fb03 f302 	mul.w	r3, r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80059f8:	2200      	movs	r2, #0
 80059fa:	2140      	movs	r1, #64	; 0x40
 80059fc:	4820      	ldr	r0, [pc, #128]	; (8005a80 <W25qxx_ReadPage+0xf4>)
 80059fe:	f003 faa5 	bl	8008f4c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8005a02:	4b1e      	ldr	r3, [pc, #120]	; (8005a7c <W25qxx_ReadPage+0xf0>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d909      	bls.n	8005a1e <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8005a0a:	200c      	movs	r0, #12
 8005a0c:	f7ff fc90 	bl	8005330 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	0e1b      	lsrs	r3, r3, #24
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fc8a 	bl	8005330 <W25qxx_Spi>
 8005a1c:	e002      	b.n	8005a24 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8005a1e:	200b      	movs	r0, #11
 8005a20:	f7ff fc86 	bl	8005330 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	0c1b      	lsrs	r3, r3, #16
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fc80 	bl	8005330 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fc7a 	bl	8005330 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff fc75 	bl	8005330 <W25qxx_Spi>
	W25qxx_Spi(0);
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7ff fc72 	bl	8005330 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	2364      	movs	r3, #100	; 0x64
 8005a52:	68f9      	ldr	r1, [r7, #12]
 8005a54:	480b      	ldr	r0, [pc, #44]	; (8005a84 <W25qxx_ReadPage+0xf8>)
 8005a56:	f008 fb13 	bl	800e080 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2140      	movs	r1, #64	; 0x40
 8005a5e:	4808      	ldr	r0, [pc, #32]	; (8005a80 <W25qxx_ReadPage+0xf4>)
 8005a60:	f003 fa74 	bl	8008f4c <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8005a64:	2001      	movs	r0, #1
 8005a66:	f000 f92d 	bl	8005cc4 <HAL_Delay>
	w25qxx.Lock = 0;
 8005a6a:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <W25qxx_ReadPage+0xf0>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	24000e84 	.word	0x24000e84
 8005a80:	58020400 	.word	0x58020400
 8005a84:	24000cec 	.word	0x24000cec

08005a88 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8005a96:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <W25qxx_ReadSector+0xc0>)
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d802      	bhi.n	8005aa6 <W25qxx_ReadSector+0x1e>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d102      	bne.n	8005aac <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8005aa6:	4b28      	ldr	r3, [pc, #160]	; (8005b48 <W25qxx_ReadSector+0xc0>)
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005aac:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <W25qxx_ReadSector+0xc0>)
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d243      	bcs.n	8005b3e <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	441a      	add	r2, r3
 8005abc:	4b22      	ldr	r3, [pc, #136]	; (8005b48 <W25qxx_ReadSector+0xc0>)
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d905      	bls.n	8005ad0 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8005ac4:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <W25qxx_ReadSector+0xc0>)
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	e001      	b.n	8005ad4 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005ad4:	68b8      	ldr	r0, [r7, #8]
 8005ad6:	f7ff fe5d 	bl	8005794 <W25qxx_SectorToPage>
 8005ada:	4602      	mov	r2, r0
 8005adc:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <W25qxx_ReadSector+0xc0>)
 8005ade:	895b      	ldrh	r3, [r3, #10]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ae8:	4413      	add	r3, r2
 8005aea:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005aec:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <W25qxx_ReadSector+0xc0>)
 8005aee:	895b      	ldrh	r3, [r3, #10]
 8005af0:	461a      	mov	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005af8:	fb02 f201 	mul.w	r2, r2, r1
 8005afc:	1a9b      	subs	r3, r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	69f9      	ldr	r1, [r7, #28]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff ff40 	bl	800598c <W25qxx_ReadPage>
		StartPage++;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8005b12:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <W25qxx_ReadSector+0xc0>)
 8005b14:	895b      	ldrh	r3, [r3, #10]
 8005b16:	461a      	mov	r2, r3
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	1a9a      	subs	r2, r3, r2
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	4413      	add	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <W25qxx_ReadSector+0xc0>)
 8005b24:	895b      	ldrh	r3, [r3, #10]
 8005b26:	461a      	mov	r2, r3
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	dce1      	bgt.n	8005b00 <W25qxx_ReadSector+0x78>
 8005b3c:	e000      	b.n	8005b40 <W25qxx_ReadSector+0xb8>
		return;
 8005b3e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8005b40:	3720      	adds	r7, #32
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	24000e84 	.word	0x24000e84

08005b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005b50:	f7ff fb62 	bl	8005218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005b54:	480c      	ldr	r0, [pc, #48]	; (8005b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005b56:	490d      	ldr	r1, [pc, #52]	; (8005b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005b58:	4a0d      	ldr	r2, [pc, #52]	; (8005b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b5c:	e002      	b.n	8005b64 <LoopCopyDataInit>

08005b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b62:	3304      	adds	r3, #4

08005b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b68:	d3f9      	bcc.n	8005b5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b6a:	4a0a      	ldr	r2, [pc, #40]	; (8005b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005b6c:	4c0a      	ldr	r4, [pc, #40]	; (8005b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b70:	e001      	b.n	8005b76 <LoopFillZerobss>

08005b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b74:	3204      	adds	r2, #4

08005b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b78:	d3fb      	bcc.n	8005b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005b7a:	f00c f8a1 	bl	8011cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b7e:	f7fd fa93 	bl	80030a8 <main>
  bx  lr
 8005b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005b88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005b8c:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8005b90:	08015590 	.word	0x08015590
  ldr r2, =_sbss
 8005b94:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8005b98:	24000ec0 	.word	0x24000ec0

08005b9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b9c:	e7fe      	b.n	8005b9c <ADC3_IRQHandler>
	...

08005ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ba6:	2003      	movs	r0, #3
 8005ba8:	f000 f98c 	bl	8005ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bac:	f006 fa3c 	bl	800c028 <HAL_RCC_GetSysClockFreq>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <HAL_Init+0x68>)
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	0a1b      	lsrs	r3, r3, #8
 8005bb8:	f003 030f 	and.w	r3, r3, #15
 8005bbc:	4913      	ldr	r1, [pc, #76]	; (8005c0c <HAL_Init+0x6c>)
 8005bbe:	5ccb      	ldrb	r3, [r1, r3]
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bca:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <HAL_Init+0x68>)
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	4a0e      	ldr	r2, [pc, #56]	; (8005c0c <HAL_Init+0x6c>)
 8005bd4:	5cd3      	ldrb	r3, [r2, r3]
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8005be0:	4a0b      	ldr	r2, [pc, #44]	; (8005c10 <HAL_Init+0x70>)
 8005be2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005be4:	4a0b      	ldr	r2, [pc, #44]	; (8005c14 <HAL_Init+0x74>)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005bea:	200f      	movs	r0, #15
 8005bec:	f000 f814 	bl	8005c18 <HAL_InitTick>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e002      	b.n	8005c00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005bfa:	f7fe fc73 	bl	80044e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	58024400 	.word	0x58024400
 8005c0c:	080150b4 	.word	0x080150b4
 8005c10:	24000018 	.word	0x24000018
 8005c14:	24000014 	.word	0x24000014

08005c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005c20:	4b15      	ldr	r3, [pc, #84]	; (8005c78 <HAL_InitTick+0x60>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e021      	b.n	8005c70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005c2c:	4b13      	ldr	r3, [pc, #76]	; (8005c7c <HAL_InitTick+0x64>)
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <HAL_InitTick+0x60>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	4619      	mov	r1, r3
 8005c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 f971 	bl	8005f2a <HAL_SYSTICK_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e00e      	b.n	8005c70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b0f      	cmp	r3, #15
 8005c56:	d80a      	bhi.n	8005c6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c58:	2200      	movs	r2, #0
 8005c5a:	6879      	ldr	r1, [r7, #4]
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	f000 f93b 	bl	8005eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c64:	4a06      	ldr	r2, [pc, #24]	; (8005c80 <HAL_InitTick+0x68>)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e000      	b.n	8005c70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	24000020 	.word	0x24000020
 8005c7c:	24000014 	.word	0x24000014
 8005c80:	2400001c 	.word	0x2400001c

08005c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <HAL_IncTick+0x20>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_IncTick+0x24>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4413      	add	r3, r2
 8005c94:	4a04      	ldr	r2, [pc, #16]	; (8005ca8 <HAL_IncTick+0x24>)
 8005c96:	6013      	str	r3, [r2, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	24000020 	.word	0x24000020
 8005ca8:	24000eac 	.word	0x24000eac

08005cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
  return uwTick;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <HAL_GetTick+0x14>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	24000eac 	.word	0x24000eac

08005cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ccc:	f7ff ffee 	bl	8005cac <HAL_GetTick>
 8005cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d005      	beq.n	8005cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <HAL_Delay+0x44>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005cea:	bf00      	nop
 8005cec:	f7ff ffde 	bl	8005cac <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d8f7      	bhi.n	8005cec <HAL_Delay+0x28>
  {
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	24000020 	.word	0x24000020

08005d0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005d10:	4b03      	ldr	r3, [pc, #12]	; (8005d20 <HAL_GetREVID+0x14>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	0c1b      	lsrs	r3, r3, #16
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	5c001000 	.word	0x5c001000

08005d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d34:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <__NVIC_SetPriorityGrouping+0x40>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d40:	4013      	ands	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <__NVIC_SetPriorityGrouping+0x44>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d52:	4a04      	ldr	r2, [pc, #16]	; (8005d64 <__NVIC_SetPriorityGrouping+0x40>)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	60d3      	str	r3, [r2, #12]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	e000ed00 	.word	0xe000ed00
 8005d68:	05fa0000 	.word	0x05fa0000

08005d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <__NVIC_GetPriorityGrouping+0x18>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	0a1b      	lsrs	r3, r3, #8
 8005d76:	f003 0307 	and.w	r3, r3, #7
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	e000ed00 	.word	0xe000ed00

08005d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	db0b      	blt.n	8005db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d9a:	88fb      	ldrh	r3, [r7, #6]
 8005d9c:	f003 021f 	and.w	r2, r3, #31
 8005da0:	4907      	ldr	r1, [pc, #28]	; (8005dc0 <__NVIC_EnableIRQ+0x38>)
 8005da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	2001      	movs	r0, #1
 8005daa:	fa00 f202 	lsl.w	r2, r0, r2
 8005dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	e000e100 	.word	0xe000e100

08005dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db0a      	blt.n	8005dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	490c      	ldr	r1, [pc, #48]	; (8005e10 <__NVIC_SetPriority+0x4c>)
 8005dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005de2:	0112      	lsls	r2, r2, #4
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	440b      	add	r3, r1
 8005de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dec:	e00a      	b.n	8005e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	4908      	ldr	r1, [pc, #32]	; (8005e14 <__NVIC_SetPriority+0x50>)
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	3b04      	subs	r3, #4
 8005dfc:	0112      	lsls	r2, r2, #4
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	440b      	add	r3, r1
 8005e02:	761a      	strb	r2, [r3, #24]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	e000e100 	.word	0xe000e100
 8005e14:	e000ed00 	.word	0xe000ed00

08005e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b089      	sub	sp, #36	; 0x24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f1c3 0307 	rsb	r3, r3, #7
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	bf28      	it	cs
 8005e36:	2304      	movcs	r3, #4
 8005e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	2b06      	cmp	r3, #6
 8005e40:	d902      	bls.n	8005e48 <NVIC_EncodePriority+0x30>
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3b03      	subs	r3, #3
 8005e46:	e000      	b.n	8005e4a <NVIC_EncodePriority+0x32>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43da      	mvns	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	401a      	ands	r2, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e60:	f04f 31ff 	mov.w	r1, #4294967295
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6a:	43d9      	mvns	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e70:	4313      	orrs	r3, r2
         );
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3724      	adds	r7, #36	; 0x24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e90:	d301      	bcc.n	8005e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e92:	2301      	movs	r3, #1
 8005e94:	e00f      	b.n	8005eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e96:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <SysTick_Config+0x40>)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e9e:	210f      	movs	r1, #15
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	f7ff ff8e 	bl	8005dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <SysTick_Config+0x40>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005eae:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <SysTick_Config+0x40>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	e000e010 	.word	0xe000e010

08005ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff ff29 	bl	8005d24 <__NVIC_SetPriorityGrouping>
}
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b086      	sub	sp, #24
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ee8:	f7ff ff40 	bl	8005d6c <__NVIC_GetPriorityGrouping>
 8005eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	68b9      	ldr	r1, [r7, #8]
 8005ef2:	6978      	ldr	r0, [r7, #20]
 8005ef4:	f7ff ff90 	bl	8005e18 <NVIC_EncodePriority>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005efe:	4611      	mov	r1, r2
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff ff5f 	bl	8005dc4 <__NVIC_SetPriority>
}
 8005f06:	bf00      	nop
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	4603      	mov	r3, r0
 8005f16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff ff33 	bl	8005d88 <__NVIC_EnableIRQ>
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff ffa4 	bl	8005e80 <SysTick_Config>
 8005f38:	4603      	mov	r3, r0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005f4c:	f7ff feae 	bl	8005cac <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d101      	bne.n	8005f5c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e316      	b.n	800658a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a66      	ldr	r2, [pc, #408]	; (80060fc <HAL_DMA_Init+0x1b8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d04a      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a65      	ldr	r2, [pc, #404]	; (8006100 <HAL_DMA_Init+0x1bc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d045      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a63      	ldr	r2, [pc, #396]	; (8006104 <HAL_DMA_Init+0x1c0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d040      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a62      	ldr	r2, [pc, #392]	; (8006108 <HAL_DMA_Init+0x1c4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d03b      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a60      	ldr	r2, [pc, #384]	; (800610c <HAL_DMA_Init+0x1c8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d036      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a5f      	ldr	r2, [pc, #380]	; (8006110 <HAL_DMA_Init+0x1cc>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d031      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a5d      	ldr	r2, [pc, #372]	; (8006114 <HAL_DMA_Init+0x1d0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d02c      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a5c      	ldr	r2, [pc, #368]	; (8006118 <HAL_DMA_Init+0x1d4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d027      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a5a      	ldr	r2, [pc, #360]	; (800611c <HAL_DMA_Init+0x1d8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d022      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a59      	ldr	r2, [pc, #356]	; (8006120 <HAL_DMA_Init+0x1dc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d01d      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a57      	ldr	r2, [pc, #348]	; (8006124 <HAL_DMA_Init+0x1e0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d018      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a56      	ldr	r2, [pc, #344]	; (8006128 <HAL_DMA_Init+0x1e4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d013      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a54      	ldr	r2, [pc, #336]	; (800612c <HAL_DMA_Init+0x1e8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00e      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a53      	ldr	r2, [pc, #332]	; (8006130 <HAL_DMA_Init+0x1ec>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d009      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a51      	ldr	r2, [pc, #324]	; (8006134 <HAL_DMA_Init+0x1f0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_DMA_Init+0xb8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a50      	ldr	r2, [pc, #320]	; (8006138 <HAL_DMA_Init+0x1f4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d101      	bne.n	8006000 <HAL_DMA_Init+0xbc>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e000      	b.n	8006002 <HAL_DMA_Init+0xbe>
 8006000:	2300      	movs	r3, #0
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 813b 	beq.w	800627e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a37      	ldr	r2, [pc, #220]	; (80060fc <HAL_DMA_Init+0x1b8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d04a      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a36      	ldr	r2, [pc, #216]	; (8006100 <HAL_DMA_Init+0x1bc>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d045      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a34      	ldr	r2, [pc, #208]	; (8006104 <HAL_DMA_Init+0x1c0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d040      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a33      	ldr	r2, [pc, #204]	; (8006108 <HAL_DMA_Init+0x1c4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d03b      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a31      	ldr	r2, [pc, #196]	; (800610c <HAL_DMA_Init+0x1c8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d036      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a30      	ldr	r2, [pc, #192]	; (8006110 <HAL_DMA_Init+0x1cc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d031      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a2e      	ldr	r2, [pc, #184]	; (8006114 <HAL_DMA_Init+0x1d0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d02c      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a2d      	ldr	r2, [pc, #180]	; (8006118 <HAL_DMA_Init+0x1d4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d027      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2b      	ldr	r2, [pc, #172]	; (800611c <HAL_DMA_Init+0x1d8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d022      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <HAL_DMA_Init+0x1dc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d01d      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a28      	ldr	r2, [pc, #160]	; (8006124 <HAL_DMA_Init+0x1e0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d018      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a27      	ldr	r2, [pc, #156]	; (8006128 <HAL_DMA_Init+0x1e4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d013      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a25      	ldr	r2, [pc, #148]	; (800612c <HAL_DMA_Init+0x1e8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00e      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a24      	ldr	r2, [pc, #144]	; (8006130 <HAL_DMA_Init+0x1ec>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d009      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a22      	ldr	r2, [pc, #136]	; (8006134 <HAL_DMA_Init+0x1f0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <HAL_DMA_Init+0x174>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a21      	ldr	r2, [pc, #132]	; (8006138 <HAL_DMA_Init+0x1f4>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d108      	bne.n	80060ca <HAL_DMA_Init+0x186>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0201 	bic.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	e007      	b.n	80060da <HAL_DMA_Init+0x196>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0201 	bic.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060da:	e02f      	b.n	800613c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80060dc:	f7ff fde6 	bl	8005cac <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b05      	cmp	r3, #5
 80060e8:	d928      	bls.n	800613c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2203      	movs	r2, #3
 80060f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e246      	b.n	800658a <HAL_DMA_Init+0x646>
 80060fc:	40020010 	.word	0x40020010
 8006100:	40020028 	.word	0x40020028
 8006104:	40020040 	.word	0x40020040
 8006108:	40020058 	.word	0x40020058
 800610c:	40020070 	.word	0x40020070
 8006110:	40020088 	.word	0x40020088
 8006114:	400200a0 	.word	0x400200a0
 8006118:	400200b8 	.word	0x400200b8
 800611c:	40020410 	.word	0x40020410
 8006120:	40020428 	.word	0x40020428
 8006124:	40020440 	.word	0x40020440
 8006128:	40020458 	.word	0x40020458
 800612c:	40020470 	.word	0x40020470
 8006130:	40020488 	.word	0x40020488
 8006134:	400204a0 	.word	0x400204a0
 8006138:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1c8      	bne.n	80060dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4b83      	ldr	r3, [pc, #524]	; (8006364 <HAL_DMA_Init+0x420>)
 8006156:	4013      	ands	r3, r2
 8006158:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006162:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800616e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	2b04      	cmp	r3, #4
 800618e:	d107      	bne.n	80061a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	4313      	orrs	r3, r2
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80061a0:	4b71      	ldr	r3, [pc, #452]	; (8006368 <HAL_DMA_Init+0x424>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b71      	ldr	r3, [pc, #452]	; (800636c <HAL_DMA_Init+0x428>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ac:	d328      	bcc.n	8006200 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b28      	cmp	r3, #40	; 0x28
 80061b4:	d903      	bls.n	80061be <HAL_DMA_Init+0x27a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b2e      	cmp	r3, #46	; 0x2e
 80061bc:	d917      	bls.n	80061ee <HAL_DMA_Init+0x2aa>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2b3e      	cmp	r3, #62	; 0x3e
 80061c4:	d903      	bls.n	80061ce <HAL_DMA_Init+0x28a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b42      	cmp	r3, #66	; 0x42
 80061cc:	d90f      	bls.n	80061ee <HAL_DMA_Init+0x2aa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2b46      	cmp	r3, #70	; 0x46
 80061d4:	d903      	bls.n	80061de <HAL_DMA_Init+0x29a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b48      	cmp	r3, #72	; 0x48
 80061dc:	d907      	bls.n	80061ee <HAL_DMA_Init+0x2aa>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b4e      	cmp	r3, #78	; 0x4e
 80061e4:	d905      	bls.n	80061f2 <HAL_DMA_Init+0x2ae>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	2b52      	cmp	r3, #82	; 0x52
 80061ec:	d801      	bhi.n	80061f2 <HAL_DMA_Init+0x2ae>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <HAL_DMA_Init+0x2b0>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061fe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f023 0307 	bic.w	r3, r3, #7
 8006216:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2b04      	cmp	r3, #4
 8006228:	d117      	bne.n	800625a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f002 fb4b 	bl	80088d8 <DMA_CheckFifoParam>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2240      	movs	r2, #64	; 0x40
 800624c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e197      	b.n	800658a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f002 fa86 	bl	8008774 <DMA_CalcBaseAndBitshift>
 8006268:	4603      	mov	r3, r0
 800626a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	223f      	movs	r2, #63	; 0x3f
 8006276:	409a      	lsls	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	609a      	str	r2, [r3, #8]
 800627c:	e0cd      	b.n	800641a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a3b      	ldr	r2, [pc, #236]	; (8006370 <HAL_DMA_Init+0x42c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_DMA_Init+0x38a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a39      	ldr	r2, [pc, #228]	; (8006374 <HAL_DMA_Init+0x430>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01d      	beq.n	80062ce <HAL_DMA_Init+0x38a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a38      	ldr	r2, [pc, #224]	; (8006378 <HAL_DMA_Init+0x434>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_DMA_Init+0x38a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a36      	ldr	r2, [pc, #216]	; (800637c <HAL_DMA_Init+0x438>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_DMA_Init+0x38a>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a35      	ldr	r2, [pc, #212]	; (8006380 <HAL_DMA_Init+0x43c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_DMA_Init+0x38a>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a33      	ldr	r2, [pc, #204]	; (8006384 <HAL_DMA_Init+0x440>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_DMA_Init+0x38a>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a32      	ldr	r2, [pc, #200]	; (8006388 <HAL_DMA_Init+0x444>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_DMA_Init+0x38a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a30      	ldr	r2, [pc, #192]	; (800638c <HAL_DMA_Init+0x448>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d101      	bne.n	80062d2 <HAL_DMA_Init+0x38e>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <HAL_DMA_Init+0x390>
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8097 	beq.w	8006408 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a24      	ldr	r2, [pc, #144]	; (8006370 <HAL_DMA_Init+0x42c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d021      	beq.n	8006328 <HAL_DMA_Init+0x3e4>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a22      	ldr	r2, [pc, #136]	; (8006374 <HAL_DMA_Init+0x430>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01c      	beq.n	8006328 <HAL_DMA_Init+0x3e4>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a21      	ldr	r2, [pc, #132]	; (8006378 <HAL_DMA_Init+0x434>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d017      	beq.n	8006328 <HAL_DMA_Init+0x3e4>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1f      	ldr	r2, [pc, #124]	; (800637c <HAL_DMA_Init+0x438>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d012      	beq.n	8006328 <HAL_DMA_Init+0x3e4>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1e      	ldr	r2, [pc, #120]	; (8006380 <HAL_DMA_Init+0x43c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00d      	beq.n	8006328 <HAL_DMA_Init+0x3e4>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1c      	ldr	r2, [pc, #112]	; (8006384 <HAL_DMA_Init+0x440>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d008      	beq.n	8006328 <HAL_DMA_Init+0x3e4>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a1b      	ldr	r2, [pc, #108]	; (8006388 <HAL_DMA_Init+0x444>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d003      	beq.n	8006328 <HAL_DMA_Init+0x3e4>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a19      	ldr	r2, [pc, #100]	; (800638c <HAL_DMA_Init+0x448>)
 8006326:	4293      	cmp	r3, r2
 8006328:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2202      	movs	r2, #2
 8006336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4b12      	ldr	r3, [pc, #72]	; (8006390 <HAL_DMA_Init+0x44c>)
 8006346:	4013      	ands	r3, r2
 8006348:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d020      	beq.n	8006394 <HAL_DMA_Init+0x450>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	d102      	bne.n	8006360 <HAL_DMA_Init+0x41c>
 800635a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800635e:	e01a      	b.n	8006396 <HAL_DMA_Init+0x452>
 8006360:	2300      	movs	r3, #0
 8006362:	e018      	b.n	8006396 <HAL_DMA_Init+0x452>
 8006364:	fe10803f 	.word	0xfe10803f
 8006368:	5c001000 	.word	0x5c001000
 800636c:	ffff0000 	.word	0xffff0000
 8006370:	58025408 	.word	0x58025408
 8006374:	5802541c 	.word	0x5802541c
 8006378:	58025430 	.word	0x58025430
 800637c:	58025444 	.word	0x58025444
 8006380:	58025458 	.word	0x58025458
 8006384:	5802546c 	.word	0x5802546c
 8006388:	58025480 	.word	0x58025480
 800638c:	58025494 	.word	0x58025494
 8006390:	fffe000f 	.word	0xfffe000f
 8006394:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	68d2      	ldr	r2, [r2, #12]
 800639a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800639c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80063a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80063ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80063b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80063bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80063c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	4b6e      	ldr	r3, [pc, #440]	; (8006594 <HAL_DMA_Init+0x650>)
 80063dc:	4413      	add	r3, r2
 80063de:	4a6e      	ldr	r2, [pc, #440]	; (8006598 <HAL_DMA_Init+0x654>)
 80063e0:	fba2 2303 	umull	r2, r3, r2, r3
 80063e4:	091b      	lsrs	r3, r3, #4
 80063e6:	009a      	lsls	r2, r3, #2
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f002 f9c1 	bl	8008774 <DMA_CalcBaseAndBitshift>
 80063f2:	4603      	mov	r3, r0
 80063f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2201      	movs	r2, #1
 8006400:	409a      	lsls	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	e008      	b.n	800641a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2240      	movs	r2, #64	; 0x40
 800640c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2203      	movs	r2, #3
 8006412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e0b7      	b.n	800658a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a5f      	ldr	r2, [pc, #380]	; (800659c <HAL_DMA_Init+0x658>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d072      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a5d      	ldr	r2, [pc, #372]	; (80065a0 <HAL_DMA_Init+0x65c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d06d      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a5c      	ldr	r2, [pc, #368]	; (80065a4 <HAL_DMA_Init+0x660>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d068      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a5a      	ldr	r2, [pc, #360]	; (80065a8 <HAL_DMA_Init+0x664>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d063      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a59      	ldr	r2, [pc, #356]	; (80065ac <HAL_DMA_Init+0x668>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d05e      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a57      	ldr	r2, [pc, #348]	; (80065b0 <HAL_DMA_Init+0x66c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d059      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a56      	ldr	r2, [pc, #344]	; (80065b4 <HAL_DMA_Init+0x670>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d054      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a54      	ldr	r2, [pc, #336]	; (80065b8 <HAL_DMA_Init+0x674>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d04f      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a53      	ldr	r2, [pc, #332]	; (80065bc <HAL_DMA_Init+0x678>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d04a      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a51      	ldr	r2, [pc, #324]	; (80065c0 <HAL_DMA_Init+0x67c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d045      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a50      	ldr	r2, [pc, #320]	; (80065c4 <HAL_DMA_Init+0x680>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d040      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a4e      	ldr	r2, [pc, #312]	; (80065c8 <HAL_DMA_Init+0x684>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d03b      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a4d      	ldr	r2, [pc, #308]	; (80065cc <HAL_DMA_Init+0x688>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d036      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a4b      	ldr	r2, [pc, #300]	; (80065d0 <HAL_DMA_Init+0x68c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d031      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a4a      	ldr	r2, [pc, #296]	; (80065d4 <HAL_DMA_Init+0x690>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d02c      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a48      	ldr	r2, [pc, #288]	; (80065d8 <HAL_DMA_Init+0x694>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d027      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a47      	ldr	r2, [pc, #284]	; (80065dc <HAL_DMA_Init+0x698>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d022      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a45      	ldr	r2, [pc, #276]	; (80065e0 <HAL_DMA_Init+0x69c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01d      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a44      	ldr	r2, [pc, #272]	; (80065e4 <HAL_DMA_Init+0x6a0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d018      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a42      	ldr	r2, [pc, #264]	; (80065e8 <HAL_DMA_Init+0x6a4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a41      	ldr	r2, [pc, #260]	; (80065ec <HAL_DMA_Init+0x6a8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a3f      	ldr	r2, [pc, #252]	; (80065f0 <HAL_DMA_Init+0x6ac>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a3e      	ldr	r2, [pc, #248]	; (80065f4 <HAL_DMA_Init+0x6b0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_DMA_Init+0x5c6>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a3c      	ldr	r2, [pc, #240]	; (80065f8 <HAL_DMA_Init+0x6b4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d101      	bne.n	800650e <HAL_DMA_Init+0x5ca>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <HAL_DMA_Init+0x5cc>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d032      	beq.n	800657a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f002 fa5b 	bl	80089d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b80      	cmp	r3, #128	; 0x80
 8006520:	d102      	bne.n	8006528 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006530:	b2d2      	uxtb	r2, r2
 8006532:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800653c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d010      	beq.n	8006568 <HAL_DMA_Init+0x624>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b08      	cmp	r3, #8
 800654c:	d80c      	bhi.n	8006568 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f002 fad8 	bl	8008b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	e008      	b.n	800657a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	a7fdabf8 	.word	0xa7fdabf8
 8006598:	cccccccd 	.word	0xcccccccd
 800659c:	40020010 	.word	0x40020010
 80065a0:	40020028 	.word	0x40020028
 80065a4:	40020040 	.word	0x40020040
 80065a8:	40020058 	.word	0x40020058
 80065ac:	40020070 	.word	0x40020070
 80065b0:	40020088 	.word	0x40020088
 80065b4:	400200a0 	.word	0x400200a0
 80065b8:	400200b8 	.word	0x400200b8
 80065bc:	40020410 	.word	0x40020410
 80065c0:	40020428 	.word	0x40020428
 80065c4:	40020440 	.word	0x40020440
 80065c8:	40020458 	.word	0x40020458
 80065cc:	40020470 	.word	0x40020470
 80065d0:	40020488 	.word	0x40020488
 80065d4:	400204a0 	.word	0x400204a0
 80065d8:	400204b8 	.word	0x400204b8
 80065dc:	58025408 	.word	0x58025408
 80065e0:	5802541c 	.word	0x5802541c
 80065e4:	58025430 	.word	0x58025430
 80065e8:	58025444 	.word	0x58025444
 80065ec:	58025458 	.word	0x58025458
 80065f0:	5802546c 	.word	0x5802546c
 80065f4:	58025480 	.word	0x58025480
 80065f8:	58025494 	.word	0x58025494

080065fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e226      	b.n	8006a66 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_DMA_Start_IT+0x2a>
 8006622:	2302      	movs	r3, #2
 8006624:	e21f      	b.n	8006a66 <HAL_DMA_Start_IT+0x46a>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b01      	cmp	r3, #1
 8006638:	f040 820a 	bne.w	8006a50 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a68      	ldr	r2, [pc, #416]	; (80067f0 <HAL_DMA_Start_IT+0x1f4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d04a      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a66      	ldr	r2, [pc, #408]	; (80067f4 <HAL_DMA_Start_IT+0x1f8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d045      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a65      	ldr	r2, [pc, #404]	; (80067f8 <HAL_DMA_Start_IT+0x1fc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d040      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a63      	ldr	r2, [pc, #396]	; (80067fc <HAL_DMA_Start_IT+0x200>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d03b      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a62      	ldr	r2, [pc, #392]	; (8006800 <HAL_DMA_Start_IT+0x204>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d036      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a60      	ldr	r2, [pc, #384]	; (8006804 <HAL_DMA_Start_IT+0x208>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d031      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a5f      	ldr	r2, [pc, #380]	; (8006808 <HAL_DMA_Start_IT+0x20c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d02c      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a5d      	ldr	r2, [pc, #372]	; (800680c <HAL_DMA_Start_IT+0x210>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d027      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a5c      	ldr	r2, [pc, #368]	; (8006810 <HAL_DMA_Start_IT+0x214>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d022      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a5a      	ldr	r2, [pc, #360]	; (8006814 <HAL_DMA_Start_IT+0x218>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01d      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a59      	ldr	r2, [pc, #356]	; (8006818 <HAL_DMA_Start_IT+0x21c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d018      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a57      	ldr	r2, [pc, #348]	; (800681c <HAL_DMA_Start_IT+0x220>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a56      	ldr	r2, [pc, #344]	; (8006820 <HAL_DMA_Start_IT+0x224>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00e      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a54      	ldr	r2, [pc, #336]	; (8006824 <HAL_DMA_Start_IT+0x228>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d009      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a53      	ldr	r2, [pc, #332]	; (8006828 <HAL_DMA_Start_IT+0x22c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d004      	beq.n	80066ea <HAL_DMA_Start_IT+0xee>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a51      	ldr	r2, [pc, #324]	; (800682c <HAL_DMA_Start_IT+0x230>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d108      	bne.n	80066fc <HAL_DMA_Start_IT+0x100>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f022 0201 	bic.w	r2, r2, #1
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e007      	b.n	800670c <HAL_DMA_Start_IT+0x110>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0201 	bic.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	68b9      	ldr	r1, [r7, #8]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f001 fe82 	bl	800841c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a34      	ldr	r2, [pc, #208]	; (80067f0 <HAL_DMA_Start_IT+0x1f4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d04a      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a33      	ldr	r2, [pc, #204]	; (80067f4 <HAL_DMA_Start_IT+0x1f8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d045      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a31      	ldr	r2, [pc, #196]	; (80067f8 <HAL_DMA_Start_IT+0x1fc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d040      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a30      	ldr	r2, [pc, #192]	; (80067fc <HAL_DMA_Start_IT+0x200>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d03b      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a2e      	ldr	r2, [pc, #184]	; (8006800 <HAL_DMA_Start_IT+0x204>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d036      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a2d      	ldr	r2, [pc, #180]	; (8006804 <HAL_DMA_Start_IT+0x208>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d031      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a2b      	ldr	r2, [pc, #172]	; (8006808 <HAL_DMA_Start_IT+0x20c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d02c      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a2a      	ldr	r2, [pc, #168]	; (800680c <HAL_DMA_Start_IT+0x210>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d027      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a28      	ldr	r2, [pc, #160]	; (8006810 <HAL_DMA_Start_IT+0x214>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d022      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a27      	ldr	r2, [pc, #156]	; (8006814 <HAL_DMA_Start_IT+0x218>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d01d      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a25      	ldr	r2, [pc, #148]	; (8006818 <HAL_DMA_Start_IT+0x21c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d018      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a24      	ldr	r2, [pc, #144]	; (800681c <HAL_DMA_Start_IT+0x220>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d013      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a22      	ldr	r2, [pc, #136]	; (8006820 <HAL_DMA_Start_IT+0x224>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00e      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a21      	ldr	r2, [pc, #132]	; (8006824 <HAL_DMA_Start_IT+0x228>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d009      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <HAL_DMA_Start_IT+0x22c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d004      	beq.n	80067b8 <HAL_DMA_Start_IT+0x1bc>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1e      	ldr	r2, [pc, #120]	; (800682c <HAL_DMA_Start_IT+0x230>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d101      	bne.n	80067bc <HAL_DMA_Start_IT+0x1c0>
 80067b8:	2301      	movs	r3, #1
 80067ba:	e000      	b.n	80067be <HAL_DMA_Start_IT+0x1c2>
 80067bc:	2300      	movs	r3, #0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d036      	beq.n	8006830 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f023 021e 	bic.w	r2, r3, #30
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0216 	orr.w	r2, r2, #22
 80067d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d03e      	beq.n	800685c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f042 0208 	orr.w	r2, r2, #8
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e035      	b.n	800685c <HAL_DMA_Start_IT+0x260>
 80067f0:	40020010 	.word	0x40020010
 80067f4:	40020028 	.word	0x40020028
 80067f8:	40020040 	.word	0x40020040
 80067fc:	40020058 	.word	0x40020058
 8006800:	40020070 	.word	0x40020070
 8006804:	40020088 	.word	0x40020088
 8006808:	400200a0 	.word	0x400200a0
 800680c:	400200b8 	.word	0x400200b8
 8006810:	40020410 	.word	0x40020410
 8006814:	40020428 	.word	0x40020428
 8006818:	40020440 	.word	0x40020440
 800681c:	40020458 	.word	0x40020458
 8006820:	40020470 	.word	0x40020470
 8006824:	40020488 	.word	0x40020488
 8006828:	400204a0 	.word	0x400204a0
 800682c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 020e 	bic.w	r2, r3, #14
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 020a 	orr.w	r2, r2, #10
 8006842:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0204 	orr.w	r2, r2, #4
 800685a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a83      	ldr	r2, [pc, #524]	; (8006a70 <HAL_DMA_Start_IT+0x474>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d072      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a82      	ldr	r2, [pc, #520]	; (8006a74 <HAL_DMA_Start_IT+0x478>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d06d      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a80      	ldr	r2, [pc, #512]	; (8006a78 <HAL_DMA_Start_IT+0x47c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d068      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a7f      	ldr	r2, [pc, #508]	; (8006a7c <HAL_DMA_Start_IT+0x480>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d063      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a7d      	ldr	r2, [pc, #500]	; (8006a80 <HAL_DMA_Start_IT+0x484>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d05e      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a7c      	ldr	r2, [pc, #496]	; (8006a84 <HAL_DMA_Start_IT+0x488>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d059      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a7a      	ldr	r2, [pc, #488]	; (8006a88 <HAL_DMA_Start_IT+0x48c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d054      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a79      	ldr	r2, [pc, #484]	; (8006a8c <HAL_DMA_Start_IT+0x490>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d04f      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a77      	ldr	r2, [pc, #476]	; (8006a90 <HAL_DMA_Start_IT+0x494>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d04a      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a76      	ldr	r2, [pc, #472]	; (8006a94 <HAL_DMA_Start_IT+0x498>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d045      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a74      	ldr	r2, [pc, #464]	; (8006a98 <HAL_DMA_Start_IT+0x49c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d040      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a73      	ldr	r2, [pc, #460]	; (8006a9c <HAL_DMA_Start_IT+0x4a0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d03b      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a71      	ldr	r2, [pc, #452]	; (8006aa0 <HAL_DMA_Start_IT+0x4a4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d036      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a70      	ldr	r2, [pc, #448]	; (8006aa4 <HAL_DMA_Start_IT+0x4a8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d031      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a6e      	ldr	r2, [pc, #440]	; (8006aa8 <HAL_DMA_Start_IT+0x4ac>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d02c      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a6d      	ldr	r2, [pc, #436]	; (8006aac <HAL_DMA_Start_IT+0x4b0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d027      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a6b      	ldr	r2, [pc, #428]	; (8006ab0 <HAL_DMA_Start_IT+0x4b4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d022      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a6a      	ldr	r2, [pc, #424]	; (8006ab4 <HAL_DMA_Start_IT+0x4b8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d01d      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a68      	ldr	r2, [pc, #416]	; (8006ab8 <HAL_DMA_Start_IT+0x4bc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d018      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a67      	ldr	r2, [pc, #412]	; (8006abc <HAL_DMA_Start_IT+0x4c0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d013      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a65      	ldr	r2, [pc, #404]	; (8006ac0 <HAL_DMA_Start_IT+0x4c4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00e      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a64      	ldr	r2, [pc, #400]	; (8006ac4 <HAL_DMA_Start_IT+0x4c8>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d009      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a62      	ldr	r2, [pc, #392]	; (8006ac8 <HAL_DMA_Start_IT+0x4cc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <HAL_DMA_Start_IT+0x350>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a61      	ldr	r2, [pc, #388]	; (8006acc <HAL_DMA_Start_IT+0x4d0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d101      	bne.n	8006950 <HAL_DMA_Start_IT+0x354>
 800694c:	2301      	movs	r3, #1
 800694e:	e000      	b.n	8006952 <HAL_DMA_Start_IT+0x356>
 8006950:	2300      	movs	r3, #0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01a      	beq.n	800698c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d007      	beq.n	8006974 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006972:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006978:	2b00      	cmp	r3, #0
 800697a:	d007      	beq.n	800698c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006986:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800698a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a37      	ldr	r2, [pc, #220]	; (8006a70 <HAL_DMA_Start_IT+0x474>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d04a      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a36      	ldr	r2, [pc, #216]	; (8006a74 <HAL_DMA_Start_IT+0x478>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d045      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a34      	ldr	r2, [pc, #208]	; (8006a78 <HAL_DMA_Start_IT+0x47c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d040      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a33      	ldr	r2, [pc, #204]	; (8006a7c <HAL_DMA_Start_IT+0x480>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d03b      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a31      	ldr	r2, [pc, #196]	; (8006a80 <HAL_DMA_Start_IT+0x484>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d036      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a30      	ldr	r2, [pc, #192]	; (8006a84 <HAL_DMA_Start_IT+0x488>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d031      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a2e      	ldr	r2, [pc, #184]	; (8006a88 <HAL_DMA_Start_IT+0x48c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d02c      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a2d      	ldr	r2, [pc, #180]	; (8006a8c <HAL_DMA_Start_IT+0x490>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d027      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a2b      	ldr	r2, [pc, #172]	; (8006a90 <HAL_DMA_Start_IT+0x494>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d022      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a2a      	ldr	r2, [pc, #168]	; (8006a94 <HAL_DMA_Start_IT+0x498>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d01d      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a28      	ldr	r2, [pc, #160]	; (8006a98 <HAL_DMA_Start_IT+0x49c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d018      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a27      	ldr	r2, [pc, #156]	; (8006a9c <HAL_DMA_Start_IT+0x4a0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d013      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a25      	ldr	r2, [pc, #148]	; (8006aa0 <HAL_DMA_Start_IT+0x4a4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00e      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a24      	ldr	r2, [pc, #144]	; (8006aa4 <HAL_DMA_Start_IT+0x4a8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d009      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a22      	ldr	r2, [pc, #136]	; (8006aa8 <HAL_DMA_Start_IT+0x4ac>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_DMA_Start_IT+0x430>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a21      	ldr	r2, [pc, #132]	; (8006aac <HAL_DMA_Start_IT+0x4b0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d108      	bne.n	8006a3e <HAL_DMA_Start_IT+0x442>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	e012      	b.n	8006a64 <HAL_DMA_Start_IT+0x468>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0201 	orr.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e009      	b.n	8006a64 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40020010 	.word	0x40020010
 8006a74:	40020028 	.word	0x40020028
 8006a78:	40020040 	.word	0x40020040
 8006a7c:	40020058 	.word	0x40020058
 8006a80:	40020070 	.word	0x40020070
 8006a84:	40020088 	.word	0x40020088
 8006a88:	400200a0 	.word	0x400200a0
 8006a8c:	400200b8 	.word	0x400200b8
 8006a90:	40020410 	.word	0x40020410
 8006a94:	40020428 	.word	0x40020428
 8006a98:	40020440 	.word	0x40020440
 8006a9c:	40020458 	.word	0x40020458
 8006aa0:	40020470 	.word	0x40020470
 8006aa4:	40020488 	.word	0x40020488
 8006aa8:	400204a0 	.word	0x400204a0
 8006aac:	400204b8 	.word	0x400204b8
 8006ab0:	58025408 	.word	0x58025408
 8006ab4:	5802541c 	.word	0x5802541c
 8006ab8:	58025430 	.word	0x58025430
 8006abc:	58025444 	.word	0x58025444
 8006ac0:	58025458 	.word	0x58025458
 8006ac4:	5802546c 	.word	0x5802546c
 8006ac8:	58025480 	.word	0x58025480
 8006acc:	58025494 	.word	0x58025494

08006ad0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006ad8:	f7ff f8e8 	bl	8005cac <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e2dc      	b.n	80070a2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d008      	beq.n	8006b06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2280      	movs	r2, #128	; 0x80
 8006af8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e2cd      	b.n	80070a2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a76      	ldr	r2, [pc, #472]	; (8006ce4 <HAL_DMA_Abort+0x214>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d04a      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a74      	ldr	r2, [pc, #464]	; (8006ce8 <HAL_DMA_Abort+0x218>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d045      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a73      	ldr	r2, [pc, #460]	; (8006cec <HAL_DMA_Abort+0x21c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d040      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a71      	ldr	r2, [pc, #452]	; (8006cf0 <HAL_DMA_Abort+0x220>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d03b      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a70      	ldr	r2, [pc, #448]	; (8006cf4 <HAL_DMA_Abort+0x224>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d036      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a6e      	ldr	r2, [pc, #440]	; (8006cf8 <HAL_DMA_Abort+0x228>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d031      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a6d      	ldr	r2, [pc, #436]	; (8006cfc <HAL_DMA_Abort+0x22c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d02c      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a6b      	ldr	r2, [pc, #428]	; (8006d00 <HAL_DMA_Abort+0x230>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d027      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a6a      	ldr	r2, [pc, #424]	; (8006d04 <HAL_DMA_Abort+0x234>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d022      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a68      	ldr	r2, [pc, #416]	; (8006d08 <HAL_DMA_Abort+0x238>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01d      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a67      	ldr	r2, [pc, #412]	; (8006d0c <HAL_DMA_Abort+0x23c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d018      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a65      	ldr	r2, [pc, #404]	; (8006d10 <HAL_DMA_Abort+0x240>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a64      	ldr	r2, [pc, #400]	; (8006d14 <HAL_DMA_Abort+0x244>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00e      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a62      	ldr	r2, [pc, #392]	; (8006d18 <HAL_DMA_Abort+0x248>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d009      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a61      	ldr	r2, [pc, #388]	; (8006d1c <HAL_DMA_Abort+0x24c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_DMA_Abort+0xd6>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a5f      	ldr	r2, [pc, #380]	; (8006d20 <HAL_DMA_Abort+0x250>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d101      	bne.n	8006baa <HAL_DMA_Abort+0xda>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <HAL_DMA_Abort+0xdc>
 8006baa:	2300      	movs	r3, #0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d013      	beq.n	8006bd8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 021e 	bic.w	r2, r2, #30
 8006bbe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	695a      	ldr	r2, [r3, #20]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	617b      	str	r3, [r7, #20]
 8006bd6:	e00a      	b.n	8006bee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 020e 	bic.w	r2, r2, #14
 8006be6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3c      	ldr	r2, [pc, #240]	; (8006ce4 <HAL_DMA_Abort+0x214>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d072      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a3a      	ldr	r2, [pc, #232]	; (8006ce8 <HAL_DMA_Abort+0x218>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d06d      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a39      	ldr	r2, [pc, #228]	; (8006cec <HAL_DMA_Abort+0x21c>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d068      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a37      	ldr	r2, [pc, #220]	; (8006cf0 <HAL_DMA_Abort+0x220>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d063      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a36      	ldr	r2, [pc, #216]	; (8006cf4 <HAL_DMA_Abort+0x224>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d05e      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a34      	ldr	r2, [pc, #208]	; (8006cf8 <HAL_DMA_Abort+0x228>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d059      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a33      	ldr	r2, [pc, #204]	; (8006cfc <HAL_DMA_Abort+0x22c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d054      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a31      	ldr	r2, [pc, #196]	; (8006d00 <HAL_DMA_Abort+0x230>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d04f      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a30      	ldr	r2, [pc, #192]	; (8006d04 <HAL_DMA_Abort+0x234>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d04a      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a2e      	ldr	r2, [pc, #184]	; (8006d08 <HAL_DMA_Abort+0x238>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d045      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2d      	ldr	r2, [pc, #180]	; (8006d0c <HAL_DMA_Abort+0x23c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d040      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2b      	ldr	r2, [pc, #172]	; (8006d10 <HAL_DMA_Abort+0x240>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d03b      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2a      	ldr	r2, [pc, #168]	; (8006d14 <HAL_DMA_Abort+0x244>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d036      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a28      	ldr	r2, [pc, #160]	; (8006d18 <HAL_DMA_Abort+0x248>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d031      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a27      	ldr	r2, [pc, #156]	; (8006d1c <HAL_DMA_Abort+0x24c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d02c      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a25      	ldr	r2, [pc, #148]	; (8006d20 <HAL_DMA_Abort+0x250>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d027      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a24      	ldr	r2, [pc, #144]	; (8006d24 <HAL_DMA_Abort+0x254>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d022      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a22      	ldr	r2, [pc, #136]	; (8006d28 <HAL_DMA_Abort+0x258>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01d      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a21      	ldr	r2, [pc, #132]	; (8006d2c <HAL_DMA_Abort+0x25c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d018      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <HAL_DMA_Abort+0x260>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1e      	ldr	r2, [pc, #120]	; (8006d34 <HAL_DMA_Abort+0x264>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00e      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a1c      	ldr	r2, [pc, #112]	; (8006d38 <HAL_DMA_Abort+0x268>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d009      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1b      	ldr	r2, [pc, #108]	; (8006d3c <HAL_DMA_Abort+0x26c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <HAL_DMA_Abort+0x20e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a19      	ldr	r2, [pc, #100]	; (8006d40 <HAL_DMA_Abort+0x270>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d132      	bne.n	8006d44 <HAL_DMA_Abort+0x274>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e031      	b.n	8006d46 <HAL_DMA_Abort+0x276>
 8006ce2:	bf00      	nop
 8006ce4:	40020010 	.word	0x40020010
 8006ce8:	40020028 	.word	0x40020028
 8006cec:	40020040 	.word	0x40020040
 8006cf0:	40020058 	.word	0x40020058
 8006cf4:	40020070 	.word	0x40020070
 8006cf8:	40020088 	.word	0x40020088
 8006cfc:	400200a0 	.word	0x400200a0
 8006d00:	400200b8 	.word	0x400200b8
 8006d04:	40020410 	.word	0x40020410
 8006d08:	40020428 	.word	0x40020428
 8006d0c:	40020440 	.word	0x40020440
 8006d10:	40020458 	.word	0x40020458
 8006d14:	40020470 	.word	0x40020470
 8006d18:	40020488 	.word	0x40020488
 8006d1c:	400204a0 	.word	0x400204a0
 8006d20:	400204b8 	.word	0x400204b8
 8006d24:	58025408 	.word	0x58025408
 8006d28:	5802541c 	.word	0x5802541c
 8006d2c:	58025430 	.word	0x58025430
 8006d30:	58025444 	.word	0x58025444
 8006d34:	58025458 	.word	0x58025458
 8006d38:	5802546c 	.word	0x5802546c
 8006d3c:	58025480 	.word	0x58025480
 8006d40:	58025494 	.word	0x58025494
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d007      	beq.n	8006d5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a6d      	ldr	r2, [pc, #436]	; (8006f14 <HAL_DMA_Abort+0x444>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d04a      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a6b      	ldr	r2, [pc, #428]	; (8006f18 <HAL_DMA_Abort+0x448>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d045      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a6a      	ldr	r2, [pc, #424]	; (8006f1c <HAL_DMA_Abort+0x44c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d040      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a68      	ldr	r2, [pc, #416]	; (8006f20 <HAL_DMA_Abort+0x450>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d03b      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a67      	ldr	r2, [pc, #412]	; (8006f24 <HAL_DMA_Abort+0x454>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d036      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a65      	ldr	r2, [pc, #404]	; (8006f28 <HAL_DMA_Abort+0x458>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d031      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a64      	ldr	r2, [pc, #400]	; (8006f2c <HAL_DMA_Abort+0x45c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d02c      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a62      	ldr	r2, [pc, #392]	; (8006f30 <HAL_DMA_Abort+0x460>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d027      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a61      	ldr	r2, [pc, #388]	; (8006f34 <HAL_DMA_Abort+0x464>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d022      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a5f      	ldr	r2, [pc, #380]	; (8006f38 <HAL_DMA_Abort+0x468>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01d      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a5e      	ldr	r2, [pc, #376]	; (8006f3c <HAL_DMA_Abort+0x46c>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d018      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a5c      	ldr	r2, [pc, #368]	; (8006f40 <HAL_DMA_Abort+0x470>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d013      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a5b      	ldr	r2, [pc, #364]	; (8006f44 <HAL_DMA_Abort+0x474>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a59      	ldr	r2, [pc, #356]	; (8006f48 <HAL_DMA_Abort+0x478>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d009      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a58      	ldr	r2, [pc, #352]	; (8006f4c <HAL_DMA_Abort+0x47c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_DMA_Abort+0x32a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a56      	ldr	r2, [pc, #344]	; (8006f50 <HAL_DMA_Abort+0x480>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d108      	bne.n	8006e0c <HAL_DMA_Abort+0x33c>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	e007      	b.n	8006e1c <HAL_DMA_Abort+0x34c>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e1c:	e013      	b.n	8006e46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e1e:	f7fe ff45 	bl	8005cac <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	2b05      	cmp	r3, #5
 8006e2a:	d90c      	bls.n	8006e46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2203      	movs	r2, #3
 8006e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e12d      	b.n	80070a2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e5      	bne.n	8006e1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2f      	ldr	r2, [pc, #188]	; (8006f14 <HAL_DMA_Abort+0x444>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d04a      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a2d      	ldr	r2, [pc, #180]	; (8006f18 <HAL_DMA_Abort+0x448>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d045      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a2c      	ldr	r2, [pc, #176]	; (8006f1c <HAL_DMA_Abort+0x44c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d040      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a2a      	ldr	r2, [pc, #168]	; (8006f20 <HAL_DMA_Abort+0x450>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d03b      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a29      	ldr	r2, [pc, #164]	; (8006f24 <HAL_DMA_Abort+0x454>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d036      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a27      	ldr	r2, [pc, #156]	; (8006f28 <HAL_DMA_Abort+0x458>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d031      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a26      	ldr	r2, [pc, #152]	; (8006f2c <HAL_DMA_Abort+0x45c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d02c      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a24      	ldr	r2, [pc, #144]	; (8006f30 <HAL_DMA_Abort+0x460>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d027      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a23      	ldr	r2, [pc, #140]	; (8006f34 <HAL_DMA_Abort+0x464>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d022      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a21      	ldr	r2, [pc, #132]	; (8006f38 <HAL_DMA_Abort+0x468>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01d      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a20      	ldr	r2, [pc, #128]	; (8006f3c <HAL_DMA_Abort+0x46c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d018      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a1e      	ldr	r2, [pc, #120]	; (8006f40 <HAL_DMA_Abort+0x470>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d013      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <HAL_DMA_Abort+0x474>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00e      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1b      	ldr	r2, [pc, #108]	; (8006f48 <HAL_DMA_Abort+0x478>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1a      	ldr	r2, [pc, #104]	; (8006f4c <HAL_DMA_Abort+0x47c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d004      	beq.n	8006ef2 <HAL_DMA_Abort+0x422>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a18      	ldr	r2, [pc, #96]	; (8006f50 <HAL_DMA_Abort+0x480>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d101      	bne.n	8006ef6 <HAL_DMA_Abort+0x426>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <HAL_DMA_Abort+0x428>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d02b      	beq.n	8006f54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f06:	f003 031f 	and.w	r3, r3, #31
 8006f0a:	223f      	movs	r2, #63	; 0x3f
 8006f0c:	409a      	lsls	r2, r3
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	609a      	str	r2, [r3, #8]
 8006f12:	e02a      	b.n	8006f6a <HAL_DMA_Abort+0x49a>
 8006f14:	40020010 	.word	0x40020010
 8006f18:	40020028 	.word	0x40020028
 8006f1c:	40020040 	.word	0x40020040
 8006f20:	40020058 	.word	0x40020058
 8006f24:	40020070 	.word	0x40020070
 8006f28:	40020088 	.word	0x40020088
 8006f2c:	400200a0 	.word	0x400200a0
 8006f30:	400200b8 	.word	0x400200b8
 8006f34:	40020410 	.word	0x40020410
 8006f38:	40020428 	.word	0x40020428
 8006f3c:	40020440 	.word	0x40020440
 8006f40:	40020458 	.word	0x40020458
 8006f44:	40020470 	.word	0x40020470
 8006f48:	40020488 	.word	0x40020488
 8006f4c:	400204a0 	.word	0x400204a0
 8006f50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	2201      	movs	r2, #1
 8006f64:	409a      	lsls	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a4f      	ldr	r2, [pc, #316]	; (80070ac <HAL_DMA_Abort+0x5dc>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d072      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a4d      	ldr	r2, [pc, #308]	; (80070b0 <HAL_DMA_Abort+0x5e0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d06d      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a4c      	ldr	r2, [pc, #304]	; (80070b4 <HAL_DMA_Abort+0x5e4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d068      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a4a      	ldr	r2, [pc, #296]	; (80070b8 <HAL_DMA_Abort+0x5e8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d063      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a49      	ldr	r2, [pc, #292]	; (80070bc <HAL_DMA_Abort+0x5ec>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d05e      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a47      	ldr	r2, [pc, #284]	; (80070c0 <HAL_DMA_Abort+0x5f0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d059      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <HAL_DMA_Abort+0x5f4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d054      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a44      	ldr	r2, [pc, #272]	; (80070c8 <HAL_DMA_Abort+0x5f8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d04f      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a43      	ldr	r2, [pc, #268]	; (80070cc <HAL_DMA_Abort+0x5fc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d04a      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a41      	ldr	r2, [pc, #260]	; (80070d0 <HAL_DMA_Abort+0x600>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d045      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a40      	ldr	r2, [pc, #256]	; (80070d4 <HAL_DMA_Abort+0x604>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d040      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a3e      	ldr	r2, [pc, #248]	; (80070d8 <HAL_DMA_Abort+0x608>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d03b      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a3d      	ldr	r2, [pc, #244]	; (80070dc <HAL_DMA_Abort+0x60c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d036      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a3b      	ldr	r2, [pc, #236]	; (80070e0 <HAL_DMA_Abort+0x610>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d031      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a3a      	ldr	r2, [pc, #232]	; (80070e4 <HAL_DMA_Abort+0x614>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d02c      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a38      	ldr	r2, [pc, #224]	; (80070e8 <HAL_DMA_Abort+0x618>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d027      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a37      	ldr	r2, [pc, #220]	; (80070ec <HAL_DMA_Abort+0x61c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d022      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a35      	ldr	r2, [pc, #212]	; (80070f0 <HAL_DMA_Abort+0x620>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d01d      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a34      	ldr	r2, [pc, #208]	; (80070f4 <HAL_DMA_Abort+0x624>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d018      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a32      	ldr	r2, [pc, #200]	; (80070f8 <HAL_DMA_Abort+0x628>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a31      	ldr	r2, [pc, #196]	; (80070fc <HAL_DMA_Abort+0x62c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a2f      	ldr	r2, [pc, #188]	; (8007100 <HAL_DMA_Abort+0x630>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a2e      	ldr	r2, [pc, #184]	; (8007104 <HAL_DMA_Abort+0x634>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_DMA_Abort+0x58a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2c      	ldr	r2, [pc, #176]	; (8007108 <HAL_DMA_Abort+0x638>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d101      	bne.n	800705e <HAL_DMA_Abort+0x58e>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <HAL_DMA_Abort+0x590>
 800705e:	2300      	movs	r3, #0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d015      	beq.n	8007090 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800706c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007084:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800708e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	40020010 	.word	0x40020010
 80070b0:	40020028 	.word	0x40020028
 80070b4:	40020040 	.word	0x40020040
 80070b8:	40020058 	.word	0x40020058
 80070bc:	40020070 	.word	0x40020070
 80070c0:	40020088 	.word	0x40020088
 80070c4:	400200a0 	.word	0x400200a0
 80070c8:	400200b8 	.word	0x400200b8
 80070cc:	40020410 	.word	0x40020410
 80070d0:	40020428 	.word	0x40020428
 80070d4:	40020440 	.word	0x40020440
 80070d8:	40020458 	.word	0x40020458
 80070dc:	40020470 	.word	0x40020470
 80070e0:	40020488 	.word	0x40020488
 80070e4:	400204a0 	.word	0x400204a0
 80070e8:	400204b8 	.word	0x400204b8
 80070ec:	58025408 	.word	0x58025408
 80070f0:	5802541c 	.word	0x5802541c
 80070f4:	58025430 	.word	0x58025430
 80070f8:	58025444 	.word	0x58025444
 80070fc:	58025458 	.word	0x58025458
 8007100:	5802546c 	.word	0x5802546c
 8007104:	58025480 	.word	0x58025480
 8007108:	58025494 	.word	0x58025494

0800710c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e205      	b.n	800752a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d004      	beq.n	8007134 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2280      	movs	r2, #128	; 0x80
 800712e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e1fa      	b.n	800752a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a8c      	ldr	r2, [pc, #560]	; (800736c <HAL_DMA_Abort_IT+0x260>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d04a      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a8b      	ldr	r2, [pc, #556]	; (8007370 <HAL_DMA_Abort_IT+0x264>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d045      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a89      	ldr	r2, [pc, #548]	; (8007374 <HAL_DMA_Abort_IT+0x268>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d040      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a88      	ldr	r2, [pc, #544]	; (8007378 <HAL_DMA_Abort_IT+0x26c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d03b      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a86      	ldr	r2, [pc, #536]	; (800737c <HAL_DMA_Abort_IT+0x270>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d036      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a85      	ldr	r2, [pc, #532]	; (8007380 <HAL_DMA_Abort_IT+0x274>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d031      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a83      	ldr	r2, [pc, #524]	; (8007384 <HAL_DMA_Abort_IT+0x278>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d02c      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a82      	ldr	r2, [pc, #520]	; (8007388 <HAL_DMA_Abort_IT+0x27c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d027      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a80      	ldr	r2, [pc, #512]	; (800738c <HAL_DMA_Abort_IT+0x280>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d022      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a7f      	ldr	r2, [pc, #508]	; (8007390 <HAL_DMA_Abort_IT+0x284>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d01d      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a7d      	ldr	r2, [pc, #500]	; (8007394 <HAL_DMA_Abort_IT+0x288>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d018      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a7c      	ldr	r2, [pc, #496]	; (8007398 <HAL_DMA_Abort_IT+0x28c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a7a      	ldr	r2, [pc, #488]	; (800739c <HAL_DMA_Abort_IT+0x290>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d00e      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a79      	ldr	r2, [pc, #484]	; (80073a0 <HAL_DMA_Abort_IT+0x294>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d009      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a77      	ldr	r2, [pc, #476]	; (80073a4 <HAL_DMA_Abort_IT+0x298>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d004      	beq.n	80071d4 <HAL_DMA_Abort_IT+0xc8>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a76      	ldr	r2, [pc, #472]	; (80073a8 <HAL_DMA_Abort_IT+0x29c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d101      	bne.n	80071d8 <HAL_DMA_Abort_IT+0xcc>
 80071d4:	2301      	movs	r3, #1
 80071d6:	e000      	b.n	80071da <HAL_DMA_Abort_IT+0xce>
 80071d8:	2300      	movs	r3, #0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d065      	beq.n	80072aa <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2204      	movs	r2, #4
 80071e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a60      	ldr	r2, [pc, #384]	; (800736c <HAL_DMA_Abort_IT+0x260>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d04a      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a5e      	ldr	r2, [pc, #376]	; (8007370 <HAL_DMA_Abort_IT+0x264>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d045      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a5d      	ldr	r2, [pc, #372]	; (8007374 <HAL_DMA_Abort_IT+0x268>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d040      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a5b      	ldr	r2, [pc, #364]	; (8007378 <HAL_DMA_Abort_IT+0x26c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d03b      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a5a      	ldr	r2, [pc, #360]	; (800737c <HAL_DMA_Abort_IT+0x270>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d036      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a58      	ldr	r2, [pc, #352]	; (8007380 <HAL_DMA_Abort_IT+0x274>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d031      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a57      	ldr	r2, [pc, #348]	; (8007384 <HAL_DMA_Abort_IT+0x278>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d02c      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a55      	ldr	r2, [pc, #340]	; (8007388 <HAL_DMA_Abort_IT+0x27c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d027      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a54      	ldr	r2, [pc, #336]	; (800738c <HAL_DMA_Abort_IT+0x280>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d022      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a52      	ldr	r2, [pc, #328]	; (8007390 <HAL_DMA_Abort_IT+0x284>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01d      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a51      	ldr	r2, [pc, #324]	; (8007394 <HAL_DMA_Abort_IT+0x288>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d018      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a4f      	ldr	r2, [pc, #316]	; (8007398 <HAL_DMA_Abort_IT+0x28c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d013      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a4e      	ldr	r2, [pc, #312]	; (800739c <HAL_DMA_Abort_IT+0x290>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00e      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a4c      	ldr	r2, [pc, #304]	; (80073a0 <HAL_DMA_Abort_IT+0x294>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d009      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a4b      	ldr	r2, [pc, #300]	; (80073a4 <HAL_DMA_Abort_IT+0x298>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d004      	beq.n	8007286 <HAL_DMA_Abort_IT+0x17a>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a49      	ldr	r2, [pc, #292]	; (80073a8 <HAL_DMA_Abort_IT+0x29c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d108      	bne.n	8007298 <HAL_DMA_Abort_IT+0x18c>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	e147      	b.n	8007528 <HAL_DMA_Abort_IT+0x41c>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0201 	bic.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	e13e      	b.n	8007528 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 020e 	bic.w	r2, r2, #14
 80072b8:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a2b      	ldr	r2, [pc, #172]	; (800736c <HAL_DMA_Abort_IT+0x260>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d04a      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a29      	ldr	r2, [pc, #164]	; (8007370 <HAL_DMA_Abort_IT+0x264>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d045      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a28      	ldr	r2, [pc, #160]	; (8007374 <HAL_DMA_Abort_IT+0x268>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d040      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a26      	ldr	r2, [pc, #152]	; (8007378 <HAL_DMA_Abort_IT+0x26c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d03b      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a25      	ldr	r2, [pc, #148]	; (800737c <HAL_DMA_Abort_IT+0x270>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d036      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a23      	ldr	r2, [pc, #140]	; (8007380 <HAL_DMA_Abort_IT+0x274>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d031      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a22      	ldr	r2, [pc, #136]	; (8007384 <HAL_DMA_Abort_IT+0x278>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d02c      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a20      	ldr	r2, [pc, #128]	; (8007388 <HAL_DMA_Abort_IT+0x27c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d027      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a1f      	ldr	r2, [pc, #124]	; (800738c <HAL_DMA_Abort_IT+0x280>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d022      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a1d      	ldr	r2, [pc, #116]	; (8007390 <HAL_DMA_Abort_IT+0x284>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d01d      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a1c      	ldr	r2, [pc, #112]	; (8007394 <HAL_DMA_Abort_IT+0x288>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d018      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1a      	ldr	r2, [pc, #104]	; (8007398 <HAL_DMA_Abort_IT+0x28c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d013      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a19      	ldr	r2, [pc, #100]	; (800739c <HAL_DMA_Abort_IT+0x290>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00e      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a17      	ldr	r2, [pc, #92]	; (80073a0 <HAL_DMA_Abort_IT+0x294>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d009      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <HAL_DMA_Abort_IT+0x298>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_DMA_Abort_IT+0x24e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <HAL_DMA_Abort_IT+0x29c>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d128      	bne.n	80073ac <HAL_DMA_Abort_IT+0x2a0>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	e027      	b.n	80073bc <HAL_DMA_Abort_IT+0x2b0>
 800736c:	40020010 	.word	0x40020010
 8007370:	40020028 	.word	0x40020028
 8007374:	40020040 	.word	0x40020040
 8007378:	40020058 	.word	0x40020058
 800737c:	40020070 	.word	0x40020070
 8007380:	40020088 	.word	0x40020088
 8007384:	400200a0 	.word	0x400200a0
 8007388:	400200b8 	.word	0x400200b8
 800738c:	40020410 	.word	0x40020410
 8007390:	40020428 	.word	0x40020428
 8007394:	40020440 	.word	0x40020440
 8007398:	40020458 	.word	0x40020458
 800739c:	40020470 	.word	0x40020470
 80073a0:	40020488 	.word	0x40020488
 80073a4:	400204a0 	.word	0x400204a0
 80073a8:	400204b8 	.word	0x400204b8
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0201 	bic.w	r2, r2, #1
 80073ba:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a5c      	ldr	r2, [pc, #368]	; (8007534 <HAL_DMA_Abort_IT+0x428>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d072      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a5b      	ldr	r2, [pc, #364]	; (8007538 <HAL_DMA_Abort_IT+0x42c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d06d      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a59      	ldr	r2, [pc, #356]	; (800753c <HAL_DMA_Abort_IT+0x430>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d068      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a58      	ldr	r2, [pc, #352]	; (8007540 <HAL_DMA_Abort_IT+0x434>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d063      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a56      	ldr	r2, [pc, #344]	; (8007544 <HAL_DMA_Abort_IT+0x438>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d05e      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a55      	ldr	r2, [pc, #340]	; (8007548 <HAL_DMA_Abort_IT+0x43c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d059      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a53      	ldr	r2, [pc, #332]	; (800754c <HAL_DMA_Abort_IT+0x440>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d054      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a52      	ldr	r2, [pc, #328]	; (8007550 <HAL_DMA_Abort_IT+0x444>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d04f      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a50      	ldr	r2, [pc, #320]	; (8007554 <HAL_DMA_Abort_IT+0x448>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d04a      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a4f      	ldr	r2, [pc, #316]	; (8007558 <HAL_DMA_Abort_IT+0x44c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d045      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a4d      	ldr	r2, [pc, #308]	; (800755c <HAL_DMA_Abort_IT+0x450>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d040      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a4c      	ldr	r2, [pc, #304]	; (8007560 <HAL_DMA_Abort_IT+0x454>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d03b      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a4a      	ldr	r2, [pc, #296]	; (8007564 <HAL_DMA_Abort_IT+0x458>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d036      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a49      	ldr	r2, [pc, #292]	; (8007568 <HAL_DMA_Abort_IT+0x45c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d031      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a47      	ldr	r2, [pc, #284]	; (800756c <HAL_DMA_Abort_IT+0x460>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d02c      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a46      	ldr	r2, [pc, #280]	; (8007570 <HAL_DMA_Abort_IT+0x464>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d027      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a44      	ldr	r2, [pc, #272]	; (8007574 <HAL_DMA_Abort_IT+0x468>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d022      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a43      	ldr	r2, [pc, #268]	; (8007578 <HAL_DMA_Abort_IT+0x46c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d01d      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a41      	ldr	r2, [pc, #260]	; (800757c <HAL_DMA_Abort_IT+0x470>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d018      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a40      	ldr	r2, [pc, #256]	; (8007580 <HAL_DMA_Abort_IT+0x474>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d013      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3e      	ldr	r2, [pc, #248]	; (8007584 <HAL_DMA_Abort_IT+0x478>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00e      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a3d      	ldr	r2, [pc, #244]	; (8007588 <HAL_DMA_Abort_IT+0x47c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d009      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a3b      	ldr	r2, [pc, #236]	; (800758c <HAL_DMA_Abort_IT+0x480>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d004      	beq.n	80074ac <HAL_DMA_Abort_IT+0x3a0>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a3a      	ldr	r2, [pc, #232]	; (8007590 <HAL_DMA_Abort_IT+0x484>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d101      	bne.n	80074b0 <HAL_DMA_Abort_IT+0x3a4>
 80074ac:	2301      	movs	r3, #1
 80074ae:	e000      	b.n	80074b2 <HAL_DMA_Abort_IT+0x3a6>
 80074b0:	2300      	movs	r3, #0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d028      	beq.n	8007508 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074c4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ca:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d0:	f003 031f 	and.w	r3, r3, #31
 80074d4:	2201      	movs	r2, #1
 80074d6:	409a      	lsls	r2, r3
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80074e4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00c      	beq.n	8007508 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074fc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007506:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	40020010 	.word	0x40020010
 8007538:	40020028 	.word	0x40020028
 800753c:	40020040 	.word	0x40020040
 8007540:	40020058 	.word	0x40020058
 8007544:	40020070 	.word	0x40020070
 8007548:	40020088 	.word	0x40020088
 800754c:	400200a0 	.word	0x400200a0
 8007550:	400200b8 	.word	0x400200b8
 8007554:	40020410 	.word	0x40020410
 8007558:	40020428 	.word	0x40020428
 800755c:	40020440 	.word	0x40020440
 8007560:	40020458 	.word	0x40020458
 8007564:	40020470 	.word	0x40020470
 8007568:	40020488 	.word	0x40020488
 800756c:	400204a0 	.word	0x400204a0
 8007570:	400204b8 	.word	0x400204b8
 8007574:	58025408 	.word	0x58025408
 8007578:	5802541c 	.word	0x5802541c
 800757c:	58025430 	.word	0x58025430
 8007580:	58025444 	.word	0x58025444
 8007584:	58025458 	.word	0x58025458
 8007588:	5802546c 	.word	0x5802546c
 800758c:	58025480 	.word	0x58025480
 8007590:	58025494 	.word	0x58025494

08007594 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08a      	sub	sp, #40	; 0x28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80075a0:	4b67      	ldr	r3, [pc, #412]	; (8007740 <HAL_DMA_IRQHandler+0x1ac>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a67      	ldr	r2, [pc, #412]	; (8007744 <HAL_DMA_IRQHandler+0x1b0>)
 80075a6:	fba2 2303 	umull	r2, r3, r2, r3
 80075aa:	0a9b      	lsrs	r3, r3, #10
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a5f      	ldr	r2, [pc, #380]	; (8007748 <HAL_DMA_IRQHandler+0x1b4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d04a      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a5d      	ldr	r2, [pc, #372]	; (800774c <HAL_DMA_IRQHandler+0x1b8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d045      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a5c      	ldr	r2, [pc, #368]	; (8007750 <HAL_DMA_IRQHandler+0x1bc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d040      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a5a      	ldr	r2, [pc, #360]	; (8007754 <HAL_DMA_IRQHandler+0x1c0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d03b      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a59      	ldr	r2, [pc, #356]	; (8007758 <HAL_DMA_IRQHandler+0x1c4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d036      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a57      	ldr	r2, [pc, #348]	; (800775c <HAL_DMA_IRQHandler+0x1c8>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d031      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a56      	ldr	r2, [pc, #344]	; (8007760 <HAL_DMA_IRQHandler+0x1cc>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d02c      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a54      	ldr	r2, [pc, #336]	; (8007764 <HAL_DMA_IRQHandler+0x1d0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d027      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a53      	ldr	r2, [pc, #332]	; (8007768 <HAL_DMA_IRQHandler+0x1d4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d022      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a51      	ldr	r2, [pc, #324]	; (800776c <HAL_DMA_IRQHandler+0x1d8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d01d      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a50      	ldr	r2, [pc, #320]	; (8007770 <HAL_DMA_IRQHandler+0x1dc>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d018      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a4e      	ldr	r2, [pc, #312]	; (8007774 <HAL_DMA_IRQHandler+0x1e0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d013      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a4d      	ldr	r2, [pc, #308]	; (8007778 <HAL_DMA_IRQHandler+0x1e4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00e      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a4b      	ldr	r2, [pc, #300]	; (800777c <HAL_DMA_IRQHandler+0x1e8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d009      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a4a      	ldr	r2, [pc, #296]	; (8007780 <HAL_DMA_IRQHandler+0x1ec>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d004      	beq.n	8007666 <HAL_DMA_IRQHandler+0xd2>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a48      	ldr	r2, [pc, #288]	; (8007784 <HAL_DMA_IRQHandler+0x1f0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d101      	bne.n	800766a <HAL_DMA_IRQHandler+0xd6>
 8007666:	2301      	movs	r3, #1
 8007668:	e000      	b.n	800766c <HAL_DMA_IRQHandler+0xd8>
 800766a:	2300      	movs	r3, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 842b 	beq.w	8007ec8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007676:	f003 031f 	and.w	r3, r3, #31
 800767a:	2208      	movs	r2, #8
 800767c:	409a      	lsls	r2, r3
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	4013      	ands	r3, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 80a2 	beq.w	80077cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a2e      	ldr	r2, [pc, #184]	; (8007748 <HAL_DMA_IRQHandler+0x1b4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d04a      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a2d      	ldr	r2, [pc, #180]	; (800774c <HAL_DMA_IRQHandler+0x1b8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d045      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a2b      	ldr	r2, [pc, #172]	; (8007750 <HAL_DMA_IRQHandler+0x1bc>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d040      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a2a      	ldr	r2, [pc, #168]	; (8007754 <HAL_DMA_IRQHandler+0x1c0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d03b      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a28      	ldr	r2, [pc, #160]	; (8007758 <HAL_DMA_IRQHandler+0x1c4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d036      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a27      	ldr	r2, [pc, #156]	; (800775c <HAL_DMA_IRQHandler+0x1c8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d031      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a25      	ldr	r2, [pc, #148]	; (8007760 <HAL_DMA_IRQHandler+0x1cc>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d02c      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a24      	ldr	r2, [pc, #144]	; (8007764 <HAL_DMA_IRQHandler+0x1d0>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d027      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a22      	ldr	r2, [pc, #136]	; (8007768 <HAL_DMA_IRQHandler+0x1d4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d022      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a21      	ldr	r2, [pc, #132]	; (800776c <HAL_DMA_IRQHandler+0x1d8>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d01d      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <HAL_DMA_IRQHandler+0x1dc>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d018      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1e      	ldr	r2, [pc, #120]	; (8007774 <HAL_DMA_IRQHandler+0x1e0>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d013      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a1c      	ldr	r2, [pc, #112]	; (8007778 <HAL_DMA_IRQHandler+0x1e4>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00e      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a1b      	ldr	r2, [pc, #108]	; (800777c <HAL_DMA_IRQHandler+0x1e8>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d009      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a19      	ldr	r2, [pc, #100]	; (8007780 <HAL_DMA_IRQHandler+0x1ec>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d004      	beq.n	8007728 <HAL_DMA_IRQHandler+0x194>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a18      	ldr	r2, [pc, #96]	; (8007784 <HAL_DMA_IRQHandler+0x1f0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d12f      	bne.n	8007788 <HAL_DMA_IRQHandler+0x1f4>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b00      	cmp	r3, #0
 8007734:	bf14      	ite	ne
 8007736:	2301      	movne	r3, #1
 8007738:	2300      	moveq	r3, #0
 800773a:	b2db      	uxtb	r3, r3
 800773c:	e02e      	b.n	800779c <HAL_DMA_IRQHandler+0x208>
 800773e:	bf00      	nop
 8007740:	24000014 	.word	0x24000014
 8007744:	1b4e81b5 	.word	0x1b4e81b5
 8007748:	40020010 	.word	0x40020010
 800774c:	40020028 	.word	0x40020028
 8007750:	40020040 	.word	0x40020040
 8007754:	40020058 	.word	0x40020058
 8007758:	40020070 	.word	0x40020070
 800775c:	40020088 	.word	0x40020088
 8007760:	400200a0 	.word	0x400200a0
 8007764:	400200b8 	.word	0x400200b8
 8007768:	40020410 	.word	0x40020410
 800776c:	40020428 	.word	0x40020428
 8007770:	40020440 	.word	0x40020440
 8007774:	40020458 	.word	0x40020458
 8007778:	40020470 	.word	0x40020470
 800777c:	40020488 	.word	0x40020488
 8007780:	400204a0 	.word	0x400204a0
 8007784:	400204b8 	.word	0x400204b8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0308 	and.w	r3, r3, #8
 8007792:	2b00      	cmp	r3, #0
 8007794:	bf14      	ite	ne
 8007796:	2301      	movne	r3, #1
 8007798:	2300      	moveq	r3, #0
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d015      	beq.n	80077cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0204 	bic.w	r2, r2, #4
 80077ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b4:	f003 031f 	and.w	r3, r3, #31
 80077b8:	2208      	movs	r2, #8
 80077ba:	409a      	lsls	r2, r3
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c4:	f043 0201 	orr.w	r2, r3, #1
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d0:	f003 031f 	and.w	r3, r3, #31
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d06e      	beq.n	80078c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a69      	ldr	r2, [pc, #420]	; (800798c <HAL_DMA_IRQHandler+0x3f8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d04a      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a67      	ldr	r2, [pc, #412]	; (8007990 <HAL_DMA_IRQHandler+0x3fc>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d045      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a66      	ldr	r2, [pc, #408]	; (8007994 <HAL_DMA_IRQHandler+0x400>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d040      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a64      	ldr	r2, [pc, #400]	; (8007998 <HAL_DMA_IRQHandler+0x404>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d03b      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a63      	ldr	r2, [pc, #396]	; (800799c <HAL_DMA_IRQHandler+0x408>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d036      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a61      	ldr	r2, [pc, #388]	; (80079a0 <HAL_DMA_IRQHandler+0x40c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d031      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a60      	ldr	r2, [pc, #384]	; (80079a4 <HAL_DMA_IRQHandler+0x410>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d02c      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a5e      	ldr	r2, [pc, #376]	; (80079a8 <HAL_DMA_IRQHandler+0x414>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d027      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a5d      	ldr	r2, [pc, #372]	; (80079ac <HAL_DMA_IRQHandler+0x418>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d022      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a5b      	ldr	r2, [pc, #364]	; (80079b0 <HAL_DMA_IRQHandler+0x41c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d01d      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a5a      	ldr	r2, [pc, #360]	; (80079b4 <HAL_DMA_IRQHandler+0x420>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d018      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a58      	ldr	r2, [pc, #352]	; (80079b8 <HAL_DMA_IRQHandler+0x424>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d013      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a57      	ldr	r2, [pc, #348]	; (80079bc <HAL_DMA_IRQHandler+0x428>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00e      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a55      	ldr	r2, [pc, #340]	; (80079c0 <HAL_DMA_IRQHandler+0x42c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d009      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a54      	ldr	r2, [pc, #336]	; (80079c4 <HAL_DMA_IRQHandler+0x430>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d004      	beq.n	8007882 <HAL_DMA_IRQHandler+0x2ee>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a52      	ldr	r2, [pc, #328]	; (80079c8 <HAL_DMA_IRQHandler+0x434>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d10a      	bne.n	8007898 <HAL_DMA_IRQHandler+0x304>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788c:	2b00      	cmp	r3, #0
 800788e:	bf14      	ite	ne
 8007890:	2301      	movne	r3, #1
 8007892:	2300      	moveq	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	e003      	b.n	80078a0 <HAL_DMA_IRQHandler+0x30c>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2300      	movs	r3, #0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00d      	beq.n	80078c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2201      	movs	r2, #1
 80078ae:	409a      	lsls	r2, r3
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b8:	f043 0202 	orr.w	r2, r3, #2
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c4:	f003 031f 	and.w	r3, r3, #31
 80078c8:	2204      	movs	r2, #4
 80078ca:	409a      	lsls	r2, r3
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	4013      	ands	r3, r2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 808f 	beq.w	80079f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a2c      	ldr	r2, [pc, #176]	; (800798c <HAL_DMA_IRQHandler+0x3f8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d04a      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <HAL_DMA_IRQHandler+0x3fc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d045      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a29      	ldr	r2, [pc, #164]	; (8007994 <HAL_DMA_IRQHandler+0x400>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d040      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a27      	ldr	r2, [pc, #156]	; (8007998 <HAL_DMA_IRQHandler+0x404>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d03b      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a26      	ldr	r2, [pc, #152]	; (800799c <HAL_DMA_IRQHandler+0x408>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d036      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a24      	ldr	r2, [pc, #144]	; (80079a0 <HAL_DMA_IRQHandler+0x40c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d031      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a23      	ldr	r2, [pc, #140]	; (80079a4 <HAL_DMA_IRQHandler+0x410>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d02c      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a21      	ldr	r2, [pc, #132]	; (80079a8 <HAL_DMA_IRQHandler+0x414>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d027      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a20      	ldr	r2, [pc, #128]	; (80079ac <HAL_DMA_IRQHandler+0x418>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d022      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1e      	ldr	r2, [pc, #120]	; (80079b0 <HAL_DMA_IRQHandler+0x41c>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d01d      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1d      	ldr	r2, [pc, #116]	; (80079b4 <HAL_DMA_IRQHandler+0x420>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d018      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1b      	ldr	r2, [pc, #108]	; (80079b8 <HAL_DMA_IRQHandler+0x424>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d013      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1a      	ldr	r2, [pc, #104]	; (80079bc <HAL_DMA_IRQHandler+0x428>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00e      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a18      	ldr	r2, [pc, #96]	; (80079c0 <HAL_DMA_IRQHandler+0x42c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d009      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a17      	ldr	r2, [pc, #92]	; (80079c4 <HAL_DMA_IRQHandler+0x430>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d004      	beq.n	8007976 <HAL_DMA_IRQHandler+0x3e2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <HAL_DMA_IRQHandler+0x434>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d12a      	bne.n	80079cc <HAL_DMA_IRQHandler+0x438>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0302 	and.w	r3, r3, #2
 8007980:	2b00      	cmp	r3, #0
 8007982:	bf14      	ite	ne
 8007984:	2301      	movne	r3, #1
 8007986:	2300      	moveq	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	e023      	b.n	80079d4 <HAL_DMA_IRQHandler+0x440>
 800798c:	40020010 	.word	0x40020010
 8007990:	40020028 	.word	0x40020028
 8007994:	40020040 	.word	0x40020040
 8007998:	40020058 	.word	0x40020058
 800799c:	40020070 	.word	0x40020070
 80079a0:	40020088 	.word	0x40020088
 80079a4:	400200a0 	.word	0x400200a0
 80079a8:	400200b8 	.word	0x400200b8
 80079ac:	40020410 	.word	0x40020410
 80079b0:	40020428 	.word	0x40020428
 80079b4:	40020440 	.word	0x40020440
 80079b8:	40020458 	.word	0x40020458
 80079bc:	40020470 	.word	0x40020470
 80079c0:	40020488 	.word	0x40020488
 80079c4:	400204a0 	.word	0x400204a0
 80079c8:	400204b8 	.word	0x400204b8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2300      	movs	r3, #0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00d      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079dc:	f003 031f 	and.w	r3, r3, #31
 80079e0:	2204      	movs	r2, #4
 80079e2:	409a      	lsls	r2, r3
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ec:	f043 0204 	orr.w	r2, r3, #4
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f8:	f003 031f 	and.w	r3, r3, #31
 80079fc:	2210      	movs	r2, #16
 80079fe:	409a      	lsls	r2, r3
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 80a6 	beq.w	8007b56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a85      	ldr	r2, [pc, #532]	; (8007c24 <HAL_DMA_IRQHandler+0x690>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d04a      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a83      	ldr	r2, [pc, #524]	; (8007c28 <HAL_DMA_IRQHandler+0x694>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d045      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a82      	ldr	r2, [pc, #520]	; (8007c2c <HAL_DMA_IRQHandler+0x698>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d040      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a80      	ldr	r2, [pc, #512]	; (8007c30 <HAL_DMA_IRQHandler+0x69c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d03b      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a7f      	ldr	r2, [pc, #508]	; (8007c34 <HAL_DMA_IRQHandler+0x6a0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d036      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a7d      	ldr	r2, [pc, #500]	; (8007c38 <HAL_DMA_IRQHandler+0x6a4>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d031      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a7c      	ldr	r2, [pc, #496]	; (8007c3c <HAL_DMA_IRQHandler+0x6a8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d02c      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a7a      	ldr	r2, [pc, #488]	; (8007c40 <HAL_DMA_IRQHandler+0x6ac>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d027      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a79      	ldr	r2, [pc, #484]	; (8007c44 <HAL_DMA_IRQHandler+0x6b0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d022      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a77      	ldr	r2, [pc, #476]	; (8007c48 <HAL_DMA_IRQHandler+0x6b4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d01d      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a76      	ldr	r2, [pc, #472]	; (8007c4c <HAL_DMA_IRQHandler+0x6b8>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d018      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a74      	ldr	r2, [pc, #464]	; (8007c50 <HAL_DMA_IRQHandler+0x6bc>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d013      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a73      	ldr	r2, [pc, #460]	; (8007c54 <HAL_DMA_IRQHandler+0x6c0>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00e      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a71      	ldr	r2, [pc, #452]	; (8007c58 <HAL_DMA_IRQHandler+0x6c4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d009      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a70      	ldr	r2, [pc, #448]	; (8007c5c <HAL_DMA_IRQHandler+0x6c8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d004      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x516>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a6e      	ldr	r2, [pc, #440]	; (8007c60 <HAL_DMA_IRQHandler+0x6cc>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d10a      	bne.n	8007ac0 <HAL_DMA_IRQHandler+0x52c>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	bf14      	ite	ne
 8007ab8:	2301      	movne	r3, #1
 8007aba:	2300      	moveq	r3, #0
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	e009      	b.n	8007ad4 <HAL_DMA_IRQHandler+0x540>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0304 	and.w	r3, r3, #4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	bf14      	ite	ne
 8007ace:	2301      	movne	r3, #1
 8007ad0:	2300      	moveq	r3, #0
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d03e      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007adc:	f003 031f 	and.w	r3, r3, #31
 8007ae0:	2210      	movs	r2, #16
 8007ae2:	409a      	lsls	r2, r3
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d018      	beq.n	8007b28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d108      	bne.n	8007b16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d024      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
 8007b14:	e01f      	b.n	8007b56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d01b      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
 8007b26:	e016      	b.n	8007b56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d107      	bne.n	8007b46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0208 	bic.w	r2, r2, #8
 8007b44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	2220      	movs	r2, #32
 8007b60:	409a      	lsls	r2, r3
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	4013      	ands	r3, r2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 8110 	beq.w	8007d8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a2c      	ldr	r2, [pc, #176]	; (8007c24 <HAL_DMA_IRQHandler+0x690>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d04a      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a2b      	ldr	r2, [pc, #172]	; (8007c28 <HAL_DMA_IRQHandler+0x694>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d045      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a29      	ldr	r2, [pc, #164]	; (8007c2c <HAL_DMA_IRQHandler+0x698>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d040      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a28      	ldr	r2, [pc, #160]	; (8007c30 <HAL_DMA_IRQHandler+0x69c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d03b      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a26      	ldr	r2, [pc, #152]	; (8007c34 <HAL_DMA_IRQHandler+0x6a0>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d036      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a25      	ldr	r2, [pc, #148]	; (8007c38 <HAL_DMA_IRQHandler+0x6a4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d031      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a23      	ldr	r2, [pc, #140]	; (8007c3c <HAL_DMA_IRQHandler+0x6a8>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d02c      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a22      	ldr	r2, [pc, #136]	; (8007c40 <HAL_DMA_IRQHandler+0x6ac>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d027      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a20      	ldr	r2, [pc, #128]	; (8007c44 <HAL_DMA_IRQHandler+0x6b0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d022      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a1f      	ldr	r2, [pc, #124]	; (8007c48 <HAL_DMA_IRQHandler+0x6b4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d01d      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a1d      	ldr	r2, [pc, #116]	; (8007c4c <HAL_DMA_IRQHandler+0x6b8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d018      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a1c      	ldr	r2, [pc, #112]	; (8007c50 <HAL_DMA_IRQHandler+0x6bc>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d013      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a1a      	ldr	r2, [pc, #104]	; (8007c54 <HAL_DMA_IRQHandler+0x6c0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d00e      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a19      	ldr	r2, [pc, #100]	; (8007c58 <HAL_DMA_IRQHandler+0x6c4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d009      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a17      	ldr	r2, [pc, #92]	; (8007c5c <HAL_DMA_IRQHandler+0x6c8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d004      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x678>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a16      	ldr	r2, [pc, #88]	; (8007c60 <HAL_DMA_IRQHandler+0x6cc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d12b      	bne.n	8007c64 <HAL_DMA_IRQHandler+0x6d0>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0310 	and.w	r3, r3, #16
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bf14      	ite	ne
 8007c1a:	2301      	movne	r3, #1
 8007c1c:	2300      	moveq	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	e02a      	b.n	8007c78 <HAL_DMA_IRQHandler+0x6e4>
 8007c22:	bf00      	nop
 8007c24:	40020010 	.word	0x40020010
 8007c28:	40020028 	.word	0x40020028
 8007c2c:	40020040 	.word	0x40020040
 8007c30:	40020058 	.word	0x40020058
 8007c34:	40020070 	.word	0x40020070
 8007c38:	40020088 	.word	0x40020088
 8007c3c:	400200a0 	.word	0x400200a0
 8007c40:	400200b8 	.word	0x400200b8
 8007c44:	40020410 	.word	0x40020410
 8007c48:	40020428 	.word	0x40020428
 8007c4c:	40020440 	.word	0x40020440
 8007c50:	40020458 	.word	0x40020458
 8007c54:	40020470 	.word	0x40020470
 8007c58:	40020488 	.word	0x40020488
 8007c5c:	400204a0 	.word	0x400204a0
 8007c60:	400204b8 	.word	0x400204b8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0302 	and.w	r3, r3, #2
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bf14      	ite	ne
 8007c72:	2301      	movne	r3, #1
 8007c74:	2300      	moveq	r3, #0
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8087 	beq.w	8007d8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c82:	f003 031f 	and.w	r3, r3, #31
 8007c86:	2220      	movs	r2, #32
 8007c88:	409a      	lsls	r2, r3
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d139      	bne.n	8007d0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f022 0216 	bic.w	r2, r2, #22
 8007ca8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695a      	ldr	r2, [r3, #20]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cb8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d103      	bne.n	8007cca <HAL_DMA_IRQHandler+0x736>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d007      	beq.n	8007cda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0208 	bic.w	r2, r2, #8
 8007cd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cde:	f003 031f 	and.w	r3, r3, #31
 8007ce2:	223f      	movs	r2, #63	; 0x3f
 8007ce4:	409a      	lsls	r2, r3
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 834a 	beq.w	8008398 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	4798      	blx	r3
          }
          return;
 8007d0c:	e344      	b.n	8008398 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d018      	beq.n	8007d4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d108      	bne.n	8007d3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d02c      	beq.n	8007d8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
 8007d3a:	e027      	b.n	8007d8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d023      	beq.n	8007d8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	4798      	blx	r3
 8007d4c:	e01e      	b.n	8007d8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10f      	bne.n	8007d7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0210 	bic.w	r2, r2, #16
 8007d6a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 8306 	beq.w	80083a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8088 	beq.w	8007eb4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2204      	movs	r2, #4
 8007da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a7a      	ldr	r2, [pc, #488]	; (8007f9c <HAL_DMA_IRQHandler+0xa08>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d04a      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a79      	ldr	r2, [pc, #484]	; (8007fa0 <HAL_DMA_IRQHandler+0xa0c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d045      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a77      	ldr	r2, [pc, #476]	; (8007fa4 <HAL_DMA_IRQHandler+0xa10>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d040      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a76      	ldr	r2, [pc, #472]	; (8007fa8 <HAL_DMA_IRQHandler+0xa14>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d03b      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a74      	ldr	r2, [pc, #464]	; (8007fac <HAL_DMA_IRQHandler+0xa18>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d036      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a73      	ldr	r2, [pc, #460]	; (8007fb0 <HAL_DMA_IRQHandler+0xa1c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d031      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a71      	ldr	r2, [pc, #452]	; (8007fb4 <HAL_DMA_IRQHandler+0xa20>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d02c      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a70      	ldr	r2, [pc, #448]	; (8007fb8 <HAL_DMA_IRQHandler+0xa24>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d027      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a6e      	ldr	r2, [pc, #440]	; (8007fbc <HAL_DMA_IRQHandler+0xa28>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d022      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a6d      	ldr	r2, [pc, #436]	; (8007fc0 <HAL_DMA_IRQHandler+0xa2c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d01d      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a6b      	ldr	r2, [pc, #428]	; (8007fc4 <HAL_DMA_IRQHandler+0xa30>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d018      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a6a      	ldr	r2, [pc, #424]	; (8007fc8 <HAL_DMA_IRQHandler+0xa34>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d013      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a68      	ldr	r2, [pc, #416]	; (8007fcc <HAL_DMA_IRQHandler+0xa38>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d00e      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a67      	ldr	r2, [pc, #412]	; (8007fd0 <HAL_DMA_IRQHandler+0xa3c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d009      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a65      	ldr	r2, [pc, #404]	; (8007fd4 <HAL_DMA_IRQHandler+0xa40>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d004      	beq.n	8007e4c <HAL_DMA_IRQHandler+0x8b8>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a64      	ldr	r2, [pc, #400]	; (8007fd8 <HAL_DMA_IRQHandler+0xa44>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d108      	bne.n	8007e5e <HAL_DMA_IRQHandler+0x8ca>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0201 	bic.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	e007      	b.n	8007e6e <HAL_DMA_IRQHandler+0x8da>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0201 	bic.w	r2, r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	3301      	adds	r3, #1
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d307      	bcc.n	8007e8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f2      	bne.n	8007e6e <HAL_DMA_IRQHandler+0x8da>
 8007e88:	e000      	b.n	8007e8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007e8a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2203      	movs	r2, #3
 8007ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007eaa:	e003      	b.n	8007eb4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 8272 	beq.w	80083a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	4798      	blx	r3
 8007ec6:	e26c      	b.n	80083a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a43      	ldr	r2, [pc, #268]	; (8007fdc <HAL_DMA_IRQHandler+0xa48>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d022      	beq.n	8007f18 <HAL_DMA_IRQHandler+0x984>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a42      	ldr	r2, [pc, #264]	; (8007fe0 <HAL_DMA_IRQHandler+0xa4c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d01d      	beq.n	8007f18 <HAL_DMA_IRQHandler+0x984>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a40      	ldr	r2, [pc, #256]	; (8007fe4 <HAL_DMA_IRQHandler+0xa50>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d018      	beq.n	8007f18 <HAL_DMA_IRQHandler+0x984>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a3f      	ldr	r2, [pc, #252]	; (8007fe8 <HAL_DMA_IRQHandler+0xa54>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d013      	beq.n	8007f18 <HAL_DMA_IRQHandler+0x984>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a3d      	ldr	r2, [pc, #244]	; (8007fec <HAL_DMA_IRQHandler+0xa58>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d00e      	beq.n	8007f18 <HAL_DMA_IRQHandler+0x984>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a3c      	ldr	r2, [pc, #240]	; (8007ff0 <HAL_DMA_IRQHandler+0xa5c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d009      	beq.n	8007f18 <HAL_DMA_IRQHandler+0x984>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a3a      	ldr	r2, [pc, #232]	; (8007ff4 <HAL_DMA_IRQHandler+0xa60>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <HAL_DMA_IRQHandler+0x984>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a39      	ldr	r2, [pc, #228]	; (8007ff8 <HAL_DMA_IRQHandler+0xa64>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d101      	bne.n	8007f1c <HAL_DMA_IRQHandler+0x988>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e000      	b.n	8007f1e <HAL_DMA_IRQHandler+0x98a>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 823f 	beq.w	80083a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f30:	f003 031f 	and.w	r3, r3, #31
 8007f34:	2204      	movs	r2, #4
 8007f36:	409a      	lsls	r2, r3
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 80cd 	beq.w	80080dc <HAL_DMA_IRQHandler+0xb48>
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f000 80c7 	beq.w	80080dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f52:	f003 031f 	and.w	r3, r3, #31
 8007f56:	2204      	movs	r2, #4
 8007f58:	409a      	lsls	r2, r3
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d049      	beq.n	8007ffc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d109      	bne.n	8007f86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f000 8210 	beq.w	800839c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f84:	e20a      	b.n	800839c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 8206 	beq.w	800839c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f98:	e200      	b.n	800839c <HAL_DMA_IRQHandler+0xe08>
 8007f9a:	bf00      	nop
 8007f9c:	40020010 	.word	0x40020010
 8007fa0:	40020028 	.word	0x40020028
 8007fa4:	40020040 	.word	0x40020040
 8007fa8:	40020058 	.word	0x40020058
 8007fac:	40020070 	.word	0x40020070
 8007fb0:	40020088 	.word	0x40020088
 8007fb4:	400200a0 	.word	0x400200a0
 8007fb8:	400200b8 	.word	0x400200b8
 8007fbc:	40020410 	.word	0x40020410
 8007fc0:	40020428 	.word	0x40020428
 8007fc4:	40020440 	.word	0x40020440
 8007fc8:	40020458 	.word	0x40020458
 8007fcc:	40020470 	.word	0x40020470
 8007fd0:	40020488 	.word	0x40020488
 8007fd4:	400204a0 	.word	0x400204a0
 8007fd8:	400204b8 	.word	0x400204b8
 8007fdc:	58025408 	.word	0x58025408
 8007fe0:	5802541c 	.word	0x5802541c
 8007fe4:	58025430 	.word	0x58025430
 8007fe8:	58025444 	.word	0x58025444
 8007fec:	58025458 	.word	0x58025458
 8007ff0:	5802546c 	.word	0x5802546c
 8007ff4:	58025480 	.word	0x58025480
 8007ff8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	d160      	bne.n	80080c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a8c      	ldr	r2, [pc, #560]	; (800823c <HAL_DMA_IRQHandler+0xca8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d04a      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a8a      	ldr	r2, [pc, #552]	; (8008240 <HAL_DMA_IRQHandler+0xcac>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d045      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a89      	ldr	r2, [pc, #548]	; (8008244 <HAL_DMA_IRQHandler+0xcb0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d040      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a87      	ldr	r2, [pc, #540]	; (8008248 <HAL_DMA_IRQHandler+0xcb4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d03b      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a86      	ldr	r2, [pc, #536]	; (800824c <HAL_DMA_IRQHandler+0xcb8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d036      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a84      	ldr	r2, [pc, #528]	; (8008250 <HAL_DMA_IRQHandler+0xcbc>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d031      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a83      	ldr	r2, [pc, #524]	; (8008254 <HAL_DMA_IRQHandler+0xcc0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d02c      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a81      	ldr	r2, [pc, #516]	; (8008258 <HAL_DMA_IRQHandler+0xcc4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d027      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a80      	ldr	r2, [pc, #512]	; (800825c <HAL_DMA_IRQHandler+0xcc8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d022      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a7e      	ldr	r2, [pc, #504]	; (8008260 <HAL_DMA_IRQHandler+0xccc>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01d      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a7d      	ldr	r2, [pc, #500]	; (8008264 <HAL_DMA_IRQHandler+0xcd0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d018      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a7b      	ldr	r2, [pc, #492]	; (8008268 <HAL_DMA_IRQHandler+0xcd4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a7a      	ldr	r2, [pc, #488]	; (800826c <HAL_DMA_IRQHandler+0xcd8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a78      	ldr	r2, [pc, #480]	; (8008270 <HAL_DMA_IRQHandler+0xcdc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a77      	ldr	r2, [pc, #476]	; (8008274 <HAL_DMA_IRQHandler+0xce0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xb12>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a75      	ldr	r2, [pc, #468]	; (8008278 <HAL_DMA_IRQHandler+0xce4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d108      	bne.n	80080b8 <HAL_DMA_IRQHandler+0xb24>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 0208 	bic.w	r2, r2, #8
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	e007      	b.n	80080c8 <HAL_DMA_IRQHandler+0xb34>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0204 	bic.w	r2, r2, #4
 80080c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8165 	beq.w	800839c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080da:	e15f      	b.n	800839c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e0:	f003 031f 	and.w	r3, r3, #31
 80080e4:	2202      	movs	r2, #2
 80080e6:	409a      	lsls	r2, r3
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80c5 	beq.w	800827c <HAL_DMA_IRQHandler+0xce8>
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80bf 	beq.w	800827c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008102:	f003 031f 	and.w	r3, r3, #31
 8008106:	2202      	movs	r2, #2
 8008108:	409a      	lsls	r2, r3
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d018      	beq.n	800814a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 813a 	beq.w	80083a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008134:	e134      	b.n	80083a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 8130 	beq.w	80083a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008148:	e12a      	b.n	80083a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f003 0320 	and.w	r3, r3, #32
 8008150:	2b00      	cmp	r3, #0
 8008152:	d168      	bne.n	8008226 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a38      	ldr	r2, [pc, #224]	; (800823c <HAL_DMA_IRQHandler+0xca8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d04a      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a37      	ldr	r2, [pc, #220]	; (8008240 <HAL_DMA_IRQHandler+0xcac>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d045      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a35      	ldr	r2, [pc, #212]	; (8008244 <HAL_DMA_IRQHandler+0xcb0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d040      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a34      	ldr	r2, [pc, #208]	; (8008248 <HAL_DMA_IRQHandler+0xcb4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d03b      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a32      	ldr	r2, [pc, #200]	; (800824c <HAL_DMA_IRQHandler+0xcb8>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d036      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a31      	ldr	r2, [pc, #196]	; (8008250 <HAL_DMA_IRQHandler+0xcbc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d031      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a2f      	ldr	r2, [pc, #188]	; (8008254 <HAL_DMA_IRQHandler+0xcc0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d02c      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a2e      	ldr	r2, [pc, #184]	; (8008258 <HAL_DMA_IRQHandler+0xcc4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d027      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a2c      	ldr	r2, [pc, #176]	; (800825c <HAL_DMA_IRQHandler+0xcc8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d022      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a2b      	ldr	r2, [pc, #172]	; (8008260 <HAL_DMA_IRQHandler+0xccc>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d01d      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a29      	ldr	r2, [pc, #164]	; (8008264 <HAL_DMA_IRQHandler+0xcd0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d018      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a28      	ldr	r2, [pc, #160]	; (8008268 <HAL_DMA_IRQHandler+0xcd4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d013      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a26      	ldr	r2, [pc, #152]	; (800826c <HAL_DMA_IRQHandler+0xcd8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00e      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a25      	ldr	r2, [pc, #148]	; (8008270 <HAL_DMA_IRQHandler+0xcdc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d009      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a23      	ldr	r2, [pc, #140]	; (8008274 <HAL_DMA_IRQHandler+0xce0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d004      	beq.n	80081f4 <HAL_DMA_IRQHandler+0xc60>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a22      	ldr	r2, [pc, #136]	; (8008278 <HAL_DMA_IRQHandler+0xce4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d108      	bne.n	8008206 <HAL_DMA_IRQHandler+0xc72>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0214 	bic.w	r2, r2, #20
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e007      	b.n	8008216 <HAL_DMA_IRQHandler+0xc82>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 020a 	bic.w	r2, r2, #10
 8008214:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 80b8 	beq.w	80083a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008238:	e0b2      	b.n	80083a0 <HAL_DMA_IRQHandler+0xe0c>
 800823a:	bf00      	nop
 800823c:	40020010 	.word	0x40020010
 8008240:	40020028 	.word	0x40020028
 8008244:	40020040 	.word	0x40020040
 8008248:	40020058 	.word	0x40020058
 800824c:	40020070 	.word	0x40020070
 8008250:	40020088 	.word	0x40020088
 8008254:	400200a0 	.word	0x400200a0
 8008258:	400200b8 	.word	0x400200b8
 800825c:	40020410 	.word	0x40020410
 8008260:	40020428 	.word	0x40020428
 8008264:	40020440 	.word	0x40020440
 8008268:	40020458 	.word	0x40020458
 800826c:	40020470 	.word	0x40020470
 8008270:	40020488 	.word	0x40020488
 8008274:	400204a0 	.word	0x400204a0
 8008278:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	2208      	movs	r2, #8
 8008286:	409a      	lsls	r2, r3
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8088 	beq.w	80083a2 <HAL_DMA_IRQHandler+0xe0e>
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f003 0308 	and.w	r3, r3, #8
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 8082 	beq.w	80083a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a41      	ldr	r2, [pc, #260]	; (80083a8 <HAL_DMA_IRQHandler+0xe14>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d04a      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a3f      	ldr	r2, [pc, #252]	; (80083ac <HAL_DMA_IRQHandler+0xe18>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d045      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a3e      	ldr	r2, [pc, #248]	; (80083b0 <HAL_DMA_IRQHandler+0xe1c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d040      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a3c      	ldr	r2, [pc, #240]	; (80083b4 <HAL_DMA_IRQHandler+0xe20>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d03b      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a3b      	ldr	r2, [pc, #236]	; (80083b8 <HAL_DMA_IRQHandler+0xe24>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d036      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a39      	ldr	r2, [pc, #228]	; (80083bc <HAL_DMA_IRQHandler+0xe28>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d031      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a38      	ldr	r2, [pc, #224]	; (80083c0 <HAL_DMA_IRQHandler+0xe2c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d02c      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a36      	ldr	r2, [pc, #216]	; (80083c4 <HAL_DMA_IRQHandler+0xe30>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d027      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a35      	ldr	r2, [pc, #212]	; (80083c8 <HAL_DMA_IRQHandler+0xe34>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d022      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a33      	ldr	r2, [pc, #204]	; (80083cc <HAL_DMA_IRQHandler+0xe38>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01d      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a32      	ldr	r2, [pc, #200]	; (80083d0 <HAL_DMA_IRQHandler+0xe3c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d018      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a30      	ldr	r2, [pc, #192]	; (80083d4 <HAL_DMA_IRQHandler+0xe40>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d013      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a2f      	ldr	r2, [pc, #188]	; (80083d8 <HAL_DMA_IRQHandler+0xe44>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d00e      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a2d      	ldr	r2, [pc, #180]	; (80083dc <HAL_DMA_IRQHandler+0xe48>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d009      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a2c      	ldr	r2, [pc, #176]	; (80083e0 <HAL_DMA_IRQHandler+0xe4c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d004      	beq.n	800833e <HAL_DMA_IRQHandler+0xdaa>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a2a      	ldr	r2, [pc, #168]	; (80083e4 <HAL_DMA_IRQHandler+0xe50>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d108      	bne.n	8008350 <HAL_DMA_IRQHandler+0xdbc>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 021c 	bic.w	r2, r2, #28
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e007      	b.n	8008360 <HAL_DMA_IRQHandler+0xdcc>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 020e 	bic.w	r2, r2, #14
 800835e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008364:	f003 031f 	and.w	r3, r3, #31
 8008368:	2201      	movs	r2, #1
 800836a:	409a      	lsls	r2, r3
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	4798      	blx	r3
 8008396:	e004      	b.n	80083a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008398:	bf00      	nop
 800839a:	e002      	b.n	80083a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800839c:	bf00      	nop
 800839e:	e000      	b.n	80083a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80083a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083a2:	3728      	adds	r7, #40	; 0x28
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	40020010 	.word	0x40020010
 80083ac:	40020028 	.word	0x40020028
 80083b0:	40020040 	.word	0x40020040
 80083b4:	40020058 	.word	0x40020058
 80083b8:	40020070 	.word	0x40020070
 80083bc:	40020088 	.word	0x40020088
 80083c0:	400200a0 	.word	0x400200a0
 80083c4:	400200b8 	.word	0x400200b8
 80083c8:	40020410 	.word	0x40020410
 80083cc:	40020428 	.word	0x40020428
 80083d0:	40020440 	.word	0x40020440
 80083d4:	40020458 	.word	0x40020458
 80083d8:	40020470 	.word	0x40020470
 80083dc:	40020488 	.word	0x40020488
 80083e0:	400204a0 	.word	0x400204a0
 80083e4:	400204b8 	.word	0x400204b8

080083e8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083f6:	b2db      	uxtb	r3, r3
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008434:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a84      	ldr	r2, [pc, #528]	; (800864c <DMA_SetConfig+0x230>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d072      	beq.n	8008526 <DMA_SetConfig+0x10a>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a82      	ldr	r2, [pc, #520]	; (8008650 <DMA_SetConfig+0x234>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d06d      	beq.n	8008526 <DMA_SetConfig+0x10a>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a81      	ldr	r2, [pc, #516]	; (8008654 <DMA_SetConfig+0x238>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d068      	beq.n	8008526 <DMA_SetConfig+0x10a>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a7f      	ldr	r2, [pc, #508]	; (8008658 <DMA_SetConfig+0x23c>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d063      	beq.n	8008526 <DMA_SetConfig+0x10a>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a7e      	ldr	r2, [pc, #504]	; (800865c <DMA_SetConfig+0x240>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d05e      	beq.n	8008526 <DMA_SetConfig+0x10a>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a7c      	ldr	r2, [pc, #496]	; (8008660 <DMA_SetConfig+0x244>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d059      	beq.n	8008526 <DMA_SetConfig+0x10a>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a7b      	ldr	r2, [pc, #492]	; (8008664 <DMA_SetConfig+0x248>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d054      	beq.n	8008526 <DMA_SetConfig+0x10a>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a79      	ldr	r2, [pc, #484]	; (8008668 <DMA_SetConfig+0x24c>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d04f      	beq.n	8008526 <DMA_SetConfig+0x10a>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a78      	ldr	r2, [pc, #480]	; (800866c <DMA_SetConfig+0x250>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d04a      	beq.n	8008526 <DMA_SetConfig+0x10a>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a76      	ldr	r2, [pc, #472]	; (8008670 <DMA_SetConfig+0x254>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d045      	beq.n	8008526 <DMA_SetConfig+0x10a>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a75      	ldr	r2, [pc, #468]	; (8008674 <DMA_SetConfig+0x258>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d040      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a73      	ldr	r2, [pc, #460]	; (8008678 <DMA_SetConfig+0x25c>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d03b      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a72      	ldr	r2, [pc, #456]	; (800867c <DMA_SetConfig+0x260>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d036      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a70      	ldr	r2, [pc, #448]	; (8008680 <DMA_SetConfig+0x264>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d031      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a6f      	ldr	r2, [pc, #444]	; (8008684 <DMA_SetConfig+0x268>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d02c      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a6d      	ldr	r2, [pc, #436]	; (8008688 <DMA_SetConfig+0x26c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d027      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a6c      	ldr	r2, [pc, #432]	; (800868c <DMA_SetConfig+0x270>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d022      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a6a      	ldr	r2, [pc, #424]	; (8008690 <DMA_SetConfig+0x274>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d01d      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a69      	ldr	r2, [pc, #420]	; (8008694 <DMA_SetConfig+0x278>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d018      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a67      	ldr	r2, [pc, #412]	; (8008698 <DMA_SetConfig+0x27c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d013      	beq.n	8008526 <DMA_SetConfig+0x10a>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a66      	ldr	r2, [pc, #408]	; (800869c <DMA_SetConfig+0x280>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00e      	beq.n	8008526 <DMA_SetConfig+0x10a>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a64      	ldr	r2, [pc, #400]	; (80086a0 <DMA_SetConfig+0x284>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d009      	beq.n	8008526 <DMA_SetConfig+0x10a>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a63      	ldr	r2, [pc, #396]	; (80086a4 <DMA_SetConfig+0x288>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d004      	beq.n	8008526 <DMA_SetConfig+0x10a>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a61      	ldr	r2, [pc, #388]	; (80086a8 <DMA_SetConfig+0x28c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d101      	bne.n	800852a <DMA_SetConfig+0x10e>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <DMA_SetConfig+0x110>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00d      	beq.n	800854c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008538:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800854a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a3e      	ldr	r2, [pc, #248]	; (800864c <DMA_SetConfig+0x230>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d04a      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a3d      	ldr	r2, [pc, #244]	; (8008650 <DMA_SetConfig+0x234>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d045      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a3b      	ldr	r2, [pc, #236]	; (8008654 <DMA_SetConfig+0x238>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d040      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a3a      	ldr	r2, [pc, #232]	; (8008658 <DMA_SetConfig+0x23c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d03b      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a38      	ldr	r2, [pc, #224]	; (800865c <DMA_SetConfig+0x240>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d036      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a37      	ldr	r2, [pc, #220]	; (8008660 <DMA_SetConfig+0x244>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d031      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a35      	ldr	r2, [pc, #212]	; (8008664 <DMA_SetConfig+0x248>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d02c      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a34      	ldr	r2, [pc, #208]	; (8008668 <DMA_SetConfig+0x24c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d027      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a32      	ldr	r2, [pc, #200]	; (800866c <DMA_SetConfig+0x250>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d022      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a31      	ldr	r2, [pc, #196]	; (8008670 <DMA_SetConfig+0x254>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d01d      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a2f      	ldr	r2, [pc, #188]	; (8008674 <DMA_SetConfig+0x258>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d018      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a2e      	ldr	r2, [pc, #184]	; (8008678 <DMA_SetConfig+0x25c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d013      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a2c      	ldr	r2, [pc, #176]	; (800867c <DMA_SetConfig+0x260>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00e      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a2b      	ldr	r2, [pc, #172]	; (8008680 <DMA_SetConfig+0x264>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d009      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a29      	ldr	r2, [pc, #164]	; (8008684 <DMA_SetConfig+0x268>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d004      	beq.n	80085ec <DMA_SetConfig+0x1d0>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a28      	ldr	r2, [pc, #160]	; (8008688 <DMA_SetConfig+0x26c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d101      	bne.n	80085f0 <DMA_SetConfig+0x1d4>
 80085ec:	2301      	movs	r3, #1
 80085ee:	e000      	b.n	80085f2 <DMA_SetConfig+0x1d6>
 80085f0:	2300      	movs	r3, #0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d05a      	beq.n	80086ac <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fa:	f003 031f 	and.w	r3, r3, #31
 80085fe:	223f      	movs	r2, #63	; 0x3f
 8008600:	409a      	lsls	r2, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008614:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	2b40      	cmp	r3, #64	; 0x40
 8008624:	d108      	bne.n	8008638 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008636:	e087      	b.n	8008748 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	60da      	str	r2, [r3, #12]
}
 8008648:	e07e      	b.n	8008748 <DMA_SetConfig+0x32c>
 800864a:	bf00      	nop
 800864c:	40020010 	.word	0x40020010
 8008650:	40020028 	.word	0x40020028
 8008654:	40020040 	.word	0x40020040
 8008658:	40020058 	.word	0x40020058
 800865c:	40020070 	.word	0x40020070
 8008660:	40020088 	.word	0x40020088
 8008664:	400200a0 	.word	0x400200a0
 8008668:	400200b8 	.word	0x400200b8
 800866c:	40020410 	.word	0x40020410
 8008670:	40020428 	.word	0x40020428
 8008674:	40020440 	.word	0x40020440
 8008678:	40020458 	.word	0x40020458
 800867c:	40020470 	.word	0x40020470
 8008680:	40020488 	.word	0x40020488
 8008684:	400204a0 	.word	0x400204a0
 8008688:	400204b8 	.word	0x400204b8
 800868c:	58025408 	.word	0x58025408
 8008690:	5802541c 	.word	0x5802541c
 8008694:	58025430 	.word	0x58025430
 8008698:	58025444 	.word	0x58025444
 800869c:	58025458 	.word	0x58025458
 80086a0:	5802546c 	.word	0x5802546c
 80086a4:	58025480 	.word	0x58025480
 80086a8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a28      	ldr	r2, [pc, #160]	; (8008754 <DMA_SetConfig+0x338>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d022      	beq.n	80086fc <DMA_SetConfig+0x2e0>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a27      	ldr	r2, [pc, #156]	; (8008758 <DMA_SetConfig+0x33c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d01d      	beq.n	80086fc <DMA_SetConfig+0x2e0>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a25      	ldr	r2, [pc, #148]	; (800875c <DMA_SetConfig+0x340>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d018      	beq.n	80086fc <DMA_SetConfig+0x2e0>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a24      	ldr	r2, [pc, #144]	; (8008760 <DMA_SetConfig+0x344>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d013      	beq.n	80086fc <DMA_SetConfig+0x2e0>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a22      	ldr	r2, [pc, #136]	; (8008764 <DMA_SetConfig+0x348>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d00e      	beq.n	80086fc <DMA_SetConfig+0x2e0>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a21      	ldr	r2, [pc, #132]	; (8008768 <DMA_SetConfig+0x34c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d009      	beq.n	80086fc <DMA_SetConfig+0x2e0>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a1f      	ldr	r2, [pc, #124]	; (800876c <DMA_SetConfig+0x350>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d004      	beq.n	80086fc <DMA_SetConfig+0x2e0>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a1e      	ldr	r2, [pc, #120]	; (8008770 <DMA_SetConfig+0x354>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d101      	bne.n	8008700 <DMA_SetConfig+0x2e4>
 80086fc:	2301      	movs	r3, #1
 80086fe:	e000      	b.n	8008702 <DMA_SetConfig+0x2e6>
 8008700:	2300      	movs	r3, #0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d020      	beq.n	8008748 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870a:	f003 031f 	and.w	r3, r3, #31
 800870e:	2201      	movs	r2, #1
 8008710:	409a      	lsls	r2, r3
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b40      	cmp	r3, #64	; 0x40
 8008724:	d108      	bne.n	8008738 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	60da      	str	r2, [r3, #12]
}
 8008736:	e007      	b.n	8008748 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	60da      	str	r2, [r3, #12]
}
 8008748:	bf00      	nop
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	58025408 	.word	0x58025408
 8008758:	5802541c 	.word	0x5802541c
 800875c:	58025430 	.word	0x58025430
 8008760:	58025444 	.word	0x58025444
 8008764:	58025458 	.word	0x58025458
 8008768:	5802546c 	.word	0x5802546c
 800876c:	58025480 	.word	0x58025480
 8008770:	58025494 	.word	0x58025494

08008774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a42      	ldr	r2, [pc, #264]	; (800888c <DMA_CalcBaseAndBitshift+0x118>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d04a      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a41      	ldr	r2, [pc, #260]	; (8008890 <DMA_CalcBaseAndBitshift+0x11c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d045      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a3f      	ldr	r2, [pc, #252]	; (8008894 <DMA_CalcBaseAndBitshift+0x120>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d040      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a3e      	ldr	r2, [pc, #248]	; (8008898 <DMA_CalcBaseAndBitshift+0x124>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d03b      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a3c      	ldr	r2, [pc, #240]	; (800889c <DMA_CalcBaseAndBitshift+0x128>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d036      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a3b      	ldr	r2, [pc, #236]	; (80088a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d031      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a39      	ldr	r2, [pc, #228]	; (80088a4 <DMA_CalcBaseAndBitshift+0x130>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d02c      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a38      	ldr	r2, [pc, #224]	; (80088a8 <DMA_CalcBaseAndBitshift+0x134>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d027      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a36      	ldr	r2, [pc, #216]	; (80088ac <DMA_CalcBaseAndBitshift+0x138>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d022      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a35      	ldr	r2, [pc, #212]	; (80088b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d01d      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a33      	ldr	r2, [pc, #204]	; (80088b4 <DMA_CalcBaseAndBitshift+0x140>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d018      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a32      	ldr	r2, [pc, #200]	; (80088b8 <DMA_CalcBaseAndBitshift+0x144>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d013      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a30      	ldr	r2, [pc, #192]	; (80088bc <DMA_CalcBaseAndBitshift+0x148>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00e      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2f      	ldr	r2, [pc, #188]	; (80088c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d009      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a2d      	ldr	r2, [pc, #180]	; (80088c4 <DMA_CalcBaseAndBitshift+0x150>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d004      	beq.n	800881c <DMA_CalcBaseAndBitshift+0xa8>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a2c      	ldr	r2, [pc, #176]	; (80088c8 <DMA_CalcBaseAndBitshift+0x154>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d101      	bne.n	8008820 <DMA_CalcBaseAndBitshift+0xac>
 800881c:	2301      	movs	r3, #1
 800881e:	e000      	b.n	8008822 <DMA_CalcBaseAndBitshift+0xae>
 8008820:	2300      	movs	r3, #0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d024      	beq.n	8008870 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	b2db      	uxtb	r3, r3
 800882c:	3b10      	subs	r3, #16
 800882e:	4a27      	ldr	r2, [pc, #156]	; (80088cc <DMA_CalcBaseAndBitshift+0x158>)
 8008830:	fba2 2303 	umull	r2, r3, r2, r3
 8008834:	091b      	lsrs	r3, r3, #4
 8008836:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	4a24      	ldr	r2, [pc, #144]	; (80088d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008840:	5cd3      	ldrb	r3, [r2, r3]
 8008842:	461a      	mov	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2b03      	cmp	r3, #3
 800884c:	d908      	bls.n	8008860 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <DMA_CalcBaseAndBitshift+0x160>)
 8008856:	4013      	ands	r3, r2
 8008858:	1d1a      	adds	r2, r3, #4
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	659a      	str	r2, [r3, #88]	; 0x58
 800885e:	e00d      	b.n	800887c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <DMA_CalcBaseAndBitshift+0x160>)
 8008868:	4013      	ands	r3, r2
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6593      	str	r3, [r2, #88]	; 0x58
 800886e:	e005      	b.n	800887c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	40020010 	.word	0x40020010
 8008890:	40020028 	.word	0x40020028
 8008894:	40020040 	.word	0x40020040
 8008898:	40020058 	.word	0x40020058
 800889c:	40020070 	.word	0x40020070
 80088a0:	40020088 	.word	0x40020088
 80088a4:	400200a0 	.word	0x400200a0
 80088a8:	400200b8 	.word	0x400200b8
 80088ac:	40020410 	.word	0x40020410
 80088b0:	40020428 	.word	0x40020428
 80088b4:	40020440 	.word	0x40020440
 80088b8:	40020458 	.word	0x40020458
 80088bc:	40020470 	.word	0x40020470
 80088c0:	40020488 	.word	0x40020488
 80088c4:	400204a0 	.word	0x400204a0
 80088c8:	400204b8 	.word	0x400204b8
 80088cc:	aaaaaaab 	.word	0xaaaaaaab
 80088d0:	080150c4 	.word	0x080150c4
 80088d4:	fffffc00 	.word	0xfffffc00

080088d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d120      	bne.n	800892e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d858      	bhi.n	80089a6 <DMA_CheckFifoParam+0xce>
 80088f4:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <DMA_CheckFifoParam+0x24>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	0800890d 	.word	0x0800890d
 8008900:	0800891f 	.word	0x0800891f
 8008904:	0800890d 	.word	0x0800890d
 8008908:	080089a7 	.word	0x080089a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d048      	beq.n	80089aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800891c:	e045      	b.n	80089aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008922:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008926:	d142      	bne.n	80089ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800892c:	e03f      	b.n	80089ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008936:	d123      	bne.n	8008980 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	2b03      	cmp	r3, #3
 800893e:	d838      	bhi.n	80089b2 <DMA_CheckFifoParam+0xda>
 8008940:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <DMA_CheckFifoParam+0x70>)
 8008942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008946:	bf00      	nop
 8008948:	08008959 	.word	0x08008959
 800894c:	0800895f 	.word	0x0800895f
 8008950:	08008959 	.word	0x08008959
 8008954:	08008971 	.word	0x08008971
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	73fb      	strb	r3, [r7, #15]
        break;
 800895c:	e030      	b.n	80089c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d025      	beq.n	80089b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800896e:	e022      	b.n	80089b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008978:	d11f      	bne.n	80089ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800897e:	e01c      	b.n	80089ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	2b02      	cmp	r3, #2
 8008986:	d902      	bls.n	800898e <DMA_CheckFifoParam+0xb6>
 8008988:	2b03      	cmp	r3, #3
 800898a:	d003      	beq.n	8008994 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800898c:	e018      	b.n	80089c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]
        break;
 8008992:	e015      	b.n	80089c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00e      	beq.n	80089be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	73fb      	strb	r3, [r7, #15]
    break;
 80089a4:	e00b      	b.n	80089be <DMA_CheckFifoParam+0xe6>
        break;
 80089a6:	bf00      	nop
 80089a8:	e00a      	b.n	80089c0 <DMA_CheckFifoParam+0xe8>
        break;
 80089aa:	bf00      	nop
 80089ac:	e008      	b.n	80089c0 <DMA_CheckFifoParam+0xe8>
        break;
 80089ae:	bf00      	nop
 80089b0:	e006      	b.n	80089c0 <DMA_CheckFifoParam+0xe8>
        break;
 80089b2:	bf00      	nop
 80089b4:	e004      	b.n	80089c0 <DMA_CheckFifoParam+0xe8>
        break;
 80089b6:	bf00      	nop
 80089b8:	e002      	b.n	80089c0 <DMA_CheckFifoParam+0xe8>
        break;
 80089ba:	bf00      	nop
 80089bc:	e000      	b.n	80089c0 <DMA_CheckFifoParam+0xe8>
    break;
 80089be:	bf00      	nop
    }
  }

  return status;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
 80089ce:	bf00      	nop

080089d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a38      	ldr	r2, [pc, #224]	; (8008ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d022      	beq.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a36      	ldr	r2, [pc, #216]	; (8008ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d01d      	beq.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a35      	ldr	r2, [pc, #212]	; (8008acc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d018      	beq.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a33      	ldr	r2, [pc, #204]	; (8008ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d013      	beq.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a32      	ldr	r2, [pc, #200]	; (8008ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d00e      	beq.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a30      	ldr	r2, [pc, #192]	; (8008ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d009      	beq.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a2f      	ldr	r2, [pc, #188]	; (8008adc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d004      	beq.n	8008a2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a2d      	ldr	r2, [pc, #180]	; (8008ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d101      	bne.n	8008a32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008a32:	2300      	movs	r3, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d01a      	beq.n	8008a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	3b08      	subs	r3, #8
 8008a40:	4a28      	ldr	r2, [pc, #160]	; (8008ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	091b      	lsrs	r3, r3, #4
 8008a48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	4b26      	ldr	r3, [pc, #152]	; (8008ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a24      	ldr	r2, [pc, #144]	; (8008aec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008a5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2201      	movs	r2, #1
 8008a66:	409a      	lsls	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008a6c:	e024      	b.n	8008ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	3b10      	subs	r3, #16
 8008a76:	4a1e      	ldr	r2, [pc, #120]	; (8008af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008a78:	fba2 2303 	umull	r2, r3, r2, r3
 8008a7c:	091b      	lsrs	r3, r3, #4
 8008a7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d806      	bhi.n	8008a96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4a1b      	ldr	r2, [pc, #108]	; (8008af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d902      	bls.n	8008a96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3308      	adds	r3, #8
 8008a94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	4b18      	ldr	r3, [pc, #96]	; (8008afc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008aa8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f003 031f 	and.w	r3, r3, #31
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	409a      	lsls	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008ab8:	bf00      	nop
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	58025408 	.word	0x58025408
 8008ac8:	5802541c 	.word	0x5802541c
 8008acc:	58025430 	.word	0x58025430
 8008ad0:	58025444 	.word	0x58025444
 8008ad4:	58025458 	.word	0x58025458
 8008ad8:	5802546c 	.word	0x5802546c
 8008adc:	58025480 	.word	0x58025480
 8008ae0:	58025494 	.word	0x58025494
 8008ae4:	cccccccd 	.word	0xcccccccd
 8008ae8:	16009600 	.word	0x16009600
 8008aec:	58025880 	.word	0x58025880
 8008af0:	aaaaaaab 	.word	0xaaaaaaab
 8008af4:	400204b8 	.word	0x400204b8
 8008af8:	4002040f 	.word	0x4002040f
 8008afc:	10008200 	.word	0x10008200
 8008b00:	40020880 	.word	0x40020880

08008b04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d04a      	beq.n	8008bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2b08      	cmp	r3, #8
 8008b1e:	d847      	bhi.n	8008bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a25      	ldr	r2, [pc, #148]	; (8008bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d022      	beq.n	8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a24      	ldr	r2, [pc, #144]	; (8008bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d01d      	beq.n	8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a22      	ldr	r2, [pc, #136]	; (8008bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d018      	beq.n	8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a21      	ldr	r2, [pc, #132]	; (8008bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d013      	beq.n	8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1f      	ldr	r2, [pc, #124]	; (8008bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00e      	beq.n	8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1e      	ldr	r2, [pc, #120]	; (8008bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d009      	beq.n	8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a1c      	ldr	r2, [pc, #112]	; (8008bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d004      	beq.n	8008b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a1b      	ldr	r2, [pc, #108]	; (8008bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d101      	bne.n	8008b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008b74:	2300      	movs	r3, #0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	461a      	mov	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a15      	ldr	r2, [pc, #84]	; (8008be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008b8c:	671a      	str	r2, [r3, #112]	; 0x70
 8008b8e:	e009      	b.n	8008ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4b14      	ldr	r3, [pc, #80]	; (8008be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008b94:	4413      	add	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	461a      	mov	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a11      	ldr	r2, [pc, #68]	; (8008be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008ba2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	2201      	movs	r2, #1
 8008baa:	409a      	lsls	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008bb0:	bf00      	nop
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	58025408 	.word	0x58025408
 8008bc0:	5802541c 	.word	0x5802541c
 8008bc4:	58025430 	.word	0x58025430
 8008bc8:	58025444 	.word	0x58025444
 8008bcc:	58025458 	.word	0x58025458
 8008bd0:	5802546c 	.word	0x5802546c
 8008bd4:	58025480 	.word	0x58025480
 8008bd8:	58025494 	.word	0x58025494
 8008bdc:	1600963f 	.word	0x1600963f
 8008be0:	58025940 	.word	0x58025940
 8008be4:	1000823f 	.word	0x1000823f
 8008be8:	40020940 	.word	0x40020940

08008bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b089      	sub	sp, #36	; 0x24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008bfa:	4b89      	ldr	r3, [pc, #548]	; (8008e20 <HAL_GPIO_Init+0x234>)
 8008bfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bfe:	e194      	b.n	8008f2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	2101      	movs	r1, #1
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	fa01 f303 	lsl.w	r3, r1, r3
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 8186 	beq.w	8008f24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d00b      	beq.n	8008c38 <HAL_GPIO_Init+0x4c>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d007      	beq.n	8008c38 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c2c:	2b11      	cmp	r3, #17
 8008c2e:	d003      	beq.n	8008c38 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b12      	cmp	r3, #18
 8008c36:	d130      	bne.n	8008c9a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c3e:	69fb      	ldr	r3, [r7, #28]
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	2203      	movs	r2, #3
 8008c44:	fa02 f303 	lsl.w	r3, r2, r3
 8008c48:	43db      	mvns	r3, r3
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c6e:	2201      	movs	r2, #1
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	fa02 f303 	lsl.w	r3, r2, r3
 8008c76:	43db      	mvns	r3, r3
 8008c78:	69ba      	ldr	r2, [r7, #24]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	091b      	lsrs	r3, r3, #4
 8008c84:	f003 0201 	and.w	r2, r3, #1
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8008caa:	43db      	mvns	r3, r3
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d003      	beq.n	8008cda <HAL_GPIO_Init+0xee>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2b12      	cmp	r3, #18
 8008cd8:	d123      	bne.n	8008d22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	08da      	lsrs	r2, r3, #3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	3208      	adds	r2, #8
 8008ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	f003 0307 	and.w	r3, r3, #7
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	220f      	movs	r2, #15
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	43db      	mvns	r3, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	691a      	ldr	r2, [r3, #16]
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	08da      	lsrs	r2, r3, #3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3208      	adds	r2, #8
 8008d1c:	69b9      	ldr	r1, [r7, #24]
 8008d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d32:	43db      	mvns	r3, r3
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	4013      	ands	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f003 0203 	and.w	r2, r3, #3
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f000 80e0 	beq.w	8008f24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d64:	4b2f      	ldr	r3, [pc, #188]	; (8008e24 <HAL_GPIO_Init+0x238>)
 8008d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d6a:	4a2e      	ldr	r2, [pc, #184]	; (8008e24 <HAL_GPIO_Init+0x238>)
 8008d6c:	f043 0302 	orr.w	r3, r3, #2
 8008d70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008d74:	4b2b      	ldr	r3, [pc, #172]	; (8008e24 <HAL_GPIO_Init+0x238>)
 8008d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	60fb      	str	r3, [r7, #12]
 8008d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d82:	4a29      	ldr	r2, [pc, #164]	; (8008e28 <HAL_GPIO_Init+0x23c>)
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	089b      	lsrs	r3, r3, #2
 8008d88:	3302      	adds	r3, #2
 8008d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	220f      	movs	r2, #15
 8008d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9e:	43db      	mvns	r3, r3
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	4013      	ands	r3, r2
 8008da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a20      	ldr	r2, [pc, #128]	; (8008e2c <HAL_GPIO_Init+0x240>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d052      	beq.n	8008e54 <HAL_GPIO_Init+0x268>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a1f      	ldr	r2, [pc, #124]	; (8008e30 <HAL_GPIO_Init+0x244>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d031      	beq.n	8008e1a <HAL_GPIO_Init+0x22e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a1e      	ldr	r2, [pc, #120]	; (8008e34 <HAL_GPIO_Init+0x248>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d02b      	beq.n	8008e16 <HAL_GPIO_Init+0x22a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a1d      	ldr	r2, [pc, #116]	; (8008e38 <HAL_GPIO_Init+0x24c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d025      	beq.n	8008e12 <HAL_GPIO_Init+0x226>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a1c      	ldr	r2, [pc, #112]	; (8008e3c <HAL_GPIO_Init+0x250>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d01f      	beq.n	8008e0e <HAL_GPIO_Init+0x222>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a1b      	ldr	r2, [pc, #108]	; (8008e40 <HAL_GPIO_Init+0x254>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d019      	beq.n	8008e0a <HAL_GPIO_Init+0x21e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a1a      	ldr	r2, [pc, #104]	; (8008e44 <HAL_GPIO_Init+0x258>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d013      	beq.n	8008e06 <HAL_GPIO_Init+0x21a>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a19      	ldr	r2, [pc, #100]	; (8008e48 <HAL_GPIO_Init+0x25c>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d00d      	beq.n	8008e02 <HAL_GPIO_Init+0x216>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a18      	ldr	r2, [pc, #96]	; (8008e4c <HAL_GPIO_Init+0x260>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d007      	beq.n	8008dfe <HAL_GPIO_Init+0x212>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a17      	ldr	r2, [pc, #92]	; (8008e50 <HAL_GPIO_Init+0x264>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d101      	bne.n	8008dfa <HAL_GPIO_Init+0x20e>
 8008df6:	2309      	movs	r3, #9
 8008df8:	e02d      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008dfa:	230a      	movs	r3, #10
 8008dfc:	e02b      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008dfe:	2308      	movs	r3, #8
 8008e00:	e029      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008e02:	2307      	movs	r3, #7
 8008e04:	e027      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008e06:	2306      	movs	r3, #6
 8008e08:	e025      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008e0a:	2305      	movs	r3, #5
 8008e0c:	e023      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008e0e:	2304      	movs	r3, #4
 8008e10:	e021      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008e12:	2303      	movs	r3, #3
 8008e14:	e01f      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008e16:	2302      	movs	r3, #2
 8008e18:	e01d      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e01b      	b.n	8008e56 <HAL_GPIO_Init+0x26a>
 8008e1e:	bf00      	nop
 8008e20:	58000080 	.word	0x58000080
 8008e24:	58024400 	.word	0x58024400
 8008e28:	58000400 	.word	0x58000400
 8008e2c:	58020000 	.word	0x58020000
 8008e30:	58020400 	.word	0x58020400
 8008e34:	58020800 	.word	0x58020800
 8008e38:	58020c00 	.word	0x58020c00
 8008e3c:	58021000 	.word	0x58021000
 8008e40:	58021400 	.word	0x58021400
 8008e44:	58021800 	.word	0x58021800
 8008e48:	58021c00 	.word	0x58021c00
 8008e4c:	58022000 	.word	0x58022000
 8008e50:	58022400 	.word	0x58022400
 8008e54:	2300      	movs	r3, #0
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	f002 0203 	and.w	r2, r2, #3
 8008e5c:	0092      	lsls	r2, r2, #2
 8008e5e:	4093      	lsls	r3, r2
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e66:	4938      	ldr	r1, [pc, #224]	; (8008f48 <HAL_GPIO_Init+0x35c>)
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	089b      	lsrs	r3, r3, #2
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	69ba      	ldr	r2, [r7, #24]
 8008e80:	4013      	ands	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008e90:	69ba      	ldr	r2, [r7, #24]
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	43db      	mvns	r3, r3
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	4013      	ands	r3, r2
 8008eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	43db      	mvns	r3, r3
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	43db      	mvns	r3, r3
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	4013      	ands	r3, r2
 8008f06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	3301      	adds	r3, #1
 8008f28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	fa22 f303 	lsr.w	r3, r2, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f47f ae63 	bne.w	8008c00 <HAL_GPIO_Init+0x14>
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	bf00      	nop
 8008f3e:	3724      	adds	r7, #36	; 0x24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr
 8008f48:	58000400 	.word	0x58000400

08008f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	807b      	strh	r3, [r7, #2]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f5c:	787b      	ldrb	r3, [r7, #1]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d003      	beq.n	8008f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f62:	887a      	ldrh	r2, [r7, #2]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f68:	e003      	b.n	8008f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f6a:	887b      	ldrh	r3, [r7, #2]
 8008f6c:	041a      	lsls	r2, r3, #16
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	619a      	str	r2, [r3, #24]
}
 8008f72:	bf00      	nop
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
	...

08008f80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e07f      	b.n	8009092 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fb fab6 	bl	8004518 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2224      	movs	r2, #36	; 0x24
 8008fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f022 0201 	bic.w	r2, r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008fd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008fe0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d107      	bne.n	8008ffa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ff6:	609a      	str	r2, [r3, #8]
 8008ff8:	e006      	b.n	8009008 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009006:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	2b02      	cmp	r3, #2
 800900e:	d104      	bne.n	800901a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009018:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6859      	ldr	r1, [r3, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	4b1d      	ldr	r3, [pc, #116]	; (800909c <HAL_I2C_Init+0x11c>)
 8009026:	430b      	orrs	r3, r1
 8009028:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009038:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691a      	ldr	r2, [r3, #16]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	ea42 0103 	orr.w	r1, r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	021a      	lsls	r2, r3, #8
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69d9      	ldr	r1, [r3, #28]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6a1a      	ldr	r2, [r3, #32]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0201 	orr.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2220      	movs	r2, #32
 800907e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	02008000 	.word	0x02008000

080090a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	4608      	mov	r0, r1
 80090aa:	4611      	mov	r1, r2
 80090ac:	461a      	mov	r2, r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	817b      	strh	r3, [r7, #10]
 80090b2:	460b      	mov	r3, r1
 80090b4:	813b      	strh	r3, [r7, #8]
 80090b6:	4613      	mov	r3, r2
 80090b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	f040 80f9 	bne.w	80092ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <HAL_I2C_Mem_Write+0x34>
 80090ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d105      	bne.n	80090e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e0ed      	b.n	80092bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d101      	bne.n	80090ee <HAL_I2C_Mem_Write+0x4e>
 80090ea:	2302      	movs	r3, #2
 80090ec:	e0e6      	b.n	80092bc <HAL_I2C_Mem_Write+0x21c>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80090f6:	f7fc fdd9 	bl	8005cac <HAL_GetTick>
 80090fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	2319      	movs	r3, #25
 8009102:	2201      	movs	r2, #1
 8009104:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f001 fee3 	bl	800aed4 <I2C_WaitOnFlagUntilTimeout>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e0d1      	b.n	80092bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2221      	movs	r2, #33	; 0x21
 800911c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2240      	movs	r2, #64	; 0x40
 8009124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a3a      	ldr	r2, [r7, #32]
 8009132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009138:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009140:	88f8      	ldrh	r0, [r7, #6]
 8009142:	893a      	ldrh	r2, [r7, #8]
 8009144:	8979      	ldrh	r1, [r7, #10]
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	9301      	str	r3, [sp, #4]
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	4603      	mov	r3, r0
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 ff23 	bl	8009f9c <I2C_RequestMemoryWrite>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e0a9      	b.n	80092bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916c:	b29b      	uxth	r3, r3
 800916e:	2bff      	cmp	r3, #255	; 0xff
 8009170:	d90e      	bls.n	8009190 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	22ff      	movs	r2, #255	; 0xff
 8009176:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917c:	b2da      	uxtb	r2, r3
 800917e:	8979      	ldrh	r1, [r7, #10]
 8009180:	2300      	movs	r3, #0
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009188:	68f8      	ldr	r0, [r7, #12]
 800918a:	f001 ffc5 	bl	800b118 <I2C_TransferConfig>
 800918e:	e00f      	b.n	80091b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	8979      	ldrh	r1, [r7, #10]
 80091a2:	2300      	movs	r3, #0
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f001 ffb4 	bl	800b118 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f001 fecd 	bl	800af54 <I2C_WaitOnTXISFlagUntilTimeout>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e07b      	b.n	80092bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	781a      	ldrb	r2, [r3, #0]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091de:	b29b      	uxth	r3, r3
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d034      	beq.n	8009268 <HAL_I2C_Mem_Write+0x1c8>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009202:	2b00      	cmp	r3, #0
 8009204:	d130      	bne.n	8009268 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	2200      	movs	r2, #0
 800920e:	2180      	movs	r1, #128	; 0x80
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f001 fe5f 	bl	800aed4 <I2C_WaitOnFlagUntilTimeout>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d001      	beq.n	8009220 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e04d      	b.n	80092bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009224:	b29b      	uxth	r3, r3
 8009226:	2bff      	cmp	r3, #255	; 0xff
 8009228:	d90e      	bls.n	8009248 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	22ff      	movs	r2, #255	; 0xff
 800922e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009234:	b2da      	uxtb	r2, r3
 8009236:	8979      	ldrh	r1, [r7, #10]
 8009238:	2300      	movs	r3, #0
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f001 ff69 	bl	800b118 <I2C_TransferConfig>
 8009246:	e00f      	b.n	8009268 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009256:	b2da      	uxtb	r2, r3
 8009258:	8979      	ldrh	r1, [r7, #10]
 800925a:	2300      	movs	r3, #0
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f001 ff58 	bl	800b118 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800926c:	b29b      	uxth	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	d19e      	bne.n	80091b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f001 feac 	bl	800afd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e01a      	b.n	80092bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2220      	movs	r2, #32
 800928c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6859      	ldr	r1, [r3, #4]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	4b0a      	ldr	r3, [pc, #40]	; (80092c4 <HAL_I2C_Mem_Write+0x224>)
 800929a:	400b      	ands	r3, r1
 800929c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2220      	movs	r2, #32
 80092a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	e000      	b.n	80092bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80092ba:	2302      	movs	r3, #2
  }
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}
 80092c4:	fe00e800 	.word	0xfe00e800

080092c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b088      	sub	sp, #32
 80092cc:	af02      	add	r7, sp, #8
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	4608      	mov	r0, r1
 80092d2:	4611      	mov	r1, r2
 80092d4:	461a      	mov	r2, r3
 80092d6:	4603      	mov	r3, r0
 80092d8:	817b      	strh	r3, [r7, #10]
 80092da:	460b      	mov	r3, r1
 80092dc:	813b      	strh	r3, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b20      	cmp	r3, #32
 80092ec:	f040 80fd 	bne.w	80094ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <HAL_I2C_Mem_Read+0x34>
 80092f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009302:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e0f1      	b.n	80094ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <HAL_I2C_Mem_Read+0x4e>
 8009312:	2302      	movs	r3, #2
 8009314:	e0ea      	b.n	80094ec <HAL_I2C_Mem_Read+0x224>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800931e:	f7fc fcc5 	bl	8005cac <HAL_GetTick>
 8009322:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	2319      	movs	r3, #25
 800932a:	2201      	movs	r2, #1
 800932c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f001 fdcf 	bl	800aed4 <I2C_WaitOnFlagUntilTimeout>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e0d5      	b.n	80094ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2222      	movs	r2, #34	; 0x22
 8009344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2240      	movs	r2, #64	; 0x40
 800934c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6a3a      	ldr	r2, [r7, #32]
 800935a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009360:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009368:	88f8      	ldrh	r0, [r7, #6]
 800936a:	893a      	ldrh	r2, [r7, #8]
 800936c:	8979      	ldrh	r1, [r7, #10]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	4603      	mov	r3, r0
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f000 fe63 	bl	800a044 <I2C_RequestMemoryRead>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d005      	beq.n	8009390 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e0ad      	b.n	80094ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009394:	b29b      	uxth	r3, r3
 8009396:	2bff      	cmp	r3, #255	; 0xff
 8009398:	d90e      	bls.n	80093b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	22ff      	movs	r2, #255	; 0xff
 800939e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	8979      	ldrh	r1, [r7, #10]
 80093a8:	4b52      	ldr	r3, [pc, #328]	; (80094f4 <HAL_I2C_Mem_Read+0x22c>)
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f001 feb1 	bl	800b118 <I2C_TransferConfig>
 80093b6:	e00f      	b.n	80093d8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093bc:	b29a      	uxth	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	8979      	ldrh	r1, [r7, #10]
 80093ca:	4b4a      	ldr	r3, [pc, #296]	; (80094f4 <HAL_I2C_Mem_Read+0x22c>)
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f001 fea0 	bl	800b118 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	2200      	movs	r2, #0
 80093e0:	2104      	movs	r1, #4
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f001 fd76 	bl	800aed4 <I2C_WaitOnFlagUntilTimeout>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e07c      	b.n	80094ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fc:	b2d2      	uxtb	r2, r2
 80093fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800940e:	3b01      	subs	r3, #1
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800941a:	b29b      	uxth	r3, r3
 800941c:	3b01      	subs	r3, #1
 800941e:	b29a      	uxth	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d034      	beq.n	8009498 <HAL_I2C_Mem_Read+0x1d0>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009432:	2b00      	cmp	r3, #0
 8009434:	d130      	bne.n	8009498 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	2200      	movs	r2, #0
 800943e:	2180      	movs	r1, #128	; 0x80
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f001 fd47 	bl	800aed4 <I2C_WaitOnFlagUntilTimeout>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e04d      	b.n	80094ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009454:	b29b      	uxth	r3, r3
 8009456:	2bff      	cmp	r3, #255	; 0xff
 8009458:	d90e      	bls.n	8009478 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	22ff      	movs	r2, #255	; 0xff
 800945e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009464:	b2da      	uxtb	r2, r3
 8009466:	8979      	ldrh	r1, [r7, #10]
 8009468:	2300      	movs	r3, #0
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 fe51 	bl	800b118 <I2C_TransferConfig>
 8009476:	e00f      	b.n	8009498 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947c:	b29a      	uxth	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009486:	b2da      	uxtb	r2, r3
 8009488:	8979      	ldrh	r1, [r7, #10]
 800948a:	2300      	movs	r3, #0
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f001 fe40 	bl	800b118 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800949c:	b29b      	uxth	r3, r3
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d19a      	bne.n	80093d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f001 fd94 	bl	800afd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d001      	beq.n	80094b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e01a      	b.n	80094ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2220      	movs	r2, #32
 80094bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6859      	ldr	r1, [r3, #4]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	4b0b      	ldr	r3, [pc, #44]	; (80094f8 <HAL_I2C_Mem_Read+0x230>)
 80094ca:	400b      	ands	r3, r1
 80094cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	e000      	b.n	80094ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80094ea:	2302      	movs	r3, #2
  }
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	80002400 	.word	0x80002400
 80094f8:	fe00e800 	.word	0xfe00e800

080094fc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08a      	sub	sp, #40	; 0x28
 8009500:	af02      	add	r7, sp, #8
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	461a      	mov	r2, r3
 800950a:	4603      	mov	r3, r0
 800950c:	817b      	strh	r3, [r7, #10]
 800950e:	460b      	mov	r3, r1
 8009510:	813b      	strh	r3, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b20      	cmp	r3, #32
 8009520:	f040 80d5 	bne.w	80096ce <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <HAL_I2C_Mem_Read_DMA+0x34>
 800952a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800952c:	2b00      	cmp	r3, #0
 800952e:	d105      	bne.n	800953c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009536:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e0c9      	b.n	80096d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800954a:	d101      	bne.n	8009550 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800954c:	2302      	movs	r3, #2
 800954e:	e0bf      	b.n	80096d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009556:	2b01      	cmp	r3, #1
 8009558:	d101      	bne.n	800955e <HAL_I2C_Mem_Read_DMA+0x62>
 800955a:	2302      	movs	r3, #2
 800955c:	e0b8      	b.n	80096d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009566:	f7fc fba1 	bl	8005cac <HAL_GetTick>
 800956a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2222      	movs	r2, #34	; 0x22
 8009570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2240      	movs	r2, #64	; 0x40
 8009578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800958c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	4a51      	ldr	r2, [pc, #324]	; (80096d8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8009592:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	4a51      	ldr	r2, [pc, #324]	; (80096dc <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8009598:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800959e:	b29b      	uxth	r3, r3
 80095a0:	2bff      	cmp	r3, #255	; 0xff
 80095a2:	d906      	bls.n	80095b2 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	22ff      	movs	r2, #255	; 0xff
 80095a8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80095aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e007      	b.n	80095c2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80095bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095c0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80095c2:	88f8      	ldrh	r0, [r7, #6]
 80095c4:	893a      	ldrh	r2, [r7, #8]
 80095c6:	8979      	ldrh	r1, [r7, #10]
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	2319      	movs	r3, #25
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	4603      	mov	r3, r0
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fd36 	bl	800a044 <I2C_RequestMemoryRead>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e072      	b.n	80096d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d020      	beq.n	8009634 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f6:	4a3a      	ldr	r2, [pc, #232]	; (80096e0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 80095f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fe:	4a39      	ldr	r2, [pc, #228]	; (80096e4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8009600:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009606:	2200      	movs	r2, #0
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960e:	2200      	movs	r2, #0
 8009610:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3324      	adds	r3, #36	; 0x24
 800961c:	4619      	mov	r1, r3
 800961e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009624:	f7fc ffea 	bl	80065fc <HAL_DMA_Start_IT>
 8009628:	4603      	mov	r3, r0
 800962a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d139      	bne.n	80096a6 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8009632:	e013      	b.n	800965c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2220      	movs	r2, #32
 8009638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009648:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e039      	b.n	80096d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009660:	b2da      	uxtb	r2, r3
 8009662:	8979      	ldrh	r1, [r7, #10]
 8009664:	4b20      	ldr	r3, [pc, #128]	; (80096e8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f001 fd54 	bl	800b118 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009674:	b29a      	uxth	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	b29a      	uxth	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800968a:	2110      	movs	r1, #16
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f001 fd71 	bl	800b174 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096a0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	e014      	b.n	80096d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2220      	movs	r2, #32
 80096aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ba:	f043 0210 	orr.w	r2, r3, #16
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e000      	b.n	80096d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80096ce:	2302      	movs	r3, #2
  }
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3720      	adds	r7, #32
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	ffff0000 	.word	0xffff0000
 80096dc:	080099f7 	.word	0x080099f7
 80096e0:	0800ab93 	.word	0x0800ab93
 80096e4:	0800ac29 	.word	0x0800ac29
 80096e8:	80002400 	.word	0x80002400

080096ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009708:	2b00      	cmp	r3, #0
 800970a:	d005      	beq.n	8009718 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	68f9      	ldr	r1, [r7, #12]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4798      	blx	r3
  }
}
 8009718:	bf00      	nop
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
 800977c:	4613      	mov	r3, r2
 800977e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800980c:	2b01      	cmp	r3, #1
 800980e:	d101      	bne.n	8009814 <I2C_Slave_ISR_IT+0x24>
 8009810:	2302      	movs	r3, #2
 8009812:	e0ec      	b.n	80099ee <I2C_Slave_ISR_IT+0x1fe>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	095b      	lsrs	r3, r3, #5
 8009820:	f003 0301 	and.w	r3, r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	d009      	beq.n	800983c <I2C_Slave_ISR_IT+0x4c>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	095b      	lsrs	r3, r3, #5
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009834:	6939      	ldr	r1, [r7, #16]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 fe42 	bl	800a4c0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	091b      	lsrs	r3, r3, #4
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d04d      	beq.n	80098e4 <I2C_Slave_ISR_IT+0xf4>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	091b      	lsrs	r3, r3, #4
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d047      	beq.n	80098e4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d128      	bne.n	80098b0 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b28      	cmp	r3, #40	; 0x28
 8009868:	d108      	bne.n	800987c <I2C_Slave_ISR_IT+0x8c>
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009870:	d104      	bne.n	800987c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009872:	6939      	ldr	r1, [r7, #16]
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f001 f81b 	bl	800a8b0 <I2C_ITListenCplt>
 800987a:	e032      	b.n	80098e2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b29      	cmp	r3, #41	; 0x29
 8009886:	d10e      	bne.n	80098a6 <I2C_Slave_ISR_IT+0xb6>
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800988e:	d00a      	beq.n	80098a6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2210      	movs	r2, #16
 8009896:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f001 f956 	bl	800ab4a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f000 fce5 	bl	800a26e <I2C_ITSlaveSeqCplt>
 80098a4:	e01d      	b.n	80098e2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2210      	movs	r2, #16
 80098ac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80098ae:	e096      	b.n	80099de <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2210      	movs	r2, #16
 80098b6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098bc:	f043 0204 	orr.w	r2, r3, #4
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d004      	beq.n	80098d4 <I2C_Slave_ISR_IT+0xe4>
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80098d0:	f040 8085 	bne.w	80099de <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098d8:	4619      	mov	r1, r3
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f001 f83e 	bl	800a95c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80098e0:	e07d      	b.n	80099de <I2C_Slave_ISR_IT+0x1ee>
 80098e2:	e07c      	b.n	80099de <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	089b      	lsrs	r3, r3, #2
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d030      	beq.n	8009952 <I2C_Slave_ISR_IT+0x162>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	089b      	lsrs	r3, r3, #2
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d02a      	beq.n	8009952 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009900:	b29b      	uxth	r3, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d018      	beq.n	8009938 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	b2d2      	uxtb	r2, r2
 8009912:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009918:	1c5a      	adds	r2, r3, #1
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009922:	3b01      	subs	r3, #1
 8009924:	b29a      	uxth	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800992e:	b29b      	uxth	r3, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d14f      	bne.n	80099e2 <I2C_Slave_ISR_IT+0x1f2>
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009948:	d04b      	beq.n	80099e2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 fc8f 	bl	800a26e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009950:	e047      	b.n	80099e2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	08db      	lsrs	r3, r3, #3
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00a      	beq.n	8009974 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	08db      	lsrs	r3, r3, #3
 8009962:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009966:	2b00      	cmp	r3, #0
 8009968:	d004      	beq.n	8009974 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800996a:	6939      	ldr	r1, [r7, #16]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fbbd 	bl	800a0ec <I2C_ITAddrCplt>
 8009972:	e037      	b.n	80099e4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	085b      	lsrs	r3, r3, #1
 8009978:	f003 0301 	and.w	r3, r3, #1
 800997c:	2b00      	cmp	r3, #0
 800997e:	d031      	beq.n	80099e4 <I2C_Slave_ISR_IT+0x1f4>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	085b      	lsrs	r3, r3, #1
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d02b      	beq.n	80099e4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009990:	b29b      	uxth	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	d018      	beq.n	80099c8 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	781a      	ldrb	r2, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	3b01      	subs	r3, #1
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80099c6:	e00d      	b.n	80099e4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099ce:	d002      	beq.n	80099d6 <I2C_Slave_ISR_IT+0x1e6>
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d106      	bne.n	80099e4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fc49 	bl	800a26e <I2C_ITSlaveSeqCplt>
 80099dc:	e002      	b.n	80099e4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80099de:	bf00      	nop
 80099e0:	e000      	b.n	80099e4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80099e2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b088      	sub	sp, #32
 80099fa:	af02      	add	r7, sp, #8
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d101      	bne.n	8009a10 <I2C_Master_ISR_DMA+0x1a>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	e0e1      	b.n	8009bd4 <I2C_Master_ISR_DMA+0x1de>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2201      	movs	r2, #1
 8009a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	091b      	lsrs	r3, r3, #4
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d017      	beq.n	8009a54 <I2C_Master_ISR_DMA+0x5e>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	091b      	lsrs	r3, r3, #4
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d011      	beq.n	8009a54 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2210      	movs	r2, #16
 8009a36:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a3c:	f043 0204 	orr.w	r2, r3, #4
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009a44:	2120      	movs	r1, #32
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f001 fb94 	bl	800b174 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f001 f87c 	bl	800ab4a <I2C_Flush_TXDR>
 8009a52:	e0ba      	b.n	8009bca <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	09db      	lsrs	r3, r3, #7
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d072      	beq.n	8009b46 <I2C_Master_ISR_DMA+0x150>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	099b      	lsrs	r3, r3, #6
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d06c      	beq.n	8009b46 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a7a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d04e      	beq.n	8009b24 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a92:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2bff      	cmp	r3, #255	; 0xff
 8009a9c:	d906      	bls.n	8009aac <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	22ff      	movs	r2, #255	; 0xff
 8009aa2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8009aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	e010      	b.n	8009ace <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009abe:	d003      	beq.n	8009ac8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac4:	617b      	str	r3, [r7, #20]
 8009ac6:	e002      	b.n	8009ace <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009ac8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009acc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	8a79      	ldrh	r1, [r7, #18]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f001 fb1b 	bl	800b118 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b22      	cmp	r3, #34	; 0x22
 8009afe:	d108      	bne.n	8009b12 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009b10:	e05b      	b.n	8009bca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b20:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009b22:	e052      	b.n	8009bca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b32:	d003      	beq.n	8009b3c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f000 fb5d 	bl	800a1f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009b3a:	e046      	b.n	8009bca <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009b3c:	2140      	movs	r1, #64	; 0x40
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f000 ff0c 	bl	800a95c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009b44:	e041      	b.n	8009bca <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	099b      	lsrs	r3, r3, #6
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d029      	beq.n	8009ba6 <I2C_Master_ISR_DMA+0x1b0>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	099b      	lsrs	r3, r3, #6
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d023      	beq.n	8009ba6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d119      	bne.n	8009b9c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b76:	d027      	beq.n	8009bc8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b80:	d108      	bne.n	8009b94 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b90:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009b92:	e019      	b.n	8009bc8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f000 fb2d 	bl	800a1f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009b9a:	e015      	b.n	8009bc8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009b9c:	2140      	movs	r1, #64	; 0x40
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 fedc 	bl	800a95c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009ba4:	e010      	b.n	8009bc8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	095b      	lsrs	r3, r3, #5
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00b      	beq.n	8009bca <I2C_Master_ISR_DMA+0x1d4>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	095b      	lsrs	r3, r3, #5
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d005      	beq.n	8009bca <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fbb3 	bl	800a32c <I2C_ITMasterCplt>
 8009bc6:	e000      	b.n	8009bca <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009bc8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d101      	bne.n	8009c00 <I2C_Slave_ISR_DMA+0x24>
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e1c8      	b.n	8009f92 <I2C_Slave_ISR_DMA+0x3b6>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	095b      	lsrs	r3, r3, #5
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <I2C_Slave_ISR_DMA+0x4c>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	095b      	lsrs	r3, r3, #5
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009c20:	68b9      	ldr	r1, [r7, #8]
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 fc4c 	bl	800a4c0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	091b      	lsrs	r3, r3, #4
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 8199 	beq.w	8009f68 <I2C_Slave_ISR_DMA+0x38c>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	091b      	lsrs	r3, r3, #4
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 8192 	beq.w	8009f68 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	0b9b      	lsrs	r3, r3, #14
 8009c48:	f003 0301 	and.w	r3, r3, #1
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d106      	bne.n	8009c5e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	0bdb      	lsrs	r3, r3, #15
 8009c54:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 817e 	beq.w	8009f5a <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d07c      	beq.n	8009d60 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	0bdb      	lsrs	r3, r3, #15
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d076      	beq.n	8009d60 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a8d      	ldr	r2, [pc, #564]	; (8009eb0 <I2C_Slave_ISR_DMA+0x2d4>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d059      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a8b      	ldr	r2, [pc, #556]	; (8009eb4 <I2C_Slave_ISR_DMA+0x2d8>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d053      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a89      	ldr	r2, [pc, #548]	; (8009eb8 <I2C_Slave_ISR_DMA+0x2dc>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d04d      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a87      	ldr	r2, [pc, #540]	; (8009ebc <I2C_Slave_ISR_DMA+0x2e0>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d047      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a85      	ldr	r2, [pc, #532]	; (8009ec0 <I2C_Slave_ISR_DMA+0x2e4>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d041      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a83      	ldr	r2, [pc, #524]	; (8009ec4 <I2C_Slave_ISR_DMA+0x2e8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d03b      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a81      	ldr	r2, [pc, #516]	; (8009ec8 <I2C_Slave_ISR_DMA+0x2ec>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d035      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a7f      	ldr	r2, [pc, #508]	; (8009ecc <I2C_Slave_ISR_DMA+0x2f0>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d02f      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a7d      	ldr	r2, [pc, #500]	; (8009ed0 <I2C_Slave_ISR_DMA+0x2f4>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d029      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a7b      	ldr	r2, [pc, #492]	; (8009ed4 <I2C_Slave_ISR_DMA+0x2f8>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d023      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a79      	ldr	r2, [pc, #484]	; (8009ed8 <I2C_Slave_ISR_DMA+0x2fc>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d01d      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a77      	ldr	r2, [pc, #476]	; (8009edc <I2C_Slave_ISR_DMA+0x300>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d017      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a75      	ldr	r2, [pc, #468]	; (8009ee0 <I2C_Slave_ISR_DMA+0x304>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d011      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a73      	ldr	r2, [pc, #460]	; (8009ee4 <I2C_Slave_ISR_DMA+0x308>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00b      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a71      	ldr	r2, [pc, #452]	; (8009ee8 <I2C_Slave_ISR_DMA+0x30c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d005      	beq.n	8009d32 <I2C_Slave_ISR_DMA+0x156>
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a6f      	ldr	r2, [pc, #444]	; (8009eec <I2C_Slave_ISR_DMA+0x310>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d109      	bne.n	8009d46 <I2C_Slave_ISR_DMA+0x16a>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	bf0c      	ite	eq
 8009d3e:	2301      	moveq	r3, #1
 8009d40:	2300      	movne	r3, #0
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	e008      	b.n	8009d58 <I2C_Slave_ISR_DMA+0x17c>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	bf0c      	ite	eq
 8009d52:	2301      	moveq	r3, #1
 8009d54:	2300      	movne	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d07c      	beq.n	8009e62 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	0b9b      	lsrs	r3, r3, #14
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d076      	beq.n	8009e62 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a4d      	ldr	r2, [pc, #308]	; (8009eb0 <I2C_Slave_ISR_DMA+0x2d4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d059      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a4b      	ldr	r2, [pc, #300]	; (8009eb4 <I2C_Slave_ISR_DMA+0x2d8>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d053      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a49      	ldr	r2, [pc, #292]	; (8009eb8 <I2C_Slave_ISR_DMA+0x2dc>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d04d      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a47      	ldr	r2, [pc, #284]	; (8009ebc <I2C_Slave_ISR_DMA+0x2e0>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d047      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a45      	ldr	r2, [pc, #276]	; (8009ec0 <I2C_Slave_ISR_DMA+0x2e4>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d041      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a43      	ldr	r2, [pc, #268]	; (8009ec4 <I2C_Slave_ISR_DMA+0x2e8>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d03b      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a41      	ldr	r2, [pc, #260]	; (8009ec8 <I2C_Slave_ISR_DMA+0x2ec>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d035      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a3f      	ldr	r2, [pc, #252]	; (8009ecc <I2C_Slave_ISR_DMA+0x2f0>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d02f      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a3d      	ldr	r2, [pc, #244]	; (8009ed0 <I2C_Slave_ISR_DMA+0x2f4>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d029      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a3b      	ldr	r2, [pc, #236]	; (8009ed4 <I2C_Slave_ISR_DMA+0x2f8>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d023      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a39      	ldr	r2, [pc, #228]	; (8009ed8 <I2C_Slave_ISR_DMA+0x2fc>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d01d      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a37      	ldr	r2, [pc, #220]	; (8009edc <I2C_Slave_ISR_DMA+0x300>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d017      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a35      	ldr	r2, [pc, #212]	; (8009ee0 <I2C_Slave_ISR_DMA+0x304>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d011      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a33      	ldr	r2, [pc, #204]	; (8009ee4 <I2C_Slave_ISR_DMA+0x308>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d00b      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a31      	ldr	r2, [pc, #196]	; (8009ee8 <I2C_Slave_ISR_DMA+0x30c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d005      	beq.n	8009e34 <I2C_Slave_ISR_DMA+0x258>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a2f      	ldr	r2, [pc, #188]	; (8009eec <I2C_Slave_ISR_DMA+0x310>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d109      	bne.n	8009e48 <I2C_Slave_ISR_DMA+0x26c>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	bf0c      	ite	eq
 8009e40:	2301      	moveq	r3, #1
 8009e42:	2300      	movne	r3, #0
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	e008      	b.n	8009e5a <I2C_Slave_ISR_DMA+0x27e>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	bf0c      	ite	eq
 8009e54:	2301      	moveq	r3, #1
 8009e56:	2300      	movne	r3, #0
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d148      	bne.n	8009efa <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b28      	cmp	r3, #40	; 0x28
 8009e72:	d108      	bne.n	8009e86 <I2C_Slave_ISR_DMA+0x2aa>
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e7a:	d104      	bne.n	8009e86 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009e7c:	68b9      	ldr	r1, [r7, #8]
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 fd16 	bl	800a8b0 <I2C_ITListenCplt>
 8009e84:	e068      	b.n	8009f58 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b29      	cmp	r3, #41	; 0x29
 8009e90:	d12e      	bne.n	8009ef0 <I2C_Slave_ISR_DMA+0x314>
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009e98:	d02a      	beq.n	8009ef0 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2210      	movs	r2, #16
 8009ea0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 fe51 	bl	800ab4a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 f9e0 	bl	800a26e <I2C_ITSlaveSeqCplt>
 8009eae:	e053      	b.n	8009f58 <I2C_Slave_ISR_DMA+0x37c>
 8009eb0:	40020010 	.word	0x40020010
 8009eb4:	40020028 	.word	0x40020028
 8009eb8:	40020040 	.word	0x40020040
 8009ebc:	40020058 	.word	0x40020058
 8009ec0:	40020070 	.word	0x40020070
 8009ec4:	40020088 	.word	0x40020088
 8009ec8:	400200a0 	.word	0x400200a0
 8009ecc:	400200b8 	.word	0x400200b8
 8009ed0:	40020410 	.word	0x40020410
 8009ed4:	40020428 	.word	0x40020428
 8009ed8:	40020440 	.word	0x40020440
 8009edc:	40020458 	.word	0x40020458
 8009ee0:	40020470 	.word	0x40020470
 8009ee4:	40020488 	.word	0x40020488
 8009ee8:	400204a0 	.word	0x400204a0
 8009eec:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2210      	movs	r2, #16
 8009ef6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8009ef8:	e034      	b.n	8009f64 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2210      	movs	r2, #16
 8009f00:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f06:	f043 0204 	orr.w	r2, r3, #4
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f14:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d003      	beq.n	8009f24 <I2C_Slave_ISR_DMA+0x348>
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f22:	d11f      	bne.n	8009f64 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	2b21      	cmp	r3, #33	; 0x21
 8009f28:	d002      	beq.n	8009f30 <I2C_Slave_ISR_DMA+0x354>
 8009f2a:	7dfb      	ldrb	r3, [r7, #23]
 8009f2c:	2b29      	cmp	r3, #41	; 0x29
 8009f2e:	d103      	bne.n	8009f38 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2221      	movs	r2, #33	; 0x21
 8009f34:	631a      	str	r2, [r3, #48]	; 0x30
 8009f36:	e008      	b.n	8009f4a <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009f38:	7dfb      	ldrb	r3, [r7, #23]
 8009f3a:	2b22      	cmp	r3, #34	; 0x22
 8009f3c:	d002      	beq.n	8009f44 <I2C_Slave_ISR_DMA+0x368>
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	2b2a      	cmp	r3, #42	; 0x2a
 8009f42:	d102      	bne.n	8009f4a <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2222      	movs	r2, #34	; 0x22
 8009f48:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f4e:	4619      	mov	r1, r3
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 fd03 	bl	800a95c <I2C_ITError>
      if (treatdmanack == 1U)
 8009f56:	e005      	b.n	8009f64 <I2C_Slave_ISR_DMA+0x388>
 8009f58:	e004      	b.n	8009f64 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2210      	movs	r2, #16
 8009f60:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f62:	e011      	b.n	8009f88 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8009f64:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f66:	e00f      	b.n	8009f88 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	08db      	lsrs	r3, r3, #3
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d009      	beq.n	8009f88 <I2C_Slave_ISR_DMA+0x3ac>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	08db      	lsrs	r3, r3, #3
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009f80:	68b9      	ldr	r1, [r7, #8]
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 f8b2 	bl	800a0ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3720      	adds	r7, #32
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop

08009f9c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af02      	add	r7, sp, #8
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	461a      	mov	r2, r3
 8009faa:	4603      	mov	r3, r0
 8009fac:	817b      	strh	r3, [r7, #10]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	813b      	strh	r3, [r7, #8]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009fb6:	88fb      	ldrh	r3, [r7, #6]
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	8979      	ldrh	r1, [r7, #10]
 8009fbc:	4b20      	ldr	r3, [pc, #128]	; (800a040 <I2C_RequestMemoryWrite+0xa4>)
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f001 f8a7 	bl	800b118 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fca:	69fa      	ldr	r2, [r7, #28]
 8009fcc:	69b9      	ldr	r1, [r7, #24]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 ffc0 	bl	800af54 <I2C_WaitOnTXISFlagUntilTimeout>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d001      	beq.n	8009fde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e02c      	b.n	800a038 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009fde:	88fb      	ldrh	r3, [r7, #6]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d105      	bne.n	8009ff0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009fe4:	893b      	ldrh	r3, [r7, #8]
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	629a      	str	r2, [r3, #40]	; 0x28
 8009fee:	e015      	b.n	800a01c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009ff0:	893b      	ldrh	r3, [r7, #8]
 8009ff2:	0a1b      	lsrs	r3, r3, #8
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ffe:	69fa      	ldr	r2, [r7, #28]
 800a000:	69b9      	ldr	r1, [r7, #24]
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 ffa6 	bl	800af54 <I2C_WaitOnTXISFlagUntilTimeout>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e012      	b.n	800a038 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a012:	893b      	ldrh	r3, [r7, #8]
 800a014:	b2da      	uxtb	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	9300      	str	r3, [sp, #0]
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	2200      	movs	r2, #0
 800a024:	2180      	movs	r1, #128	; 0x80
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f000 ff54 	bl	800aed4 <I2C_WaitOnFlagUntilTimeout>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d001      	beq.n	800a036 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	80002000 	.word	0x80002000

0800a044 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af02      	add	r7, sp, #8
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	4608      	mov	r0, r1
 800a04e:	4611      	mov	r1, r2
 800a050:	461a      	mov	r2, r3
 800a052:	4603      	mov	r3, r0
 800a054:	817b      	strh	r3, [r7, #10]
 800a056:	460b      	mov	r3, r1
 800a058:	813b      	strh	r3, [r7, #8]
 800a05a:	4613      	mov	r3, r2
 800a05c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a05e:	88fb      	ldrh	r3, [r7, #6]
 800a060:	b2da      	uxtb	r2, r3
 800a062:	8979      	ldrh	r1, [r7, #10]
 800a064:	4b20      	ldr	r3, [pc, #128]	; (800a0e8 <I2C_RequestMemoryRead+0xa4>)
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	2300      	movs	r3, #0
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f001 f854 	bl	800b118 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	69b9      	ldr	r1, [r7, #24]
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 ff6d 	bl	800af54 <I2C_WaitOnTXISFlagUntilTimeout>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e02c      	b.n	800a0de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a084:	88fb      	ldrh	r3, [r7, #6]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d105      	bne.n	800a096 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a08a:	893b      	ldrh	r3, [r7, #8]
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	629a      	str	r2, [r3, #40]	; 0x28
 800a094:	e015      	b.n	800a0c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a096:	893b      	ldrh	r3, [r7, #8]
 800a098:	0a1b      	lsrs	r3, r3, #8
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0a4:	69fa      	ldr	r2, [r7, #28]
 800a0a6:	69b9      	ldr	r1, [r7, #24]
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 ff53 	bl	800af54 <I2C_WaitOnTXISFlagUntilTimeout>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d001      	beq.n	800a0b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e012      	b.n	800a0de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0b8:	893b      	ldrh	r3, [r7, #8]
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2140      	movs	r1, #64	; 0x40
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 ff01 	bl	800aed4 <I2C_WaitOnFlagUntilTimeout>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e000      	b.n	800a0de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	80002000 	.word	0x80002000

0800a0ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a102:	2b28      	cmp	r3, #40	; 0x28
 800a104:	d16a      	bne.n	800a1dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	0c1b      	lsrs	r3, r3, #16
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	0c1b      	lsrs	r3, r3, #16
 800a11e:	b29b      	uxth	r3, r3
 800a120:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a124:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a132:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a140:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	2b02      	cmp	r3, #2
 800a148:	d138      	bne.n	800a1bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800a14a:	897b      	ldrh	r3, [r7, #10]
 800a14c:	09db      	lsrs	r3, r3, #7
 800a14e:	b29a      	uxth	r2, r3
 800a150:	89bb      	ldrh	r3, [r7, #12]
 800a152:	4053      	eors	r3, r2
 800a154:	b29b      	uxth	r3, r3
 800a156:	f003 0306 	and.w	r3, r3, #6
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d11c      	bne.n	800a198 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800a15e:	897b      	ldrh	r3, [r7, #10]
 800a160:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a166:	1c5a      	adds	r2, r3, #1
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a170:	2b02      	cmp	r3, #2
 800a172:	d13b      	bne.n	800a1ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2208      	movs	r2, #8
 800a180:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a18a:	89ba      	ldrh	r2, [r7, #12]
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff faed 	bl	8009770 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a196:	e029      	b.n	800a1ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800a198:	893b      	ldrh	r3, [r7, #8]
 800a19a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a19c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f001 f84b 	bl	800b23c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a1ae:	89ba      	ldrh	r2, [r7, #12]
 800a1b0:	7bfb      	ldrb	r3, [r7, #15]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f7ff fadb 	bl	8009770 <HAL_I2C_AddrCallback>
}
 800a1ba:	e017      	b.n	800a1ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a1bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f001 f83b 	bl	800b23c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a1ce:	89ba      	ldrh	r2, [r7, #12]
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7ff facb 	bl	8009770 <HAL_I2C_AddrCallback>
}
 800a1da:	e007      	b.n	800a1ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800a1ec:	bf00      	nop
 800a1ee:	3710      	adds	r7, #16
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b21      	cmp	r3, #33	; 0x21
 800a20e:	d115      	bne.n	800a23c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2220      	movs	r2, #32
 800a214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2211      	movs	r2, #17
 800a21c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a224:	2101      	movs	r1, #1
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f001 f808 	bl	800b23c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff fa73 	bl	8009720 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a23a:	e014      	b.n	800a266 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2220      	movs	r2, #32
 800a240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2212      	movs	r2, #18
 800a248:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a250:	2102      	movs	r1, #2
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fff2 	bl	800b23c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff fa67 	bl	8009734 <HAL_I2C_MasterRxCpltCallback>
}
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b084      	sub	sp, #16
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	0b9b      	lsrs	r3, r3, #14
 800a28a:	f003 0301 	and.w	r3, r3, #1
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d008      	beq.n	800a2a4 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	e00d      	b.n	800a2c0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	0bdb      	lsrs	r3, r3, #15
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d007      	beq.n	800a2c0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a2be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b29      	cmp	r3, #41	; 0x29
 800a2ca:	d112      	bne.n	800a2f2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2228      	movs	r2, #40	; 0x28
 800a2d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2221      	movs	r2, #33	; 0x21
 800a2d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a2da:	2101      	movs	r1, #1
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 ffad 	bl	800b23c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff fa2c 	bl	8009748 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a2f0:	e017      	b.n	800a322 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fc:	d111      	bne.n	800a322 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2228      	movs	r2, #40	; 0x28
 800a302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2222      	movs	r2, #34	; 0x22
 800a30a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a30c:	2102      	movs	r1, #2
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 ff94 	bl	800b23c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff fa1d 	bl	800975c <HAL_I2C_SlaveRxCpltCallback>
}
 800a322:	bf00      	nop
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
	...

0800a32c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2220      	movs	r2, #32
 800a340:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b21      	cmp	r3, #33	; 0x21
 800a34c:	d107      	bne.n	800a35e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a34e:	2101      	movs	r1, #1
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 ff73 	bl	800b23c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2211      	movs	r2, #17
 800a35a:	631a      	str	r2, [r3, #48]	; 0x30
 800a35c:	e00c      	b.n	800a378 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b22      	cmp	r3, #34	; 0x22
 800a368:	d106      	bne.n	800a378 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a36a:	2102      	movs	r1, #2
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 ff65 	bl	800b23c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2212      	movs	r2, #18
 800a376:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6859      	ldr	r1, [r3, #4]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	4b4d      	ldr	r3, [pc, #308]	; (800a4b8 <I2C_ITMasterCplt+0x18c>)
 800a384:	400b      	ands	r3, r1
 800a386:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a4a      	ldr	r2, [pc, #296]	; (800a4bc <I2C_ITMasterCplt+0x190>)
 800a392:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	091b      	lsrs	r3, r3, #4
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d009      	beq.n	800a3b4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2210      	movs	r2, #16
 800a3a6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ac:	f043 0204 	orr.w	r2, r3, #4
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b60      	cmp	r3, #96	; 0x60
 800a3be:	d10b      	bne.n	800a3d8 <I2C_ITMasterCplt+0xac>
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	089b      	lsrs	r3, r3, #2
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fbb6 	bl	800ab4a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b60      	cmp	r3, #96	; 0x60
 800a3ee:	d002      	beq.n	800a3f6 <I2C_ITMasterCplt+0xca>
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d006      	beq.n	800a404 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 faad 	bl	800a95c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a402:	e054      	b.n	800a4ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b21      	cmp	r3, #33	; 0x21
 800a40e:	d124      	bne.n	800a45a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2220      	movs	r2, #32
 800a414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b40      	cmp	r3, #64	; 0x40
 800a428:	d10b      	bne.n	800a442 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f7ff f9b0 	bl	80097a0 <HAL_I2C_MemTxCpltCallback>
}
 800a440:	e035      	b.n	800a4ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff f964 	bl	8009720 <HAL_I2C_MasterTxCpltCallback>
}
 800a458:	e029      	b.n	800a4ae <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b22      	cmp	r3, #34	; 0x22
 800a464:	d123      	bne.n	800a4ae <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b40      	cmp	r3, #64	; 0x40
 800a47e:	d10b      	bne.n	800a498 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff f98f 	bl	80097b4 <HAL_I2C_MemRxCpltCallback>
}
 800a496:	e00a      	b.n	800a4ae <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f7ff f943 	bl	8009734 <HAL_I2C_MasterRxCpltCallback>
}
 800a4ae:	bf00      	nop
 800a4b0:	3718      	adds	r7, #24
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	fe00e800 	.word	0xfe00e800
 800a4bc:	ffff0000 	.word	0xffff0000

0800a4c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4dc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
 800a4e8:	2b21      	cmp	r3, #33	; 0x21
 800a4ea:	d002      	beq.n	800a4f2 <I2C_ITSlaveCplt+0x32>
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
 800a4ee:	2b29      	cmp	r3, #41	; 0x29
 800a4f0:	d108      	bne.n	800a504 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a4f2:	f248 0101 	movw	r1, #32769	; 0x8001
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fea0 	bl	800b23c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2221      	movs	r2, #33	; 0x21
 800a500:	631a      	str	r2, [r3, #48]	; 0x30
 800a502:	e00d      	b.n	800a520 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	2b22      	cmp	r3, #34	; 0x22
 800a508:	d002      	beq.n	800a510 <I2C_ITSlaveCplt+0x50>
 800a50a:	7bfb      	ldrb	r3, [r7, #15]
 800a50c:	2b2a      	cmp	r3, #42	; 0x2a
 800a50e:	d107      	bne.n	800a520 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a510:	f248 0102 	movw	r1, #32770	; 0x8002
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fe91 	bl	800b23c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2222      	movs	r2, #34	; 0x22
 800a51e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a52e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6859      	ldr	r1, [r3, #4]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	4b80      	ldr	r3, [pc, #512]	; (800a73c <I2C_ITSlaveCplt+0x27c>)
 800a53c:	400b      	ands	r3, r1
 800a53e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fb02 	bl	800ab4a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	0b9b      	lsrs	r3, r3, #14
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d07a      	beq.n	800a648 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a560:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 8111 	beq.w	800a78e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a73      	ldr	r2, [pc, #460]	; (800a740 <I2C_ITSlaveCplt+0x280>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d059      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a71      	ldr	r2, [pc, #452]	; (800a744 <I2C_ITSlaveCplt+0x284>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d053      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a6f      	ldr	r2, [pc, #444]	; (800a748 <I2C_ITSlaveCplt+0x288>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d04d      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a6d      	ldr	r2, [pc, #436]	; (800a74c <I2C_ITSlaveCplt+0x28c>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d047      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a6b      	ldr	r2, [pc, #428]	; (800a750 <I2C_ITSlaveCplt+0x290>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d041      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a69      	ldr	r2, [pc, #420]	; (800a754 <I2C_ITSlaveCplt+0x294>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d03b      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a67      	ldr	r2, [pc, #412]	; (800a758 <I2C_ITSlaveCplt+0x298>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d035      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a65      	ldr	r2, [pc, #404]	; (800a75c <I2C_ITSlaveCplt+0x29c>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d02f      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a63      	ldr	r2, [pc, #396]	; (800a760 <I2C_ITSlaveCplt+0x2a0>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d029      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a61      	ldr	r2, [pc, #388]	; (800a764 <I2C_ITSlaveCplt+0x2a4>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d023      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a5f      	ldr	r2, [pc, #380]	; (800a768 <I2C_ITSlaveCplt+0x2a8>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d01d      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a5d      	ldr	r2, [pc, #372]	; (800a76c <I2C_ITSlaveCplt+0x2ac>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d017      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a5b      	ldr	r2, [pc, #364]	; (800a770 <I2C_ITSlaveCplt+0x2b0>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d011      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a59      	ldr	r2, [pc, #356]	; (800a774 <I2C_ITSlaveCplt+0x2b4>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d00b      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a57      	ldr	r2, [pc, #348]	; (800a778 <I2C_ITSlaveCplt+0x2b8>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d005      	beq.n	800a62c <I2C_ITSlaveCplt+0x16c>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a55      	ldr	r2, [pc, #340]	; (800a77c <I2C_ITSlaveCplt+0x2bc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d105      	bne.n	800a638 <I2C_ITSlaveCplt+0x178>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	b29b      	uxth	r3, r3
 800a636:	e004      	b.n	800a642 <I2C_ITSlaveCplt+0x182>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	b29b      	uxth	r3, r3
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	8553      	strh	r3, [r2, #42]	; 0x2a
 800a646:	e0a2      	b.n	800a78e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	0bdb      	lsrs	r3, r3, #15
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 809c 	beq.w	800a78e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a664:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f000 808f 	beq.w	800a78e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a32      	ldr	r2, [pc, #200]	; (800a740 <I2C_ITSlaveCplt+0x280>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d059      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a30      	ldr	r2, [pc, #192]	; (800a744 <I2C_ITSlaveCplt+0x284>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d053      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a2e      	ldr	r2, [pc, #184]	; (800a748 <I2C_ITSlaveCplt+0x288>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d04d      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a2c      	ldr	r2, [pc, #176]	; (800a74c <I2C_ITSlaveCplt+0x28c>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d047      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a2a      	ldr	r2, [pc, #168]	; (800a750 <I2C_ITSlaveCplt+0x290>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d041      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a28      	ldr	r2, [pc, #160]	; (800a754 <I2C_ITSlaveCplt+0x294>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d03b      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a26      	ldr	r2, [pc, #152]	; (800a758 <I2C_ITSlaveCplt+0x298>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d035      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a24      	ldr	r2, [pc, #144]	; (800a75c <I2C_ITSlaveCplt+0x29c>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d02f      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a22      	ldr	r2, [pc, #136]	; (800a760 <I2C_ITSlaveCplt+0x2a0>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d029      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a20      	ldr	r2, [pc, #128]	; (800a764 <I2C_ITSlaveCplt+0x2a4>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d023      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a1e      	ldr	r2, [pc, #120]	; (800a768 <I2C_ITSlaveCplt+0x2a8>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d01d      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a1c      	ldr	r2, [pc, #112]	; (800a76c <I2C_ITSlaveCplt+0x2ac>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d017      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a1a      	ldr	r2, [pc, #104]	; (800a770 <I2C_ITSlaveCplt+0x2b0>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d011      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a18      	ldr	r2, [pc, #96]	; (800a774 <I2C_ITSlaveCplt+0x2b4>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d00b      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a16      	ldr	r2, [pc, #88]	; (800a778 <I2C_ITSlaveCplt+0x2b8>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d005      	beq.n	800a730 <I2C_ITSlaveCplt+0x270>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a14      	ldr	r2, [pc, #80]	; (800a77c <I2C_ITSlaveCplt+0x2bc>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d127      	bne.n	800a780 <I2C_ITSlaveCplt+0x2c0>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	e026      	b.n	800a78a <I2C_ITSlaveCplt+0x2ca>
 800a73c:	fe00e800 	.word	0xfe00e800
 800a740:	40020010 	.word	0x40020010
 800a744:	40020028 	.word	0x40020028
 800a748:	40020040 	.word	0x40020040
 800a74c:	40020058 	.word	0x40020058
 800a750:	40020070 	.word	0x40020070
 800a754:	40020088 	.word	0x40020088
 800a758:	400200a0 	.word	0x400200a0
 800a75c:	400200b8 	.word	0x400200b8
 800a760:	40020410 	.word	0x40020410
 800a764:	40020428 	.word	0x40020428
 800a768:	40020440 	.word	0x40020440
 800a76c:	40020458 	.word	0x40020458
 800a770:	40020470 	.word	0x40020470
 800a774:	40020488 	.word	0x40020488
 800a778:	400204a0 	.word	0x400204a0
 800a77c:	400204b8 	.word	0x400204b8
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	089b      	lsrs	r3, r3, #2
 800a792:	f003 0301 	and.w	r3, r3, #1
 800a796:	2b00      	cmp	r3, #0
 800a798:	d020      	beq.n	800a7dc <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f023 0304 	bic.w	r3, r3, #4
 800a7a0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	b2d2      	uxtb	r2, r2
 800a7ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00c      	beq.n	800a7dc <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ea:	f043 0204 	orr.w	r2, r3, #4
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a804:	2b00      	cmp	r3, #0
 800a806:	d010      	beq.n	800a82a <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f000 f8a4 	bl	800a95c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b28      	cmp	r3, #40	; 0x28
 800a81e:	d141      	bne.n	800a8a4 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a820:	6979      	ldr	r1, [r7, #20]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f844 	bl	800a8b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a828:	e03c      	b.n	800a8a4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a832:	d014      	beq.n	800a85e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7ff fd1a 	bl	800a26e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a1b      	ldr	r2, [pc, #108]	; (800a8ac <I2C_ITSlaveCplt+0x3ec>)
 800a83e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2220      	movs	r2, #32
 800a844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f7fe ff98 	bl	800978c <HAL_I2C_ListenCpltCallback>
}
 800a85c:	e022      	b.n	800a8a4 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b22      	cmp	r3, #34	; 0x22
 800a868:	d10e      	bne.n	800a888 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2220      	movs	r2, #32
 800a86e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7fe ff6b 	bl	800975c <HAL_I2C_SlaveRxCpltCallback>
}
 800a886:	e00d      	b.n	800a8a4 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2220      	movs	r2, #32
 800a88c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7fe ff52 	bl	8009748 <HAL_I2C_SlaveTxCpltCallback>
}
 800a8a4:	bf00      	nop
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	ffff0000 	.word	0xffff0000

0800a8b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b082      	sub	sp, #8
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a26      	ldr	r2, [pc, #152]	; (800a958 <I2C_ITListenCplt+0xa8>)
 800a8be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2220      	movs	r2, #32
 800a8ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	089b      	lsrs	r3, r3, #2
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d022      	beq.n	800a92e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f2:	b2d2      	uxtb	r2, r2
 800a8f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a904:	2b00      	cmp	r3, #0
 800a906:	d012      	beq.n	800a92e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a90c:	3b01      	subs	r3, #1
 800a90e:	b29a      	uxth	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a918:	b29b      	uxth	r3, r3
 800a91a:	3b01      	subs	r3, #1
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a926:	f043 0204 	orr.w	r2, r3, #4
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a92e:	f248 0103 	movw	r1, #32771	; 0x8003
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fc82 	bl	800b23c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2210      	movs	r2, #16
 800a93e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7fe ff1f 	bl	800978c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	ffff0000 	.word	0xffff0000

0800a95c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a96c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a5d      	ldr	r2, [pc, #372]	; (800aaf0 <I2C_ITError+0x194>)
 800a97a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	431a      	orrs	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	2b28      	cmp	r3, #40	; 0x28
 800a992:	d005      	beq.n	800a9a0 <I2C_ITError+0x44>
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	2b29      	cmp	r3, #41	; 0x29
 800a998:	d002      	beq.n	800a9a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a99a:	7bfb      	ldrb	r3, [r7, #15]
 800a99c:	2b2a      	cmp	r3, #42	; 0x2a
 800a99e:	d10b      	bne.n	800a9b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a9a0:	2103      	movs	r1, #3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fc4a 	bl	800b23c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2228      	movs	r2, #40	; 0x28
 800a9ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a50      	ldr	r2, [pc, #320]	; (800aaf4 <I2C_ITError+0x198>)
 800a9b4:	635a      	str	r2, [r3, #52]	; 0x34
 800a9b6:	e011      	b.n	800a9dc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a9b8:	f248 0103 	movw	r1, #32771	; 0x8003
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fc3d 	bl	800b23c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b60      	cmp	r3, #96	; 0x60
 800a9cc:	d003      	beq.n	800a9d6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d039      	beq.n	800aa5e <I2C_ITError+0x102>
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2b11      	cmp	r3, #17
 800a9ee:	d002      	beq.n	800a9f6 <I2C_ITError+0x9a>
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2b21      	cmp	r3, #33	; 0x21
 800a9f4:	d133      	bne.n	800aa5e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa04:	d107      	bne.n	800aa16 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aa14:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fd fce4 	bl	80083e8 <HAL_DMA_GetState>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d017      	beq.n	800aa56 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa2a:	4a33      	ldr	r2, [pc, #204]	; (800aaf8 <I2C_ITError+0x19c>)
 800aa2c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fc fb66 	bl	800710c <HAL_DMA_Abort_IT>
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d04d      	beq.n	800aae2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aa50:	4610      	mov	r0, r2
 800aa52:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aa54:	e045      	b.n	800aae2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f000 f850 	bl	800aafc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aa5c:	e041      	b.n	800aae2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d039      	beq.n	800aada <I2C_ITError+0x17e>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2b12      	cmp	r3, #18
 800aa6a:	d002      	beq.n	800aa72 <I2C_ITError+0x116>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b22      	cmp	r3, #34	; 0x22
 800aa70:	d133      	bne.n	800aada <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa80:	d107      	bne.n	800aa92 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa90:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fd fca6 	bl	80083e8 <HAL_DMA_GetState>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d017      	beq.n	800aad2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa6:	4a14      	ldr	r2, [pc, #80]	; (800aaf8 <I2C_ITError+0x19c>)
 800aaa8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fc fb28 	bl	800710c <HAL_DMA_Abort_IT>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d011      	beq.n	800aae6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aacc:	4610      	mov	r0, r2
 800aace:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aad0:	e009      	b.n	800aae6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f812 	bl	800aafc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aad8:	e005      	b.n	800aae6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f80e 	bl	800aafc <I2C_TreatErrorCallback>
  }
}
 800aae0:	e002      	b.n	800aae8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800aae2:	bf00      	nop
 800aae4:	e000      	b.n	800aae8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800aae6:	bf00      	nop
}
 800aae8:	bf00      	nop
 800aaea:	3710      	adds	r7, #16
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	ffff0000 	.word	0xffff0000
 800aaf4:	080097f1 	.word	0x080097f1
 800aaf8:	0800ae99 	.word	0x0800ae99

0800aafc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b60      	cmp	r3, #96	; 0x60
 800ab0e:	d10e      	bne.n	800ab2e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2220      	movs	r2, #32
 800ab14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7fe fe58 	bl	80097dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ab2c:	e009      	b.n	800ab42 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f7fe fe43 	bl	80097c8 <HAL_I2C_ErrorCallback>
}
 800ab42:	bf00      	nop
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d103      	bne.n	800ab68 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2200      	movs	r2, #0
 800ab66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	699b      	ldr	r3, [r3, #24]
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d007      	beq.n	800ab86 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	699a      	ldr	r2, [r3, #24]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f042 0201 	orr.w	r2, r2, #1
 800ab84:	619a      	str	r2, [r3, #24]
  }
}
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b084      	sub	sp, #16
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab9e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800abae:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d104      	bne.n	800abc4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800abba:	2120      	movs	r1, #32
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f000 fad9 	bl	800b174 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800abc2:	e02d      	b.n	800ac20 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800abcc:	441a      	add	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	2bff      	cmp	r3, #255	; 0xff
 800abda:	d903      	bls.n	800abe4 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	22ff      	movs	r2, #255	; 0xff
 800abe0:	851a      	strh	r2, [r3, #40]	; 0x28
 800abe2:	e004      	b.n	800abee <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abe8:	b29a      	uxth	r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3324      	adds	r3, #36	; 0x24
 800abf8:	4619      	mov	r1, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfe:	461a      	mov	r2, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac04:	f7fb fcfa 	bl	80065fc <HAL_DMA_Start_IT>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d004      	beq.n	800ac18 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ac0e:	2110      	movs	r1, #16
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7ff fea3 	bl	800a95c <I2C_ITError>
}
 800ac16:	e003      	b.n	800ac20 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ac18:	2140      	movs	r1, #64	; 0x40
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f000 faaa 	bl	800b174 <I2C_Enable_IRQ>
}
 800ac20:	bf00      	nop
 800ac22:	3710      	adds	r7, #16
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800ac30:	2300      	movs	r3, #0
 800ac32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d076      	beq.n	800ad30 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a83      	ldr	r2, [pc, #524]	; (800ae58 <I2C_DMAError+0x230>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d059      	beq.n	800ad02 <I2C_DMAError+0xda>
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a81      	ldr	r2, [pc, #516]	; (800ae5c <I2C_DMAError+0x234>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d053      	beq.n	800ad02 <I2C_DMAError+0xda>
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a7f      	ldr	r2, [pc, #508]	; (800ae60 <I2C_DMAError+0x238>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d04d      	beq.n	800ad02 <I2C_DMAError+0xda>
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a7d      	ldr	r2, [pc, #500]	; (800ae64 <I2C_DMAError+0x23c>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d047      	beq.n	800ad02 <I2C_DMAError+0xda>
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a7b      	ldr	r2, [pc, #492]	; (800ae68 <I2C_DMAError+0x240>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d041      	beq.n	800ad02 <I2C_DMAError+0xda>
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a79      	ldr	r2, [pc, #484]	; (800ae6c <I2C_DMAError+0x244>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d03b      	beq.n	800ad02 <I2C_DMAError+0xda>
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a77      	ldr	r2, [pc, #476]	; (800ae70 <I2C_DMAError+0x248>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d035      	beq.n	800ad02 <I2C_DMAError+0xda>
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a75      	ldr	r2, [pc, #468]	; (800ae74 <I2C_DMAError+0x24c>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d02f      	beq.n	800ad02 <I2C_DMAError+0xda>
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a73      	ldr	r2, [pc, #460]	; (800ae78 <I2C_DMAError+0x250>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d029      	beq.n	800ad02 <I2C_DMAError+0xda>
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a71      	ldr	r2, [pc, #452]	; (800ae7c <I2C_DMAError+0x254>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d023      	beq.n	800ad02 <I2C_DMAError+0xda>
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a6f      	ldr	r2, [pc, #444]	; (800ae80 <I2C_DMAError+0x258>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d01d      	beq.n	800ad02 <I2C_DMAError+0xda>
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a6d      	ldr	r2, [pc, #436]	; (800ae84 <I2C_DMAError+0x25c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d017      	beq.n	800ad02 <I2C_DMAError+0xda>
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a6b      	ldr	r2, [pc, #428]	; (800ae88 <I2C_DMAError+0x260>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d011      	beq.n	800ad02 <I2C_DMAError+0xda>
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a69      	ldr	r2, [pc, #420]	; (800ae8c <I2C_DMAError+0x264>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d00b      	beq.n	800ad02 <I2C_DMAError+0xda>
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a67      	ldr	r2, [pc, #412]	; (800ae90 <I2C_DMAError+0x268>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d005      	beq.n	800ad02 <I2C_DMAError+0xda>
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a65      	ldr	r2, [pc, #404]	; (800ae94 <I2C_DMAError+0x26c>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d109      	bne.n	800ad16 <I2C_DMAError+0xee>
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	bf0c      	ite	eq
 800ad0e:	2301      	moveq	r3, #1
 800ad10:	2300      	movne	r3, #0
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	e008      	b.n	800ad28 <I2C_DMAError+0x100>
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	bf0c      	ite	eq
 800ad22:	2301      	moveq	r3, #1
 800ad24:	2300      	movne	r3, #0
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d076      	beq.n	800ae26 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a46      	ldr	r2, [pc, #280]	; (800ae58 <I2C_DMAError+0x230>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d059      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a44      	ldr	r2, [pc, #272]	; (800ae5c <I2C_DMAError+0x234>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d053      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a42      	ldr	r2, [pc, #264]	; (800ae60 <I2C_DMAError+0x238>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d04d      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a40      	ldr	r2, [pc, #256]	; (800ae64 <I2C_DMAError+0x23c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d047      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a3e      	ldr	r2, [pc, #248]	; (800ae68 <I2C_DMAError+0x240>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d041      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a3c      	ldr	r2, [pc, #240]	; (800ae6c <I2C_DMAError+0x244>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d03b      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a3a      	ldr	r2, [pc, #232]	; (800ae70 <I2C_DMAError+0x248>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d035      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a38      	ldr	r2, [pc, #224]	; (800ae74 <I2C_DMAError+0x24c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d02f      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a36      	ldr	r2, [pc, #216]	; (800ae78 <I2C_DMAError+0x250>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d029      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a34      	ldr	r2, [pc, #208]	; (800ae7c <I2C_DMAError+0x254>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d023      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a32      	ldr	r2, [pc, #200]	; (800ae80 <I2C_DMAError+0x258>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d01d      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a30      	ldr	r2, [pc, #192]	; (800ae84 <I2C_DMAError+0x25c>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d017      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a2e      	ldr	r2, [pc, #184]	; (800ae88 <I2C_DMAError+0x260>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d011      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a2c      	ldr	r2, [pc, #176]	; (800ae8c <I2C_DMAError+0x264>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d00b      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a2a      	ldr	r2, [pc, #168]	; (800ae90 <I2C_DMAError+0x268>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d005      	beq.n	800adf8 <I2C_DMAError+0x1d0>
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a28      	ldr	r2, [pc, #160]	; (800ae94 <I2C_DMAError+0x26c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d109      	bne.n	800ae0c <I2C_DMAError+0x1e4>
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bf0c      	ite	eq
 800ae04:	2301      	moveq	r3, #1
 800ae06:	2300      	movne	r3, #0
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	e008      	b.n	800ae1e <I2C_DMAError+0x1f6>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bf0c      	ite	eq
 800ae18:	2301      	moveq	r3, #1
 800ae1a:	2300      	movne	r3, #0
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 800ae22:	2301      	movs	r3, #1
 800ae24:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7fd faec 	bl	8008404 <HAL_DMA_GetError>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d00e      	beq.n	800ae50 <I2C_DMAError+0x228>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00b      	beq.n	800ae50 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae46:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ae48:	2110      	movs	r1, #16
 800ae4a:	68b8      	ldr	r0, [r7, #8]
 800ae4c:	f7ff fd86 	bl	800a95c <I2C_ITError>
  }
}
 800ae50:	bf00      	nop
 800ae52:	3710      	adds	r7, #16
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	40020010 	.word	0x40020010
 800ae5c:	40020028 	.word	0x40020028
 800ae60:	40020040 	.word	0x40020040
 800ae64:	40020058 	.word	0x40020058
 800ae68:	40020070 	.word	0x40020070
 800ae6c:	40020088 	.word	0x40020088
 800ae70:	400200a0 	.word	0x400200a0
 800ae74:	400200b8 	.word	0x400200b8
 800ae78:	40020410 	.word	0x40020410
 800ae7c:	40020428 	.word	0x40020428
 800ae80:	40020440 	.word	0x40020440
 800ae84:	40020458 	.word	0x40020458
 800ae88:	40020470 	.word	0x40020470
 800ae8c:	40020488 	.word	0x40020488
 800ae90:	400204a0 	.word	0x400204a0
 800ae94:	400204b8 	.word	0x400204b8

0800ae98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d003      	beq.n	800aec6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aec2:	2200      	movs	r2, #0
 800aec4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f7ff fe18 	bl	800aafc <I2C_TreatErrorCallback>
}
 800aecc:	bf00      	nop
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	603b      	str	r3, [r7, #0]
 800aee0:	4613      	mov	r3, r2
 800aee2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aee4:	e022      	b.n	800af2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeec:	d01e      	beq.n	800af2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeee:	f7fa fedd 	bl	8005cac <HAL_GetTick>
 800aef2:	4602      	mov	r2, r0
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d302      	bcc.n	800af04 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d113      	bne.n	800af2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af08:	f043 0220 	orr.w	r2, r3, #32
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2220      	movs	r2, #32
 800af14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e00f      	b.n	800af4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699a      	ldr	r2, [r3, #24]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	4013      	ands	r3, r2
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	429a      	cmp	r2, r3
 800af3a:	bf0c      	ite	eq
 800af3c:	2301      	moveq	r3, #1
 800af3e:	2300      	movne	r3, #0
 800af40:	b2db      	uxtb	r3, r3
 800af42:	461a      	mov	r2, r3
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	429a      	cmp	r2, r3
 800af48:	d0cd      	beq.n	800aee6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af60:	e02c      	b.n	800afbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 f870 	bl	800b04c <I2C_IsAcknowledgeFailed>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e02a      	b.n	800afcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7c:	d01e      	beq.n	800afbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af7e:	f7fa fe95 	bl	8005cac <HAL_GetTick>
 800af82:	4602      	mov	r2, r0
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d302      	bcc.n	800af94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d113      	bne.n	800afbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af98:	f043 0220 	orr.w	r2, r3, #32
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2220      	movs	r2, #32
 800afa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e007      	b.n	800afcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d1cb      	bne.n	800af62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800afe0:	e028      	b.n	800b034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 f830 	bl	800b04c <I2C_IsAcknowledgeFailed>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e026      	b.n	800b044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aff6:	f7fa fe59 	bl	8005cac <HAL_GetTick>
 800affa:	4602      	mov	r2, r0
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	429a      	cmp	r2, r3
 800b004:	d302      	bcc.n	800b00c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d113      	bne.n	800b034 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b010:	f043 0220 	orr.w	r2, r3, #32
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2220      	movs	r2, #32
 800b01c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2200      	movs	r2, #0
 800b02c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e007      	b.n	800b044 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	f003 0320 	and.w	r3, r3, #32
 800b03e:	2b20      	cmp	r3, #32
 800b040:	d1cf      	bne.n	800afe2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	f003 0310 	and.w	r3, r3, #16
 800b062:	2b10      	cmp	r3, #16
 800b064:	d151      	bne.n	800b10a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b066:	e022      	b.n	800b0ae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b06e:	d01e      	beq.n	800b0ae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b070:	f7fa fe1c 	bl	8005cac <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d302      	bcc.n	800b086 <I2C_IsAcknowledgeFailed+0x3a>
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d113      	bne.n	800b0ae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b08a:	f043 0220 	orr.w	r2, r3, #32
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2220      	movs	r2, #32
 800b096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e02e      	b.n	800b10c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f003 0320 	and.w	r3, r3, #32
 800b0b8:	2b20      	cmp	r3, #32
 800b0ba:	d1d5      	bne.n	800b068 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2210      	movs	r2, #16
 800b0c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f7ff fd3c 	bl	800ab4a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6859      	ldr	r1, [r3, #4]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	4b0d      	ldr	r3, [pc, #52]	; (800b114 <I2C_IsAcknowledgeFailed+0xc8>)
 800b0de:	400b      	ands	r3, r1
 800b0e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e6:	f043 0204 	orr.w	r2, r3, #4
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e000      	b.n	800b10c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	fe00e800 	.word	0xfe00e800

0800b118 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	607b      	str	r3, [r7, #4]
 800b122:	460b      	mov	r3, r1
 800b124:	817b      	strh	r3, [r7, #10]
 800b126:	4613      	mov	r3, r2
 800b128:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	0d5b      	lsrs	r3, r3, #21
 800b134:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b138:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <I2C_TransferConfig+0x58>)
 800b13a:	430b      	orrs	r3, r1
 800b13c:	43db      	mvns	r3, r3
 800b13e:	ea02 0103 	and.w	r1, r2, r3
 800b142:	897b      	ldrh	r3, [r7, #10]
 800b144:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b148:	7a7b      	ldrb	r3, [r7, #9]
 800b14a:	041b      	lsls	r3, r3, #16
 800b14c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b150:	431a      	orrs	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	431a      	orrs	r2, r3
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	431a      	orrs	r2, r3
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	430a      	orrs	r2, r1
 800b160:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800b162:	bf00      	nop
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	03ff63ff 	.word	0x03ff63ff

0800b174 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b180:	2300      	movs	r3, #0
 800b182:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b188:	4a2a      	ldr	r2, [pc, #168]	; (800b234 <I2C_Enable_IRQ+0xc0>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d004      	beq.n	800b198 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800b192:	4a29      	ldr	r2, [pc, #164]	; (800b238 <I2C_Enable_IRQ+0xc4>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d11d      	bne.n	800b1d4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b198:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da03      	bge.n	800b1a8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b1a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b1a8:	887b      	ldrh	r3, [r7, #2]
 800b1aa:	2b10      	cmp	r3, #16
 800b1ac:	d103      	bne.n	800b1b6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b1b4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b1b6:	887b      	ldrh	r3, [r7, #2]
 800b1b8:	2b20      	cmp	r3, #32
 800b1ba:	d103      	bne.n	800b1c4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800b1c2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b1c4:	887b      	ldrh	r3, [r7, #2]
 800b1c6:	2b40      	cmp	r3, #64	; 0x40
 800b1c8:	d125      	bne.n	800b216 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1d0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b1d2:	e020      	b.n	800b216 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b1d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da03      	bge.n	800b1e4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b1e2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b1e4:	887b      	ldrh	r3, [r7, #2]
 800b1e6:	f003 0301 	and.w	r3, r3, #1
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800b1f4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b1f6:	887b      	ldrh	r3, [r7, #2]
 800b1f8:	f003 0302 	and.w	r3, r3, #2
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d003      	beq.n	800b208 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800b206:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b208:	887b      	ldrh	r3, [r7, #2]
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	d103      	bne.n	800b216 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f043 0320 	orr.w	r3, r3, #32
 800b214:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6819      	ldr	r1, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68fa      	ldr	r2, [r7, #12]
 800b222:	430a      	orrs	r2, r1
 800b224:	601a      	str	r2, [r3, #0]
}
 800b226:	bf00      	nop
 800b228:	3714      	adds	r7, #20
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	080099f7 	.word	0x080099f7
 800b238:	08009bdd 	.word	0x08009bdd

0800b23c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b24c:	887b      	ldrh	r3, [r7, #2]
 800b24e:	f003 0301 	and.w	r3, r3, #1
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00f      	beq.n	800b276 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800b25c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b264:	b2db      	uxtb	r3, r3
 800b266:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b26a:	2b28      	cmp	r3, #40	; 0x28
 800b26c:	d003      	beq.n	800b276 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b274:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b276:	887b      	ldrh	r3, [r7, #2]
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00f      	beq.n	800b2a0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800b286:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b294:	2b28      	cmp	r3, #40	; 0x28
 800b296:	d003      	beq.n	800b2a0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800b29e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b2a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	da03      	bge.n	800b2b0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800b2ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b2b0:	887b      	ldrh	r3, [r7, #2]
 800b2b2:	2b10      	cmp	r3, #16
 800b2b4:	d103      	bne.n	800b2be <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800b2bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b2be:	887b      	ldrh	r3, [r7, #2]
 800b2c0:	2b20      	cmp	r3, #32
 800b2c2:	d103      	bne.n	800b2cc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f043 0320 	orr.w	r3, r3, #32
 800b2ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b2cc:	887b      	ldrh	r3, [r7, #2]
 800b2ce:	2b40      	cmp	r3, #64	; 0x40
 800b2d0:	d103      	bne.n	800b2da <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2d8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	6819      	ldr	r1, [r3, #0]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	43da      	mvns	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	400a      	ands	r2, r1
 800b2ea:	601a      	str	r2, [r3, #0]
}
 800b2ec:	bf00      	nop
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b20      	cmp	r3, #32
 800b30c:	d138      	bne.n	800b380 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b314:	2b01      	cmp	r3, #1
 800b316:	d101      	bne.n	800b31c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b318:	2302      	movs	r3, #2
 800b31a:	e032      	b.n	800b382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2224      	movs	r2, #36	; 0x24
 800b328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f022 0201 	bic.w	r2, r2, #1
 800b33a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b34a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6819      	ldr	r1, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	430a      	orrs	r2, r1
 800b35a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f042 0201 	orr.w	r2, r2, #1
 800b36a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2220      	movs	r2, #32
 800b370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	e000      	b.n	800b382 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b380:	2302      	movs	r3, #2
  }
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b38e:	b480      	push	{r7}
 800b390:	b085      	sub	sp, #20
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b20      	cmp	r3, #32
 800b3a2:	d139      	bne.n	800b418 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d101      	bne.n	800b3b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b3ae:	2302      	movs	r3, #2
 800b3b0:	e033      	b.n	800b41a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2224      	movs	r2, #36	; 0x24
 800b3be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0201 	bic.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b3e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	021b      	lsls	r3, r3, #8
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f042 0201 	orr.w	r2, r2, #1
 800b402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2220      	movs	r2, #32
 800b408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b414:	2300      	movs	r3, #0
 800b416:	e000      	b.n	800b41a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b418:	2302      	movs	r3, #2
  }
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3714      	adds	r7, #20
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
	...

0800b428 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b430:	4b19      	ldr	r3, [pc, #100]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f003 0304 	and.w	r3, r3, #4
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d00a      	beq.n	800b452 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b43c:	4b16      	ldr	r3, [pc, #88]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f003 0307 	and.w	r3, r3, #7
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d001      	beq.n	800b44e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e01f      	b.n	800b48e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	e01d      	b.n	800b48e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b452:	4b11      	ldr	r3, [pc, #68]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	f023 0207 	bic.w	r2, r3, #7
 800b45a:	490f      	ldr	r1, [pc, #60]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b462:	f7fa fc23 	bl	8005cac <HAL_GetTick>
 800b466:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b468:	e009      	b.n	800b47e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b46a:	f7fa fc1f 	bl	8005cac <HAL_GetTick>
 800b46e:	4602      	mov	r2, r0
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	1ad3      	subs	r3, r2, r3
 800b474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b478:	d901      	bls.n	800b47e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e007      	b.n	800b48e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b47e:	4b06      	ldr	r3, [pc, #24]	; (800b498 <HAL_PWREx_ConfigSupply+0x70>)
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b48a:	d1ee      	bne.n	800b46a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	58024800 	.word	0x58024800

0800b49c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08c      	sub	sp, #48	; 0x30
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	e3ff      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 0301 	and.w	r3, r3, #1
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 8087 	beq.w	800b5ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b4bc:	4b99      	ldr	r3, [pc, #612]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b4c6:	4b97      	ldr	r3, [pc, #604]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ce:	2b10      	cmp	r3, #16
 800b4d0:	d007      	beq.n	800b4e2 <HAL_RCC_OscConfig+0x46>
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	2b18      	cmp	r3, #24
 800b4d6:	d110      	bne.n	800b4fa <HAL_RCC_OscConfig+0x5e>
 800b4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d10b      	bne.n	800b4fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4e2:	4b90      	ldr	r3, [pc, #576]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d06c      	beq.n	800b5c8 <HAL_RCC_OscConfig+0x12c>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d168      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e3d9      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b502:	d106      	bne.n	800b512 <HAL_RCC_OscConfig+0x76>
 800b504:	4b87      	ldr	r3, [pc, #540]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a86      	ldr	r2, [pc, #536]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b50a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b50e:	6013      	str	r3, [r2, #0]
 800b510:	e02e      	b.n	800b570 <HAL_RCC_OscConfig+0xd4>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10c      	bne.n	800b534 <HAL_RCC_OscConfig+0x98>
 800b51a:	4b82      	ldr	r3, [pc, #520]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a81      	ldr	r2, [pc, #516]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	4b7f      	ldr	r3, [pc, #508]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a7e      	ldr	r2, [pc, #504]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b52c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b530:	6013      	str	r3, [r2, #0]
 800b532:	e01d      	b.n	800b570 <HAL_RCC_OscConfig+0xd4>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b53c:	d10c      	bne.n	800b558 <HAL_RCC_OscConfig+0xbc>
 800b53e:	4b79      	ldr	r3, [pc, #484]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a78      	ldr	r2, [pc, #480]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	4b76      	ldr	r3, [pc, #472]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a75      	ldr	r2, [pc, #468]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b554:	6013      	str	r3, [r2, #0]
 800b556:	e00b      	b.n	800b570 <HAL_RCC_OscConfig+0xd4>
 800b558:	4b72      	ldr	r3, [pc, #456]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a71      	ldr	r2, [pc, #452]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b55e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b562:	6013      	str	r3, [r2, #0]
 800b564:	4b6f      	ldr	r3, [pc, #444]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a6e      	ldr	r2, [pc, #440]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b56a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b56e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d013      	beq.n	800b5a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b578:	f7fa fb98 	bl	8005cac <HAL_GetTick>
 800b57c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b57e:	e008      	b.n	800b592 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b580:	f7fa fb94 	bl	8005cac <HAL_GetTick>
 800b584:	4602      	mov	r2, r0
 800b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	2b64      	cmp	r3, #100	; 0x64
 800b58c:	d901      	bls.n	800b592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b58e:	2303      	movs	r3, #3
 800b590:	e38d      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b592:	4b64      	ldr	r3, [pc, #400]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d0f0      	beq.n	800b580 <HAL_RCC_OscConfig+0xe4>
 800b59e:	e014      	b.n	800b5ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a0:	f7fa fb84 	bl	8005cac <HAL_GetTick>
 800b5a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b5a6:	e008      	b.n	800b5ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b5a8:	f7fa fb80 	bl	8005cac <HAL_GetTick>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	2b64      	cmp	r3, #100	; 0x64
 800b5b4:	d901      	bls.n	800b5ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e379      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b5ba:	4b5a      	ldr	r3, [pc, #360]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1f0      	bne.n	800b5a8 <HAL_RCC_OscConfig+0x10c>
 800b5c6:	e000      	b.n	800b5ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80ae 	beq.w	800b734 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5d8:	4b52      	ldr	r3, [pc, #328]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5e2:	4b50      	ldr	r3, [pc, #320]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d007      	beq.n	800b5fe <HAL_RCC_OscConfig+0x162>
 800b5ee:	6a3b      	ldr	r3, [r7, #32]
 800b5f0:	2b18      	cmp	r3, #24
 800b5f2:	d13a      	bne.n	800b66a <HAL_RCC_OscConfig+0x1ce>
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	f003 0303 	and.w	r3, r3, #3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d135      	bne.n	800b66a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5fe:	4b49      	ldr	r3, [pc, #292]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 0304 	and.w	r3, r3, #4
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <HAL_RCC_OscConfig+0x17a>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e34b      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b616:	f7fa fb79 	bl	8005d0c <HAL_GetREVID>
 800b61a:	4603      	mov	r3, r0
 800b61c:	f241 0203 	movw	r2, #4099	; 0x1003
 800b620:	4293      	cmp	r3, r2
 800b622:	d817      	bhi.n	800b654 <HAL_RCC_OscConfig+0x1b8>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	2b40      	cmp	r3, #64	; 0x40
 800b62a:	d108      	bne.n	800b63e <HAL_RCC_OscConfig+0x1a2>
 800b62c:	4b3d      	ldr	r3, [pc, #244]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b634:	4a3b      	ldr	r2, [pc, #236]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b63a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b63c:	e07a      	b.n	800b734 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b63e:	4b39      	ldr	r3, [pc, #228]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	031b      	lsls	r3, r3, #12
 800b64c:	4935      	ldr	r1, [pc, #212]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b64e:	4313      	orrs	r3, r2
 800b650:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b652:	e06f      	b.n	800b734 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b654:	4b33      	ldr	r3, [pc, #204]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	061b      	lsls	r3, r3, #24
 800b662:	4930      	ldr	r1, [pc, #192]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b664:	4313      	orrs	r3, r2
 800b666:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b668:	e064      	b.n	800b734 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d045      	beq.n	800b6fe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b672:	4b2c      	ldr	r3, [pc, #176]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f023 0219 	bic.w	r2, r3, #25
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	4929      	ldr	r1, [pc, #164]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b680:	4313      	orrs	r3, r2
 800b682:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b684:	f7fa fb12 	bl	8005cac <HAL_GetTick>
 800b688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b68a:	e008      	b.n	800b69e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b68c:	f7fa fb0e 	bl	8005cac <HAL_GetTick>
 800b690:	4602      	mov	r2, r0
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	2b02      	cmp	r3, #2
 800b698:	d901      	bls.n	800b69e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800b69a:	2303      	movs	r3, #3
 800b69c:	e307      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b69e:	4b21      	ldr	r3, [pc, #132]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f003 0304 	and.w	r3, r3, #4
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d0f0      	beq.n	800b68c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6aa:	f7fa fb2f 	bl	8005d0c <HAL_GetREVID>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	f241 0203 	movw	r2, #4099	; 0x1003
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d817      	bhi.n	800b6e8 <HAL_RCC_OscConfig+0x24c>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	2b40      	cmp	r3, #64	; 0x40
 800b6be:	d108      	bne.n	800b6d2 <HAL_RCC_OscConfig+0x236>
 800b6c0:	4b18      	ldr	r3, [pc, #96]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b6c8:	4a16      	ldr	r2, [pc, #88]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b6ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ce:	6053      	str	r3, [r2, #4]
 800b6d0:	e030      	b.n	800b734 <HAL_RCC_OscConfig+0x298>
 800b6d2:	4b14      	ldr	r3, [pc, #80]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	031b      	lsls	r3, r3, #12
 800b6e0:	4910      	ldr	r1, [pc, #64]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	604b      	str	r3, [r1, #4]
 800b6e6:	e025      	b.n	800b734 <HAL_RCC_OscConfig+0x298>
 800b6e8:	4b0e      	ldr	r3, [pc, #56]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	691b      	ldr	r3, [r3, #16]
 800b6f4:	061b      	lsls	r3, r3, #24
 800b6f6:	490b      	ldr	r1, [pc, #44]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	604b      	str	r3, [r1, #4]
 800b6fc:	e01a      	b.n	800b734 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6fe:	4b09      	ldr	r3, [pc, #36]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a08      	ldr	r2, [pc, #32]	; (800b724 <HAL_RCC_OscConfig+0x288>)
 800b704:	f023 0301 	bic.w	r3, r3, #1
 800b708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b70a:	f7fa facf 	bl	8005cac <HAL_GetTick>
 800b70e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b710:	e00a      	b.n	800b728 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b712:	f7fa facb 	bl	8005cac <HAL_GetTick>
 800b716:	4602      	mov	r2, r0
 800b718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71a:	1ad3      	subs	r3, r2, r3
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d903      	bls.n	800b728 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800b720:	2303      	movs	r3, #3
 800b722:	e2c4      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
 800b724:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b728:	4ba4      	ldr	r3, [pc, #656]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f003 0304 	and.w	r3, r3, #4
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1ee      	bne.n	800b712 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 80a9 	beq.w	800b894 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b742:	4b9e      	ldr	r3, [pc, #632]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b74a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b74c:	4b9b      	ldr	r3, [pc, #620]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b750:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	2b08      	cmp	r3, #8
 800b756:	d007      	beq.n	800b768 <HAL_RCC_OscConfig+0x2cc>
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	2b18      	cmp	r3, #24
 800b75c:	d13a      	bne.n	800b7d4 <HAL_RCC_OscConfig+0x338>
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	f003 0303 	and.w	r3, r3, #3
 800b764:	2b01      	cmp	r3, #1
 800b766:	d135      	bne.n	800b7d4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b768:	4b94      	ldr	r3, [pc, #592]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <HAL_RCC_OscConfig+0x2e4>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	2b80      	cmp	r3, #128	; 0x80
 800b77a:	d001      	beq.n	800b780 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e296      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b780:	f7fa fac4 	bl	8005d0c <HAL_GetREVID>
 800b784:	4603      	mov	r3, r0
 800b786:	f241 0203 	movw	r2, #4099	; 0x1003
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d817      	bhi.n	800b7be <HAL_RCC_OscConfig+0x322>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	2b20      	cmp	r3, #32
 800b794:	d108      	bne.n	800b7a8 <HAL_RCC_OscConfig+0x30c>
 800b796:	4b89      	ldr	r3, [pc, #548]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b79e:	4a87      	ldr	r2, [pc, #540]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b7a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b7a6:	e075      	b.n	800b894 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b7a8:	4b84      	ldr	r3, [pc, #528]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6a1b      	ldr	r3, [r3, #32]
 800b7b4:	069b      	lsls	r3, r3, #26
 800b7b6:	4981      	ldr	r1, [pc, #516]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b7bc:	e06a      	b.n	800b894 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b7be:	4b7f      	ldr	r3, [pc, #508]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	061b      	lsls	r3, r3, #24
 800b7cc:	497b      	ldr	r1, [pc, #492]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b7d2:	e05f      	b.n	800b894 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	69db      	ldr	r3, [r3, #28]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d042      	beq.n	800b862 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b7dc:	4b77      	ldr	r3, [pc, #476]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a76      	ldr	r2, [pc, #472]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b7e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7e8:	f7fa fa60 	bl	8005cac <HAL_GetTick>
 800b7ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7ee:	e008      	b.n	800b802 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b7f0:	f7fa fa5c 	bl	8005cac <HAL_GetTick>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f8:	1ad3      	subs	r3, r2, r3
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d901      	bls.n	800b802 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800b7fe:	2303      	movs	r3, #3
 800b800:	e255      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b802:	4b6e      	ldr	r3, [pc, #440]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d0f0      	beq.n	800b7f0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b80e:	f7fa fa7d 	bl	8005d0c <HAL_GetREVID>
 800b812:	4603      	mov	r3, r0
 800b814:	f241 0203 	movw	r2, #4099	; 0x1003
 800b818:	4293      	cmp	r3, r2
 800b81a:	d817      	bhi.n	800b84c <HAL_RCC_OscConfig+0x3b0>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a1b      	ldr	r3, [r3, #32]
 800b820:	2b20      	cmp	r3, #32
 800b822:	d108      	bne.n	800b836 <HAL_RCC_OscConfig+0x39a>
 800b824:	4b65      	ldr	r3, [pc, #404]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b82c:	4a63      	ldr	r2, [pc, #396]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b82e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b832:	6053      	str	r3, [r2, #4]
 800b834:	e02e      	b.n	800b894 <HAL_RCC_OscConfig+0x3f8>
 800b836:	4b61      	ldr	r3, [pc, #388]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a1b      	ldr	r3, [r3, #32]
 800b842:	069b      	lsls	r3, r3, #26
 800b844:	495d      	ldr	r1, [pc, #372]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b846:	4313      	orrs	r3, r2
 800b848:	604b      	str	r3, [r1, #4]
 800b84a:	e023      	b.n	800b894 <HAL_RCC_OscConfig+0x3f8>
 800b84c:	4b5b      	ldr	r3, [pc, #364]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a1b      	ldr	r3, [r3, #32]
 800b858:	061b      	lsls	r3, r3, #24
 800b85a:	4958      	ldr	r1, [pc, #352]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b85c:	4313      	orrs	r3, r2
 800b85e:	60cb      	str	r3, [r1, #12]
 800b860:	e018      	b.n	800b894 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b862:	4b56      	ldr	r3, [pc, #344]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a55      	ldr	r2, [pc, #340]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b86c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b86e:	f7fa fa1d 	bl	8005cac <HAL_GetTick>
 800b872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b874:	e008      	b.n	800b888 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b876:	f7fa fa19 	bl	8005cac <HAL_GetTick>
 800b87a:	4602      	mov	r2, r0
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	2b02      	cmp	r3, #2
 800b882:	d901      	bls.n	800b888 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e212      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b888:	4b4c      	ldr	r3, [pc, #304]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1f0      	bne.n	800b876 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0308 	and.w	r3, r3, #8
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d036      	beq.n	800b90e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d019      	beq.n	800b8dc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b8a8:	4b44      	ldr	r3, [pc, #272]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b8aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ac:	4a43      	ldr	r2, [pc, #268]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8b4:	f7fa f9fa 	bl	8005cac <HAL_GetTick>
 800b8b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b8ba:	e008      	b.n	800b8ce <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b8bc:	f7fa f9f6 	bl	8005cac <HAL_GetTick>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	d901      	bls.n	800b8ce <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	e1ef      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b8ce:	4b3b      	ldr	r3, [pc, #236]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b8d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8d2:	f003 0302 	and.w	r3, r3, #2
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d0f0      	beq.n	800b8bc <HAL_RCC_OscConfig+0x420>
 800b8da:	e018      	b.n	800b90e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b8dc:	4b37      	ldr	r3, [pc, #220]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b8de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8e0:	4a36      	ldr	r2, [pc, #216]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b8e2:	f023 0301 	bic.w	r3, r3, #1
 800b8e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8e8:	f7fa f9e0 	bl	8005cac <HAL_GetTick>
 800b8ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b8ee:	e008      	b.n	800b902 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b8f0:	f7fa f9dc 	bl	8005cac <HAL_GetTick>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d901      	bls.n	800b902 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e1d5      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b902:	4b2e      	ldr	r3, [pc, #184]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b906:	f003 0302 	and.w	r3, r3, #2
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1f0      	bne.n	800b8f0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 0320 	and.w	r3, r3, #32
 800b916:	2b00      	cmp	r3, #0
 800b918:	d036      	beq.n	800b988 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d019      	beq.n	800b956 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b922:	4b26      	ldr	r3, [pc, #152]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a25      	ldr	r2, [pc, #148]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b92c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b92e:	f7fa f9bd 	bl	8005cac <HAL_GetTick>
 800b932:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b934:	e008      	b.n	800b948 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b936:	f7fa f9b9 	bl	8005cac <HAL_GetTick>
 800b93a:	4602      	mov	r2, r0
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	1ad3      	subs	r3, r2, r3
 800b940:	2b02      	cmp	r3, #2
 800b942:	d901      	bls.n	800b948 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800b944:	2303      	movs	r3, #3
 800b946:	e1b2      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b948:	4b1c      	ldr	r3, [pc, #112]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d0f0      	beq.n	800b936 <HAL_RCC_OscConfig+0x49a>
 800b954:	e018      	b.n	800b988 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b956:	4b19      	ldr	r3, [pc, #100]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a18      	ldr	r2, [pc, #96]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b95c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b960:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b962:	f7fa f9a3 	bl	8005cac <HAL_GetTick>
 800b966:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b968:	e008      	b.n	800b97c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b96a:	f7fa f99f 	bl	8005cac <HAL_GetTick>
 800b96e:	4602      	mov	r2, r0
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	2b02      	cmp	r3, #2
 800b976:	d901      	bls.n	800b97c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800b978:	2303      	movs	r3, #3
 800b97a:	e198      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b97c:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <HAL_RCC_OscConfig+0x520>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1f0      	bne.n	800b96a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 8085 	beq.w	800baa0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b996:	4b0a      	ldr	r3, [pc, #40]	; (800b9c0 <HAL_RCC_OscConfig+0x524>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a09      	ldr	r2, [pc, #36]	; (800b9c0 <HAL_RCC_OscConfig+0x524>)
 800b99c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b9a2:	f7fa f983 	bl	8005cac <HAL_GetTick>
 800b9a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9a8:	e00c      	b.n	800b9c4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b9aa:	f7fa f97f 	bl	8005cac <HAL_GetTick>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	2b64      	cmp	r3, #100	; 0x64
 800b9b6:	d905      	bls.n	800b9c4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e178      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
 800b9bc:	58024400 	.word	0x58024400
 800b9c0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9c4:	4b96      	ldr	r3, [pc, #600]	; (800bc20 <HAL_RCC_OscConfig+0x784>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d0ec      	beq.n	800b9aa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d106      	bne.n	800b9e6 <HAL_RCC_OscConfig+0x54a>
 800b9d8:	4b92      	ldr	r3, [pc, #584]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800b9da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9dc:	4a91      	ldr	r2, [pc, #580]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800b9de:	f043 0301 	orr.w	r3, r3, #1
 800b9e2:	6713      	str	r3, [r2, #112]	; 0x70
 800b9e4:	e02d      	b.n	800ba42 <HAL_RCC_OscConfig+0x5a6>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10c      	bne.n	800ba08 <HAL_RCC_OscConfig+0x56c>
 800b9ee:	4b8d      	ldr	r3, [pc, #564]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800b9f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f2:	4a8c      	ldr	r2, [pc, #560]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800b9f4:	f023 0301 	bic.w	r3, r3, #1
 800b9f8:	6713      	str	r3, [r2, #112]	; 0x70
 800b9fa:	4b8a      	ldr	r3, [pc, #552]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800b9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9fe:	4a89      	ldr	r2, [pc, #548]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba00:	f023 0304 	bic.w	r3, r3, #4
 800ba04:	6713      	str	r3, [r2, #112]	; 0x70
 800ba06:	e01c      	b.n	800ba42 <HAL_RCC_OscConfig+0x5a6>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	2b05      	cmp	r3, #5
 800ba0e:	d10c      	bne.n	800ba2a <HAL_RCC_OscConfig+0x58e>
 800ba10:	4b84      	ldr	r3, [pc, #528]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba14:	4a83      	ldr	r2, [pc, #524]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba16:	f043 0304 	orr.w	r3, r3, #4
 800ba1a:	6713      	str	r3, [r2, #112]	; 0x70
 800ba1c:	4b81      	ldr	r3, [pc, #516]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba20:	4a80      	ldr	r2, [pc, #512]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba22:	f043 0301 	orr.w	r3, r3, #1
 800ba26:	6713      	str	r3, [r2, #112]	; 0x70
 800ba28:	e00b      	b.n	800ba42 <HAL_RCC_OscConfig+0x5a6>
 800ba2a:	4b7e      	ldr	r3, [pc, #504]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba2e:	4a7d      	ldr	r2, [pc, #500]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba30:	f023 0301 	bic.w	r3, r3, #1
 800ba34:	6713      	str	r3, [r2, #112]	; 0x70
 800ba36:	4b7b      	ldr	r3, [pc, #492]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba3a:	4a7a      	ldr	r2, [pc, #488]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba3c:	f023 0304 	bic.w	r3, r3, #4
 800ba40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d015      	beq.n	800ba76 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba4a:	f7fa f92f 	bl	8005cac <HAL_GetTick>
 800ba4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba50:	e00a      	b.n	800ba68 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba52:	f7fa f92b 	bl	8005cac <HAL_GetTick>
 800ba56:	4602      	mov	r2, r0
 800ba58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d901      	bls.n	800ba68 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800ba64:	2303      	movs	r3, #3
 800ba66:	e122      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba68:	4b6e      	ldr	r3, [pc, #440]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba6c:	f003 0302 	and.w	r3, r3, #2
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d0ee      	beq.n	800ba52 <HAL_RCC_OscConfig+0x5b6>
 800ba74:	e014      	b.n	800baa0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba76:	f7fa f919 	bl	8005cac <HAL_GetTick>
 800ba7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ba7c:	e00a      	b.n	800ba94 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba7e:	f7fa f915 	bl	8005cac <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d901      	bls.n	800ba94 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e10c      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ba94:	4b63      	ldr	r3, [pc, #396]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800ba96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba98:	f003 0302 	and.w	r3, r3, #2
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1ee      	bne.n	800ba7e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f000 8101 	beq.w	800bcac <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800baaa:	4b5e      	ldr	r3, [pc, #376]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bab2:	2b18      	cmp	r3, #24
 800bab4:	f000 80bc 	beq.w	800bc30 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	2b02      	cmp	r3, #2
 800babe:	f040 8095 	bne.w	800bbec <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bac2:	4b58      	ldr	r3, [pc, #352]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4a57      	ldr	r2, [pc, #348]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bacc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bace:	f7fa f8ed 	bl	8005cac <HAL_GetTick>
 800bad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bad4:	e008      	b.n	800bae8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bad6:	f7fa f8e9 	bl	8005cac <HAL_GetTick>
 800bada:	4602      	mov	r2, r0
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d901      	bls.n	800bae8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800bae4:	2303      	movs	r3, #3
 800bae6:	e0e2      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bae8:	4b4e      	ldr	r3, [pc, #312]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d1f0      	bne.n	800bad6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800baf4:	4b4b      	ldr	r3, [pc, #300]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800baf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800baf8:	4b4b      	ldr	r3, [pc, #300]	; (800bc28 <HAL_RCC_OscConfig+0x78c>)
 800bafa:	4013      	ands	r3, r2
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bb04:	0112      	lsls	r2, r2, #4
 800bb06:	430a      	orrs	r2, r1
 800bb08:	4946      	ldr	r1, [pc, #280]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	628b      	str	r3, [r1, #40]	; 0x28
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb12:	3b01      	subs	r3, #1
 800bb14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	025b      	lsls	r3, r3, #9
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	431a      	orrs	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	041b      	lsls	r3, r3, #16
 800bb2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb30:	431a      	orrs	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb36:	3b01      	subs	r3, #1
 800bb38:	061b      	lsls	r3, r3, #24
 800bb3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bb3e:	4939      	ldr	r1, [pc, #228]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb40:	4313      	orrs	r3, r2
 800bb42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800bb44:	4b37      	ldr	r3, [pc, #220]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	4a36      	ldr	r2, [pc, #216]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb4a:	f023 0301 	bic.w	r3, r3, #1
 800bb4e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bb50:	4b34      	ldr	r3, [pc, #208]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb54:	4b35      	ldr	r3, [pc, #212]	; (800bc2c <HAL_RCC_OscConfig+0x790>)
 800bb56:	4013      	ands	r3, r2
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bb5c:	00d2      	lsls	r2, r2, #3
 800bb5e:	4931      	ldr	r1, [pc, #196]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb60:	4313      	orrs	r3, r2
 800bb62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bb64:	4b2f      	ldr	r3, [pc, #188]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	f023 020c 	bic.w	r2, r3, #12
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb70:	492c      	ldr	r1, [pc, #176]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb72:	4313      	orrs	r3, r2
 800bb74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bb76:	4b2b      	ldr	r3, [pc, #172]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7a:	f023 0202 	bic.w	r2, r3, #2
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb82:	4928      	ldr	r1, [pc, #160]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb84:	4313      	orrs	r3, r2
 800bb86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bb88:	4b26      	ldr	r3, [pc, #152]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8c:	4a25      	ldr	r2, [pc, #148]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb94:	4b23      	ldr	r3, [pc, #140]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb98:	4a22      	ldr	r2, [pc, #136]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bb9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bba0:	4b20      	ldr	r3, [pc, #128]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	4a1f      	ldr	r2, [pc, #124]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bba6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800bbac:	4b1d      	ldr	r3, [pc, #116]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb0:	4a1c      	ldr	r2, [pc, #112]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bbb2:	f043 0301 	orr.w	r3, r3, #1
 800bbb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bbb8:	4b1a      	ldr	r3, [pc, #104]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4a19      	ldr	r2, [pc, #100]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bbbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bbc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbc4:	f7fa f872 	bl	8005cac <HAL_GetTick>
 800bbc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bbca:	e008      	b.n	800bbde <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bbcc:	f7fa f86e 	bl	8005cac <HAL_GetTick>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d901      	bls.n	800bbde <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	e067      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bbde:	4b11      	ldr	r3, [pc, #68]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0f0      	beq.n	800bbcc <HAL_RCC_OscConfig+0x730>
 800bbea:	e05f      	b.n	800bcac <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbec:	4b0d      	ldr	r3, [pc, #52]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a0c      	ldr	r2, [pc, #48]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bbf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbf8:	f7fa f858 	bl	8005cac <HAL_GetTick>
 800bbfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbfe:	e008      	b.n	800bc12 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bc00:	f7fa f854 	bl	8005cac <HAL_GetTick>
 800bc04:	4602      	mov	r2, r0
 800bc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d901      	bls.n	800bc12 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e04d      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bc12:	4b04      	ldr	r3, [pc, #16]	; (800bc24 <HAL_RCC_OscConfig+0x788>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d1f0      	bne.n	800bc00 <HAL_RCC_OscConfig+0x764>
 800bc1e:	e045      	b.n	800bcac <HAL_RCC_OscConfig+0x810>
 800bc20:	58024800 	.word	0x58024800
 800bc24:	58024400 	.word	0x58024400
 800bc28:	fffffc0c 	.word	0xfffffc0c
 800bc2c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bc30:	4b21      	ldr	r3, [pc, #132]	; (800bcb8 <HAL_RCC_OscConfig+0x81c>)
 800bc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bc36:	4b20      	ldr	r3, [pc, #128]	; (800bcb8 <HAL_RCC_OscConfig+0x81c>)
 800bc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d031      	beq.n	800bca8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	f003 0203 	and.w	r2, r3, #3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d12a      	bne.n	800bca8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	091b      	lsrs	r3, r3, #4
 800bc56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d122      	bne.n	800bca8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d11a      	bne.n	800bca8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	0a5b      	lsrs	r3, r3, #9
 800bc76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d111      	bne.n	800bca8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	0c1b      	lsrs	r3, r3, #16
 800bc88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d108      	bne.n	800bca8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	0e1b      	lsrs	r3, r3, #24
 800bc9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d001      	beq.n	800bcac <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e000      	b.n	800bcae <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3730      	adds	r7, #48	; 0x30
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	58024400 	.word	0x58024400

0800bcbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d101      	bne.n	800bcd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e19c      	b.n	800c00a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bcd0:	4b8a      	ldr	r3, [pc, #552]	; (800befc <HAL_RCC_ClockConfig+0x240>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f003 030f 	and.w	r3, r3, #15
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d910      	bls.n	800bd00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcde:	4b87      	ldr	r3, [pc, #540]	; (800befc <HAL_RCC_ClockConfig+0x240>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f023 020f 	bic.w	r2, r3, #15
 800bce6:	4985      	ldr	r1, [pc, #532]	; (800befc <HAL_RCC_ClockConfig+0x240>)
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcee:	4b83      	ldr	r3, [pc, #524]	; (800befc <HAL_RCC_ClockConfig+0x240>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 030f 	and.w	r3, r3, #15
 800bcf6:	683a      	ldr	r2, [r7, #0]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d001      	beq.n	800bd00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e184      	b.n	800c00a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 0304 	and.w	r3, r3, #4
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d010      	beq.n	800bd2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691a      	ldr	r2, [r3, #16]
 800bd10:	4b7b      	ldr	r3, [pc, #492]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd12:	699b      	ldr	r3, [r3, #24]
 800bd14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d908      	bls.n	800bd2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bd1c:	4b78      	ldr	r3, [pc, #480]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	691b      	ldr	r3, [r3, #16]
 800bd28:	4975      	ldr	r1, [pc, #468]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 0308 	and.w	r3, r3, #8
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d010      	beq.n	800bd5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	695a      	ldr	r2, [r3, #20]
 800bd3e:	4b70      	ldr	r3, [pc, #448]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd40:	69db      	ldr	r3, [r3, #28]
 800bd42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d908      	bls.n	800bd5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd4a:	4b6d      	ldr	r3, [pc, #436]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd4c:	69db      	ldr	r3, [r3, #28]
 800bd4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	695b      	ldr	r3, [r3, #20]
 800bd56:	496a      	ldr	r1, [pc, #424]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 0310 	and.w	r3, r3, #16
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d010      	beq.n	800bd8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	699a      	ldr	r2, [r3, #24]
 800bd6c:	4b64      	ldr	r3, [pc, #400]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd6e:	69db      	ldr	r3, [r3, #28]
 800bd70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d908      	bls.n	800bd8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bd78:	4b61      	ldr	r3, [pc, #388]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd7a:	69db      	ldr	r3, [r3, #28]
 800bd7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	495e      	ldr	r1, [pc, #376]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd86:	4313      	orrs	r3, r2
 800bd88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f003 0320 	and.w	r3, r3, #32
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d010      	beq.n	800bdb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	69da      	ldr	r2, [r3, #28]
 800bd9a:	4b59      	ldr	r3, [pc, #356]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d908      	bls.n	800bdb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bda6:	4b56      	ldr	r3, [pc, #344]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	69db      	ldr	r3, [r3, #28]
 800bdb2:	4953      	ldr	r1, [pc, #332]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0302 	and.w	r3, r3, #2
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d010      	beq.n	800bde6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	68da      	ldr	r2, [r3, #12]
 800bdc8:	4b4d      	ldr	r3, [pc, #308]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	f003 030f 	and.w	r3, r3, #15
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d908      	bls.n	800bde6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdd4:	4b4a      	ldr	r3, [pc, #296]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bdd6:	699b      	ldr	r3, [r3, #24]
 800bdd8:	f023 020f 	bic.w	r2, r3, #15
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	4947      	ldr	r1, [pc, #284]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bde2:	4313      	orrs	r3, r2
 800bde4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0301 	and.w	r3, r3, #1
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d055      	beq.n	800be9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bdf2:	4b43      	ldr	r3, [pc, #268]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	4940      	ldr	r1, [pc, #256]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800be00:	4313      	orrs	r3, r2
 800be02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	2b02      	cmp	r3, #2
 800be0a:	d107      	bne.n	800be1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800be0c:	4b3c      	ldr	r3, [pc, #240]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be14:	2b00      	cmp	r3, #0
 800be16:	d121      	bne.n	800be5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be18:	2301      	movs	r3, #1
 800be1a:	e0f6      	b.n	800c00a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	2b03      	cmp	r3, #3
 800be22:	d107      	bne.n	800be34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800be24:	4b36      	ldr	r3, [pc, #216]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d115      	bne.n	800be5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	e0ea      	b.n	800c00a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d107      	bne.n	800be4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800be3c:	4b30      	ldr	r3, [pc, #192]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be44:	2b00      	cmp	r3, #0
 800be46:	d109      	bne.n	800be5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e0de      	b.n	800c00a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be4c:	4b2c      	ldr	r3, [pc, #176]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 0304 	and.w	r3, r3, #4
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	e0d6      	b.n	800c00a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800be5c:	4b28      	ldr	r3, [pc, #160]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800be5e:	691b      	ldr	r3, [r3, #16]
 800be60:	f023 0207 	bic.w	r2, r3, #7
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	4925      	ldr	r1, [pc, #148]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800be6a:	4313      	orrs	r3, r2
 800be6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be6e:	f7f9 ff1d 	bl	8005cac <HAL_GetTick>
 800be72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be74:	e00a      	b.n	800be8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be76:	f7f9 ff19 	bl	8005cac <HAL_GetTick>
 800be7a:	4602      	mov	r2, r0
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	f241 3288 	movw	r2, #5000	; 0x1388
 800be84:	4293      	cmp	r3, r2
 800be86:	d901      	bls.n	800be8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800be88:	2303      	movs	r3, #3
 800be8a:	e0be      	b.n	800c00a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be8c:	4b1c      	ldr	r3, [pc, #112]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d1eb      	bne.n	800be76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f003 0302 	and.w	r3, r3, #2
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d010      	beq.n	800becc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68da      	ldr	r2, [r3, #12]
 800beae:	4b14      	ldr	r3, [pc, #80]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	f003 030f 	and.w	r3, r3, #15
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d208      	bcs.n	800becc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800beba:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	f023 020f 	bic.w	r2, r3, #15
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	490e      	ldr	r1, [pc, #56]	; (800bf00 <HAL_RCC_ClockConfig+0x244>)
 800bec8:	4313      	orrs	r3, r2
 800beca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800becc:	4b0b      	ldr	r3, [pc, #44]	; (800befc <HAL_RCC_ClockConfig+0x240>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 030f 	and.w	r3, r3, #15
 800bed4:	683a      	ldr	r2, [r7, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d214      	bcs.n	800bf04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beda:	4b08      	ldr	r3, [pc, #32]	; (800befc <HAL_RCC_ClockConfig+0x240>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f023 020f 	bic.w	r2, r3, #15
 800bee2:	4906      	ldr	r1, [pc, #24]	; (800befc <HAL_RCC_ClockConfig+0x240>)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800beea:	4b04      	ldr	r3, [pc, #16]	; (800befc <HAL_RCC_ClockConfig+0x240>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 030f 	and.w	r3, r3, #15
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d005      	beq.n	800bf04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e086      	b.n	800c00a <HAL_RCC_ClockConfig+0x34e>
 800befc:	52002000 	.word	0x52002000
 800bf00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0304 	and.w	r3, r3, #4
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d010      	beq.n	800bf32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	691a      	ldr	r2, [r3, #16]
 800bf14:	4b3f      	ldr	r3, [pc, #252]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d208      	bcs.n	800bf32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bf20:	4b3c      	ldr	r3, [pc, #240]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	4939      	ldr	r1, [pc, #228]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f003 0308 	and.w	r3, r3, #8
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d010      	beq.n	800bf60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	695a      	ldr	r2, [r3, #20]
 800bf42:	4b34      	ldr	r3, [pc, #208]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bf44:	69db      	ldr	r3, [r3, #28]
 800bf46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d208      	bcs.n	800bf60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bf4e:	4b31      	ldr	r3, [pc, #196]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	492e      	ldr	r1, [pc, #184]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f003 0310 	and.w	r3, r3, #16
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d010      	beq.n	800bf8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	699a      	ldr	r2, [r3, #24]
 800bf70:	4b28      	ldr	r3, [pc, #160]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bf72:	69db      	ldr	r3, [r3, #28]
 800bf74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d208      	bcs.n	800bf8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bf7c:	4b25      	ldr	r3, [pc, #148]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bf7e:	69db      	ldr	r3, [r3, #28]
 800bf80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	4922      	ldr	r1, [pc, #136]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 0320 	and.w	r3, r3, #32
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d010      	beq.n	800bfbc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	69da      	ldr	r2, [r3, #28]
 800bf9e:	4b1d      	ldr	r3, [pc, #116]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bfa0:	6a1b      	ldr	r3, [r3, #32]
 800bfa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d208      	bcs.n	800bfbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bfaa:	4b1a      	ldr	r3, [pc, #104]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	4917      	ldr	r1, [pc, #92]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bfbc:	f000 f834 	bl	800c028 <HAL_RCC_GetSysClockFreq>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	4b14      	ldr	r3, [pc, #80]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	0a1b      	lsrs	r3, r3, #8
 800bfc8:	f003 030f 	and.w	r3, r3, #15
 800bfcc:	4912      	ldr	r1, [pc, #72]	; (800c018 <HAL_RCC_ClockConfig+0x35c>)
 800bfce:	5ccb      	ldrb	r3, [r1, r3]
 800bfd0:	f003 031f 	and.w	r3, r3, #31
 800bfd4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bfda:	4b0e      	ldr	r3, [pc, #56]	; (800c014 <HAL_RCC_ClockConfig+0x358>)
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	f003 030f 	and.w	r3, r3, #15
 800bfe2:	4a0d      	ldr	r2, [pc, #52]	; (800c018 <HAL_RCC_ClockConfig+0x35c>)
 800bfe4:	5cd3      	ldrb	r3, [r2, r3]
 800bfe6:	f003 031f 	and.w	r3, r3, #31
 800bfea:	693a      	ldr	r2, [r7, #16]
 800bfec:	fa22 f303 	lsr.w	r3, r2, r3
 800bff0:	4a0a      	ldr	r2, [pc, #40]	; (800c01c <HAL_RCC_ClockConfig+0x360>)
 800bff2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bff4:	4a0a      	ldr	r2, [pc, #40]	; (800c020 <HAL_RCC_ClockConfig+0x364>)
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800bffa:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <HAL_RCC_ClockConfig+0x368>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4618      	mov	r0, r3
 800c000:	f7f9 fe0a 	bl	8005c18 <HAL_InitTick>
 800c004:	4603      	mov	r3, r0
 800c006:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c008:	7bfb      	ldrb	r3, [r7, #15]
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	3718      	adds	r7, #24
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}
 800c012:	bf00      	nop
 800c014:	58024400 	.word	0x58024400
 800c018:	080150b4 	.word	0x080150b4
 800c01c:	24000018 	.word	0x24000018
 800c020:	24000014 	.word	0x24000014
 800c024:	2400001c 	.word	0x2400001c

0800c028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c028:	b480      	push	{r7}
 800c02a:	b089      	sub	sp, #36	; 0x24
 800c02c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c02e:	4bb3      	ldr	r3, [pc, #716]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c036:	2b18      	cmp	r3, #24
 800c038:	f200 8155 	bhi.w	800c2e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800c03c:	a201      	add	r2, pc, #4	; (adr r2, 800c044 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c042:	bf00      	nop
 800c044:	0800c0a9 	.word	0x0800c0a9
 800c048:	0800c2e7 	.word	0x0800c2e7
 800c04c:	0800c2e7 	.word	0x0800c2e7
 800c050:	0800c2e7 	.word	0x0800c2e7
 800c054:	0800c2e7 	.word	0x0800c2e7
 800c058:	0800c2e7 	.word	0x0800c2e7
 800c05c:	0800c2e7 	.word	0x0800c2e7
 800c060:	0800c2e7 	.word	0x0800c2e7
 800c064:	0800c0cf 	.word	0x0800c0cf
 800c068:	0800c2e7 	.word	0x0800c2e7
 800c06c:	0800c2e7 	.word	0x0800c2e7
 800c070:	0800c2e7 	.word	0x0800c2e7
 800c074:	0800c2e7 	.word	0x0800c2e7
 800c078:	0800c2e7 	.word	0x0800c2e7
 800c07c:	0800c2e7 	.word	0x0800c2e7
 800c080:	0800c2e7 	.word	0x0800c2e7
 800c084:	0800c0d5 	.word	0x0800c0d5
 800c088:	0800c2e7 	.word	0x0800c2e7
 800c08c:	0800c2e7 	.word	0x0800c2e7
 800c090:	0800c2e7 	.word	0x0800c2e7
 800c094:	0800c2e7 	.word	0x0800c2e7
 800c098:	0800c2e7 	.word	0x0800c2e7
 800c09c:	0800c2e7 	.word	0x0800c2e7
 800c0a0:	0800c2e7 	.word	0x0800c2e7
 800c0a4:	0800c0db 	.word	0x0800c0db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0a8:	4b94      	ldr	r3, [pc, #592]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 0320 	and.w	r3, r3, #32
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d009      	beq.n	800c0c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0b4:	4b91      	ldr	r3, [pc, #580]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	08db      	lsrs	r3, r3, #3
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	4a90      	ldr	r2, [pc, #576]	; (800c300 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c0c6:	e111      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c0c8:	4b8d      	ldr	r3, [pc, #564]	; (800c300 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c0ca:	61bb      	str	r3, [r7, #24]
    break;
 800c0cc:	e10e      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c0ce:	4b8d      	ldr	r3, [pc, #564]	; (800c304 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c0d0:	61bb      	str	r3, [r7, #24]
    break;
 800c0d2:	e10b      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c0d4:	4b8c      	ldr	r3, [pc, #560]	; (800c308 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c0d6:	61bb      	str	r3, [r7, #24]
    break;
 800c0d8:	e108      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0da:	4b88      	ldr	r3, [pc, #544]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0de:	f003 0303 	and.w	r3, r3, #3
 800c0e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c0e4:	4b85      	ldr	r3, [pc, #532]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e8:	091b      	lsrs	r3, r3, #4
 800c0ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c0f0:	4b82      	ldr	r3, [pc, #520]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f4:	f003 0301 	and.w	r3, r3, #1
 800c0f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c0fa:	4b80      	ldr	r3, [pc, #512]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0fe:	08db      	lsrs	r3, r3, #3
 800c100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	fb02 f303 	mul.w	r3, r2, r3
 800c10a:	ee07 3a90 	vmov	s15, r3
 800c10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c112:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f000 80e1 	beq.w	800c2e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	2b02      	cmp	r3, #2
 800c122:	f000 8083 	beq.w	800c22c <HAL_RCC_GetSysClockFreq+0x204>
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b02      	cmp	r3, #2
 800c12a:	f200 80a1 	bhi.w	800c270 <HAL_RCC_GetSysClockFreq+0x248>
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d003      	beq.n	800c13c <HAL_RCC_GetSysClockFreq+0x114>
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d056      	beq.n	800c1e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c13a:	e099      	b.n	800c270 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c13c:	4b6f      	ldr	r3, [pc, #444]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 0320 	and.w	r3, r3, #32
 800c144:	2b00      	cmp	r3, #0
 800c146:	d02d      	beq.n	800c1a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c148:	4b6c      	ldr	r3, [pc, #432]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	08db      	lsrs	r3, r3, #3
 800c14e:	f003 0303 	and.w	r3, r3, #3
 800c152:	4a6b      	ldr	r2, [pc, #428]	; (800c300 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c154:	fa22 f303 	lsr.w	r3, r2, r3
 800c158:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	ee07 3a90 	vmov	s15, r3
 800c160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	ee07 3a90 	vmov	s15, r3
 800c16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c172:	4b62      	ldr	r3, [pc, #392]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c17a:	ee07 3a90 	vmov	s15, r3
 800c17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c182:	ed97 6a02 	vldr	s12, [r7, #8]
 800c186:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c30c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c19e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c1a2:	e087      	b.n	800c2b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	ee07 3a90 	vmov	s15, r3
 800c1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c310 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c1b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1b6:	4b51      	ldr	r3, [pc, #324]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1be:	ee07 3a90 	vmov	s15, r3
 800c1c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c1ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c30c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c1ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1e6:	e065      	b.n	800c2b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	ee07 3a90 	vmov	s15, r3
 800c1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c314 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c1f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1fa:	4b40      	ldr	r3, [pc, #256]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c202:	ee07 3a90 	vmov	s15, r3
 800c206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c20a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c20e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c30c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c21a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c21e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c22a:	e043      	b.n	800c2b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	ee07 3a90 	vmov	s15, r3
 800c232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c236:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c318 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c23e:	4b2f      	ldr	r3, [pc, #188]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c246:	ee07 3a90 	vmov	s15, r3
 800c24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c24e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c252:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c30c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c25e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c26a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c26e:	e021      	b.n	800c2b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	ee07 3a90 	vmov	s15, r3
 800c276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c27a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c314 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c282:	4b1e      	ldr	r3, [pc, #120]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c28a:	ee07 3a90 	vmov	s15, r3
 800c28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c292:	ed97 6a02 	vldr	s12, [r7, #8]
 800c296:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c30c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c2b4:	4b11      	ldr	r3, [pc, #68]	; (800c2fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b8:	0a5b      	lsrs	r3, r3, #9
 800c2ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2be:	3301      	adds	r3, #1
 800c2c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	ee07 3a90 	vmov	s15, r3
 800c2c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c2cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2d8:	ee17 3a90 	vmov	r3, s15
 800c2dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c2de:	e005      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	61bb      	str	r3, [r7, #24]
    break;
 800c2e4:	e002      	b.n	800c2ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c2e6:	4b07      	ldr	r3, [pc, #28]	; (800c304 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c2e8:	61bb      	str	r3, [r7, #24]
    break;
 800c2ea:	bf00      	nop
  }

  return sysclockfreq;
 800c2ec:	69bb      	ldr	r3, [r7, #24]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3724      	adds	r7, #36	; 0x24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr
 800c2fa:	bf00      	nop
 800c2fc:	58024400 	.word	0x58024400
 800c300:	03d09000 	.word	0x03d09000
 800c304:	003d0900 	.word	0x003d0900
 800c308:	017d7840 	.word	0x017d7840
 800c30c:	46000000 	.word	0x46000000
 800c310:	4c742400 	.word	0x4c742400
 800c314:	4a742400 	.word	0x4a742400
 800c318:	4bbebc20 	.word	0x4bbebc20

0800c31c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c322:	f7ff fe81 	bl	800c028 <HAL_RCC_GetSysClockFreq>
 800c326:	4602      	mov	r2, r0
 800c328:	4b10      	ldr	r3, [pc, #64]	; (800c36c <HAL_RCC_GetHCLKFreq+0x50>)
 800c32a:	699b      	ldr	r3, [r3, #24]
 800c32c:	0a1b      	lsrs	r3, r3, #8
 800c32e:	f003 030f 	and.w	r3, r3, #15
 800c332:	490f      	ldr	r1, [pc, #60]	; (800c370 <HAL_RCC_GetHCLKFreq+0x54>)
 800c334:	5ccb      	ldrb	r3, [r1, r3]
 800c336:	f003 031f 	and.w	r3, r3, #31
 800c33a:	fa22 f303 	lsr.w	r3, r2, r3
 800c33e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c340:	4b0a      	ldr	r3, [pc, #40]	; (800c36c <HAL_RCC_GetHCLKFreq+0x50>)
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	f003 030f 	and.w	r3, r3, #15
 800c348:	4a09      	ldr	r2, [pc, #36]	; (800c370 <HAL_RCC_GetHCLKFreq+0x54>)
 800c34a:	5cd3      	ldrb	r3, [r2, r3]
 800c34c:	f003 031f 	and.w	r3, r3, #31
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	fa22 f303 	lsr.w	r3, r2, r3
 800c356:	4a07      	ldr	r2, [pc, #28]	; (800c374 <HAL_RCC_GetHCLKFreq+0x58>)
 800c358:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c35a:	4a07      	ldr	r2, [pc, #28]	; (800c378 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c360:	4b04      	ldr	r3, [pc, #16]	; (800c374 <HAL_RCC_GetHCLKFreq+0x58>)
 800c362:	681b      	ldr	r3, [r3, #0]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	58024400 	.word	0x58024400
 800c370:	080150b4 	.word	0x080150b4
 800c374:	24000018 	.word	0x24000018
 800c378:	24000014 	.word	0x24000014

0800c37c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c380:	f7ff ffcc 	bl	800c31c <HAL_RCC_GetHCLKFreq>
 800c384:	4602      	mov	r2, r0
 800c386:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	091b      	lsrs	r3, r3, #4
 800c38c:	f003 0307 	and.w	r3, r3, #7
 800c390:	4904      	ldr	r1, [pc, #16]	; (800c3a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c392:	5ccb      	ldrb	r3, [r1, r3]
 800c394:	f003 031f 	and.w	r3, r3, #31
 800c398:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	58024400 	.word	0x58024400
 800c3a4:	080150b4 	.word	0x080150b4

0800c3a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c3ac:	f7ff ffb6 	bl	800c31c <HAL_RCC_GetHCLKFreq>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	4b06      	ldr	r3, [pc, #24]	; (800c3cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	0a1b      	lsrs	r3, r3, #8
 800c3b8:	f003 0307 	and.w	r3, r3, #7
 800c3bc:	4904      	ldr	r1, [pc, #16]	; (800c3d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c3be:	5ccb      	ldrb	r3, [r1, r3]
 800c3c0:	f003 031f 	and.w	r3, r3, #31
 800c3c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	58024400 	.word	0x58024400
 800c3d0:	080150b4 	.word	0x080150b4

0800c3d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b086      	sub	sp, #24
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c3dc:	2300      	movs	r3, #0
 800c3de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d03f      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3f8:	d02a      	beq.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c3fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c3fe:	d824      	bhi.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c404:	d018      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c406:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c40a:	d81e      	bhi.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d003      	beq.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c414:	d007      	beq.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c416:	e018      	b.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c418:	4bab      	ldr	r3, [pc, #684]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	4aaa      	ldr	r2, [pc, #680]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c41e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c424:	e015      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	3304      	adds	r3, #4
 800c42a:	2102      	movs	r1, #2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f001 f9cf 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c432:	4603      	mov	r3, r0
 800c434:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c436:	e00c      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	3324      	adds	r3, #36	; 0x24
 800c43c:	2102      	movs	r1, #2
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 fa78 	bl	800d934 <RCCEx_PLL3_Config>
 800c444:	4603      	mov	r3, r0
 800c446:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c448:	e003      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	75fb      	strb	r3, [r7, #23]
      break;
 800c44e:	e000      	b.n	800c452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c450:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d109      	bne.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c458:	4b9b      	ldr	r3, [pc, #620]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c45a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c464:	4998      	ldr	r1, [pc, #608]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c466:	4313      	orrs	r3, r2
 800c468:	650b      	str	r3, [r1, #80]	; 0x50
 800c46a:	e001      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c46c:	7dfb      	ldrb	r3, [r7, #23]
 800c46e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d03d      	beq.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c480:	2b04      	cmp	r3, #4
 800c482:	d826      	bhi.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c484:	a201      	add	r2, pc, #4	; (adr r2, 800c48c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48a:	bf00      	nop
 800c48c:	0800c4a1 	.word	0x0800c4a1
 800c490:	0800c4af 	.word	0x0800c4af
 800c494:	0800c4c1 	.word	0x0800c4c1
 800c498:	0800c4d9 	.word	0x0800c4d9
 800c49c:	0800c4d9 	.word	0x0800c4d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4a0:	4b89      	ldr	r3, [pc, #548]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	4a88      	ldr	r2, [pc, #544]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4ac:	e015      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f001 f98b 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4be:	e00c      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3324      	adds	r3, #36	; 0x24
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 fa34 	bl	800d934 <RCCEx_PLL3_Config>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4d0:	e003      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c4d6:	e000      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c4d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4da:	7dfb      	ldrb	r3, [r7, #23]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d109      	bne.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c4e0:	4b79      	ldr	r3, [pc, #484]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4e4:	f023 0207 	bic.w	r2, r3, #7
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ec:	4976      	ldr	r1, [pc, #472]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	650b      	str	r3, [r1, #80]	; 0x50
 800c4f2:	e001      	b.n	800c4f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4f4:	7dfb      	ldrb	r3, [r7, #23]
 800c4f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c500:	2b00      	cmp	r3, #0
 800c502:	d042      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c50c:	d02b      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c50e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c512:	d825      	bhi.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c514:	2bc0      	cmp	r3, #192	; 0xc0
 800c516:	d028      	beq.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c518:	2bc0      	cmp	r3, #192	; 0xc0
 800c51a:	d821      	bhi.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c51c:	2b80      	cmp	r3, #128	; 0x80
 800c51e:	d016      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c520:	2b80      	cmp	r3, #128	; 0x80
 800c522:	d81d      	bhi.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c528:	2b40      	cmp	r3, #64	; 0x40
 800c52a:	d007      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c52c:	e018      	b.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c52e:	4b66      	ldr	r3, [pc, #408]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c532:	4a65      	ldr	r2, [pc, #404]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c53a:	e017      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	3304      	adds	r3, #4
 800c540:	2100      	movs	r1, #0
 800c542:	4618      	mov	r0, r3
 800c544:	f001 f944 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c548:	4603      	mov	r3, r0
 800c54a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c54c:	e00e      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3324      	adds	r3, #36	; 0x24
 800c552:	2100      	movs	r1, #0
 800c554:	4618      	mov	r0, r3
 800c556:	f001 f9ed 	bl	800d934 <RCCEx_PLL3_Config>
 800c55a:	4603      	mov	r3, r0
 800c55c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c55e:	e005      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c560:	2301      	movs	r3, #1
 800c562:	75fb      	strb	r3, [r7, #23]
      break;
 800c564:	e002      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c566:	bf00      	nop
 800c568:	e000      	b.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c56a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d109      	bne.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c572:	4b55      	ldr	r3, [pc, #340]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c576:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c57e:	4952      	ldr	r1, [pc, #328]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c580:	4313      	orrs	r3, r2
 800c582:	650b      	str	r3, [r1, #80]	; 0x50
 800c584:	e001      	b.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c592:	2b00      	cmp	r3, #0
 800c594:	d049      	beq.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c59c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5a0:	d030      	beq.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c5a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5a6:	d82a      	bhi.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c5a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c5ac:	d02c      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c5ae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c5b2:	d824      	bhi.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c5b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5b8:	d018      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c5ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5be:	d81e      	bhi.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d003      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c5c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5c8:	d007      	beq.n	800c5da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c5ca:	e018      	b.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5cc:	4b3e      	ldr	r3, [pc, #248]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	4a3d      	ldr	r2, [pc, #244]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c5d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c5d8:	e017      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	3304      	adds	r3, #4
 800c5de:	2100      	movs	r1, #0
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f001 f8f5 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c5ea:	e00e      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	3324      	adds	r3, #36	; 0x24
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f001 f99e 	bl	800d934 <RCCEx_PLL3_Config>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c5fc:	e005      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
 800c600:	75fb      	strb	r3, [r7, #23]
      break;
 800c602:	e002      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c604:	bf00      	nop
 800c606:	e000      	b.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c610:	4b2d      	ldr	r3, [pc, #180]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c614:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c61e:	492a      	ldr	r1, [pc, #168]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c620:	4313      	orrs	r3, r2
 800c622:	658b      	str	r3, [r1, #88]	; 0x58
 800c624:	e001      	b.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c626:	7dfb      	ldrb	r3, [r7, #23]
 800c628:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c632:	2b00      	cmp	r3, #0
 800c634:	d04c      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c63c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c640:	d030      	beq.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c646:	d82a      	bhi.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c648:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c64c:	d02c      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800c64e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c652:	d824      	bhi.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c658:	d018      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c65a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c65e:	d81e      	bhi.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c660:	2b00      	cmp	r3, #0
 800c662:	d003      	beq.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c668:	d007      	beq.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c66a:	e018      	b.n	800c69e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c66c:	4b16      	ldr	r3, [pc, #88]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	4a15      	ldr	r2, [pc, #84]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c676:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c678:	e017      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3304      	adds	r3, #4
 800c67e:	2100      	movs	r1, #0
 800c680:	4618      	mov	r0, r3
 800c682:	f001 f8a5 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c686:	4603      	mov	r3, r0
 800c688:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c68a:	e00e      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	3324      	adds	r3, #36	; 0x24
 800c690:	2100      	movs	r1, #0
 800c692:	4618      	mov	r0, r3
 800c694:	f001 f94e 	bl	800d934 <RCCEx_PLL3_Config>
 800c698:	4603      	mov	r3, r0
 800c69a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c69c:	e005      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c6a2:	e002      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800c6a4:	bf00      	nop
 800c6a6:	e000      	b.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800c6a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6aa:	7dfb      	ldrb	r3, [r7, #23]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10d      	bne.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c6b0:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c6be:	4902      	ldr	r1, [pc, #8]	; (800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	658b      	str	r3, [r1, #88]	; 0x58
 800c6c4:	e004      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800c6c6:	bf00      	nop
 800c6c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6cc:	7dfb      	ldrb	r3, [r7, #23]
 800c6ce:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d032      	beq.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6e0:	2b30      	cmp	r3, #48	; 0x30
 800c6e2:	d01c      	beq.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800c6e4:	2b30      	cmp	r3, #48	; 0x30
 800c6e6:	d817      	bhi.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c6e8:	2b20      	cmp	r3, #32
 800c6ea:	d00c      	beq.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800c6ec:	2b20      	cmp	r3, #32
 800c6ee:	d813      	bhi.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d016      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800c6f4:	2b10      	cmp	r3, #16
 800c6f6:	d10f      	bne.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6f8:	4baf      	ldr	r3, [pc, #700]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fc:	4aae      	ldr	r2, [pc, #696]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c6fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c704:	e00e      	b.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	3304      	adds	r3, #4
 800c70a:	2102      	movs	r1, #2
 800c70c:	4618      	mov	r0, r3
 800c70e:	f001 f85f 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c712:	4603      	mov	r3, r0
 800c714:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c716:	e005      	b.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	75fb      	strb	r3, [r7, #23]
      break;
 800c71c:	e002      	b.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c71e:	bf00      	nop
 800c720:	e000      	b.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800c722:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c724:	7dfb      	ldrb	r3, [r7, #23]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d109      	bne.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c72a:	4ba3      	ldr	r3, [pc, #652]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c72e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c736:	49a0      	ldr	r1, [pc, #640]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c738:	4313      	orrs	r3, r2
 800c73a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c73c:	e001      	b.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
 800c740:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d047      	beq.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c756:	d030      	beq.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800c758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c75c:	d82a      	bhi.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c75e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c762:	d02c      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800c764:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c768:	d824      	bhi.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c76a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c76e:	d018      	beq.n	800c7a2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800c770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c774:	d81e      	bhi.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800c776:	2b00      	cmp	r3, #0
 800c778:	d003      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800c77a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c77e:	d007      	beq.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800c780:	e018      	b.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c782:	4b8d      	ldr	r3, [pc, #564]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	4a8c      	ldr	r2, [pc, #560]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c78c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c78e:	e017      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3304      	adds	r3, #4
 800c794:	2100      	movs	r1, #0
 800c796:	4618      	mov	r0, r3
 800c798:	f001 f81a 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c79c:	4603      	mov	r3, r0
 800c79e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c7a0:	e00e      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3324      	adds	r3, #36	; 0x24
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f001 f8c3 	bl	800d934 <RCCEx_PLL3_Config>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c7b2:	e005      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	75fb      	strb	r3, [r7, #23]
      break;
 800c7b8:	e002      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c7ba:	bf00      	nop
 800c7bc:	e000      	b.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800c7be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d109      	bne.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c7c6:	4b7c      	ldr	r3, [pc, #496]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7ca:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7d2:	4979      	ldr	r1, [pc, #484]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	650b      	str	r3, [r1, #80]	; 0x50
 800c7d8:	e001      	b.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7da:	7dfb      	ldrb	r3, [r7, #23]
 800c7dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d049      	beq.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7f2:	d02e      	beq.n	800c852 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800c7f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7f8:	d828      	bhi.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c7fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7fe:	d02a      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800c800:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c804:	d822      	bhi.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c806:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c80a:	d026      	beq.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800c80c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c810:	d81c      	bhi.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c816:	d010      	beq.n	800c83a <HAL_RCCEx_PeriphCLKConfig+0x466>
 800c818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c81c:	d816      	bhi.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d01d      	beq.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800c822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c826:	d111      	bne.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3304      	adds	r3, #4
 800c82c:	2101      	movs	r1, #1
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 ffce 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c834:	4603      	mov	r3, r0
 800c836:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c838:	e012      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	3324      	adds	r3, #36	; 0x24
 800c83e:	2101      	movs	r1, #1
 800c840:	4618      	mov	r0, r3
 800c842:	f001 f877 	bl	800d934 <RCCEx_PLL3_Config>
 800c846:	4603      	mov	r3, r0
 800c848:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c84a:	e009      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c84c:	2301      	movs	r3, #1
 800c84e:	75fb      	strb	r3, [r7, #23]
      break;
 800c850:	e006      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c852:	bf00      	nop
 800c854:	e004      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c856:	bf00      	nop
 800c858:	e002      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c85a:	bf00      	nop
 800c85c:	e000      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800c85e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d109      	bne.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c866:	4b54      	ldr	r3, [pc, #336]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c86a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c872:	4951      	ldr	r1, [pc, #324]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c874:	4313      	orrs	r3, r2
 800c876:	650b      	str	r3, [r1, #80]	; 0x50
 800c878:	e001      	b.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c87a:	7dfb      	ldrb	r3, [r7, #23]
 800c87c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c886:	2b00      	cmp	r3, #0
 800c888:	d04b      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c894:	d02e      	beq.n	800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800c896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c89a:	d828      	bhi.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c89c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8a0:	d02a      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800c8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8a6:	d822      	bhi.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c8a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c8ac:	d026      	beq.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800c8ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c8b2:	d81c      	bhi.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c8b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8b8:	d010      	beq.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x508>
 800c8ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8be:	d816      	bhi.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d01d      	beq.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800c8c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8c8:	d111      	bne.n	800c8ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 ff7d 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c8da:	e012      	b.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	3324      	adds	r3, #36	; 0x24
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f001 f826 	bl	800d934 <RCCEx_PLL3_Config>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c8ec:	e009      	b.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	75fb      	strb	r3, [r7, #23]
      break;
 800c8f2:	e006      	b.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c8f4:	bf00      	nop
 800c8f6:	e004      	b.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c8f8:	bf00      	nop
 800c8fa:	e002      	b.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c8fc:	bf00      	nop
 800c8fe:	e000      	b.n	800c902 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800c900:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c902:	7dfb      	ldrb	r3, [r7, #23]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d10a      	bne.n	800c91e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c908:	4b2b      	ldr	r3, [pc, #172]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c90a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c90c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c916:	4928      	ldr	r1, [pc, #160]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c918:	4313      	orrs	r3, r2
 800c91a:	658b      	str	r3, [r1, #88]	; 0x58
 800c91c:	e001      	b.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
 800c920:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d02f      	beq.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c936:	d00e      	beq.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800c938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c93c:	d814      	bhi.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d015      	beq.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800c942:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c946:	d10f      	bne.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c948:	4b1b      	ldr	r3, [pc, #108]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94c:	4a1a      	ldr	r2, [pc, #104]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c94e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c952:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c954:	e00c      	b.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	3304      	adds	r3, #4
 800c95a:	2101      	movs	r1, #1
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 ff37 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c962:	4603      	mov	r3, r0
 800c964:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c966:	e003      	b.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	75fb      	strb	r3, [r7, #23]
      break;
 800c96c:	e000      	b.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800c96e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c970:	7dfb      	ldrb	r3, [r7, #23]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d109      	bne.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c976:	4b10      	ldr	r3, [pc, #64]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c97a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c982:	490d      	ldr	r1, [pc, #52]	; (800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800c984:	4313      	orrs	r3, r2
 800c986:	650b      	str	r3, [r1, #80]	; 0x50
 800c988:	e001      	b.n	800c98e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c996:	2b00      	cmp	r3, #0
 800c998:	d033      	beq.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c99e:	2b03      	cmp	r3, #3
 800c9a0:	d81c      	bhi.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c9a2:	a201      	add	r2, pc, #4	; (adr r2, 800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800c9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a8:	0800c9e3 	.word	0x0800c9e3
 800c9ac:	0800c9bd 	.word	0x0800c9bd
 800c9b0:	0800c9cb 	.word	0x0800c9cb
 800c9b4:	0800c9e3 	.word	0x0800c9e3
 800c9b8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9bc:	4bb8      	ldr	r3, [pc, #736]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c0:	4ab7      	ldr	r2, [pc, #732]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c9c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c9c8:	e00c      	b.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	2102      	movs	r1, #2
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 fefd 	bl	800d7d0 <RCCEx_PLL2_Config>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c9da:	e003      	b.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	75fb      	strb	r3, [r7, #23]
      break;
 800c9e0:	e000      	b.n	800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c9e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9e4:	7dfb      	ldrb	r3, [r7, #23]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d109      	bne.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c9ea:	4bad      	ldr	r3, [pc, #692]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c9ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9ee:	f023 0203 	bic.w	r2, r3, #3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9f6:	49aa      	ldr	r1, [pc, #680]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c9fc:	e001      	b.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ca00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 8086 	beq.w	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca10:	4ba4      	ldr	r3, [pc, #656]	; (800cca4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4aa3      	ldr	r2, [pc, #652]	; (800cca4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ca16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca1c:	f7f9 f946 	bl	8005cac <HAL_GetTick>
 800ca20:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca22:	e009      	b.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca24:	f7f9 f942 	bl	8005cac <HAL_GetTick>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	2b64      	cmp	r3, #100	; 0x64
 800ca30:	d902      	bls.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800ca32:	2303      	movs	r3, #3
 800ca34:	75fb      	strb	r3, [r7, #23]
        break;
 800ca36:	e005      	b.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca38:	4b9a      	ldr	r3, [pc, #616]	; (800cca4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d0ef      	beq.n	800ca24 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d166      	bne.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ca4a:	4b95      	ldr	r3, [pc, #596]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ca54:	4053      	eors	r3, r2
 800ca56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d013      	beq.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca5e:	4b90      	ldr	r3, [pc, #576]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca66:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ca68:	4b8d      	ldr	r3, [pc, #564]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca6c:	4a8c      	ldr	r2, [pc, #560]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca72:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ca74:	4b8a      	ldr	r3, [pc, #552]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca78:	4a89      	ldr	r2, [pc, #548]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca7e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ca80:	4a87      	ldr	r2, [pc, #540]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ca8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca90:	d115      	bne.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca92:	f7f9 f90b 	bl	8005cac <HAL_GetTick>
 800ca96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca98:	e00b      	b.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca9a:	f7f9 f907 	bl	8005cac <HAL_GetTick>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	1ad3      	subs	r3, r2, r3
 800caa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d902      	bls.n	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800caac:	2303      	movs	r3, #3
 800caae:	75fb      	strb	r3, [r7, #23]
            break;
 800cab0:	e005      	b.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cab2:	4b7b      	ldr	r3, [pc, #492]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab6:	f003 0302 	and.w	r3, r3, #2
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0ed      	beq.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800cabe:	7dfb      	ldrb	r3, [r7, #23]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d126      	bne.n	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800caca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cad2:	d10d      	bne.n	800caf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800cad4:	4b72      	ldr	r3, [pc, #456]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cad6:	691b      	ldr	r3, [r3, #16]
 800cad8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cae2:	0919      	lsrs	r1, r3, #4
 800cae4:	4b70      	ldr	r3, [pc, #448]	; (800cca8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800cae6:	400b      	ands	r3, r1
 800cae8:	496d      	ldr	r1, [pc, #436]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800caea:	4313      	orrs	r3, r2
 800caec:	610b      	str	r3, [r1, #16]
 800caee:	e005      	b.n	800cafc <HAL_RCCEx_PeriphCLKConfig+0x728>
 800caf0:	4b6b      	ldr	r3, [pc, #428]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	4a6a      	ldr	r2, [pc, #424]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800caf6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cafa:	6113      	str	r3, [r2, #16]
 800cafc:	4b68      	ldr	r3, [pc, #416]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cafe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800cb06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb0a:	4965      	ldr	r1, [pc, #404]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	670b      	str	r3, [r1, #112]	; 0x70
 800cb10:	e004      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cb12:	7dfb      	ldrb	r3, [r7, #23]
 800cb14:	75bb      	strb	r3, [r7, #22]
 800cb16:	e001      	b.n	800cb1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb18:	7dfb      	ldrb	r3, [r7, #23]
 800cb1a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 0301 	and.w	r3, r3, #1
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d07e      	beq.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb2c:	2b28      	cmp	r3, #40	; 0x28
 800cb2e:	d867      	bhi.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800cb30:	a201      	add	r2, pc, #4	; (adr r2, 800cb38 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800cb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb36:	bf00      	nop
 800cb38:	0800cc07 	.word	0x0800cc07
 800cb3c:	0800cc01 	.word	0x0800cc01
 800cb40:	0800cc01 	.word	0x0800cc01
 800cb44:	0800cc01 	.word	0x0800cc01
 800cb48:	0800cc01 	.word	0x0800cc01
 800cb4c:	0800cc01 	.word	0x0800cc01
 800cb50:	0800cc01 	.word	0x0800cc01
 800cb54:	0800cc01 	.word	0x0800cc01
 800cb58:	0800cbdd 	.word	0x0800cbdd
 800cb5c:	0800cc01 	.word	0x0800cc01
 800cb60:	0800cc01 	.word	0x0800cc01
 800cb64:	0800cc01 	.word	0x0800cc01
 800cb68:	0800cc01 	.word	0x0800cc01
 800cb6c:	0800cc01 	.word	0x0800cc01
 800cb70:	0800cc01 	.word	0x0800cc01
 800cb74:	0800cc01 	.word	0x0800cc01
 800cb78:	0800cbef 	.word	0x0800cbef
 800cb7c:	0800cc01 	.word	0x0800cc01
 800cb80:	0800cc01 	.word	0x0800cc01
 800cb84:	0800cc01 	.word	0x0800cc01
 800cb88:	0800cc01 	.word	0x0800cc01
 800cb8c:	0800cc01 	.word	0x0800cc01
 800cb90:	0800cc01 	.word	0x0800cc01
 800cb94:	0800cc01 	.word	0x0800cc01
 800cb98:	0800cc07 	.word	0x0800cc07
 800cb9c:	0800cc01 	.word	0x0800cc01
 800cba0:	0800cc01 	.word	0x0800cc01
 800cba4:	0800cc01 	.word	0x0800cc01
 800cba8:	0800cc01 	.word	0x0800cc01
 800cbac:	0800cc01 	.word	0x0800cc01
 800cbb0:	0800cc01 	.word	0x0800cc01
 800cbb4:	0800cc01 	.word	0x0800cc01
 800cbb8:	0800cc07 	.word	0x0800cc07
 800cbbc:	0800cc01 	.word	0x0800cc01
 800cbc0:	0800cc01 	.word	0x0800cc01
 800cbc4:	0800cc01 	.word	0x0800cc01
 800cbc8:	0800cc01 	.word	0x0800cc01
 800cbcc:	0800cc01 	.word	0x0800cc01
 800cbd0:	0800cc01 	.word	0x0800cc01
 800cbd4:	0800cc01 	.word	0x0800cc01
 800cbd8:	0800cc07 	.word	0x0800cc07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	3304      	adds	r3, #4
 800cbe0:	2101      	movs	r1, #1
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 fdf4 	bl	800d7d0 <RCCEx_PLL2_Config>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cbec:	e00c      	b.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	3324      	adds	r3, #36	; 0x24
 800cbf2:	2101      	movs	r1, #1
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f000 fe9d 	bl	800d934 <RCCEx_PLL3_Config>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800cbfe:	e003      	b.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	75fb      	strb	r3, [r7, #23]
      break;
 800cc04:	e000      	b.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800cc06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc08:	7dfb      	ldrb	r3, [r7, #23]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d109      	bne.n	800cc22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cc0e:	4b24      	ldr	r3, [pc, #144]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc1a:	4921      	ldr	r1, [pc, #132]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	654b      	str	r3, [r1, #84]	; 0x54
 800cc20:	e001      	b.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 0302 	and.w	r3, r3, #2
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d03e      	beq.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc36:	2b05      	cmp	r3, #5
 800cc38:	d820      	bhi.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800cc3a:	a201      	add	r2, pc, #4	; (adr r2, 800cc40 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800cc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc40:	0800cc83 	.word	0x0800cc83
 800cc44:	0800cc59 	.word	0x0800cc59
 800cc48:	0800cc6b 	.word	0x0800cc6b
 800cc4c:	0800cc83 	.word	0x0800cc83
 800cc50:	0800cc83 	.word	0x0800cc83
 800cc54:	0800cc83 	.word	0x0800cc83
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	3304      	adds	r3, #4
 800cc5c:	2101      	movs	r1, #1
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 fdb6 	bl	800d7d0 <RCCEx_PLL2_Config>
 800cc64:	4603      	mov	r3, r0
 800cc66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cc68:	e00c      	b.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3324      	adds	r3, #36	; 0x24
 800cc6e:	2101      	movs	r1, #1
 800cc70:	4618      	mov	r0, r3
 800cc72:	f000 fe5f 	bl	800d934 <RCCEx_PLL3_Config>
 800cc76:	4603      	mov	r3, r0
 800cc78:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cc7a:	e003      	b.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	75fb      	strb	r3, [r7, #23]
      break;
 800cc80:	e000      	b.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800cc82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc84:	7dfb      	ldrb	r3, [r7, #23]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d110      	bne.n	800ccac <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cc8a:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc8e:	f023 0207 	bic.w	r2, r3, #7
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc96:	4902      	ldr	r1, [pc, #8]	; (800cca0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	654b      	str	r3, [r1, #84]	; 0x54
 800cc9c:	e008      	b.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800cc9e:	bf00      	nop
 800cca0:	58024400 	.word	0x58024400
 800cca4:	58024800 	.word	0x58024800
 800cca8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
 800ccae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d039      	beq.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccc2:	2b05      	cmp	r3, #5
 800ccc4:	d820      	bhi.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800ccc6:	a201      	add	r2, pc, #4	; (adr r2, 800cccc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800ccc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cccc:	0800cd0f 	.word	0x0800cd0f
 800ccd0:	0800cce5 	.word	0x0800cce5
 800ccd4:	0800ccf7 	.word	0x0800ccf7
 800ccd8:	0800cd0f 	.word	0x0800cd0f
 800ccdc:	0800cd0f 	.word	0x0800cd0f
 800cce0:	0800cd0f 	.word	0x0800cd0f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3304      	adds	r3, #4
 800cce8:	2101      	movs	r1, #1
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fd70 	bl	800d7d0 <RCCEx_PLL2_Config>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ccf4:	e00c      	b.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3324      	adds	r3, #36	; 0x24
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 fe19 	bl	800d934 <RCCEx_PLL3_Config>
 800cd02:	4603      	mov	r3, r0
 800cd04:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cd06:	e003      	b.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	75fb      	strb	r3, [r7, #23]
      break;
 800cd0c:	e000      	b.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800cd0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd10:	7dfb      	ldrb	r3, [r7, #23]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10a      	bne.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cd16:	4bb7      	ldr	r3, [pc, #732]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cd18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd1a:	f023 0207 	bic.w	r2, r3, #7
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd24:	49b3      	ldr	r1, [pc, #716]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cd26:	4313      	orrs	r3, r2
 800cd28:	658b      	str	r3, [r1, #88]	; 0x58
 800cd2a:	e001      	b.n	800cd30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd2c:	7dfb      	ldrb	r3, [r7, #23]
 800cd2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f003 0320 	and.w	r3, r3, #32
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d04b      	beq.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd46:	d02e      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800cd48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd4c:	d828      	bhi.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cd4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd52:	d02a      	beq.n	800cdaa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800cd54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd58:	d822      	bhi.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cd5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd5e:	d026      	beq.n	800cdae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800cd60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd64:	d81c      	bhi.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cd66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd6a:	d010      	beq.n	800cd8e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800cd6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd70:	d816      	bhi.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d01d      	beq.n	800cdb2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800cd76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd7a:	d111      	bne.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	3304      	adds	r3, #4
 800cd80:	2100      	movs	r1, #0
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 fd24 	bl	800d7d0 <RCCEx_PLL2_Config>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cd8c:	e012      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3324      	adds	r3, #36	; 0x24
 800cd92:	2102      	movs	r1, #2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f000 fdcd 	bl	800d934 <RCCEx_PLL3_Config>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cd9e:	e009      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cda0:	2301      	movs	r3, #1
 800cda2:	75fb      	strb	r3, [r7, #23]
      break;
 800cda4:	e006      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cda6:	bf00      	nop
 800cda8:	e004      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cdaa:	bf00      	nop
 800cdac:	e002      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cdae:	bf00      	nop
 800cdb0:	e000      	b.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800cdb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10a      	bne.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cdba:	4b8e      	ldr	r3, [pc, #568]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdc8:	498a      	ldr	r1, [pc, #552]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	654b      	str	r3, [r1, #84]	; 0x54
 800cdce:	e001      	b.n	800cdd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdd0:	7dfb      	ldrb	r3, [r7, #23]
 800cdd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d04b      	beq.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cde6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cdea:	d02e      	beq.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800cdec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cdf0:	d828      	bhi.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cdf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdf6:	d02a      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800cdf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdfc:	d822      	bhi.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800cdfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce02:	d026      	beq.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800ce04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ce08:	d81c      	bhi.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ce0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce0e:	d010      	beq.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800ce10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce14:	d816      	bhi.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d01d      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800ce1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce1e:	d111      	bne.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3304      	adds	r3, #4
 800ce24:	2100      	movs	r1, #0
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 fcd2 	bl	800d7d0 <RCCEx_PLL2_Config>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ce30:	e012      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	3324      	adds	r3, #36	; 0x24
 800ce36:	2102      	movs	r1, #2
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 fd7b 	bl	800d934 <RCCEx_PLL3_Config>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ce42:	e009      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce44:	2301      	movs	r3, #1
 800ce46:	75fb      	strb	r3, [r7, #23]
      break;
 800ce48:	e006      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ce4a:	bf00      	nop
 800ce4c:	e004      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ce4e:	bf00      	nop
 800ce50:	e002      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ce52:	bf00      	nop
 800ce54:	e000      	b.n	800ce58 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800ce56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce58:	7dfb      	ldrb	r3, [r7, #23]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10a      	bne.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ce5e:	4b65      	ldr	r3, [pc, #404]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ce60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce62:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ce6c:	4961      	ldr	r1, [pc, #388]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ce6e:	4313      	orrs	r3, r2
 800ce70:	658b      	str	r3, [r1, #88]	; 0x58
 800ce72:	e001      	b.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce74:	7dfb      	ldrb	r3, [r7, #23]
 800ce76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d04b      	beq.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ce8a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ce8e:	d02e      	beq.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800ce90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ce94:	d828      	bhi.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ce96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce9a:	d02a      	beq.n	800cef2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800ce9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cea0:	d822      	bhi.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800cea2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cea6:	d026      	beq.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800cea8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ceac:	d81c      	bhi.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ceae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ceb2:	d010      	beq.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800ceb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ceb8:	d816      	bhi.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d01d      	beq.n	800cefa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800cebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cec2:	d111      	bne.n	800cee8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	3304      	adds	r3, #4
 800cec8:	2100      	movs	r1, #0
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 fc80 	bl	800d7d0 <RCCEx_PLL2_Config>
 800ced0:	4603      	mov	r3, r0
 800ced2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ced4:	e012      	b.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	3324      	adds	r3, #36	; 0x24
 800ceda:	2102      	movs	r1, #2
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 fd29 	bl	800d934 <RCCEx_PLL3_Config>
 800cee2:	4603      	mov	r3, r0
 800cee4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cee6:	e009      	b.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	75fb      	strb	r3, [r7, #23]
      break;
 800ceec:	e006      	b.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ceee:	bf00      	nop
 800cef0:	e004      	b.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800cef2:	bf00      	nop
 800cef4:	e002      	b.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800cef6:	bf00      	nop
 800cef8:	e000      	b.n	800cefc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800cefa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cefc:	7dfb      	ldrb	r3, [r7, #23]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10a      	bne.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cf02:	4b3c      	ldr	r3, [pc, #240]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf10:	4938      	ldr	r1, [pc, #224]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf12:	4313      	orrs	r3, r2
 800cf14:	658b      	str	r3, [r1, #88]	; 0x58
 800cf16:	e001      	b.n	800cf1c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf18:	7dfb      	ldrb	r3, [r7, #23]
 800cf1a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 0308 	and.w	r3, r3, #8
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d01a      	beq.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf32:	d10a      	bne.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3324      	adds	r3, #36	; 0x24
 800cf38:	2102      	movs	r1, #2
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f000 fcfa 	bl	800d934 <RCCEx_PLL3_Config>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cf4a:	4b2a      	ldr	r3, [pc, #168]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cf58:	4926      	ldr	r1, [pc, #152]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 0310 	and.w	r3, r3, #16
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d01a      	beq.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf74:	d10a      	bne.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	3324      	adds	r3, #36	; 0x24
 800cf7a:	2102      	movs	r1, #2
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f000 fcd9 	bl	800d934 <RCCEx_PLL3_Config>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf8c:	4b19      	ldr	r3, [pc, #100]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf9a:	4916      	ldr	r1, [pc, #88]	; (800cff4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d036      	beq.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cfb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfb6:	d01f      	beq.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800cfb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfbc:	d817      	bhi.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d003      	beq.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800cfc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfc6:	d009      	beq.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800cfc8:	e011      	b.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	3304      	adds	r3, #4
 800cfce:	2100      	movs	r1, #0
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 fbfd 	bl	800d7d0 <RCCEx_PLL2_Config>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cfda:	e00e      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	3324      	adds	r3, #36	; 0x24
 800cfe0:	2102      	movs	r1, #2
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f000 fca6 	bl	800d934 <RCCEx_PLL3_Config>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800cfec:	e005      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	75fb      	strb	r3, [r7, #23]
      break;
 800cff2:	e002      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800cff4:	58024400 	.word	0x58024400
      break;
 800cff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cffa:	7dfb      	ldrb	r3, [r7, #23]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10a      	bne.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d000:	4b93      	ldr	r3, [pc, #588]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d00e:	4990      	ldr	r1, [pc, #576]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d010:	4313      	orrs	r3, r2
 800d012:	658b      	str	r3, [r1, #88]	; 0x58
 800d014:	e001      	b.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d016:	7dfb      	ldrb	r3, [r7, #23]
 800d018:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d022:	2b00      	cmp	r3, #0
 800d024:	d033      	beq.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d02c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d030:	d01c      	beq.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800d032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d036:	d816      	bhi.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800d038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d03c:	d003      	beq.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800d03e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d042:	d007      	beq.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800d044:	e00f      	b.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d046:	4b82      	ldr	r3, [pc, #520]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04a:	4a81      	ldr	r2, [pc, #516]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d04c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d050:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800d052:	e00c      	b.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	3324      	adds	r3, #36	; 0x24
 800d058:	2101      	movs	r1, #1
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 fc6a 	bl	800d934 <RCCEx_PLL3_Config>
 800d060:	4603      	mov	r3, r0
 800d062:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800d064:	e003      	b.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d066:	2301      	movs	r3, #1
 800d068:	75fb      	strb	r3, [r7, #23]
      break;
 800d06a:	e000      	b.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800d06c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d06e:	7dfb      	ldrb	r3, [r7, #23]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d10a      	bne.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d074:	4b76      	ldr	r3, [pc, #472]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d082:	4973      	ldr	r1, [pc, #460]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d084:	4313      	orrs	r3, r2
 800d086:	654b      	str	r3, [r1, #84]	; 0x54
 800d088:	e001      	b.n	800d08e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d08a:	7dfb      	ldrb	r3, [r7, #23]
 800d08c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d096:	2b00      	cmp	r3, #0
 800d098:	d029      	beq.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d003      	beq.n	800d0aa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800d0a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0a6:	d007      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800d0a8:	e00f      	b.n	800d0ca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0aa:	4b69      	ldr	r3, [pc, #420]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ae:	4a68      	ldr	r2, [pc, #416]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d0b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d0b6:	e00b      	b.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3304      	adds	r3, #4
 800d0bc:	2102      	movs	r1, #2
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 fb86 	bl	800d7d0 <RCCEx_PLL2_Config>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d0c8:	e002      	b.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	75fb      	strb	r3, [r7, #23]
      break;
 800d0ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d0d0:	7dfb      	ldrb	r3, [r7, #23]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d109      	bne.n	800d0ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d0d6:	4b5e      	ldr	r3, [pc, #376]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d0d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0e2:	495b      	ldr	r1, [pc, #364]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d0e8:	e001      	b.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0ea:	7dfb      	ldrb	r3, [r7, #23]
 800d0ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00a      	beq.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3324      	adds	r3, #36	; 0x24
 800d0fe:	2102      	movs	r1, #2
 800d100:	4618      	mov	r0, r3
 800d102:	f000 fc17 	bl	800d934 <RCCEx_PLL3_Config>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d001      	beq.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d030      	beq.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d120:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d124:	d017      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800d126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d12a:	d811      	bhi.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800d12c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d130:	d013      	beq.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800d132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d136:	d80b      	bhi.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d010      	beq.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800d13c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d140:	d106      	bne.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d142:	4b43      	ldr	r3, [pc, #268]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d146:	4a42      	ldr	r2, [pc, #264]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d14c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d14e:	e007      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	75fb      	strb	r3, [r7, #23]
      break;
 800d154:	e004      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800d156:	bf00      	nop
 800d158:	e002      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800d15a:	bf00      	nop
 800d15c:	e000      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800d15e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d160:	7dfb      	ldrb	r3, [r7, #23]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d109      	bne.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d166:	4b3a      	ldr	r3, [pc, #232]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d16a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d172:	4937      	ldr	r1, [pc, #220]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d174:	4313      	orrs	r3, r2
 800d176:	654b      	str	r3, [r1, #84]	; 0x54
 800d178:	e001      	b.n	800d17e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d17a:	7dfb      	ldrb	r3, [r7, #23]
 800d17c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d186:	2b00      	cmp	r3, #0
 800d188:	d008      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d18a:	4b31      	ldr	r3, [pc, #196]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d18c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d18e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d196:	492e      	ldr	r1, [pc, #184]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d198:	4313      	orrs	r3, r2
 800d19a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d009      	beq.n	800d1bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d1a8:	4b29      	ldr	r3, [pc, #164]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d1b6:	4926      	ldr	r1, [pc, #152]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d008      	beq.n	800d1da <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d1c8:	4b21      	ldr	r3, [pc, #132]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1d4:	491e      	ldr	r1, [pc, #120]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00d      	beq.n	800d202 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d1e6:	4b1a      	ldr	r3, [pc, #104]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	4a19      	ldr	r2, [pc, #100]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d1f0:	6113      	str	r3, [r2, #16]
 800d1f2:	4b17      	ldr	r3, [pc, #92]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1f4:	691a      	ldr	r2, [r3, #16]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d1fc:	4914      	ldr	r1, [pc, #80]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d1fe:	4313      	orrs	r3, r2
 800d200:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2b00      	cmp	r3, #0
 800d208:	da08      	bge.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d20a:	4b11      	ldr	r3, [pc, #68]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d20e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d216:	490e      	ldr	r1, [pc, #56]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d218:	4313      	orrs	r3, r2
 800d21a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d009      	beq.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d228:	4b09      	ldr	r3, [pc, #36]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d22a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d22c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d236:	4906      	ldr	r1, [pc, #24]	; (800d250 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800d238:	4313      	orrs	r3, r2
 800d23a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d23c:	7dbb      	ldrb	r3, [r7, #22]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800d242:	2300      	movs	r3, #0
 800d244:	e000      	b.n	800d248 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800d246:	2301      	movs	r3, #1
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3718      	adds	r7, #24
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	58024400 	.word	0x58024400

0800d254 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d258:	f7ff f860 	bl	800c31c <HAL_RCC_GetHCLKFreq>
 800d25c:	4602      	mov	r2, r0
 800d25e:	4b06      	ldr	r3, [pc, #24]	; (800d278 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d260:	6a1b      	ldr	r3, [r3, #32]
 800d262:	091b      	lsrs	r3, r3, #4
 800d264:	f003 0307 	and.w	r3, r3, #7
 800d268:	4904      	ldr	r1, [pc, #16]	; (800d27c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d26a:	5ccb      	ldrb	r3, [r1, r3]
 800d26c:	f003 031f 	and.w	r3, r3, #31
 800d270:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d274:	4618      	mov	r0, r3
 800d276:	bd80      	pop	{r7, pc}
 800d278:	58024400 	.word	0x58024400
 800d27c:	080150b4 	.word	0x080150b4

0800d280 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d280:	b480      	push	{r7}
 800d282:	b089      	sub	sp, #36	; 0x24
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d288:	4ba1      	ldr	r3, [pc, #644]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28c:	f003 0303 	and.w	r3, r3, #3
 800d290:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d292:	4b9f      	ldr	r3, [pc, #636]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d296:	0b1b      	lsrs	r3, r3, #12
 800d298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d29c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d29e:	4b9c      	ldr	r3, [pc, #624]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a2:	091b      	lsrs	r3, r3, #4
 800d2a4:	f003 0301 	and.w	r3, r3, #1
 800d2a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d2aa:	4b99      	ldr	r3, [pc, #612]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ae:	08db      	lsrs	r3, r3, #3
 800d2b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2b4:	693a      	ldr	r2, [r7, #16]
 800d2b6:	fb02 f303 	mul.w	r3, r2, r3
 800d2ba:	ee07 3a90 	vmov	s15, r3
 800d2be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f000 8111 	beq.w	800d4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	f000 8083 	beq.w	800d3dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	f200 80a1 	bhi.w	800d420 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d003      	beq.n	800d2ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d056      	beq.n	800d398 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d2ea:	e099      	b.n	800d420 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2ec:	4b88      	ldr	r3, [pc, #544]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f003 0320 	and.w	r3, r3, #32
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d02d      	beq.n	800d354 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d2f8:	4b85      	ldr	r3, [pc, #532]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	08db      	lsrs	r3, r3, #3
 800d2fe:	f003 0303 	and.w	r3, r3, #3
 800d302:	4a84      	ldr	r2, [pc, #528]	; (800d514 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d304:	fa22 f303 	lsr.w	r3, r2, r3
 800d308:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	ee07 3a90 	vmov	s15, r3
 800d310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	ee07 3a90 	vmov	s15, r3
 800d31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d31e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d322:	4b7b      	ldr	r3, [pc, #492]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d32a:	ee07 3a90 	vmov	s15, r3
 800d32e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d332:	ed97 6a03 	vldr	s12, [r7, #12]
 800d336:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d33a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d33e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d34e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d352:	e087      	b.n	800d464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	ee07 3a90 	vmov	s15, r3
 800d35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d35e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d51c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d366:	4b6a      	ldr	r3, [pc, #424]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d36e:	ee07 3a90 	vmov	s15, r3
 800d372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d376:	ed97 6a03 	vldr	s12, [r7, #12]
 800d37a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d37e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d38a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d396:	e065      	b.n	800d464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	ee07 3a90 	vmov	s15, r3
 800d39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d3a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3aa:	4b59      	ldr	r3, [pc, #356]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b2:	ee07 3a90 	vmov	s15, r3
 800d3b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d3da:	e043      	b.n	800d464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	ee07 3a90 	vmov	s15, r3
 800d3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d3ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ee:	4b48      	ldr	r3, [pc, #288]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3f6:	ee07 3a90 	vmov	s15, r3
 800d3fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d402:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d40a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d40e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d41a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d41e:	e021      	b.n	800d464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	ee07 3a90 	vmov	s15, r3
 800d426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d42a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d42e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d432:	4b37      	ldr	r3, [pc, #220]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d43a:	ee07 3a90 	vmov	s15, r3
 800d43e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d442:	ed97 6a03 	vldr	s12, [r7, #12]
 800d446:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d44a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d44e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d45a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d45e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d462:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d464:	4b2a      	ldr	r3, [pc, #168]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d468:	0a5b      	lsrs	r3, r3, #9
 800d46a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d46e:	ee07 3a90 	vmov	s15, r3
 800d472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d47a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d47e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d48a:	ee17 2a90 	vmov	r2, s15
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d492:	4b1f      	ldr	r3, [pc, #124]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	0c1b      	lsrs	r3, r3, #16
 800d498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d49c:	ee07 3a90 	vmov	s15, r3
 800d4a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4b8:	ee17 2a90 	vmov	r2, s15
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d4c0:	4b13      	ldr	r3, [pc, #76]	; (800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c4:	0e1b      	lsrs	r3, r3, #24
 800d4c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4e6:	ee17 2a90 	vmov	r2, s15
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d4ee:	e008      	b.n	800d502 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	609a      	str	r2, [r3, #8]
}
 800d502:	bf00      	nop
 800d504:	3724      	adds	r7, #36	; 0x24
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop
 800d510:	58024400 	.word	0x58024400
 800d514:	03d09000 	.word	0x03d09000
 800d518:	46000000 	.word	0x46000000
 800d51c:	4c742400 	.word	0x4c742400
 800d520:	4a742400 	.word	0x4a742400
 800d524:	4bbebc20 	.word	0x4bbebc20

0800d528 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d528:	b480      	push	{r7}
 800d52a:	b089      	sub	sp, #36	; 0x24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d530:	4ba1      	ldr	r3, [pc, #644]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d534:	f003 0303 	and.w	r3, r3, #3
 800d538:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d53a:	4b9f      	ldr	r3, [pc, #636]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d53e:	0d1b      	lsrs	r3, r3, #20
 800d540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d544:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d546:	4b9c      	ldr	r3, [pc, #624]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54a:	0a1b      	lsrs	r3, r3, #8
 800d54c:	f003 0301 	and.w	r3, r3, #1
 800d550:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d552:	4b99      	ldr	r3, [pc, #612]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d556:	08db      	lsrs	r3, r3, #3
 800d558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d55c:	693a      	ldr	r2, [r7, #16]
 800d55e:	fb02 f303 	mul.w	r3, r2, r3
 800d562:	ee07 3a90 	vmov	s15, r3
 800d566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d56a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2b00      	cmp	r3, #0
 800d572:	f000 8111 	beq.w	800d798 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	f000 8083 	beq.w	800d684 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	2b02      	cmp	r3, #2
 800d582:	f200 80a1 	bhi.w	800d6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d003      	beq.n	800d594 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d056      	beq.n	800d640 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d592:	e099      	b.n	800d6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d594:	4b88      	ldr	r3, [pc, #544]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 0320 	and.w	r3, r3, #32
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d02d      	beq.n	800d5fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d5a0:	4b85      	ldr	r3, [pc, #532]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	08db      	lsrs	r3, r3, #3
 800d5a6:	f003 0303 	and.w	r3, r3, #3
 800d5aa:	4a84      	ldr	r2, [pc, #528]	; (800d7bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d5ac:	fa22 f303 	lsr.w	r3, r2, r3
 800d5b0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	ee07 3a90 	vmov	s15, r3
 800d5b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	ee07 3a90 	vmov	s15, r3
 800d5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5ca:	4b7b      	ldr	r3, [pc, #492]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d2:	ee07 3a90 	vmov	s15, r3
 800d5d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d5fa:	e087      	b.n	800d70c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d606:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d60a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d60e:	4b6a      	ldr	r3, [pc, #424]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d616:	ee07 3a90 	vmov	s15, r3
 800d61a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d61e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d622:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d62a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d62e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d63a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d63e:	e065      	b.n	800d70c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	ee07 3a90 	vmov	s15, r3
 800d646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d64a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d64e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d652:	4b59      	ldr	r3, [pc, #356]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d65a:	ee07 3a90 	vmov	s15, r3
 800d65e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d662:	ed97 6a03 	vldr	s12, [r7, #12]
 800d666:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d66a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d66e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d67a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d67e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d682:	e043      	b.n	800d70c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	ee07 3a90 	vmov	s15, r3
 800d68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d68e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d7cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d696:	4b48      	ldr	r3, [pc, #288]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d69e:	ee07 3a90 	vmov	s15, r3
 800d6a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d6c6:	e021      	b.n	800d70c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	ee07 3a90 	vmov	s15, r3
 800d6ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d6d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6da:	4b37      	ldr	r3, [pc, #220]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e2:	ee07 3a90 	vmov	s15, r3
 800d6e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d702:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d706:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d70a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d70c:	4b2a      	ldr	r3, [pc, #168]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d710:	0a5b      	lsrs	r3, r3, #9
 800d712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d716:	ee07 3a90 	vmov	s15, r3
 800d71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d722:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d726:	edd7 6a07 	vldr	s13, [r7, #28]
 800d72a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d72e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d732:	ee17 2a90 	vmov	r2, s15
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d73a:	4b1f      	ldr	r3, [pc, #124]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73e:	0c1b      	lsrs	r3, r3, #16
 800d740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d744:	ee07 3a90 	vmov	s15, r3
 800d748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d74c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d750:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d754:	edd7 6a07 	vldr	s13, [r7, #28]
 800d758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d75c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d760:	ee17 2a90 	vmov	r2, s15
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d768:	4b13      	ldr	r3, [pc, #76]	; (800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76c:	0e1b      	lsrs	r3, r3, #24
 800d76e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d772:	ee07 3a90 	vmov	s15, r3
 800d776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d77e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d782:	edd7 6a07 	vldr	s13, [r7, #28]
 800d786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d78a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d78e:	ee17 2a90 	vmov	r2, s15
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d796:	e008      	b.n	800d7aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	609a      	str	r2, [r3, #8]
}
 800d7aa:	bf00      	nop
 800d7ac:	3724      	adds	r7, #36	; 0x24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr
 800d7b6:	bf00      	nop
 800d7b8:	58024400 	.word	0x58024400
 800d7bc:	03d09000 	.word	0x03d09000
 800d7c0:	46000000 	.word	0x46000000
 800d7c4:	4c742400 	.word	0x4c742400
 800d7c8:	4a742400 	.word	0x4a742400
 800d7cc:	4bbebc20 	.word	0x4bbebc20

0800d7d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7de:	4b53      	ldr	r3, [pc, #332]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e2:	f003 0303 	and.w	r3, r3, #3
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d101      	bne.n	800d7ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e099      	b.n	800d922 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d7ee:	4b4f      	ldr	r3, [pc, #316]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a4e      	ldr	r2, [pc, #312]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d7f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d7f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7fa:	f7f8 fa57 	bl	8005cac <HAL_GetTick>
 800d7fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d800:	e008      	b.n	800d814 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d802:	f7f8 fa53 	bl	8005cac <HAL_GetTick>
 800d806:	4602      	mov	r2, r0
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	2b02      	cmp	r3, #2
 800d80e:	d901      	bls.n	800d814 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d810:	2303      	movs	r3, #3
 800d812:	e086      	b.n	800d922 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d814:	4b45      	ldr	r3, [pc, #276]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d1f0      	bne.n	800d802 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d820:	4b42      	ldr	r3, [pc, #264]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d824:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	031b      	lsls	r3, r3, #12
 800d82e:	493f      	ldr	r1, [pc, #252]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d830:	4313      	orrs	r3, r2
 800d832:	628b      	str	r3, [r1, #40]	; 0x28
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	3b01      	subs	r3, #1
 800d83a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	3b01      	subs	r3, #1
 800d844:	025b      	lsls	r3, r3, #9
 800d846:	b29b      	uxth	r3, r3
 800d848:	431a      	orrs	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	3b01      	subs	r3, #1
 800d850:	041b      	lsls	r3, r3, #16
 800d852:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d856:	431a      	orrs	r2, r3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	3b01      	subs	r3, #1
 800d85e:	061b      	lsls	r3, r3, #24
 800d860:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d864:	4931      	ldr	r1, [pc, #196]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d866:	4313      	orrs	r3, r2
 800d868:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d86a:	4b30      	ldr	r3, [pc, #192]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d86c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	695b      	ldr	r3, [r3, #20]
 800d876:	492d      	ldr	r1, [pc, #180]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d878:	4313      	orrs	r3, r2
 800d87a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d87c:	4b2b      	ldr	r3, [pc, #172]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d880:	f023 0220 	bic.w	r2, r3, #32
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	699b      	ldr	r3, [r3, #24]
 800d888:	4928      	ldr	r1, [pc, #160]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d88a:	4313      	orrs	r3, r2
 800d88c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d88e:	4b27      	ldr	r3, [pc, #156]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d892:	4a26      	ldr	r2, [pc, #152]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d894:	f023 0310 	bic.w	r3, r3, #16
 800d898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d89a:	4b24      	ldr	r3, [pc, #144]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d89c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d89e:	4b24      	ldr	r3, [pc, #144]	; (800d930 <RCCEx_PLL2_Config+0x160>)
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	69d2      	ldr	r2, [r2, #28]
 800d8a6:	00d2      	lsls	r2, r2, #3
 800d8a8:	4920      	ldr	r1, [pc, #128]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d8ae:	4b1f      	ldr	r3, [pc, #124]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	4a1e      	ldr	r2, [pc, #120]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8b4:	f043 0310 	orr.w	r3, r3, #16
 800d8b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8c0:	4b1a      	ldr	r3, [pc, #104]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c4:	4a19      	ldr	r2, [pc, #100]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8cc:	e00f      	b.n	800d8ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d106      	bne.n	800d8e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8d4:	4b15      	ldr	r3, [pc, #84]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d8:	4a14      	ldr	r2, [pc, #80]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8e0:	e005      	b.n	800d8ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d8e2:	4b12      	ldr	r3, [pc, #72]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e6:	4a11      	ldr	r2, [pc, #68]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d8ee:	4b0f      	ldr	r3, [pc, #60]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	4a0e      	ldr	r2, [pc, #56]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d8f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d8f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8fa:	f7f8 f9d7 	bl	8005cac <HAL_GetTick>
 800d8fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d900:	e008      	b.n	800d914 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d902:	f7f8 f9d3 	bl	8005cac <HAL_GetTick>
 800d906:	4602      	mov	r2, r0
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d901      	bls.n	800d914 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d910:	2303      	movs	r3, #3
 800d912:	e006      	b.n	800d922 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d914:	4b05      	ldr	r3, [pc, #20]	; (800d92c <RCCEx_PLL2_Config+0x15c>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d0f0      	beq.n	800d902 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d920:	7bfb      	ldrb	r3, [r7, #15]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	58024400 	.word	0x58024400
 800d930:	ffff0007 	.word	0xffff0007

0800d934 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d942:	4b53      	ldr	r3, [pc, #332]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d946:	f003 0303 	and.w	r3, r3, #3
 800d94a:	2b03      	cmp	r3, #3
 800d94c:	d101      	bne.n	800d952 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d94e:	2301      	movs	r3, #1
 800d950:	e099      	b.n	800da86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d952:	4b4f      	ldr	r3, [pc, #316]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a4e      	ldr	r2, [pc, #312]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d95c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d95e:	f7f8 f9a5 	bl	8005cac <HAL_GetTick>
 800d962:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d964:	e008      	b.n	800d978 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d966:	f7f8 f9a1 	bl	8005cac <HAL_GetTick>
 800d96a:	4602      	mov	r2, r0
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	2b02      	cmp	r3, #2
 800d972:	d901      	bls.n	800d978 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d974:	2303      	movs	r3, #3
 800d976:	e086      	b.n	800da86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d978:	4b45      	ldr	r3, [pc, #276]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1f0      	bne.n	800d966 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d984:	4b42      	ldr	r3, [pc, #264]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d988:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	051b      	lsls	r3, r3, #20
 800d992:	493f      	ldr	r1, [pc, #252]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d994:	4313      	orrs	r3, r2
 800d996:	628b      	str	r3, [r1, #40]	; 0x28
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	025b      	lsls	r3, r3, #9
 800d9aa:	b29b      	uxth	r3, r3
 800d9ac:	431a      	orrs	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	041b      	lsls	r3, r3, #16
 800d9b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9ba:	431a      	orrs	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	061b      	lsls	r3, r3, #24
 800d9c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9c8:	4931      	ldr	r1, [pc, #196]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9ce:	4b30      	ldr	r3, [pc, #192]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	695b      	ldr	r3, [r3, #20]
 800d9da:	492d      	ldr	r1, [pc, #180]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d9e0:	4b2b      	ldr	r3, [pc, #172]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	699b      	ldr	r3, [r3, #24]
 800d9ec:	4928      	ldr	r1, [pc, #160]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d9f2:	4b27      	ldr	r3, [pc, #156]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f6:	4a26      	ldr	r2, [pc, #152]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800d9f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d9fe:	4b24      	ldr	r3, [pc, #144]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da02:	4b24      	ldr	r3, [pc, #144]	; (800da94 <RCCEx_PLL3_Config+0x160>)
 800da04:	4013      	ands	r3, r2
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	69d2      	ldr	r2, [r2, #28]
 800da0a:	00d2      	lsls	r2, r2, #3
 800da0c:	4920      	ldr	r1, [pc, #128]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da0e:	4313      	orrs	r3, r2
 800da10:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da12:	4b1f      	ldr	r3, [pc, #124]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da16:	4a1e      	ldr	r2, [pc, #120]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d106      	bne.n	800da32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da24:	4b1a      	ldr	r3, [pc, #104]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da28:	4a19      	ldr	r2, [pc, #100]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da30:	e00f      	b.n	800da52 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d106      	bne.n	800da46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da38:	4b15      	ldr	r3, [pc, #84]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3c:	4a14      	ldr	r2, [pc, #80]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da42:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da44:	e005      	b.n	800da52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da46:	4b12      	ldr	r3, [pc, #72]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4a:	4a11      	ldr	r2, [pc, #68]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da52:	4b0f      	ldr	r3, [pc, #60]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a0e      	ldr	r2, [pc, #56]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da5e:	f7f8 f925 	bl	8005cac <HAL_GetTick>
 800da62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da64:	e008      	b.n	800da78 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800da66:	f7f8 f921 	bl	8005cac <HAL_GetTick>
 800da6a:	4602      	mov	r2, r0
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	1ad3      	subs	r3, r2, r3
 800da70:	2b02      	cmp	r3, #2
 800da72:	d901      	bls.n	800da78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da74:	2303      	movs	r3, #3
 800da76:	e006      	b.n	800da86 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da78:	4b05      	ldr	r3, [pc, #20]	; (800da90 <RCCEx_PLL3_Config+0x15c>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da80:	2b00      	cmp	r3, #0
 800da82:	d0f0      	beq.n	800da66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da84:	7bfb      	ldrb	r3, [r7, #15]
}
 800da86:	4618      	mov	r0, r3
 800da88:	3710      	adds	r7, #16
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	58024400 	.word	0x58024400
 800da94:	ffff0007 	.word	0xffff0007

0800da98 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800daa0:	2300      	movs	r3, #0
 800daa2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	e0eb      	b.n	800dc86 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2200      	movs	r2, #0
 800dab2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a75      	ldr	r2, [pc, #468]	; (800dc90 <HAL_SPI_Init+0x1f8>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d00f      	beq.n	800dade <HAL_SPI_Init+0x46>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a74      	ldr	r2, [pc, #464]	; (800dc94 <HAL_SPI_Init+0x1fc>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d00a      	beq.n	800dade <HAL_SPI_Init+0x46>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a72      	ldr	r2, [pc, #456]	; (800dc98 <HAL_SPI_Init+0x200>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d005      	beq.n	800dade <HAL_SPI_Init+0x46>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	2b0f      	cmp	r3, #15
 800dad8:	d901      	bls.n	800dade <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	e0d3      	b.n	800dc86 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f001 f87a 	bl	800ebd8 <SPI_GetPacketSize>
 800dae4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a69      	ldr	r2, [pc, #420]	; (800dc90 <HAL_SPI_Init+0x1f8>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d00c      	beq.n	800db0a <HAL_SPI_Init+0x72>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a67      	ldr	r2, [pc, #412]	; (800dc94 <HAL_SPI_Init+0x1fc>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d007      	beq.n	800db0a <HAL_SPI_Init+0x72>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4a66      	ldr	r2, [pc, #408]	; (800dc98 <HAL_SPI_Init+0x200>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d002      	beq.n	800db0a <HAL_SPI_Init+0x72>
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2b08      	cmp	r3, #8
 800db08:	d811      	bhi.n	800db2e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db0e:	4a60      	ldr	r2, [pc, #384]	; (800dc90 <HAL_SPI_Init+0x1f8>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d009      	beq.n	800db28 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a5e      	ldr	r2, [pc, #376]	; (800dc94 <HAL_SPI_Init+0x1fc>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d004      	beq.n	800db28 <HAL_SPI_Init+0x90>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a5d      	ldr	r2, [pc, #372]	; (800dc98 <HAL_SPI_Init+0x200>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d104      	bne.n	800db32 <HAL_SPI_Init+0x9a>
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	2b10      	cmp	r3, #16
 800db2c:	d901      	bls.n	800db32 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	e0a9      	b.n	800dc86 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d106      	bne.n	800db4c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2200      	movs	r2, #0
 800db42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f7f6 fd84 	bl	8004654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2202      	movs	r2, #2
 800db50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f022 0201 	bic.w	r2, r2, #1
 800db62:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db6c:	d119      	bne.n	800dba2 <HAL_SPI_Init+0x10a>
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db76:	d103      	bne.n	800db80 <HAL_SPI_Init+0xe8>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d008      	beq.n	800db92 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db84:	2b00      	cmp	r3, #0
 800db86:	d10c      	bne.n	800dba2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db90:	d107      	bne.n	800dba2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dba0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	69da      	ldr	r2, [r3, #28]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbaa:	431a      	orrs	r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	431a      	orrs	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb4:	ea42 0103 	orr.w	r1, r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	68da      	ldr	r2, [r3, #12]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	430a      	orrs	r2, r1
 800dbc2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbcc:	431a      	orrs	r2, r3
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd2:	431a      	orrs	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	699b      	ldr	r3, [r3, #24]
 800dbd8:	431a      	orrs	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	691b      	ldr	r3, [r3, #16]
 800dbde:	431a      	orrs	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	695b      	ldr	r3, [r3, #20]
 800dbe4:	431a      	orrs	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a1b      	ldr	r3, [r3, #32]
 800dbea:	431a      	orrs	r2, r3
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	431a      	orrs	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbf6:	431a      	orrs	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	431a      	orrs	r2, r3
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dc02:	ea42 0103 	orr.w	r1, r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	430a      	orrs	r2, r1
 800dc10:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d113      	bne.n	800dc42 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	689b      	ldr	r3, [r3, #8]
 800dc20:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc2c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc40:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f022 0201 	bic.w	r2, r2, #1
 800dc50:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00a      	beq.n	800dc74 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	68db      	ldr	r3, [r3, #12]
 800dc64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	430a      	orrs	r2, r1
 800dc72:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	40013000 	.word	0x40013000
 800dc94:	40003800 	.word	0x40003800
 800dc98:	40003c00 	.word	0x40003c00

0800dc9c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b08a      	sub	sp, #40	; 0x28
 800dca0:	af02      	add	r7, sp, #8
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	603b      	str	r3, [r7, #0]
 800dca8:	4613      	mov	r3, r2
 800dcaa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3320      	adds	r3, #32
 800dcb2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d101      	bne.n	800dcc6 <HAL_SPI_Transmit+0x2a>
 800dcc2:	2302      	movs	r3, #2
 800dcc4:	e1d7      	b.n	800e076 <HAL_SPI_Transmit+0x3da>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dcce:	f7f7 ffed 	bl	8005cac <HAL_GetTick>
 800dcd2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d007      	beq.n	800dcf0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dce0:	2302      	movs	r3, #2
 800dce2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2200      	movs	r2, #0
 800dce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dcec:	7efb      	ldrb	r3, [r7, #27]
 800dcee:	e1c2      	b.n	800e076 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d002      	beq.n	800dcfc <HAL_SPI_Transmit+0x60>
 800dcf6:	88fb      	ldrh	r3, [r7, #6]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d107      	bne.n	800dd0c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dd08:	7efb      	ldrb	r3, [r7, #27]
 800dd0a:	e1b4      	b.n	800e076 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2203      	movs	r2, #3
 800dd10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2200      	movs	r2, #0
 800dd18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	88fa      	ldrh	r2, [r7, #6]
 800dd26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	88fa      	ldrh	r2, [r7, #6]
 800dd2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2200      	movs	r2, #0
 800dd36:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2200      	movs	r2, #0
 800dd44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2200      	movs	r2, #0
 800dd52:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dd5c:	d107      	bne.n	800dd6e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	4b96      	ldr	r3, [pc, #600]	; (800dfd0 <HAL_SPI_Transmit+0x334>)
 800dd76:	4013      	ands	r3, r2
 800dd78:	88f9      	ldrh	r1, [r7, #6]
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	6812      	ldr	r2, [r2, #0]
 800dd7e:	430b      	orrs	r3, r1
 800dd80:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f042 0201 	orr.w	r2, r2, #1
 800dd90:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd9a:	d107      	bne.n	800ddac <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	2b0f      	cmp	r3, #15
 800ddb2:	d947      	bls.n	800de44 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ddb4:	e03f      	b.n	800de36 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	695b      	ldr	r3, [r3, #20]
 800ddbc:	f003 0302 	and.w	r3, r3, #2
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	d114      	bne.n	800ddee <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	6812      	ldr	r2, [r2, #0]
 800ddce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddd4:	1d1a      	adds	r2, r3, #4
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	3b01      	subs	r3, #1
 800dde4:	b29a      	uxth	r2, r3
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ddec:	e023      	b.n	800de36 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddee:	f7f7 ff5d 	bl	8005cac <HAL_GetTick>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	1ad3      	subs	r3, r2, r3
 800ddf8:	683a      	ldr	r2, [r7, #0]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d803      	bhi.n	800de06 <HAL_SPI_Transmit+0x16a>
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de04:	d102      	bne.n	800de0c <HAL_SPI_Transmit+0x170>
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d114      	bne.n	800de36 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f000 fe15 	bl	800ea3c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2201      	movs	r2, #1
 800de2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800de32:	2301      	movs	r3, #1
 800de34:	e11f      	b.n	800e076 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1b9      	bne.n	800ddb6 <HAL_SPI_Transmit+0x11a>
 800de42:	e0f2      	b.n	800e02a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	2b07      	cmp	r3, #7
 800de4a:	f240 80e7 	bls.w	800e01c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800de4e:	e05d      	b.n	800df0c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	f003 0302 	and.w	r3, r3, #2
 800de5a:	2b02      	cmp	r3, #2
 800de5c:	d132      	bne.n	800dec4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de64:	b29b      	uxth	r3, r3
 800de66:	2b01      	cmp	r3, #1
 800de68:	d918      	bls.n	800de9c <HAL_SPI_Transmit+0x200>
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d014      	beq.n	800de9c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	6812      	ldr	r2, [r2, #0]
 800de7c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de82:	1d1a      	adds	r2, r3, #4
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de8e:	b29b      	uxth	r3, r3
 800de90:	3b02      	subs	r3, #2
 800de92:	b29a      	uxth	r2, r3
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de9a:	e037      	b.n	800df0c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dea0:	881a      	ldrh	r2, [r3, #0]
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deaa:	1c9a      	adds	r2, r3, #2
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	3b01      	subs	r3, #1
 800deba:	b29a      	uxth	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dec2:	e023      	b.n	800df0c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dec4:	f7f7 fef2 	bl	8005cac <HAL_GetTick>
 800dec8:	4602      	mov	r2, r0
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d803      	bhi.n	800dedc <HAL_SPI_Transmit+0x240>
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deda:	d102      	bne.n	800dee2 <HAL_SPI_Transmit+0x246>
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d114      	bne.n	800df0c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f000 fdaa 	bl	800ea3c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800def6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2201      	movs	r2, #1
 800df04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800df08:	2301      	movs	r3, #1
 800df0a:	e0b4      	b.n	800e076 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df12:	b29b      	uxth	r3, r3
 800df14:	2b00      	cmp	r3, #0
 800df16:	d19b      	bne.n	800de50 <HAL_SPI_Transmit+0x1b4>
 800df18:	e087      	b.n	800e02a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	695b      	ldr	r3, [r3, #20]
 800df20:	f003 0302 	and.w	r3, r3, #2
 800df24:	2b02      	cmp	r3, #2
 800df26:	d155      	bne.n	800dfd4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df2e:	b29b      	uxth	r3, r3
 800df30:	2b03      	cmp	r3, #3
 800df32:	d918      	bls.n	800df66 <HAL_SPI_Transmit+0x2ca>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df38:	2b40      	cmp	r3, #64	; 0x40
 800df3a:	d914      	bls.n	800df66 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6812      	ldr	r2, [r2, #0]
 800df46:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df4c:	1d1a      	adds	r2, r3, #4
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df58:	b29b      	uxth	r3, r3
 800df5a:	3b04      	subs	r3, #4
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800df64:	e05a      	b.n	800e01c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d917      	bls.n	800dfa2 <HAL_SPI_Transmit+0x306>
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d013      	beq.n	800dfa2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df7e:	881a      	ldrh	r2, [r3, #0]
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df88:	1c9a      	adds	r2, r3, #2
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800df94:	b29b      	uxth	r3, r3
 800df96:	3b02      	subs	r3, #2
 800df98:	b29a      	uxth	r2, r3
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dfa0:	e03c      	b.n	800e01c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	3320      	adds	r3, #32
 800dfac:	7812      	ldrb	r2, [r2, #0]
 800dfae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dfb4:	1c5a      	adds	r2, r3, #1
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	3b01      	subs	r3, #1
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dfcc:	e026      	b.n	800e01c <HAL_SPI_Transmit+0x380>
 800dfce:	bf00      	nop
 800dfd0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfd4:	f7f7 fe6a 	bl	8005cac <HAL_GetTick>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	1ad3      	subs	r3, r2, r3
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d803      	bhi.n	800dfec <HAL_SPI_Transmit+0x350>
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfea:	d102      	bne.n	800dff2 <HAL_SPI_Transmit+0x356>
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d114      	bne.n	800e01c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f000 fd22 	bl	800ea3c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	2200      	movs	r2, #0
 800dffc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e006:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e018:	2301      	movs	r3, #1
 800e01a:	e02c      	b.n	800e076 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e022:	b29b      	uxth	r3, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	f47f af78 	bne.w	800df1a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	2200      	movs	r2, #0
 800e032:	2108      	movs	r1, #8
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 fda1 	bl	800eb7c <SPI_WaitOnFlagUntilTimeout>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d007      	beq.n	800e050 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e046:	f043 0220 	orr.w	r2, r3, #32
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f000 fcf3 	bl	800ea3c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2200      	movs	r2, #0
 800e05a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2201      	movs	r2, #1
 800e062:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d001      	beq.n	800e074 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800e070:	2301      	movs	r3, #1
 800e072:	e000      	b.n	800e076 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800e074:	7efb      	ldrb	r3, [r7, #27]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3720      	adds	r7, #32
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop

0800e080 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b08a      	sub	sp, #40	; 0x28
 800e084:	af02      	add	r7, sp, #8
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	603b      	str	r3, [r7, #0]
 800e08c:	4613      	mov	r3, r2
 800e08e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	3330      	adds	r3, #48	; 0x30
 800e09a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0a4:	d112      	bne.n	800e0cc <HAL_SPI_Receive+0x4c>
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d10e      	bne.n	800e0cc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2204      	movs	r2, #4
 800e0b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e0b6:	88fa      	ldrh	r2, [r7, #6]
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	68ba      	ldr	r2, [r7, #8]
 800e0c0:	68b9      	ldr	r1, [r7, #8]
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f000 f9ce 	bl	800e464 <HAL_SPI_TransmitReceive>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	e1c7      	b.n	800e45c <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d101      	bne.n	800e0da <HAL_SPI_Receive+0x5a>
 800e0d6:	2302      	movs	r3, #2
 800e0d8:	e1c0      	b.n	800e45c <HAL_SPI_Receive+0x3dc>
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0e2:	f7f7 fde3 	bl	8005cac <HAL_GetTick>
 800e0e6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d007      	beq.n	800e104 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800e0f4:	2302      	movs	r3, #2
 800e0f6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e100:	7ffb      	ldrb	r3, [r7, #31]
 800e102:	e1ab      	b.n	800e45c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d002      	beq.n	800e110 <HAL_SPI_Receive+0x90>
 800e10a:	88fb      	ldrh	r3, [r7, #6]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d107      	bne.n	800e120 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2200      	movs	r2, #0
 800e118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e11c:	7ffb      	ldrb	r3, [r7, #31]
 800e11e:	e19d      	b.n	800e45c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2204      	movs	r2, #4
 800e124:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	88fa      	ldrh	r2, [r7, #6]
 800e13a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	88fa      	ldrh	r2, [r7, #6]
 800e142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2200      	movs	r2, #0
 800e158:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2200      	movs	r2, #0
 800e160:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e170:	d107      	bne.n	800e182 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e180:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	685a      	ldr	r2, [r3, #4]
 800e188:	4b94      	ldr	r3, [pc, #592]	; (800e3dc <HAL_SPI_Receive+0x35c>)
 800e18a:	4013      	ands	r3, r2
 800e18c:	88f9      	ldrh	r1, [r7, #6]
 800e18e:	68fa      	ldr	r2, [r7, #12]
 800e190:	6812      	ldr	r2, [r2, #0]
 800e192:	430b      	orrs	r3, r1
 800e194:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f042 0201 	orr.w	r2, r2, #1
 800e1a4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e1ae:	d107      	bne.n	800e1c0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	2b0f      	cmp	r3, #15
 800e1c6:	d948      	bls.n	800e25a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e1c8:	e040      	b.n	800e24c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	695a      	ldr	r2, [r3, #20]
 800e1d0:	f248 0308 	movw	r3, #32776	; 0x8008
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d014      	beq.n	800e204 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ea:	1d1a      	adds	r2, r3, #4
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e202:	e023      	b.n	800e24c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e204:	f7f7 fd52 	bl	8005cac <HAL_GetTick>
 800e208:	4602      	mov	r2, r0
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	1ad3      	subs	r3, r2, r3
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	429a      	cmp	r2, r3
 800e212:	d803      	bhi.n	800e21c <HAL_SPI_Receive+0x19c>
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e21a:	d102      	bne.n	800e222 <HAL_SPI_Receive+0x1a2>
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d114      	bne.n	800e24c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 fc0a 	bl	800ea3c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e236:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	e107      	b.n	800e45c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e252:	b29b      	uxth	r3, r3
 800e254:	2b00      	cmp	r3, #0
 800e256:	d1b8      	bne.n	800e1ca <HAL_SPI_Receive+0x14a>
 800e258:	e0ed      	b.n	800e436 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	2b07      	cmp	r3, #7
 800e260:	f240 80e2 	bls.w	800e428 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e264:	e05b      	b.n	800e31e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	695b      	ldr	r3, [r3, #20]
 800e26c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d030      	beq.n	800e2d6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	695b      	ldr	r3, [r3, #20]
 800e27a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d014      	beq.n	800e2ac <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e28a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e28c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e292:	1d1a      	adds	r2, r3, #4
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	3b02      	subs	r3, #2
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2aa:	e038      	b.n	800e31e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2b0:	69ba      	ldr	r2, [r7, #24]
 800e2b2:	8812      	ldrh	r2, [r2, #0]
 800e2b4:	b292      	uxth	r2, r2
 800e2b6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2bc:	1c9a      	adds	r2, r3, #2
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	b29a      	uxth	r2, r3
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e2d4:	e023      	b.n	800e31e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2d6:	f7f7 fce9 	bl	8005cac <HAL_GetTick>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d803      	bhi.n	800e2ee <HAL_SPI_Receive+0x26e>
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ec:	d102      	bne.n	800e2f4 <HAL_SPI_Receive+0x274>
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d114      	bne.n	800e31e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f000 fba1 	bl	800ea3c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e308:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2201      	movs	r2, #1
 800e316:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e31a:	2301      	movs	r3, #1
 800e31c:	e09e      	b.n	800e45c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e324:	b29b      	uxth	r3, r3
 800e326:	2b00      	cmp	r3, #0
 800e328:	d19d      	bne.n	800e266 <HAL_SPI_Receive+0x1e6>
 800e32a:	e084      	b.n	800e436 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	695b      	ldr	r3, [r3, #20]
 800e332:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e336:	2b00      	cmp	r3, #0
 800e338:	d052      	beq.n	800e3e0 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	695b      	ldr	r3, [r3, #20]
 800e340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e344:	2b00      	cmp	r3, #0
 800e346:	d014      	beq.n	800e372 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e350:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e352:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e358:	1d1a      	adds	r2, r3, #4
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e364:	b29b      	uxth	r3, r3
 800e366:	3b04      	subs	r3, #4
 800e368:	b29a      	uxth	r2, r3
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e370:	e05a      	b.n	800e428 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e37c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e380:	d914      	bls.n	800e3ac <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e386:	69ba      	ldr	r2, [r7, #24]
 800e388:	8812      	ldrh	r2, [r2, #0]
 800e38a:	b292      	uxth	r2, r2
 800e38c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e392:	1c9a      	adds	r2, r3, #2
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	3b02      	subs	r3, #2
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3aa:	e03d      	b.n	800e428 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3b8:	7812      	ldrb	r2, [r2, #0]
 800e3ba:	b2d2      	uxtb	r2, r2
 800e3bc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3c2:	1c5a      	adds	r2, r3, #1
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	3b01      	subs	r3, #1
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3da:	e025      	b.n	800e428 <HAL_SPI_Receive+0x3a8>
 800e3dc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3e0:	f7f7 fc64 	bl	8005cac <HAL_GetTick>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	1ad3      	subs	r3, r2, r3
 800e3ea:	683a      	ldr	r2, [r7, #0]
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d803      	bhi.n	800e3f8 <HAL_SPI_Receive+0x378>
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3f6:	d102      	bne.n	800e3fe <HAL_SPI_Receive+0x37e>
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d114      	bne.n	800e428 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e3fe:	68f8      	ldr	r0, [r7, #12]
 800e400:	f000 fb1c 	bl	800ea3c <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2200      	movs	r2, #0
 800e408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2201      	movs	r2, #1
 800e420:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800e424:	2301      	movs	r3, #1
 800e426:	e019      	b.n	800e45c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e42e:	b29b      	uxth	r3, r3
 800e430:	2b00      	cmp	r3, #0
 800e432:	f47f af7b 	bne.w	800e32c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e436:	68f8      	ldr	r0, [r7, #12]
 800e438:	f000 fb00 	bl	800ea3c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2201      	movs	r2, #1
 800e448:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e000      	b.n	800e45c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800e45a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3720      	adds	r7, #32
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b08e      	sub	sp, #56	; 0x38
 800e468:	af02      	add	r7, sp, #8
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	607a      	str	r2, [r7, #4]
 800e470:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e472:	2300      	movs	r3, #0
 800e474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3320      	adds	r3, #32
 800e47e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3330      	adds	r3, #48	; 0x30
 800e486:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d101      	bne.n	800e496 <HAL_SPI_TransmitReceive+0x32>
 800e492:	2302      	movs	r3, #2
 800e494:	e2ce      	b.n	800ea34 <HAL_SPI_TransmitReceive+0x5d0>
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	2201      	movs	r2, #1
 800e49a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e49e:	f7f7 fc05 	bl	8005cac <HAL_GetTick>
 800e4a2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800e4a4:	887b      	ldrh	r3, [r7, #2]
 800e4a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800e4a8:	887b      	ldrh	r3, [r7, #2]
 800e4aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4b2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e4ba:	7efb      	ldrb	r3, [r7, #27]
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d014      	beq.n	800e4ea <HAL_SPI_TransmitReceive+0x86>
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4c6:	d106      	bne.n	800e4d6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d102      	bne.n	800e4d6 <HAL_SPI_TransmitReceive+0x72>
 800e4d0:	7efb      	ldrb	r3, [r7, #27]
 800e4d2:	2b04      	cmp	r3, #4
 800e4d4:	d009      	beq.n	800e4ea <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800e4d6:	2302      	movs	r3, #2
 800e4d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e4e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e4e8:	e2a4      	b.n	800ea34 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d005      	beq.n	800e4fc <HAL_SPI_TransmitReceive+0x98>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d002      	beq.n	800e4fc <HAL_SPI_TransmitReceive+0x98>
 800e4f6:	887b      	ldrh	r3, [r7, #2]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d109      	bne.n	800e510 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2200      	movs	r2, #0
 800e506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e50a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e50e:	e291      	b.n	800ea34 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b04      	cmp	r3, #4
 800e51a:	d003      	beq.n	800e524 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2205      	movs	r2, #5
 800e520:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2200      	movs	r2, #0
 800e528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	887a      	ldrh	r2, [r7, #2]
 800e536:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	887a      	ldrh	r2, [r7, #2]
 800e53e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	887a      	ldrh	r2, [r7, #2]
 800e54c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	887a      	ldrh	r2, [r7, #2]
 800e554:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2200      	movs	r2, #0
 800e55c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2200      	movs	r2, #0
 800e562:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	685a      	ldr	r2, [r3, #4]
 800e56a:	4b9f      	ldr	r3, [pc, #636]	; (800e7e8 <HAL_SPI_TransmitReceive+0x384>)
 800e56c:	4013      	ands	r3, r2
 800e56e:	8879      	ldrh	r1, [r7, #2]
 800e570:	68fa      	ldr	r2, [r7, #12]
 800e572:	6812      	ldr	r2, [r2, #0]
 800e574:	430b      	orrs	r3, r1
 800e576:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f042 0201 	orr.w	r2, r2, #1
 800e586:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	685b      	ldr	r3, [r3, #4]
 800e58c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e590:	d107      	bne.n	800e5a2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e5a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	2b0f      	cmp	r3, #15
 800e5a8:	d970      	bls.n	800e68c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e5aa:	e068      	b.n	800e67e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	f003 0302 	and.w	r3, r3, #2
 800e5b6:	2b02      	cmp	r3, #2
 800e5b8:	d11a      	bne.n	800e5f0 <HAL_SPI_TransmitReceive+0x18c>
 800e5ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d017      	beq.n	800e5f0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6812      	ldr	r2, [r2, #0]
 800e5ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5d0:	1d1a      	adds	r2, r3, #4
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	695a      	ldr	r2, [r3, #20]
 800e5f6:	f248 0308 	movw	r3, #32776	; 0x8008
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d01a      	beq.n	800e636 <HAL_SPI_TransmitReceive+0x1d2>
 800e600:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e602:	2b00      	cmp	r3, #0
 800e604:	d017      	beq.n	800e636 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e60e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e610:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e616:	1d1a      	adds	r2, r3, #4
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e622:	b29b      	uxth	r3, r3
 800e624:	3b01      	subs	r3, #1
 800e626:	b29a      	uxth	r2, r3
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e634:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e636:	f7f7 fb39 	bl	8005cac <HAL_GetTick>
 800e63a:	4602      	mov	r2, r0
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e642:	429a      	cmp	r2, r3
 800e644:	d803      	bhi.n	800e64e <HAL_SPI_TransmitReceive+0x1ea>
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64c:	d102      	bne.n	800e654 <HAL_SPI_TransmitReceive+0x1f0>
 800e64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e650:	2b00      	cmp	r3, #0
 800e652:	d114      	bne.n	800e67e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f000 f9f1 	bl	800ea3c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e668:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	2201      	movs	r2, #1
 800e676:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e1da      	b.n	800ea34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e67e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e680:	2b00      	cmp	r3, #0
 800e682:	d193      	bne.n	800e5ac <HAL_SPI_TransmitReceive+0x148>
 800e684:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e686:	2b00      	cmp	r3, #0
 800e688:	d190      	bne.n	800e5ac <HAL_SPI_TransmitReceive+0x148>
 800e68a:	e1ac      	b.n	800e9e6 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	68db      	ldr	r3, [r3, #12]
 800e690:	2b07      	cmp	r3, #7
 800e692:	f240 81a0 	bls.w	800e9d6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e696:	e0a9      	b.n	800e7ec <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	695b      	ldr	r3, [r3, #20]
 800e69e:	f003 0302 	and.w	r3, r3, #2
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	d139      	bne.n	800e71a <HAL_SPI_TransmitReceive+0x2b6>
 800e6a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d036      	beq.n	800e71a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e6ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d91c      	bls.n	800e6ec <HAL_SPI_TransmitReceive+0x288>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d018      	beq.n	800e6ec <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	6812      	ldr	r2, [r2, #0]
 800e6c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6ca:	1d1a      	adds	r2, r3, #4
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	3b02      	subs	r3, #2
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e6e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e6ea:	e016      	b.n	800e71a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6f0:	881a      	ldrh	r2, [r3, #0]
 800e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6fa:	1c9a      	adds	r2, r3, #2
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e706:	b29b      	uxth	r3, r3
 800e708:	3b01      	subs	r3, #1
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e718:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	695b      	ldr	r3, [r3, #20]
 800e720:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e724:	2b00      	cmp	r3, #0
 800e726:	d03a      	beq.n	800e79e <HAL_SPI_TransmitReceive+0x33a>
 800e728:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d037      	beq.n	800e79e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	695b      	ldr	r3, [r3, #20]
 800e734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d018      	beq.n	800e76e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e744:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e746:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e74c:	1d1a      	adds	r2, r3, #4
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e758:	b29b      	uxth	r3, r3
 800e75a:	3b02      	subs	r3, #2
 800e75c:	b29a      	uxth	r2, r3
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e76a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e76c:	e017      	b.n	800e79e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e772:	6a3a      	ldr	r2, [r7, #32]
 800e774:	8812      	ldrh	r2, [r2, #0]
 800e776:	b292      	uxth	r2, r2
 800e778:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e77e:	1c9a      	adds	r2, r3, #2
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	3b01      	subs	r3, #1
 800e78e:	b29a      	uxth	r2, r3
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e79c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e79e:	f7f7 fa85 	bl	8005cac <HAL_GetTick>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d803      	bhi.n	800e7b6 <HAL_SPI_TransmitReceive+0x352>
 800e7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b4:	d102      	bne.n	800e7bc <HAL_SPI_TransmitReceive+0x358>
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d117      	bne.n	800e7ec <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f000 f93d 	bl	800ea3c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2201      	movs	r2, #1
 800e7de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e126      	b.n	800ea34 <HAL_SPI_TransmitReceive+0x5d0>
 800e7e6:	bf00      	nop
 800e7e8:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e7ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	f47f af52 	bne.w	800e698 <HAL_SPI_TransmitReceive+0x234>
 800e7f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f47f af4e 	bne.w	800e698 <HAL_SPI_TransmitReceive+0x234>
 800e7fc:	e0f3      	b.n	800e9e6 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	695b      	ldr	r3, [r3, #20]
 800e804:	f003 0302 	and.w	r3, r3, #2
 800e808:	2b02      	cmp	r3, #2
 800e80a:	d15a      	bne.n	800e8c2 <HAL_SPI_TransmitReceive+0x45e>
 800e80c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d057      	beq.n	800e8c2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e812:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e814:	2b03      	cmp	r3, #3
 800e816:	d91c      	bls.n	800e852 <HAL_SPI_TransmitReceive+0x3ee>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e81c:	2b40      	cmp	r3, #64	; 0x40
 800e81e:	d918      	bls.n	800e852 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	6812      	ldr	r2, [r2, #0]
 800e82a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e830:	1d1a      	adds	r2, r3, #4
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	3b04      	subs	r3, #4
 800e840:	b29a      	uxth	r2, r3
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e84e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e850:	e037      	b.n	800e8c2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e854:	2b01      	cmp	r3, #1
 800e856:	d91b      	bls.n	800e890 <HAL_SPI_TransmitReceive+0x42c>
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d017      	beq.n	800e890 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e864:	881a      	ldrh	r2, [r3, #0]
 800e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e868:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e86e:	1c9a      	adds	r2, r3, #2
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	3b02      	subs	r3, #2
 800e87e:	b29a      	uxth	r2, r3
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e88c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e88e:	e018      	b.n	800e8c2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3320      	adds	r3, #32
 800e89a:	7812      	ldrb	r2, [r2, #0]
 800e89c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8a2:	1c5a      	adds	r2, r3, #1
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	3b01      	subs	r3, #1
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e8c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	695b      	ldr	r3, [r3, #20]
 800e8c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d05e      	beq.n	800e98e <HAL_SPI_TransmitReceive+0x52a>
 800e8d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d05b      	beq.n	800e98e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	695b      	ldr	r3, [r3, #20]
 800e8dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d018      	beq.n	800e916 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e8ee:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8f4:	1d1a      	adds	r2, r3, #4
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e900:	b29b      	uxth	r3, r3
 800e902:	3b04      	subs	r3, #4
 800e904:	b29a      	uxth	r2, r3
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e912:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e914:	e03b      	b.n	800e98e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	695b      	ldr	r3, [r3, #20]
 800e91c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e924:	d918      	bls.n	800e958 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e92a:	6a3a      	ldr	r2, [r7, #32]
 800e92c:	8812      	ldrh	r2, [r2, #0]
 800e92e:	b292      	uxth	r2, r2
 800e930:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e936:	1c9a      	adds	r2, r3, #2
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e942:	b29b      	uxth	r3, r3
 800e944:	3b02      	subs	r3, #2
 800e946:	b29a      	uxth	r2, r3
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e954:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e956:	e01a      	b.n	800e98e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e964:	7812      	ldrb	r2, [r2, #0]
 800e966:	b2d2      	uxtb	r2, r2
 800e968:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e96e:	1c5a      	adds	r2, r3, #1
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	3b01      	subs	r3, #1
 800e97e:	b29a      	uxth	r2, r3
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e98c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e98e:	f7f7 f98d 	bl	8005cac <HAL_GetTick>
 800e992:	4602      	mov	r2, r0
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d803      	bhi.n	800e9a6 <HAL_SPI_TransmitReceive+0x542>
 800e99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a4:	d102      	bne.n	800e9ac <HAL_SPI_TransmitReceive+0x548>
 800e9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d114      	bne.n	800e9d6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f000 f845 	bl	800ea3c <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	e02e      	b.n	800ea34 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e9d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f47f af10 	bne.w	800e7fe <HAL_SPI_TransmitReceive+0x39a>
 800e9de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f47f af0c 	bne.w	800e7fe <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800e9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e8:	9300      	str	r3, [sp, #0]
 800e9ea:	69fb      	ldr	r3, [r7, #28]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	2108      	movs	r1, #8
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	f000 f8c3 	bl	800eb7c <SPI_WaitOnFlagUntilTimeout>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d007      	beq.n	800ea0c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea02:	f043 0220 	orr.w	r2, r3, #32
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f000 f815 	bl	800ea3c <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e001      	b.n	800ea34 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800ea30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3730      	adds	r7, #48	; 0x30
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	695b      	ldr	r3, [r3, #20]
 800ea4a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	699a      	ldr	r2, [r3, #24]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f042 0208 	orr.w	r2, r2, #8
 800ea5a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	699a      	ldr	r2, [r3, #24]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f042 0210 	orr.w	r2, r2, #16
 800ea6a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f022 0201 	bic.w	r2, r2, #1
 800ea7a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6919      	ldr	r1, [r3, #16]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	4b3c      	ldr	r3, [pc, #240]	; (800eb78 <SPI_CloseTransfer+0x13c>)
 800ea88:	400b      	ands	r3, r1
 800ea8a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	689a      	ldr	r2, [r3, #8]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ea9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	2b04      	cmp	r3, #4
 800eaa6:	d014      	beq.n	800ead2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f003 0320 	and.w	r3, r3, #32
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00f      	beq.n	800ead2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eab8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	699a      	ldr	r2, [r3, #24]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f042 0220 	orr.w	r2, r2, #32
 800ead0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	2b03      	cmp	r3, #3
 800eadc:	d014      	beq.n	800eb08 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00f      	beq.n	800eb08 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaee:	f043 0204 	orr.w	r2, r3, #4
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	699a      	ldr	r2, [r3, #24]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d00f      	beq.n	800eb32 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb18:	f043 0201 	orr.w	r2, r3, #1
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	699a      	ldr	r2, [r3, #24]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00f      	beq.n	800eb5c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb42:	f043 0208 	orr.w	r2, r3, #8
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	699a      	ldr	r2, [r3, #24]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800eb5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800eb6c:	bf00      	nop
 800eb6e:	3714      	adds	r7, #20
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr
 800eb78:	fffffc90 	.word	0xfffffc90

0800eb7c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	60f8      	str	r0, [r7, #12]
 800eb84:	60b9      	str	r1, [r7, #8]
 800eb86:	603b      	str	r3, [r7, #0]
 800eb88:	4613      	mov	r3, r2
 800eb8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800eb8c:	e010      	b.n	800ebb0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb8e:	f7f7 f88d 	bl	8005cac <HAL_GetTick>
 800eb92:	4602      	mov	r2, r0
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	1ad3      	subs	r3, r2, r3
 800eb98:	69ba      	ldr	r2, [r7, #24]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d803      	bhi.n	800eba6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800eb9e:	69bb      	ldr	r3, [r7, #24]
 800eba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eba4:	d102      	bne.n	800ebac <SPI_WaitOnFlagUntilTimeout+0x30>
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d101      	bne.n	800ebb0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ebac:	2303      	movs	r3, #3
 800ebae:	e00f      	b.n	800ebd0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	695a      	ldr	r2, [r3, #20]
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	4013      	ands	r3, r2
 800ebba:	68ba      	ldr	r2, [r7, #8]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	bf0c      	ite	eq
 800ebc0:	2301      	moveq	r3, #1
 800ebc2:	2300      	movne	r3, #0
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	79fb      	ldrb	r3, [r7, #7]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d0df      	beq.n	800eb8e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b085      	sub	sp, #20
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebe4:	095b      	lsrs	r3, r3, #5
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	68db      	ldr	r3, [r3, #12]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	3307      	adds	r3, #7
 800ebf6:	08db      	lsrs	r3, r3, #3
 800ebf8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	fb02 f303 	mul.w	r3, r2, r3
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3714      	adds	r7, #20
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr

0800ec0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec0e:	b580      	push	{r7, lr}
 800ec10:	b082      	sub	sp, #8
 800ec12:	af00      	add	r7, sp, #0
 800ec14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d101      	bne.n	800ec20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e049      	b.n	800ecb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d106      	bne.n	800ec3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7f5 fd73 	bl	8004720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2202      	movs	r2, #2
 800ec3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	3304      	adds	r3, #4
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	4610      	mov	r0, r2
 800ec4e:	f000 fda1 	bl	800f794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2201      	movs	r2, #1
 800ec56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2201      	movs	r2, #1
 800ec86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	2201      	movs	r2, #1
 800ec96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2201      	movs	r2, #1
 800eca6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2201      	movs	r2, #1
 800ecae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b085      	sub	sp, #20
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d001      	beq.n	800ecd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e04f      	b.n	800ed74 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2202      	movs	r2, #2
 800ecd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68da      	ldr	r2, [r3, #12]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f042 0201 	orr.w	r2, r2, #1
 800ecea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a23      	ldr	r2, [pc, #140]	; (800ed80 <HAL_TIM_Base_Start_IT+0xc4>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d01d      	beq.n	800ed32 <HAL_TIM_Base_Start_IT+0x76>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecfe:	d018      	beq.n	800ed32 <HAL_TIM_Base_Start_IT+0x76>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a1f      	ldr	r2, [pc, #124]	; (800ed84 <HAL_TIM_Base_Start_IT+0xc8>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d013      	beq.n	800ed32 <HAL_TIM_Base_Start_IT+0x76>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4a1e      	ldr	r2, [pc, #120]	; (800ed88 <HAL_TIM_Base_Start_IT+0xcc>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d00e      	beq.n	800ed32 <HAL_TIM_Base_Start_IT+0x76>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	4a1c      	ldr	r2, [pc, #112]	; (800ed8c <HAL_TIM_Base_Start_IT+0xd0>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d009      	beq.n	800ed32 <HAL_TIM_Base_Start_IT+0x76>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	4a1b      	ldr	r2, [pc, #108]	; (800ed90 <HAL_TIM_Base_Start_IT+0xd4>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d004      	beq.n	800ed32 <HAL_TIM_Base_Start_IT+0x76>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a19      	ldr	r2, [pc, #100]	; (800ed94 <HAL_TIM_Base_Start_IT+0xd8>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d115      	bne.n	800ed5e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	689a      	ldr	r2, [r3, #8]
 800ed38:	4b17      	ldr	r3, [pc, #92]	; (800ed98 <HAL_TIM_Base_Start_IT+0xdc>)
 800ed3a:	4013      	ands	r3, r2
 800ed3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2b06      	cmp	r3, #6
 800ed42:	d015      	beq.n	800ed70 <HAL_TIM_Base_Start_IT+0xb4>
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed4a:	d011      	beq.n	800ed70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f042 0201 	orr.w	r2, r2, #1
 800ed5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed5c:	e008      	b.n	800ed70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f042 0201 	orr.w	r2, r2, #1
 800ed6c:	601a      	str	r2, [r3, #0]
 800ed6e:	e000      	b.n	800ed72 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3714      	adds	r7, #20
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	40010000 	.word	0x40010000
 800ed84:	40000400 	.word	0x40000400
 800ed88:	40000800 	.word	0x40000800
 800ed8c:	40000c00 	.word	0x40000c00
 800ed90:	40010400 	.word	0x40010400
 800ed94:	40001800 	.word	0x40001800
 800ed98:	00010007 	.word	0x00010007

0800ed9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d101      	bne.n	800edae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800edaa:	2301      	movs	r3, #1
 800edac:	e049      	b.n	800ee42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edb4:	b2db      	uxtb	r3, r3
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d106      	bne.n	800edc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2200      	movs	r2, #0
 800edbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 f841 	bl	800ee4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2202      	movs	r2, #2
 800edcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	3304      	adds	r3, #4
 800edd8:	4619      	mov	r1, r3
 800edda:	4610      	mov	r0, r2
 800eddc:	f000 fcda 	bl	800f794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2201      	movs	r2, #1
 800edf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2201      	movs	r2, #1
 800edfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2201      	movs	r2, #1
 800ee34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee40:	2300      	movs	r3, #0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ee4a:	b480      	push	{r7}
 800ee4c:	b083      	sub	sp, #12
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ee52:	bf00      	nop
 800ee54:	370c      	adds	r7, #12
 800ee56:	46bd      	mov	sp, r7
 800ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5c:	4770      	bx	lr
	...

0800ee60 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d109      	bne.n	800ee84 <HAL_TIM_PWM_Start_IT+0x24>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	bf14      	ite	ne
 800ee7c:	2301      	movne	r3, #1
 800ee7e:	2300      	moveq	r3, #0
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	e03c      	b.n	800eefe <HAL_TIM_PWM_Start_IT+0x9e>
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	2b04      	cmp	r3, #4
 800ee88:	d109      	bne.n	800ee9e <HAL_TIM_PWM_Start_IT+0x3e>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	bf14      	ite	ne
 800ee96:	2301      	movne	r3, #1
 800ee98:	2300      	moveq	r3, #0
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	e02f      	b.n	800eefe <HAL_TIM_PWM_Start_IT+0x9e>
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b08      	cmp	r3, #8
 800eea2:	d109      	bne.n	800eeb8 <HAL_TIM_PWM_Start_IT+0x58>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eeaa:	b2db      	uxtb	r3, r3
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	bf14      	ite	ne
 800eeb0:	2301      	movne	r3, #1
 800eeb2:	2300      	moveq	r3, #0
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	e022      	b.n	800eefe <HAL_TIM_PWM_Start_IT+0x9e>
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	2b0c      	cmp	r3, #12
 800eebc:	d109      	bne.n	800eed2 <HAL_TIM_PWM_Start_IT+0x72>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eec4:	b2db      	uxtb	r3, r3
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	bf14      	ite	ne
 800eeca:	2301      	movne	r3, #1
 800eecc:	2300      	moveq	r3, #0
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	e015      	b.n	800eefe <HAL_TIM_PWM_Start_IT+0x9e>
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2b10      	cmp	r3, #16
 800eed6:	d109      	bne.n	800eeec <HAL_TIM_PWM_Start_IT+0x8c>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	bf14      	ite	ne
 800eee4:	2301      	movne	r3, #1
 800eee6:	2300      	moveq	r3, #0
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	e008      	b.n	800eefe <HAL_TIM_PWM_Start_IT+0x9e>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eef2:	b2db      	uxtb	r3, r3
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	bf14      	ite	ne
 800eef8:	2301      	movne	r3, #1
 800eefa:	2300      	moveq	r3, #0
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d001      	beq.n	800ef06 <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800ef02:	2301      	movs	r3, #1
 800ef04:	e0e2      	b.n	800f0cc <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d104      	bne.n	800ef16 <HAL_TIM_PWM_Start_IT+0xb6>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2202      	movs	r2, #2
 800ef10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef14:	e023      	b.n	800ef5e <HAL_TIM_PWM_Start_IT+0xfe>
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	2b04      	cmp	r3, #4
 800ef1a:	d104      	bne.n	800ef26 <HAL_TIM_PWM_Start_IT+0xc6>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2202      	movs	r2, #2
 800ef20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef24:	e01b      	b.n	800ef5e <HAL_TIM_PWM_Start_IT+0xfe>
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	2b08      	cmp	r3, #8
 800ef2a:	d104      	bne.n	800ef36 <HAL_TIM_PWM_Start_IT+0xd6>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2202      	movs	r2, #2
 800ef30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef34:	e013      	b.n	800ef5e <HAL_TIM_PWM_Start_IT+0xfe>
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	2b0c      	cmp	r3, #12
 800ef3a:	d104      	bne.n	800ef46 <HAL_TIM_PWM_Start_IT+0xe6>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2202      	movs	r2, #2
 800ef40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef44:	e00b      	b.n	800ef5e <HAL_TIM_PWM_Start_IT+0xfe>
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	2b10      	cmp	r3, #16
 800ef4a:	d104      	bne.n	800ef56 <HAL_TIM_PWM_Start_IT+0xf6>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2202      	movs	r2, #2
 800ef50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef54:	e003      	b.n	800ef5e <HAL_TIM_PWM_Start_IT+0xfe>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2202      	movs	r2, #2
 800ef5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	2b0c      	cmp	r3, #12
 800ef62:	d841      	bhi.n	800efe8 <HAL_TIM_PWM_Start_IT+0x188>
 800ef64:	a201      	add	r2, pc, #4	; (adr r2, 800ef6c <HAL_TIM_PWM_Start_IT+0x10c>)
 800ef66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef6a:	bf00      	nop
 800ef6c:	0800efa1 	.word	0x0800efa1
 800ef70:	0800efe9 	.word	0x0800efe9
 800ef74:	0800efe9 	.word	0x0800efe9
 800ef78:	0800efe9 	.word	0x0800efe9
 800ef7c:	0800efb3 	.word	0x0800efb3
 800ef80:	0800efe9 	.word	0x0800efe9
 800ef84:	0800efe9 	.word	0x0800efe9
 800ef88:	0800efe9 	.word	0x0800efe9
 800ef8c:	0800efc5 	.word	0x0800efc5
 800ef90:	0800efe9 	.word	0x0800efe9
 800ef94:	0800efe9 	.word	0x0800efe9
 800ef98:	0800efe9 	.word	0x0800efe9
 800ef9c:	0800efd7 	.word	0x0800efd7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	68da      	ldr	r2, [r3, #12]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f042 0202 	orr.w	r2, r2, #2
 800efae:	60da      	str	r2, [r3, #12]
      break;
 800efb0:	e01b      	b.n	800efea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	68da      	ldr	r2, [r3, #12]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f042 0204 	orr.w	r2, r2, #4
 800efc0:	60da      	str	r2, [r3, #12]
      break;
 800efc2:	e012      	b.n	800efea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	68da      	ldr	r2, [r3, #12]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f042 0208 	orr.w	r2, r2, #8
 800efd2:	60da      	str	r2, [r3, #12]
      break;
 800efd4:	e009      	b.n	800efea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	68da      	ldr	r2, [r3, #12]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f042 0210 	orr.w	r2, r2, #16
 800efe4:	60da      	str	r2, [r3, #12]
      break;
 800efe6:	e000      	b.n	800efea <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 800efe8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2201      	movs	r2, #1
 800eff0:	6839      	ldr	r1, [r7, #0]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f000 ffd4 	bl	800ffa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a35      	ldr	r2, [pc, #212]	; (800f0d4 <HAL_TIM_PWM_Start_IT+0x274>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d013      	beq.n	800f02a <HAL_TIM_PWM_Start_IT+0x1ca>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a34      	ldr	r2, [pc, #208]	; (800f0d8 <HAL_TIM_PWM_Start_IT+0x278>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d00e      	beq.n	800f02a <HAL_TIM_PWM_Start_IT+0x1ca>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a32      	ldr	r2, [pc, #200]	; (800f0dc <HAL_TIM_PWM_Start_IT+0x27c>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d009      	beq.n	800f02a <HAL_TIM_PWM_Start_IT+0x1ca>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4a31      	ldr	r2, [pc, #196]	; (800f0e0 <HAL_TIM_PWM_Start_IT+0x280>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d004      	beq.n	800f02a <HAL_TIM_PWM_Start_IT+0x1ca>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a2f      	ldr	r2, [pc, #188]	; (800f0e4 <HAL_TIM_PWM_Start_IT+0x284>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d101      	bne.n	800f02e <HAL_TIM_PWM_Start_IT+0x1ce>
 800f02a:	2301      	movs	r3, #1
 800f02c:	e000      	b.n	800f030 <HAL_TIM_PWM_Start_IT+0x1d0>
 800f02e:	2300      	movs	r3, #0
 800f030:	2b00      	cmp	r3, #0
 800f032:	d007      	beq.n	800f044 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f042:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a22      	ldr	r2, [pc, #136]	; (800f0d4 <HAL_TIM_PWM_Start_IT+0x274>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d01d      	beq.n	800f08a <HAL_TIM_PWM_Start_IT+0x22a>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f056:	d018      	beq.n	800f08a <HAL_TIM_PWM_Start_IT+0x22a>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4a22      	ldr	r2, [pc, #136]	; (800f0e8 <HAL_TIM_PWM_Start_IT+0x288>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d013      	beq.n	800f08a <HAL_TIM_PWM_Start_IT+0x22a>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4a21      	ldr	r2, [pc, #132]	; (800f0ec <HAL_TIM_PWM_Start_IT+0x28c>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d00e      	beq.n	800f08a <HAL_TIM_PWM_Start_IT+0x22a>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4a1f      	ldr	r2, [pc, #124]	; (800f0f0 <HAL_TIM_PWM_Start_IT+0x290>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d009      	beq.n	800f08a <HAL_TIM_PWM_Start_IT+0x22a>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a17      	ldr	r2, [pc, #92]	; (800f0d8 <HAL_TIM_PWM_Start_IT+0x278>)
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d004      	beq.n	800f08a <HAL_TIM_PWM_Start_IT+0x22a>
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a1b      	ldr	r2, [pc, #108]	; (800f0f4 <HAL_TIM_PWM_Start_IT+0x294>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d115      	bne.n	800f0b6 <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	689a      	ldr	r2, [r3, #8]
 800f090:	4b19      	ldr	r3, [pc, #100]	; (800f0f8 <HAL_TIM_PWM_Start_IT+0x298>)
 800f092:	4013      	ands	r3, r2
 800f094:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2b06      	cmp	r3, #6
 800f09a:	d015      	beq.n	800f0c8 <HAL_TIM_PWM_Start_IT+0x268>
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0a2:	d011      	beq.n	800f0c8 <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	681a      	ldr	r2, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f042 0201 	orr.w	r2, r2, #1
 800f0b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0b4:	e008      	b.n	800f0c8 <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f042 0201 	orr.w	r2, r2, #1
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	e000      	b.n	800f0ca <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f0ca:	2300      	movs	r3, #0
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	40010000 	.word	0x40010000
 800f0d8:	40010400 	.word	0x40010400
 800f0dc:	40014000 	.word	0x40014000
 800f0e0:	40014400 	.word	0x40014400
 800f0e4:	40014800 	.word	0x40014800
 800f0e8:	40000400 	.word	0x40000400
 800f0ec:	40000800 	.word	0x40000800
 800f0f0:	40000c00 	.word	0x40000c00
 800f0f4:	40001800 	.word	0x40001800
 800f0f8:	00010007 	.word	0x00010007

0800f0fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	691b      	ldr	r3, [r3, #16]
 800f10a:	f003 0302 	and.w	r3, r3, #2
 800f10e:	2b02      	cmp	r3, #2
 800f110:	d122      	bne.n	800f158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	f003 0302 	and.w	r3, r3, #2
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d11b      	bne.n	800f158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f06f 0202 	mvn.w	r2, #2
 800f128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2201      	movs	r2, #1
 800f12e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	699b      	ldr	r3, [r3, #24]
 800f136:	f003 0303 	and.w	r3, r3, #3
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d003      	beq.n	800f146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 fb0a 	bl	800f758 <HAL_TIM_IC_CaptureCallback>
 800f144:	e005      	b.n	800f152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 fafc 	bl	800f744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f000 fb0d 	bl	800f76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2200      	movs	r2, #0
 800f156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	691b      	ldr	r3, [r3, #16]
 800f15e:	f003 0304 	and.w	r3, r3, #4
 800f162:	2b04      	cmp	r3, #4
 800f164:	d122      	bne.n	800f1ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	f003 0304 	and.w	r3, r3, #4
 800f170:	2b04      	cmp	r3, #4
 800f172:	d11b      	bne.n	800f1ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f06f 0204 	mvn.w	r2, #4
 800f17c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2202      	movs	r2, #2
 800f182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	699b      	ldr	r3, [r3, #24]
 800f18a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d003      	beq.n	800f19a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 fae0 	bl	800f758 <HAL_TIM_IC_CaptureCallback>
 800f198:	e005      	b.n	800f1a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fad2 	bl	800f744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f000 fae3 	bl	800f76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	f003 0308 	and.w	r3, r3, #8
 800f1b6:	2b08      	cmp	r3, #8
 800f1b8:	d122      	bne.n	800f200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	f003 0308 	and.w	r3, r3, #8
 800f1c4:	2b08      	cmp	r3, #8
 800f1c6:	d11b      	bne.n	800f200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f06f 0208 	mvn.w	r2, #8
 800f1d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2204      	movs	r2, #4
 800f1d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	69db      	ldr	r3, [r3, #28]
 800f1de:	f003 0303 	and.w	r3, r3, #3
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d003      	beq.n	800f1ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 fab6 	bl	800f758 <HAL_TIM_IC_CaptureCallback>
 800f1ec:	e005      	b.n	800f1fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 faa8 	bl	800f744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fab9 	bl	800f76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	f003 0310 	and.w	r3, r3, #16
 800f20a:	2b10      	cmp	r3, #16
 800f20c:	d122      	bne.n	800f254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	f003 0310 	and.w	r3, r3, #16
 800f218:	2b10      	cmp	r3, #16
 800f21a:	d11b      	bne.n	800f254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f06f 0210 	mvn.w	r2, #16
 800f224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2208      	movs	r2, #8
 800f22a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	69db      	ldr	r3, [r3, #28]
 800f232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f236:	2b00      	cmp	r3, #0
 800f238:	d003      	beq.n	800f242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fa8c 	bl	800f758 <HAL_TIM_IC_CaptureCallback>
 800f240:	e005      	b.n	800f24e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 fa7e 	bl	800f744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fa8f 	bl	800f76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	f003 0301 	and.w	r3, r3, #1
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d10e      	bne.n	800f280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	f003 0301 	and.w	r3, r3, #1
 800f26c:	2b01      	cmp	r3, #1
 800f26e:	d107      	bne.n	800f280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f06f 0201 	mvn.w	r2, #1
 800f278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f7f5 fd6e 	bl	8004d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	691b      	ldr	r3, [r3, #16]
 800f286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f28a:	2b80      	cmp	r3, #128	; 0x80
 800f28c:	d10e      	bne.n	800f2ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f298:	2b80      	cmp	r3, #128	; 0x80
 800f29a:	d107      	bne.n	800f2ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 ff32 	bl	8010110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	691b      	ldr	r3, [r3, #16]
 800f2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2ba:	d10e      	bne.n	800f2da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2c6:	2b80      	cmp	r3, #128	; 0x80
 800f2c8:	d107      	bne.n	800f2da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f000 ff25 	bl	8010124 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	691b      	ldr	r3, [r3, #16]
 800f2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2e4:	2b40      	cmp	r3, #64	; 0x40
 800f2e6:	d10e      	bne.n	800f306 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2f2:	2b40      	cmp	r3, #64	; 0x40
 800f2f4:	d107      	bne.n	800f306 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 fa3d 	bl	800f780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	691b      	ldr	r3, [r3, #16]
 800f30c:	f003 0320 	and.w	r3, r3, #32
 800f310:	2b20      	cmp	r3, #32
 800f312:	d10e      	bne.n	800f332 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	f003 0320 	and.w	r3, r3, #32
 800f31e:	2b20      	cmp	r3, #32
 800f320:	d107      	bne.n	800f332 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	f06f 0220 	mvn.w	r2, #32
 800f32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 fee5 	bl	80100fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f332:	bf00      	nop
 800f334:	3708      	adds	r7, #8
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
	...

0800f33c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d101      	bne.n	800f356 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f352:	2302      	movs	r3, #2
 800f354:	e0fd      	b.n	800f552 <HAL_TIM_PWM_ConfigChannel+0x216>
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2201      	movs	r2, #1
 800f35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2b14      	cmp	r3, #20
 800f362:	f200 80f0 	bhi.w	800f546 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f366:	a201      	add	r2, pc, #4	; (adr r2, 800f36c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f36c:	0800f3c1 	.word	0x0800f3c1
 800f370:	0800f547 	.word	0x0800f547
 800f374:	0800f547 	.word	0x0800f547
 800f378:	0800f547 	.word	0x0800f547
 800f37c:	0800f401 	.word	0x0800f401
 800f380:	0800f547 	.word	0x0800f547
 800f384:	0800f547 	.word	0x0800f547
 800f388:	0800f547 	.word	0x0800f547
 800f38c:	0800f443 	.word	0x0800f443
 800f390:	0800f547 	.word	0x0800f547
 800f394:	0800f547 	.word	0x0800f547
 800f398:	0800f547 	.word	0x0800f547
 800f39c:	0800f483 	.word	0x0800f483
 800f3a0:	0800f547 	.word	0x0800f547
 800f3a4:	0800f547 	.word	0x0800f547
 800f3a8:	0800f547 	.word	0x0800f547
 800f3ac:	0800f4c5 	.word	0x0800f4c5
 800f3b0:	0800f547 	.word	0x0800f547
 800f3b4:	0800f547 	.word	0x0800f547
 800f3b8:	0800f547 	.word	0x0800f547
 800f3bc:	0800f505 	.word	0x0800f505
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68b9      	ldr	r1, [r7, #8]
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 fa7e 	bl	800f8c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	699a      	ldr	r2, [r3, #24]
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f042 0208 	orr.w	r2, r2, #8
 800f3da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	699a      	ldr	r2, [r3, #24]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f022 0204 	bic.w	r2, r2, #4
 800f3ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	6999      	ldr	r1, [r3, #24]
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	691a      	ldr	r2, [r3, #16]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	430a      	orrs	r2, r1
 800f3fc:	619a      	str	r2, [r3, #24]
      break;
 800f3fe:	e0a3      	b.n	800f548 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	68b9      	ldr	r1, [r7, #8]
 800f406:	4618      	mov	r0, r3
 800f408:	f000 faee 	bl	800f9e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	699a      	ldr	r2, [r3, #24]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f41a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	699a      	ldr	r2, [r3, #24]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f42a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6999      	ldr	r1, [r3, #24]
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	021a      	lsls	r2, r3, #8
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	430a      	orrs	r2, r1
 800f43e:	619a      	str	r2, [r3, #24]
      break;
 800f440:	e082      	b.n	800f548 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	68b9      	ldr	r1, [r7, #8]
 800f448:	4618      	mov	r0, r3
 800f44a:	f000 fb57 	bl	800fafc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	69da      	ldr	r2, [r3, #28]
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f042 0208 	orr.w	r2, r2, #8
 800f45c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	69da      	ldr	r2, [r3, #28]
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f022 0204 	bic.w	r2, r2, #4
 800f46c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	69d9      	ldr	r1, [r3, #28]
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	691a      	ldr	r2, [r3, #16]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	430a      	orrs	r2, r1
 800f47e:	61da      	str	r2, [r3, #28]
      break;
 800f480:	e062      	b.n	800f548 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	68b9      	ldr	r1, [r7, #8]
 800f488:	4618      	mov	r0, r3
 800f48a:	f000 fbbd 	bl	800fc08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	69da      	ldr	r2, [r3, #28]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f49c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	69da      	ldr	r2, [r3, #28]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f4ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	69d9      	ldr	r1, [r3, #28]
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	691b      	ldr	r3, [r3, #16]
 800f4b8:	021a      	lsls	r2, r3, #8
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	430a      	orrs	r2, r1
 800f4c0:	61da      	str	r2, [r3, #28]
      break;
 800f4c2:	e041      	b.n	800f548 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	68b9      	ldr	r1, [r7, #8]
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f000 fc04 	bl	800fcd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f042 0208 	orr.w	r2, r2, #8
 800f4de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f022 0204 	bic.w	r2, r2, #4
 800f4ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	691a      	ldr	r2, [r3, #16]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	430a      	orrs	r2, r1
 800f500:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f502:	e021      	b.n	800f548 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	68b9      	ldr	r1, [r7, #8]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f000 fc46 	bl	800fd9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f51e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f52e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	021a      	lsls	r2, r3, #8
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	430a      	orrs	r2, r1
 800f542:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f544:	e000      	b.n	800f548 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800f546:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2200      	movs	r2, #0
 800f54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f550:	2300      	movs	r3, #0
}
 800f552:	4618      	mov	r0, r3
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop

0800f55c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d101      	bne.n	800f574 <HAL_TIM_ConfigClockSource+0x18>
 800f570:	2302      	movs	r3, #2
 800f572:	e0db      	b.n	800f72c <HAL_TIM_ConfigClockSource+0x1d0>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2201      	movs	r2, #1
 800f578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2202      	movs	r2, #2
 800f580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	689b      	ldr	r3, [r3, #8]
 800f58a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f58c:	68fa      	ldr	r2, [r7, #12]
 800f58e:	4b69      	ldr	r3, [pc, #420]	; (800f734 <HAL_TIM_ConfigClockSource+0x1d8>)
 800f590:	4013      	ands	r3, r2
 800f592:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f59a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	4a63      	ldr	r2, [pc, #396]	; (800f738 <HAL_TIM_ConfigClockSource+0x1dc>)
 800f5aa:	4293      	cmp	r3, r2
 800f5ac:	f000 80a9 	beq.w	800f702 <HAL_TIM_ConfigClockSource+0x1a6>
 800f5b0:	4a61      	ldr	r2, [pc, #388]	; (800f738 <HAL_TIM_ConfigClockSource+0x1dc>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	f200 80ae 	bhi.w	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f5b8:	4a60      	ldr	r2, [pc, #384]	; (800f73c <HAL_TIM_ConfigClockSource+0x1e0>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	f000 80a1 	beq.w	800f702 <HAL_TIM_ConfigClockSource+0x1a6>
 800f5c0:	4a5e      	ldr	r2, [pc, #376]	; (800f73c <HAL_TIM_ConfigClockSource+0x1e0>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	f200 80a6 	bhi.w	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f5c8:	4a5d      	ldr	r2, [pc, #372]	; (800f740 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	f000 8099 	beq.w	800f702 <HAL_TIM_ConfigClockSource+0x1a6>
 800f5d0:	4a5b      	ldr	r2, [pc, #364]	; (800f740 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	f200 809e 	bhi.w	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f5d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f5dc:	f000 8091 	beq.w	800f702 <HAL_TIM_ConfigClockSource+0x1a6>
 800f5e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f5e4:	f200 8096 	bhi.w	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f5e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5ec:	f000 8089 	beq.w	800f702 <HAL_TIM_ConfigClockSource+0x1a6>
 800f5f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f5f4:	f200 808e 	bhi.w	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f5f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f5fc:	d03e      	beq.n	800f67c <HAL_TIM_ConfigClockSource+0x120>
 800f5fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f602:	f200 8087 	bhi.w	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f60a:	f000 8085 	beq.w	800f718 <HAL_TIM_ConfigClockSource+0x1bc>
 800f60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f612:	d87f      	bhi.n	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f614:	2b70      	cmp	r3, #112	; 0x70
 800f616:	d01a      	beq.n	800f64e <HAL_TIM_ConfigClockSource+0xf2>
 800f618:	2b70      	cmp	r3, #112	; 0x70
 800f61a:	d87b      	bhi.n	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f61c:	2b60      	cmp	r3, #96	; 0x60
 800f61e:	d050      	beq.n	800f6c2 <HAL_TIM_ConfigClockSource+0x166>
 800f620:	2b60      	cmp	r3, #96	; 0x60
 800f622:	d877      	bhi.n	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f624:	2b50      	cmp	r3, #80	; 0x50
 800f626:	d03c      	beq.n	800f6a2 <HAL_TIM_ConfigClockSource+0x146>
 800f628:	2b50      	cmp	r3, #80	; 0x50
 800f62a:	d873      	bhi.n	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f62c:	2b40      	cmp	r3, #64	; 0x40
 800f62e:	d058      	beq.n	800f6e2 <HAL_TIM_ConfigClockSource+0x186>
 800f630:	2b40      	cmp	r3, #64	; 0x40
 800f632:	d86f      	bhi.n	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f634:	2b30      	cmp	r3, #48	; 0x30
 800f636:	d064      	beq.n	800f702 <HAL_TIM_ConfigClockSource+0x1a6>
 800f638:	2b30      	cmp	r3, #48	; 0x30
 800f63a:	d86b      	bhi.n	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f63c:	2b20      	cmp	r3, #32
 800f63e:	d060      	beq.n	800f702 <HAL_TIM_ConfigClockSource+0x1a6>
 800f640:	2b20      	cmp	r3, #32
 800f642:	d867      	bhi.n	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
 800f644:	2b00      	cmp	r3, #0
 800f646:	d05c      	beq.n	800f702 <HAL_TIM_ConfigClockSource+0x1a6>
 800f648:	2b10      	cmp	r3, #16
 800f64a:	d05a      	beq.n	800f702 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800f64c:	e062      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6818      	ldr	r0, [r3, #0]
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	6899      	ldr	r1, [r3, #8]
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	685a      	ldr	r2, [r3, #4]
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	f000 fc7f 	bl	800ff60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	689b      	ldr	r3, [r3, #8]
 800f668:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f670:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	68fa      	ldr	r2, [r7, #12]
 800f678:	609a      	str	r2, [r3, #8]
      break;
 800f67a:	e04e      	b.n	800f71a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6818      	ldr	r0, [r3, #0]
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	6899      	ldr	r1, [r3, #8]
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	685a      	ldr	r2, [r3, #4]
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	f000 fc68 	bl	800ff60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	689a      	ldr	r2, [r3, #8]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f69e:	609a      	str	r2, [r3, #8]
      break;
 800f6a0:	e03b      	b.n	800f71a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6818      	ldr	r0, [r3, #0]
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	6859      	ldr	r1, [r3, #4]
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	68db      	ldr	r3, [r3, #12]
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	f000 fbd8 	bl	800fe64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	2150      	movs	r1, #80	; 0x50
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f000 fc32 	bl	800ff24 <TIM_ITRx_SetConfig>
      break;
 800f6c0:	e02b      	b.n	800f71a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6818      	ldr	r0, [r3, #0]
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	6859      	ldr	r1, [r3, #4]
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	68db      	ldr	r3, [r3, #12]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	f000 fbf7 	bl	800fec2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2160      	movs	r1, #96	; 0x60
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f000 fc22 	bl	800ff24 <TIM_ITRx_SetConfig>
      break;
 800f6e0:	e01b      	b.n	800f71a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6818      	ldr	r0, [r3, #0]
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	6859      	ldr	r1, [r3, #4]
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	f000 fbb8 	bl	800fe64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2140      	movs	r1, #64	; 0x40
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f000 fc12 	bl	800ff24 <TIM_ITRx_SetConfig>
      break;
 800f700:	e00b      	b.n	800f71a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4619      	mov	r1, r3
 800f70c:	4610      	mov	r0, r2
 800f70e:	f000 fc09 	bl	800ff24 <TIM_ITRx_SetConfig>
        break;
 800f712:	e002      	b.n	800f71a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800f714:	bf00      	nop
 800f716:	e000      	b.n	800f71a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800f718:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2201      	movs	r2, #1
 800f71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f72a:	2300      	movs	r3, #0
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3710      	adds	r7, #16
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}
 800f734:	ffceff88 	.word	0xffceff88
 800f738:	00100040 	.word	0x00100040
 800f73c:	00100030 	.word	0x00100030
 800f740:	00100020 	.word	0x00100020

0800f744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f774:	bf00      	nop
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f788:	bf00      	nop
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a40      	ldr	r2, [pc, #256]	; (800f8a8 <TIM_Base_SetConfig+0x114>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d013      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7b2:	d00f      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a3d      	ldr	r2, [pc, #244]	; (800f8ac <TIM_Base_SetConfig+0x118>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d00b      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a3c      	ldr	r2, [pc, #240]	; (800f8b0 <TIM_Base_SetConfig+0x11c>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d007      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a3b      	ldr	r2, [pc, #236]	; (800f8b4 <TIM_Base_SetConfig+0x120>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d003      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a3a      	ldr	r2, [pc, #232]	; (800f8b8 <TIM_Base_SetConfig+0x124>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d108      	bne.n	800f7e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4a2f      	ldr	r2, [pc, #188]	; (800f8a8 <TIM_Base_SetConfig+0x114>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d01f      	beq.n	800f82e <TIM_Base_SetConfig+0x9a>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7f4:	d01b      	beq.n	800f82e <TIM_Base_SetConfig+0x9a>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4a2c      	ldr	r2, [pc, #176]	; (800f8ac <TIM_Base_SetConfig+0x118>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d017      	beq.n	800f82e <TIM_Base_SetConfig+0x9a>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a2b      	ldr	r2, [pc, #172]	; (800f8b0 <TIM_Base_SetConfig+0x11c>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d013      	beq.n	800f82e <TIM_Base_SetConfig+0x9a>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a2a      	ldr	r2, [pc, #168]	; (800f8b4 <TIM_Base_SetConfig+0x120>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d00f      	beq.n	800f82e <TIM_Base_SetConfig+0x9a>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a29      	ldr	r2, [pc, #164]	; (800f8b8 <TIM_Base_SetConfig+0x124>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d00b      	beq.n	800f82e <TIM_Base_SetConfig+0x9a>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a28      	ldr	r2, [pc, #160]	; (800f8bc <TIM_Base_SetConfig+0x128>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d007      	beq.n	800f82e <TIM_Base_SetConfig+0x9a>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a27      	ldr	r2, [pc, #156]	; (800f8c0 <TIM_Base_SetConfig+0x12c>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d003      	beq.n	800f82e <TIM_Base_SetConfig+0x9a>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4a26      	ldr	r2, [pc, #152]	; (800f8c4 <TIM_Base_SetConfig+0x130>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d108      	bne.n	800f840 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	695b      	ldr	r3, [r3, #20]
 800f84a:	4313      	orrs	r3, r2
 800f84c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	68fa      	ldr	r2, [r7, #12]
 800f852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	689a      	ldr	r2, [r3, #8]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4a10      	ldr	r2, [pc, #64]	; (800f8a8 <TIM_Base_SetConfig+0x114>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d00f      	beq.n	800f88c <TIM_Base_SetConfig+0xf8>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a12      	ldr	r2, [pc, #72]	; (800f8b8 <TIM_Base_SetConfig+0x124>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d00b      	beq.n	800f88c <TIM_Base_SetConfig+0xf8>
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a11      	ldr	r2, [pc, #68]	; (800f8bc <TIM_Base_SetConfig+0x128>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d007      	beq.n	800f88c <TIM_Base_SetConfig+0xf8>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a10      	ldr	r2, [pc, #64]	; (800f8c0 <TIM_Base_SetConfig+0x12c>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d003      	beq.n	800f88c <TIM_Base_SetConfig+0xf8>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a0f      	ldr	r2, [pc, #60]	; (800f8c4 <TIM_Base_SetConfig+0x130>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d103      	bne.n	800f894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	691a      	ldr	r2, [r3, #16]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	615a      	str	r2, [r3, #20]
}
 800f89a:	bf00      	nop
 800f89c:	3714      	adds	r7, #20
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr
 800f8a6:	bf00      	nop
 800f8a8:	40010000 	.word	0x40010000
 800f8ac:	40000400 	.word	0x40000400
 800f8b0:	40000800 	.word	0x40000800
 800f8b4:	40000c00 	.word	0x40000c00
 800f8b8:	40010400 	.word	0x40010400
 800f8bc:	40014000 	.word	0x40014000
 800f8c0:	40014400 	.word	0x40014400
 800f8c4:	40014800 	.word	0x40014800

0800f8c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b087      	sub	sp, #28
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a1b      	ldr	r3, [r3, #32]
 800f8d6:	f023 0201 	bic.w	r2, r3, #1
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6a1b      	ldr	r3, [r3, #32]
 800f8e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	699b      	ldr	r3, [r3, #24]
 800f8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	4b37      	ldr	r3, [pc, #220]	; (800f9d0 <TIM_OC1_SetConfig+0x108>)
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	f023 0303 	bic.w	r3, r3, #3
 800f8fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	4313      	orrs	r3, r2
 800f908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	f023 0302 	bic.w	r3, r3, #2
 800f910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	697a      	ldr	r2, [r7, #20]
 800f918:	4313      	orrs	r3, r2
 800f91a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a2d      	ldr	r2, [pc, #180]	; (800f9d4 <TIM_OC1_SetConfig+0x10c>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d00f      	beq.n	800f944 <TIM_OC1_SetConfig+0x7c>
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a2c      	ldr	r2, [pc, #176]	; (800f9d8 <TIM_OC1_SetConfig+0x110>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d00b      	beq.n	800f944 <TIM_OC1_SetConfig+0x7c>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a2b      	ldr	r2, [pc, #172]	; (800f9dc <TIM_OC1_SetConfig+0x114>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d007      	beq.n	800f944 <TIM_OC1_SetConfig+0x7c>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	4a2a      	ldr	r2, [pc, #168]	; (800f9e0 <TIM_OC1_SetConfig+0x118>)
 800f938:	4293      	cmp	r3, r2
 800f93a:	d003      	beq.n	800f944 <TIM_OC1_SetConfig+0x7c>
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4a29      	ldr	r2, [pc, #164]	; (800f9e4 <TIM_OC1_SetConfig+0x11c>)
 800f940:	4293      	cmp	r3, r2
 800f942:	d10c      	bne.n	800f95e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	f023 0308 	bic.w	r3, r3, #8
 800f94a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	697a      	ldr	r2, [r7, #20]
 800f952:	4313      	orrs	r3, r2
 800f954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	f023 0304 	bic.w	r3, r3, #4
 800f95c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4a1c      	ldr	r2, [pc, #112]	; (800f9d4 <TIM_OC1_SetConfig+0x10c>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d00f      	beq.n	800f986 <TIM_OC1_SetConfig+0xbe>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4a1b      	ldr	r2, [pc, #108]	; (800f9d8 <TIM_OC1_SetConfig+0x110>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d00b      	beq.n	800f986 <TIM_OC1_SetConfig+0xbe>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	4a1a      	ldr	r2, [pc, #104]	; (800f9dc <TIM_OC1_SetConfig+0x114>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d007      	beq.n	800f986 <TIM_OC1_SetConfig+0xbe>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	4a19      	ldr	r2, [pc, #100]	; (800f9e0 <TIM_OC1_SetConfig+0x118>)
 800f97a:	4293      	cmp	r3, r2
 800f97c:	d003      	beq.n	800f986 <TIM_OC1_SetConfig+0xbe>
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4a18      	ldr	r2, [pc, #96]	; (800f9e4 <TIM_OC1_SetConfig+0x11c>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d111      	bne.n	800f9aa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f98c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	695b      	ldr	r3, [r3, #20]
 800f99a:	693a      	ldr	r2, [r7, #16]
 800f99c:	4313      	orrs	r3, r2
 800f99e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	699b      	ldr	r3, [r3, #24]
 800f9a4:	693a      	ldr	r2, [r7, #16]
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	68fa      	ldr	r2, [r7, #12]
 800f9b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	685a      	ldr	r2, [r3, #4]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	697a      	ldr	r2, [r7, #20]
 800f9c2:	621a      	str	r2, [r3, #32]
}
 800f9c4:	bf00      	nop
 800f9c6:	371c      	adds	r7, #28
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr
 800f9d0:	fffeff8f 	.word	0xfffeff8f
 800f9d4:	40010000 	.word	0x40010000
 800f9d8:	40010400 	.word	0x40010400
 800f9dc:	40014000 	.word	0x40014000
 800f9e0:	40014400 	.word	0x40014400
 800f9e4:	40014800 	.word	0x40014800

0800f9e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	f023 0210 	bic.w	r2, r3, #16
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6a1b      	ldr	r3, [r3, #32]
 800fa02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	699b      	ldr	r3, [r3, #24]
 800fa0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	4b34      	ldr	r3, [pc, #208]	; (800fae4 <TIM_OC2_SetConfig+0xfc>)
 800fa14:	4013      	ands	r3, r2
 800fa16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	021b      	lsls	r3, r3, #8
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	f023 0320 	bic.w	r3, r3, #32
 800fa32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	689b      	ldr	r3, [r3, #8]
 800fa38:	011b      	lsls	r3, r3, #4
 800fa3a:	697a      	ldr	r2, [r7, #20]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4a29      	ldr	r2, [pc, #164]	; (800fae8 <TIM_OC2_SetConfig+0x100>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d003      	beq.n	800fa50 <TIM_OC2_SetConfig+0x68>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4a28      	ldr	r2, [pc, #160]	; (800faec <TIM_OC2_SetConfig+0x104>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d10d      	bne.n	800fa6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	68db      	ldr	r3, [r3, #12]
 800fa5c:	011b      	lsls	r3, r3, #4
 800fa5e:	697a      	ldr	r2, [r7, #20]
 800fa60:	4313      	orrs	r3, r2
 800fa62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	4a1e      	ldr	r2, [pc, #120]	; (800fae8 <TIM_OC2_SetConfig+0x100>)
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d00f      	beq.n	800fa94 <TIM_OC2_SetConfig+0xac>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4a1d      	ldr	r2, [pc, #116]	; (800faec <TIM_OC2_SetConfig+0x104>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d00b      	beq.n	800fa94 <TIM_OC2_SetConfig+0xac>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4a1c      	ldr	r2, [pc, #112]	; (800faf0 <TIM_OC2_SetConfig+0x108>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d007      	beq.n	800fa94 <TIM_OC2_SetConfig+0xac>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4a1b      	ldr	r2, [pc, #108]	; (800faf4 <TIM_OC2_SetConfig+0x10c>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d003      	beq.n	800fa94 <TIM_OC2_SetConfig+0xac>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	4a1a      	ldr	r2, [pc, #104]	; (800faf8 <TIM_OC2_SetConfig+0x110>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d113      	bne.n	800fabc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800faa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	695b      	ldr	r3, [r3, #20]
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	693a      	ldr	r2, [r7, #16]
 800faac:	4313      	orrs	r3, r2
 800faae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	699b      	ldr	r3, [r3, #24]
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	693a      	ldr	r2, [r7, #16]
 800fab8:	4313      	orrs	r3, r2
 800faba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	693a      	ldr	r2, [r7, #16]
 800fac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	685a      	ldr	r2, [r3, #4]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	697a      	ldr	r2, [r7, #20]
 800fad4:	621a      	str	r2, [r3, #32]
}
 800fad6:	bf00      	nop
 800fad8:	371c      	adds	r7, #28
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	feff8fff 	.word	0xfeff8fff
 800fae8:	40010000 	.word	0x40010000
 800faec:	40010400 	.word	0x40010400
 800faf0:	40014000 	.word	0x40014000
 800faf4:	40014400 	.word	0x40014400
 800faf8:	40014800 	.word	0x40014800

0800fafc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b087      	sub	sp, #28
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6a1b      	ldr	r3, [r3, #32]
 800fb0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a1b      	ldr	r3, [r3, #32]
 800fb16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	69db      	ldr	r3, [r3, #28]
 800fb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f023 0303 	bic.w	r3, r3, #3
 800fb32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fb44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	689b      	ldr	r3, [r3, #8]
 800fb4a:	021b      	lsls	r3, r3, #8
 800fb4c:	697a      	ldr	r2, [r7, #20]
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4a27      	ldr	r2, [pc, #156]	; (800fbf4 <TIM_OC3_SetConfig+0xf8>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d003      	beq.n	800fb62 <TIM_OC3_SetConfig+0x66>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4a26      	ldr	r2, [pc, #152]	; (800fbf8 <TIM_OC3_SetConfig+0xfc>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d10d      	bne.n	800fb7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	021b      	lsls	r3, r3, #8
 800fb70:	697a      	ldr	r2, [r7, #20]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	4a1c      	ldr	r2, [pc, #112]	; (800fbf4 <TIM_OC3_SetConfig+0xf8>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d00f      	beq.n	800fba6 <TIM_OC3_SetConfig+0xaa>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	4a1b      	ldr	r2, [pc, #108]	; (800fbf8 <TIM_OC3_SetConfig+0xfc>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d00b      	beq.n	800fba6 <TIM_OC3_SetConfig+0xaa>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	4a1a      	ldr	r2, [pc, #104]	; (800fbfc <TIM_OC3_SetConfig+0x100>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d007      	beq.n	800fba6 <TIM_OC3_SetConfig+0xaa>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4a19      	ldr	r2, [pc, #100]	; (800fc00 <TIM_OC3_SetConfig+0x104>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d003      	beq.n	800fba6 <TIM_OC3_SetConfig+0xaa>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	4a18      	ldr	r2, [pc, #96]	; (800fc04 <TIM_OC3_SetConfig+0x108>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d113      	bne.n	800fbce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fbac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	695b      	ldr	r3, [r3, #20]
 800fbba:	011b      	lsls	r3, r3, #4
 800fbbc:	693a      	ldr	r2, [r7, #16]
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	699b      	ldr	r3, [r3, #24]
 800fbc6:	011b      	lsls	r3, r3, #4
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	693a      	ldr	r2, [r7, #16]
 800fbd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	68fa      	ldr	r2, [r7, #12]
 800fbd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	685a      	ldr	r2, [r3, #4]
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	697a      	ldr	r2, [r7, #20]
 800fbe6:	621a      	str	r2, [r3, #32]
}
 800fbe8:	bf00      	nop
 800fbea:	371c      	adds	r7, #28
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr
 800fbf4:	40010000 	.word	0x40010000
 800fbf8:	40010400 	.word	0x40010400
 800fbfc:	40014000 	.word	0x40014000
 800fc00:	40014400 	.word	0x40014400
 800fc04:	40014800 	.word	0x40014800

0800fc08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b087      	sub	sp, #28
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a1b      	ldr	r3, [r3, #32]
 800fc16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6a1b      	ldr	r3, [r3, #32]
 800fc22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	69db      	ldr	r3, [r3, #28]
 800fc2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fc3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	021b      	lsls	r3, r3, #8
 800fc46:	68fa      	ldr	r2, [r7, #12]
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	689b      	ldr	r3, [r3, #8]
 800fc58:	031b      	lsls	r3, r3, #12
 800fc5a:	693a      	ldr	r2, [r7, #16]
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4a18      	ldr	r2, [pc, #96]	; (800fcc4 <TIM_OC4_SetConfig+0xbc>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d00f      	beq.n	800fc88 <TIM_OC4_SetConfig+0x80>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4a17      	ldr	r2, [pc, #92]	; (800fcc8 <TIM_OC4_SetConfig+0xc0>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d00b      	beq.n	800fc88 <TIM_OC4_SetConfig+0x80>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4a16      	ldr	r2, [pc, #88]	; (800fccc <TIM_OC4_SetConfig+0xc4>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d007      	beq.n	800fc88 <TIM_OC4_SetConfig+0x80>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	4a15      	ldr	r2, [pc, #84]	; (800fcd0 <TIM_OC4_SetConfig+0xc8>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d003      	beq.n	800fc88 <TIM_OC4_SetConfig+0x80>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	4a14      	ldr	r2, [pc, #80]	; (800fcd4 <TIM_OC4_SetConfig+0xcc>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d109      	bne.n	800fc9c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	695b      	ldr	r3, [r3, #20]
 800fc94:	019b      	lsls	r3, r3, #6
 800fc96:	697a      	ldr	r2, [r7, #20]
 800fc98:	4313      	orrs	r3, r2
 800fc9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	697a      	ldr	r2, [r7, #20]
 800fca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	685a      	ldr	r2, [r3, #4]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	693a      	ldr	r2, [r7, #16]
 800fcb4:	621a      	str	r2, [r3, #32]
}
 800fcb6:	bf00      	nop
 800fcb8:	371c      	adds	r7, #28
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
 800fcc2:	bf00      	nop
 800fcc4:	40010000 	.word	0x40010000
 800fcc8:	40010400 	.word	0x40010400
 800fccc:	40014000 	.word	0x40014000
 800fcd0:	40014400 	.word	0x40014400
 800fcd4:	40014800 	.word	0x40014800

0800fcd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b087      	sub	sp, #28
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6a1b      	ldr	r3, [r3, #32]
 800fce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6a1b      	ldr	r3, [r3, #32]
 800fcf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	68fa      	ldr	r2, [r7, #12]
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fd18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	041b      	lsls	r3, r3, #16
 800fd20:	693a      	ldr	r2, [r7, #16]
 800fd22:	4313      	orrs	r3, r2
 800fd24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	4a17      	ldr	r2, [pc, #92]	; (800fd88 <TIM_OC5_SetConfig+0xb0>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d00f      	beq.n	800fd4e <TIM_OC5_SetConfig+0x76>
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	4a16      	ldr	r2, [pc, #88]	; (800fd8c <TIM_OC5_SetConfig+0xb4>)
 800fd32:	4293      	cmp	r3, r2
 800fd34:	d00b      	beq.n	800fd4e <TIM_OC5_SetConfig+0x76>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	4a15      	ldr	r2, [pc, #84]	; (800fd90 <TIM_OC5_SetConfig+0xb8>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d007      	beq.n	800fd4e <TIM_OC5_SetConfig+0x76>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	4a14      	ldr	r2, [pc, #80]	; (800fd94 <TIM_OC5_SetConfig+0xbc>)
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d003      	beq.n	800fd4e <TIM_OC5_SetConfig+0x76>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	4a13      	ldr	r2, [pc, #76]	; (800fd98 <TIM_OC5_SetConfig+0xc0>)
 800fd4a:	4293      	cmp	r3, r2
 800fd4c:	d109      	bne.n	800fd62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	695b      	ldr	r3, [r3, #20]
 800fd5a:	021b      	lsls	r3, r3, #8
 800fd5c:	697a      	ldr	r2, [r7, #20]
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	697a      	ldr	r2, [r7, #20]
 800fd66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	68fa      	ldr	r2, [r7, #12]
 800fd6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	685a      	ldr	r2, [r3, #4]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	693a      	ldr	r2, [r7, #16]
 800fd7a:	621a      	str	r2, [r3, #32]
}
 800fd7c:	bf00      	nop
 800fd7e:	371c      	adds	r7, #28
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr
 800fd88:	40010000 	.word	0x40010000
 800fd8c:	40010400 	.word	0x40010400
 800fd90:	40014000 	.word	0x40014000
 800fd94:	40014400 	.word	0x40014400
 800fd98:	40014800 	.word	0x40014800

0800fd9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b087      	sub	sp, #28
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6a1b      	ldr	r3, [r3, #32]
 800fdaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6a1b      	ldr	r3, [r3, #32]
 800fdb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	685b      	ldr	r3, [r3, #4]
 800fdbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fdca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	021b      	lsls	r3, r3, #8
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fdde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	689b      	ldr	r3, [r3, #8]
 800fde4:	051b      	lsls	r3, r3, #20
 800fde6:	693a      	ldr	r2, [r7, #16]
 800fde8:	4313      	orrs	r3, r2
 800fdea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	4a18      	ldr	r2, [pc, #96]	; (800fe50 <TIM_OC6_SetConfig+0xb4>)
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d00f      	beq.n	800fe14 <TIM_OC6_SetConfig+0x78>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	4a17      	ldr	r2, [pc, #92]	; (800fe54 <TIM_OC6_SetConfig+0xb8>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d00b      	beq.n	800fe14 <TIM_OC6_SetConfig+0x78>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	4a16      	ldr	r2, [pc, #88]	; (800fe58 <TIM_OC6_SetConfig+0xbc>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d007      	beq.n	800fe14 <TIM_OC6_SetConfig+0x78>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	4a15      	ldr	r2, [pc, #84]	; (800fe5c <TIM_OC6_SetConfig+0xc0>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d003      	beq.n	800fe14 <TIM_OC6_SetConfig+0x78>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	4a14      	ldr	r2, [pc, #80]	; (800fe60 <TIM_OC6_SetConfig+0xc4>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d109      	bne.n	800fe28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fe1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	695b      	ldr	r3, [r3, #20]
 800fe20:	029b      	lsls	r3, r3, #10
 800fe22:	697a      	ldr	r2, [r7, #20]
 800fe24:	4313      	orrs	r3, r2
 800fe26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	697a      	ldr	r2, [r7, #20]
 800fe2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	685a      	ldr	r2, [r3, #4]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	693a      	ldr	r2, [r7, #16]
 800fe40:	621a      	str	r2, [r3, #32]
}
 800fe42:	bf00      	nop
 800fe44:	371c      	adds	r7, #28
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr
 800fe4e:	bf00      	nop
 800fe50:	40010000 	.word	0x40010000
 800fe54:	40010400 	.word	0x40010400
 800fe58:	40014000 	.word	0x40014000
 800fe5c:	40014400 	.word	0x40014400
 800fe60:	40014800 	.word	0x40014800

0800fe64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe64:	b480      	push	{r7}
 800fe66:	b087      	sub	sp, #28
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6a1b      	ldr	r3, [r3, #32]
 800fe74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6a1b      	ldr	r3, [r3, #32]
 800fe7a:	f023 0201 	bic.w	r2, r3, #1
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	699b      	ldr	r3, [r3, #24]
 800fe86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fe8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	011b      	lsls	r3, r3, #4
 800fe94:	693a      	ldr	r2, [r7, #16]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	f023 030a 	bic.w	r3, r3, #10
 800fea0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fea2:	697a      	ldr	r2, [r7, #20]
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	693a      	ldr	r2, [r7, #16]
 800feae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	697a      	ldr	r2, [r7, #20]
 800feb4:	621a      	str	r2, [r3, #32]
}
 800feb6:	bf00      	nop
 800feb8:	371c      	adds	r7, #28
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr

0800fec2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fec2:	b480      	push	{r7}
 800fec4:	b087      	sub	sp, #28
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	60f8      	str	r0, [r7, #12]
 800feca:	60b9      	str	r1, [r7, #8]
 800fecc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	6a1b      	ldr	r3, [r3, #32]
 800fed2:	f023 0210 	bic.w	r2, r3, #16
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	699b      	ldr	r3, [r3, #24]
 800fede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	6a1b      	ldr	r3, [r3, #32]
 800fee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800feec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	031b      	lsls	r3, r3, #12
 800fef2:	697a      	ldr	r2, [r7, #20]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fefe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	011b      	lsls	r3, r3, #4
 800ff04:	693a      	ldr	r2, [r7, #16]
 800ff06:	4313      	orrs	r3, r2
 800ff08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	697a      	ldr	r2, [r7, #20]
 800ff0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	693a      	ldr	r2, [r7, #16]
 800ff14:	621a      	str	r2, [r3, #32]
}
 800ff16:	bf00      	nop
 800ff18:	371c      	adds	r7, #28
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
	...

0800ff24 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b085      	sub	sp, #20
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	689b      	ldr	r3, [r3, #8]
 800ff32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ff34:	68fa      	ldr	r2, [r7, #12]
 800ff36:	4b09      	ldr	r3, [pc, #36]	; (800ff5c <TIM_ITRx_SetConfig+0x38>)
 800ff38:	4013      	ands	r3, r2
 800ff3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ff3c:	683a      	ldr	r2, [r7, #0]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	4313      	orrs	r3, r2
 800ff42:	f043 0307 	orr.w	r3, r3, #7
 800ff46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68fa      	ldr	r2, [r7, #12]
 800ff4c:	609a      	str	r2, [r3, #8]
}
 800ff4e:	bf00      	nop
 800ff50:	3714      	adds	r7, #20
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop
 800ff5c:	ffcfff8f 	.word	0xffcfff8f

0800ff60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b087      	sub	sp, #28
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	60b9      	str	r1, [r7, #8]
 800ff6a:	607a      	str	r2, [r7, #4]
 800ff6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	689b      	ldr	r3, [r3, #8]
 800ff72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ff7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	021a      	lsls	r2, r3, #8
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	431a      	orrs	r2, r3
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	4313      	orrs	r3, r2
 800ff88:	697a      	ldr	r2, [r7, #20]
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	697a      	ldr	r2, [r7, #20]
 800ff92:	609a      	str	r2, [r3, #8]
}
 800ff94:	bf00      	nop
 800ff96:	371c      	adds	r7, #28
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9e:	4770      	bx	lr

0800ffa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b087      	sub	sp, #28
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	f003 031f 	and.w	r3, r3, #31
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	fa02 f303 	lsl.w	r3, r2, r3
 800ffb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	6a1a      	ldr	r2, [r3, #32]
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	43db      	mvns	r3, r3
 800ffc2:	401a      	ands	r2, r3
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6a1a      	ldr	r2, [r3, #32]
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	f003 031f 	and.w	r3, r3, #31
 800ffd2:	6879      	ldr	r1, [r7, #4]
 800ffd4:	fa01 f303 	lsl.w	r3, r1, r3
 800ffd8:	431a      	orrs	r2, r3
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	621a      	str	r2, [r3, #32]
}
 800ffde:	bf00      	nop
 800ffe0:	371c      	adds	r7, #28
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe8:	4770      	bx	lr
	...

0800ffec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b085      	sub	sp, #20
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fffc:	2b01      	cmp	r3, #1
 800fffe:	d101      	bne.n	8010004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010000:	2302      	movs	r3, #2
 8010002:	e068      	b.n	80100d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2201      	movs	r2, #1
 8010008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2202      	movs	r2, #2
 8010010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	685b      	ldr	r3, [r3, #4]
 801001a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4a2e      	ldr	r2, [pc, #184]	; (80100e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d004      	beq.n	8010038 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4a2d      	ldr	r2, [pc, #180]	; (80100e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d108      	bne.n	801004a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801003e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	68fa      	ldr	r2, [r7, #12]
 8010046:	4313      	orrs	r3, r2
 8010048:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010050:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	4313      	orrs	r3, r2
 801005a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	4a1e      	ldr	r2, [pc, #120]	; (80100e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d01d      	beq.n	80100aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010076:	d018      	beq.n	80100aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4a1b      	ldr	r2, [pc, #108]	; (80100ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d013      	beq.n	80100aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a1a      	ldr	r2, [pc, #104]	; (80100f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d00e      	beq.n	80100aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a18      	ldr	r2, [pc, #96]	; (80100f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d009      	beq.n	80100aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	4a13      	ldr	r2, [pc, #76]	; (80100e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801009c:	4293      	cmp	r3, r2
 801009e:	d004      	beq.n	80100aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a14      	ldr	r2, [pc, #80]	; (80100f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d10c      	bne.n	80100c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	689b      	ldr	r3, [r3, #8]
 80100b6:	68ba      	ldr	r2, [r7, #8]
 80100b8:	4313      	orrs	r3, r2
 80100ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	68ba      	ldr	r2, [r7, #8]
 80100c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2201      	movs	r2, #1
 80100c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3714      	adds	r7, #20
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	40010000 	.word	0x40010000
 80100e8:	40010400 	.word	0x40010400
 80100ec:	40000400 	.word	0x40000400
 80100f0:	40000800 	.word	0x40000800
 80100f4:	40000c00 	.word	0x40000c00
 80100f8:	40001800 	.word	0x40001800

080100fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010104:	bf00      	nop
 8010106:	370c      	adds	r7, #12
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr

08010110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010110:	b480      	push	{r7}
 8010112:	b083      	sub	sp, #12
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010118:	bf00      	nop
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010124:	b480      	push	{r7}
 8010126:	b083      	sub	sp, #12
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801012c:	bf00      	nop
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr

08010138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d101      	bne.n	801014a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010146:	2301      	movs	r3, #1
 8010148:	e042      	b.n	80101d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010150:	2b00      	cmp	r3, #0
 8010152:	d106      	bne.n	8010162 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7f4 fb83 	bl	8004868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2224      	movs	r2, #36	; 0x24
 8010166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f022 0201 	bic.w	r2, r2, #1
 8010178:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f000 fbe0 	bl	8010940 <UART_SetConfig>
 8010180:	4603      	mov	r3, r0
 8010182:	2b01      	cmp	r3, #1
 8010184:	d101      	bne.n	801018a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010186:	2301      	movs	r3, #1
 8010188:	e022      	b.n	80101d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801018e:	2b00      	cmp	r3, #0
 8010190:	d002      	beq.n	8010198 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f001 f934 	bl	8011400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	685a      	ldr	r2, [r3, #4]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80101a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	689a      	ldr	r2, [r3, #8]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80101b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f042 0201 	orr.w	r2, r2, #1
 80101c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f001 f9bb 	bl	8011544 <UART_CheckIdleState>
 80101ce:	4603      	mov	r3, r0
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3708      	adds	r7, #8
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	4613      	mov	r3, r2
 80101e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101ec:	2b20      	cmp	r3, #32
 80101ee:	d168      	bne.n	80102c2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d002      	beq.n	80101fc <HAL_UART_Transmit_DMA+0x24>
 80101f6:	88fb      	ldrh	r3, [r7, #6]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d101      	bne.n	8010200 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80101fc:	2301      	movs	r3, #1
 80101fe:	e061      	b.n	80102c4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010206:	2b01      	cmp	r3, #1
 8010208:	d101      	bne.n	801020e <HAL_UART_Transmit_DMA+0x36>
 801020a:	2302      	movs	r3, #2
 801020c:	e05a      	b.n	80102c4 <HAL_UART_Transmit_DMA+0xec>
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2201      	movs	r2, #1
 8010212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	68ba      	ldr	r2, [r7, #8]
 801021a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	88fa      	ldrh	r2, [r7, #6]
 8010220:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	88fa      	ldrh	r2, [r7, #6]
 8010228:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2200      	movs	r2, #0
 8010230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2221      	movs	r2, #33	; 0x21
 8010238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010240:	2b00      	cmp	r3, #0
 8010242:	d02c      	beq.n	801029e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010248:	4a20      	ldr	r2, [pc, #128]	; (80102cc <HAL_UART_Transmit_DMA+0xf4>)
 801024a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010250:	4a1f      	ldr	r2, [pc, #124]	; (80102d0 <HAL_UART_Transmit_DMA+0xf8>)
 8010252:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010258:	4a1e      	ldr	r2, [pc, #120]	; (80102d4 <HAL_UART_Transmit_DMA+0xfc>)
 801025a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010260:	2200      	movs	r2, #0
 8010262:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801026c:	4619      	mov	r1, r3
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3328      	adds	r3, #40	; 0x28
 8010274:	461a      	mov	r2, r3
 8010276:	88fb      	ldrh	r3, [r7, #6]
 8010278:	f7f6 f9c0 	bl	80065fc <HAL_DMA_Start_IT>
 801027c:	4603      	mov	r3, r0
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00d      	beq.n	801029e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2210      	movs	r2, #16
 8010286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2200      	movs	r2, #0
 801028e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2220      	movs	r2, #32
 8010296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 801029a:	2301      	movs	r3, #1
 801029c:	e012      	b.n	80102c4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	2240      	movs	r2, #64	; 0x40
 80102a4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	2200      	movs	r2, #0
 80102aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	689a      	ldr	r2, [r3, #8]
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80102bc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80102be:	2300      	movs	r3, #0
 80102c0:	e000      	b.n	80102c4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80102c2:	2302      	movs	r3, #2
  }
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}
 80102cc:	08011859 	.word	0x08011859
 80102d0:	080118a9 	.word	0x080118a9
 80102d4:	08011993 	.word	0x08011993

080102d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	4613      	mov	r3, r2
 80102e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102ec:	2b20      	cmp	r3, #32
 80102ee:	d131      	bne.n	8010354 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d002      	beq.n	80102fc <HAL_UART_Receive_DMA+0x24>
 80102f6:	88fb      	ldrh	r3, [r7, #6]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d101      	bne.n	8010300 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80102fc:	2301      	movs	r3, #1
 80102fe:	e02a      	b.n	8010356 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010306:	2b01      	cmp	r3, #1
 8010308:	d101      	bne.n	801030e <HAL_UART_Receive_DMA+0x36>
 801030a:	2302      	movs	r3, #2
 801030c:	e023      	b.n	8010356 <HAL_UART_Receive_DMA+0x7e>
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2201      	movs	r2, #1
 8010312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2200      	movs	r2, #0
 801031a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4a0f      	ldr	r2, [pc, #60]	; (8010360 <HAL_UART_Receive_DMA+0x88>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d00e      	beq.n	8010344 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010330:	2b00      	cmp	r3, #0
 8010332:	d007      	beq.n	8010344 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010342:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010344:	88fb      	ldrh	r3, [r7, #6]
 8010346:	461a      	mov	r2, r3
 8010348:	68b9      	ldr	r1, [r7, #8]
 801034a:	68f8      	ldr	r0, [r7, #12]
 801034c:	f001 f9c6 	bl	80116dc <UART_Start_Receive_DMA>
 8010350:	4603      	mov	r3, r0
 8010352:	e000      	b.n	8010356 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8010354:	2302      	movs	r3, #2
  }
}
 8010356:	4618      	mov	r0, r3
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	58000c00 	.word	0x58000c00

08010364 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b088      	sub	sp, #32
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	69db      	ldr	r3, [r3, #28]
 8010372:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010384:	69fa      	ldr	r2, [r7, #28]
 8010386:	f640 030f 	movw	r3, #2063	; 0x80f
 801038a:	4013      	ands	r3, r2
 801038c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d118      	bne.n	80103c6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	f003 0320 	and.w	r3, r3, #32
 801039a:	2b00      	cmp	r3, #0
 801039c:	d013      	beq.n	80103c6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	f003 0320 	and.w	r3, r3, #32
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d104      	bne.n	80103b2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d009      	beq.n	80103c6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f000 8282 	beq.w	80108c0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	4798      	blx	r3
      }
      return;
 80103c4:	e27c      	b.n	80108c0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	f000 80ef 	beq.w	80105ac <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80103ce:	697a      	ldr	r2, [r7, #20]
 80103d0:	4b73      	ldr	r3, [pc, #460]	; (80105a0 <HAL_UART_IRQHandler+0x23c>)
 80103d2:	4013      	ands	r3, r2
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d105      	bne.n	80103e4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80103d8:	69ba      	ldr	r2, [r7, #24]
 80103da:	4b72      	ldr	r3, [pc, #456]	; (80105a4 <HAL_UART_IRQHandler+0x240>)
 80103dc:	4013      	ands	r3, r2
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f000 80e4 	beq.w	80105ac <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	f003 0301 	and.w	r3, r3, #1
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d010      	beq.n	8010410 <HAL_UART_IRQHandler+0xac>
 80103ee:	69bb      	ldr	r3, [r7, #24]
 80103f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d00b      	beq.n	8010410 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	2201      	movs	r2, #1
 80103fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010406:	f043 0201 	orr.w	r2, r3, #1
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010410:	69fb      	ldr	r3, [r7, #28]
 8010412:	f003 0302 	and.w	r3, r3, #2
 8010416:	2b00      	cmp	r3, #0
 8010418:	d010      	beq.n	801043c <HAL_UART_IRQHandler+0xd8>
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	f003 0301 	and.w	r3, r3, #1
 8010420:	2b00      	cmp	r3, #0
 8010422:	d00b      	beq.n	801043c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	2202      	movs	r2, #2
 801042a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010432:	f043 0204 	orr.w	r2, r3, #4
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801043c:	69fb      	ldr	r3, [r7, #28]
 801043e:	f003 0304 	and.w	r3, r3, #4
 8010442:	2b00      	cmp	r3, #0
 8010444:	d010      	beq.n	8010468 <HAL_UART_IRQHandler+0x104>
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	f003 0301 	and.w	r3, r3, #1
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00b      	beq.n	8010468 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2204      	movs	r2, #4
 8010456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801045e:	f043 0202 	orr.w	r2, r3, #2
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	f003 0308 	and.w	r3, r3, #8
 801046e:	2b00      	cmp	r3, #0
 8010470:	d015      	beq.n	801049e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	f003 0320 	and.w	r3, r3, #32
 8010478:	2b00      	cmp	r3, #0
 801047a:	d104      	bne.n	8010486 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801047c:	697a      	ldr	r2, [r7, #20]
 801047e:	4b48      	ldr	r3, [pc, #288]	; (80105a0 <HAL_UART_IRQHandler+0x23c>)
 8010480:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00b      	beq.n	801049e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2208      	movs	r2, #8
 801048c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010494:	f043 0208 	orr.w	r2, r3, #8
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d011      	beq.n	80104cc <HAL_UART_IRQHandler+0x168>
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00c      	beq.n	80104cc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80104ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104c2:	f043 0220 	orr.w	r2, r3, #32
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 81f6 	beq.w	80108c4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	f003 0320 	and.w	r3, r3, #32
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d011      	beq.n	8010506 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	f003 0320 	and.w	r3, r3, #32
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d104      	bne.n	80104f6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d007      	beq.n	8010506 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d003      	beq.n	8010506 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801050c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010518:	2b40      	cmp	r3, #64	; 0x40
 801051a:	d004      	beq.n	8010526 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010522:	2b00      	cmp	r3, #0
 8010524:	d031      	beq.n	801058a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f001 f964 	bl	80117f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	689b      	ldr	r3, [r3, #8]
 8010532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010536:	2b40      	cmp	r3, #64	; 0x40
 8010538:	d123      	bne.n	8010582 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	689a      	ldr	r2, [r3, #8]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010548:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801054e:	2b00      	cmp	r3, #0
 8010550:	d013      	beq.n	801057a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010556:	4a14      	ldr	r2, [pc, #80]	; (80105a8 <HAL_UART_IRQHandler+0x244>)
 8010558:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801055e:	4618      	mov	r0, r3
 8010560:	f7f6 fdd4 	bl	800710c <HAL_DMA_Abort_IT>
 8010564:	4603      	mov	r3, r0
 8010566:	2b00      	cmp	r3, #0
 8010568:	d017      	beq.n	801059a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801056e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8010574:	4610      	mov	r0, r2
 8010576:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010578:	e00f      	b.n	801059a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 f9ca 	bl	8010914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010580:	e00b      	b.n	801059a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 f9c6 	bl	8010914 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010588:	e007      	b.n	801059a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f000 f9c2 	bl	8010914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8010598:	e194      	b.n	80108c4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801059a:	bf00      	nop
    return;
 801059c:	e192      	b.n	80108c4 <HAL_UART_IRQHandler+0x560>
 801059e:	bf00      	nop
 80105a0:	10000001 	.word	0x10000001
 80105a4:	04000120 	.word	0x04000120
 80105a8:	08011a13 	.word	0x08011a13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	f040 810f 	bne.w	80107d4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	f003 0310 	and.w	r3, r3, #16
 80105bc:	2b00      	cmp	r3, #0
 80105be:	f000 8109 	beq.w	80107d4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	f003 0310 	and.w	r3, r3, #16
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f000 8103 	beq.w	80107d4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	2210      	movs	r2, #16
 80105d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	689b      	ldr	r3, [r3, #8]
 80105dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105e0:	2b40      	cmp	r3, #64	; 0x40
 80105e2:	f040 80bb 	bne.w	801075c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a96      	ldr	r2, [pc, #600]	; (8010848 <HAL_UART_IRQHandler+0x4e4>)
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d059      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	4a94      	ldr	r2, [pc, #592]	; (801084c <HAL_UART_IRQHandler+0x4e8>)
 80105fa:	4293      	cmp	r3, r2
 80105fc:	d053      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	4a92      	ldr	r2, [pc, #584]	; (8010850 <HAL_UART_IRQHandler+0x4ec>)
 8010606:	4293      	cmp	r3, r2
 8010608:	d04d      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a90      	ldr	r2, [pc, #576]	; (8010854 <HAL_UART_IRQHandler+0x4f0>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d047      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4a8e      	ldr	r2, [pc, #568]	; (8010858 <HAL_UART_IRQHandler+0x4f4>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d041      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4a8c      	ldr	r2, [pc, #560]	; (801085c <HAL_UART_IRQHandler+0x4f8>)
 801062a:	4293      	cmp	r3, r2
 801062c:	d03b      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	4a8a      	ldr	r2, [pc, #552]	; (8010860 <HAL_UART_IRQHandler+0x4fc>)
 8010636:	4293      	cmp	r3, r2
 8010638:	d035      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4a88      	ldr	r2, [pc, #544]	; (8010864 <HAL_UART_IRQHandler+0x500>)
 8010642:	4293      	cmp	r3, r2
 8010644:	d02f      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	4a86      	ldr	r2, [pc, #536]	; (8010868 <HAL_UART_IRQHandler+0x504>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d029      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4a84      	ldr	r2, [pc, #528]	; (801086c <HAL_UART_IRQHandler+0x508>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d023      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a82      	ldr	r2, [pc, #520]	; (8010870 <HAL_UART_IRQHandler+0x50c>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d01d      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a80      	ldr	r2, [pc, #512]	; (8010874 <HAL_UART_IRQHandler+0x510>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d017      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	4a7e      	ldr	r2, [pc, #504]	; (8010878 <HAL_UART_IRQHandler+0x514>)
 801067e:	4293      	cmp	r3, r2
 8010680:	d011      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	4a7c      	ldr	r2, [pc, #496]	; (801087c <HAL_UART_IRQHandler+0x518>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d00b      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a7a      	ldr	r2, [pc, #488]	; (8010880 <HAL_UART_IRQHandler+0x51c>)
 8010696:	4293      	cmp	r3, r2
 8010698:	d005      	beq.n	80106a6 <HAL_UART_IRQHandler+0x342>
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4a78      	ldr	r2, [pc, #480]	; (8010884 <HAL_UART_IRQHandler+0x520>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d105      	bne.n	80106b2 <HAL_UART_IRQHandler+0x34e>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	b29b      	uxth	r3, r3
 80106b0:	e004      	b.n	80106bc <HAL_UART_IRQHandler+0x358>
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80106be:	893b      	ldrh	r3, [r7, #8]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	f000 8101 	beq.w	80108c8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106cc:	893a      	ldrh	r2, [r7, #8]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	f080 80fa 	bcs.w	80108c8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	893a      	ldrh	r2, [r7, #8]
 80106d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80106e0:	69db      	ldr	r3, [r3, #28]
 80106e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106e6:	d02b      	beq.n	8010740 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80106f6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	689a      	ldr	r2, [r3, #8]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f022 0201 	bic.w	r2, r2, #1
 8010706:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	689a      	ldr	r2, [r3, #8]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010716:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2220      	movs	r2, #32
 801071c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2200      	movs	r2, #0
 8010724:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	f022 0210 	bic.w	r2, r2, #16
 8010734:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801073a:	4618      	mov	r0, r3
 801073c:	f7f6 f9c8 	bl	8006ad0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801074c:	b29b      	uxth	r3, r3
 801074e:	1ad3      	subs	r3, r2, r3
 8010750:	b29b      	uxth	r3, r3
 8010752:	4619      	mov	r1, r3
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 f8e7 	bl	8010928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801075a:	e0b5      	b.n	80108c8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010768:	b29b      	uxth	r3, r3
 801076a:	1ad3      	subs	r3, r2, r3
 801076c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010774:	b29b      	uxth	r3, r3
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 80a8 	beq.w	80108cc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 801077c:	897b      	ldrh	r3, [r7, #10]
 801077e:	2b00      	cmp	r3, #0
 8010780:	f000 80a4 	beq.w	80108cc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	681a      	ldr	r2, [r3, #0]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010792:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	6899      	ldr	r1, [r3, #8]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681a      	ldr	r2, [r3, #0]
 801079e:	4b3a      	ldr	r3, [pc, #232]	; (8010888 <HAL_UART_IRQHandler+0x524>)
 80107a0:	400b      	ands	r3, r1
 80107a2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2220      	movs	r2, #32
 80107a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2200      	movs	r2, #0
 80107b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f022 0210 	bic.w	r2, r2, #16
 80107c6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80107c8:	897b      	ldrh	r3, [r7, #10]
 80107ca:	4619      	mov	r1, r3
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 f8ab 	bl	8010928 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80107d2:	e07b      	b.n	80108cc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00d      	beq.n	80107fa <HAL_UART_IRQHandler+0x496>
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d008      	beq.n	80107fa <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80107f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80107f2:	6878      	ldr	r0, [r7, #4]
 80107f4:	f001 f93d 	bl	8011a72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80107f8:	e06b      	b.n	80108d2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010800:	2b00      	cmp	r3, #0
 8010802:	d012      	beq.n	801082a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010804:	69bb      	ldr	r3, [r7, #24]
 8010806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801080a:	2b00      	cmp	r3, #0
 801080c:	d104      	bne.n	8010818 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010814:	2b00      	cmp	r3, #0
 8010816:	d008      	beq.n	801082a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801081c:	2b00      	cmp	r3, #0
 801081e:	d057      	beq.n	80108d0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	4798      	blx	r3
    }
    return;
 8010828:	e052      	b.n	80108d0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010830:	2b00      	cmp	r3, #0
 8010832:	d02b      	beq.n	801088c <HAL_UART_IRQHandler+0x528>
 8010834:	69bb      	ldr	r3, [r7, #24]
 8010836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801083a:	2b00      	cmp	r3, #0
 801083c:	d026      	beq.n	801088c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f001 f8fd 	bl	8011a3e <UART_EndTransmit_IT>
    return;
 8010844:	e045      	b.n	80108d2 <HAL_UART_IRQHandler+0x56e>
 8010846:	bf00      	nop
 8010848:	40020010 	.word	0x40020010
 801084c:	40020028 	.word	0x40020028
 8010850:	40020040 	.word	0x40020040
 8010854:	40020058 	.word	0x40020058
 8010858:	40020070 	.word	0x40020070
 801085c:	40020088 	.word	0x40020088
 8010860:	400200a0 	.word	0x400200a0
 8010864:	400200b8 	.word	0x400200b8
 8010868:	40020410 	.word	0x40020410
 801086c:	40020428 	.word	0x40020428
 8010870:	40020440 	.word	0x40020440
 8010874:	40020458 	.word	0x40020458
 8010878:	40020470 	.word	0x40020470
 801087c:	40020488 	.word	0x40020488
 8010880:	400204a0 	.word	0x400204a0
 8010884:	400204b8 	.word	0x400204b8
 8010888:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801088c:	69fb      	ldr	r3, [r7, #28]
 801088e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010892:	2b00      	cmp	r3, #0
 8010894:	d008      	beq.n	80108a8 <HAL_UART_IRQHandler+0x544>
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801089c:	2b00      	cmp	r3, #0
 801089e:	d003      	beq.n	80108a8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f001 f8fa 	bl	8011a9a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108a6:	e014      	b.n	80108d2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d00f      	beq.n	80108d2 <HAL_UART_IRQHandler+0x56e>
 80108b2:	69bb      	ldr	r3, [r7, #24]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	da0c      	bge.n	80108d2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f001 f8e4 	bl	8011a86 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108be:	e008      	b.n	80108d2 <HAL_UART_IRQHandler+0x56e>
      return;
 80108c0:	bf00      	nop
 80108c2:	e006      	b.n	80108d2 <HAL_UART_IRQHandler+0x56e>
    return;
 80108c4:	bf00      	nop
 80108c6:	e004      	b.n	80108d2 <HAL_UART_IRQHandler+0x56e>
      return;
 80108c8:	bf00      	nop
 80108ca:	e002      	b.n	80108d2 <HAL_UART_IRQHandler+0x56e>
      return;
 80108cc:	bf00      	nop
 80108ce:	e000      	b.n	80108d2 <HAL_UART_IRQHandler+0x56e>
    return;
 80108d0:	bf00      	nop
  }
}
 80108d2:	3720      	adds	r7, #32
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80108e0:	bf00      	nop
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b083      	sub	sp, #12
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80108f4:	bf00      	nop
 80108f6:	370c      	adds	r7, #12
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010908:	bf00      	nop
 801090a:	370c      	adds	r7, #12
 801090c:	46bd      	mov	sp, r7
 801090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010912:	4770      	bx	lr

08010914 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801091c:	bf00      	nop
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	460b      	mov	r3, r1
 8010932:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010934:	bf00      	nop
 8010936:	370c      	adds	r7, #12
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010940:	b5b0      	push	{r4, r5, r7, lr}
 8010942:	b08e      	sub	sp, #56	; 0x38
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010948:	2300      	movs	r3, #0
 801094a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	689a      	ldr	r2, [r3, #8]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	691b      	ldr	r3, [r3, #16]
 8010956:	431a      	orrs	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	695b      	ldr	r3, [r3, #20]
 801095c:	431a      	orrs	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	69db      	ldr	r3, [r3, #28]
 8010962:	4313      	orrs	r3, r2
 8010964:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	681a      	ldr	r2, [r3, #0]
 801096c:	4bbf      	ldr	r3, [pc, #764]	; (8010c6c <UART_SetConfig+0x32c>)
 801096e:	4013      	ands	r3, r2
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	6812      	ldr	r2, [r2, #0]
 8010974:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010976:	430b      	orrs	r3, r1
 8010978:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	68da      	ldr	r2, [r3, #12]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	430a      	orrs	r2, r1
 801098e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	699b      	ldr	r3, [r3, #24]
 8010994:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	4ab5      	ldr	r2, [pc, #724]	; (8010c70 <UART_SetConfig+0x330>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d004      	beq.n	80109aa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6a1b      	ldr	r3, [r3, #32]
 80109a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109a6:	4313      	orrs	r3, r2
 80109a8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	689a      	ldr	r2, [r3, #8]
 80109b0:	4bb0      	ldr	r3, [pc, #704]	; (8010c74 <UART_SetConfig+0x334>)
 80109b2:	4013      	ands	r3, r2
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	6812      	ldr	r2, [r2, #0]
 80109b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80109ba:	430b      	orrs	r3, r1
 80109bc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109c4:	f023 010f 	bic.w	r1, r3, #15
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	430a      	orrs	r2, r1
 80109d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4aa7      	ldr	r2, [pc, #668]	; (8010c78 <UART_SetConfig+0x338>)
 80109da:	4293      	cmp	r3, r2
 80109dc:	d176      	bne.n	8010acc <UART_SetConfig+0x18c>
 80109de:	4ba7      	ldr	r3, [pc, #668]	; (8010c7c <UART_SetConfig+0x33c>)
 80109e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80109e6:	2b28      	cmp	r3, #40	; 0x28
 80109e8:	d86c      	bhi.n	8010ac4 <UART_SetConfig+0x184>
 80109ea:	a201      	add	r2, pc, #4	; (adr r2, 80109f0 <UART_SetConfig+0xb0>)
 80109ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109f0:	08010a95 	.word	0x08010a95
 80109f4:	08010ac5 	.word	0x08010ac5
 80109f8:	08010ac5 	.word	0x08010ac5
 80109fc:	08010ac5 	.word	0x08010ac5
 8010a00:	08010ac5 	.word	0x08010ac5
 8010a04:	08010ac5 	.word	0x08010ac5
 8010a08:	08010ac5 	.word	0x08010ac5
 8010a0c:	08010ac5 	.word	0x08010ac5
 8010a10:	08010a9d 	.word	0x08010a9d
 8010a14:	08010ac5 	.word	0x08010ac5
 8010a18:	08010ac5 	.word	0x08010ac5
 8010a1c:	08010ac5 	.word	0x08010ac5
 8010a20:	08010ac5 	.word	0x08010ac5
 8010a24:	08010ac5 	.word	0x08010ac5
 8010a28:	08010ac5 	.word	0x08010ac5
 8010a2c:	08010ac5 	.word	0x08010ac5
 8010a30:	08010aa5 	.word	0x08010aa5
 8010a34:	08010ac5 	.word	0x08010ac5
 8010a38:	08010ac5 	.word	0x08010ac5
 8010a3c:	08010ac5 	.word	0x08010ac5
 8010a40:	08010ac5 	.word	0x08010ac5
 8010a44:	08010ac5 	.word	0x08010ac5
 8010a48:	08010ac5 	.word	0x08010ac5
 8010a4c:	08010ac5 	.word	0x08010ac5
 8010a50:	08010aad 	.word	0x08010aad
 8010a54:	08010ac5 	.word	0x08010ac5
 8010a58:	08010ac5 	.word	0x08010ac5
 8010a5c:	08010ac5 	.word	0x08010ac5
 8010a60:	08010ac5 	.word	0x08010ac5
 8010a64:	08010ac5 	.word	0x08010ac5
 8010a68:	08010ac5 	.word	0x08010ac5
 8010a6c:	08010ac5 	.word	0x08010ac5
 8010a70:	08010ab5 	.word	0x08010ab5
 8010a74:	08010ac5 	.word	0x08010ac5
 8010a78:	08010ac5 	.word	0x08010ac5
 8010a7c:	08010ac5 	.word	0x08010ac5
 8010a80:	08010ac5 	.word	0x08010ac5
 8010a84:	08010ac5 	.word	0x08010ac5
 8010a88:	08010ac5 	.word	0x08010ac5
 8010a8c:	08010ac5 	.word	0x08010ac5
 8010a90:	08010abd 	.word	0x08010abd
 8010a94:	2301      	movs	r3, #1
 8010a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a9a:	e222      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010a9c:	2304      	movs	r3, #4
 8010a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aa2:	e21e      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010aa4:	2308      	movs	r3, #8
 8010aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aaa:	e21a      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010aac:	2310      	movs	r3, #16
 8010aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ab2:	e216      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010ab4:	2320      	movs	r3, #32
 8010ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aba:	e212      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010abc:	2340      	movs	r3, #64	; 0x40
 8010abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ac2:	e20e      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010ac4:	2380      	movs	r3, #128	; 0x80
 8010ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aca:	e20a      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	4a6b      	ldr	r2, [pc, #428]	; (8010c80 <UART_SetConfig+0x340>)
 8010ad2:	4293      	cmp	r3, r2
 8010ad4:	d130      	bne.n	8010b38 <UART_SetConfig+0x1f8>
 8010ad6:	4b69      	ldr	r3, [pc, #420]	; (8010c7c <UART_SetConfig+0x33c>)
 8010ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ada:	f003 0307 	and.w	r3, r3, #7
 8010ade:	2b05      	cmp	r3, #5
 8010ae0:	d826      	bhi.n	8010b30 <UART_SetConfig+0x1f0>
 8010ae2:	a201      	add	r2, pc, #4	; (adr r2, 8010ae8 <UART_SetConfig+0x1a8>)
 8010ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae8:	08010b01 	.word	0x08010b01
 8010aec:	08010b09 	.word	0x08010b09
 8010af0:	08010b11 	.word	0x08010b11
 8010af4:	08010b19 	.word	0x08010b19
 8010af8:	08010b21 	.word	0x08010b21
 8010afc:	08010b29 	.word	0x08010b29
 8010b00:	2300      	movs	r3, #0
 8010b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b06:	e1ec      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b08:	2304      	movs	r3, #4
 8010b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b0e:	e1e8      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b10:	2308      	movs	r3, #8
 8010b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b16:	e1e4      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b18:	2310      	movs	r3, #16
 8010b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b1e:	e1e0      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b20:	2320      	movs	r3, #32
 8010b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b26:	e1dc      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b28:	2340      	movs	r3, #64	; 0x40
 8010b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b2e:	e1d8      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b30:	2380      	movs	r3, #128	; 0x80
 8010b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b36:	e1d4      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	4a51      	ldr	r2, [pc, #324]	; (8010c84 <UART_SetConfig+0x344>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d130      	bne.n	8010ba4 <UART_SetConfig+0x264>
 8010b42:	4b4e      	ldr	r3, [pc, #312]	; (8010c7c <UART_SetConfig+0x33c>)
 8010b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b46:	f003 0307 	and.w	r3, r3, #7
 8010b4a:	2b05      	cmp	r3, #5
 8010b4c:	d826      	bhi.n	8010b9c <UART_SetConfig+0x25c>
 8010b4e:	a201      	add	r2, pc, #4	; (adr r2, 8010b54 <UART_SetConfig+0x214>)
 8010b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b54:	08010b6d 	.word	0x08010b6d
 8010b58:	08010b75 	.word	0x08010b75
 8010b5c:	08010b7d 	.word	0x08010b7d
 8010b60:	08010b85 	.word	0x08010b85
 8010b64:	08010b8d 	.word	0x08010b8d
 8010b68:	08010b95 	.word	0x08010b95
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b72:	e1b6      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b74:	2304      	movs	r3, #4
 8010b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b7a:	e1b2      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b7c:	2308      	movs	r3, #8
 8010b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b82:	e1ae      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b84:	2310      	movs	r3, #16
 8010b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b8a:	e1aa      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b8c:	2320      	movs	r3, #32
 8010b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b92:	e1a6      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b94:	2340      	movs	r3, #64	; 0x40
 8010b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b9a:	e1a2      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010b9c:	2380      	movs	r3, #128	; 0x80
 8010b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ba2:	e19e      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4a37      	ldr	r2, [pc, #220]	; (8010c88 <UART_SetConfig+0x348>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	d130      	bne.n	8010c10 <UART_SetConfig+0x2d0>
 8010bae:	4b33      	ldr	r3, [pc, #204]	; (8010c7c <UART_SetConfig+0x33c>)
 8010bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bb2:	f003 0307 	and.w	r3, r3, #7
 8010bb6:	2b05      	cmp	r3, #5
 8010bb8:	d826      	bhi.n	8010c08 <UART_SetConfig+0x2c8>
 8010bba:	a201      	add	r2, pc, #4	; (adr r2, 8010bc0 <UART_SetConfig+0x280>)
 8010bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bc0:	08010bd9 	.word	0x08010bd9
 8010bc4:	08010be1 	.word	0x08010be1
 8010bc8:	08010be9 	.word	0x08010be9
 8010bcc:	08010bf1 	.word	0x08010bf1
 8010bd0:	08010bf9 	.word	0x08010bf9
 8010bd4:	08010c01 	.word	0x08010c01
 8010bd8:	2300      	movs	r3, #0
 8010bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bde:	e180      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010be0:	2304      	movs	r3, #4
 8010be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010be6:	e17c      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010be8:	2308      	movs	r3, #8
 8010bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bee:	e178      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010bf0:	2310      	movs	r3, #16
 8010bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bf6:	e174      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010bf8:	2320      	movs	r3, #32
 8010bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bfe:	e170      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010c00:	2340      	movs	r3, #64	; 0x40
 8010c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c06:	e16c      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010c08:	2380      	movs	r3, #128	; 0x80
 8010c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c0e:	e168      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	4a1d      	ldr	r2, [pc, #116]	; (8010c8c <UART_SetConfig+0x34c>)
 8010c16:	4293      	cmp	r3, r2
 8010c18:	d142      	bne.n	8010ca0 <UART_SetConfig+0x360>
 8010c1a:	4b18      	ldr	r3, [pc, #96]	; (8010c7c <UART_SetConfig+0x33c>)
 8010c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c1e:	f003 0307 	and.w	r3, r3, #7
 8010c22:	2b05      	cmp	r3, #5
 8010c24:	d838      	bhi.n	8010c98 <UART_SetConfig+0x358>
 8010c26:	a201      	add	r2, pc, #4	; (adr r2, 8010c2c <UART_SetConfig+0x2ec>)
 8010c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c2c:	08010c45 	.word	0x08010c45
 8010c30:	08010c4d 	.word	0x08010c4d
 8010c34:	08010c55 	.word	0x08010c55
 8010c38:	08010c5d 	.word	0x08010c5d
 8010c3c:	08010c65 	.word	0x08010c65
 8010c40:	08010c91 	.word	0x08010c91
 8010c44:	2300      	movs	r3, #0
 8010c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c4a:	e14a      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010c4c:	2304      	movs	r3, #4
 8010c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c52:	e146      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010c54:	2308      	movs	r3, #8
 8010c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c5a:	e142      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010c5c:	2310      	movs	r3, #16
 8010c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c62:	e13e      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010c64:	2320      	movs	r3, #32
 8010c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c6a:	e13a      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010c6c:	cfff69f3 	.word	0xcfff69f3
 8010c70:	58000c00 	.word	0x58000c00
 8010c74:	11fff4ff 	.word	0x11fff4ff
 8010c78:	40011000 	.word	0x40011000
 8010c7c:	58024400 	.word	0x58024400
 8010c80:	40004400 	.word	0x40004400
 8010c84:	40004800 	.word	0x40004800
 8010c88:	40004c00 	.word	0x40004c00
 8010c8c:	40005000 	.word	0x40005000
 8010c90:	2340      	movs	r3, #64	; 0x40
 8010c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c96:	e124      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010c98:	2380      	movs	r3, #128	; 0x80
 8010c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010c9e:	e120      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	4acc      	ldr	r2, [pc, #816]	; (8010fd8 <UART_SetConfig+0x698>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d176      	bne.n	8010d98 <UART_SetConfig+0x458>
 8010caa:	4bcc      	ldr	r3, [pc, #816]	; (8010fdc <UART_SetConfig+0x69c>)
 8010cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cb2:	2b28      	cmp	r3, #40	; 0x28
 8010cb4:	d86c      	bhi.n	8010d90 <UART_SetConfig+0x450>
 8010cb6:	a201      	add	r2, pc, #4	; (adr r2, 8010cbc <UART_SetConfig+0x37c>)
 8010cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cbc:	08010d61 	.word	0x08010d61
 8010cc0:	08010d91 	.word	0x08010d91
 8010cc4:	08010d91 	.word	0x08010d91
 8010cc8:	08010d91 	.word	0x08010d91
 8010ccc:	08010d91 	.word	0x08010d91
 8010cd0:	08010d91 	.word	0x08010d91
 8010cd4:	08010d91 	.word	0x08010d91
 8010cd8:	08010d91 	.word	0x08010d91
 8010cdc:	08010d69 	.word	0x08010d69
 8010ce0:	08010d91 	.word	0x08010d91
 8010ce4:	08010d91 	.word	0x08010d91
 8010ce8:	08010d91 	.word	0x08010d91
 8010cec:	08010d91 	.word	0x08010d91
 8010cf0:	08010d91 	.word	0x08010d91
 8010cf4:	08010d91 	.word	0x08010d91
 8010cf8:	08010d91 	.word	0x08010d91
 8010cfc:	08010d71 	.word	0x08010d71
 8010d00:	08010d91 	.word	0x08010d91
 8010d04:	08010d91 	.word	0x08010d91
 8010d08:	08010d91 	.word	0x08010d91
 8010d0c:	08010d91 	.word	0x08010d91
 8010d10:	08010d91 	.word	0x08010d91
 8010d14:	08010d91 	.word	0x08010d91
 8010d18:	08010d91 	.word	0x08010d91
 8010d1c:	08010d79 	.word	0x08010d79
 8010d20:	08010d91 	.word	0x08010d91
 8010d24:	08010d91 	.word	0x08010d91
 8010d28:	08010d91 	.word	0x08010d91
 8010d2c:	08010d91 	.word	0x08010d91
 8010d30:	08010d91 	.word	0x08010d91
 8010d34:	08010d91 	.word	0x08010d91
 8010d38:	08010d91 	.word	0x08010d91
 8010d3c:	08010d81 	.word	0x08010d81
 8010d40:	08010d91 	.word	0x08010d91
 8010d44:	08010d91 	.word	0x08010d91
 8010d48:	08010d91 	.word	0x08010d91
 8010d4c:	08010d91 	.word	0x08010d91
 8010d50:	08010d91 	.word	0x08010d91
 8010d54:	08010d91 	.word	0x08010d91
 8010d58:	08010d91 	.word	0x08010d91
 8010d5c:	08010d89 	.word	0x08010d89
 8010d60:	2301      	movs	r3, #1
 8010d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d66:	e0bc      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010d68:	2304      	movs	r3, #4
 8010d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d6e:	e0b8      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010d70:	2308      	movs	r3, #8
 8010d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d76:	e0b4      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010d78:	2310      	movs	r3, #16
 8010d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d7e:	e0b0      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010d80:	2320      	movs	r3, #32
 8010d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d86:	e0ac      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010d88:	2340      	movs	r3, #64	; 0x40
 8010d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d8e:	e0a8      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010d90:	2380      	movs	r3, #128	; 0x80
 8010d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010d96:	e0a4      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a90      	ldr	r2, [pc, #576]	; (8010fe0 <UART_SetConfig+0x6a0>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d130      	bne.n	8010e04 <UART_SetConfig+0x4c4>
 8010da2:	4b8e      	ldr	r3, [pc, #568]	; (8010fdc <UART_SetConfig+0x69c>)
 8010da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010da6:	f003 0307 	and.w	r3, r3, #7
 8010daa:	2b05      	cmp	r3, #5
 8010dac:	d826      	bhi.n	8010dfc <UART_SetConfig+0x4bc>
 8010dae:	a201      	add	r2, pc, #4	; (adr r2, 8010db4 <UART_SetConfig+0x474>)
 8010db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db4:	08010dcd 	.word	0x08010dcd
 8010db8:	08010dd5 	.word	0x08010dd5
 8010dbc:	08010ddd 	.word	0x08010ddd
 8010dc0:	08010de5 	.word	0x08010de5
 8010dc4:	08010ded 	.word	0x08010ded
 8010dc8:	08010df5 	.word	0x08010df5
 8010dcc:	2300      	movs	r3, #0
 8010dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dd2:	e086      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010dd4:	2304      	movs	r3, #4
 8010dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dda:	e082      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010ddc:	2308      	movs	r3, #8
 8010dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010de2:	e07e      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010de4:	2310      	movs	r3, #16
 8010de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dea:	e07a      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010dec:	2320      	movs	r3, #32
 8010dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010df2:	e076      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010df4:	2340      	movs	r3, #64	; 0x40
 8010df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010dfa:	e072      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010dfc:	2380      	movs	r3, #128	; 0x80
 8010dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e02:	e06e      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	4a76      	ldr	r2, [pc, #472]	; (8010fe4 <UART_SetConfig+0x6a4>)
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	d130      	bne.n	8010e70 <UART_SetConfig+0x530>
 8010e0e:	4b73      	ldr	r3, [pc, #460]	; (8010fdc <UART_SetConfig+0x69c>)
 8010e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e12:	f003 0307 	and.w	r3, r3, #7
 8010e16:	2b05      	cmp	r3, #5
 8010e18:	d826      	bhi.n	8010e68 <UART_SetConfig+0x528>
 8010e1a:	a201      	add	r2, pc, #4	; (adr r2, 8010e20 <UART_SetConfig+0x4e0>)
 8010e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e20:	08010e39 	.word	0x08010e39
 8010e24:	08010e41 	.word	0x08010e41
 8010e28:	08010e49 	.word	0x08010e49
 8010e2c:	08010e51 	.word	0x08010e51
 8010e30:	08010e59 	.word	0x08010e59
 8010e34:	08010e61 	.word	0x08010e61
 8010e38:	2300      	movs	r3, #0
 8010e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e3e:	e050      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010e40:	2304      	movs	r3, #4
 8010e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e46:	e04c      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010e48:	2308      	movs	r3, #8
 8010e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e4e:	e048      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010e50:	2310      	movs	r3, #16
 8010e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e56:	e044      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010e58:	2320      	movs	r3, #32
 8010e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e5e:	e040      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010e60:	2340      	movs	r3, #64	; 0x40
 8010e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e66:	e03c      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010e68:	2380      	movs	r3, #128	; 0x80
 8010e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010e6e:	e038      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4a5c      	ldr	r2, [pc, #368]	; (8010fe8 <UART_SetConfig+0x6a8>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d130      	bne.n	8010edc <UART_SetConfig+0x59c>
 8010e7a:	4b58      	ldr	r3, [pc, #352]	; (8010fdc <UART_SetConfig+0x69c>)
 8010e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e7e:	f003 0307 	and.w	r3, r3, #7
 8010e82:	2b05      	cmp	r3, #5
 8010e84:	d826      	bhi.n	8010ed4 <UART_SetConfig+0x594>
 8010e86:	a201      	add	r2, pc, #4	; (adr r2, 8010e8c <UART_SetConfig+0x54c>)
 8010e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e8c:	08010ea5 	.word	0x08010ea5
 8010e90:	08010ead 	.word	0x08010ead
 8010e94:	08010eb5 	.word	0x08010eb5
 8010e98:	08010ebd 	.word	0x08010ebd
 8010e9c:	08010ec5 	.word	0x08010ec5
 8010ea0:	08010ecd 	.word	0x08010ecd
 8010ea4:	2302      	movs	r3, #2
 8010ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010eaa:	e01a      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010eac:	2304      	movs	r3, #4
 8010eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010eb2:	e016      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010eb4:	2308      	movs	r3, #8
 8010eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010eba:	e012      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010ebc:	2310      	movs	r3, #16
 8010ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ec2:	e00e      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010ec4:	2320      	movs	r3, #32
 8010ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010eca:	e00a      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010ecc:	2340      	movs	r3, #64	; 0x40
 8010ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ed2:	e006      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010ed4:	2380      	movs	r3, #128	; 0x80
 8010ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010eda:	e002      	b.n	8010ee2 <UART_SetConfig+0x5a2>
 8010edc:	2380      	movs	r3, #128	; 0x80
 8010ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4a40      	ldr	r2, [pc, #256]	; (8010fe8 <UART_SetConfig+0x6a8>)
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	f040 80ef 	bne.w	80110cc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010eee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010ef2:	2b20      	cmp	r3, #32
 8010ef4:	dc46      	bgt.n	8010f84 <UART_SetConfig+0x644>
 8010ef6:	2b02      	cmp	r3, #2
 8010ef8:	f2c0 8081 	blt.w	8010ffe <UART_SetConfig+0x6be>
 8010efc:	3b02      	subs	r3, #2
 8010efe:	2b1e      	cmp	r3, #30
 8010f00:	d87d      	bhi.n	8010ffe <UART_SetConfig+0x6be>
 8010f02:	a201      	add	r2, pc, #4	; (adr r2, 8010f08 <UART_SetConfig+0x5c8>)
 8010f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f08:	08010f8b 	.word	0x08010f8b
 8010f0c:	08010fff 	.word	0x08010fff
 8010f10:	08010f93 	.word	0x08010f93
 8010f14:	08010fff 	.word	0x08010fff
 8010f18:	08010fff 	.word	0x08010fff
 8010f1c:	08010fff 	.word	0x08010fff
 8010f20:	08010fa3 	.word	0x08010fa3
 8010f24:	08010fff 	.word	0x08010fff
 8010f28:	08010fff 	.word	0x08010fff
 8010f2c:	08010fff 	.word	0x08010fff
 8010f30:	08010fff 	.word	0x08010fff
 8010f34:	08010fff 	.word	0x08010fff
 8010f38:	08010fff 	.word	0x08010fff
 8010f3c:	08010fff 	.word	0x08010fff
 8010f40:	08010fb3 	.word	0x08010fb3
 8010f44:	08010fff 	.word	0x08010fff
 8010f48:	08010fff 	.word	0x08010fff
 8010f4c:	08010fff 	.word	0x08010fff
 8010f50:	08010fff 	.word	0x08010fff
 8010f54:	08010fff 	.word	0x08010fff
 8010f58:	08010fff 	.word	0x08010fff
 8010f5c:	08010fff 	.word	0x08010fff
 8010f60:	08010fff 	.word	0x08010fff
 8010f64:	08010fff 	.word	0x08010fff
 8010f68:	08010fff 	.word	0x08010fff
 8010f6c:	08010fff 	.word	0x08010fff
 8010f70:	08010fff 	.word	0x08010fff
 8010f74:	08010fff 	.word	0x08010fff
 8010f78:	08010fff 	.word	0x08010fff
 8010f7c:	08010fff 	.word	0x08010fff
 8010f80:	08010ff1 	.word	0x08010ff1
 8010f84:	2b40      	cmp	r3, #64	; 0x40
 8010f86:	d036      	beq.n	8010ff6 <UART_SetConfig+0x6b6>
 8010f88:	e039      	b.n	8010ffe <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010f8a:	f7fc f963 	bl	800d254 <HAL_RCCEx_GetD3PCLK1Freq>
 8010f8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010f90:	e03b      	b.n	801100a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f92:	f107 0314 	add.w	r3, r7, #20
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7fc f972 	bl	800d280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f9c:	69bb      	ldr	r3, [r7, #24]
 8010f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010fa0:	e033      	b.n	801100a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010fa2:	f107 0308 	add.w	r3, r7, #8
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fc fabe 	bl	800d528 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010fb0:	e02b      	b.n	801100a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fb2:	4b0a      	ldr	r3, [pc, #40]	; (8010fdc <UART_SetConfig+0x69c>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	f003 0320 	and.w	r3, r3, #32
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d009      	beq.n	8010fd2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010fbe:	4b07      	ldr	r3, [pc, #28]	; (8010fdc <UART_SetConfig+0x69c>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	08db      	lsrs	r3, r3, #3
 8010fc4:	f003 0303 	and.w	r3, r3, #3
 8010fc8:	4a08      	ldr	r2, [pc, #32]	; (8010fec <UART_SetConfig+0x6ac>)
 8010fca:	fa22 f303 	lsr.w	r3, r2, r3
 8010fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010fd0:	e01b      	b.n	801100a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8010fd2:	4b06      	ldr	r3, [pc, #24]	; (8010fec <UART_SetConfig+0x6ac>)
 8010fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010fd6:	e018      	b.n	801100a <UART_SetConfig+0x6ca>
 8010fd8:	40011400 	.word	0x40011400
 8010fdc:	58024400 	.word	0x58024400
 8010fe0:	40007800 	.word	0x40007800
 8010fe4:	40007c00 	.word	0x40007c00
 8010fe8:	58000c00 	.word	0x58000c00
 8010fec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010ff0:	4bc4      	ldr	r3, [pc, #784]	; (8011304 <UART_SetConfig+0x9c4>)
 8010ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ff4:	e009      	b.n	801100a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ffc:	e005      	b.n	801100a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8010ffe:	2300      	movs	r3, #0
 8011000:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8011002:	2301      	movs	r3, #1
 8011004:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8011008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100c:	2b00      	cmp	r3, #0
 801100e:	f000 81da 	beq.w	80113c6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011016:	4abc      	ldr	r2, [pc, #752]	; (8011308 <UART_SetConfig+0x9c8>)
 8011018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801101c:	461a      	mov	r2, r3
 801101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011020:	fbb3 f3f2 	udiv	r3, r3, r2
 8011024:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	4613      	mov	r3, r2
 801102c:	005b      	lsls	r3, r3, #1
 801102e:	4413      	add	r3, r2
 8011030:	6a3a      	ldr	r2, [r7, #32]
 8011032:	429a      	cmp	r2, r3
 8011034:	d305      	bcc.n	8011042 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	685b      	ldr	r3, [r3, #4]
 801103a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801103c:	6a3a      	ldr	r2, [r7, #32]
 801103e:	429a      	cmp	r2, r3
 8011040:	d903      	bls.n	801104a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8011042:	2301      	movs	r3, #1
 8011044:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011048:	e1bd      	b.n	80113c6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104c:	4618      	mov	r0, r3
 801104e:	f04f 0100 	mov.w	r1, #0
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011056:	4aac      	ldr	r2, [pc, #688]	; (8011308 <UART_SetConfig+0x9c8>)
 8011058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801105c:	b29a      	uxth	r2, r3
 801105e:	f04f 0300 	mov.w	r3, #0
 8011062:	f7ef f995 	bl	8000390 <__aeabi_uldivmod>
 8011066:	4602      	mov	r2, r0
 8011068:	460b      	mov	r3, r1
 801106a:	4610      	mov	r0, r2
 801106c:	4619      	mov	r1, r3
 801106e:	f04f 0200 	mov.w	r2, #0
 8011072:	f04f 0300 	mov.w	r3, #0
 8011076:	020b      	lsls	r3, r1, #8
 8011078:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801107c:	0202      	lsls	r2, r0, #8
 801107e:	6879      	ldr	r1, [r7, #4]
 8011080:	6849      	ldr	r1, [r1, #4]
 8011082:	0849      	lsrs	r1, r1, #1
 8011084:	4608      	mov	r0, r1
 8011086:	f04f 0100 	mov.w	r1, #0
 801108a:	1814      	adds	r4, r2, r0
 801108c:	eb43 0501 	adc.w	r5, r3, r1
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	461a      	mov	r2, r3
 8011096:	f04f 0300 	mov.w	r3, #0
 801109a:	4620      	mov	r0, r4
 801109c:	4629      	mov	r1, r5
 801109e:	f7ef f977 	bl	8000390 <__aeabi_uldivmod>
 80110a2:	4602      	mov	r2, r0
 80110a4:	460b      	mov	r3, r1
 80110a6:	4613      	mov	r3, r2
 80110a8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80110aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110b0:	d308      	bcc.n	80110c4 <UART_SetConfig+0x784>
 80110b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110b8:	d204      	bcs.n	80110c4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110c0:	60da      	str	r2, [r3, #12]
 80110c2:	e180      	b.n	80113c6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80110c4:	2301      	movs	r3, #1
 80110c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80110ca:	e17c      	b.n	80113c6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	69db      	ldr	r3, [r3, #28]
 80110d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80110d4:	f040 80bf 	bne.w	8011256 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80110d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80110dc:	2b20      	cmp	r3, #32
 80110de:	dc49      	bgt.n	8011174 <UART_SetConfig+0x834>
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	db7c      	blt.n	80111de <UART_SetConfig+0x89e>
 80110e4:	2b20      	cmp	r3, #32
 80110e6:	d87a      	bhi.n	80111de <UART_SetConfig+0x89e>
 80110e8:	a201      	add	r2, pc, #4	; (adr r2, 80110f0 <UART_SetConfig+0x7b0>)
 80110ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ee:	bf00      	nop
 80110f0:	0801117b 	.word	0x0801117b
 80110f4:	08011183 	.word	0x08011183
 80110f8:	080111df 	.word	0x080111df
 80110fc:	080111df 	.word	0x080111df
 8011100:	0801118b 	.word	0x0801118b
 8011104:	080111df 	.word	0x080111df
 8011108:	080111df 	.word	0x080111df
 801110c:	080111df 	.word	0x080111df
 8011110:	0801119b 	.word	0x0801119b
 8011114:	080111df 	.word	0x080111df
 8011118:	080111df 	.word	0x080111df
 801111c:	080111df 	.word	0x080111df
 8011120:	080111df 	.word	0x080111df
 8011124:	080111df 	.word	0x080111df
 8011128:	080111df 	.word	0x080111df
 801112c:	080111df 	.word	0x080111df
 8011130:	080111ab 	.word	0x080111ab
 8011134:	080111df 	.word	0x080111df
 8011138:	080111df 	.word	0x080111df
 801113c:	080111df 	.word	0x080111df
 8011140:	080111df 	.word	0x080111df
 8011144:	080111df 	.word	0x080111df
 8011148:	080111df 	.word	0x080111df
 801114c:	080111df 	.word	0x080111df
 8011150:	080111df 	.word	0x080111df
 8011154:	080111df 	.word	0x080111df
 8011158:	080111df 	.word	0x080111df
 801115c:	080111df 	.word	0x080111df
 8011160:	080111df 	.word	0x080111df
 8011164:	080111df 	.word	0x080111df
 8011168:	080111df 	.word	0x080111df
 801116c:	080111df 	.word	0x080111df
 8011170:	080111d1 	.word	0x080111d1
 8011174:	2b40      	cmp	r3, #64	; 0x40
 8011176:	d02e      	beq.n	80111d6 <UART_SetConfig+0x896>
 8011178:	e031      	b.n	80111de <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801117a:	f7fb f8ff 	bl	800c37c <HAL_RCC_GetPCLK1Freq>
 801117e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011180:	e033      	b.n	80111ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011182:	f7fb f911 	bl	800c3a8 <HAL_RCC_GetPCLK2Freq>
 8011186:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011188:	e02f      	b.n	80111ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801118a:	f107 0314 	add.w	r3, r7, #20
 801118e:	4618      	mov	r0, r3
 8011190:	f7fc f876 	bl	800d280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011194:	69bb      	ldr	r3, [r7, #24]
 8011196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011198:	e027      	b.n	80111ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801119a:	f107 0308 	add.w	r3, r7, #8
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fc f9c2 	bl	800d528 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80111a8:	e01f      	b.n	80111ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80111aa:	4b58      	ldr	r3, [pc, #352]	; (801130c <UART_SetConfig+0x9cc>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f003 0320 	and.w	r3, r3, #32
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d009      	beq.n	80111ca <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80111b6:	4b55      	ldr	r3, [pc, #340]	; (801130c <UART_SetConfig+0x9cc>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	08db      	lsrs	r3, r3, #3
 80111bc:	f003 0303 	and.w	r3, r3, #3
 80111c0:	4a53      	ldr	r2, [pc, #332]	; (8011310 <UART_SetConfig+0x9d0>)
 80111c2:	fa22 f303 	lsr.w	r3, r2, r3
 80111c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80111c8:	e00f      	b.n	80111ea <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80111ca:	4b51      	ldr	r3, [pc, #324]	; (8011310 <UART_SetConfig+0x9d0>)
 80111cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80111ce:	e00c      	b.n	80111ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80111d0:	4b4c      	ldr	r3, [pc, #304]	; (8011304 <UART_SetConfig+0x9c4>)
 80111d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80111d4:	e009      	b.n	80111ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80111d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80111da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80111dc:	e005      	b.n	80111ea <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80111de:	2300      	movs	r3, #0
 80111e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80111e2:	2301      	movs	r3, #1
 80111e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80111e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80111ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f000 80ea 	beq.w	80113c6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f6:	4a44      	ldr	r2, [pc, #272]	; (8011308 <UART_SetConfig+0x9c8>)
 80111f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111fc:	461a      	mov	r2, r3
 80111fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011200:	fbb3 f3f2 	udiv	r3, r3, r2
 8011204:	005a      	lsls	r2, r3, #1
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	085b      	lsrs	r3, r3, #1
 801120c:	441a      	add	r2, r3
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	fbb2 f3f3 	udiv	r3, r2, r3
 8011216:	b29b      	uxth	r3, r3
 8011218:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121c:	2b0f      	cmp	r3, #15
 801121e:	d916      	bls.n	801124e <UART_SetConfig+0x90e>
 8011220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011226:	d212      	bcs.n	801124e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122a:	b29b      	uxth	r3, r3
 801122c:	f023 030f 	bic.w	r3, r3, #15
 8011230:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011234:	085b      	lsrs	r3, r3, #1
 8011236:	b29b      	uxth	r3, r3
 8011238:	f003 0307 	and.w	r3, r3, #7
 801123c:	b29a      	uxth	r2, r3
 801123e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011240:	4313      	orrs	r3, r2
 8011242:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801124a:	60da      	str	r2, [r3, #12]
 801124c:	e0bb      	b.n	80113c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 801124e:	2301      	movs	r3, #1
 8011250:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011254:	e0b7      	b.n	80113c6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801125a:	2b20      	cmp	r3, #32
 801125c:	dc4a      	bgt.n	80112f4 <UART_SetConfig+0x9b4>
 801125e:	2b00      	cmp	r3, #0
 8011260:	f2c0 8086 	blt.w	8011370 <UART_SetConfig+0xa30>
 8011264:	2b20      	cmp	r3, #32
 8011266:	f200 8083 	bhi.w	8011370 <UART_SetConfig+0xa30>
 801126a:	a201      	add	r2, pc, #4	; (adr r2, 8011270 <UART_SetConfig+0x930>)
 801126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011270:	080112fb 	.word	0x080112fb
 8011274:	08011315 	.word	0x08011315
 8011278:	08011371 	.word	0x08011371
 801127c:	08011371 	.word	0x08011371
 8011280:	0801131d 	.word	0x0801131d
 8011284:	08011371 	.word	0x08011371
 8011288:	08011371 	.word	0x08011371
 801128c:	08011371 	.word	0x08011371
 8011290:	0801132d 	.word	0x0801132d
 8011294:	08011371 	.word	0x08011371
 8011298:	08011371 	.word	0x08011371
 801129c:	08011371 	.word	0x08011371
 80112a0:	08011371 	.word	0x08011371
 80112a4:	08011371 	.word	0x08011371
 80112a8:	08011371 	.word	0x08011371
 80112ac:	08011371 	.word	0x08011371
 80112b0:	0801133d 	.word	0x0801133d
 80112b4:	08011371 	.word	0x08011371
 80112b8:	08011371 	.word	0x08011371
 80112bc:	08011371 	.word	0x08011371
 80112c0:	08011371 	.word	0x08011371
 80112c4:	08011371 	.word	0x08011371
 80112c8:	08011371 	.word	0x08011371
 80112cc:	08011371 	.word	0x08011371
 80112d0:	08011371 	.word	0x08011371
 80112d4:	08011371 	.word	0x08011371
 80112d8:	08011371 	.word	0x08011371
 80112dc:	08011371 	.word	0x08011371
 80112e0:	08011371 	.word	0x08011371
 80112e4:	08011371 	.word	0x08011371
 80112e8:	08011371 	.word	0x08011371
 80112ec:	08011371 	.word	0x08011371
 80112f0:	08011363 	.word	0x08011363
 80112f4:	2b40      	cmp	r3, #64	; 0x40
 80112f6:	d037      	beq.n	8011368 <UART_SetConfig+0xa28>
 80112f8:	e03a      	b.n	8011370 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80112fa:	f7fb f83f 	bl	800c37c <HAL_RCC_GetPCLK1Freq>
 80112fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011300:	e03c      	b.n	801137c <UART_SetConfig+0xa3c>
 8011302:	bf00      	nop
 8011304:	003d0900 	.word	0x003d0900
 8011308:	080150cc 	.word	0x080150cc
 801130c:	58024400 	.word	0x58024400
 8011310:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011314:	f7fb f848 	bl	800c3a8 <HAL_RCC_GetPCLK2Freq>
 8011318:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801131a:	e02f      	b.n	801137c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801131c:	f107 0314 	add.w	r3, r7, #20
 8011320:	4618      	mov	r0, r3
 8011322:	f7fb ffad 	bl	800d280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011326:	69bb      	ldr	r3, [r7, #24]
 8011328:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801132a:	e027      	b.n	801137c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801132c:	f107 0308 	add.w	r3, r7, #8
 8011330:	4618      	mov	r0, r3
 8011332:	f7fc f8f9 	bl	800d528 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801133a:	e01f      	b.n	801137c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801133c:	4b2c      	ldr	r3, [pc, #176]	; (80113f0 <UART_SetConfig+0xab0>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f003 0320 	and.w	r3, r3, #32
 8011344:	2b00      	cmp	r3, #0
 8011346:	d009      	beq.n	801135c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011348:	4b29      	ldr	r3, [pc, #164]	; (80113f0 <UART_SetConfig+0xab0>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	08db      	lsrs	r3, r3, #3
 801134e:	f003 0303 	and.w	r3, r3, #3
 8011352:	4a28      	ldr	r2, [pc, #160]	; (80113f4 <UART_SetConfig+0xab4>)
 8011354:	fa22 f303 	lsr.w	r3, r2, r3
 8011358:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801135a:	e00f      	b.n	801137c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 801135c:	4b25      	ldr	r3, [pc, #148]	; (80113f4 <UART_SetConfig+0xab4>)
 801135e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011360:	e00c      	b.n	801137c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011362:	4b25      	ldr	r3, [pc, #148]	; (80113f8 <UART_SetConfig+0xab8>)
 8011364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8011366:	e009      	b.n	801137c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801136c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801136e:	e005      	b.n	801137c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8011370:	2300      	movs	r3, #0
 8011372:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8011374:	2301      	movs	r3, #1
 8011376:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801137a:	bf00      	nop
    }

    if (pclk != 0U)
 801137c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137e:	2b00      	cmp	r3, #0
 8011380:	d021      	beq.n	80113c6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011386:	4a1d      	ldr	r2, [pc, #116]	; (80113fc <UART_SetConfig+0xabc>)
 8011388:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801138c:	461a      	mov	r2, r3
 801138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011390:	fbb3 f2f2 	udiv	r2, r3, r2
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	085b      	lsrs	r3, r3, #1
 801139a:	441a      	add	r2, r3
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	685b      	ldr	r3, [r3, #4]
 80113a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80113a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113aa:	2b0f      	cmp	r3, #15
 80113ac:	d908      	bls.n	80113c0 <UART_SetConfig+0xa80>
 80113ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113b4:	d204      	bcs.n	80113c0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113bc:	60da      	str	r2, [r3, #12]
 80113be:	e002      	b.n	80113c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80113c0:	2301      	movs	r3, #1
 80113c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	2201      	movs	r2, #1
 80113ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2201      	movs	r2, #1
 80113d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2200      	movs	r2, #0
 80113da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2200      	movs	r2, #0
 80113e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80113e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3738      	adds	r7, #56	; 0x38
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bdb0      	pop	{r4, r5, r7, pc}
 80113ee:	bf00      	nop
 80113f0:	58024400 	.word	0x58024400
 80113f4:	03d09000 	.word	0x03d09000
 80113f8:	003d0900 	.word	0x003d0900
 80113fc:	080150cc 	.word	0x080150cc

08011400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801140c:	f003 0301 	and.w	r3, r3, #1
 8011410:	2b00      	cmp	r3, #0
 8011412:	d00a      	beq.n	801142a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	685b      	ldr	r3, [r3, #4]
 801141a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	430a      	orrs	r2, r1
 8011428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801142e:	f003 0302 	and.w	r3, r3, #2
 8011432:	2b00      	cmp	r3, #0
 8011434:	d00a      	beq.n	801144c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	685b      	ldr	r3, [r3, #4]
 801143c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	430a      	orrs	r2, r1
 801144a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011450:	f003 0304 	and.w	r3, r3, #4
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00a      	beq.n	801146e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	430a      	orrs	r2, r1
 801146c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011472:	f003 0308 	and.w	r3, r3, #8
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00a      	beq.n	8011490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	430a      	orrs	r2, r1
 801148e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011494:	f003 0310 	and.w	r3, r3, #16
 8011498:	2b00      	cmp	r3, #0
 801149a:	d00a      	beq.n	80114b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	689b      	ldr	r3, [r3, #8]
 80114a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	430a      	orrs	r2, r1
 80114b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114b6:	f003 0320 	and.w	r3, r3, #32
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00a      	beq.n	80114d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	689b      	ldr	r3, [r3, #8]
 80114c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	430a      	orrs	r2, r1
 80114d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d01a      	beq.n	8011516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	430a      	orrs	r2, r1
 80114f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80114fe:	d10a      	bne.n	8011516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	430a      	orrs	r2, r1
 8011514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801151e:	2b00      	cmp	r3, #0
 8011520:	d00a      	beq.n	8011538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	430a      	orrs	r2, r1
 8011536:	605a      	str	r2, [r3, #4]
  }
}
 8011538:	bf00      	nop
 801153a:	370c      	adds	r7, #12
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr

08011544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b086      	sub	sp, #24
 8011548:	af02      	add	r7, sp, #8
 801154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2200      	movs	r2, #0
 8011550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011554:	f7f4 fbaa 	bl	8005cac <HAL_GetTick>
 8011558:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f003 0308 	and.w	r3, r3, #8
 8011564:	2b08      	cmp	r3, #8
 8011566:	d10e      	bne.n	8011586 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801156c:	9300      	str	r3, [sp, #0]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2200      	movs	r2, #0
 8011572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 f82f 	bl	80115da <UART_WaitOnFlagUntilTimeout>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011582:	2303      	movs	r3, #3
 8011584:	e025      	b.n	80115d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f003 0304 	and.w	r3, r3, #4
 8011590:	2b04      	cmp	r3, #4
 8011592:	d10e      	bne.n	80115b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011598:	9300      	str	r3, [sp, #0]
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2200      	movs	r2, #0
 801159e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f000 f819 	bl	80115da <UART_WaitOnFlagUntilTimeout>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d001      	beq.n	80115b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115ae:	2303      	movs	r3, #3
 80115b0:	e00f      	b.n	80115d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2220      	movs	r2, #32
 80115b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2220      	movs	r2, #32
 80115be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2200      	movs	r2, #0
 80115c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	2200      	movs	r2, #0
 80115cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80115d0:	2300      	movs	r3, #0
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3710      	adds	r7, #16
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}

080115da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80115da:	b580      	push	{r7, lr}
 80115dc:	b084      	sub	sp, #16
 80115de:	af00      	add	r7, sp, #0
 80115e0:	60f8      	str	r0, [r7, #12]
 80115e2:	60b9      	str	r1, [r7, #8]
 80115e4:	603b      	str	r3, [r7, #0]
 80115e6:	4613      	mov	r3, r2
 80115e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80115ea:	e062      	b.n	80116b2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f2:	d05e      	beq.n	80116b2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80115f4:	f7f4 fb5a 	bl	8005cac <HAL_GetTick>
 80115f8:	4602      	mov	r2, r0
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	1ad3      	subs	r3, r2, r3
 80115fe:	69ba      	ldr	r2, [r7, #24]
 8011600:	429a      	cmp	r2, r3
 8011602:	d302      	bcc.n	801160a <UART_WaitOnFlagUntilTimeout+0x30>
 8011604:	69bb      	ldr	r3, [r7, #24]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d11d      	bne.n	8011646 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011618:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	689a      	ldr	r2, [r3, #8]
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f022 0201 	bic.w	r2, r2, #1
 8011628:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2220      	movs	r2, #32
 801162e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	2220      	movs	r2, #32
 8011636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2200      	movs	r2, #0
 801163e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8011642:	2303      	movs	r3, #3
 8011644:	e045      	b.n	80116d2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f003 0304 	and.w	r3, r3, #4
 8011650:	2b00      	cmp	r3, #0
 8011652:	d02e      	beq.n	80116b2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	69db      	ldr	r3, [r3, #28]
 801165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801165e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011662:	d126      	bne.n	80116b2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801166c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801167c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	689a      	ldr	r2, [r3, #8]
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	f022 0201 	bic.w	r2, r2, #1
 801168c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2220      	movs	r2, #32
 8011692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2220      	movs	r2, #32
 801169a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2220      	movs	r2, #32
 80116a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2200      	movs	r2, #0
 80116aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80116ae:	2303      	movs	r3, #3
 80116b0:	e00f      	b.n	80116d2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	69da      	ldr	r2, [r3, #28]
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	4013      	ands	r3, r2
 80116bc:	68ba      	ldr	r2, [r7, #8]
 80116be:	429a      	cmp	r2, r3
 80116c0:	bf0c      	ite	eq
 80116c2:	2301      	moveq	r3, #1
 80116c4:	2300      	movne	r3, #0
 80116c6:	b2db      	uxtb	r3, r3
 80116c8:	461a      	mov	r2, r3
 80116ca:	79fb      	ldrb	r3, [r7, #7]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d08d      	beq.n	80115ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80116d0:	2300      	movs	r3, #0
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3710      	adds	r7, #16
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
	...

080116dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	60f8      	str	r0, [r7, #12]
 80116e4:	60b9      	str	r1, [r7, #8]
 80116e6:	4613      	mov	r3, r2
 80116e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	68ba      	ldr	r2, [r7, #8]
 80116ee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	88fa      	ldrh	r2, [r7, #6]
 80116f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2200      	movs	r2, #0
 80116fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	2222      	movs	r2, #34	; 0x22
 8011704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801170c:	2b00      	cmp	r3, #0
 801170e:	d02c      	beq.n	801176a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011714:	4a25      	ldr	r2, [pc, #148]	; (80117ac <UART_Start_Receive_DMA+0xd0>)
 8011716:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801171c:	4a24      	ldr	r2, [pc, #144]	; (80117b0 <UART_Start_Receive_DMA+0xd4>)
 801171e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011724:	4a23      	ldr	r2, [pc, #140]	; (80117b4 <UART_Start_Receive_DMA+0xd8>)
 8011726:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801172c:	2200      	movs	r2, #0
 801172e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	3324      	adds	r3, #36	; 0x24
 801173a:	4619      	mov	r1, r3
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011740:	461a      	mov	r2, r3
 8011742:	88fb      	ldrh	r3, [r7, #6]
 8011744:	f7f4 ff5a 	bl	80065fc <HAL_DMA_Start_IT>
 8011748:	4603      	mov	r3, r0
 801174a:	2b00      	cmp	r3, #0
 801174c:	d00d      	beq.n	801176a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2210      	movs	r2, #16
 8011752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2200      	movs	r2, #0
 801175a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2220      	movs	r2, #32
 8011762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8011766:	2301      	movs	r3, #1
 8011768:	e01c      	b.n	80117a4 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2200      	movs	r2, #0
 801176e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011780:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	689a      	ldr	r2, [r3, #8]
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f042 0201 	orr.w	r2, r2, #1
 8011790:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	689a      	ldr	r2, [r3, #8]
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117a0:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80117a2:	2300      	movs	r3, #0
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3710      	adds	r7, #16
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}
 80117ac:	080118c5 	.word	0x080118c5
 80117b0:	0801195b 	.word	0x0801195b
 80117b4:	08011993 	.word	0x08011993

080117b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80117ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	689a      	ldr	r2, [r3, #8]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80117de:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2220      	movs	r2, #32
 80117e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80117e8:	bf00      	nop
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801180a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	6899      	ldr	r1, [r3, #8]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	4b0f      	ldr	r3, [pc, #60]	; (8011854 <UART_EndRxTransfer+0x60>)
 8011818:	400b      	ands	r3, r1
 801181a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011820:	2b01      	cmp	r3, #1
 8011822:	d107      	bne.n	8011834 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f022 0210 	bic.w	r2, r2, #16
 8011832:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2220      	movs	r2, #32
 8011838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2200      	movs	r2, #0
 8011840:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2200      	movs	r2, #0
 8011846:	671a      	str	r2, [r3, #112]	; 0x70
}
 8011848:	bf00      	nop
 801184a:	370c      	adds	r7, #12
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr
 8011854:	effffffe 	.word	0xeffffffe

08011858 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b084      	sub	sp, #16
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011864:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	69db      	ldr	r3, [r3, #28]
 801186a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801186e:	d014      	beq.n	801189a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2200      	movs	r2, #0
 8011874:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	689a      	ldr	r2, [r3, #8]
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011886:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011896:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011898:	e002      	b.n	80118a0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 801189a:	68f8      	ldr	r0, [r7, #12]
 801189c:	f7ff f81c 	bl	80108d8 <HAL_UART_TxCpltCallback>
}
 80118a0:	bf00      	nop
 80118a2:	3710      	adds	r7, #16
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}

080118a8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b084      	sub	sp, #16
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118b4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80118b6:	68f8      	ldr	r0, [r7, #12]
 80118b8:	f7ff f818 	bl	80108ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80118bc:	bf00      	nop
 80118be:	3710      	adds	r7, #16
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}

080118c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118d0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	69db      	ldr	r3, [r3, #28]
 80118d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80118da:	d02b      	beq.n	8011934 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2200      	movs	r2, #0
 80118e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80118f2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	689a      	ldr	r2, [r3, #8]
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f022 0201 	bic.w	r2, r2, #1
 8011902:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	689a      	ldr	r2, [r3, #8]
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011912:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2220      	movs	r2, #32
 8011918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011920:	2b01      	cmp	r3, #1
 8011922:	d107      	bne.n	8011934 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	681a      	ldr	r2, [r3, #0]
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	f022 0210 	bic.w	r2, r2, #16
 8011932:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011938:	2b01      	cmp	r3, #1
 801193a:	d107      	bne.n	801194c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011942:	4619      	mov	r1, r3
 8011944:	68f8      	ldr	r0, [r7, #12]
 8011946:	f7fe ffef 	bl	8010928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801194a:	e002      	b.n	8011952 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 801194c:	68f8      	ldr	r0, [r7, #12]
 801194e:	f7f3 fa67 	bl	8004e20 <HAL_UART_RxCpltCallback>
}
 8011952:	bf00      	nop
 8011954:	3710      	adds	r7, #16
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}

0801195a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801195a:	b580      	push	{r7, lr}
 801195c:	b084      	sub	sp, #16
 801195e:	af00      	add	r7, sp, #0
 8011960:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011966:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801196c:	2b01      	cmp	r3, #1
 801196e:	d109      	bne.n	8011984 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011976:	085b      	lsrs	r3, r3, #1
 8011978:	b29b      	uxth	r3, r3
 801197a:	4619      	mov	r1, r3
 801197c:	68f8      	ldr	r0, [r7, #12]
 801197e:	f7fe ffd3 	bl	8010928 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011982:	e002      	b.n	801198a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f7fe ffbb 	bl	8010900 <HAL_UART_RxHalfCpltCallback>
}
 801198a:	bf00      	nop
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}

08011992 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011992:	b580      	push	{r7, lr}
 8011994:	b086      	sub	sp, #24
 8011996:	af00      	add	r7, sp, #0
 8011998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801199e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	689b      	ldr	r3, [r3, #8]
 80119b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119ba:	2b80      	cmp	r3, #128	; 0x80
 80119bc:	d109      	bne.n	80119d2 <UART_DMAError+0x40>
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	2b21      	cmp	r3, #33	; 0x21
 80119c2:	d106      	bne.n	80119d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	2200      	movs	r2, #0
 80119c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80119cc:	6978      	ldr	r0, [r7, #20]
 80119ce:	f7ff fef3 	bl	80117b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119dc:	2b40      	cmp	r3, #64	; 0x40
 80119de:	d109      	bne.n	80119f4 <UART_DMAError+0x62>
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2b22      	cmp	r3, #34	; 0x22
 80119e4:	d106      	bne.n	80119f4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	2200      	movs	r2, #0
 80119ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80119ee:	6978      	ldr	r0, [r7, #20]
 80119f0:	f7ff ff00 	bl	80117f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119fa:	f043 0210 	orr.w	r2, r3, #16
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a04:	6978      	ldr	r0, [r7, #20]
 8011a06:	f7fe ff85 	bl	8010914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a0a:	bf00      	nop
 8011a0c:	3718      	adds	r7, #24
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b084      	sub	sp, #16
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	2200      	movs	r2, #0
 8011a24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f7fe ff6f 	bl	8010914 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a36:	bf00      	nop
 8011a38:	3710      	adds	r7, #16
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}

08011a3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011a3e:	b580      	push	{r7, lr}
 8011a40:	b082      	sub	sp, #8
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011a54:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2220      	movs	r2, #32
 8011a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2200      	movs	r2, #0
 8011a62:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f7fe ff37 	bl	80108d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a6a:	bf00      	nop
 8011a6c:	3708      	adds	r7, #8
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011a72:	b480      	push	{r7}
 8011a74:	b083      	sub	sp, #12
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011a7a:	bf00      	nop
 8011a7c:	370c      	adds	r7, #12
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a84:	4770      	bx	lr

08011a86 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011a86:	b480      	push	{r7}
 8011a88:	b083      	sub	sp, #12
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011a8e:	bf00      	nop
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011a9a:	b480      	push	{r7}
 8011a9c:	b083      	sub	sp, #12
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011aa2:	bf00      	nop
 8011aa4:	370c      	adds	r7, #12
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr

08011aae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011aae:	b480      	push	{r7}
 8011ab0:	b085      	sub	sp, #20
 8011ab2:	af00      	add	r7, sp, #0
 8011ab4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011abc:	2b01      	cmp	r3, #1
 8011abe:	d101      	bne.n	8011ac4 <HAL_UARTEx_DisableFifoMode+0x16>
 8011ac0:	2302      	movs	r3, #2
 8011ac2:	e027      	b.n	8011b14 <HAL_UARTEx_DisableFifoMode+0x66>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2224      	movs	r2, #36	; 0x24
 8011ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	f022 0201 	bic.w	r2, r2, #1
 8011aea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011af2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	2200      	movs	r2, #0
 8011af8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	68fa      	ldr	r2, [r7, #12]
 8011b00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2220      	movs	r2, #32
 8011b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011b12:	2300      	movs	r3, #0
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	3714      	adds	r7, #20
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr

08011b20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b084      	sub	sp, #16
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
 8011b28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	d101      	bne.n	8011b38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011b34:	2302      	movs	r3, #2
 8011b36:	e02d      	b.n	8011b94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2224      	movs	r2, #36	; 0x24
 8011b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f022 0201 	bic.w	r2, r2, #1
 8011b5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	689b      	ldr	r3, [r3, #8]
 8011b66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	683a      	ldr	r2, [r7, #0]
 8011b70:	430a      	orrs	r2, r1
 8011b72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f000 f84f 	bl	8011c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	68fa      	ldr	r2, [r7, #12]
 8011b80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2220      	movs	r2, #32
 8011b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011b92:	2300      	movs	r3, #0
}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3710      	adds	r7, #16
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}

08011b9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	d101      	bne.n	8011bb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011bb0:	2302      	movs	r3, #2
 8011bb2:	e02d      	b.n	8011c10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	2201      	movs	r2, #1
 8011bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2224      	movs	r2, #36	; 0x24
 8011bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	681a      	ldr	r2, [r3, #0]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f022 0201 	bic.w	r2, r2, #1
 8011bda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	689b      	ldr	r3, [r3, #8]
 8011be2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	683a      	ldr	r2, [r7, #0]
 8011bec:	430a      	orrs	r2, r1
 8011bee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011bf0:	6878      	ldr	r0, [r7, #4]
 8011bf2:	f000 f811 	bl	8011c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	68fa      	ldr	r2, [r7, #12]
 8011bfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2220      	movs	r2, #32
 8011c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011c0e:	2300      	movs	r3, #0
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3710      	adds	r7, #16
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}

08011c18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b085      	sub	sp, #20
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d108      	bne.n	8011c3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	2201      	movs	r2, #1
 8011c34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011c38:	e031      	b.n	8011c9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011c3a:	2310      	movs	r3, #16
 8011c3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011c3e:	2310      	movs	r3, #16
 8011c40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	689b      	ldr	r3, [r3, #8]
 8011c48:	0e5b      	lsrs	r3, r3, #25
 8011c4a:	b2db      	uxtb	r3, r3
 8011c4c:	f003 0307 	and.w	r3, r3, #7
 8011c50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	0f5b      	lsrs	r3, r3, #29
 8011c5a:	b2db      	uxtb	r3, r3
 8011c5c:	f003 0307 	and.w	r3, r3, #7
 8011c60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011c62:	7bbb      	ldrb	r3, [r7, #14]
 8011c64:	7b3a      	ldrb	r2, [r7, #12]
 8011c66:	4911      	ldr	r1, [pc, #68]	; (8011cac <UARTEx_SetNbDataToProcess+0x94>)
 8011c68:	5c8a      	ldrb	r2, [r1, r2]
 8011c6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011c6e:	7b3a      	ldrb	r2, [r7, #12]
 8011c70:	490f      	ldr	r1, [pc, #60]	; (8011cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8011c72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011c74:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011c80:	7bfb      	ldrb	r3, [r7, #15]
 8011c82:	7b7a      	ldrb	r2, [r7, #13]
 8011c84:	4909      	ldr	r1, [pc, #36]	; (8011cac <UARTEx_SetNbDataToProcess+0x94>)
 8011c86:	5c8a      	ldrb	r2, [r1, r2]
 8011c88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011c8c:	7b7a      	ldrb	r2, [r7, #13]
 8011c8e:	4908      	ldr	r1, [pc, #32]	; (8011cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8011c90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011c92:	fb93 f3f2 	sdiv	r3, r3, r2
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011c9e:	bf00      	nop
 8011ca0:	3714      	adds	r7, #20
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr
 8011caa:	bf00      	nop
 8011cac:	080150e4 	.word	0x080150e4
 8011cb0:	080150ec 	.word	0x080150ec

08011cb4 <__errno>:
 8011cb4:	4b01      	ldr	r3, [pc, #4]	; (8011cbc <__errno+0x8>)
 8011cb6:	6818      	ldr	r0, [r3, #0]
 8011cb8:	4770      	bx	lr
 8011cba:	bf00      	nop
 8011cbc:	24000024 	.word	0x24000024

08011cc0 <__libc_init_array>:
 8011cc0:	b570      	push	{r4, r5, r6, lr}
 8011cc2:	4d0d      	ldr	r5, [pc, #52]	; (8011cf8 <__libc_init_array+0x38>)
 8011cc4:	4c0d      	ldr	r4, [pc, #52]	; (8011cfc <__libc_init_array+0x3c>)
 8011cc6:	1b64      	subs	r4, r4, r5
 8011cc8:	10a4      	asrs	r4, r4, #2
 8011cca:	2600      	movs	r6, #0
 8011ccc:	42a6      	cmp	r6, r4
 8011cce:	d109      	bne.n	8011ce4 <__libc_init_array+0x24>
 8011cd0:	4d0b      	ldr	r5, [pc, #44]	; (8011d00 <__libc_init_array+0x40>)
 8011cd2:	4c0c      	ldr	r4, [pc, #48]	; (8011d04 <__libc_init_array+0x44>)
 8011cd4:	f003 f992 	bl	8014ffc <_init>
 8011cd8:	1b64      	subs	r4, r4, r5
 8011cda:	10a4      	asrs	r4, r4, #2
 8011cdc:	2600      	movs	r6, #0
 8011cde:	42a6      	cmp	r6, r4
 8011ce0:	d105      	bne.n	8011cee <__libc_init_array+0x2e>
 8011ce2:	bd70      	pop	{r4, r5, r6, pc}
 8011ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ce8:	4798      	blx	r3
 8011cea:	3601      	adds	r6, #1
 8011cec:	e7ee      	b.n	8011ccc <__libc_init_array+0xc>
 8011cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cf2:	4798      	blx	r3
 8011cf4:	3601      	adds	r6, #1
 8011cf6:	e7f2      	b.n	8011cde <__libc_init_array+0x1e>
 8011cf8:	08015588 	.word	0x08015588
 8011cfc:	08015588 	.word	0x08015588
 8011d00:	08015588 	.word	0x08015588
 8011d04:	0801558c 	.word	0x0801558c

08011d08 <memset>:
 8011d08:	4402      	add	r2, r0
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	4293      	cmp	r3, r2
 8011d0e:	d100      	bne.n	8011d12 <memset+0xa>
 8011d10:	4770      	bx	lr
 8011d12:	f803 1b01 	strb.w	r1, [r3], #1
 8011d16:	e7f9      	b.n	8011d0c <memset+0x4>

08011d18 <__cvt>:
 8011d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d1a:	ed2d 8b02 	vpush	{d8}
 8011d1e:	eeb0 8b40 	vmov.f64	d8, d0
 8011d22:	b085      	sub	sp, #20
 8011d24:	4617      	mov	r7, r2
 8011d26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011d28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011d2a:	ee18 2a90 	vmov	r2, s17
 8011d2e:	f025 0520 	bic.w	r5, r5, #32
 8011d32:	2a00      	cmp	r2, #0
 8011d34:	bfb6      	itet	lt
 8011d36:	222d      	movlt	r2, #45	; 0x2d
 8011d38:	2200      	movge	r2, #0
 8011d3a:	eeb1 8b40 	vneglt.f64	d8, d0
 8011d3e:	2d46      	cmp	r5, #70	; 0x46
 8011d40:	460c      	mov	r4, r1
 8011d42:	701a      	strb	r2, [r3, #0]
 8011d44:	d004      	beq.n	8011d50 <__cvt+0x38>
 8011d46:	2d45      	cmp	r5, #69	; 0x45
 8011d48:	d100      	bne.n	8011d4c <__cvt+0x34>
 8011d4a:	3401      	adds	r4, #1
 8011d4c:	2102      	movs	r1, #2
 8011d4e:	e000      	b.n	8011d52 <__cvt+0x3a>
 8011d50:	2103      	movs	r1, #3
 8011d52:	ab03      	add	r3, sp, #12
 8011d54:	9301      	str	r3, [sp, #4]
 8011d56:	ab02      	add	r3, sp, #8
 8011d58:	9300      	str	r3, [sp, #0]
 8011d5a:	4622      	mov	r2, r4
 8011d5c:	4633      	mov	r3, r6
 8011d5e:	eeb0 0b48 	vmov.f64	d0, d8
 8011d62:	f000 fdf5 	bl	8012950 <_dtoa_r>
 8011d66:	2d47      	cmp	r5, #71	; 0x47
 8011d68:	d109      	bne.n	8011d7e <__cvt+0x66>
 8011d6a:	07fb      	lsls	r3, r7, #31
 8011d6c:	d407      	bmi.n	8011d7e <__cvt+0x66>
 8011d6e:	9b03      	ldr	r3, [sp, #12]
 8011d70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011d72:	1a1b      	subs	r3, r3, r0
 8011d74:	6013      	str	r3, [r2, #0]
 8011d76:	b005      	add	sp, #20
 8011d78:	ecbd 8b02 	vpop	{d8}
 8011d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d7e:	2d46      	cmp	r5, #70	; 0x46
 8011d80:	eb00 0204 	add.w	r2, r0, r4
 8011d84:	d10c      	bne.n	8011da0 <__cvt+0x88>
 8011d86:	7803      	ldrb	r3, [r0, #0]
 8011d88:	2b30      	cmp	r3, #48	; 0x30
 8011d8a:	d107      	bne.n	8011d9c <__cvt+0x84>
 8011d8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d94:	bf1c      	itt	ne
 8011d96:	f1c4 0401 	rsbne	r4, r4, #1
 8011d9a:	6034      	strne	r4, [r6, #0]
 8011d9c:	6833      	ldr	r3, [r6, #0]
 8011d9e:	441a      	add	r2, r3
 8011da0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011da8:	bf08      	it	eq
 8011daa:	9203      	streq	r2, [sp, #12]
 8011dac:	2130      	movs	r1, #48	; 0x30
 8011dae:	9b03      	ldr	r3, [sp, #12]
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d2dc      	bcs.n	8011d6e <__cvt+0x56>
 8011db4:	1c5c      	adds	r4, r3, #1
 8011db6:	9403      	str	r4, [sp, #12]
 8011db8:	7019      	strb	r1, [r3, #0]
 8011dba:	e7f8      	b.n	8011dae <__cvt+0x96>

08011dbc <__exponent>:
 8011dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2900      	cmp	r1, #0
 8011dc2:	bfb8      	it	lt
 8011dc4:	4249      	neglt	r1, r1
 8011dc6:	f803 2b02 	strb.w	r2, [r3], #2
 8011dca:	bfb4      	ite	lt
 8011dcc:	222d      	movlt	r2, #45	; 0x2d
 8011dce:	222b      	movge	r2, #43	; 0x2b
 8011dd0:	2909      	cmp	r1, #9
 8011dd2:	7042      	strb	r2, [r0, #1]
 8011dd4:	dd2a      	ble.n	8011e2c <__exponent+0x70>
 8011dd6:	f10d 0407 	add.w	r4, sp, #7
 8011dda:	46a4      	mov	ip, r4
 8011ddc:	270a      	movs	r7, #10
 8011dde:	46a6      	mov	lr, r4
 8011de0:	460a      	mov	r2, r1
 8011de2:	fb91 f6f7 	sdiv	r6, r1, r7
 8011de6:	fb07 1516 	mls	r5, r7, r6, r1
 8011dea:	3530      	adds	r5, #48	; 0x30
 8011dec:	2a63      	cmp	r2, #99	; 0x63
 8011dee:	f104 34ff 	add.w	r4, r4, #4294967295
 8011df2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011df6:	4631      	mov	r1, r6
 8011df8:	dcf1      	bgt.n	8011dde <__exponent+0x22>
 8011dfa:	3130      	adds	r1, #48	; 0x30
 8011dfc:	f1ae 0502 	sub.w	r5, lr, #2
 8011e00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011e04:	1c44      	adds	r4, r0, #1
 8011e06:	4629      	mov	r1, r5
 8011e08:	4561      	cmp	r1, ip
 8011e0a:	d30a      	bcc.n	8011e22 <__exponent+0x66>
 8011e0c:	f10d 0209 	add.w	r2, sp, #9
 8011e10:	eba2 020e 	sub.w	r2, r2, lr
 8011e14:	4565      	cmp	r5, ip
 8011e16:	bf88      	it	hi
 8011e18:	2200      	movhi	r2, #0
 8011e1a:	4413      	add	r3, r2
 8011e1c:	1a18      	subs	r0, r3, r0
 8011e1e:	b003      	add	sp, #12
 8011e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011e2a:	e7ed      	b.n	8011e08 <__exponent+0x4c>
 8011e2c:	2330      	movs	r3, #48	; 0x30
 8011e2e:	3130      	adds	r1, #48	; 0x30
 8011e30:	7083      	strb	r3, [r0, #2]
 8011e32:	70c1      	strb	r1, [r0, #3]
 8011e34:	1d03      	adds	r3, r0, #4
 8011e36:	e7f1      	b.n	8011e1c <__exponent+0x60>

08011e38 <_printf_float>:
 8011e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e3c:	b08b      	sub	sp, #44	; 0x2c
 8011e3e:	460c      	mov	r4, r1
 8011e40:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011e44:	4616      	mov	r6, r2
 8011e46:	461f      	mov	r7, r3
 8011e48:	4605      	mov	r5, r0
 8011e4a:	f001 fcbb 	bl	80137c4 <_localeconv_r>
 8011e4e:	f8d0 b000 	ldr.w	fp, [r0]
 8011e52:	4658      	mov	r0, fp
 8011e54:	f7ee fa44 	bl	80002e0 <strlen>
 8011e58:	2300      	movs	r3, #0
 8011e5a:	9308      	str	r3, [sp, #32]
 8011e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8011e60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011e64:	6822      	ldr	r2, [r4, #0]
 8011e66:	3307      	adds	r3, #7
 8011e68:	f023 0307 	bic.w	r3, r3, #7
 8011e6c:	f103 0108 	add.w	r1, r3, #8
 8011e70:	f8c8 1000 	str.w	r1, [r8]
 8011e74:	4682      	mov	sl, r0
 8011e76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011e7a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011e7e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80120e0 <_printf_float+0x2a8>
 8011e82:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011e86:	eeb0 6bc0 	vabs.f64	d6, d0
 8011e8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8011e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e92:	dd24      	ble.n	8011ede <_printf_float+0xa6>
 8011e94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9c:	d502      	bpl.n	8011ea4 <_printf_float+0x6c>
 8011e9e:	232d      	movs	r3, #45	; 0x2d
 8011ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ea4:	4b90      	ldr	r3, [pc, #576]	; (80120e8 <_printf_float+0x2b0>)
 8011ea6:	4891      	ldr	r0, [pc, #580]	; (80120ec <_printf_float+0x2b4>)
 8011ea8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011eac:	bf94      	ite	ls
 8011eae:	4698      	movls	r8, r3
 8011eb0:	4680      	movhi	r8, r0
 8011eb2:	2303      	movs	r3, #3
 8011eb4:	6123      	str	r3, [r4, #16]
 8011eb6:	f022 0204 	bic.w	r2, r2, #4
 8011eba:	2300      	movs	r3, #0
 8011ebc:	6022      	str	r2, [r4, #0]
 8011ebe:	9304      	str	r3, [sp, #16]
 8011ec0:	9700      	str	r7, [sp, #0]
 8011ec2:	4633      	mov	r3, r6
 8011ec4:	aa09      	add	r2, sp, #36	; 0x24
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f000 f9d3 	bl	8012274 <_printf_common>
 8011ece:	3001      	adds	r0, #1
 8011ed0:	f040 808a 	bne.w	8011fe8 <_printf_float+0x1b0>
 8011ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed8:	b00b      	add	sp, #44	; 0x2c
 8011eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ede:	eeb4 0b40 	vcmp.f64	d0, d0
 8011ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee6:	d709      	bvc.n	8011efc <_printf_float+0xc4>
 8011ee8:	ee10 3a90 	vmov	r3, s1
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	bfbc      	itt	lt
 8011ef0:	232d      	movlt	r3, #45	; 0x2d
 8011ef2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011ef6:	487e      	ldr	r0, [pc, #504]	; (80120f0 <_printf_float+0x2b8>)
 8011ef8:	4b7e      	ldr	r3, [pc, #504]	; (80120f4 <_printf_float+0x2bc>)
 8011efa:	e7d5      	b.n	8011ea8 <_printf_float+0x70>
 8011efc:	6863      	ldr	r3, [r4, #4]
 8011efe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011f02:	9104      	str	r1, [sp, #16]
 8011f04:	1c59      	adds	r1, r3, #1
 8011f06:	d13c      	bne.n	8011f82 <_printf_float+0x14a>
 8011f08:	2306      	movs	r3, #6
 8011f0a:	6063      	str	r3, [r4, #4]
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	9303      	str	r3, [sp, #12]
 8011f10:	ab08      	add	r3, sp, #32
 8011f12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011f1a:	ab07      	add	r3, sp, #28
 8011f1c:	6861      	ldr	r1, [r4, #4]
 8011f1e:	9300      	str	r3, [sp, #0]
 8011f20:	6022      	str	r2, [r4, #0]
 8011f22:	f10d 031b 	add.w	r3, sp, #27
 8011f26:	4628      	mov	r0, r5
 8011f28:	f7ff fef6 	bl	8011d18 <__cvt>
 8011f2c:	9b04      	ldr	r3, [sp, #16]
 8011f2e:	9907      	ldr	r1, [sp, #28]
 8011f30:	2b47      	cmp	r3, #71	; 0x47
 8011f32:	4680      	mov	r8, r0
 8011f34:	d108      	bne.n	8011f48 <_printf_float+0x110>
 8011f36:	1cc8      	adds	r0, r1, #3
 8011f38:	db02      	blt.n	8011f40 <_printf_float+0x108>
 8011f3a:	6863      	ldr	r3, [r4, #4]
 8011f3c:	4299      	cmp	r1, r3
 8011f3e:	dd41      	ble.n	8011fc4 <_printf_float+0x18c>
 8011f40:	f1a9 0902 	sub.w	r9, r9, #2
 8011f44:	fa5f f989 	uxtb.w	r9, r9
 8011f48:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011f4c:	d820      	bhi.n	8011f90 <_printf_float+0x158>
 8011f4e:	3901      	subs	r1, #1
 8011f50:	464a      	mov	r2, r9
 8011f52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011f56:	9107      	str	r1, [sp, #28]
 8011f58:	f7ff ff30 	bl	8011dbc <__exponent>
 8011f5c:	9a08      	ldr	r2, [sp, #32]
 8011f5e:	9004      	str	r0, [sp, #16]
 8011f60:	1813      	adds	r3, r2, r0
 8011f62:	2a01      	cmp	r2, #1
 8011f64:	6123      	str	r3, [r4, #16]
 8011f66:	dc02      	bgt.n	8011f6e <_printf_float+0x136>
 8011f68:	6822      	ldr	r2, [r4, #0]
 8011f6a:	07d2      	lsls	r2, r2, #31
 8011f6c:	d501      	bpl.n	8011f72 <_printf_float+0x13a>
 8011f6e:	3301      	adds	r3, #1
 8011f70:	6123      	str	r3, [r4, #16]
 8011f72:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d0a2      	beq.n	8011ec0 <_printf_float+0x88>
 8011f7a:	232d      	movs	r3, #45	; 0x2d
 8011f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f80:	e79e      	b.n	8011ec0 <_printf_float+0x88>
 8011f82:	9904      	ldr	r1, [sp, #16]
 8011f84:	2947      	cmp	r1, #71	; 0x47
 8011f86:	d1c1      	bne.n	8011f0c <_printf_float+0xd4>
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d1bf      	bne.n	8011f0c <_printf_float+0xd4>
 8011f8c:	2301      	movs	r3, #1
 8011f8e:	e7bc      	b.n	8011f0a <_printf_float+0xd2>
 8011f90:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011f94:	d118      	bne.n	8011fc8 <_printf_float+0x190>
 8011f96:	2900      	cmp	r1, #0
 8011f98:	6863      	ldr	r3, [r4, #4]
 8011f9a:	dd0b      	ble.n	8011fb4 <_printf_float+0x17c>
 8011f9c:	6121      	str	r1, [r4, #16]
 8011f9e:	b913      	cbnz	r3, 8011fa6 <_printf_float+0x16e>
 8011fa0:	6822      	ldr	r2, [r4, #0]
 8011fa2:	07d0      	lsls	r0, r2, #31
 8011fa4:	d502      	bpl.n	8011fac <_printf_float+0x174>
 8011fa6:	3301      	adds	r3, #1
 8011fa8:	440b      	add	r3, r1
 8011faa:	6123      	str	r3, [r4, #16]
 8011fac:	2300      	movs	r3, #0
 8011fae:	65a1      	str	r1, [r4, #88]	; 0x58
 8011fb0:	9304      	str	r3, [sp, #16]
 8011fb2:	e7de      	b.n	8011f72 <_printf_float+0x13a>
 8011fb4:	b913      	cbnz	r3, 8011fbc <_printf_float+0x184>
 8011fb6:	6822      	ldr	r2, [r4, #0]
 8011fb8:	07d2      	lsls	r2, r2, #31
 8011fba:	d501      	bpl.n	8011fc0 <_printf_float+0x188>
 8011fbc:	3302      	adds	r3, #2
 8011fbe:	e7f4      	b.n	8011faa <_printf_float+0x172>
 8011fc0:	2301      	movs	r3, #1
 8011fc2:	e7f2      	b.n	8011faa <_printf_float+0x172>
 8011fc4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011fc8:	9b08      	ldr	r3, [sp, #32]
 8011fca:	4299      	cmp	r1, r3
 8011fcc:	db05      	blt.n	8011fda <_printf_float+0x1a2>
 8011fce:	6823      	ldr	r3, [r4, #0]
 8011fd0:	6121      	str	r1, [r4, #16]
 8011fd2:	07d8      	lsls	r0, r3, #31
 8011fd4:	d5ea      	bpl.n	8011fac <_printf_float+0x174>
 8011fd6:	1c4b      	adds	r3, r1, #1
 8011fd8:	e7e7      	b.n	8011faa <_printf_float+0x172>
 8011fda:	2900      	cmp	r1, #0
 8011fdc:	bfd4      	ite	le
 8011fde:	f1c1 0202 	rsble	r2, r1, #2
 8011fe2:	2201      	movgt	r2, #1
 8011fe4:	4413      	add	r3, r2
 8011fe6:	e7e0      	b.n	8011faa <_printf_float+0x172>
 8011fe8:	6823      	ldr	r3, [r4, #0]
 8011fea:	055a      	lsls	r2, r3, #21
 8011fec:	d407      	bmi.n	8011ffe <_printf_float+0x1c6>
 8011fee:	6923      	ldr	r3, [r4, #16]
 8011ff0:	4642      	mov	r2, r8
 8011ff2:	4631      	mov	r1, r6
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	47b8      	blx	r7
 8011ff8:	3001      	adds	r0, #1
 8011ffa:	d12a      	bne.n	8012052 <_printf_float+0x21a>
 8011ffc:	e76a      	b.n	8011ed4 <_printf_float+0x9c>
 8011ffe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012002:	f240 80e2 	bls.w	80121ca <_printf_float+0x392>
 8012006:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801200a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012012:	d133      	bne.n	801207c <_printf_float+0x244>
 8012014:	4a38      	ldr	r2, [pc, #224]	; (80120f8 <_printf_float+0x2c0>)
 8012016:	2301      	movs	r3, #1
 8012018:	4631      	mov	r1, r6
 801201a:	4628      	mov	r0, r5
 801201c:	47b8      	blx	r7
 801201e:	3001      	adds	r0, #1
 8012020:	f43f af58 	beq.w	8011ed4 <_printf_float+0x9c>
 8012024:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012028:	429a      	cmp	r2, r3
 801202a:	db02      	blt.n	8012032 <_printf_float+0x1fa>
 801202c:	6823      	ldr	r3, [r4, #0]
 801202e:	07d8      	lsls	r0, r3, #31
 8012030:	d50f      	bpl.n	8012052 <_printf_float+0x21a>
 8012032:	4653      	mov	r3, sl
 8012034:	465a      	mov	r2, fp
 8012036:	4631      	mov	r1, r6
 8012038:	4628      	mov	r0, r5
 801203a:	47b8      	blx	r7
 801203c:	3001      	adds	r0, #1
 801203e:	f43f af49 	beq.w	8011ed4 <_printf_float+0x9c>
 8012042:	f04f 0800 	mov.w	r8, #0
 8012046:	f104 091a 	add.w	r9, r4, #26
 801204a:	9b08      	ldr	r3, [sp, #32]
 801204c:	3b01      	subs	r3, #1
 801204e:	4543      	cmp	r3, r8
 8012050:	dc09      	bgt.n	8012066 <_printf_float+0x22e>
 8012052:	6823      	ldr	r3, [r4, #0]
 8012054:	079b      	lsls	r3, r3, #30
 8012056:	f100 8108 	bmi.w	801226a <_printf_float+0x432>
 801205a:	68e0      	ldr	r0, [r4, #12]
 801205c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801205e:	4298      	cmp	r0, r3
 8012060:	bfb8      	it	lt
 8012062:	4618      	movlt	r0, r3
 8012064:	e738      	b.n	8011ed8 <_printf_float+0xa0>
 8012066:	2301      	movs	r3, #1
 8012068:	464a      	mov	r2, r9
 801206a:	4631      	mov	r1, r6
 801206c:	4628      	mov	r0, r5
 801206e:	47b8      	blx	r7
 8012070:	3001      	adds	r0, #1
 8012072:	f43f af2f 	beq.w	8011ed4 <_printf_float+0x9c>
 8012076:	f108 0801 	add.w	r8, r8, #1
 801207a:	e7e6      	b.n	801204a <_printf_float+0x212>
 801207c:	9b07      	ldr	r3, [sp, #28]
 801207e:	2b00      	cmp	r3, #0
 8012080:	dc3c      	bgt.n	80120fc <_printf_float+0x2c4>
 8012082:	4a1d      	ldr	r2, [pc, #116]	; (80120f8 <_printf_float+0x2c0>)
 8012084:	2301      	movs	r3, #1
 8012086:	4631      	mov	r1, r6
 8012088:	4628      	mov	r0, r5
 801208a:	47b8      	blx	r7
 801208c:	3001      	adds	r0, #1
 801208e:	f43f af21 	beq.w	8011ed4 <_printf_float+0x9c>
 8012092:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012096:	4313      	orrs	r3, r2
 8012098:	d102      	bne.n	80120a0 <_printf_float+0x268>
 801209a:	6823      	ldr	r3, [r4, #0]
 801209c:	07d9      	lsls	r1, r3, #31
 801209e:	d5d8      	bpl.n	8012052 <_printf_float+0x21a>
 80120a0:	4653      	mov	r3, sl
 80120a2:	465a      	mov	r2, fp
 80120a4:	4631      	mov	r1, r6
 80120a6:	4628      	mov	r0, r5
 80120a8:	47b8      	blx	r7
 80120aa:	3001      	adds	r0, #1
 80120ac:	f43f af12 	beq.w	8011ed4 <_printf_float+0x9c>
 80120b0:	f04f 0900 	mov.w	r9, #0
 80120b4:	f104 0a1a 	add.w	sl, r4, #26
 80120b8:	9b07      	ldr	r3, [sp, #28]
 80120ba:	425b      	negs	r3, r3
 80120bc:	454b      	cmp	r3, r9
 80120be:	dc01      	bgt.n	80120c4 <_printf_float+0x28c>
 80120c0:	9b08      	ldr	r3, [sp, #32]
 80120c2:	e795      	b.n	8011ff0 <_printf_float+0x1b8>
 80120c4:	2301      	movs	r3, #1
 80120c6:	4652      	mov	r2, sl
 80120c8:	4631      	mov	r1, r6
 80120ca:	4628      	mov	r0, r5
 80120cc:	47b8      	blx	r7
 80120ce:	3001      	adds	r0, #1
 80120d0:	f43f af00 	beq.w	8011ed4 <_printf_float+0x9c>
 80120d4:	f109 0901 	add.w	r9, r9, #1
 80120d8:	e7ee      	b.n	80120b8 <_printf_float+0x280>
 80120da:	bf00      	nop
 80120dc:	f3af 8000 	nop.w
 80120e0:	ffffffff 	.word	0xffffffff
 80120e4:	7fefffff 	.word	0x7fefffff
 80120e8:	080150f8 	.word	0x080150f8
 80120ec:	080150fc 	.word	0x080150fc
 80120f0:	08015104 	.word	0x08015104
 80120f4:	08015100 	.word	0x08015100
 80120f8:	08015108 	.word	0x08015108
 80120fc:	9a08      	ldr	r2, [sp, #32]
 80120fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012100:	429a      	cmp	r2, r3
 8012102:	bfa8      	it	ge
 8012104:	461a      	movge	r2, r3
 8012106:	2a00      	cmp	r2, #0
 8012108:	4691      	mov	r9, r2
 801210a:	dc38      	bgt.n	801217e <_printf_float+0x346>
 801210c:	2300      	movs	r3, #0
 801210e:	9305      	str	r3, [sp, #20]
 8012110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012114:	f104 021a 	add.w	r2, r4, #26
 8012118:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801211a:	9905      	ldr	r1, [sp, #20]
 801211c:	9304      	str	r3, [sp, #16]
 801211e:	eba3 0309 	sub.w	r3, r3, r9
 8012122:	428b      	cmp	r3, r1
 8012124:	dc33      	bgt.n	801218e <_printf_float+0x356>
 8012126:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801212a:	429a      	cmp	r2, r3
 801212c:	db3c      	blt.n	80121a8 <_printf_float+0x370>
 801212e:	6823      	ldr	r3, [r4, #0]
 8012130:	07da      	lsls	r2, r3, #31
 8012132:	d439      	bmi.n	80121a8 <_printf_float+0x370>
 8012134:	9a08      	ldr	r2, [sp, #32]
 8012136:	9b04      	ldr	r3, [sp, #16]
 8012138:	9907      	ldr	r1, [sp, #28]
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	eba2 0901 	sub.w	r9, r2, r1
 8012140:	4599      	cmp	r9, r3
 8012142:	bfa8      	it	ge
 8012144:	4699      	movge	r9, r3
 8012146:	f1b9 0f00 	cmp.w	r9, #0
 801214a:	dc35      	bgt.n	80121b8 <_printf_float+0x380>
 801214c:	f04f 0800 	mov.w	r8, #0
 8012150:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012154:	f104 0a1a 	add.w	sl, r4, #26
 8012158:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801215c:	1a9b      	subs	r3, r3, r2
 801215e:	eba3 0309 	sub.w	r3, r3, r9
 8012162:	4543      	cmp	r3, r8
 8012164:	f77f af75 	ble.w	8012052 <_printf_float+0x21a>
 8012168:	2301      	movs	r3, #1
 801216a:	4652      	mov	r2, sl
 801216c:	4631      	mov	r1, r6
 801216e:	4628      	mov	r0, r5
 8012170:	47b8      	blx	r7
 8012172:	3001      	adds	r0, #1
 8012174:	f43f aeae 	beq.w	8011ed4 <_printf_float+0x9c>
 8012178:	f108 0801 	add.w	r8, r8, #1
 801217c:	e7ec      	b.n	8012158 <_printf_float+0x320>
 801217e:	4613      	mov	r3, r2
 8012180:	4631      	mov	r1, r6
 8012182:	4642      	mov	r2, r8
 8012184:	4628      	mov	r0, r5
 8012186:	47b8      	blx	r7
 8012188:	3001      	adds	r0, #1
 801218a:	d1bf      	bne.n	801210c <_printf_float+0x2d4>
 801218c:	e6a2      	b.n	8011ed4 <_printf_float+0x9c>
 801218e:	2301      	movs	r3, #1
 8012190:	4631      	mov	r1, r6
 8012192:	4628      	mov	r0, r5
 8012194:	9204      	str	r2, [sp, #16]
 8012196:	47b8      	blx	r7
 8012198:	3001      	adds	r0, #1
 801219a:	f43f ae9b 	beq.w	8011ed4 <_printf_float+0x9c>
 801219e:	9b05      	ldr	r3, [sp, #20]
 80121a0:	9a04      	ldr	r2, [sp, #16]
 80121a2:	3301      	adds	r3, #1
 80121a4:	9305      	str	r3, [sp, #20]
 80121a6:	e7b7      	b.n	8012118 <_printf_float+0x2e0>
 80121a8:	4653      	mov	r3, sl
 80121aa:	465a      	mov	r2, fp
 80121ac:	4631      	mov	r1, r6
 80121ae:	4628      	mov	r0, r5
 80121b0:	47b8      	blx	r7
 80121b2:	3001      	adds	r0, #1
 80121b4:	d1be      	bne.n	8012134 <_printf_float+0x2fc>
 80121b6:	e68d      	b.n	8011ed4 <_printf_float+0x9c>
 80121b8:	9a04      	ldr	r2, [sp, #16]
 80121ba:	464b      	mov	r3, r9
 80121bc:	4442      	add	r2, r8
 80121be:	4631      	mov	r1, r6
 80121c0:	4628      	mov	r0, r5
 80121c2:	47b8      	blx	r7
 80121c4:	3001      	adds	r0, #1
 80121c6:	d1c1      	bne.n	801214c <_printf_float+0x314>
 80121c8:	e684      	b.n	8011ed4 <_printf_float+0x9c>
 80121ca:	9a08      	ldr	r2, [sp, #32]
 80121cc:	2a01      	cmp	r2, #1
 80121ce:	dc01      	bgt.n	80121d4 <_printf_float+0x39c>
 80121d0:	07db      	lsls	r3, r3, #31
 80121d2:	d537      	bpl.n	8012244 <_printf_float+0x40c>
 80121d4:	2301      	movs	r3, #1
 80121d6:	4642      	mov	r2, r8
 80121d8:	4631      	mov	r1, r6
 80121da:	4628      	mov	r0, r5
 80121dc:	47b8      	blx	r7
 80121de:	3001      	adds	r0, #1
 80121e0:	f43f ae78 	beq.w	8011ed4 <_printf_float+0x9c>
 80121e4:	4653      	mov	r3, sl
 80121e6:	465a      	mov	r2, fp
 80121e8:	4631      	mov	r1, r6
 80121ea:	4628      	mov	r0, r5
 80121ec:	47b8      	blx	r7
 80121ee:	3001      	adds	r0, #1
 80121f0:	f43f ae70 	beq.w	8011ed4 <_printf_float+0x9c>
 80121f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80121f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80121fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012200:	d01b      	beq.n	801223a <_printf_float+0x402>
 8012202:	9b08      	ldr	r3, [sp, #32]
 8012204:	f108 0201 	add.w	r2, r8, #1
 8012208:	3b01      	subs	r3, #1
 801220a:	4631      	mov	r1, r6
 801220c:	4628      	mov	r0, r5
 801220e:	47b8      	blx	r7
 8012210:	3001      	adds	r0, #1
 8012212:	d10e      	bne.n	8012232 <_printf_float+0x3fa>
 8012214:	e65e      	b.n	8011ed4 <_printf_float+0x9c>
 8012216:	2301      	movs	r3, #1
 8012218:	464a      	mov	r2, r9
 801221a:	4631      	mov	r1, r6
 801221c:	4628      	mov	r0, r5
 801221e:	47b8      	blx	r7
 8012220:	3001      	adds	r0, #1
 8012222:	f43f ae57 	beq.w	8011ed4 <_printf_float+0x9c>
 8012226:	f108 0801 	add.w	r8, r8, #1
 801222a:	9b08      	ldr	r3, [sp, #32]
 801222c:	3b01      	subs	r3, #1
 801222e:	4543      	cmp	r3, r8
 8012230:	dcf1      	bgt.n	8012216 <_printf_float+0x3de>
 8012232:	9b04      	ldr	r3, [sp, #16]
 8012234:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012238:	e6db      	b.n	8011ff2 <_printf_float+0x1ba>
 801223a:	f04f 0800 	mov.w	r8, #0
 801223e:	f104 091a 	add.w	r9, r4, #26
 8012242:	e7f2      	b.n	801222a <_printf_float+0x3f2>
 8012244:	2301      	movs	r3, #1
 8012246:	4642      	mov	r2, r8
 8012248:	e7df      	b.n	801220a <_printf_float+0x3d2>
 801224a:	2301      	movs	r3, #1
 801224c:	464a      	mov	r2, r9
 801224e:	4631      	mov	r1, r6
 8012250:	4628      	mov	r0, r5
 8012252:	47b8      	blx	r7
 8012254:	3001      	adds	r0, #1
 8012256:	f43f ae3d 	beq.w	8011ed4 <_printf_float+0x9c>
 801225a:	f108 0801 	add.w	r8, r8, #1
 801225e:	68e3      	ldr	r3, [r4, #12]
 8012260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012262:	1a5b      	subs	r3, r3, r1
 8012264:	4543      	cmp	r3, r8
 8012266:	dcf0      	bgt.n	801224a <_printf_float+0x412>
 8012268:	e6f7      	b.n	801205a <_printf_float+0x222>
 801226a:	f04f 0800 	mov.w	r8, #0
 801226e:	f104 0919 	add.w	r9, r4, #25
 8012272:	e7f4      	b.n	801225e <_printf_float+0x426>

08012274 <_printf_common>:
 8012274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012278:	4616      	mov	r6, r2
 801227a:	4699      	mov	r9, r3
 801227c:	688a      	ldr	r2, [r1, #8]
 801227e:	690b      	ldr	r3, [r1, #16]
 8012280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012284:	4293      	cmp	r3, r2
 8012286:	bfb8      	it	lt
 8012288:	4613      	movlt	r3, r2
 801228a:	6033      	str	r3, [r6, #0]
 801228c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012290:	4607      	mov	r7, r0
 8012292:	460c      	mov	r4, r1
 8012294:	b10a      	cbz	r2, 801229a <_printf_common+0x26>
 8012296:	3301      	adds	r3, #1
 8012298:	6033      	str	r3, [r6, #0]
 801229a:	6823      	ldr	r3, [r4, #0]
 801229c:	0699      	lsls	r1, r3, #26
 801229e:	bf42      	ittt	mi
 80122a0:	6833      	ldrmi	r3, [r6, #0]
 80122a2:	3302      	addmi	r3, #2
 80122a4:	6033      	strmi	r3, [r6, #0]
 80122a6:	6825      	ldr	r5, [r4, #0]
 80122a8:	f015 0506 	ands.w	r5, r5, #6
 80122ac:	d106      	bne.n	80122bc <_printf_common+0x48>
 80122ae:	f104 0a19 	add.w	sl, r4, #25
 80122b2:	68e3      	ldr	r3, [r4, #12]
 80122b4:	6832      	ldr	r2, [r6, #0]
 80122b6:	1a9b      	subs	r3, r3, r2
 80122b8:	42ab      	cmp	r3, r5
 80122ba:	dc26      	bgt.n	801230a <_printf_common+0x96>
 80122bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80122c0:	1e13      	subs	r3, r2, #0
 80122c2:	6822      	ldr	r2, [r4, #0]
 80122c4:	bf18      	it	ne
 80122c6:	2301      	movne	r3, #1
 80122c8:	0692      	lsls	r2, r2, #26
 80122ca:	d42b      	bmi.n	8012324 <_printf_common+0xb0>
 80122cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80122d0:	4649      	mov	r1, r9
 80122d2:	4638      	mov	r0, r7
 80122d4:	47c0      	blx	r8
 80122d6:	3001      	adds	r0, #1
 80122d8:	d01e      	beq.n	8012318 <_printf_common+0xa4>
 80122da:	6823      	ldr	r3, [r4, #0]
 80122dc:	68e5      	ldr	r5, [r4, #12]
 80122de:	6832      	ldr	r2, [r6, #0]
 80122e0:	f003 0306 	and.w	r3, r3, #6
 80122e4:	2b04      	cmp	r3, #4
 80122e6:	bf08      	it	eq
 80122e8:	1aad      	subeq	r5, r5, r2
 80122ea:	68a3      	ldr	r3, [r4, #8]
 80122ec:	6922      	ldr	r2, [r4, #16]
 80122ee:	bf0c      	ite	eq
 80122f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122f4:	2500      	movne	r5, #0
 80122f6:	4293      	cmp	r3, r2
 80122f8:	bfc4      	itt	gt
 80122fa:	1a9b      	subgt	r3, r3, r2
 80122fc:	18ed      	addgt	r5, r5, r3
 80122fe:	2600      	movs	r6, #0
 8012300:	341a      	adds	r4, #26
 8012302:	42b5      	cmp	r5, r6
 8012304:	d11a      	bne.n	801233c <_printf_common+0xc8>
 8012306:	2000      	movs	r0, #0
 8012308:	e008      	b.n	801231c <_printf_common+0xa8>
 801230a:	2301      	movs	r3, #1
 801230c:	4652      	mov	r2, sl
 801230e:	4649      	mov	r1, r9
 8012310:	4638      	mov	r0, r7
 8012312:	47c0      	blx	r8
 8012314:	3001      	adds	r0, #1
 8012316:	d103      	bne.n	8012320 <_printf_common+0xac>
 8012318:	f04f 30ff 	mov.w	r0, #4294967295
 801231c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012320:	3501      	adds	r5, #1
 8012322:	e7c6      	b.n	80122b2 <_printf_common+0x3e>
 8012324:	18e1      	adds	r1, r4, r3
 8012326:	1c5a      	adds	r2, r3, #1
 8012328:	2030      	movs	r0, #48	; 0x30
 801232a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801232e:	4422      	add	r2, r4
 8012330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012338:	3302      	adds	r3, #2
 801233a:	e7c7      	b.n	80122cc <_printf_common+0x58>
 801233c:	2301      	movs	r3, #1
 801233e:	4622      	mov	r2, r4
 8012340:	4649      	mov	r1, r9
 8012342:	4638      	mov	r0, r7
 8012344:	47c0      	blx	r8
 8012346:	3001      	adds	r0, #1
 8012348:	d0e6      	beq.n	8012318 <_printf_common+0xa4>
 801234a:	3601      	adds	r6, #1
 801234c:	e7d9      	b.n	8012302 <_printf_common+0x8e>
	...

08012350 <_printf_i>:
 8012350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012354:	460c      	mov	r4, r1
 8012356:	4691      	mov	r9, r2
 8012358:	7e27      	ldrb	r7, [r4, #24]
 801235a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801235c:	2f78      	cmp	r7, #120	; 0x78
 801235e:	4680      	mov	r8, r0
 8012360:	469a      	mov	sl, r3
 8012362:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012366:	d807      	bhi.n	8012378 <_printf_i+0x28>
 8012368:	2f62      	cmp	r7, #98	; 0x62
 801236a:	d80a      	bhi.n	8012382 <_printf_i+0x32>
 801236c:	2f00      	cmp	r7, #0
 801236e:	f000 80d8 	beq.w	8012522 <_printf_i+0x1d2>
 8012372:	2f58      	cmp	r7, #88	; 0x58
 8012374:	f000 80a3 	beq.w	80124be <_printf_i+0x16e>
 8012378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801237c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012380:	e03a      	b.n	80123f8 <_printf_i+0xa8>
 8012382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012386:	2b15      	cmp	r3, #21
 8012388:	d8f6      	bhi.n	8012378 <_printf_i+0x28>
 801238a:	a001      	add	r0, pc, #4	; (adr r0, 8012390 <_printf_i+0x40>)
 801238c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012390:	080123e9 	.word	0x080123e9
 8012394:	080123fd 	.word	0x080123fd
 8012398:	08012379 	.word	0x08012379
 801239c:	08012379 	.word	0x08012379
 80123a0:	08012379 	.word	0x08012379
 80123a4:	08012379 	.word	0x08012379
 80123a8:	080123fd 	.word	0x080123fd
 80123ac:	08012379 	.word	0x08012379
 80123b0:	08012379 	.word	0x08012379
 80123b4:	08012379 	.word	0x08012379
 80123b8:	08012379 	.word	0x08012379
 80123bc:	08012509 	.word	0x08012509
 80123c0:	0801242d 	.word	0x0801242d
 80123c4:	080124eb 	.word	0x080124eb
 80123c8:	08012379 	.word	0x08012379
 80123cc:	08012379 	.word	0x08012379
 80123d0:	0801252b 	.word	0x0801252b
 80123d4:	08012379 	.word	0x08012379
 80123d8:	0801242d 	.word	0x0801242d
 80123dc:	08012379 	.word	0x08012379
 80123e0:	08012379 	.word	0x08012379
 80123e4:	080124f3 	.word	0x080124f3
 80123e8:	680b      	ldr	r3, [r1, #0]
 80123ea:	1d1a      	adds	r2, r3, #4
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	600a      	str	r2, [r1, #0]
 80123f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80123f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80123f8:	2301      	movs	r3, #1
 80123fa:	e0a3      	b.n	8012544 <_printf_i+0x1f4>
 80123fc:	6825      	ldr	r5, [r4, #0]
 80123fe:	6808      	ldr	r0, [r1, #0]
 8012400:	062e      	lsls	r6, r5, #24
 8012402:	f100 0304 	add.w	r3, r0, #4
 8012406:	d50a      	bpl.n	801241e <_printf_i+0xce>
 8012408:	6805      	ldr	r5, [r0, #0]
 801240a:	600b      	str	r3, [r1, #0]
 801240c:	2d00      	cmp	r5, #0
 801240e:	da03      	bge.n	8012418 <_printf_i+0xc8>
 8012410:	232d      	movs	r3, #45	; 0x2d
 8012412:	426d      	negs	r5, r5
 8012414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012418:	485e      	ldr	r0, [pc, #376]	; (8012594 <_printf_i+0x244>)
 801241a:	230a      	movs	r3, #10
 801241c:	e019      	b.n	8012452 <_printf_i+0x102>
 801241e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012422:	6805      	ldr	r5, [r0, #0]
 8012424:	600b      	str	r3, [r1, #0]
 8012426:	bf18      	it	ne
 8012428:	b22d      	sxthne	r5, r5
 801242a:	e7ef      	b.n	801240c <_printf_i+0xbc>
 801242c:	680b      	ldr	r3, [r1, #0]
 801242e:	6825      	ldr	r5, [r4, #0]
 8012430:	1d18      	adds	r0, r3, #4
 8012432:	6008      	str	r0, [r1, #0]
 8012434:	0628      	lsls	r0, r5, #24
 8012436:	d501      	bpl.n	801243c <_printf_i+0xec>
 8012438:	681d      	ldr	r5, [r3, #0]
 801243a:	e002      	b.n	8012442 <_printf_i+0xf2>
 801243c:	0669      	lsls	r1, r5, #25
 801243e:	d5fb      	bpl.n	8012438 <_printf_i+0xe8>
 8012440:	881d      	ldrh	r5, [r3, #0]
 8012442:	4854      	ldr	r0, [pc, #336]	; (8012594 <_printf_i+0x244>)
 8012444:	2f6f      	cmp	r7, #111	; 0x6f
 8012446:	bf0c      	ite	eq
 8012448:	2308      	moveq	r3, #8
 801244a:	230a      	movne	r3, #10
 801244c:	2100      	movs	r1, #0
 801244e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012452:	6866      	ldr	r6, [r4, #4]
 8012454:	60a6      	str	r6, [r4, #8]
 8012456:	2e00      	cmp	r6, #0
 8012458:	bfa2      	ittt	ge
 801245a:	6821      	ldrge	r1, [r4, #0]
 801245c:	f021 0104 	bicge.w	r1, r1, #4
 8012460:	6021      	strge	r1, [r4, #0]
 8012462:	b90d      	cbnz	r5, 8012468 <_printf_i+0x118>
 8012464:	2e00      	cmp	r6, #0
 8012466:	d04d      	beq.n	8012504 <_printf_i+0x1b4>
 8012468:	4616      	mov	r6, r2
 801246a:	fbb5 f1f3 	udiv	r1, r5, r3
 801246e:	fb03 5711 	mls	r7, r3, r1, r5
 8012472:	5dc7      	ldrb	r7, [r0, r7]
 8012474:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012478:	462f      	mov	r7, r5
 801247a:	42bb      	cmp	r3, r7
 801247c:	460d      	mov	r5, r1
 801247e:	d9f4      	bls.n	801246a <_printf_i+0x11a>
 8012480:	2b08      	cmp	r3, #8
 8012482:	d10b      	bne.n	801249c <_printf_i+0x14c>
 8012484:	6823      	ldr	r3, [r4, #0]
 8012486:	07df      	lsls	r7, r3, #31
 8012488:	d508      	bpl.n	801249c <_printf_i+0x14c>
 801248a:	6923      	ldr	r3, [r4, #16]
 801248c:	6861      	ldr	r1, [r4, #4]
 801248e:	4299      	cmp	r1, r3
 8012490:	bfde      	ittt	le
 8012492:	2330      	movle	r3, #48	; 0x30
 8012494:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012498:	f106 36ff 	addle.w	r6, r6, #4294967295
 801249c:	1b92      	subs	r2, r2, r6
 801249e:	6122      	str	r2, [r4, #16]
 80124a0:	f8cd a000 	str.w	sl, [sp]
 80124a4:	464b      	mov	r3, r9
 80124a6:	aa03      	add	r2, sp, #12
 80124a8:	4621      	mov	r1, r4
 80124aa:	4640      	mov	r0, r8
 80124ac:	f7ff fee2 	bl	8012274 <_printf_common>
 80124b0:	3001      	adds	r0, #1
 80124b2:	d14c      	bne.n	801254e <_printf_i+0x1fe>
 80124b4:	f04f 30ff 	mov.w	r0, #4294967295
 80124b8:	b004      	add	sp, #16
 80124ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124be:	4835      	ldr	r0, [pc, #212]	; (8012594 <_printf_i+0x244>)
 80124c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80124c4:	6823      	ldr	r3, [r4, #0]
 80124c6:	680e      	ldr	r6, [r1, #0]
 80124c8:	061f      	lsls	r7, r3, #24
 80124ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80124ce:	600e      	str	r6, [r1, #0]
 80124d0:	d514      	bpl.n	80124fc <_printf_i+0x1ac>
 80124d2:	07d9      	lsls	r1, r3, #31
 80124d4:	bf44      	itt	mi
 80124d6:	f043 0320 	orrmi.w	r3, r3, #32
 80124da:	6023      	strmi	r3, [r4, #0]
 80124dc:	b91d      	cbnz	r5, 80124e6 <_printf_i+0x196>
 80124de:	6823      	ldr	r3, [r4, #0]
 80124e0:	f023 0320 	bic.w	r3, r3, #32
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	2310      	movs	r3, #16
 80124e8:	e7b0      	b.n	801244c <_printf_i+0xfc>
 80124ea:	6823      	ldr	r3, [r4, #0]
 80124ec:	f043 0320 	orr.w	r3, r3, #32
 80124f0:	6023      	str	r3, [r4, #0]
 80124f2:	2378      	movs	r3, #120	; 0x78
 80124f4:	4828      	ldr	r0, [pc, #160]	; (8012598 <_printf_i+0x248>)
 80124f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80124fa:	e7e3      	b.n	80124c4 <_printf_i+0x174>
 80124fc:	065e      	lsls	r6, r3, #25
 80124fe:	bf48      	it	mi
 8012500:	b2ad      	uxthmi	r5, r5
 8012502:	e7e6      	b.n	80124d2 <_printf_i+0x182>
 8012504:	4616      	mov	r6, r2
 8012506:	e7bb      	b.n	8012480 <_printf_i+0x130>
 8012508:	680b      	ldr	r3, [r1, #0]
 801250a:	6826      	ldr	r6, [r4, #0]
 801250c:	6960      	ldr	r0, [r4, #20]
 801250e:	1d1d      	adds	r5, r3, #4
 8012510:	600d      	str	r5, [r1, #0]
 8012512:	0635      	lsls	r5, r6, #24
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	d501      	bpl.n	801251c <_printf_i+0x1cc>
 8012518:	6018      	str	r0, [r3, #0]
 801251a:	e002      	b.n	8012522 <_printf_i+0x1d2>
 801251c:	0671      	lsls	r1, r6, #25
 801251e:	d5fb      	bpl.n	8012518 <_printf_i+0x1c8>
 8012520:	8018      	strh	r0, [r3, #0]
 8012522:	2300      	movs	r3, #0
 8012524:	6123      	str	r3, [r4, #16]
 8012526:	4616      	mov	r6, r2
 8012528:	e7ba      	b.n	80124a0 <_printf_i+0x150>
 801252a:	680b      	ldr	r3, [r1, #0]
 801252c:	1d1a      	adds	r2, r3, #4
 801252e:	600a      	str	r2, [r1, #0]
 8012530:	681e      	ldr	r6, [r3, #0]
 8012532:	6862      	ldr	r2, [r4, #4]
 8012534:	2100      	movs	r1, #0
 8012536:	4630      	mov	r0, r6
 8012538:	f7ed feda 	bl	80002f0 <memchr>
 801253c:	b108      	cbz	r0, 8012542 <_printf_i+0x1f2>
 801253e:	1b80      	subs	r0, r0, r6
 8012540:	6060      	str	r0, [r4, #4]
 8012542:	6863      	ldr	r3, [r4, #4]
 8012544:	6123      	str	r3, [r4, #16]
 8012546:	2300      	movs	r3, #0
 8012548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801254c:	e7a8      	b.n	80124a0 <_printf_i+0x150>
 801254e:	6923      	ldr	r3, [r4, #16]
 8012550:	4632      	mov	r2, r6
 8012552:	4649      	mov	r1, r9
 8012554:	4640      	mov	r0, r8
 8012556:	47d0      	blx	sl
 8012558:	3001      	adds	r0, #1
 801255a:	d0ab      	beq.n	80124b4 <_printf_i+0x164>
 801255c:	6823      	ldr	r3, [r4, #0]
 801255e:	079b      	lsls	r3, r3, #30
 8012560:	d413      	bmi.n	801258a <_printf_i+0x23a>
 8012562:	68e0      	ldr	r0, [r4, #12]
 8012564:	9b03      	ldr	r3, [sp, #12]
 8012566:	4298      	cmp	r0, r3
 8012568:	bfb8      	it	lt
 801256a:	4618      	movlt	r0, r3
 801256c:	e7a4      	b.n	80124b8 <_printf_i+0x168>
 801256e:	2301      	movs	r3, #1
 8012570:	4632      	mov	r2, r6
 8012572:	4649      	mov	r1, r9
 8012574:	4640      	mov	r0, r8
 8012576:	47d0      	blx	sl
 8012578:	3001      	adds	r0, #1
 801257a:	d09b      	beq.n	80124b4 <_printf_i+0x164>
 801257c:	3501      	adds	r5, #1
 801257e:	68e3      	ldr	r3, [r4, #12]
 8012580:	9903      	ldr	r1, [sp, #12]
 8012582:	1a5b      	subs	r3, r3, r1
 8012584:	42ab      	cmp	r3, r5
 8012586:	dcf2      	bgt.n	801256e <_printf_i+0x21e>
 8012588:	e7eb      	b.n	8012562 <_printf_i+0x212>
 801258a:	2500      	movs	r5, #0
 801258c:	f104 0619 	add.w	r6, r4, #25
 8012590:	e7f5      	b.n	801257e <_printf_i+0x22e>
 8012592:	bf00      	nop
 8012594:	0801510a 	.word	0x0801510a
 8012598:	0801511b 	.word	0x0801511b

0801259c <iprintf>:
 801259c:	b40f      	push	{r0, r1, r2, r3}
 801259e:	4b0a      	ldr	r3, [pc, #40]	; (80125c8 <iprintf+0x2c>)
 80125a0:	b513      	push	{r0, r1, r4, lr}
 80125a2:	681c      	ldr	r4, [r3, #0]
 80125a4:	b124      	cbz	r4, 80125b0 <iprintf+0x14>
 80125a6:	69a3      	ldr	r3, [r4, #24]
 80125a8:	b913      	cbnz	r3, 80125b0 <iprintf+0x14>
 80125aa:	4620      	mov	r0, r4
 80125ac:	f001 f86c 	bl	8013688 <__sinit>
 80125b0:	ab05      	add	r3, sp, #20
 80125b2:	9a04      	ldr	r2, [sp, #16]
 80125b4:	68a1      	ldr	r1, [r4, #8]
 80125b6:	9301      	str	r3, [sp, #4]
 80125b8:	4620      	mov	r0, r4
 80125ba:	f001 fde7 	bl	801418c <_vfiprintf_r>
 80125be:	b002      	add	sp, #8
 80125c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125c4:	b004      	add	sp, #16
 80125c6:	4770      	bx	lr
 80125c8:	24000024 	.word	0x24000024

080125cc <_puts_r>:
 80125cc:	b570      	push	{r4, r5, r6, lr}
 80125ce:	460e      	mov	r6, r1
 80125d0:	4605      	mov	r5, r0
 80125d2:	b118      	cbz	r0, 80125dc <_puts_r+0x10>
 80125d4:	6983      	ldr	r3, [r0, #24]
 80125d6:	b90b      	cbnz	r3, 80125dc <_puts_r+0x10>
 80125d8:	f001 f856 	bl	8013688 <__sinit>
 80125dc:	69ab      	ldr	r3, [r5, #24]
 80125de:	68ac      	ldr	r4, [r5, #8]
 80125e0:	b913      	cbnz	r3, 80125e8 <_puts_r+0x1c>
 80125e2:	4628      	mov	r0, r5
 80125e4:	f001 f850 	bl	8013688 <__sinit>
 80125e8:	4b2c      	ldr	r3, [pc, #176]	; (801269c <_puts_r+0xd0>)
 80125ea:	429c      	cmp	r4, r3
 80125ec:	d120      	bne.n	8012630 <_puts_r+0x64>
 80125ee:	686c      	ldr	r4, [r5, #4]
 80125f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125f2:	07db      	lsls	r3, r3, #31
 80125f4:	d405      	bmi.n	8012602 <_puts_r+0x36>
 80125f6:	89a3      	ldrh	r3, [r4, #12]
 80125f8:	0598      	lsls	r0, r3, #22
 80125fa:	d402      	bmi.n	8012602 <_puts_r+0x36>
 80125fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125fe:	f001 f8e6 	bl	80137ce <__retarget_lock_acquire_recursive>
 8012602:	89a3      	ldrh	r3, [r4, #12]
 8012604:	0719      	lsls	r1, r3, #28
 8012606:	d51d      	bpl.n	8012644 <_puts_r+0x78>
 8012608:	6923      	ldr	r3, [r4, #16]
 801260a:	b1db      	cbz	r3, 8012644 <_puts_r+0x78>
 801260c:	3e01      	subs	r6, #1
 801260e:	68a3      	ldr	r3, [r4, #8]
 8012610:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012614:	3b01      	subs	r3, #1
 8012616:	60a3      	str	r3, [r4, #8]
 8012618:	bb39      	cbnz	r1, 801266a <_puts_r+0x9e>
 801261a:	2b00      	cmp	r3, #0
 801261c:	da38      	bge.n	8012690 <_puts_r+0xc4>
 801261e:	4622      	mov	r2, r4
 8012620:	210a      	movs	r1, #10
 8012622:	4628      	mov	r0, r5
 8012624:	f000 f848 	bl	80126b8 <__swbuf_r>
 8012628:	3001      	adds	r0, #1
 801262a:	d011      	beq.n	8012650 <_puts_r+0x84>
 801262c:	250a      	movs	r5, #10
 801262e:	e011      	b.n	8012654 <_puts_r+0x88>
 8012630:	4b1b      	ldr	r3, [pc, #108]	; (80126a0 <_puts_r+0xd4>)
 8012632:	429c      	cmp	r4, r3
 8012634:	d101      	bne.n	801263a <_puts_r+0x6e>
 8012636:	68ac      	ldr	r4, [r5, #8]
 8012638:	e7da      	b.n	80125f0 <_puts_r+0x24>
 801263a:	4b1a      	ldr	r3, [pc, #104]	; (80126a4 <_puts_r+0xd8>)
 801263c:	429c      	cmp	r4, r3
 801263e:	bf08      	it	eq
 8012640:	68ec      	ldreq	r4, [r5, #12]
 8012642:	e7d5      	b.n	80125f0 <_puts_r+0x24>
 8012644:	4621      	mov	r1, r4
 8012646:	4628      	mov	r0, r5
 8012648:	f000 f888 	bl	801275c <__swsetup_r>
 801264c:	2800      	cmp	r0, #0
 801264e:	d0dd      	beq.n	801260c <_puts_r+0x40>
 8012650:	f04f 35ff 	mov.w	r5, #4294967295
 8012654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012656:	07da      	lsls	r2, r3, #31
 8012658:	d405      	bmi.n	8012666 <_puts_r+0x9a>
 801265a:	89a3      	ldrh	r3, [r4, #12]
 801265c:	059b      	lsls	r3, r3, #22
 801265e:	d402      	bmi.n	8012666 <_puts_r+0x9a>
 8012660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012662:	f001 f8b5 	bl	80137d0 <__retarget_lock_release_recursive>
 8012666:	4628      	mov	r0, r5
 8012668:	bd70      	pop	{r4, r5, r6, pc}
 801266a:	2b00      	cmp	r3, #0
 801266c:	da04      	bge.n	8012678 <_puts_r+0xac>
 801266e:	69a2      	ldr	r2, [r4, #24]
 8012670:	429a      	cmp	r2, r3
 8012672:	dc06      	bgt.n	8012682 <_puts_r+0xb6>
 8012674:	290a      	cmp	r1, #10
 8012676:	d004      	beq.n	8012682 <_puts_r+0xb6>
 8012678:	6823      	ldr	r3, [r4, #0]
 801267a:	1c5a      	adds	r2, r3, #1
 801267c:	6022      	str	r2, [r4, #0]
 801267e:	7019      	strb	r1, [r3, #0]
 8012680:	e7c5      	b.n	801260e <_puts_r+0x42>
 8012682:	4622      	mov	r2, r4
 8012684:	4628      	mov	r0, r5
 8012686:	f000 f817 	bl	80126b8 <__swbuf_r>
 801268a:	3001      	adds	r0, #1
 801268c:	d1bf      	bne.n	801260e <_puts_r+0x42>
 801268e:	e7df      	b.n	8012650 <_puts_r+0x84>
 8012690:	6823      	ldr	r3, [r4, #0]
 8012692:	250a      	movs	r5, #10
 8012694:	1c5a      	adds	r2, r3, #1
 8012696:	6022      	str	r2, [r4, #0]
 8012698:	701d      	strb	r5, [r3, #0]
 801269a:	e7db      	b.n	8012654 <_puts_r+0x88>
 801269c:	080151e0 	.word	0x080151e0
 80126a0:	08015200 	.word	0x08015200
 80126a4:	080151c0 	.word	0x080151c0

080126a8 <puts>:
 80126a8:	4b02      	ldr	r3, [pc, #8]	; (80126b4 <puts+0xc>)
 80126aa:	4601      	mov	r1, r0
 80126ac:	6818      	ldr	r0, [r3, #0]
 80126ae:	f7ff bf8d 	b.w	80125cc <_puts_r>
 80126b2:	bf00      	nop
 80126b4:	24000024 	.word	0x24000024

080126b8 <__swbuf_r>:
 80126b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ba:	460e      	mov	r6, r1
 80126bc:	4614      	mov	r4, r2
 80126be:	4605      	mov	r5, r0
 80126c0:	b118      	cbz	r0, 80126ca <__swbuf_r+0x12>
 80126c2:	6983      	ldr	r3, [r0, #24]
 80126c4:	b90b      	cbnz	r3, 80126ca <__swbuf_r+0x12>
 80126c6:	f000 ffdf 	bl	8013688 <__sinit>
 80126ca:	4b21      	ldr	r3, [pc, #132]	; (8012750 <__swbuf_r+0x98>)
 80126cc:	429c      	cmp	r4, r3
 80126ce:	d12b      	bne.n	8012728 <__swbuf_r+0x70>
 80126d0:	686c      	ldr	r4, [r5, #4]
 80126d2:	69a3      	ldr	r3, [r4, #24]
 80126d4:	60a3      	str	r3, [r4, #8]
 80126d6:	89a3      	ldrh	r3, [r4, #12]
 80126d8:	071a      	lsls	r2, r3, #28
 80126da:	d52f      	bpl.n	801273c <__swbuf_r+0x84>
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	b36b      	cbz	r3, 801273c <__swbuf_r+0x84>
 80126e0:	6923      	ldr	r3, [r4, #16]
 80126e2:	6820      	ldr	r0, [r4, #0]
 80126e4:	1ac0      	subs	r0, r0, r3
 80126e6:	6963      	ldr	r3, [r4, #20]
 80126e8:	b2f6      	uxtb	r6, r6
 80126ea:	4283      	cmp	r3, r0
 80126ec:	4637      	mov	r7, r6
 80126ee:	dc04      	bgt.n	80126fa <__swbuf_r+0x42>
 80126f0:	4621      	mov	r1, r4
 80126f2:	4628      	mov	r0, r5
 80126f4:	f000 ff34 	bl	8013560 <_fflush_r>
 80126f8:	bb30      	cbnz	r0, 8012748 <__swbuf_r+0x90>
 80126fa:	68a3      	ldr	r3, [r4, #8]
 80126fc:	3b01      	subs	r3, #1
 80126fe:	60a3      	str	r3, [r4, #8]
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	1c5a      	adds	r2, r3, #1
 8012704:	6022      	str	r2, [r4, #0]
 8012706:	701e      	strb	r6, [r3, #0]
 8012708:	6963      	ldr	r3, [r4, #20]
 801270a:	3001      	adds	r0, #1
 801270c:	4283      	cmp	r3, r0
 801270e:	d004      	beq.n	801271a <__swbuf_r+0x62>
 8012710:	89a3      	ldrh	r3, [r4, #12]
 8012712:	07db      	lsls	r3, r3, #31
 8012714:	d506      	bpl.n	8012724 <__swbuf_r+0x6c>
 8012716:	2e0a      	cmp	r6, #10
 8012718:	d104      	bne.n	8012724 <__swbuf_r+0x6c>
 801271a:	4621      	mov	r1, r4
 801271c:	4628      	mov	r0, r5
 801271e:	f000 ff1f 	bl	8013560 <_fflush_r>
 8012722:	b988      	cbnz	r0, 8012748 <__swbuf_r+0x90>
 8012724:	4638      	mov	r0, r7
 8012726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012728:	4b0a      	ldr	r3, [pc, #40]	; (8012754 <__swbuf_r+0x9c>)
 801272a:	429c      	cmp	r4, r3
 801272c:	d101      	bne.n	8012732 <__swbuf_r+0x7a>
 801272e:	68ac      	ldr	r4, [r5, #8]
 8012730:	e7cf      	b.n	80126d2 <__swbuf_r+0x1a>
 8012732:	4b09      	ldr	r3, [pc, #36]	; (8012758 <__swbuf_r+0xa0>)
 8012734:	429c      	cmp	r4, r3
 8012736:	bf08      	it	eq
 8012738:	68ec      	ldreq	r4, [r5, #12]
 801273a:	e7ca      	b.n	80126d2 <__swbuf_r+0x1a>
 801273c:	4621      	mov	r1, r4
 801273e:	4628      	mov	r0, r5
 8012740:	f000 f80c 	bl	801275c <__swsetup_r>
 8012744:	2800      	cmp	r0, #0
 8012746:	d0cb      	beq.n	80126e0 <__swbuf_r+0x28>
 8012748:	f04f 37ff 	mov.w	r7, #4294967295
 801274c:	e7ea      	b.n	8012724 <__swbuf_r+0x6c>
 801274e:	bf00      	nop
 8012750:	080151e0 	.word	0x080151e0
 8012754:	08015200 	.word	0x08015200
 8012758:	080151c0 	.word	0x080151c0

0801275c <__swsetup_r>:
 801275c:	4b32      	ldr	r3, [pc, #200]	; (8012828 <__swsetup_r+0xcc>)
 801275e:	b570      	push	{r4, r5, r6, lr}
 8012760:	681d      	ldr	r5, [r3, #0]
 8012762:	4606      	mov	r6, r0
 8012764:	460c      	mov	r4, r1
 8012766:	b125      	cbz	r5, 8012772 <__swsetup_r+0x16>
 8012768:	69ab      	ldr	r3, [r5, #24]
 801276a:	b913      	cbnz	r3, 8012772 <__swsetup_r+0x16>
 801276c:	4628      	mov	r0, r5
 801276e:	f000 ff8b 	bl	8013688 <__sinit>
 8012772:	4b2e      	ldr	r3, [pc, #184]	; (801282c <__swsetup_r+0xd0>)
 8012774:	429c      	cmp	r4, r3
 8012776:	d10f      	bne.n	8012798 <__swsetup_r+0x3c>
 8012778:	686c      	ldr	r4, [r5, #4]
 801277a:	89a3      	ldrh	r3, [r4, #12]
 801277c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012780:	0719      	lsls	r1, r3, #28
 8012782:	d42c      	bmi.n	80127de <__swsetup_r+0x82>
 8012784:	06dd      	lsls	r5, r3, #27
 8012786:	d411      	bmi.n	80127ac <__swsetup_r+0x50>
 8012788:	2309      	movs	r3, #9
 801278a:	6033      	str	r3, [r6, #0]
 801278c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012790:	81a3      	strh	r3, [r4, #12]
 8012792:	f04f 30ff 	mov.w	r0, #4294967295
 8012796:	e03e      	b.n	8012816 <__swsetup_r+0xba>
 8012798:	4b25      	ldr	r3, [pc, #148]	; (8012830 <__swsetup_r+0xd4>)
 801279a:	429c      	cmp	r4, r3
 801279c:	d101      	bne.n	80127a2 <__swsetup_r+0x46>
 801279e:	68ac      	ldr	r4, [r5, #8]
 80127a0:	e7eb      	b.n	801277a <__swsetup_r+0x1e>
 80127a2:	4b24      	ldr	r3, [pc, #144]	; (8012834 <__swsetup_r+0xd8>)
 80127a4:	429c      	cmp	r4, r3
 80127a6:	bf08      	it	eq
 80127a8:	68ec      	ldreq	r4, [r5, #12]
 80127aa:	e7e6      	b.n	801277a <__swsetup_r+0x1e>
 80127ac:	0758      	lsls	r0, r3, #29
 80127ae:	d512      	bpl.n	80127d6 <__swsetup_r+0x7a>
 80127b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127b2:	b141      	cbz	r1, 80127c6 <__swsetup_r+0x6a>
 80127b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127b8:	4299      	cmp	r1, r3
 80127ba:	d002      	beq.n	80127c2 <__swsetup_r+0x66>
 80127bc:	4630      	mov	r0, r6
 80127be:	f001 fc11 	bl	8013fe4 <_free_r>
 80127c2:	2300      	movs	r3, #0
 80127c4:	6363      	str	r3, [r4, #52]	; 0x34
 80127c6:	89a3      	ldrh	r3, [r4, #12]
 80127c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80127cc:	81a3      	strh	r3, [r4, #12]
 80127ce:	2300      	movs	r3, #0
 80127d0:	6063      	str	r3, [r4, #4]
 80127d2:	6923      	ldr	r3, [r4, #16]
 80127d4:	6023      	str	r3, [r4, #0]
 80127d6:	89a3      	ldrh	r3, [r4, #12]
 80127d8:	f043 0308 	orr.w	r3, r3, #8
 80127dc:	81a3      	strh	r3, [r4, #12]
 80127de:	6923      	ldr	r3, [r4, #16]
 80127e0:	b94b      	cbnz	r3, 80127f6 <__swsetup_r+0x9a>
 80127e2:	89a3      	ldrh	r3, [r4, #12]
 80127e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80127e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127ec:	d003      	beq.n	80127f6 <__swsetup_r+0x9a>
 80127ee:	4621      	mov	r1, r4
 80127f0:	4630      	mov	r0, r6
 80127f2:	f001 f813 	bl	801381c <__smakebuf_r>
 80127f6:	89a0      	ldrh	r0, [r4, #12]
 80127f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80127fc:	f010 0301 	ands.w	r3, r0, #1
 8012800:	d00a      	beq.n	8012818 <__swsetup_r+0xbc>
 8012802:	2300      	movs	r3, #0
 8012804:	60a3      	str	r3, [r4, #8]
 8012806:	6963      	ldr	r3, [r4, #20]
 8012808:	425b      	negs	r3, r3
 801280a:	61a3      	str	r3, [r4, #24]
 801280c:	6923      	ldr	r3, [r4, #16]
 801280e:	b943      	cbnz	r3, 8012822 <__swsetup_r+0xc6>
 8012810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012814:	d1ba      	bne.n	801278c <__swsetup_r+0x30>
 8012816:	bd70      	pop	{r4, r5, r6, pc}
 8012818:	0781      	lsls	r1, r0, #30
 801281a:	bf58      	it	pl
 801281c:	6963      	ldrpl	r3, [r4, #20]
 801281e:	60a3      	str	r3, [r4, #8]
 8012820:	e7f4      	b.n	801280c <__swsetup_r+0xb0>
 8012822:	2000      	movs	r0, #0
 8012824:	e7f7      	b.n	8012816 <__swsetup_r+0xba>
 8012826:	bf00      	nop
 8012828:	24000024 	.word	0x24000024
 801282c:	080151e0 	.word	0x080151e0
 8012830:	08015200 	.word	0x08015200
 8012834:	080151c0 	.word	0x080151c0

08012838 <quorem>:
 8012838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	6903      	ldr	r3, [r0, #16]
 801283e:	690c      	ldr	r4, [r1, #16]
 8012840:	42a3      	cmp	r3, r4
 8012842:	4607      	mov	r7, r0
 8012844:	f2c0 8081 	blt.w	801294a <quorem+0x112>
 8012848:	3c01      	subs	r4, #1
 801284a:	f101 0814 	add.w	r8, r1, #20
 801284e:	f100 0514 	add.w	r5, r0, #20
 8012852:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012856:	9301      	str	r3, [sp, #4]
 8012858:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801285c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012860:	3301      	adds	r3, #1
 8012862:	429a      	cmp	r2, r3
 8012864:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012868:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801286c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012870:	d331      	bcc.n	80128d6 <quorem+0x9e>
 8012872:	f04f 0e00 	mov.w	lr, #0
 8012876:	4640      	mov	r0, r8
 8012878:	46ac      	mov	ip, r5
 801287a:	46f2      	mov	sl, lr
 801287c:	f850 2b04 	ldr.w	r2, [r0], #4
 8012880:	b293      	uxth	r3, r2
 8012882:	fb06 e303 	mla	r3, r6, r3, lr
 8012886:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801288a:	b29b      	uxth	r3, r3
 801288c:	ebaa 0303 	sub.w	r3, sl, r3
 8012890:	0c12      	lsrs	r2, r2, #16
 8012892:	f8dc a000 	ldr.w	sl, [ip]
 8012896:	fb06 e202 	mla	r2, r6, r2, lr
 801289a:	fa13 f38a 	uxtah	r3, r3, sl
 801289e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80128a2:	fa1f fa82 	uxth.w	sl, r2
 80128a6:	f8dc 2000 	ldr.w	r2, [ip]
 80128aa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80128ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128b8:	4581      	cmp	r9, r0
 80128ba:	f84c 3b04 	str.w	r3, [ip], #4
 80128be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80128c2:	d2db      	bcs.n	801287c <quorem+0x44>
 80128c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80128c8:	b92b      	cbnz	r3, 80128d6 <quorem+0x9e>
 80128ca:	9b01      	ldr	r3, [sp, #4]
 80128cc:	3b04      	subs	r3, #4
 80128ce:	429d      	cmp	r5, r3
 80128d0:	461a      	mov	r2, r3
 80128d2:	d32e      	bcc.n	8012932 <quorem+0xfa>
 80128d4:	613c      	str	r4, [r7, #16]
 80128d6:	4638      	mov	r0, r7
 80128d8:	f001 fa74 	bl	8013dc4 <__mcmp>
 80128dc:	2800      	cmp	r0, #0
 80128de:	db24      	blt.n	801292a <quorem+0xf2>
 80128e0:	3601      	adds	r6, #1
 80128e2:	4628      	mov	r0, r5
 80128e4:	f04f 0c00 	mov.w	ip, #0
 80128e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80128ec:	f8d0 e000 	ldr.w	lr, [r0]
 80128f0:	b293      	uxth	r3, r2
 80128f2:	ebac 0303 	sub.w	r3, ip, r3
 80128f6:	0c12      	lsrs	r2, r2, #16
 80128f8:	fa13 f38e 	uxtah	r3, r3, lr
 80128fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012904:	b29b      	uxth	r3, r3
 8012906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801290a:	45c1      	cmp	r9, r8
 801290c:	f840 3b04 	str.w	r3, [r0], #4
 8012910:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012914:	d2e8      	bcs.n	80128e8 <quorem+0xb0>
 8012916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801291a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801291e:	b922      	cbnz	r2, 801292a <quorem+0xf2>
 8012920:	3b04      	subs	r3, #4
 8012922:	429d      	cmp	r5, r3
 8012924:	461a      	mov	r2, r3
 8012926:	d30a      	bcc.n	801293e <quorem+0x106>
 8012928:	613c      	str	r4, [r7, #16]
 801292a:	4630      	mov	r0, r6
 801292c:	b003      	add	sp, #12
 801292e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012932:	6812      	ldr	r2, [r2, #0]
 8012934:	3b04      	subs	r3, #4
 8012936:	2a00      	cmp	r2, #0
 8012938:	d1cc      	bne.n	80128d4 <quorem+0x9c>
 801293a:	3c01      	subs	r4, #1
 801293c:	e7c7      	b.n	80128ce <quorem+0x96>
 801293e:	6812      	ldr	r2, [r2, #0]
 8012940:	3b04      	subs	r3, #4
 8012942:	2a00      	cmp	r2, #0
 8012944:	d1f0      	bne.n	8012928 <quorem+0xf0>
 8012946:	3c01      	subs	r4, #1
 8012948:	e7eb      	b.n	8012922 <quorem+0xea>
 801294a:	2000      	movs	r0, #0
 801294c:	e7ee      	b.n	801292c <quorem+0xf4>
	...

08012950 <_dtoa_r>:
 8012950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012954:	ec59 8b10 	vmov	r8, r9, d0
 8012958:	b095      	sub	sp, #84	; 0x54
 801295a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801295c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801295e:	9107      	str	r1, [sp, #28]
 8012960:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012964:	4606      	mov	r6, r0
 8012966:	9209      	str	r2, [sp, #36]	; 0x24
 8012968:	9310      	str	r3, [sp, #64]	; 0x40
 801296a:	b975      	cbnz	r5, 801298a <_dtoa_r+0x3a>
 801296c:	2010      	movs	r0, #16
 801296e:	f000 ff95 	bl	801389c <malloc>
 8012972:	4602      	mov	r2, r0
 8012974:	6270      	str	r0, [r6, #36]	; 0x24
 8012976:	b920      	cbnz	r0, 8012982 <_dtoa_r+0x32>
 8012978:	4bab      	ldr	r3, [pc, #684]	; (8012c28 <_dtoa_r+0x2d8>)
 801297a:	21ea      	movs	r1, #234	; 0xea
 801297c:	48ab      	ldr	r0, [pc, #684]	; (8012c2c <_dtoa_r+0x2dc>)
 801297e:	f001 fd9b 	bl	80144b8 <__assert_func>
 8012982:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012986:	6005      	str	r5, [r0, #0]
 8012988:	60c5      	str	r5, [r0, #12]
 801298a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801298c:	6819      	ldr	r1, [r3, #0]
 801298e:	b151      	cbz	r1, 80129a6 <_dtoa_r+0x56>
 8012990:	685a      	ldr	r2, [r3, #4]
 8012992:	604a      	str	r2, [r1, #4]
 8012994:	2301      	movs	r3, #1
 8012996:	4093      	lsls	r3, r2
 8012998:	608b      	str	r3, [r1, #8]
 801299a:	4630      	mov	r0, r6
 801299c:	f000 ffd4 	bl	8013948 <_Bfree>
 80129a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80129a2:	2200      	movs	r2, #0
 80129a4:	601a      	str	r2, [r3, #0]
 80129a6:	f1b9 0300 	subs.w	r3, r9, #0
 80129aa:	bfbb      	ittet	lt
 80129ac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80129b0:	9303      	strlt	r3, [sp, #12]
 80129b2:	2300      	movge	r3, #0
 80129b4:	2201      	movlt	r2, #1
 80129b6:	bfac      	ite	ge
 80129b8:	6023      	strge	r3, [r4, #0]
 80129ba:	6022      	strlt	r2, [r4, #0]
 80129bc:	4b9c      	ldr	r3, [pc, #624]	; (8012c30 <_dtoa_r+0x2e0>)
 80129be:	9c03      	ldr	r4, [sp, #12]
 80129c0:	43a3      	bics	r3, r4
 80129c2:	d11a      	bne.n	80129fa <_dtoa_r+0xaa>
 80129c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80129c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80129ca:	6013      	str	r3, [r2, #0]
 80129cc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80129d0:	ea53 0308 	orrs.w	r3, r3, r8
 80129d4:	f000 8512 	beq.w	80133fc <_dtoa_r+0xaac>
 80129d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80129da:	b953      	cbnz	r3, 80129f2 <_dtoa_r+0xa2>
 80129dc:	4b95      	ldr	r3, [pc, #596]	; (8012c34 <_dtoa_r+0x2e4>)
 80129de:	e01f      	b.n	8012a20 <_dtoa_r+0xd0>
 80129e0:	4b95      	ldr	r3, [pc, #596]	; (8012c38 <_dtoa_r+0x2e8>)
 80129e2:	9300      	str	r3, [sp, #0]
 80129e4:	3308      	adds	r3, #8
 80129e6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80129e8:	6013      	str	r3, [r2, #0]
 80129ea:	9800      	ldr	r0, [sp, #0]
 80129ec:	b015      	add	sp, #84	; 0x54
 80129ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129f2:	4b90      	ldr	r3, [pc, #576]	; (8012c34 <_dtoa_r+0x2e4>)
 80129f4:	9300      	str	r3, [sp, #0]
 80129f6:	3303      	adds	r3, #3
 80129f8:	e7f5      	b.n	80129e6 <_dtoa_r+0x96>
 80129fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80129fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a06:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012a0a:	d10b      	bne.n	8012a24 <_dtoa_r+0xd4>
 8012a0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012a0e:	2301      	movs	r3, #1
 8012a10:	6013      	str	r3, [r2, #0]
 8012a12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	f000 84ee 	beq.w	80133f6 <_dtoa_r+0xaa6>
 8012a1a:	4888      	ldr	r0, [pc, #544]	; (8012c3c <_dtoa_r+0x2ec>)
 8012a1c:	6018      	str	r0, [r3, #0]
 8012a1e:	1e43      	subs	r3, r0, #1
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	e7e2      	b.n	80129ea <_dtoa_r+0x9a>
 8012a24:	a913      	add	r1, sp, #76	; 0x4c
 8012a26:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012a2a:	aa12      	add	r2, sp, #72	; 0x48
 8012a2c:	4630      	mov	r0, r6
 8012a2e:	f001 fa6d 	bl	8013f0c <__d2b>
 8012a32:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012a36:	4605      	mov	r5, r0
 8012a38:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012a3a:	2900      	cmp	r1, #0
 8012a3c:	d047      	beq.n	8012ace <_dtoa_r+0x17e>
 8012a3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012a40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012a48:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012a4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012a50:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012a54:	2400      	movs	r4, #0
 8012a56:	ec43 2b16 	vmov	d6, r2, r3
 8012a5a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012a5e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8012c10 <_dtoa_r+0x2c0>
 8012a62:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012a66:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8012c18 <_dtoa_r+0x2c8>
 8012a6a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012a6e:	eeb0 7b46 	vmov.f64	d7, d6
 8012a72:	ee06 1a90 	vmov	s13, r1
 8012a76:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8012a7a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012c20 <_dtoa_r+0x2d0>
 8012a7e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012a82:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012a86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a8e:	ee16 ba90 	vmov	fp, s13
 8012a92:	9411      	str	r4, [sp, #68]	; 0x44
 8012a94:	d508      	bpl.n	8012aa8 <_dtoa_r+0x158>
 8012a96:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012a9a:	eeb4 6b47 	vcmp.f64	d6, d7
 8012a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa2:	bf18      	it	ne
 8012aa4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012aa8:	f1bb 0f16 	cmp.w	fp, #22
 8012aac:	d832      	bhi.n	8012b14 <_dtoa_r+0x1c4>
 8012aae:	4b64      	ldr	r3, [pc, #400]	; (8012c40 <_dtoa_r+0x2f0>)
 8012ab0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012ab4:	ed93 7b00 	vldr	d7, [r3]
 8012ab8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012abc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac4:	d501      	bpl.n	8012aca <_dtoa_r+0x17a>
 8012ac6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012aca:	2300      	movs	r3, #0
 8012acc:	e023      	b.n	8012b16 <_dtoa_r+0x1c6>
 8012ace:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012ad0:	4401      	add	r1, r0
 8012ad2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012ad6:	2b20      	cmp	r3, #32
 8012ad8:	bfc3      	ittte	gt
 8012ada:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012ade:	fa04 f303 	lslgt.w	r3, r4, r3
 8012ae2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012ae6:	f1c3 0320 	rsble	r3, r3, #32
 8012aea:	bfc6      	itte	gt
 8012aec:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012af0:	ea43 0308 	orrgt.w	r3, r3, r8
 8012af4:	fa08 f303 	lslle.w	r3, r8, r3
 8012af8:	ee07 3a90 	vmov	s15, r3
 8012afc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012b00:	3901      	subs	r1, #1
 8012b02:	ed8d 7b00 	vstr	d7, [sp]
 8012b06:	9c01      	ldr	r4, [sp, #4]
 8012b08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b0c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012b10:	2401      	movs	r4, #1
 8012b12:	e7a0      	b.n	8012a56 <_dtoa_r+0x106>
 8012b14:	2301      	movs	r3, #1
 8012b16:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b18:	1a43      	subs	r3, r0, r1
 8012b1a:	1e5a      	subs	r2, r3, #1
 8012b1c:	bf45      	ittet	mi
 8012b1e:	f1c3 0301 	rsbmi	r3, r3, #1
 8012b22:	9305      	strmi	r3, [sp, #20]
 8012b24:	2300      	movpl	r3, #0
 8012b26:	2300      	movmi	r3, #0
 8012b28:	9206      	str	r2, [sp, #24]
 8012b2a:	bf54      	ite	pl
 8012b2c:	9305      	strpl	r3, [sp, #20]
 8012b2e:	9306      	strmi	r3, [sp, #24]
 8012b30:	f1bb 0f00 	cmp.w	fp, #0
 8012b34:	db18      	blt.n	8012b68 <_dtoa_r+0x218>
 8012b36:	9b06      	ldr	r3, [sp, #24]
 8012b38:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8012b3c:	445b      	add	r3, fp
 8012b3e:	9306      	str	r3, [sp, #24]
 8012b40:	2300      	movs	r3, #0
 8012b42:	9a07      	ldr	r2, [sp, #28]
 8012b44:	2a09      	cmp	r2, #9
 8012b46:	d849      	bhi.n	8012bdc <_dtoa_r+0x28c>
 8012b48:	2a05      	cmp	r2, #5
 8012b4a:	bfc4      	itt	gt
 8012b4c:	3a04      	subgt	r2, #4
 8012b4e:	9207      	strgt	r2, [sp, #28]
 8012b50:	9a07      	ldr	r2, [sp, #28]
 8012b52:	f1a2 0202 	sub.w	r2, r2, #2
 8012b56:	bfcc      	ite	gt
 8012b58:	2400      	movgt	r4, #0
 8012b5a:	2401      	movle	r4, #1
 8012b5c:	2a03      	cmp	r2, #3
 8012b5e:	d848      	bhi.n	8012bf2 <_dtoa_r+0x2a2>
 8012b60:	e8df f002 	tbb	[pc, r2]
 8012b64:	3a2c2e0b 	.word	0x3a2c2e0b
 8012b68:	9b05      	ldr	r3, [sp, #20]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	eba3 030b 	sub.w	r3, r3, fp
 8012b70:	9305      	str	r3, [sp, #20]
 8012b72:	920e      	str	r2, [sp, #56]	; 0x38
 8012b74:	f1cb 0300 	rsb	r3, fp, #0
 8012b78:	e7e3      	b.n	8012b42 <_dtoa_r+0x1f2>
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	9208      	str	r2, [sp, #32]
 8012b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b80:	2a00      	cmp	r2, #0
 8012b82:	dc39      	bgt.n	8012bf8 <_dtoa_r+0x2a8>
 8012b84:	f04f 0a01 	mov.w	sl, #1
 8012b88:	46d1      	mov	r9, sl
 8012b8a:	4652      	mov	r2, sl
 8012b8c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012b90:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012b92:	2100      	movs	r1, #0
 8012b94:	6079      	str	r1, [r7, #4]
 8012b96:	2004      	movs	r0, #4
 8012b98:	f100 0c14 	add.w	ip, r0, #20
 8012b9c:	4594      	cmp	ip, r2
 8012b9e:	6879      	ldr	r1, [r7, #4]
 8012ba0:	d92f      	bls.n	8012c02 <_dtoa_r+0x2b2>
 8012ba2:	4630      	mov	r0, r6
 8012ba4:	930c      	str	r3, [sp, #48]	; 0x30
 8012ba6:	f000 fe8f 	bl	80138c8 <_Balloc>
 8012baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012bac:	9000      	str	r0, [sp, #0]
 8012bae:	4602      	mov	r2, r0
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	d149      	bne.n	8012c48 <_dtoa_r+0x2f8>
 8012bb4:	4b23      	ldr	r3, [pc, #140]	; (8012c44 <_dtoa_r+0x2f4>)
 8012bb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012bba:	e6df      	b.n	801297c <_dtoa_r+0x2c>
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	e7dd      	b.n	8012b7c <_dtoa_r+0x22c>
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	9208      	str	r2, [sp, #32]
 8012bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bc6:	eb0b 0a02 	add.w	sl, fp, r2
 8012bca:	f10a 0901 	add.w	r9, sl, #1
 8012bce:	464a      	mov	r2, r9
 8012bd0:	2a01      	cmp	r2, #1
 8012bd2:	bfb8      	it	lt
 8012bd4:	2201      	movlt	r2, #1
 8012bd6:	e7db      	b.n	8012b90 <_dtoa_r+0x240>
 8012bd8:	2201      	movs	r2, #1
 8012bda:	e7f2      	b.n	8012bc2 <_dtoa_r+0x272>
 8012bdc:	2401      	movs	r4, #1
 8012bde:	2200      	movs	r2, #0
 8012be0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012be4:	f04f 3aff 	mov.w	sl, #4294967295
 8012be8:	2100      	movs	r1, #0
 8012bea:	46d1      	mov	r9, sl
 8012bec:	2212      	movs	r2, #18
 8012bee:	9109      	str	r1, [sp, #36]	; 0x24
 8012bf0:	e7ce      	b.n	8012b90 <_dtoa_r+0x240>
 8012bf2:	2201      	movs	r2, #1
 8012bf4:	9208      	str	r2, [sp, #32]
 8012bf6:	e7f5      	b.n	8012be4 <_dtoa_r+0x294>
 8012bf8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8012bfc:	46d1      	mov	r9, sl
 8012bfe:	4652      	mov	r2, sl
 8012c00:	e7c6      	b.n	8012b90 <_dtoa_r+0x240>
 8012c02:	3101      	adds	r1, #1
 8012c04:	6079      	str	r1, [r7, #4]
 8012c06:	0040      	lsls	r0, r0, #1
 8012c08:	e7c6      	b.n	8012b98 <_dtoa_r+0x248>
 8012c0a:	bf00      	nop
 8012c0c:	f3af 8000 	nop.w
 8012c10:	636f4361 	.word	0x636f4361
 8012c14:	3fd287a7 	.word	0x3fd287a7
 8012c18:	8b60c8b3 	.word	0x8b60c8b3
 8012c1c:	3fc68a28 	.word	0x3fc68a28
 8012c20:	509f79fb 	.word	0x509f79fb
 8012c24:	3fd34413 	.word	0x3fd34413
 8012c28:	08015139 	.word	0x08015139
 8012c2c:	08015150 	.word	0x08015150
 8012c30:	7ff00000 	.word	0x7ff00000
 8012c34:	08015135 	.word	0x08015135
 8012c38:	0801512c 	.word	0x0801512c
 8012c3c:	08015109 	.word	0x08015109
 8012c40:	080152a8 	.word	0x080152a8
 8012c44:	080151af 	.word	0x080151af
 8012c48:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012c4a:	9900      	ldr	r1, [sp, #0]
 8012c4c:	6011      	str	r1, [r2, #0]
 8012c4e:	f1b9 0f0e 	cmp.w	r9, #14
 8012c52:	d872      	bhi.n	8012d3a <_dtoa_r+0x3ea>
 8012c54:	2c00      	cmp	r4, #0
 8012c56:	d070      	beq.n	8012d3a <_dtoa_r+0x3ea>
 8012c58:	f1bb 0f00 	cmp.w	fp, #0
 8012c5c:	f340 80a6 	ble.w	8012dac <_dtoa_r+0x45c>
 8012c60:	49ca      	ldr	r1, [pc, #808]	; (8012f8c <_dtoa_r+0x63c>)
 8012c62:	f00b 020f 	and.w	r2, fp, #15
 8012c66:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012c6a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012c6e:	ed92 7b00 	vldr	d7, [r2]
 8012c72:	ea4f 112b 	mov.w	r1, fp, asr #4
 8012c76:	f000 808d 	beq.w	8012d94 <_dtoa_r+0x444>
 8012c7a:	4ac5      	ldr	r2, [pc, #788]	; (8012f90 <_dtoa_r+0x640>)
 8012c7c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012c80:	ed92 6b08 	vldr	d6, [r2, #32]
 8012c84:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012c88:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012c8c:	f001 010f 	and.w	r1, r1, #15
 8012c90:	2203      	movs	r2, #3
 8012c92:	48bf      	ldr	r0, [pc, #764]	; (8012f90 <_dtoa_r+0x640>)
 8012c94:	2900      	cmp	r1, #0
 8012c96:	d17f      	bne.n	8012d98 <_dtoa_r+0x448>
 8012c98:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012c9c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012ca0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012ca4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012ca6:	2900      	cmp	r1, #0
 8012ca8:	f000 80b2 	beq.w	8012e10 <_dtoa_r+0x4c0>
 8012cac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012cb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012cb4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cbc:	f140 80a8 	bpl.w	8012e10 <_dtoa_r+0x4c0>
 8012cc0:	f1b9 0f00 	cmp.w	r9, #0
 8012cc4:	f000 80a4 	beq.w	8012e10 <_dtoa_r+0x4c0>
 8012cc8:	f1ba 0f00 	cmp.w	sl, #0
 8012ccc:	dd31      	ble.n	8012d32 <_dtoa_r+0x3e2>
 8012cce:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012cd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012cd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cda:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012cde:	3201      	adds	r2, #1
 8012ce0:	4650      	mov	r0, sl
 8012ce2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012ce6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012cea:	ee07 2a90 	vmov	s15, r2
 8012cee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012cf2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012cf6:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012cfa:	9c03      	ldr	r4, [sp, #12]
 8012cfc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012d00:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8012d04:	2800      	cmp	r0, #0
 8012d06:	f040 8086 	bne.w	8012e16 <_dtoa_r+0x4c6>
 8012d0a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012d0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012d12:	ec42 1b17 	vmov	d7, r1, r2
 8012d16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d1e:	f300 8272 	bgt.w	8013206 <_dtoa_r+0x8b6>
 8012d22:	eeb1 7b47 	vneg.f64	d7, d7
 8012d26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d2e:	f100 8267 	bmi.w	8013200 <_dtoa_r+0x8b0>
 8012d32:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8012d36:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012d3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012d3c:	2a00      	cmp	r2, #0
 8012d3e:	f2c0 8129 	blt.w	8012f94 <_dtoa_r+0x644>
 8012d42:	f1bb 0f0e 	cmp.w	fp, #14
 8012d46:	f300 8125 	bgt.w	8012f94 <_dtoa_r+0x644>
 8012d4a:	4b90      	ldr	r3, [pc, #576]	; (8012f8c <_dtoa_r+0x63c>)
 8012d4c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012d50:	ed93 6b00 	vldr	d6, [r3]
 8012d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	f280 80c3 	bge.w	8012ee2 <_dtoa_r+0x592>
 8012d5c:	f1b9 0f00 	cmp.w	r9, #0
 8012d60:	f300 80bf 	bgt.w	8012ee2 <_dtoa_r+0x592>
 8012d64:	f040 824c 	bne.w	8013200 <_dtoa_r+0x8b0>
 8012d68:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012d6c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012d70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d7c:	464c      	mov	r4, r9
 8012d7e:	464f      	mov	r7, r9
 8012d80:	f280 8222 	bge.w	80131c8 <_dtoa_r+0x878>
 8012d84:	f8dd 8000 	ldr.w	r8, [sp]
 8012d88:	2331      	movs	r3, #49	; 0x31
 8012d8a:	f808 3b01 	strb.w	r3, [r8], #1
 8012d8e:	f10b 0b01 	add.w	fp, fp, #1
 8012d92:	e21e      	b.n	80131d2 <_dtoa_r+0x882>
 8012d94:	2202      	movs	r2, #2
 8012d96:	e77c      	b.n	8012c92 <_dtoa_r+0x342>
 8012d98:	07cc      	lsls	r4, r1, #31
 8012d9a:	d504      	bpl.n	8012da6 <_dtoa_r+0x456>
 8012d9c:	ed90 6b00 	vldr	d6, [r0]
 8012da0:	3201      	adds	r2, #1
 8012da2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012da6:	1049      	asrs	r1, r1, #1
 8012da8:	3008      	adds	r0, #8
 8012daa:	e773      	b.n	8012c94 <_dtoa_r+0x344>
 8012dac:	d02e      	beq.n	8012e0c <_dtoa_r+0x4bc>
 8012dae:	f1cb 0100 	rsb	r1, fp, #0
 8012db2:	4a76      	ldr	r2, [pc, #472]	; (8012f8c <_dtoa_r+0x63c>)
 8012db4:	f001 000f 	and.w	r0, r1, #15
 8012db8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012dbc:	ed92 7b00 	vldr	d7, [r2]
 8012dc0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012dc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012dc8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012dcc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8012dd0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012dd4:	486e      	ldr	r0, [pc, #440]	; (8012f90 <_dtoa_r+0x640>)
 8012dd6:	1109      	asrs	r1, r1, #4
 8012dd8:	2400      	movs	r4, #0
 8012dda:	2202      	movs	r2, #2
 8012ddc:	b939      	cbnz	r1, 8012dee <_dtoa_r+0x49e>
 8012dde:	2c00      	cmp	r4, #0
 8012de0:	f43f af60 	beq.w	8012ca4 <_dtoa_r+0x354>
 8012de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012dec:	e75a      	b.n	8012ca4 <_dtoa_r+0x354>
 8012dee:	07cf      	lsls	r7, r1, #31
 8012df0:	d509      	bpl.n	8012e06 <_dtoa_r+0x4b6>
 8012df2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012df6:	ed90 7b00 	vldr	d7, [r0]
 8012dfa:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012dfe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012e02:	3201      	adds	r2, #1
 8012e04:	2401      	movs	r4, #1
 8012e06:	1049      	asrs	r1, r1, #1
 8012e08:	3008      	adds	r0, #8
 8012e0a:	e7e7      	b.n	8012ddc <_dtoa_r+0x48c>
 8012e0c:	2202      	movs	r2, #2
 8012e0e:	e749      	b.n	8012ca4 <_dtoa_r+0x354>
 8012e10:	465f      	mov	r7, fp
 8012e12:	4648      	mov	r0, r9
 8012e14:	e765      	b.n	8012ce2 <_dtoa_r+0x392>
 8012e16:	ec42 1b17 	vmov	d7, r1, r2
 8012e1a:	4a5c      	ldr	r2, [pc, #368]	; (8012f8c <_dtoa_r+0x63c>)
 8012e1c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012e20:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012e24:	9a00      	ldr	r2, [sp, #0]
 8012e26:	1814      	adds	r4, r2, r0
 8012e28:	9a08      	ldr	r2, [sp, #32]
 8012e2a:	b352      	cbz	r2, 8012e82 <_dtoa_r+0x532>
 8012e2c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012e30:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012e34:	f8dd 8000 	ldr.w	r8, [sp]
 8012e38:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012e3c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012e40:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012e44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012e48:	ee14 2a90 	vmov	r2, s9
 8012e4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012e50:	3230      	adds	r2, #48	; 0x30
 8012e52:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012e56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e5e:	f808 2b01 	strb.w	r2, [r8], #1
 8012e62:	d439      	bmi.n	8012ed8 <_dtoa_r+0x588>
 8012e64:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012e68:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e70:	d472      	bmi.n	8012f58 <_dtoa_r+0x608>
 8012e72:	45a0      	cmp	r8, r4
 8012e74:	f43f af5d 	beq.w	8012d32 <_dtoa_r+0x3e2>
 8012e78:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012e7c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012e80:	e7e0      	b.n	8012e44 <_dtoa_r+0x4f4>
 8012e82:	f8dd 8000 	ldr.w	r8, [sp]
 8012e86:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012e8a:	4621      	mov	r1, r4
 8012e8c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012e90:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012e94:	ee14 2a90 	vmov	r2, s9
 8012e98:	3230      	adds	r2, #48	; 0x30
 8012e9a:	f808 2b01 	strb.w	r2, [r8], #1
 8012e9e:	45a0      	cmp	r8, r4
 8012ea0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012ea4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012ea8:	d118      	bne.n	8012edc <_dtoa_r+0x58c>
 8012eaa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012eae:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012eb2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eba:	dc4d      	bgt.n	8012f58 <_dtoa_r+0x608>
 8012ebc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012ec0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec8:	f57f af33 	bpl.w	8012d32 <_dtoa_r+0x3e2>
 8012ecc:	4688      	mov	r8, r1
 8012ece:	3901      	subs	r1, #1
 8012ed0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012ed4:	2b30      	cmp	r3, #48	; 0x30
 8012ed6:	d0f9      	beq.n	8012ecc <_dtoa_r+0x57c>
 8012ed8:	46bb      	mov	fp, r7
 8012eda:	e02a      	b.n	8012f32 <_dtoa_r+0x5e2>
 8012edc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012ee0:	e7d6      	b.n	8012e90 <_dtoa_r+0x540>
 8012ee2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ee6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012eea:	f8dd 8000 	ldr.w	r8, [sp]
 8012eee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012ef2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012ef6:	ee15 3a10 	vmov	r3, s10
 8012efa:	3330      	adds	r3, #48	; 0x30
 8012efc:	f808 3b01 	strb.w	r3, [r8], #1
 8012f00:	9b00      	ldr	r3, [sp, #0]
 8012f02:	eba8 0303 	sub.w	r3, r8, r3
 8012f06:	4599      	cmp	r9, r3
 8012f08:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012f0c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012f10:	d133      	bne.n	8012f7a <_dtoa_r+0x62a>
 8012f12:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012f16:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f1e:	dc1a      	bgt.n	8012f56 <_dtoa_r+0x606>
 8012f20:	eeb4 7b46 	vcmp.f64	d7, d6
 8012f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f28:	d103      	bne.n	8012f32 <_dtoa_r+0x5e2>
 8012f2a:	ee15 3a10 	vmov	r3, s10
 8012f2e:	07d9      	lsls	r1, r3, #31
 8012f30:	d411      	bmi.n	8012f56 <_dtoa_r+0x606>
 8012f32:	4629      	mov	r1, r5
 8012f34:	4630      	mov	r0, r6
 8012f36:	f000 fd07 	bl	8013948 <_Bfree>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012f3e:	f888 3000 	strb.w	r3, [r8]
 8012f42:	f10b 0301 	add.w	r3, fp, #1
 8012f46:	6013      	str	r3, [r2, #0]
 8012f48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	f43f ad4d 	beq.w	80129ea <_dtoa_r+0x9a>
 8012f50:	f8c3 8000 	str.w	r8, [r3]
 8012f54:	e549      	b.n	80129ea <_dtoa_r+0x9a>
 8012f56:	465f      	mov	r7, fp
 8012f58:	4643      	mov	r3, r8
 8012f5a:	4698      	mov	r8, r3
 8012f5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f60:	2a39      	cmp	r2, #57	; 0x39
 8012f62:	d106      	bne.n	8012f72 <_dtoa_r+0x622>
 8012f64:	9a00      	ldr	r2, [sp, #0]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d1f7      	bne.n	8012f5a <_dtoa_r+0x60a>
 8012f6a:	9900      	ldr	r1, [sp, #0]
 8012f6c:	2230      	movs	r2, #48	; 0x30
 8012f6e:	3701      	adds	r7, #1
 8012f70:	700a      	strb	r2, [r1, #0]
 8012f72:	781a      	ldrb	r2, [r3, #0]
 8012f74:	3201      	adds	r2, #1
 8012f76:	701a      	strb	r2, [r3, #0]
 8012f78:	e7ae      	b.n	8012ed8 <_dtoa_r+0x588>
 8012f7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012f7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f86:	d1b2      	bne.n	8012eee <_dtoa_r+0x59e>
 8012f88:	e7d3      	b.n	8012f32 <_dtoa_r+0x5e2>
 8012f8a:	bf00      	nop
 8012f8c:	080152a8 	.word	0x080152a8
 8012f90:	08015280 	.word	0x08015280
 8012f94:	9908      	ldr	r1, [sp, #32]
 8012f96:	2900      	cmp	r1, #0
 8012f98:	f000 80d1 	beq.w	801313e <_dtoa_r+0x7ee>
 8012f9c:	9907      	ldr	r1, [sp, #28]
 8012f9e:	2901      	cmp	r1, #1
 8012fa0:	f300 80b4 	bgt.w	801310c <_dtoa_r+0x7bc>
 8012fa4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012fa6:	2900      	cmp	r1, #0
 8012fa8:	f000 80ac 	beq.w	8013104 <_dtoa_r+0x7b4>
 8012fac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012fb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012fb4:	461c      	mov	r4, r3
 8012fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8012fb8:	9b05      	ldr	r3, [sp, #20]
 8012fba:	4413      	add	r3, r2
 8012fbc:	9305      	str	r3, [sp, #20]
 8012fbe:	9b06      	ldr	r3, [sp, #24]
 8012fc0:	2101      	movs	r1, #1
 8012fc2:	4413      	add	r3, r2
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	9306      	str	r3, [sp, #24]
 8012fc8:	f000 fd7a 	bl	8013ac0 <__i2b>
 8012fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fce:	4607      	mov	r7, r0
 8012fd0:	f1b8 0f00 	cmp.w	r8, #0
 8012fd4:	dd0d      	ble.n	8012ff2 <_dtoa_r+0x6a2>
 8012fd6:	9a06      	ldr	r2, [sp, #24]
 8012fd8:	2a00      	cmp	r2, #0
 8012fda:	dd0a      	ble.n	8012ff2 <_dtoa_r+0x6a2>
 8012fdc:	4542      	cmp	r2, r8
 8012fde:	9905      	ldr	r1, [sp, #20]
 8012fe0:	bfa8      	it	ge
 8012fe2:	4642      	movge	r2, r8
 8012fe4:	1a89      	subs	r1, r1, r2
 8012fe6:	9105      	str	r1, [sp, #20]
 8012fe8:	9906      	ldr	r1, [sp, #24]
 8012fea:	eba8 0802 	sub.w	r8, r8, r2
 8012fee:	1a8a      	subs	r2, r1, r2
 8012ff0:	9206      	str	r2, [sp, #24]
 8012ff2:	b303      	cbz	r3, 8013036 <_dtoa_r+0x6e6>
 8012ff4:	9a08      	ldr	r2, [sp, #32]
 8012ff6:	2a00      	cmp	r2, #0
 8012ff8:	f000 80a6 	beq.w	8013148 <_dtoa_r+0x7f8>
 8012ffc:	2c00      	cmp	r4, #0
 8012ffe:	dd13      	ble.n	8013028 <_dtoa_r+0x6d8>
 8013000:	4639      	mov	r1, r7
 8013002:	4622      	mov	r2, r4
 8013004:	4630      	mov	r0, r6
 8013006:	930c      	str	r3, [sp, #48]	; 0x30
 8013008:	f000 fe16 	bl	8013c38 <__pow5mult>
 801300c:	462a      	mov	r2, r5
 801300e:	4601      	mov	r1, r0
 8013010:	4607      	mov	r7, r0
 8013012:	4630      	mov	r0, r6
 8013014:	f000 fd6a 	bl	8013aec <__multiply>
 8013018:	4629      	mov	r1, r5
 801301a:	900a      	str	r0, [sp, #40]	; 0x28
 801301c:	4630      	mov	r0, r6
 801301e:	f000 fc93 	bl	8013948 <_Bfree>
 8013022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013026:	4615      	mov	r5, r2
 8013028:	1b1a      	subs	r2, r3, r4
 801302a:	d004      	beq.n	8013036 <_dtoa_r+0x6e6>
 801302c:	4629      	mov	r1, r5
 801302e:	4630      	mov	r0, r6
 8013030:	f000 fe02 	bl	8013c38 <__pow5mult>
 8013034:	4605      	mov	r5, r0
 8013036:	2101      	movs	r1, #1
 8013038:	4630      	mov	r0, r6
 801303a:	f000 fd41 	bl	8013ac0 <__i2b>
 801303e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013040:	2b00      	cmp	r3, #0
 8013042:	4604      	mov	r4, r0
 8013044:	f340 8082 	ble.w	801314c <_dtoa_r+0x7fc>
 8013048:	461a      	mov	r2, r3
 801304a:	4601      	mov	r1, r0
 801304c:	4630      	mov	r0, r6
 801304e:	f000 fdf3 	bl	8013c38 <__pow5mult>
 8013052:	9b07      	ldr	r3, [sp, #28]
 8013054:	2b01      	cmp	r3, #1
 8013056:	4604      	mov	r4, r0
 8013058:	dd7b      	ble.n	8013152 <_dtoa_r+0x802>
 801305a:	2300      	movs	r3, #0
 801305c:	930a      	str	r3, [sp, #40]	; 0x28
 801305e:	6922      	ldr	r2, [r4, #16]
 8013060:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013064:	6910      	ldr	r0, [r2, #16]
 8013066:	f000 fcdb 	bl	8013a20 <__hi0bits>
 801306a:	f1c0 0020 	rsb	r0, r0, #32
 801306e:	9b06      	ldr	r3, [sp, #24]
 8013070:	4418      	add	r0, r3
 8013072:	f010 001f 	ands.w	r0, r0, #31
 8013076:	f000 808d 	beq.w	8013194 <_dtoa_r+0x844>
 801307a:	f1c0 0220 	rsb	r2, r0, #32
 801307e:	2a04      	cmp	r2, #4
 8013080:	f340 8086 	ble.w	8013190 <_dtoa_r+0x840>
 8013084:	f1c0 001c 	rsb	r0, r0, #28
 8013088:	9b05      	ldr	r3, [sp, #20]
 801308a:	4403      	add	r3, r0
 801308c:	9305      	str	r3, [sp, #20]
 801308e:	9b06      	ldr	r3, [sp, #24]
 8013090:	4403      	add	r3, r0
 8013092:	4480      	add	r8, r0
 8013094:	9306      	str	r3, [sp, #24]
 8013096:	9b05      	ldr	r3, [sp, #20]
 8013098:	2b00      	cmp	r3, #0
 801309a:	dd05      	ble.n	80130a8 <_dtoa_r+0x758>
 801309c:	4629      	mov	r1, r5
 801309e:	461a      	mov	r2, r3
 80130a0:	4630      	mov	r0, r6
 80130a2:	f000 fe23 	bl	8013cec <__lshift>
 80130a6:	4605      	mov	r5, r0
 80130a8:	9b06      	ldr	r3, [sp, #24]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	dd05      	ble.n	80130ba <_dtoa_r+0x76a>
 80130ae:	4621      	mov	r1, r4
 80130b0:	461a      	mov	r2, r3
 80130b2:	4630      	mov	r0, r6
 80130b4:	f000 fe1a 	bl	8013cec <__lshift>
 80130b8:	4604      	mov	r4, r0
 80130ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d06b      	beq.n	8013198 <_dtoa_r+0x848>
 80130c0:	4621      	mov	r1, r4
 80130c2:	4628      	mov	r0, r5
 80130c4:	f000 fe7e 	bl	8013dc4 <__mcmp>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	da65      	bge.n	8013198 <_dtoa_r+0x848>
 80130cc:	2300      	movs	r3, #0
 80130ce:	4629      	mov	r1, r5
 80130d0:	220a      	movs	r2, #10
 80130d2:	4630      	mov	r0, r6
 80130d4:	f000 fc5a 	bl	801398c <__multadd>
 80130d8:	9b08      	ldr	r3, [sp, #32]
 80130da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80130de:	4605      	mov	r5, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	f000 8192 	beq.w	801340a <_dtoa_r+0xaba>
 80130e6:	4639      	mov	r1, r7
 80130e8:	2300      	movs	r3, #0
 80130ea:	220a      	movs	r2, #10
 80130ec:	4630      	mov	r0, r6
 80130ee:	f000 fc4d 	bl	801398c <__multadd>
 80130f2:	f1ba 0f00 	cmp.w	sl, #0
 80130f6:	4607      	mov	r7, r0
 80130f8:	f300 808e 	bgt.w	8013218 <_dtoa_r+0x8c8>
 80130fc:	9b07      	ldr	r3, [sp, #28]
 80130fe:	2b02      	cmp	r3, #2
 8013100:	dc51      	bgt.n	80131a6 <_dtoa_r+0x856>
 8013102:	e089      	b.n	8013218 <_dtoa_r+0x8c8>
 8013104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013106:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801310a:	e751      	b.n	8012fb0 <_dtoa_r+0x660>
 801310c:	f109 34ff 	add.w	r4, r9, #4294967295
 8013110:	42a3      	cmp	r3, r4
 8013112:	bfbf      	itttt	lt
 8013114:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8013116:	1ae3      	sublt	r3, r4, r3
 8013118:	18d2      	addlt	r2, r2, r3
 801311a:	4613      	movlt	r3, r2
 801311c:	bfb7      	itett	lt
 801311e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013120:	1b1c      	subge	r4, r3, r4
 8013122:	4623      	movlt	r3, r4
 8013124:	2400      	movlt	r4, #0
 8013126:	f1b9 0f00 	cmp.w	r9, #0
 801312a:	bfb5      	itete	lt
 801312c:	9a05      	ldrlt	r2, [sp, #20]
 801312e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8013132:	eba2 0809 	sublt.w	r8, r2, r9
 8013136:	464a      	movge	r2, r9
 8013138:	bfb8      	it	lt
 801313a:	2200      	movlt	r2, #0
 801313c:	e73b      	b.n	8012fb6 <_dtoa_r+0x666>
 801313e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013142:	9f08      	ldr	r7, [sp, #32]
 8013144:	461c      	mov	r4, r3
 8013146:	e743      	b.n	8012fd0 <_dtoa_r+0x680>
 8013148:	461a      	mov	r2, r3
 801314a:	e76f      	b.n	801302c <_dtoa_r+0x6dc>
 801314c:	9b07      	ldr	r3, [sp, #28]
 801314e:	2b01      	cmp	r3, #1
 8013150:	dc18      	bgt.n	8013184 <_dtoa_r+0x834>
 8013152:	9b02      	ldr	r3, [sp, #8]
 8013154:	b9b3      	cbnz	r3, 8013184 <_dtoa_r+0x834>
 8013156:	9b03      	ldr	r3, [sp, #12]
 8013158:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801315c:	b9a2      	cbnz	r2, 8013188 <_dtoa_r+0x838>
 801315e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013162:	0d12      	lsrs	r2, r2, #20
 8013164:	0512      	lsls	r2, r2, #20
 8013166:	b18a      	cbz	r2, 801318c <_dtoa_r+0x83c>
 8013168:	9b05      	ldr	r3, [sp, #20]
 801316a:	3301      	adds	r3, #1
 801316c:	9305      	str	r3, [sp, #20]
 801316e:	9b06      	ldr	r3, [sp, #24]
 8013170:	3301      	adds	r3, #1
 8013172:	9306      	str	r3, [sp, #24]
 8013174:	2301      	movs	r3, #1
 8013176:	930a      	str	r3, [sp, #40]	; 0x28
 8013178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801317a:	2b00      	cmp	r3, #0
 801317c:	f47f af6f 	bne.w	801305e <_dtoa_r+0x70e>
 8013180:	2001      	movs	r0, #1
 8013182:	e774      	b.n	801306e <_dtoa_r+0x71e>
 8013184:	2300      	movs	r3, #0
 8013186:	e7f6      	b.n	8013176 <_dtoa_r+0x826>
 8013188:	9b02      	ldr	r3, [sp, #8]
 801318a:	e7f4      	b.n	8013176 <_dtoa_r+0x826>
 801318c:	920a      	str	r2, [sp, #40]	; 0x28
 801318e:	e7f3      	b.n	8013178 <_dtoa_r+0x828>
 8013190:	d081      	beq.n	8013096 <_dtoa_r+0x746>
 8013192:	4610      	mov	r0, r2
 8013194:	301c      	adds	r0, #28
 8013196:	e777      	b.n	8013088 <_dtoa_r+0x738>
 8013198:	f1b9 0f00 	cmp.w	r9, #0
 801319c:	dc37      	bgt.n	801320e <_dtoa_r+0x8be>
 801319e:	9b07      	ldr	r3, [sp, #28]
 80131a0:	2b02      	cmp	r3, #2
 80131a2:	dd34      	ble.n	801320e <_dtoa_r+0x8be>
 80131a4:	46ca      	mov	sl, r9
 80131a6:	f1ba 0f00 	cmp.w	sl, #0
 80131aa:	d10d      	bne.n	80131c8 <_dtoa_r+0x878>
 80131ac:	4621      	mov	r1, r4
 80131ae:	4653      	mov	r3, sl
 80131b0:	2205      	movs	r2, #5
 80131b2:	4630      	mov	r0, r6
 80131b4:	f000 fbea 	bl	801398c <__multadd>
 80131b8:	4601      	mov	r1, r0
 80131ba:	4604      	mov	r4, r0
 80131bc:	4628      	mov	r0, r5
 80131be:	f000 fe01 	bl	8013dc4 <__mcmp>
 80131c2:	2800      	cmp	r0, #0
 80131c4:	f73f adde 	bgt.w	8012d84 <_dtoa_r+0x434>
 80131c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131ca:	f8dd 8000 	ldr.w	r8, [sp]
 80131ce:	ea6f 0b03 	mvn.w	fp, r3
 80131d2:	f04f 0900 	mov.w	r9, #0
 80131d6:	4621      	mov	r1, r4
 80131d8:	4630      	mov	r0, r6
 80131da:	f000 fbb5 	bl	8013948 <_Bfree>
 80131de:	2f00      	cmp	r7, #0
 80131e0:	f43f aea7 	beq.w	8012f32 <_dtoa_r+0x5e2>
 80131e4:	f1b9 0f00 	cmp.w	r9, #0
 80131e8:	d005      	beq.n	80131f6 <_dtoa_r+0x8a6>
 80131ea:	45b9      	cmp	r9, r7
 80131ec:	d003      	beq.n	80131f6 <_dtoa_r+0x8a6>
 80131ee:	4649      	mov	r1, r9
 80131f0:	4630      	mov	r0, r6
 80131f2:	f000 fba9 	bl	8013948 <_Bfree>
 80131f6:	4639      	mov	r1, r7
 80131f8:	4630      	mov	r0, r6
 80131fa:	f000 fba5 	bl	8013948 <_Bfree>
 80131fe:	e698      	b.n	8012f32 <_dtoa_r+0x5e2>
 8013200:	2400      	movs	r4, #0
 8013202:	4627      	mov	r7, r4
 8013204:	e7e0      	b.n	80131c8 <_dtoa_r+0x878>
 8013206:	46bb      	mov	fp, r7
 8013208:	4604      	mov	r4, r0
 801320a:	4607      	mov	r7, r0
 801320c:	e5ba      	b.n	8012d84 <_dtoa_r+0x434>
 801320e:	9b08      	ldr	r3, [sp, #32]
 8013210:	46ca      	mov	sl, r9
 8013212:	2b00      	cmp	r3, #0
 8013214:	f000 8100 	beq.w	8013418 <_dtoa_r+0xac8>
 8013218:	f1b8 0f00 	cmp.w	r8, #0
 801321c:	dd05      	ble.n	801322a <_dtoa_r+0x8da>
 801321e:	4639      	mov	r1, r7
 8013220:	4642      	mov	r2, r8
 8013222:	4630      	mov	r0, r6
 8013224:	f000 fd62 	bl	8013cec <__lshift>
 8013228:	4607      	mov	r7, r0
 801322a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801322c:	2b00      	cmp	r3, #0
 801322e:	d05d      	beq.n	80132ec <_dtoa_r+0x99c>
 8013230:	6879      	ldr	r1, [r7, #4]
 8013232:	4630      	mov	r0, r6
 8013234:	f000 fb48 	bl	80138c8 <_Balloc>
 8013238:	4680      	mov	r8, r0
 801323a:	b928      	cbnz	r0, 8013248 <_dtoa_r+0x8f8>
 801323c:	4b82      	ldr	r3, [pc, #520]	; (8013448 <_dtoa_r+0xaf8>)
 801323e:	4602      	mov	r2, r0
 8013240:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013244:	f7ff bb9a 	b.w	801297c <_dtoa_r+0x2c>
 8013248:	693a      	ldr	r2, [r7, #16]
 801324a:	3202      	adds	r2, #2
 801324c:	0092      	lsls	r2, r2, #2
 801324e:	f107 010c 	add.w	r1, r7, #12
 8013252:	300c      	adds	r0, #12
 8013254:	f000 fb2a 	bl	80138ac <memcpy>
 8013258:	2201      	movs	r2, #1
 801325a:	4641      	mov	r1, r8
 801325c:	4630      	mov	r0, r6
 801325e:	f000 fd45 	bl	8013cec <__lshift>
 8013262:	9b00      	ldr	r3, [sp, #0]
 8013264:	3301      	adds	r3, #1
 8013266:	9305      	str	r3, [sp, #20]
 8013268:	9b00      	ldr	r3, [sp, #0]
 801326a:	4453      	add	r3, sl
 801326c:	9309      	str	r3, [sp, #36]	; 0x24
 801326e:	9b02      	ldr	r3, [sp, #8]
 8013270:	f003 0301 	and.w	r3, r3, #1
 8013274:	46b9      	mov	r9, r7
 8013276:	9308      	str	r3, [sp, #32]
 8013278:	4607      	mov	r7, r0
 801327a:	9b05      	ldr	r3, [sp, #20]
 801327c:	4621      	mov	r1, r4
 801327e:	3b01      	subs	r3, #1
 8013280:	4628      	mov	r0, r5
 8013282:	9302      	str	r3, [sp, #8]
 8013284:	f7ff fad8 	bl	8012838 <quorem>
 8013288:	4603      	mov	r3, r0
 801328a:	3330      	adds	r3, #48	; 0x30
 801328c:	9006      	str	r0, [sp, #24]
 801328e:	4649      	mov	r1, r9
 8013290:	4628      	mov	r0, r5
 8013292:	930a      	str	r3, [sp, #40]	; 0x28
 8013294:	f000 fd96 	bl	8013dc4 <__mcmp>
 8013298:	463a      	mov	r2, r7
 801329a:	4682      	mov	sl, r0
 801329c:	4621      	mov	r1, r4
 801329e:	4630      	mov	r0, r6
 80132a0:	f000 fdac 	bl	8013dfc <__mdiff>
 80132a4:	68c2      	ldr	r2, [r0, #12]
 80132a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132a8:	4680      	mov	r8, r0
 80132aa:	bb0a      	cbnz	r2, 80132f0 <_dtoa_r+0x9a0>
 80132ac:	4601      	mov	r1, r0
 80132ae:	4628      	mov	r0, r5
 80132b0:	f000 fd88 	bl	8013dc4 <__mcmp>
 80132b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132b6:	4602      	mov	r2, r0
 80132b8:	4641      	mov	r1, r8
 80132ba:	4630      	mov	r0, r6
 80132bc:	920e      	str	r2, [sp, #56]	; 0x38
 80132be:	930a      	str	r3, [sp, #40]	; 0x28
 80132c0:	f000 fb42 	bl	8013948 <_Bfree>
 80132c4:	9b07      	ldr	r3, [sp, #28]
 80132c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80132c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80132cc:	ea43 0102 	orr.w	r1, r3, r2
 80132d0:	9b08      	ldr	r3, [sp, #32]
 80132d2:	430b      	orrs	r3, r1
 80132d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132d6:	d10d      	bne.n	80132f4 <_dtoa_r+0x9a4>
 80132d8:	2b39      	cmp	r3, #57	; 0x39
 80132da:	d029      	beq.n	8013330 <_dtoa_r+0x9e0>
 80132dc:	f1ba 0f00 	cmp.w	sl, #0
 80132e0:	dd01      	ble.n	80132e6 <_dtoa_r+0x996>
 80132e2:	9b06      	ldr	r3, [sp, #24]
 80132e4:	3331      	adds	r3, #49	; 0x31
 80132e6:	9a02      	ldr	r2, [sp, #8]
 80132e8:	7013      	strb	r3, [r2, #0]
 80132ea:	e774      	b.n	80131d6 <_dtoa_r+0x886>
 80132ec:	4638      	mov	r0, r7
 80132ee:	e7b8      	b.n	8013262 <_dtoa_r+0x912>
 80132f0:	2201      	movs	r2, #1
 80132f2:	e7e1      	b.n	80132b8 <_dtoa_r+0x968>
 80132f4:	f1ba 0f00 	cmp.w	sl, #0
 80132f8:	db06      	blt.n	8013308 <_dtoa_r+0x9b8>
 80132fa:	9907      	ldr	r1, [sp, #28]
 80132fc:	ea41 0a0a 	orr.w	sl, r1, sl
 8013300:	9908      	ldr	r1, [sp, #32]
 8013302:	ea5a 0101 	orrs.w	r1, sl, r1
 8013306:	d120      	bne.n	801334a <_dtoa_r+0x9fa>
 8013308:	2a00      	cmp	r2, #0
 801330a:	ddec      	ble.n	80132e6 <_dtoa_r+0x996>
 801330c:	4629      	mov	r1, r5
 801330e:	2201      	movs	r2, #1
 8013310:	4630      	mov	r0, r6
 8013312:	9305      	str	r3, [sp, #20]
 8013314:	f000 fcea 	bl	8013cec <__lshift>
 8013318:	4621      	mov	r1, r4
 801331a:	4605      	mov	r5, r0
 801331c:	f000 fd52 	bl	8013dc4 <__mcmp>
 8013320:	2800      	cmp	r0, #0
 8013322:	9b05      	ldr	r3, [sp, #20]
 8013324:	dc02      	bgt.n	801332c <_dtoa_r+0x9dc>
 8013326:	d1de      	bne.n	80132e6 <_dtoa_r+0x996>
 8013328:	07da      	lsls	r2, r3, #31
 801332a:	d5dc      	bpl.n	80132e6 <_dtoa_r+0x996>
 801332c:	2b39      	cmp	r3, #57	; 0x39
 801332e:	d1d8      	bne.n	80132e2 <_dtoa_r+0x992>
 8013330:	9a02      	ldr	r2, [sp, #8]
 8013332:	2339      	movs	r3, #57	; 0x39
 8013334:	7013      	strb	r3, [r2, #0]
 8013336:	4643      	mov	r3, r8
 8013338:	4698      	mov	r8, r3
 801333a:	3b01      	subs	r3, #1
 801333c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8013340:	2a39      	cmp	r2, #57	; 0x39
 8013342:	d051      	beq.n	80133e8 <_dtoa_r+0xa98>
 8013344:	3201      	adds	r2, #1
 8013346:	701a      	strb	r2, [r3, #0]
 8013348:	e745      	b.n	80131d6 <_dtoa_r+0x886>
 801334a:	2a00      	cmp	r2, #0
 801334c:	dd03      	ble.n	8013356 <_dtoa_r+0xa06>
 801334e:	2b39      	cmp	r3, #57	; 0x39
 8013350:	d0ee      	beq.n	8013330 <_dtoa_r+0x9e0>
 8013352:	3301      	adds	r3, #1
 8013354:	e7c7      	b.n	80132e6 <_dtoa_r+0x996>
 8013356:	9a05      	ldr	r2, [sp, #20]
 8013358:	9909      	ldr	r1, [sp, #36]	; 0x24
 801335a:	f802 3c01 	strb.w	r3, [r2, #-1]
 801335e:	428a      	cmp	r2, r1
 8013360:	d02b      	beq.n	80133ba <_dtoa_r+0xa6a>
 8013362:	4629      	mov	r1, r5
 8013364:	2300      	movs	r3, #0
 8013366:	220a      	movs	r2, #10
 8013368:	4630      	mov	r0, r6
 801336a:	f000 fb0f 	bl	801398c <__multadd>
 801336e:	45b9      	cmp	r9, r7
 8013370:	4605      	mov	r5, r0
 8013372:	f04f 0300 	mov.w	r3, #0
 8013376:	f04f 020a 	mov.w	r2, #10
 801337a:	4649      	mov	r1, r9
 801337c:	4630      	mov	r0, r6
 801337e:	d107      	bne.n	8013390 <_dtoa_r+0xa40>
 8013380:	f000 fb04 	bl	801398c <__multadd>
 8013384:	4681      	mov	r9, r0
 8013386:	4607      	mov	r7, r0
 8013388:	9b05      	ldr	r3, [sp, #20]
 801338a:	3301      	adds	r3, #1
 801338c:	9305      	str	r3, [sp, #20]
 801338e:	e774      	b.n	801327a <_dtoa_r+0x92a>
 8013390:	f000 fafc 	bl	801398c <__multadd>
 8013394:	4639      	mov	r1, r7
 8013396:	4681      	mov	r9, r0
 8013398:	2300      	movs	r3, #0
 801339a:	220a      	movs	r2, #10
 801339c:	4630      	mov	r0, r6
 801339e:	f000 faf5 	bl	801398c <__multadd>
 80133a2:	4607      	mov	r7, r0
 80133a4:	e7f0      	b.n	8013388 <_dtoa_r+0xa38>
 80133a6:	f1ba 0f00 	cmp.w	sl, #0
 80133aa:	9a00      	ldr	r2, [sp, #0]
 80133ac:	bfcc      	ite	gt
 80133ae:	46d0      	movgt	r8, sl
 80133b0:	f04f 0801 	movle.w	r8, #1
 80133b4:	4490      	add	r8, r2
 80133b6:	f04f 0900 	mov.w	r9, #0
 80133ba:	4629      	mov	r1, r5
 80133bc:	2201      	movs	r2, #1
 80133be:	4630      	mov	r0, r6
 80133c0:	9302      	str	r3, [sp, #8]
 80133c2:	f000 fc93 	bl	8013cec <__lshift>
 80133c6:	4621      	mov	r1, r4
 80133c8:	4605      	mov	r5, r0
 80133ca:	f000 fcfb 	bl	8013dc4 <__mcmp>
 80133ce:	2800      	cmp	r0, #0
 80133d0:	dcb1      	bgt.n	8013336 <_dtoa_r+0x9e6>
 80133d2:	d102      	bne.n	80133da <_dtoa_r+0xa8a>
 80133d4:	9b02      	ldr	r3, [sp, #8]
 80133d6:	07db      	lsls	r3, r3, #31
 80133d8:	d4ad      	bmi.n	8013336 <_dtoa_r+0x9e6>
 80133da:	4643      	mov	r3, r8
 80133dc:	4698      	mov	r8, r3
 80133de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80133e2:	2a30      	cmp	r2, #48	; 0x30
 80133e4:	d0fa      	beq.n	80133dc <_dtoa_r+0xa8c>
 80133e6:	e6f6      	b.n	80131d6 <_dtoa_r+0x886>
 80133e8:	9a00      	ldr	r2, [sp, #0]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d1a4      	bne.n	8013338 <_dtoa_r+0x9e8>
 80133ee:	f10b 0b01 	add.w	fp, fp, #1
 80133f2:	2331      	movs	r3, #49	; 0x31
 80133f4:	e778      	b.n	80132e8 <_dtoa_r+0x998>
 80133f6:	4b15      	ldr	r3, [pc, #84]	; (801344c <_dtoa_r+0xafc>)
 80133f8:	f7ff bb12 	b.w	8012a20 <_dtoa_r+0xd0>
 80133fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80133fe:	2b00      	cmp	r3, #0
 8013400:	f47f aaee 	bne.w	80129e0 <_dtoa_r+0x90>
 8013404:	4b12      	ldr	r3, [pc, #72]	; (8013450 <_dtoa_r+0xb00>)
 8013406:	f7ff bb0b 	b.w	8012a20 <_dtoa_r+0xd0>
 801340a:	f1ba 0f00 	cmp.w	sl, #0
 801340e:	dc03      	bgt.n	8013418 <_dtoa_r+0xac8>
 8013410:	9b07      	ldr	r3, [sp, #28]
 8013412:	2b02      	cmp	r3, #2
 8013414:	f73f aec7 	bgt.w	80131a6 <_dtoa_r+0x856>
 8013418:	f8dd 8000 	ldr.w	r8, [sp]
 801341c:	4621      	mov	r1, r4
 801341e:	4628      	mov	r0, r5
 8013420:	f7ff fa0a 	bl	8012838 <quorem>
 8013424:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013428:	f808 3b01 	strb.w	r3, [r8], #1
 801342c:	9a00      	ldr	r2, [sp, #0]
 801342e:	eba8 0202 	sub.w	r2, r8, r2
 8013432:	4592      	cmp	sl, r2
 8013434:	ddb7      	ble.n	80133a6 <_dtoa_r+0xa56>
 8013436:	4629      	mov	r1, r5
 8013438:	2300      	movs	r3, #0
 801343a:	220a      	movs	r2, #10
 801343c:	4630      	mov	r0, r6
 801343e:	f000 faa5 	bl	801398c <__multadd>
 8013442:	4605      	mov	r5, r0
 8013444:	e7ea      	b.n	801341c <_dtoa_r+0xacc>
 8013446:	bf00      	nop
 8013448:	080151af 	.word	0x080151af
 801344c:	08015108 	.word	0x08015108
 8013450:	0801512c 	.word	0x0801512c

08013454 <__sflush_r>:
 8013454:	898a      	ldrh	r2, [r1, #12]
 8013456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801345a:	4605      	mov	r5, r0
 801345c:	0710      	lsls	r0, r2, #28
 801345e:	460c      	mov	r4, r1
 8013460:	d458      	bmi.n	8013514 <__sflush_r+0xc0>
 8013462:	684b      	ldr	r3, [r1, #4]
 8013464:	2b00      	cmp	r3, #0
 8013466:	dc05      	bgt.n	8013474 <__sflush_r+0x20>
 8013468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801346a:	2b00      	cmp	r3, #0
 801346c:	dc02      	bgt.n	8013474 <__sflush_r+0x20>
 801346e:	2000      	movs	r0, #0
 8013470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013476:	2e00      	cmp	r6, #0
 8013478:	d0f9      	beq.n	801346e <__sflush_r+0x1a>
 801347a:	2300      	movs	r3, #0
 801347c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013480:	682f      	ldr	r7, [r5, #0]
 8013482:	602b      	str	r3, [r5, #0]
 8013484:	d032      	beq.n	80134ec <__sflush_r+0x98>
 8013486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013488:	89a3      	ldrh	r3, [r4, #12]
 801348a:	075a      	lsls	r2, r3, #29
 801348c:	d505      	bpl.n	801349a <__sflush_r+0x46>
 801348e:	6863      	ldr	r3, [r4, #4]
 8013490:	1ac0      	subs	r0, r0, r3
 8013492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013494:	b10b      	cbz	r3, 801349a <__sflush_r+0x46>
 8013496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013498:	1ac0      	subs	r0, r0, r3
 801349a:	2300      	movs	r3, #0
 801349c:	4602      	mov	r2, r0
 801349e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134a0:	6a21      	ldr	r1, [r4, #32]
 80134a2:	4628      	mov	r0, r5
 80134a4:	47b0      	blx	r6
 80134a6:	1c43      	adds	r3, r0, #1
 80134a8:	89a3      	ldrh	r3, [r4, #12]
 80134aa:	d106      	bne.n	80134ba <__sflush_r+0x66>
 80134ac:	6829      	ldr	r1, [r5, #0]
 80134ae:	291d      	cmp	r1, #29
 80134b0:	d82c      	bhi.n	801350c <__sflush_r+0xb8>
 80134b2:	4a2a      	ldr	r2, [pc, #168]	; (801355c <__sflush_r+0x108>)
 80134b4:	40ca      	lsrs	r2, r1
 80134b6:	07d6      	lsls	r6, r2, #31
 80134b8:	d528      	bpl.n	801350c <__sflush_r+0xb8>
 80134ba:	2200      	movs	r2, #0
 80134bc:	6062      	str	r2, [r4, #4]
 80134be:	04d9      	lsls	r1, r3, #19
 80134c0:	6922      	ldr	r2, [r4, #16]
 80134c2:	6022      	str	r2, [r4, #0]
 80134c4:	d504      	bpl.n	80134d0 <__sflush_r+0x7c>
 80134c6:	1c42      	adds	r2, r0, #1
 80134c8:	d101      	bne.n	80134ce <__sflush_r+0x7a>
 80134ca:	682b      	ldr	r3, [r5, #0]
 80134cc:	b903      	cbnz	r3, 80134d0 <__sflush_r+0x7c>
 80134ce:	6560      	str	r0, [r4, #84]	; 0x54
 80134d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134d2:	602f      	str	r7, [r5, #0]
 80134d4:	2900      	cmp	r1, #0
 80134d6:	d0ca      	beq.n	801346e <__sflush_r+0x1a>
 80134d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80134dc:	4299      	cmp	r1, r3
 80134de:	d002      	beq.n	80134e6 <__sflush_r+0x92>
 80134e0:	4628      	mov	r0, r5
 80134e2:	f000 fd7f 	bl	8013fe4 <_free_r>
 80134e6:	2000      	movs	r0, #0
 80134e8:	6360      	str	r0, [r4, #52]	; 0x34
 80134ea:	e7c1      	b.n	8013470 <__sflush_r+0x1c>
 80134ec:	6a21      	ldr	r1, [r4, #32]
 80134ee:	2301      	movs	r3, #1
 80134f0:	4628      	mov	r0, r5
 80134f2:	47b0      	blx	r6
 80134f4:	1c41      	adds	r1, r0, #1
 80134f6:	d1c7      	bne.n	8013488 <__sflush_r+0x34>
 80134f8:	682b      	ldr	r3, [r5, #0]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d0c4      	beq.n	8013488 <__sflush_r+0x34>
 80134fe:	2b1d      	cmp	r3, #29
 8013500:	d001      	beq.n	8013506 <__sflush_r+0xb2>
 8013502:	2b16      	cmp	r3, #22
 8013504:	d101      	bne.n	801350a <__sflush_r+0xb6>
 8013506:	602f      	str	r7, [r5, #0]
 8013508:	e7b1      	b.n	801346e <__sflush_r+0x1a>
 801350a:	89a3      	ldrh	r3, [r4, #12]
 801350c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013510:	81a3      	strh	r3, [r4, #12]
 8013512:	e7ad      	b.n	8013470 <__sflush_r+0x1c>
 8013514:	690f      	ldr	r7, [r1, #16]
 8013516:	2f00      	cmp	r7, #0
 8013518:	d0a9      	beq.n	801346e <__sflush_r+0x1a>
 801351a:	0793      	lsls	r3, r2, #30
 801351c:	680e      	ldr	r6, [r1, #0]
 801351e:	bf08      	it	eq
 8013520:	694b      	ldreq	r3, [r1, #20]
 8013522:	600f      	str	r7, [r1, #0]
 8013524:	bf18      	it	ne
 8013526:	2300      	movne	r3, #0
 8013528:	eba6 0807 	sub.w	r8, r6, r7
 801352c:	608b      	str	r3, [r1, #8]
 801352e:	f1b8 0f00 	cmp.w	r8, #0
 8013532:	dd9c      	ble.n	801346e <__sflush_r+0x1a>
 8013534:	6a21      	ldr	r1, [r4, #32]
 8013536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013538:	4643      	mov	r3, r8
 801353a:	463a      	mov	r2, r7
 801353c:	4628      	mov	r0, r5
 801353e:	47b0      	blx	r6
 8013540:	2800      	cmp	r0, #0
 8013542:	dc06      	bgt.n	8013552 <__sflush_r+0xfe>
 8013544:	89a3      	ldrh	r3, [r4, #12]
 8013546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801354a:	81a3      	strh	r3, [r4, #12]
 801354c:	f04f 30ff 	mov.w	r0, #4294967295
 8013550:	e78e      	b.n	8013470 <__sflush_r+0x1c>
 8013552:	4407      	add	r7, r0
 8013554:	eba8 0800 	sub.w	r8, r8, r0
 8013558:	e7e9      	b.n	801352e <__sflush_r+0xda>
 801355a:	bf00      	nop
 801355c:	20400001 	.word	0x20400001

08013560 <_fflush_r>:
 8013560:	b538      	push	{r3, r4, r5, lr}
 8013562:	690b      	ldr	r3, [r1, #16]
 8013564:	4605      	mov	r5, r0
 8013566:	460c      	mov	r4, r1
 8013568:	b913      	cbnz	r3, 8013570 <_fflush_r+0x10>
 801356a:	2500      	movs	r5, #0
 801356c:	4628      	mov	r0, r5
 801356e:	bd38      	pop	{r3, r4, r5, pc}
 8013570:	b118      	cbz	r0, 801357a <_fflush_r+0x1a>
 8013572:	6983      	ldr	r3, [r0, #24]
 8013574:	b90b      	cbnz	r3, 801357a <_fflush_r+0x1a>
 8013576:	f000 f887 	bl	8013688 <__sinit>
 801357a:	4b14      	ldr	r3, [pc, #80]	; (80135cc <_fflush_r+0x6c>)
 801357c:	429c      	cmp	r4, r3
 801357e:	d11b      	bne.n	80135b8 <_fflush_r+0x58>
 8013580:	686c      	ldr	r4, [r5, #4]
 8013582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d0ef      	beq.n	801356a <_fflush_r+0xa>
 801358a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801358c:	07d0      	lsls	r0, r2, #31
 801358e:	d404      	bmi.n	801359a <_fflush_r+0x3a>
 8013590:	0599      	lsls	r1, r3, #22
 8013592:	d402      	bmi.n	801359a <_fflush_r+0x3a>
 8013594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013596:	f000 f91a 	bl	80137ce <__retarget_lock_acquire_recursive>
 801359a:	4628      	mov	r0, r5
 801359c:	4621      	mov	r1, r4
 801359e:	f7ff ff59 	bl	8013454 <__sflush_r>
 80135a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80135a4:	07da      	lsls	r2, r3, #31
 80135a6:	4605      	mov	r5, r0
 80135a8:	d4e0      	bmi.n	801356c <_fflush_r+0xc>
 80135aa:	89a3      	ldrh	r3, [r4, #12]
 80135ac:	059b      	lsls	r3, r3, #22
 80135ae:	d4dd      	bmi.n	801356c <_fflush_r+0xc>
 80135b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80135b2:	f000 f90d 	bl	80137d0 <__retarget_lock_release_recursive>
 80135b6:	e7d9      	b.n	801356c <_fflush_r+0xc>
 80135b8:	4b05      	ldr	r3, [pc, #20]	; (80135d0 <_fflush_r+0x70>)
 80135ba:	429c      	cmp	r4, r3
 80135bc:	d101      	bne.n	80135c2 <_fflush_r+0x62>
 80135be:	68ac      	ldr	r4, [r5, #8]
 80135c0:	e7df      	b.n	8013582 <_fflush_r+0x22>
 80135c2:	4b04      	ldr	r3, [pc, #16]	; (80135d4 <_fflush_r+0x74>)
 80135c4:	429c      	cmp	r4, r3
 80135c6:	bf08      	it	eq
 80135c8:	68ec      	ldreq	r4, [r5, #12]
 80135ca:	e7da      	b.n	8013582 <_fflush_r+0x22>
 80135cc:	080151e0 	.word	0x080151e0
 80135d0:	08015200 	.word	0x08015200
 80135d4:	080151c0 	.word	0x080151c0

080135d8 <std>:
 80135d8:	2300      	movs	r3, #0
 80135da:	b510      	push	{r4, lr}
 80135dc:	4604      	mov	r4, r0
 80135de:	e9c0 3300 	strd	r3, r3, [r0]
 80135e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80135e6:	6083      	str	r3, [r0, #8]
 80135e8:	8181      	strh	r1, [r0, #12]
 80135ea:	6643      	str	r3, [r0, #100]	; 0x64
 80135ec:	81c2      	strh	r2, [r0, #14]
 80135ee:	6183      	str	r3, [r0, #24]
 80135f0:	4619      	mov	r1, r3
 80135f2:	2208      	movs	r2, #8
 80135f4:	305c      	adds	r0, #92	; 0x5c
 80135f6:	f7fe fb87 	bl	8011d08 <memset>
 80135fa:	4b05      	ldr	r3, [pc, #20]	; (8013610 <std+0x38>)
 80135fc:	6263      	str	r3, [r4, #36]	; 0x24
 80135fe:	4b05      	ldr	r3, [pc, #20]	; (8013614 <std+0x3c>)
 8013600:	62a3      	str	r3, [r4, #40]	; 0x28
 8013602:	4b05      	ldr	r3, [pc, #20]	; (8013618 <std+0x40>)
 8013604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013606:	4b05      	ldr	r3, [pc, #20]	; (801361c <std+0x44>)
 8013608:	6224      	str	r4, [r4, #32]
 801360a:	6323      	str	r3, [r4, #48]	; 0x30
 801360c:	bd10      	pop	{r4, pc}
 801360e:	bf00      	nop
 8013610:	0801440d 	.word	0x0801440d
 8013614:	0801442f 	.word	0x0801442f
 8013618:	08014467 	.word	0x08014467
 801361c:	0801448b 	.word	0x0801448b

08013620 <_cleanup_r>:
 8013620:	4901      	ldr	r1, [pc, #4]	; (8013628 <_cleanup_r+0x8>)
 8013622:	f000 b8af 	b.w	8013784 <_fwalk_reent>
 8013626:	bf00      	nop
 8013628:	08013561 	.word	0x08013561

0801362c <__sfmoreglue>:
 801362c:	b570      	push	{r4, r5, r6, lr}
 801362e:	1e4a      	subs	r2, r1, #1
 8013630:	2568      	movs	r5, #104	; 0x68
 8013632:	4355      	muls	r5, r2
 8013634:	460e      	mov	r6, r1
 8013636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801363a:	f000 fd23 	bl	8014084 <_malloc_r>
 801363e:	4604      	mov	r4, r0
 8013640:	b140      	cbz	r0, 8013654 <__sfmoreglue+0x28>
 8013642:	2100      	movs	r1, #0
 8013644:	e9c0 1600 	strd	r1, r6, [r0]
 8013648:	300c      	adds	r0, #12
 801364a:	60a0      	str	r0, [r4, #8]
 801364c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013650:	f7fe fb5a 	bl	8011d08 <memset>
 8013654:	4620      	mov	r0, r4
 8013656:	bd70      	pop	{r4, r5, r6, pc}

08013658 <__sfp_lock_acquire>:
 8013658:	4801      	ldr	r0, [pc, #4]	; (8013660 <__sfp_lock_acquire+0x8>)
 801365a:	f000 b8b8 	b.w	80137ce <__retarget_lock_acquire_recursive>
 801365e:	bf00      	nop
 8013660:	24000eb8 	.word	0x24000eb8

08013664 <__sfp_lock_release>:
 8013664:	4801      	ldr	r0, [pc, #4]	; (801366c <__sfp_lock_release+0x8>)
 8013666:	f000 b8b3 	b.w	80137d0 <__retarget_lock_release_recursive>
 801366a:	bf00      	nop
 801366c:	24000eb8 	.word	0x24000eb8

08013670 <__sinit_lock_acquire>:
 8013670:	4801      	ldr	r0, [pc, #4]	; (8013678 <__sinit_lock_acquire+0x8>)
 8013672:	f000 b8ac 	b.w	80137ce <__retarget_lock_acquire_recursive>
 8013676:	bf00      	nop
 8013678:	24000eb3 	.word	0x24000eb3

0801367c <__sinit_lock_release>:
 801367c:	4801      	ldr	r0, [pc, #4]	; (8013684 <__sinit_lock_release+0x8>)
 801367e:	f000 b8a7 	b.w	80137d0 <__retarget_lock_release_recursive>
 8013682:	bf00      	nop
 8013684:	24000eb3 	.word	0x24000eb3

08013688 <__sinit>:
 8013688:	b510      	push	{r4, lr}
 801368a:	4604      	mov	r4, r0
 801368c:	f7ff fff0 	bl	8013670 <__sinit_lock_acquire>
 8013690:	69a3      	ldr	r3, [r4, #24]
 8013692:	b11b      	cbz	r3, 801369c <__sinit+0x14>
 8013694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013698:	f7ff bff0 	b.w	801367c <__sinit_lock_release>
 801369c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80136a0:	6523      	str	r3, [r4, #80]	; 0x50
 80136a2:	4b13      	ldr	r3, [pc, #76]	; (80136f0 <__sinit+0x68>)
 80136a4:	4a13      	ldr	r2, [pc, #76]	; (80136f4 <__sinit+0x6c>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80136aa:	42a3      	cmp	r3, r4
 80136ac:	bf04      	itt	eq
 80136ae:	2301      	moveq	r3, #1
 80136b0:	61a3      	streq	r3, [r4, #24]
 80136b2:	4620      	mov	r0, r4
 80136b4:	f000 f820 	bl	80136f8 <__sfp>
 80136b8:	6060      	str	r0, [r4, #4]
 80136ba:	4620      	mov	r0, r4
 80136bc:	f000 f81c 	bl	80136f8 <__sfp>
 80136c0:	60a0      	str	r0, [r4, #8]
 80136c2:	4620      	mov	r0, r4
 80136c4:	f000 f818 	bl	80136f8 <__sfp>
 80136c8:	2200      	movs	r2, #0
 80136ca:	60e0      	str	r0, [r4, #12]
 80136cc:	2104      	movs	r1, #4
 80136ce:	6860      	ldr	r0, [r4, #4]
 80136d0:	f7ff ff82 	bl	80135d8 <std>
 80136d4:	68a0      	ldr	r0, [r4, #8]
 80136d6:	2201      	movs	r2, #1
 80136d8:	2109      	movs	r1, #9
 80136da:	f7ff ff7d 	bl	80135d8 <std>
 80136de:	68e0      	ldr	r0, [r4, #12]
 80136e0:	2202      	movs	r2, #2
 80136e2:	2112      	movs	r1, #18
 80136e4:	f7ff ff78 	bl	80135d8 <std>
 80136e8:	2301      	movs	r3, #1
 80136ea:	61a3      	str	r3, [r4, #24]
 80136ec:	e7d2      	b.n	8013694 <__sinit+0xc>
 80136ee:	bf00      	nop
 80136f0:	080150f4 	.word	0x080150f4
 80136f4:	08013621 	.word	0x08013621

080136f8 <__sfp>:
 80136f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136fa:	4607      	mov	r7, r0
 80136fc:	f7ff ffac 	bl	8013658 <__sfp_lock_acquire>
 8013700:	4b1e      	ldr	r3, [pc, #120]	; (801377c <__sfp+0x84>)
 8013702:	681e      	ldr	r6, [r3, #0]
 8013704:	69b3      	ldr	r3, [r6, #24]
 8013706:	b913      	cbnz	r3, 801370e <__sfp+0x16>
 8013708:	4630      	mov	r0, r6
 801370a:	f7ff ffbd 	bl	8013688 <__sinit>
 801370e:	3648      	adds	r6, #72	; 0x48
 8013710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013714:	3b01      	subs	r3, #1
 8013716:	d503      	bpl.n	8013720 <__sfp+0x28>
 8013718:	6833      	ldr	r3, [r6, #0]
 801371a:	b30b      	cbz	r3, 8013760 <__sfp+0x68>
 801371c:	6836      	ldr	r6, [r6, #0]
 801371e:	e7f7      	b.n	8013710 <__sfp+0x18>
 8013720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013724:	b9d5      	cbnz	r5, 801375c <__sfp+0x64>
 8013726:	4b16      	ldr	r3, [pc, #88]	; (8013780 <__sfp+0x88>)
 8013728:	60e3      	str	r3, [r4, #12]
 801372a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801372e:	6665      	str	r5, [r4, #100]	; 0x64
 8013730:	f000 f84c 	bl	80137cc <__retarget_lock_init_recursive>
 8013734:	f7ff ff96 	bl	8013664 <__sfp_lock_release>
 8013738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801373c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013740:	6025      	str	r5, [r4, #0]
 8013742:	61a5      	str	r5, [r4, #24]
 8013744:	2208      	movs	r2, #8
 8013746:	4629      	mov	r1, r5
 8013748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801374c:	f7fe fadc 	bl	8011d08 <memset>
 8013750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013758:	4620      	mov	r0, r4
 801375a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801375c:	3468      	adds	r4, #104	; 0x68
 801375e:	e7d9      	b.n	8013714 <__sfp+0x1c>
 8013760:	2104      	movs	r1, #4
 8013762:	4638      	mov	r0, r7
 8013764:	f7ff ff62 	bl	801362c <__sfmoreglue>
 8013768:	4604      	mov	r4, r0
 801376a:	6030      	str	r0, [r6, #0]
 801376c:	2800      	cmp	r0, #0
 801376e:	d1d5      	bne.n	801371c <__sfp+0x24>
 8013770:	f7ff ff78 	bl	8013664 <__sfp_lock_release>
 8013774:	230c      	movs	r3, #12
 8013776:	603b      	str	r3, [r7, #0]
 8013778:	e7ee      	b.n	8013758 <__sfp+0x60>
 801377a:	bf00      	nop
 801377c:	080150f4 	.word	0x080150f4
 8013780:	ffff0001 	.word	0xffff0001

08013784 <_fwalk_reent>:
 8013784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013788:	4606      	mov	r6, r0
 801378a:	4688      	mov	r8, r1
 801378c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013790:	2700      	movs	r7, #0
 8013792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013796:	f1b9 0901 	subs.w	r9, r9, #1
 801379a:	d505      	bpl.n	80137a8 <_fwalk_reent+0x24>
 801379c:	6824      	ldr	r4, [r4, #0]
 801379e:	2c00      	cmp	r4, #0
 80137a0:	d1f7      	bne.n	8013792 <_fwalk_reent+0xe>
 80137a2:	4638      	mov	r0, r7
 80137a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137a8:	89ab      	ldrh	r3, [r5, #12]
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d907      	bls.n	80137be <_fwalk_reent+0x3a>
 80137ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80137b2:	3301      	adds	r3, #1
 80137b4:	d003      	beq.n	80137be <_fwalk_reent+0x3a>
 80137b6:	4629      	mov	r1, r5
 80137b8:	4630      	mov	r0, r6
 80137ba:	47c0      	blx	r8
 80137bc:	4307      	orrs	r7, r0
 80137be:	3568      	adds	r5, #104	; 0x68
 80137c0:	e7e9      	b.n	8013796 <_fwalk_reent+0x12>
	...

080137c4 <_localeconv_r>:
 80137c4:	4800      	ldr	r0, [pc, #0]	; (80137c8 <_localeconv_r+0x4>)
 80137c6:	4770      	bx	lr
 80137c8:	24000178 	.word	0x24000178

080137cc <__retarget_lock_init_recursive>:
 80137cc:	4770      	bx	lr

080137ce <__retarget_lock_acquire_recursive>:
 80137ce:	4770      	bx	lr

080137d0 <__retarget_lock_release_recursive>:
 80137d0:	4770      	bx	lr

080137d2 <__swhatbuf_r>:
 80137d2:	b570      	push	{r4, r5, r6, lr}
 80137d4:	460e      	mov	r6, r1
 80137d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137da:	2900      	cmp	r1, #0
 80137dc:	b096      	sub	sp, #88	; 0x58
 80137de:	4614      	mov	r4, r2
 80137e0:	461d      	mov	r5, r3
 80137e2:	da07      	bge.n	80137f4 <__swhatbuf_r+0x22>
 80137e4:	2300      	movs	r3, #0
 80137e6:	602b      	str	r3, [r5, #0]
 80137e8:	89b3      	ldrh	r3, [r6, #12]
 80137ea:	061a      	lsls	r2, r3, #24
 80137ec:	d410      	bmi.n	8013810 <__swhatbuf_r+0x3e>
 80137ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80137f2:	e00e      	b.n	8013812 <__swhatbuf_r+0x40>
 80137f4:	466a      	mov	r2, sp
 80137f6:	f000 fe9f 	bl	8014538 <_fstat_r>
 80137fa:	2800      	cmp	r0, #0
 80137fc:	dbf2      	blt.n	80137e4 <__swhatbuf_r+0x12>
 80137fe:	9a01      	ldr	r2, [sp, #4]
 8013800:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013804:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013808:	425a      	negs	r2, r3
 801380a:	415a      	adcs	r2, r3
 801380c:	602a      	str	r2, [r5, #0]
 801380e:	e7ee      	b.n	80137ee <__swhatbuf_r+0x1c>
 8013810:	2340      	movs	r3, #64	; 0x40
 8013812:	2000      	movs	r0, #0
 8013814:	6023      	str	r3, [r4, #0]
 8013816:	b016      	add	sp, #88	; 0x58
 8013818:	bd70      	pop	{r4, r5, r6, pc}
	...

0801381c <__smakebuf_r>:
 801381c:	898b      	ldrh	r3, [r1, #12]
 801381e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013820:	079d      	lsls	r5, r3, #30
 8013822:	4606      	mov	r6, r0
 8013824:	460c      	mov	r4, r1
 8013826:	d507      	bpl.n	8013838 <__smakebuf_r+0x1c>
 8013828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801382c:	6023      	str	r3, [r4, #0]
 801382e:	6123      	str	r3, [r4, #16]
 8013830:	2301      	movs	r3, #1
 8013832:	6163      	str	r3, [r4, #20]
 8013834:	b002      	add	sp, #8
 8013836:	bd70      	pop	{r4, r5, r6, pc}
 8013838:	ab01      	add	r3, sp, #4
 801383a:	466a      	mov	r2, sp
 801383c:	f7ff ffc9 	bl	80137d2 <__swhatbuf_r>
 8013840:	9900      	ldr	r1, [sp, #0]
 8013842:	4605      	mov	r5, r0
 8013844:	4630      	mov	r0, r6
 8013846:	f000 fc1d 	bl	8014084 <_malloc_r>
 801384a:	b948      	cbnz	r0, 8013860 <__smakebuf_r+0x44>
 801384c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013850:	059a      	lsls	r2, r3, #22
 8013852:	d4ef      	bmi.n	8013834 <__smakebuf_r+0x18>
 8013854:	f023 0303 	bic.w	r3, r3, #3
 8013858:	f043 0302 	orr.w	r3, r3, #2
 801385c:	81a3      	strh	r3, [r4, #12]
 801385e:	e7e3      	b.n	8013828 <__smakebuf_r+0xc>
 8013860:	4b0d      	ldr	r3, [pc, #52]	; (8013898 <__smakebuf_r+0x7c>)
 8013862:	62b3      	str	r3, [r6, #40]	; 0x28
 8013864:	89a3      	ldrh	r3, [r4, #12]
 8013866:	6020      	str	r0, [r4, #0]
 8013868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801386c:	81a3      	strh	r3, [r4, #12]
 801386e:	9b00      	ldr	r3, [sp, #0]
 8013870:	6163      	str	r3, [r4, #20]
 8013872:	9b01      	ldr	r3, [sp, #4]
 8013874:	6120      	str	r0, [r4, #16]
 8013876:	b15b      	cbz	r3, 8013890 <__smakebuf_r+0x74>
 8013878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801387c:	4630      	mov	r0, r6
 801387e:	f000 fe6d 	bl	801455c <_isatty_r>
 8013882:	b128      	cbz	r0, 8013890 <__smakebuf_r+0x74>
 8013884:	89a3      	ldrh	r3, [r4, #12]
 8013886:	f023 0303 	bic.w	r3, r3, #3
 801388a:	f043 0301 	orr.w	r3, r3, #1
 801388e:	81a3      	strh	r3, [r4, #12]
 8013890:	89a0      	ldrh	r0, [r4, #12]
 8013892:	4305      	orrs	r5, r0
 8013894:	81a5      	strh	r5, [r4, #12]
 8013896:	e7cd      	b.n	8013834 <__smakebuf_r+0x18>
 8013898:	08013621 	.word	0x08013621

0801389c <malloc>:
 801389c:	4b02      	ldr	r3, [pc, #8]	; (80138a8 <malloc+0xc>)
 801389e:	4601      	mov	r1, r0
 80138a0:	6818      	ldr	r0, [r3, #0]
 80138a2:	f000 bbef 	b.w	8014084 <_malloc_r>
 80138a6:	bf00      	nop
 80138a8:	24000024 	.word	0x24000024

080138ac <memcpy>:
 80138ac:	440a      	add	r2, r1
 80138ae:	4291      	cmp	r1, r2
 80138b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80138b4:	d100      	bne.n	80138b8 <memcpy+0xc>
 80138b6:	4770      	bx	lr
 80138b8:	b510      	push	{r4, lr}
 80138ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138c2:	4291      	cmp	r1, r2
 80138c4:	d1f9      	bne.n	80138ba <memcpy+0xe>
 80138c6:	bd10      	pop	{r4, pc}

080138c8 <_Balloc>:
 80138c8:	b570      	push	{r4, r5, r6, lr}
 80138ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80138cc:	4604      	mov	r4, r0
 80138ce:	460d      	mov	r5, r1
 80138d0:	b976      	cbnz	r6, 80138f0 <_Balloc+0x28>
 80138d2:	2010      	movs	r0, #16
 80138d4:	f7ff ffe2 	bl	801389c <malloc>
 80138d8:	4602      	mov	r2, r0
 80138da:	6260      	str	r0, [r4, #36]	; 0x24
 80138dc:	b920      	cbnz	r0, 80138e8 <_Balloc+0x20>
 80138de:	4b18      	ldr	r3, [pc, #96]	; (8013940 <_Balloc+0x78>)
 80138e0:	4818      	ldr	r0, [pc, #96]	; (8013944 <_Balloc+0x7c>)
 80138e2:	2166      	movs	r1, #102	; 0x66
 80138e4:	f000 fde8 	bl	80144b8 <__assert_func>
 80138e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138ec:	6006      	str	r6, [r0, #0]
 80138ee:	60c6      	str	r6, [r0, #12]
 80138f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80138f2:	68f3      	ldr	r3, [r6, #12]
 80138f4:	b183      	cbz	r3, 8013918 <_Balloc+0x50>
 80138f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138f8:	68db      	ldr	r3, [r3, #12]
 80138fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80138fe:	b9b8      	cbnz	r0, 8013930 <_Balloc+0x68>
 8013900:	2101      	movs	r1, #1
 8013902:	fa01 f605 	lsl.w	r6, r1, r5
 8013906:	1d72      	adds	r2, r6, #5
 8013908:	0092      	lsls	r2, r2, #2
 801390a:	4620      	mov	r0, r4
 801390c:	f000 fb5a 	bl	8013fc4 <_calloc_r>
 8013910:	b160      	cbz	r0, 801392c <_Balloc+0x64>
 8013912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013916:	e00e      	b.n	8013936 <_Balloc+0x6e>
 8013918:	2221      	movs	r2, #33	; 0x21
 801391a:	2104      	movs	r1, #4
 801391c:	4620      	mov	r0, r4
 801391e:	f000 fb51 	bl	8013fc4 <_calloc_r>
 8013922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013924:	60f0      	str	r0, [r6, #12]
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d1e4      	bne.n	80138f6 <_Balloc+0x2e>
 801392c:	2000      	movs	r0, #0
 801392e:	bd70      	pop	{r4, r5, r6, pc}
 8013930:	6802      	ldr	r2, [r0, #0]
 8013932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013936:	2300      	movs	r3, #0
 8013938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801393c:	e7f7      	b.n	801392e <_Balloc+0x66>
 801393e:	bf00      	nop
 8013940:	08015139 	.word	0x08015139
 8013944:	08015220 	.word	0x08015220

08013948 <_Bfree>:
 8013948:	b570      	push	{r4, r5, r6, lr}
 801394a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801394c:	4605      	mov	r5, r0
 801394e:	460c      	mov	r4, r1
 8013950:	b976      	cbnz	r6, 8013970 <_Bfree+0x28>
 8013952:	2010      	movs	r0, #16
 8013954:	f7ff ffa2 	bl	801389c <malloc>
 8013958:	4602      	mov	r2, r0
 801395a:	6268      	str	r0, [r5, #36]	; 0x24
 801395c:	b920      	cbnz	r0, 8013968 <_Bfree+0x20>
 801395e:	4b09      	ldr	r3, [pc, #36]	; (8013984 <_Bfree+0x3c>)
 8013960:	4809      	ldr	r0, [pc, #36]	; (8013988 <_Bfree+0x40>)
 8013962:	218a      	movs	r1, #138	; 0x8a
 8013964:	f000 fda8 	bl	80144b8 <__assert_func>
 8013968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801396c:	6006      	str	r6, [r0, #0]
 801396e:	60c6      	str	r6, [r0, #12]
 8013970:	b13c      	cbz	r4, 8013982 <_Bfree+0x3a>
 8013972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013974:	6862      	ldr	r2, [r4, #4]
 8013976:	68db      	ldr	r3, [r3, #12]
 8013978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801397c:	6021      	str	r1, [r4, #0]
 801397e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013982:	bd70      	pop	{r4, r5, r6, pc}
 8013984:	08015139 	.word	0x08015139
 8013988:	08015220 	.word	0x08015220

0801398c <__multadd>:
 801398c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013990:	690e      	ldr	r6, [r1, #16]
 8013992:	4607      	mov	r7, r0
 8013994:	4698      	mov	r8, r3
 8013996:	460c      	mov	r4, r1
 8013998:	f101 0014 	add.w	r0, r1, #20
 801399c:	2300      	movs	r3, #0
 801399e:	6805      	ldr	r5, [r0, #0]
 80139a0:	b2a9      	uxth	r1, r5
 80139a2:	fb02 8101 	mla	r1, r2, r1, r8
 80139a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80139aa:	0c2d      	lsrs	r5, r5, #16
 80139ac:	fb02 c505 	mla	r5, r2, r5, ip
 80139b0:	b289      	uxth	r1, r1
 80139b2:	3301      	adds	r3, #1
 80139b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80139b8:	429e      	cmp	r6, r3
 80139ba:	f840 1b04 	str.w	r1, [r0], #4
 80139be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80139c2:	dcec      	bgt.n	801399e <__multadd+0x12>
 80139c4:	f1b8 0f00 	cmp.w	r8, #0
 80139c8:	d022      	beq.n	8013a10 <__multadd+0x84>
 80139ca:	68a3      	ldr	r3, [r4, #8]
 80139cc:	42b3      	cmp	r3, r6
 80139ce:	dc19      	bgt.n	8013a04 <__multadd+0x78>
 80139d0:	6861      	ldr	r1, [r4, #4]
 80139d2:	4638      	mov	r0, r7
 80139d4:	3101      	adds	r1, #1
 80139d6:	f7ff ff77 	bl	80138c8 <_Balloc>
 80139da:	4605      	mov	r5, r0
 80139dc:	b928      	cbnz	r0, 80139ea <__multadd+0x5e>
 80139de:	4602      	mov	r2, r0
 80139e0:	4b0d      	ldr	r3, [pc, #52]	; (8013a18 <__multadd+0x8c>)
 80139e2:	480e      	ldr	r0, [pc, #56]	; (8013a1c <__multadd+0x90>)
 80139e4:	21b5      	movs	r1, #181	; 0xb5
 80139e6:	f000 fd67 	bl	80144b8 <__assert_func>
 80139ea:	6922      	ldr	r2, [r4, #16]
 80139ec:	3202      	adds	r2, #2
 80139ee:	f104 010c 	add.w	r1, r4, #12
 80139f2:	0092      	lsls	r2, r2, #2
 80139f4:	300c      	adds	r0, #12
 80139f6:	f7ff ff59 	bl	80138ac <memcpy>
 80139fa:	4621      	mov	r1, r4
 80139fc:	4638      	mov	r0, r7
 80139fe:	f7ff ffa3 	bl	8013948 <_Bfree>
 8013a02:	462c      	mov	r4, r5
 8013a04:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013a08:	3601      	adds	r6, #1
 8013a0a:	f8c3 8014 	str.w	r8, [r3, #20]
 8013a0e:	6126      	str	r6, [r4, #16]
 8013a10:	4620      	mov	r0, r4
 8013a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a16:	bf00      	nop
 8013a18:	080151af 	.word	0x080151af
 8013a1c:	08015220 	.word	0x08015220

08013a20 <__hi0bits>:
 8013a20:	0c03      	lsrs	r3, r0, #16
 8013a22:	041b      	lsls	r3, r3, #16
 8013a24:	b9d3      	cbnz	r3, 8013a5c <__hi0bits+0x3c>
 8013a26:	0400      	lsls	r0, r0, #16
 8013a28:	2310      	movs	r3, #16
 8013a2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013a2e:	bf04      	itt	eq
 8013a30:	0200      	lsleq	r0, r0, #8
 8013a32:	3308      	addeq	r3, #8
 8013a34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013a38:	bf04      	itt	eq
 8013a3a:	0100      	lsleq	r0, r0, #4
 8013a3c:	3304      	addeq	r3, #4
 8013a3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013a42:	bf04      	itt	eq
 8013a44:	0080      	lsleq	r0, r0, #2
 8013a46:	3302      	addeq	r3, #2
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	db05      	blt.n	8013a58 <__hi0bits+0x38>
 8013a4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013a50:	f103 0301 	add.w	r3, r3, #1
 8013a54:	bf08      	it	eq
 8013a56:	2320      	moveq	r3, #32
 8013a58:	4618      	mov	r0, r3
 8013a5a:	4770      	bx	lr
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	e7e4      	b.n	8013a2a <__hi0bits+0xa>

08013a60 <__lo0bits>:
 8013a60:	6803      	ldr	r3, [r0, #0]
 8013a62:	f013 0207 	ands.w	r2, r3, #7
 8013a66:	4601      	mov	r1, r0
 8013a68:	d00b      	beq.n	8013a82 <__lo0bits+0x22>
 8013a6a:	07da      	lsls	r2, r3, #31
 8013a6c:	d424      	bmi.n	8013ab8 <__lo0bits+0x58>
 8013a6e:	0798      	lsls	r0, r3, #30
 8013a70:	bf49      	itett	mi
 8013a72:	085b      	lsrmi	r3, r3, #1
 8013a74:	089b      	lsrpl	r3, r3, #2
 8013a76:	2001      	movmi	r0, #1
 8013a78:	600b      	strmi	r3, [r1, #0]
 8013a7a:	bf5c      	itt	pl
 8013a7c:	600b      	strpl	r3, [r1, #0]
 8013a7e:	2002      	movpl	r0, #2
 8013a80:	4770      	bx	lr
 8013a82:	b298      	uxth	r0, r3
 8013a84:	b9b0      	cbnz	r0, 8013ab4 <__lo0bits+0x54>
 8013a86:	0c1b      	lsrs	r3, r3, #16
 8013a88:	2010      	movs	r0, #16
 8013a8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013a8e:	bf04      	itt	eq
 8013a90:	0a1b      	lsreq	r3, r3, #8
 8013a92:	3008      	addeq	r0, #8
 8013a94:	071a      	lsls	r2, r3, #28
 8013a96:	bf04      	itt	eq
 8013a98:	091b      	lsreq	r3, r3, #4
 8013a9a:	3004      	addeq	r0, #4
 8013a9c:	079a      	lsls	r2, r3, #30
 8013a9e:	bf04      	itt	eq
 8013aa0:	089b      	lsreq	r3, r3, #2
 8013aa2:	3002      	addeq	r0, #2
 8013aa4:	07da      	lsls	r2, r3, #31
 8013aa6:	d403      	bmi.n	8013ab0 <__lo0bits+0x50>
 8013aa8:	085b      	lsrs	r3, r3, #1
 8013aaa:	f100 0001 	add.w	r0, r0, #1
 8013aae:	d005      	beq.n	8013abc <__lo0bits+0x5c>
 8013ab0:	600b      	str	r3, [r1, #0]
 8013ab2:	4770      	bx	lr
 8013ab4:	4610      	mov	r0, r2
 8013ab6:	e7e8      	b.n	8013a8a <__lo0bits+0x2a>
 8013ab8:	2000      	movs	r0, #0
 8013aba:	4770      	bx	lr
 8013abc:	2020      	movs	r0, #32
 8013abe:	4770      	bx	lr

08013ac0 <__i2b>:
 8013ac0:	b510      	push	{r4, lr}
 8013ac2:	460c      	mov	r4, r1
 8013ac4:	2101      	movs	r1, #1
 8013ac6:	f7ff feff 	bl	80138c8 <_Balloc>
 8013aca:	4602      	mov	r2, r0
 8013acc:	b928      	cbnz	r0, 8013ada <__i2b+0x1a>
 8013ace:	4b05      	ldr	r3, [pc, #20]	; (8013ae4 <__i2b+0x24>)
 8013ad0:	4805      	ldr	r0, [pc, #20]	; (8013ae8 <__i2b+0x28>)
 8013ad2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ad6:	f000 fcef 	bl	80144b8 <__assert_func>
 8013ada:	2301      	movs	r3, #1
 8013adc:	6144      	str	r4, [r0, #20]
 8013ade:	6103      	str	r3, [r0, #16]
 8013ae0:	bd10      	pop	{r4, pc}
 8013ae2:	bf00      	nop
 8013ae4:	080151af 	.word	0x080151af
 8013ae8:	08015220 	.word	0x08015220

08013aec <__multiply>:
 8013aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af0:	4614      	mov	r4, r2
 8013af2:	690a      	ldr	r2, [r1, #16]
 8013af4:	6923      	ldr	r3, [r4, #16]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	bfb8      	it	lt
 8013afa:	460b      	movlt	r3, r1
 8013afc:	460d      	mov	r5, r1
 8013afe:	bfbc      	itt	lt
 8013b00:	4625      	movlt	r5, r4
 8013b02:	461c      	movlt	r4, r3
 8013b04:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013b08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013b0c:	68ab      	ldr	r3, [r5, #8]
 8013b0e:	6869      	ldr	r1, [r5, #4]
 8013b10:	eb0a 0709 	add.w	r7, sl, r9
 8013b14:	42bb      	cmp	r3, r7
 8013b16:	b085      	sub	sp, #20
 8013b18:	bfb8      	it	lt
 8013b1a:	3101      	addlt	r1, #1
 8013b1c:	f7ff fed4 	bl	80138c8 <_Balloc>
 8013b20:	b930      	cbnz	r0, 8013b30 <__multiply+0x44>
 8013b22:	4602      	mov	r2, r0
 8013b24:	4b42      	ldr	r3, [pc, #264]	; (8013c30 <__multiply+0x144>)
 8013b26:	4843      	ldr	r0, [pc, #268]	; (8013c34 <__multiply+0x148>)
 8013b28:	f240 115d 	movw	r1, #349	; 0x15d
 8013b2c:	f000 fcc4 	bl	80144b8 <__assert_func>
 8013b30:	f100 0614 	add.w	r6, r0, #20
 8013b34:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013b38:	4633      	mov	r3, r6
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	4543      	cmp	r3, r8
 8013b3e:	d31e      	bcc.n	8013b7e <__multiply+0x92>
 8013b40:	f105 0c14 	add.w	ip, r5, #20
 8013b44:	f104 0314 	add.w	r3, r4, #20
 8013b48:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013b4c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013b50:	9202      	str	r2, [sp, #8]
 8013b52:	ebac 0205 	sub.w	r2, ip, r5
 8013b56:	3a15      	subs	r2, #21
 8013b58:	f022 0203 	bic.w	r2, r2, #3
 8013b5c:	3204      	adds	r2, #4
 8013b5e:	f105 0115 	add.w	r1, r5, #21
 8013b62:	458c      	cmp	ip, r1
 8013b64:	bf38      	it	cc
 8013b66:	2204      	movcc	r2, #4
 8013b68:	9201      	str	r2, [sp, #4]
 8013b6a:	9a02      	ldr	r2, [sp, #8]
 8013b6c:	9303      	str	r3, [sp, #12]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d808      	bhi.n	8013b84 <__multiply+0x98>
 8013b72:	2f00      	cmp	r7, #0
 8013b74:	dc55      	bgt.n	8013c22 <__multiply+0x136>
 8013b76:	6107      	str	r7, [r0, #16]
 8013b78:	b005      	add	sp, #20
 8013b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b7e:	f843 2b04 	str.w	r2, [r3], #4
 8013b82:	e7db      	b.n	8013b3c <__multiply+0x50>
 8013b84:	f8b3 a000 	ldrh.w	sl, [r3]
 8013b88:	f1ba 0f00 	cmp.w	sl, #0
 8013b8c:	d020      	beq.n	8013bd0 <__multiply+0xe4>
 8013b8e:	f105 0e14 	add.w	lr, r5, #20
 8013b92:	46b1      	mov	r9, r6
 8013b94:	2200      	movs	r2, #0
 8013b96:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013b9a:	f8d9 b000 	ldr.w	fp, [r9]
 8013b9e:	b2a1      	uxth	r1, r4
 8013ba0:	fa1f fb8b 	uxth.w	fp, fp
 8013ba4:	fb0a b101 	mla	r1, sl, r1, fp
 8013ba8:	4411      	add	r1, r2
 8013baa:	f8d9 2000 	ldr.w	r2, [r9]
 8013bae:	0c24      	lsrs	r4, r4, #16
 8013bb0:	0c12      	lsrs	r2, r2, #16
 8013bb2:	fb0a 2404 	mla	r4, sl, r4, r2
 8013bb6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013bba:	b289      	uxth	r1, r1
 8013bbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013bc0:	45f4      	cmp	ip, lr
 8013bc2:	f849 1b04 	str.w	r1, [r9], #4
 8013bc6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013bca:	d8e4      	bhi.n	8013b96 <__multiply+0xaa>
 8013bcc:	9901      	ldr	r1, [sp, #4]
 8013bce:	5072      	str	r2, [r6, r1]
 8013bd0:	9a03      	ldr	r2, [sp, #12]
 8013bd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013bd6:	3304      	adds	r3, #4
 8013bd8:	f1b9 0f00 	cmp.w	r9, #0
 8013bdc:	d01f      	beq.n	8013c1e <__multiply+0x132>
 8013bde:	6834      	ldr	r4, [r6, #0]
 8013be0:	f105 0114 	add.w	r1, r5, #20
 8013be4:	46b6      	mov	lr, r6
 8013be6:	f04f 0a00 	mov.w	sl, #0
 8013bea:	880a      	ldrh	r2, [r1, #0]
 8013bec:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013bf0:	fb09 b202 	mla	r2, r9, r2, fp
 8013bf4:	4492      	add	sl, r2
 8013bf6:	b2a4      	uxth	r4, r4
 8013bf8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013bfc:	f84e 4b04 	str.w	r4, [lr], #4
 8013c00:	f851 4b04 	ldr.w	r4, [r1], #4
 8013c04:	f8be 2000 	ldrh.w	r2, [lr]
 8013c08:	0c24      	lsrs	r4, r4, #16
 8013c0a:	fb09 2404 	mla	r4, r9, r4, r2
 8013c0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013c12:	458c      	cmp	ip, r1
 8013c14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013c18:	d8e7      	bhi.n	8013bea <__multiply+0xfe>
 8013c1a:	9a01      	ldr	r2, [sp, #4]
 8013c1c:	50b4      	str	r4, [r6, r2]
 8013c1e:	3604      	adds	r6, #4
 8013c20:	e7a3      	b.n	8013b6a <__multiply+0x7e>
 8013c22:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d1a5      	bne.n	8013b76 <__multiply+0x8a>
 8013c2a:	3f01      	subs	r7, #1
 8013c2c:	e7a1      	b.n	8013b72 <__multiply+0x86>
 8013c2e:	bf00      	nop
 8013c30:	080151af 	.word	0x080151af
 8013c34:	08015220 	.word	0x08015220

08013c38 <__pow5mult>:
 8013c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c3c:	4615      	mov	r5, r2
 8013c3e:	f012 0203 	ands.w	r2, r2, #3
 8013c42:	4606      	mov	r6, r0
 8013c44:	460f      	mov	r7, r1
 8013c46:	d007      	beq.n	8013c58 <__pow5mult+0x20>
 8013c48:	4c25      	ldr	r4, [pc, #148]	; (8013ce0 <__pow5mult+0xa8>)
 8013c4a:	3a01      	subs	r2, #1
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013c52:	f7ff fe9b 	bl	801398c <__multadd>
 8013c56:	4607      	mov	r7, r0
 8013c58:	10ad      	asrs	r5, r5, #2
 8013c5a:	d03d      	beq.n	8013cd8 <__pow5mult+0xa0>
 8013c5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013c5e:	b97c      	cbnz	r4, 8013c80 <__pow5mult+0x48>
 8013c60:	2010      	movs	r0, #16
 8013c62:	f7ff fe1b 	bl	801389c <malloc>
 8013c66:	4602      	mov	r2, r0
 8013c68:	6270      	str	r0, [r6, #36]	; 0x24
 8013c6a:	b928      	cbnz	r0, 8013c78 <__pow5mult+0x40>
 8013c6c:	4b1d      	ldr	r3, [pc, #116]	; (8013ce4 <__pow5mult+0xac>)
 8013c6e:	481e      	ldr	r0, [pc, #120]	; (8013ce8 <__pow5mult+0xb0>)
 8013c70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013c74:	f000 fc20 	bl	80144b8 <__assert_func>
 8013c78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013c7c:	6004      	str	r4, [r0, #0]
 8013c7e:	60c4      	str	r4, [r0, #12]
 8013c80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013c84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013c88:	b94c      	cbnz	r4, 8013c9e <__pow5mult+0x66>
 8013c8a:	f240 2171 	movw	r1, #625	; 0x271
 8013c8e:	4630      	mov	r0, r6
 8013c90:	f7ff ff16 	bl	8013ac0 <__i2b>
 8013c94:	2300      	movs	r3, #0
 8013c96:	f8c8 0008 	str.w	r0, [r8, #8]
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	6003      	str	r3, [r0, #0]
 8013c9e:	f04f 0900 	mov.w	r9, #0
 8013ca2:	07eb      	lsls	r3, r5, #31
 8013ca4:	d50a      	bpl.n	8013cbc <__pow5mult+0x84>
 8013ca6:	4639      	mov	r1, r7
 8013ca8:	4622      	mov	r2, r4
 8013caa:	4630      	mov	r0, r6
 8013cac:	f7ff ff1e 	bl	8013aec <__multiply>
 8013cb0:	4639      	mov	r1, r7
 8013cb2:	4680      	mov	r8, r0
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	f7ff fe47 	bl	8013948 <_Bfree>
 8013cba:	4647      	mov	r7, r8
 8013cbc:	106d      	asrs	r5, r5, #1
 8013cbe:	d00b      	beq.n	8013cd8 <__pow5mult+0xa0>
 8013cc0:	6820      	ldr	r0, [r4, #0]
 8013cc2:	b938      	cbnz	r0, 8013cd4 <__pow5mult+0x9c>
 8013cc4:	4622      	mov	r2, r4
 8013cc6:	4621      	mov	r1, r4
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f7ff ff0f 	bl	8013aec <__multiply>
 8013cce:	6020      	str	r0, [r4, #0]
 8013cd0:	f8c0 9000 	str.w	r9, [r0]
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	e7e4      	b.n	8013ca2 <__pow5mult+0x6a>
 8013cd8:	4638      	mov	r0, r7
 8013cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cde:	bf00      	nop
 8013ce0:	08015370 	.word	0x08015370
 8013ce4:	08015139 	.word	0x08015139
 8013ce8:	08015220 	.word	0x08015220

08013cec <__lshift>:
 8013cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cf0:	460c      	mov	r4, r1
 8013cf2:	6849      	ldr	r1, [r1, #4]
 8013cf4:	6923      	ldr	r3, [r4, #16]
 8013cf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013cfa:	68a3      	ldr	r3, [r4, #8]
 8013cfc:	4607      	mov	r7, r0
 8013cfe:	4691      	mov	r9, r2
 8013d00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d04:	f108 0601 	add.w	r6, r8, #1
 8013d08:	42b3      	cmp	r3, r6
 8013d0a:	db0b      	blt.n	8013d24 <__lshift+0x38>
 8013d0c:	4638      	mov	r0, r7
 8013d0e:	f7ff fddb 	bl	80138c8 <_Balloc>
 8013d12:	4605      	mov	r5, r0
 8013d14:	b948      	cbnz	r0, 8013d2a <__lshift+0x3e>
 8013d16:	4602      	mov	r2, r0
 8013d18:	4b28      	ldr	r3, [pc, #160]	; (8013dbc <__lshift+0xd0>)
 8013d1a:	4829      	ldr	r0, [pc, #164]	; (8013dc0 <__lshift+0xd4>)
 8013d1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013d20:	f000 fbca 	bl	80144b8 <__assert_func>
 8013d24:	3101      	adds	r1, #1
 8013d26:	005b      	lsls	r3, r3, #1
 8013d28:	e7ee      	b.n	8013d08 <__lshift+0x1c>
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	f100 0114 	add.w	r1, r0, #20
 8013d30:	f100 0210 	add.w	r2, r0, #16
 8013d34:	4618      	mov	r0, r3
 8013d36:	4553      	cmp	r3, sl
 8013d38:	db33      	blt.n	8013da2 <__lshift+0xb6>
 8013d3a:	6920      	ldr	r0, [r4, #16]
 8013d3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d40:	f104 0314 	add.w	r3, r4, #20
 8013d44:	f019 091f 	ands.w	r9, r9, #31
 8013d48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013d4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013d50:	d02b      	beq.n	8013daa <__lshift+0xbe>
 8013d52:	f1c9 0e20 	rsb	lr, r9, #32
 8013d56:	468a      	mov	sl, r1
 8013d58:	2200      	movs	r2, #0
 8013d5a:	6818      	ldr	r0, [r3, #0]
 8013d5c:	fa00 f009 	lsl.w	r0, r0, r9
 8013d60:	4302      	orrs	r2, r0
 8013d62:	f84a 2b04 	str.w	r2, [sl], #4
 8013d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d6a:	459c      	cmp	ip, r3
 8013d6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013d70:	d8f3      	bhi.n	8013d5a <__lshift+0x6e>
 8013d72:	ebac 0304 	sub.w	r3, ip, r4
 8013d76:	3b15      	subs	r3, #21
 8013d78:	f023 0303 	bic.w	r3, r3, #3
 8013d7c:	3304      	adds	r3, #4
 8013d7e:	f104 0015 	add.w	r0, r4, #21
 8013d82:	4584      	cmp	ip, r0
 8013d84:	bf38      	it	cc
 8013d86:	2304      	movcc	r3, #4
 8013d88:	50ca      	str	r2, [r1, r3]
 8013d8a:	b10a      	cbz	r2, 8013d90 <__lshift+0xa4>
 8013d8c:	f108 0602 	add.w	r6, r8, #2
 8013d90:	3e01      	subs	r6, #1
 8013d92:	4638      	mov	r0, r7
 8013d94:	612e      	str	r6, [r5, #16]
 8013d96:	4621      	mov	r1, r4
 8013d98:	f7ff fdd6 	bl	8013948 <_Bfree>
 8013d9c:	4628      	mov	r0, r5
 8013d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013da6:	3301      	adds	r3, #1
 8013da8:	e7c5      	b.n	8013d36 <__lshift+0x4a>
 8013daa:	3904      	subs	r1, #4
 8013dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8013db0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013db4:	459c      	cmp	ip, r3
 8013db6:	d8f9      	bhi.n	8013dac <__lshift+0xc0>
 8013db8:	e7ea      	b.n	8013d90 <__lshift+0xa4>
 8013dba:	bf00      	nop
 8013dbc:	080151af 	.word	0x080151af
 8013dc0:	08015220 	.word	0x08015220

08013dc4 <__mcmp>:
 8013dc4:	b530      	push	{r4, r5, lr}
 8013dc6:	6902      	ldr	r2, [r0, #16]
 8013dc8:	690c      	ldr	r4, [r1, #16]
 8013dca:	1b12      	subs	r2, r2, r4
 8013dcc:	d10e      	bne.n	8013dec <__mcmp+0x28>
 8013dce:	f100 0314 	add.w	r3, r0, #20
 8013dd2:	3114      	adds	r1, #20
 8013dd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013dd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013ddc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013de0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013de4:	42a5      	cmp	r5, r4
 8013de6:	d003      	beq.n	8013df0 <__mcmp+0x2c>
 8013de8:	d305      	bcc.n	8013df6 <__mcmp+0x32>
 8013dea:	2201      	movs	r2, #1
 8013dec:	4610      	mov	r0, r2
 8013dee:	bd30      	pop	{r4, r5, pc}
 8013df0:	4283      	cmp	r3, r0
 8013df2:	d3f3      	bcc.n	8013ddc <__mcmp+0x18>
 8013df4:	e7fa      	b.n	8013dec <__mcmp+0x28>
 8013df6:	f04f 32ff 	mov.w	r2, #4294967295
 8013dfa:	e7f7      	b.n	8013dec <__mcmp+0x28>

08013dfc <__mdiff>:
 8013dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e00:	460c      	mov	r4, r1
 8013e02:	4606      	mov	r6, r0
 8013e04:	4611      	mov	r1, r2
 8013e06:	4620      	mov	r0, r4
 8013e08:	4617      	mov	r7, r2
 8013e0a:	f7ff ffdb 	bl	8013dc4 <__mcmp>
 8013e0e:	1e05      	subs	r5, r0, #0
 8013e10:	d110      	bne.n	8013e34 <__mdiff+0x38>
 8013e12:	4629      	mov	r1, r5
 8013e14:	4630      	mov	r0, r6
 8013e16:	f7ff fd57 	bl	80138c8 <_Balloc>
 8013e1a:	b930      	cbnz	r0, 8013e2a <__mdiff+0x2e>
 8013e1c:	4b39      	ldr	r3, [pc, #228]	; (8013f04 <__mdiff+0x108>)
 8013e1e:	4602      	mov	r2, r0
 8013e20:	f240 2132 	movw	r1, #562	; 0x232
 8013e24:	4838      	ldr	r0, [pc, #224]	; (8013f08 <__mdiff+0x10c>)
 8013e26:	f000 fb47 	bl	80144b8 <__assert_func>
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013e30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e34:	bfa4      	itt	ge
 8013e36:	463b      	movge	r3, r7
 8013e38:	4627      	movge	r7, r4
 8013e3a:	4630      	mov	r0, r6
 8013e3c:	6879      	ldr	r1, [r7, #4]
 8013e3e:	bfa6      	itte	ge
 8013e40:	461c      	movge	r4, r3
 8013e42:	2500      	movge	r5, #0
 8013e44:	2501      	movlt	r5, #1
 8013e46:	f7ff fd3f 	bl	80138c8 <_Balloc>
 8013e4a:	b920      	cbnz	r0, 8013e56 <__mdiff+0x5a>
 8013e4c:	4b2d      	ldr	r3, [pc, #180]	; (8013f04 <__mdiff+0x108>)
 8013e4e:	4602      	mov	r2, r0
 8013e50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013e54:	e7e6      	b.n	8013e24 <__mdiff+0x28>
 8013e56:	693e      	ldr	r6, [r7, #16]
 8013e58:	60c5      	str	r5, [r0, #12]
 8013e5a:	6925      	ldr	r5, [r4, #16]
 8013e5c:	f107 0114 	add.w	r1, r7, #20
 8013e60:	f104 0914 	add.w	r9, r4, #20
 8013e64:	f100 0e14 	add.w	lr, r0, #20
 8013e68:	f107 0210 	add.w	r2, r7, #16
 8013e6c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013e70:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013e74:	46f2      	mov	sl, lr
 8013e76:	2700      	movs	r7, #0
 8013e78:	f859 3b04 	ldr.w	r3, [r9], #4
 8013e7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013e80:	fa1f f883 	uxth.w	r8, r3
 8013e84:	fa17 f78b 	uxtah	r7, r7, fp
 8013e88:	0c1b      	lsrs	r3, r3, #16
 8013e8a:	eba7 0808 	sub.w	r8, r7, r8
 8013e8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013e92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013e96:	fa1f f888 	uxth.w	r8, r8
 8013e9a:	141f      	asrs	r7, r3, #16
 8013e9c:	454d      	cmp	r5, r9
 8013e9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013ea2:	f84a 3b04 	str.w	r3, [sl], #4
 8013ea6:	d8e7      	bhi.n	8013e78 <__mdiff+0x7c>
 8013ea8:	1b2b      	subs	r3, r5, r4
 8013eaa:	3b15      	subs	r3, #21
 8013eac:	f023 0303 	bic.w	r3, r3, #3
 8013eb0:	3304      	adds	r3, #4
 8013eb2:	3415      	adds	r4, #21
 8013eb4:	42a5      	cmp	r5, r4
 8013eb6:	bf38      	it	cc
 8013eb8:	2304      	movcc	r3, #4
 8013eba:	4419      	add	r1, r3
 8013ebc:	4473      	add	r3, lr
 8013ebe:	469e      	mov	lr, r3
 8013ec0:	460d      	mov	r5, r1
 8013ec2:	4565      	cmp	r5, ip
 8013ec4:	d30e      	bcc.n	8013ee4 <__mdiff+0xe8>
 8013ec6:	f10c 0203 	add.w	r2, ip, #3
 8013eca:	1a52      	subs	r2, r2, r1
 8013ecc:	f022 0203 	bic.w	r2, r2, #3
 8013ed0:	3903      	subs	r1, #3
 8013ed2:	458c      	cmp	ip, r1
 8013ed4:	bf38      	it	cc
 8013ed6:	2200      	movcc	r2, #0
 8013ed8:	441a      	add	r2, r3
 8013eda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013ede:	b17b      	cbz	r3, 8013f00 <__mdiff+0x104>
 8013ee0:	6106      	str	r6, [r0, #16]
 8013ee2:	e7a5      	b.n	8013e30 <__mdiff+0x34>
 8013ee4:	f855 8b04 	ldr.w	r8, [r5], #4
 8013ee8:	fa17 f488 	uxtah	r4, r7, r8
 8013eec:	1422      	asrs	r2, r4, #16
 8013eee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013ef2:	b2a4      	uxth	r4, r4
 8013ef4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013ef8:	f84e 4b04 	str.w	r4, [lr], #4
 8013efc:	1417      	asrs	r7, r2, #16
 8013efe:	e7e0      	b.n	8013ec2 <__mdiff+0xc6>
 8013f00:	3e01      	subs	r6, #1
 8013f02:	e7ea      	b.n	8013eda <__mdiff+0xde>
 8013f04:	080151af 	.word	0x080151af
 8013f08:	08015220 	.word	0x08015220

08013f0c <__d2b>:
 8013f0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013f10:	4689      	mov	r9, r1
 8013f12:	2101      	movs	r1, #1
 8013f14:	ec57 6b10 	vmov	r6, r7, d0
 8013f18:	4690      	mov	r8, r2
 8013f1a:	f7ff fcd5 	bl	80138c8 <_Balloc>
 8013f1e:	4604      	mov	r4, r0
 8013f20:	b930      	cbnz	r0, 8013f30 <__d2b+0x24>
 8013f22:	4602      	mov	r2, r0
 8013f24:	4b25      	ldr	r3, [pc, #148]	; (8013fbc <__d2b+0xb0>)
 8013f26:	4826      	ldr	r0, [pc, #152]	; (8013fc0 <__d2b+0xb4>)
 8013f28:	f240 310a 	movw	r1, #778	; 0x30a
 8013f2c:	f000 fac4 	bl	80144b8 <__assert_func>
 8013f30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013f34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f38:	bb35      	cbnz	r5, 8013f88 <__d2b+0x7c>
 8013f3a:	2e00      	cmp	r6, #0
 8013f3c:	9301      	str	r3, [sp, #4]
 8013f3e:	d028      	beq.n	8013f92 <__d2b+0x86>
 8013f40:	4668      	mov	r0, sp
 8013f42:	9600      	str	r6, [sp, #0]
 8013f44:	f7ff fd8c 	bl	8013a60 <__lo0bits>
 8013f48:	9900      	ldr	r1, [sp, #0]
 8013f4a:	b300      	cbz	r0, 8013f8e <__d2b+0x82>
 8013f4c:	9a01      	ldr	r2, [sp, #4]
 8013f4e:	f1c0 0320 	rsb	r3, r0, #32
 8013f52:	fa02 f303 	lsl.w	r3, r2, r3
 8013f56:	430b      	orrs	r3, r1
 8013f58:	40c2      	lsrs	r2, r0
 8013f5a:	6163      	str	r3, [r4, #20]
 8013f5c:	9201      	str	r2, [sp, #4]
 8013f5e:	9b01      	ldr	r3, [sp, #4]
 8013f60:	61a3      	str	r3, [r4, #24]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	bf14      	ite	ne
 8013f66:	2202      	movne	r2, #2
 8013f68:	2201      	moveq	r2, #1
 8013f6a:	6122      	str	r2, [r4, #16]
 8013f6c:	b1d5      	cbz	r5, 8013fa4 <__d2b+0x98>
 8013f6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013f72:	4405      	add	r5, r0
 8013f74:	f8c9 5000 	str.w	r5, [r9]
 8013f78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013f7c:	f8c8 0000 	str.w	r0, [r8]
 8013f80:	4620      	mov	r0, r4
 8013f82:	b003      	add	sp, #12
 8013f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f8c:	e7d5      	b.n	8013f3a <__d2b+0x2e>
 8013f8e:	6161      	str	r1, [r4, #20]
 8013f90:	e7e5      	b.n	8013f5e <__d2b+0x52>
 8013f92:	a801      	add	r0, sp, #4
 8013f94:	f7ff fd64 	bl	8013a60 <__lo0bits>
 8013f98:	9b01      	ldr	r3, [sp, #4]
 8013f9a:	6163      	str	r3, [r4, #20]
 8013f9c:	2201      	movs	r2, #1
 8013f9e:	6122      	str	r2, [r4, #16]
 8013fa0:	3020      	adds	r0, #32
 8013fa2:	e7e3      	b.n	8013f6c <__d2b+0x60>
 8013fa4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013fa8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013fac:	f8c9 0000 	str.w	r0, [r9]
 8013fb0:	6918      	ldr	r0, [r3, #16]
 8013fb2:	f7ff fd35 	bl	8013a20 <__hi0bits>
 8013fb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013fba:	e7df      	b.n	8013f7c <__d2b+0x70>
 8013fbc:	080151af 	.word	0x080151af
 8013fc0:	08015220 	.word	0x08015220

08013fc4 <_calloc_r>:
 8013fc4:	b513      	push	{r0, r1, r4, lr}
 8013fc6:	434a      	muls	r2, r1
 8013fc8:	4611      	mov	r1, r2
 8013fca:	9201      	str	r2, [sp, #4]
 8013fcc:	f000 f85a 	bl	8014084 <_malloc_r>
 8013fd0:	4604      	mov	r4, r0
 8013fd2:	b118      	cbz	r0, 8013fdc <_calloc_r+0x18>
 8013fd4:	9a01      	ldr	r2, [sp, #4]
 8013fd6:	2100      	movs	r1, #0
 8013fd8:	f7fd fe96 	bl	8011d08 <memset>
 8013fdc:	4620      	mov	r0, r4
 8013fde:	b002      	add	sp, #8
 8013fe0:	bd10      	pop	{r4, pc}
	...

08013fe4 <_free_r>:
 8013fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013fe6:	2900      	cmp	r1, #0
 8013fe8:	d048      	beq.n	801407c <_free_r+0x98>
 8013fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fee:	9001      	str	r0, [sp, #4]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f1a1 0404 	sub.w	r4, r1, #4
 8013ff6:	bfb8      	it	lt
 8013ff8:	18e4      	addlt	r4, r4, r3
 8013ffa:	f000 fae3 	bl	80145c4 <__malloc_lock>
 8013ffe:	4a20      	ldr	r2, [pc, #128]	; (8014080 <_free_r+0x9c>)
 8014000:	9801      	ldr	r0, [sp, #4]
 8014002:	6813      	ldr	r3, [r2, #0]
 8014004:	4615      	mov	r5, r2
 8014006:	b933      	cbnz	r3, 8014016 <_free_r+0x32>
 8014008:	6063      	str	r3, [r4, #4]
 801400a:	6014      	str	r4, [r2, #0]
 801400c:	b003      	add	sp, #12
 801400e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014012:	f000 badd 	b.w	80145d0 <__malloc_unlock>
 8014016:	42a3      	cmp	r3, r4
 8014018:	d90b      	bls.n	8014032 <_free_r+0x4e>
 801401a:	6821      	ldr	r1, [r4, #0]
 801401c:	1862      	adds	r2, r4, r1
 801401e:	4293      	cmp	r3, r2
 8014020:	bf04      	itt	eq
 8014022:	681a      	ldreq	r2, [r3, #0]
 8014024:	685b      	ldreq	r3, [r3, #4]
 8014026:	6063      	str	r3, [r4, #4]
 8014028:	bf04      	itt	eq
 801402a:	1852      	addeq	r2, r2, r1
 801402c:	6022      	streq	r2, [r4, #0]
 801402e:	602c      	str	r4, [r5, #0]
 8014030:	e7ec      	b.n	801400c <_free_r+0x28>
 8014032:	461a      	mov	r2, r3
 8014034:	685b      	ldr	r3, [r3, #4]
 8014036:	b10b      	cbz	r3, 801403c <_free_r+0x58>
 8014038:	42a3      	cmp	r3, r4
 801403a:	d9fa      	bls.n	8014032 <_free_r+0x4e>
 801403c:	6811      	ldr	r1, [r2, #0]
 801403e:	1855      	adds	r5, r2, r1
 8014040:	42a5      	cmp	r5, r4
 8014042:	d10b      	bne.n	801405c <_free_r+0x78>
 8014044:	6824      	ldr	r4, [r4, #0]
 8014046:	4421      	add	r1, r4
 8014048:	1854      	adds	r4, r2, r1
 801404a:	42a3      	cmp	r3, r4
 801404c:	6011      	str	r1, [r2, #0]
 801404e:	d1dd      	bne.n	801400c <_free_r+0x28>
 8014050:	681c      	ldr	r4, [r3, #0]
 8014052:	685b      	ldr	r3, [r3, #4]
 8014054:	6053      	str	r3, [r2, #4]
 8014056:	4421      	add	r1, r4
 8014058:	6011      	str	r1, [r2, #0]
 801405a:	e7d7      	b.n	801400c <_free_r+0x28>
 801405c:	d902      	bls.n	8014064 <_free_r+0x80>
 801405e:	230c      	movs	r3, #12
 8014060:	6003      	str	r3, [r0, #0]
 8014062:	e7d3      	b.n	801400c <_free_r+0x28>
 8014064:	6825      	ldr	r5, [r4, #0]
 8014066:	1961      	adds	r1, r4, r5
 8014068:	428b      	cmp	r3, r1
 801406a:	bf04      	itt	eq
 801406c:	6819      	ldreq	r1, [r3, #0]
 801406e:	685b      	ldreq	r3, [r3, #4]
 8014070:	6063      	str	r3, [r4, #4]
 8014072:	bf04      	itt	eq
 8014074:	1949      	addeq	r1, r1, r5
 8014076:	6021      	streq	r1, [r4, #0]
 8014078:	6054      	str	r4, [r2, #4]
 801407a:	e7c7      	b.n	801400c <_free_r+0x28>
 801407c:	b003      	add	sp, #12
 801407e:	bd30      	pop	{r4, r5, pc}
 8014080:	24000254 	.word	0x24000254

08014084 <_malloc_r>:
 8014084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014086:	1ccd      	adds	r5, r1, #3
 8014088:	f025 0503 	bic.w	r5, r5, #3
 801408c:	3508      	adds	r5, #8
 801408e:	2d0c      	cmp	r5, #12
 8014090:	bf38      	it	cc
 8014092:	250c      	movcc	r5, #12
 8014094:	2d00      	cmp	r5, #0
 8014096:	4606      	mov	r6, r0
 8014098:	db01      	blt.n	801409e <_malloc_r+0x1a>
 801409a:	42a9      	cmp	r1, r5
 801409c:	d903      	bls.n	80140a6 <_malloc_r+0x22>
 801409e:	230c      	movs	r3, #12
 80140a0:	6033      	str	r3, [r6, #0]
 80140a2:	2000      	movs	r0, #0
 80140a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140a6:	f000 fa8d 	bl	80145c4 <__malloc_lock>
 80140aa:	4921      	ldr	r1, [pc, #132]	; (8014130 <_malloc_r+0xac>)
 80140ac:	680a      	ldr	r2, [r1, #0]
 80140ae:	4614      	mov	r4, r2
 80140b0:	b99c      	cbnz	r4, 80140da <_malloc_r+0x56>
 80140b2:	4f20      	ldr	r7, [pc, #128]	; (8014134 <_malloc_r+0xb0>)
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	b923      	cbnz	r3, 80140c2 <_malloc_r+0x3e>
 80140b8:	4621      	mov	r1, r4
 80140ba:	4630      	mov	r0, r6
 80140bc:	f000 f996 	bl	80143ec <_sbrk_r>
 80140c0:	6038      	str	r0, [r7, #0]
 80140c2:	4629      	mov	r1, r5
 80140c4:	4630      	mov	r0, r6
 80140c6:	f000 f991 	bl	80143ec <_sbrk_r>
 80140ca:	1c43      	adds	r3, r0, #1
 80140cc:	d123      	bne.n	8014116 <_malloc_r+0x92>
 80140ce:	230c      	movs	r3, #12
 80140d0:	6033      	str	r3, [r6, #0]
 80140d2:	4630      	mov	r0, r6
 80140d4:	f000 fa7c 	bl	80145d0 <__malloc_unlock>
 80140d8:	e7e3      	b.n	80140a2 <_malloc_r+0x1e>
 80140da:	6823      	ldr	r3, [r4, #0]
 80140dc:	1b5b      	subs	r3, r3, r5
 80140de:	d417      	bmi.n	8014110 <_malloc_r+0x8c>
 80140e0:	2b0b      	cmp	r3, #11
 80140e2:	d903      	bls.n	80140ec <_malloc_r+0x68>
 80140e4:	6023      	str	r3, [r4, #0]
 80140e6:	441c      	add	r4, r3
 80140e8:	6025      	str	r5, [r4, #0]
 80140ea:	e004      	b.n	80140f6 <_malloc_r+0x72>
 80140ec:	6863      	ldr	r3, [r4, #4]
 80140ee:	42a2      	cmp	r2, r4
 80140f0:	bf0c      	ite	eq
 80140f2:	600b      	streq	r3, [r1, #0]
 80140f4:	6053      	strne	r3, [r2, #4]
 80140f6:	4630      	mov	r0, r6
 80140f8:	f000 fa6a 	bl	80145d0 <__malloc_unlock>
 80140fc:	f104 000b 	add.w	r0, r4, #11
 8014100:	1d23      	adds	r3, r4, #4
 8014102:	f020 0007 	bic.w	r0, r0, #7
 8014106:	1ac2      	subs	r2, r0, r3
 8014108:	d0cc      	beq.n	80140a4 <_malloc_r+0x20>
 801410a:	1a1b      	subs	r3, r3, r0
 801410c:	50a3      	str	r3, [r4, r2]
 801410e:	e7c9      	b.n	80140a4 <_malloc_r+0x20>
 8014110:	4622      	mov	r2, r4
 8014112:	6864      	ldr	r4, [r4, #4]
 8014114:	e7cc      	b.n	80140b0 <_malloc_r+0x2c>
 8014116:	1cc4      	adds	r4, r0, #3
 8014118:	f024 0403 	bic.w	r4, r4, #3
 801411c:	42a0      	cmp	r0, r4
 801411e:	d0e3      	beq.n	80140e8 <_malloc_r+0x64>
 8014120:	1a21      	subs	r1, r4, r0
 8014122:	4630      	mov	r0, r6
 8014124:	f000 f962 	bl	80143ec <_sbrk_r>
 8014128:	3001      	adds	r0, #1
 801412a:	d1dd      	bne.n	80140e8 <_malloc_r+0x64>
 801412c:	e7cf      	b.n	80140ce <_malloc_r+0x4a>
 801412e:	bf00      	nop
 8014130:	24000254 	.word	0x24000254
 8014134:	24000258 	.word	0x24000258

08014138 <__sfputc_r>:
 8014138:	6893      	ldr	r3, [r2, #8]
 801413a:	3b01      	subs	r3, #1
 801413c:	2b00      	cmp	r3, #0
 801413e:	b410      	push	{r4}
 8014140:	6093      	str	r3, [r2, #8]
 8014142:	da08      	bge.n	8014156 <__sfputc_r+0x1e>
 8014144:	6994      	ldr	r4, [r2, #24]
 8014146:	42a3      	cmp	r3, r4
 8014148:	db01      	blt.n	801414e <__sfputc_r+0x16>
 801414a:	290a      	cmp	r1, #10
 801414c:	d103      	bne.n	8014156 <__sfputc_r+0x1e>
 801414e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014152:	f7fe bab1 	b.w	80126b8 <__swbuf_r>
 8014156:	6813      	ldr	r3, [r2, #0]
 8014158:	1c58      	adds	r0, r3, #1
 801415a:	6010      	str	r0, [r2, #0]
 801415c:	7019      	strb	r1, [r3, #0]
 801415e:	4608      	mov	r0, r1
 8014160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014164:	4770      	bx	lr

08014166 <__sfputs_r>:
 8014166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014168:	4606      	mov	r6, r0
 801416a:	460f      	mov	r7, r1
 801416c:	4614      	mov	r4, r2
 801416e:	18d5      	adds	r5, r2, r3
 8014170:	42ac      	cmp	r4, r5
 8014172:	d101      	bne.n	8014178 <__sfputs_r+0x12>
 8014174:	2000      	movs	r0, #0
 8014176:	e007      	b.n	8014188 <__sfputs_r+0x22>
 8014178:	f814 1b01 	ldrb.w	r1, [r4], #1
 801417c:	463a      	mov	r2, r7
 801417e:	4630      	mov	r0, r6
 8014180:	f7ff ffda 	bl	8014138 <__sfputc_r>
 8014184:	1c43      	adds	r3, r0, #1
 8014186:	d1f3      	bne.n	8014170 <__sfputs_r+0xa>
 8014188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801418c <_vfiprintf_r>:
 801418c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014190:	460d      	mov	r5, r1
 8014192:	b09d      	sub	sp, #116	; 0x74
 8014194:	4614      	mov	r4, r2
 8014196:	4698      	mov	r8, r3
 8014198:	4606      	mov	r6, r0
 801419a:	b118      	cbz	r0, 80141a4 <_vfiprintf_r+0x18>
 801419c:	6983      	ldr	r3, [r0, #24]
 801419e:	b90b      	cbnz	r3, 80141a4 <_vfiprintf_r+0x18>
 80141a0:	f7ff fa72 	bl	8013688 <__sinit>
 80141a4:	4b89      	ldr	r3, [pc, #548]	; (80143cc <_vfiprintf_r+0x240>)
 80141a6:	429d      	cmp	r5, r3
 80141a8:	d11b      	bne.n	80141e2 <_vfiprintf_r+0x56>
 80141aa:	6875      	ldr	r5, [r6, #4]
 80141ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141ae:	07d9      	lsls	r1, r3, #31
 80141b0:	d405      	bmi.n	80141be <_vfiprintf_r+0x32>
 80141b2:	89ab      	ldrh	r3, [r5, #12]
 80141b4:	059a      	lsls	r2, r3, #22
 80141b6:	d402      	bmi.n	80141be <_vfiprintf_r+0x32>
 80141b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141ba:	f7ff fb08 	bl	80137ce <__retarget_lock_acquire_recursive>
 80141be:	89ab      	ldrh	r3, [r5, #12]
 80141c0:	071b      	lsls	r3, r3, #28
 80141c2:	d501      	bpl.n	80141c8 <_vfiprintf_r+0x3c>
 80141c4:	692b      	ldr	r3, [r5, #16]
 80141c6:	b9eb      	cbnz	r3, 8014204 <_vfiprintf_r+0x78>
 80141c8:	4629      	mov	r1, r5
 80141ca:	4630      	mov	r0, r6
 80141cc:	f7fe fac6 	bl	801275c <__swsetup_r>
 80141d0:	b1c0      	cbz	r0, 8014204 <_vfiprintf_r+0x78>
 80141d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141d4:	07dc      	lsls	r4, r3, #31
 80141d6:	d50e      	bpl.n	80141f6 <_vfiprintf_r+0x6a>
 80141d8:	f04f 30ff 	mov.w	r0, #4294967295
 80141dc:	b01d      	add	sp, #116	; 0x74
 80141de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141e2:	4b7b      	ldr	r3, [pc, #492]	; (80143d0 <_vfiprintf_r+0x244>)
 80141e4:	429d      	cmp	r5, r3
 80141e6:	d101      	bne.n	80141ec <_vfiprintf_r+0x60>
 80141e8:	68b5      	ldr	r5, [r6, #8]
 80141ea:	e7df      	b.n	80141ac <_vfiprintf_r+0x20>
 80141ec:	4b79      	ldr	r3, [pc, #484]	; (80143d4 <_vfiprintf_r+0x248>)
 80141ee:	429d      	cmp	r5, r3
 80141f0:	bf08      	it	eq
 80141f2:	68f5      	ldreq	r5, [r6, #12]
 80141f4:	e7da      	b.n	80141ac <_vfiprintf_r+0x20>
 80141f6:	89ab      	ldrh	r3, [r5, #12]
 80141f8:	0598      	lsls	r0, r3, #22
 80141fa:	d4ed      	bmi.n	80141d8 <_vfiprintf_r+0x4c>
 80141fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141fe:	f7ff fae7 	bl	80137d0 <__retarget_lock_release_recursive>
 8014202:	e7e9      	b.n	80141d8 <_vfiprintf_r+0x4c>
 8014204:	2300      	movs	r3, #0
 8014206:	9309      	str	r3, [sp, #36]	; 0x24
 8014208:	2320      	movs	r3, #32
 801420a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801420e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014212:	2330      	movs	r3, #48	; 0x30
 8014214:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80143d8 <_vfiprintf_r+0x24c>
 8014218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801421c:	f04f 0901 	mov.w	r9, #1
 8014220:	4623      	mov	r3, r4
 8014222:	469a      	mov	sl, r3
 8014224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014228:	b10a      	cbz	r2, 801422e <_vfiprintf_r+0xa2>
 801422a:	2a25      	cmp	r2, #37	; 0x25
 801422c:	d1f9      	bne.n	8014222 <_vfiprintf_r+0x96>
 801422e:	ebba 0b04 	subs.w	fp, sl, r4
 8014232:	d00b      	beq.n	801424c <_vfiprintf_r+0xc0>
 8014234:	465b      	mov	r3, fp
 8014236:	4622      	mov	r2, r4
 8014238:	4629      	mov	r1, r5
 801423a:	4630      	mov	r0, r6
 801423c:	f7ff ff93 	bl	8014166 <__sfputs_r>
 8014240:	3001      	adds	r0, #1
 8014242:	f000 80aa 	beq.w	801439a <_vfiprintf_r+0x20e>
 8014246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014248:	445a      	add	r2, fp
 801424a:	9209      	str	r2, [sp, #36]	; 0x24
 801424c:	f89a 3000 	ldrb.w	r3, [sl]
 8014250:	2b00      	cmp	r3, #0
 8014252:	f000 80a2 	beq.w	801439a <_vfiprintf_r+0x20e>
 8014256:	2300      	movs	r3, #0
 8014258:	f04f 32ff 	mov.w	r2, #4294967295
 801425c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014260:	f10a 0a01 	add.w	sl, sl, #1
 8014264:	9304      	str	r3, [sp, #16]
 8014266:	9307      	str	r3, [sp, #28]
 8014268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801426c:	931a      	str	r3, [sp, #104]	; 0x68
 801426e:	4654      	mov	r4, sl
 8014270:	2205      	movs	r2, #5
 8014272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014276:	4858      	ldr	r0, [pc, #352]	; (80143d8 <_vfiprintf_r+0x24c>)
 8014278:	f7ec f83a 	bl	80002f0 <memchr>
 801427c:	9a04      	ldr	r2, [sp, #16]
 801427e:	b9d8      	cbnz	r0, 80142b8 <_vfiprintf_r+0x12c>
 8014280:	06d1      	lsls	r1, r2, #27
 8014282:	bf44      	itt	mi
 8014284:	2320      	movmi	r3, #32
 8014286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801428a:	0713      	lsls	r3, r2, #28
 801428c:	bf44      	itt	mi
 801428e:	232b      	movmi	r3, #43	; 0x2b
 8014290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014294:	f89a 3000 	ldrb.w	r3, [sl]
 8014298:	2b2a      	cmp	r3, #42	; 0x2a
 801429a:	d015      	beq.n	80142c8 <_vfiprintf_r+0x13c>
 801429c:	9a07      	ldr	r2, [sp, #28]
 801429e:	4654      	mov	r4, sl
 80142a0:	2000      	movs	r0, #0
 80142a2:	f04f 0c0a 	mov.w	ip, #10
 80142a6:	4621      	mov	r1, r4
 80142a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80142ac:	3b30      	subs	r3, #48	; 0x30
 80142ae:	2b09      	cmp	r3, #9
 80142b0:	d94e      	bls.n	8014350 <_vfiprintf_r+0x1c4>
 80142b2:	b1b0      	cbz	r0, 80142e2 <_vfiprintf_r+0x156>
 80142b4:	9207      	str	r2, [sp, #28]
 80142b6:	e014      	b.n	80142e2 <_vfiprintf_r+0x156>
 80142b8:	eba0 0308 	sub.w	r3, r0, r8
 80142bc:	fa09 f303 	lsl.w	r3, r9, r3
 80142c0:	4313      	orrs	r3, r2
 80142c2:	9304      	str	r3, [sp, #16]
 80142c4:	46a2      	mov	sl, r4
 80142c6:	e7d2      	b.n	801426e <_vfiprintf_r+0xe2>
 80142c8:	9b03      	ldr	r3, [sp, #12]
 80142ca:	1d19      	adds	r1, r3, #4
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	9103      	str	r1, [sp, #12]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	bfbb      	ittet	lt
 80142d4:	425b      	neglt	r3, r3
 80142d6:	f042 0202 	orrlt.w	r2, r2, #2
 80142da:	9307      	strge	r3, [sp, #28]
 80142dc:	9307      	strlt	r3, [sp, #28]
 80142de:	bfb8      	it	lt
 80142e0:	9204      	strlt	r2, [sp, #16]
 80142e2:	7823      	ldrb	r3, [r4, #0]
 80142e4:	2b2e      	cmp	r3, #46	; 0x2e
 80142e6:	d10c      	bne.n	8014302 <_vfiprintf_r+0x176>
 80142e8:	7863      	ldrb	r3, [r4, #1]
 80142ea:	2b2a      	cmp	r3, #42	; 0x2a
 80142ec:	d135      	bne.n	801435a <_vfiprintf_r+0x1ce>
 80142ee:	9b03      	ldr	r3, [sp, #12]
 80142f0:	1d1a      	adds	r2, r3, #4
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	9203      	str	r2, [sp, #12]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	bfb8      	it	lt
 80142fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80142fe:	3402      	adds	r4, #2
 8014300:	9305      	str	r3, [sp, #20]
 8014302:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80143e8 <_vfiprintf_r+0x25c>
 8014306:	7821      	ldrb	r1, [r4, #0]
 8014308:	2203      	movs	r2, #3
 801430a:	4650      	mov	r0, sl
 801430c:	f7eb fff0 	bl	80002f0 <memchr>
 8014310:	b140      	cbz	r0, 8014324 <_vfiprintf_r+0x198>
 8014312:	2340      	movs	r3, #64	; 0x40
 8014314:	eba0 000a 	sub.w	r0, r0, sl
 8014318:	fa03 f000 	lsl.w	r0, r3, r0
 801431c:	9b04      	ldr	r3, [sp, #16]
 801431e:	4303      	orrs	r3, r0
 8014320:	3401      	adds	r4, #1
 8014322:	9304      	str	r3, [sp, #16]
 8014324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014328:	482c      	ldr	r0, [pc, #176]	; (80143dc <_vfiprintf_r+0x250>)
 801432a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801432e:	2206      	movs	r2, #6
 8014330:	f7eb ffde 	bl	80002f0 <memchr>
 8014334:	2800      	cmp	r0, #0
 8014336:	d03f      	beq.n	80143b8 <_vfiprintf_r+0x22c>
 8014338:	4b29      	ldr	r3, [pc, #164]	; (80143e0 <_vfiprintf_r+0x254>)
 801433a:	bb1b      	cbnz	r3, 8014384 <_vfiprintf_r+0x1f8>
 801433c:	9b03      	ldr	r3, [sp, #12]
 801433e:	3307      	adds	r3, #7
 8014340:	f023 0307 	bic.w	r3, r3, #7
 8014344:	3308      	adds	r3, #8
 8014346:	9303      	str	r3, [sp, #12]
 8014348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801434a:	443b      	add	r3, r7
 801434c:	9309      	str	r3, [sp, #36]	; 0x24
 801434e:	e767      	b.n	8014220 <_vfiprintf_r+0x94>
 8014350:	fb0c 3202 	mla	r2, ip, r2, r3
 8014354:	460c      	mov	r4, r1
 8014356:	2001      	movs	r0, #1
 8014358:	e7a5      	b.n	80142a6 <_vfiprintf_r+0x11a>
 801435a:	2300      	movs	r3, #0
 801435c:	3401      	adds	r4, #1
 801435e:	9305      	str	r3, [sp, #20]
 8014360:	4619      	mov	r1, r3
 8014362:	f04f 0c0a 	mov.w	ip, #10
 8014366:	4620      	mov	r0, r4
 8014368:	f810 2b01 	ldrb.w	r2, [r0], #1
 801436c:	3a30      	subs	r2, #48	; 0x30
 801436e:	2a09      	cmp	r2, #9
 8014370:	d903      	bls.n	801437a <_vfiprintf_r+0x1ee>
 8014372:	2b00      	cmp	r3, #0
 8014374:	d0c5      	beq.n	8014302 <_vfiprintf_r+0x176>
 8014376:	9105      	str	r1, [sp, #20]
 8014378:	e7c3      	b.n	8014302 <_vfiprintf_r+0x176>
 801437a:	fb0c 2101 	mla	r1, ip, r1, r2
 801437e:	4604      	mov	r4, r0
 8014380:	2301      	movs	r3, #1
 8014382:	e7f0      	b.n	8014366 <_vfiprintf_r+0x1da>
 8014384:	ab03      	add	r3, sp, #12
 8014386:	9300      	str	r3, [sp, #0]
 8014388:	462a      	mov	r2, r5
 801438a:	4b16      	ldr	r3, [pc, #88]	; (80143e4 <_vfiprintf_r+0x258>)
 801438c:	a904      	add	r1, sp, #16
 801438e:	4630      	mov	r0, r6
 8014390:	f7fd fd52 	bl	8011e38 <_printf_float>
 8014394:	4607      	mov	r7, r0
 8014396:	1c78      	adds	r0, r7, #1
 8014398:	d1d6      	bne.n	8014348 <_vfiprintf_r+0x1bc>
 801439a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801439c:	07d9      	lsls	r1, r3, #31
 801439e:	d405      	bmi.n	80143ac <_vfiprintf_r+0x220>
 80143a0:	89ab      	ldrh	r3, [r5, #12]
 80143a2:	059a      	lsls	r2, r3, #22
 80143a4:	d402      	bmi.n	80143ac <_vfiprintf_r+0x220>
 80143a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143a8:	f7ff fa12 	bl	80137d0 <__retarget_lock_release_recursive>
 80143ac:	89ab      	ldrh	r3, [r5, #12]
 80143ae:	065b      	lsls	r3, r3, #25
 80143b0:	f53f af12 	bmi.w	80141d8 <_vfiprintf_r+0x4c>
 80143b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143b6:	e711      	b.n	80141dc <_vfiprintf_r+0x50>
 80143b8:	ab03      	add	r3, sp, #12
 80143ba:	9300      	str	r3, [sp, #0]
 80143bc:	462a      	mov	r2, r5
 80143be:	4b09      	ldr	r3, [pc, #36]	; (80143e4 <_vfiprintf_r+0x258>)
 80143c0:	a904      	add	r1, sp, #16
 80143c2:	4630      	mov	r0, r6
 80143c4:	f7fd ffc4 	bl	8012350 <_printf_i>
 80143c8:	e7e4      	b.n	8014394 <_vfiprintf_r+0x208>
 80143ca:	bf00      	nop
 80143cc:	080151e0 	.word	0x080151e0
 80143d0:	08015200 	.word	0x08015200
 80143d4:	080151c0 	.word	0x080151c0
 80143d8:	0801537c 	.word	0x0801537c
 80143dc:	08015386 	.word	0x08015386
 80143e0:	08011e39 	.word	0x08011e39
 80143e4:	08014167 	.word	0x08014167
 80143e8:	08015382 	.word	0x08015382

080143ec <_sbrk_r>:
 80143ec:	b538      	push	{r3, r4, r5, lr}
 80143ee:	4d06      	ldr	r5, [pc, #24]	; (8014408 <_sbrk_r+0x1c>)
 80143f0:	2300      	movs	r3, #0
 80143f2:	4604      	mov	r4, r0
 80143f4:	4608      	mov	r0, r1
 80143f6:	602b      	str	r3, [r5, #0]
 80143f8:	f7f0 fed8 	bl	80051ac <_sbrk>
 80143fc:	1c43      	adds	r3, r0, #1
 80143fe:	d102      	bne.n	8014406 <_sbrk_r+0x1a>
 8014400:	682b      	ldr	r3, [r5, #0]
 8014402:	b103      	cbz	r3, 8014406 <_sbrk_r+0x1a>
 8014404:	6023      	str	r3, [r4, #0]
 8014406:	bd38      	pop	{r3, r4, r5, pc}
 8014408:	24000ebc 	.word	0x24000ebc

0801440c <__sread>:
 801440c:	b510      	push	{r4, lr}
 801440e:	460c      	mov	r4, r1
 8014410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014414:	f000 f8e2 	bl	80145dc <_read_r>
 8014418:	2800      	cmp	r0, #0
 801441a:	bfab      	itete	ge
 801441c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801441e:	89a3      	ldrhlt	r3, [r4, #12]
 8014420:	181b      	addge	r3, r3, r0
 8014422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014426:	bfac      	ite	ge
 8014428:	6563      	strge	r3, [r4, #84]	; 0x54
 801442a:	81a3      	strhlt	r3, [r4, #12]
 801442c:	bd10      	pop	{r4, pc}

0801442e <__swrite>:
 801442e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014432:	461f      	mov	r7, r3
 8014434:	898b      	ldrh	r3, [r1, #12]
 8014436:	05db      	lsls	r3, r3, #23
 8014438:	4605      	mov	r5, r0
 801443a:	460c      	mov	r4, r1
 801443c:	4616      	mov	r6, r2
 801443e:	d505      	bpl.n	801444c <__swrite+0x1e>
 8014440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014444:	2302      	movs	r3, #2
 8014446:	2200      	movs	r2, #0
 8014448:	f000 f898 	bl	801457c <_lseek_r>
 801444c:	89a3      	ldrh	r3, [r4, #12]
 801444e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014456:	81a3      	strh	r3, [r4, #12]
 8014458:	4632      	mov	r2, r6
 801445a:	463b      	mov	r3, r7
 801445c:	4628      	mov	r0, r5
 801445e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014462:	f000 b817 	b.w	8014494 <_write_r>

08014466 <__sseek>:
 8014466:	b510      	push	{r4, lr}
 8014468:	460c      	mov	r4, r1
 801446a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801446e:	f000 f885 	bl	801457c <_lseek_r>
 8014472:	1c43      	adds	r3, r0, #1
 8014474:	89a3      	ldrh	r3, [r4, #12]
 8014476:	bf15      	itete	ne
 8014478:	6560      	strne	r0, [r4, #84]	; 0x54
 801447a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801447e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014482:	81a3      	strheq	r3, [r4, #12]
 8014484:	bf18      	it	ne
 8014486:	81a3      	strhne	r3, [r4, #12]
 8014488:	bd10      	pop	{r4, pc}

0801448a <__sclose>:
 801448a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801448e:	f000 b831 	b.w	80144f4 <_close_r>
	...

08014494 <_write_r>:
 8014494:	b538      	push	{r3, r4, r5, lr}
 8014496:	4d07      	ldr	r5, [pc, #28]	; (80144b4 <_write_r+0x20>)
 8014498:	4604      	mov	r4, r0
 801449a:	4608      	mov	r0, r1
 801449c:	4611      	mov	r1, r2
 801449e:	2200      	movs	r2, #0
 80144a0:	602a      	str	r2, [r5, #0]
 80144a2:	461a      	mov	r2, r3
 80144a4:	f7ee fdec 	bl	8003080 <_write>
 80144a8:	1c43      	adds	r3, r0, #1
 80144aa:	d102      	bne.n	80144b2 <_write_r+0x1e>
 80144ac:	682b      	ldr	r3, [r5, #0]
 80144ae:	b103      	cbz	r3, 80144b2 <_write_r+0x1e>
 80144b0:	6023      	str	r3, [r4, #0]
 80144b2:	bd38      	pop	{r3, r4, r5, pc}
 80144b4:	24000ebc 	.word	0x24000ebc

080144b8 <__assert_func>:
 80144b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80144ba:	4614      	mov	r4, r2
 80144bc:	461a      	mov	r2, r3
 80144be:	4b09      	ldr	r3, [pc, #36]	; (80144e4 <__assert_func+0x2c>)
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	4605      	mov	r5, r0
 80144c4:	68d8      	ldr	r0, [r3, #12]
 80144c6:	b14c      	cbz	r4, 80144dc <__assert_func+0x24>
 80144c8:	4b07      	ldr	r3, [pc, #28]	; (80144e8 <__assert_func+0x30>)
 80144ca:	9100      	str	r1, [sp, #0]
 80144cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80144d0:	4906      	ldr	r1, [pc, #24]	; (80144ec <__assert_func+0x34>)
 80144d2:	462b      	mov	r3, r5
 80144d4:	f000 f81e 	bl	8014514 <fiprintf>
 80144d8:	f000 f89f 	bl	801461a <abort>
 80144dc:	4b04      	ldr	r3, [pc, #16]	; (80144f0 <__assert_func+0x38>)
 80144de:	461c      	mov	r4, r3
 80144e0:	e7f3      	b.n	80144ca <__assert_func+0x12>
 80144e2:	bf00      	nop
 80144e4:	24000024 	.word	0x24000024
 80144e8:	0801538d 	.word	0x0801538d
 80144ec:	0801539a 	.word	0x0801539a
 80144f0:	080153c8 	.word	0x080153c8

080144f4 <_close_r>:
 80144f4:	b538      	push	{r3, r4, r5, lr}
 80144f6:	4d06      	ldr	r5, [pc, #24]	; (8014510 <_close_r+0x1c>)
 80144f8:	2300      	movs	r3, #0
 80144fa:	4604      	mov	r4, r0
 80144fc:	4608      	mov	r0, r1
 80144fe:	602b      	str	r3, [r5, #0]
 8014500:	f7f0 fe1f 	bl	8005142 <_close>
 8014504:	1c43      	adds	r3, r0, #1
 8014506:	d102      	bne.n	801450e <_close_r+0x1a>
 8014508:	682b      	ldr	r3, [r5, #0]
 801450a:	b103      	cbz	r3, 801450e <_close_r+0x1a>
 801450c:	6023      	str	r3, [r4, #0]
 801450e:	bd38      	pop	{r3, r4, r5, pc}
 8014510:	24000ebc 	.word	0x24000ebc

08014514 <fiprintf>:
 8014514:	b40e      	push	{r1, r2, r3}
 8014516:	b503      	push	{r0, r1, lr}
 8014518:	4601      	mov	r1, r0
 801451a:	ab03      	add	r3, sp, #12
 801451c:	4805      	ldr	r0, [pc, #20]	; (8014534 <fiprintf+0x20>)
 801451e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014522:	6800      	ldr	r0, [r0, #0]
 8014524:	9301      	str	r3, [sp, #4]
 8014526:	f7ff fe31 	bl	801418c <_vfiprintf_r>
 801452a:	b002      	add	sp, #8
 801452c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014530:	b003      	add	sp, #12
 8014532:	4770      	bx	lr
 8014534:	24000024 	.word	0x24000024

08014538 <_fstat_r>:
 8014538:	b538      	push	{r3, r4, r5, lr}
 801453a:	4d07      	ldr	r5, [pc, #28]	; (8014558 <_fstat_r+0x20>)
 801453c:	2300      	movs	r3, #0
 801453e:	4604      	mov	r4, r0
 8014540:	4608      	mov	r0, r1
 8014542:	4611      	mov	r1, r2
 8014544:	602b      	str	r3, [r5, #0]
 8014546:	f7f0 fe08 	bl	800515a <_fstat>
 801454a:	1c43      	adds	r3, r0, #1
 801454c:	d102      	bne.n	8014554 <_fstat_r+0x1c>
 801454e:	682b      	ldr	r3, [r5, #0]
 8014550:	b103      	cbz	r3, 8014554 <_fstat_r+0x1c>
 8014552:	6023      	str	r3, [r4, #0]
 8014554:	bd38      	pop	{r3, r4, r5, pc}
 8014556:	bf00      	nop
 8014558:	24000ebc 	.word	0x24000ebc

0801455c <_isatty_r>:
 801455c:	b538      	push	{r3, r4, r5, lr}
 801455e:	4d06      	ldr	r5, [pc, #24]	; (8014578 <_isatty_r+0x1c>)
 8014560:	2300      	movs	r3, #0
 8014562:	4604      	mov	r4, r0
 8014564:	4608      	mov	r0, r1
 8014566:	602b      	str	r3, [r5, #0]
 8014568:	f7f0 fe07 	bl	800517a <_isatty>
 801456c:	1c43      	adds	r3, r0, #1
 801456e:	d102      	bne.n	8014576 <_isatty_r+0x1a>
 8014570:	682b      	ldr	r3, [r5, #0]
 8014572:	b103      	cbz	r3, 8014576 <_isatty_r+0x1a>
 8014574:	6023      	str	r3, [r4, #0]
 8014576:	bd38      	pop	{r3, r4, r5, pc}
 8014578:	24000ebc 	.word	0x24000ebc

0801457c <_lseek_r>:
 801457c:	b538      	push	{r3, r4, r5, lr}
 801457e:	4d07      	ldr	r5, [pc, #28]	; (801459c <_lseek_r+0x20>)
 8014580:	4604      	mov	r4, r0
 8014582:	4608      	mov	r0, r1
 8014584:	4611      	mov	r1, r2
 8014586:	2200      	movs	r2, #0
 8014588:	602a      	str	r2, [r5, #0]
 801458a:	461a      	mov	r2, r3
 801458c:	f7f0 fe00 	bl	8005190 <_lseek>
 8014590:	1c43      	adds	r3, r0, #1
 8014592:	d102      	bne.n	801459a <_lseek_r+0x1e>
 8014594:	682b      	ldr	r3, [r5, #0]
 8014596:	b103      	cbz	r3, 801459a <_lseek_r+0x1e>
 8014598:	6023      	str	r3, [r4, #0]
 801459a:	bd38      	pop	{r3, r4, r5, pc}
 801459c:	24000ebc 	.word	0x24000ebc

080145a0 <__ascii_mbtowc>:
 80145a0:	b082      	sub	sp, #8
 80145a2:	b901      	cbnz	r1, 80145a6 <__ascii_mbtowc+0x6>
 80145a4:	a901      	add	r1, sp, #4
 80145a6:	b142      	cbz	r2, 80145ba <__ascii_mbtowc+0x1a>
 80145a8:	b14b      	cbz	r3, 80145be <__ascii_mbtowc+0x1e>
 80145aa:	7813      	ldrb	r3, [r2, #0]
 80145ac:	600b      	str	r3, [r1, #0]
 80145ae:	7812      	ldrb	r2, [r2, #0]
 80145b0:	1e10      	subs	r0, r2, #0
 80145b2:	bf18      	it	ne
 80145b4:	2001      	movne	r0, #1
 80145b6:	b002      	add	sp, #8
 80145b8:	4770      	bx	lr
 80145ba:	4610      	mov	r0, r2
 80145bc:	e7fb      	b.n	80145b6 <__ascii_mbtowc+0x16>
 80145be:	f06f 0001 	mvn.w	r0, #1
 80145c2:	e7f8      	b.n	80145b6 <__ascii_mbtowc+0x16>

080145c4 <__malloc_lock>:
 80145c4:	4801      	ldr	r0, [pc, #4]	; (80145cc <__malloc_lock+0x8>)
 80145c6:	f7ff b902 	b.w	80137ce <__retarget_lock_acquire_recursive>
 80145ca:	bf00      	nop
 80145cc:	24000eb4 	.word	0x24000eb4

080145d0 <__malloc_unlock>:
 80145d0:	4801      	ldr	r0, [pc, #4]	; (80145d8 <__malloc_unlock+0x8>)
 80145d2:	f7ff b8fd 	b.w	80137d0 <__retarget_lock_release_recursive>
 80145d6:	bf00      	nop
 80145d8:	24000eb4 	.word	0x24000eb4

080145dc <_read_r>:
 80145dc:	b538      	push	{r3, r4, r5, lr}
 80145de:	4d07      	ldr	r5, [pc, #28]	; (80145fc <_read_r+0x20>)
 80145e0:	4604      	mov	r4, r0
 80145e2:	4608      	mov	r0, r1
 80145e4:	4611      	mov	r1, r2
 80145e6:	2200      	movs	r2, #0
 80145e8:	602a      	str	r2, [r5, #0]
 80145ea:	461a      	mov	r2, r3
 80145ec:	f7f0 fd8c 	bl	8005108 <_read>
 80145f0:	1c43      	adds	r3, r0, #1
 80145f2:	d102      	bne.n	80145fa <_read_r+0x1e>
 80145f4:	682b      	ldr	r3, [r5, #0]
 80145f6:	b103      	cbz	r3, 80145fa <_read_r+0x1e>
 80145f8:	6023      	str	r3, [r4, #0]
 80145fa:	bd38      	pop	{r3, r4, r5, pc}
 80145fc:	24000ebc 	.word	0x24000ebc

08014600 <__ascii_wctomb>:
 8014600:	b149      	cbz	r1, 8014616 <__ascii_wctomb+0x16>
 8014602:	2aff      	cmp	r2, #255	; 0xff
 8014604:	bf85      	ittet	hi
 8014606:	238a      	movhi	r3, #138	; 0x8a
 8014608:	6003      	strhi	r3, [r0, #0]
 801460a:	700a      	strbls	r2, [r1, #0]
 801460c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014610:	bf98      	it	ls
 8014612:	2001      	movls	r0, #1
 8014614:	4770      	bx	lr
 8014616:	4608      	mov	r0, r1
 8014618:	4770      	bx	lr

0801461a <abort>:
 801461a:	b508      	push	{r3, lr}
 801461c:	2006      	movs	r0, #6
 801461e:	f000 f82b 	bl	8014678 <raise>
 8014622:	2001      	movs	r0, #1
 8014624:	f7f0 fd66 	bl	80050f4 <_exit>

08014628 <_raise_r>:
 8014628:	291f      	cmp	r1, #31
 801462a:	b538      	push	{r3, r4, r5, lr}
 801462c:	4604      	mov	r4, r0
 801462e:	460d      	mov	r5, r1
 8014630:	d904      	bls.n	801463c <_raise_r+0x14>
 8014632:	2316      	movs	r3, #22
 8014634:	6003      	str	r3, [r0, #0]
 8014636:	f04f 30ff 	mov.w	r0, #4294967295
 801463a:	bd38      	pop	{r3, r4, r5, pc}
 801463c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801463e:	b112      	cbz	r2, 8014646 <_raise_r+0x1e>
 8014640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014644:	b94b      	cbnz	r3, 801465a <_raise_r+0x32>
 8014646:	4620      	mov	r0, r4
 8014648:	f000 f830 	bl	80146ac <_getpid_r>
 801464c:	462a      	mov	r2, r5
 801464e:	4601      	mov	r1, r0
 8014650:	4620      	mov	r0, r4
 8014652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014656:	f000 b817 	b.w	8014688 <_kill_r>
 801465a:	2b01      	cmp	r3, #1
 801465c:	d00a      	beq.n	8014674 <_raise_r+0x4c>
 801465e:	1c59      	adds	r1, r3, #1
 8014660:	d103      	bne.n	801466a <_raise_r+0x42>
 8014662:	2316      	movs	r3, #22
 8014664:	6003      	str	r3, [r0, #0]
 8014666:	2001      	movs	r0, #1
 8014668:	e7e7      	b.n	801463a <_raise_r+0x12>
 801466a:	2400      	movs	r4, #0
 801466c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014670:	4628      	mov	r0, r5
 8014672:	4798      	blx	r3
 8014674:	2000      	movs	r0, #0
 8014676:	e7e0      	b.n	801463a <_raise_r+0x12>

08014678 <raise>:
 8014678:	4b02      	ldr	r3, [pc, #8]	; (8014684 <raise+0xc>)
 801467a:	4601      	mov	r1, r0
 801467c:	6818      	ldr	r0, [r3, #0]
 801467e:	f7ff bfd3 	b.w	8014628 <_raise_r>
 8014682:	bf00      	nop
 8014684:	24000024 	.word	0x24000024

08014688 <_kill_r>:
 8014688:	b538      	push	{r3, r4, r5, lr}
 801468a:	4d07      	ldr	r5, [pc, #28]	; (80146a8 <_kill_r+0x20>)
 801468c:	2300      	movs	r3, #0
 801468e:	4604      	mov	r4, r0
 8014690:	4608      	mov	r0, r1
 8014692:	4611      	mov	r1, r2
 8014694:	602b      	str	r3, [r5, #0]
 8014696:	f7f0 fd1d 	bl	80050d4 <_kill>
 801469a:	1c43      	adds	r3, r0, #1
 801469c:	d102      	bne.n	80146a4 <_kill_r+0x1c>
 801469e:	682b      	ldr	r3, [r5, #0]
 80146a0:	b103      	cbz	r3, 80146a4 <_kill_r+0x1c>
 80146a2:	6023      	str	r3, [r4, #0]
 80146a4:	bd38      	pop	{r3, r4, r5, pc}
 80146a6:	bf00      	nop
 80146a8:	24000ebc 	.word	0x24000ebc

080146ac <_getpid_r>:
 80146ac:	f7f0 bd0a 	b.w	80050c4 <_getpid>

080146b0 <atan2>:
 80146b0:	f000 b862 	b.w	8014778 <__ieee754_atan2>
 80146b4:	0000      	movs	r0, r0
	...

080146b8 <sqrt>:
 80146b8:	b508      	push	{r3, lr}
 80146ba:	ed2d 8b04 	vpush	{d8-d9}
 80146be:	eeb0 8b40 	vmov.f64	d8, d0
 80146c2:	f000 f927 	bl	8014914 <__ieee754_sqrt>
 80146c6:	4b10      	ldr	r3, [pc, #64]	; (8014708 <sqrt+0x50>)
 80146c8:	f993 3000 	ldrsb.w	r3, [r3]
 80146cc:	3301      	adds	r3, #1
 80146ce:	d011      	beq.n	80146f4 <sqrt+0x3c>
 80146d0:	eeb4 8b48 	vcmp.f64	d8, d8
 80146d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d8:	d60c      	bvs.n	80146f4 <sqrt+0x3c>
 80146da:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8014700 <sqrt+0x48>
 80146de:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80146e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146e6:	d505      	bpl.n	80146f4 <sqrt+0x3c>
 80146e8:	f7fd fae4 	bl	8011cb4 <__errno>
 80146ec:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80146f0:	2321      	movs	r3, #33	; 0x21
 80146f2:	6003      	str	r3, [r0, #0]
 80146f4:	ecbd 8b04 	vpop	{d8-d9}
 80146f8:	bd08      	pop	{r3, pc}
 80146fa:	bf00      	nop
 80146fc:	f3af 8000 	nop.w
	...
 8014708:	240001f4 	.word	0x240001f4

0801470c <asinf>:
 801470c:	b508      	push	{r3, lr}
 801470e:	ed2d 8b02 	vpush	{d8}
 8014712:	eeb0 8a40 	vmov.f32	s16, s0
 8014716:	f000 f901 	bl	801491c <__ieee754_asinf>
 801471a:	4b13      	ldr	r3, [pc, #76]	; (8014768 <asinf+0x5c>)
 801471c:	f993 3000 	ldrsb.w	r3, [r3]
 8014720:	3301      	adds	r3, #1
 8014722:	eef0 8a40 	vmov.f32	s17, s0
 8014726:	d01a      	beq.n	801475e <asinf+0x52>
 8014728:	eeb4 8a48 	vcmp.f32	s16, s16
 801472c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014730:	d615      	bvs.n	801475e <asinf+0x52>
 8014732:	eeb0 0a48 	vmov.f32	s0, s16
 8014736:	f000 fc53 	bl	8014fe0 <fabsf>
 801473a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801473e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014746:	dd0a      	ble.n	801475e <asinf+0x52>
 8014748:	f7fd fab4 	bl	8011cb4 <__errno>
 801474c:	ecbd 8b02 	vpop	{d8}
 8014750:	2321      	movs	r3, #33	; 0x21
 8014752:	6003      	str	r3, [r0, #0]
 8014754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014758:	4804      	ldr	r0, [pc, #16]	; (801476c <asinf+0x60>)
 801475a:	f000 bc49 	b.w	8014ff0 <nanf>
 801475e:	eeb0 0a68 	vmov.f32	s0, s17
 8014762:	ecbd 8b02 	vpop	{d8}
 8014766:	bd08      	pop	{r3, pc}
 8014768:	240001f4 	.word	0x240001f4
 801476c:	080153c8 	.word	0x080153c8

08014770 <atan2f>:
 8014770:	f000 b9ba 	b.w	8014ae8 <__ieee754_atan2f>
 8014774:	0000      	movs	r0, r0
	...

08014778 <__ieee754_atan2>:
 8014778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801477a:	ee11 6a10 	vmov	r6, s2
 801477e:	ee11 0a90 	vmov	r0, s3
 8014782:	4273      	negs	r3, r6
 8014784:	4f60      	ldr	r7, [pc, #384]	; (8014908 <__ieee754_atan2+0x190>)
 8014786:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801478a:	4333      	orrs	r3, r6
 801478c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014790:	42bb      	cmp	r3, r7
 8014792:	ed8d 0b00 	vstr	d0, [sp]
 8014796:	d80b      	bhi.n	80147b0 <__ieee754_atan2+0x38>
 8014798:	e9dd c500 	ldrd	ip, r5, [sp]
 801479c:	f1cc 0100 	rsb	r1, ip, #0
 80147a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80147a4:	ea41 010c 	orr.w	r1, r1, ip
 80147a8:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80147ac:	42b9      	cmp	r1, r7
 80147ae:	d906      	bls.n	80147be <__ieee754_atan2+0x46>
 80147b0:	ed9d 7b00 	vldr	d7, [sp]
 80147b4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80147b8:	ed8d 7b00 	vstr	d7, [sp]
 80147bc:	e054      	b.n	8014868 <__ieee754_atan2+0xf0>
 80147be:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80147c2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80147c6:	4331      	orrs	r1, r6
 80147c8:	d104      	bne.n	80147d4 <__ieee754_atan2+0x5c>
 80147ca:	b003      	add	sp, #12
 80147cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80147d0:	f000 ba2e 	b.w	8014c30 <atan>
 80147d4:	1784      	asrs	r4, r0, #30
 80147d6:	f004 0402 	and.w	r4, r4, #2
 80147da:	ea53 010c 	orrs.w	r1, r3, ip
 80147de:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 80147e2:	d109      	bne.n	80147f8 <__ieee754_atan2+0x80>
 80147e4:	2c02      	cmp	r4, #2
 80147e6:	d069      	beq.n	80148bc <__ieee754_atan2+0x144>
 80147e8:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80148d0 <__ieee754_atan2+0x158>
 80147ec:	ed9d 6b00 	vldr	d6, [sp]
 80147f0:	2c03      	cmp	r4, #3
 80147f2:	fe07 7b06 	vseleq.f64	d7, d7, d6
 80147f6:	e7df      	b.n	80147b8 <__ieee754_atan2+0x40>
 80147f8:	ea52 0106 	orrs.w	r1, r2, r6
 80147fc:	d107      	bne.n	801480e <__ieee754_atan2+0x96>
 80147fe:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80148d8 <__ieee754_atan2+0x160>
 8014802:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80148e0 <__ieee754_atan2+0x168>
 8014806:	2d00      	cmp	r5, #0
 8014808:	fe26 7b07 	vselge.f64	d7, d6, d7
 801480c:	e7d4      	b.n	80147b8 <__ieee754_atan2+0x40>
 801480e:	42ba      	cmp	r2, r7
 8014810:	d10f      	bne.n	8014832 <__ieee754_atan2+0xba>
 8014812:	4293      	cmp	r3, r2
 8014814:	f104 34ff 	add.w	r4, r4, #4294967295
 8014818:	d107      	bne.n	801482a <__ieee754_atan2+0xb2>
 801481a:	2c02      	cmp	r4, #2
 801481c:	d851      	bhi.n	80148c2 <__ieee754_atan2+0x14a>
 801481e:	4b3b      	ldr	r3, [pc, #236]	; (801490c <__ieee754_atan2+0x194>)
 8014820:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014824:	ed94 7b00 	vldr	d7, [r4]
 8014828:	e7c6      	b.n	80147b8 <__ieee754_atan2+0x40>
 801482a:	2c02      	cmp	r4, #2
 801482c:	d84c      	bhi.n	80148c8 <__ieee754_atan2+0x150>
 801482e:	4b38      	ldr	r3, [pc, #224]	; (8014910 <__ieee754_atan2+0x198>)
 8014830:	e7f6      	b.n	8014820 <__ieee754_atan2+0xa8>
 8014832:	42bb      	cmp	r3, r7
 8014834:	d0e3      	beq.n	80147fe <__ieee754_atan2+0x86>
 8014836:	1a9b      	subs	r3, r3, r2
 8014838:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801483c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014840:	da16      	bge.n	8014870 <__ieee754_atan2+0xf8>
 8014842:	2800      	cmp	r0, #0
 8014844:	da01      	bge.n	801484a <__ieee754_atan2+0xd2>
 8014846:	323c      	adds	r2, #60	; 0x3c
 8014848:	db17      	blt.n	801487a <__ieee754_atan2+0x102>
 801484a:	ed9d 7b00 	vldr	d7, [sp]
 801484e:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8014852:	f000 fae7 	bl	8014e24 <fabs>
 8014856:	f000 f9eb 	bl	8014c30 <atan>
 801485a:	ed8d 0b00 	vstr	d0, [sp]
 801485e:	2c01      	cmp	r4, #1
 8014860:	d00e      	beq.n	8014880 <__ieee754_atan2+0x108>
 8014862:	2c02      	cmp	r4, #2
 8014864:	d014      	beq.n	8014890 <__ieee754_atan2+0x118>
 8014866:	b9f4      	cbnz	r4, 80148a6 <__ieee754_atan2+0x12e>
 8014868:	ed9d 0b00 	vldr	d0, [sp]
 801486c:	b003      	add	sp, #12
 801486e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014870:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80148d8 <__ieee754_atan2+0x160>
 8014874:	ed8d 7b00 	vstr	d7, [sp]
 8014878:	e7f1      	b.n	801485e <__ieee754_atan2+0xe6>
 801487a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 80148e8 <__ieee754_atan2+0x170>
 801487e:	e7f9      	b.n	8014874 <__ieee754_atan2+0xfc>
 8014880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014884:	9901      	ldr	r1, [sp, #4]
 8014886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801488a:	e9cd 2300 	strd	r2, r3, [sp]
 801488e:	e7eb      	b.n	8014868 <__ieee754_atan2+0xf0>
 8014890:	ed9d 6b00 	vldr	d6, [sp]
 8014894:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80148f0 <__ieee754_atan2+0x178>
 8014898:	ee36 7b47 	vsub.f64	d7, d6, d7
 801489c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80148f8 <__ieee754_atan2+0x180>
 80148a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80148a4:	e788      	b.n	80147b8 <__ieee754_atan2+0x40>
 80148a6:	ed9d 6b00 	vldr	d6, [sp]
 80148aa:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80148f0 <__ieee754_atan2+0x178>
 80148ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80148b2:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80148f8 <__ieee754_atan2+0x180>
 80148b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80148ba:	e77d      	b.n	80147b8 <__ieee754_atan2+0x40>
 80148bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80148f8 <__ieee754_atan2+0x180>
 80148c0:	e77a      	b.n	80147b8 <__ieee754_atan2+0x40>
 80148c2:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8014900 <__ieee754_atan2+0x188>
 80148c6:	e777      	b.n	80147b8 <__ieee754_atan2+0x40>
 80148c8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80148e8 <__ieee754_atan2+0x170>
 80148cc:	e774      	b.n	80147b8 <__ieee754_atan2+0x40>
 80148ce:	bf00      	nop
 80148d0:	54442d18 	.word	0x54442d18
 80148d4:	c00921fb 	.word	0xc00921fb
 80148d8:	54442d18 	.word	0x54442d18
 80148dc:	3ff921fb 	.word	0x3ff921fb
 80148e0:	54442d18 	.word	0x54442d18
 80148e4:	bff921fb 	.word	0xbff921fb
	...
 80148f0:	33145c07 	.word	0x33145c07
 80148f4:	3ca1a626 	.word	0x3ca1a626
 80148f8:	54442d18 	.word	0x54442d18
 80148fc:	400921fb 	.word	0x400921fb
 8014900:	54442d18 	.word	0x54442d18
 8014904:	3fe921fb 	.word	0x3fe921fb
 8014908:	7ff00000 	.word	0x7ff00000
 801490c:	080154d8 	.word	0x080154d8
 8014910:	080154f0 	.word	0x080154f0

08014914 <__ieee754_sqrt>:
 8014914:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8014918:	4770      	bx	lr
	...

0801491c <__ieee754_asinf>:
 801491c:	b538      	push	{r3, r4, r5, lr}
 801491e:	ee10 5a10 	vmov	r5, s0
 8014922:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014926:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801492a:	ed2d 8b04 	vpush	{d8-d9}
 801492e:	d10c      	bne.n	801494a <__ieee754_asinf+0x2e>
 8014930:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014aa8 <__ieee754_asinf+0x18c>
 8014934:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8014aac <__ieee754_asinf+0x190>
 8014938:	ee60 7a27 	vmul.f32	s15, s0, s15
 801493c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014940:	eeb0 0a67 	vmov.f32	s0, s15
 8014944:	ecbd 8b04 	vpop	{d8-d9}
 8014948:	bd38      	pop	{r3, r4, r5, pc}
 801494a:	dd04      	ble.n	8014956 <__ieee754_asinf+0x3a>
 801494c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014950:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014954:	e7f6      	b.n	8014944 <__ieee754_asinf+0x28>
 8014956:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801495a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801495e:	da0b      	bge.n	8014978 <__ieee754_asinf+0x5c>
 8014960:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8014964:	da52      	bge.n	8014a0c <__ieee754_asinf+0xf0>
 8014966:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014ab0 <__ieee754_asinf+0x194>
 801496a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801496e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8014972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014976:	dce5      	bgt.n	8014944 <__ieee754_asinf+0x28>
 8014978:	f000 fb32 	bl	8014fe0 <fabsf>
 801497c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014980:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014984:	ee20 8a08 	vmul.f32	s16, s0, s16
 8014988:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8014ab4 <__ieee754_asinf+0x198>
 801498c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8014ab8 <__ieee754_asinf+0x19c>
 8014990:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8014abc <__ieee754_asinf+0x1a0>
 8014994:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014998:	eddf 7a49 	vldr	s15, [pc, #292]	; 8014ac0 <__ieee754_asinf+0x1a4>
 801499c:	eee7 7a08 	vfma.f32	s15, s14, s16
 80149a0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8014ac4 <__ieee754_asinf+0x1a8>
 80149a4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80149a8:	eddf 7a47 	vldr	s15, [pc, #284]	; 8014ac8 <__ieee754_asinf+0x1ac>
 80149ac:	eee7 7a08 	vfma.f32	s15, s14, s16
 80149b0:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014acc <__ieee754_asinf+0x1b0>
 80149b4:	eea7 9a88 	vfma.f32	s18, s15, s16
 80149b8:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014ad0 <__ieee754_asinf+0x1b4>
 80149bc:	eee8 7a07 	vfma.f32	s15, s16, s14
 80149c0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014ad4 <__ieee754_asinf+0x1b8>
 80149c4:	eea7 7a88 	vfma.f32	s14, s15, s16
 80149c8:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014ad8 <__ieee754_asinf+0x1bc>
 80149cc:	eee7 7a08 	vfma.f32	s15, s14, s16
 80149d0:	eeb0 0a48 	vmov.f32	s0, s16
 80149d4:	eee7 8a88 	vfma.f32	s17, s15, s16
 80149d8:	f000 f924 	bl	8014c24 <__ieee754_sqrtf>
 80149dc:	4b3f      	ldr	r3, [pc, #252]	; (8014adc <__ieee754_asinf+0x1c0>)
 80149de:	ee29 9a08 	vmul.f32	s18, s18, s16
 80149e2:	429c      	cmp	r4, r3
 80149e4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80149e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80149ec:	dd3d      	ble.n	8014a6a <__ieee754_asinf+0x14e>
 80149ee:	eea0 0a06 	vfma.f32	s0, s0, s12
 80149f2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8014ae0 <__ieee754_asinf+0x1c4>
 80149f6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80149fa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014aac <__ieee754_asinf+0x190>
 80149fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014a02:	2d00      	cmp	r5, #0
 8014a04:	bfd8      	it	le
 8014a06:	eeb1 0a40 	vnegle.f32	s0, s0
 8014a0a:	e79b      	b.n	8014944 <__ieee754_asinf+0x28>
 8014a0c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014a10:	eddf 6a28 	vldr	s13, [pc, #160]	; 8014ab4 <__ieee754_asinf+0x198>
 8014a14:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014ab8 <__ieee754_asinf+0x19c>
 8014a18:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8014acc <__ieee754_asinf+0x1b0>
 8014a1c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8014a20:	eddf 6a27 	vldr	s13, [pc, #156]	; 8014ac0 <__ieee754_asinf+0x1a4>
 8014a24:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014a28:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8014ac4 <__ieee754_asinf+0x1a8>
 8014a2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014a30:	eddf 6a25 	vldr	s13, [pc, #148]	; 8014ac8 <__ieee754_asinf+0x1ac>
 8014a34:	eee7 6a27 	vfma.f32	s13, s14, s15
 8014a38:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8014abc <__ieee754_asinf+0x1a0>
 8014a3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014a40:	eddf 6a23 	vldr	s13, [pc, #140]	; 8014ad0 <__ieee754_asinf+0x1b4>
 8014a44:	eee7 6a86 	vfma.f32	s13, s15, s12
 8014a48:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8014ad4 <__ieee754_asinf+0x1b8>
 8014a4c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8014a50:	eddf 6a21 	vldr	s13, [pc, #132]	; 8014ad8 <__ieee754_asinf+0x1bc>
 8014a54:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014a5c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014a60:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8014a64:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014a68:	e76c      	b.n	8014944 <__ieee754_asinf+0x28>
 8014a6a:	ee10 3a10 	vmov	r3, s0
 8014a6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014a72:	f023 030f 	bic.w	r3, r3, #15
 8014a76:	ee07 3a10 	vmov	s14, r3
 8014a7a:	eea7 8a47 	vfms.f32	s16, s14, s14
 8014a7e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8014a82:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014a86:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8014a8a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014aa8 <__ieee754_asinf+0x18c>
 8014a8e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8014a92:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8014a96:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8014ae4 <__ieee754_asinf+0x1c8>
 8014a9a:	eeb0 6a40 	vmov.f32	s12, s0
 8014a9e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014aa2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014aa6:	e7aa      	b.n	80149fe <__ieee754_asinf+0xe2>
 8014aa8:	b33bbd2e 	.word	0xb33bbd2e
 8014aac:	3fc90fdb 	.word	0x3fc90fdb
 8014ab0:	7149f2ca 	.word	0x7149f2ca
 8014ab4:	3811ef08 	.word	0x3811ef08
 8014ab8:	3a4f7f04 	.word	0x3a4f7f04
 8014abc:	3e2aaaab 	.word	0x3e2aaaab
 8014ac0:	bd241146 	.word	0xbd241146
 8014ac4:	3e4e0aa8 	.word	0x3e4e0aa8
 8014ac8:	bea6b090 	.word	0xbea6b090
 8014acc:	3d9dc62e 	.word	0x3d9dc62e
 8014ad0:	bf303361 	.word	0xbf303361
 8014ad4:	4001572d 	.word	0x4001572d
 8014ad8:	c019d139 	.word	0xc019d139
 8014adc:	3f799999 	.word	0x3f799999
 8014ae0:	333bbd2e 	.word	0x333bbd2e
 8014ae4:	3f490fdb 	.word	0x3f490fdb

08014ae8 <__ieee754_atan2f>:
 8014ae8:	ee10 2a90 	vmov	r2, s1
 8014aec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014af0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014af4:	b510      	push	{r4, lr}
 8014af6:	eef0 7a40 	vmov.f32	s15, s0
 8014afa:	dc06      	bgt.n	8014b0a <__ieee754_atan2f+0x22>
 8014afc:	ee10 0a10 	vmov	r0, s0
 8014b00:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014b04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b08:	dd04      	ble.n	8014b14 <__ieee754_atan2f+0x2c>
 8014b0a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8014b12:	bd10      	pop	{r4, pc}
 8014b14:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014b18:	d103      	bne.n	8014b22 <__ieee754_atan2f+0x3a>
 8014b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014b1e:	f000 b98b 	b.w	8014e38 <atanf>
 8014b22:	1794      	asrs	r4, r2, #30
 8014b24:	f004 0402 	and.w	r4, r4, #2
 8014b28:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014b2c:	b93b      	cbnz	r3, 8014b3e <__ieee754_atan2f+0x56>
 8014b2e:	2c02      	cmp	r4, #2
 8014b30:	d05c      	beq.n	8014bec <__ieee754_atan2f+0x104>
 8014b32:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014c00 <__ieee754_atan2f+0x118>
 8014b36:	2c03      	cmp	r4, #3
 8014b38:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8014b3c:	e7e7      	b.n	8014b0e <__ieee754_atan2f+0x26>
 8014b3e:	b939      	cbnz	r1, 8014b50 <__ieee754_atan2f+0x68>
 8014b40:	eddf 7a30 	vldr	s15, [pc, #192]	; 8014c04 <__ieee754_atan2f+0x11c>
 8014b44:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8014c08 <__ieee754_atan2f+0x120>
 8014b48:	2800      	cmp	r0, #0
 8014b4a:	fe67 7a80 	vselge.f32	s15, s15, s0
 8014b4e:	e7de      	b.n	8014b0e <__ieee754_atan2f+0x26>
 8014b50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014b54:	d110      	bne.n	8014b78 <__ieee754_atan2f+0x90>
 8014b56:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8014b5e:	d107      	bne.n	8014b70 <__ieee754_atan2f+0x88>
 8014b60:	2c02      	cmp	r4, #2
 8014b62:	d846      	bhi.n	8014bf2 <__ieee754_atan2f+0x10a>
 8014b64:	4b29      	ldr	r3, [pc, #164]	; (8014c0c <__ieee754_atan2f+0x124>)
 8014b66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014b6a:	edd4 7a00 	vldr	s15, [r4]
 8014b6e:	e7ce      	b.n	8014b0e <__ieee754_atan2f+0x26>
 8014b70:	2c02      	cmp	r4, #2
 8014b72:	d841      	bhi.n	8014bf8 <__ieee754_atan2f+0x110>
 8014b74:	4b26      	ldr	r3, [pc, #152]	; (8014c10 <__ieee754_atan2f+0x128>)
 8014b76:	e7f6      	b.n	8014b66 <__ieee754_atan2f+0x7e>
 8014b78:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b7c:	d0e0      	beq.n	8014b40 <__ieee754_atan2f+0x58>
 8014b7e:	1a5b      	subs	r3, r3, r1
 8014b80:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8014b84:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014b88:	da1a      	bge.n	8014bc0 <__ieee754_atan2f+0xd8>
 8014b8a:	2a00      	cmp	r2, #0
 8014b8c:	da01      	bge.n	8014b92 <__ieee754_atan2f+0xaa>
 8014b8e:	313c      	adds	r1, #60	; 0x3c
 8014b90:	db19      	blt.n	8014bc6 <__ieee754_atan2f+0xde>
 8014b92:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014b96:	f000 fa23 	bl	8014fe0 <fabsf>
 8014b9a:	f000 f94d 	bl	8014e38 <atanf>
 8014b9e:	eef0 7a40 	vmov.f32	s15, s0
 8014ba2:	2c01      	cmp	r4, #1
 8014ba4:	d012      	beq.n	8014bcc <__ieee754_atan2f+0xe4>
 8014ba6:	2c02      	cmp	r4, #2
 8014ba8:	d017      	beq.n	8014bda <__ieee754_atan2f+0xf2>
 8014baa:	2c00      	cmp	r4, #0
 8014bac:	d0af      	beq.n	8014b0e <__ieee754_atan2f+0x26>
 8014bae:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8014c14 <__ieee754_atan2f+0x12c>
 8014bb2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014bb6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8014c18 <__ieee754_atan2f+0x130>
 8014bba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014bbe:	e7a6      	b.n	8014b0e <__ieee754_atan2f+0x26>
 8014bc0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8014c04 <__ieee754_atan2f+0x11c>
 8014bc4:	e7ed      	b.n	8014ba2 <__ieee754_atan2f+0xba>
 8014bc6:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014c1c <__ieee754_atan2f+0x134>
 8014bca:	e7ea      	b.n	8014ba2 <__ieee754_atan2f+0xba>
 8014bcc:	ee17 3a90 	vmov	r3, s15
 8014bd0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014bd4:	ee07 3a90 	vmov	s15, r3
 8014bd8:	e799      	b.n	8014b0e <__ieee754_atan2f+0x26>
 8014bda:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014c14 <__ieee754_atan2f+0x12c>
 8014bde:	ee77 7a80 	vadd.f32	s15, s15, s0
 8014be2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014c18 <__ieee754_atan2f+0x130>
 8014be6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014bea:	e790      	b.n	8014b0e <__ieee754_atan2f+0x26>
 8014bec:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014c18 <__ieee754_atan2f+0x130>
 8014bf0:	e78d      	b.n	8014b0e <__ieee754_atan2f+0x26>
 8014bf2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014c20 <__ieee754_atan2f+0x138>
 8014bf6:	e78a      	b.n	8014b0e <__ieee754_atan2f+0x26>
 8014bf8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014c1c <__ieee754_atan2f+0x134>
 8014bfc:	e787      	b.n	8014b0e <__ieee754_atan2f+0x26>
 8014bfe:	bf00      	nop
 8014c00:	c0490fdb 	.word	0xc0490fdb
 8014c04:	3fc90fdb 	.word	0x3fc90fdb
 8014c08:	bfc90fdb 	.word	0xbfc90fdb
 8014c0c:	08015508 	.word	0x08015508
 8014c10:	08015514 	.word	0x08015514
 8014c14:	33bbbd2e 	.word	0x33bbbd2e
 8014c18:	40490fdb 	.word	0x40490fdb
 8014c1c:	00000000 	.word	0x00000000
 8014c20:	3f490fdb 	.word	0x3f490fdb

08014c24 <__ieee754_sqrtf>:
 8014c24:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014c28:	4770      	bx	lr
 8014c2a:	0000      	movs	r0, r0
 8014c2c:	0000      	movs	r0, r0
	...

08014c30 <atan>:
 8014c30:	b538      	push	{r3, r4, r5, lr}
 8014c32:	eeb0 7b40 	vmov.f64	d7, d0
 8014c36:	ee17 5a90 	vmov	r5, s15
 8014c3a:	4b73      	ldr	r3, [pc, #460]	; (8014e08 <atan+0x1d8>)
 8014c3c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014c40:	429c      	cmp	r4, r3
 8014c42:	dd13      	ble.n	8014c6c <atan+0x3c>
 8014c44:	4b71      	ldr	r3, [pc, #452]	; (8014e0c <atan+0x1dc>)
 8014c46:	429c      	cmp	r4, r3
 8014c48:	dc03      	bgt.n	8014c52 <atan+0x22>
 8014c4a:	d107      	bne.n	8014c5c <atan+0x2c>
 8014c4c:	ee10 3a10 	vmov	r3, s0
 8014c50:	b123      	cbz	r3, 8014c5c <atan+0x2c>
 8014c52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014c56:	eeb0 0b47 	vmov.f64	d0, d7
 8014c5a:	bd38      	pop	{r3, r4, r5, pc}
 8014c5c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8014d98 <atan+0x168>
 8014c60:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8014da0 <atan+0x170>
 8014c64:	2d00      	cmp	r5, #0
 8014c66:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8014c6a:	e7f4      	b.n	8014c56 <atan+0x26>
 8014c6c:	4b68      	ldr	r3, [pc, #416]	; (8014e10 <atan+0x1e0>)
 8014c6e:	429c      	cmp	r4, r3
 8014c70:	dc11      	bgt.n	8014c96 <atan+0x66>
 8014c72:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014c76:	429c      	cmp	r4, r3
 8014c78:	dc0a      	bgt.n	8014c90 <atan+0x60>
 8014c7a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8014c7e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8014da8 <atan+0x178>
 8014c82:	ee30 6b06 	vadd.f64	d6, d0, d6
 8014c86:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c8e:	dce2      	bgt.n	8014c56 <atan+0x26>
 8014c90:	f04f 33ff 	mov.w	r3, #4294967295
 8014c94:	e013      	b.n	8014cbe <atan+0x8e>
 8014c96:	f000 f8c5 	bl	8014e24 <fabs>
 8014c9a:	4b5e      	ldr	r3, [pc, #376]	; (8014e14 <atan+0x1e4>)
 8014c9c:	429c      	cmp	r4, r3
 8014c9e:	dc4f      	bgt.n	8014d40 <atan+0x110>
 8014ca0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014ca4:	429c      	cmp	r4, r3
 8014ca6:	dc41      	bgt.n	8014d2c <atan+0xfc>
 8014ca8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8014cac:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014cb6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014cba:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014cbe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014db0 <atan+0x180>
 8014cc2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8014cc6:	ee24 5b04 	vmul.f64	d5, d4, d4
 8014cca:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014db8 <atan+0x188>
 8014cce:	eea5 3b06 	vfma.f64	d3, d5, d6
 8014cd2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014dc0 <atan+0x190>
 8014cd6:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014cda:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014dc8 <atan+0x198>
 8014cde:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014ce2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014dd0 <atan+0x1a0>
 8014ce6:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014cea:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014dd8 <atan+0x1a8>
 8014cee:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014de0 <atan+0x1b0>
 8014cf2:	eea6 3b05 	vfma.f64	d3, d6, d5
 8014cf6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014de8 <atan+0x1b8>
 8014cfa:	eea5 2b06 	vfma.f64	d2, d5, d6
 8014cfe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014df0 <atan+0x1c0>
 8014d02:	eea2 6b05 	vfma.f64	d6, d2, d5
 8014d06:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014df8 <atan+0x1c8>
 8014d0a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8014d0e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014e00 <atan+0x1d0>
 8014d12:	1c5a      	adds	r2, r3, #1
 8014d14:	eea2 6b05 	vfma.f64	d6, d2, d5
 8014d18:	ee26 6b05 	vmul.f64	d6, d6, d5
 8014d1c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8014d20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8014d24:	d121      	bne.n	8014d6a <atan+0x13a>
 8014d26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014d2a:	e794      	b.n	8014c56 <atan+0x26>
 8014d2c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014d30:	2301      	movs	r3, #1
 8014d32:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014d36:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014d3a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014d3e:	e7be      	b.n	8014cbe <atan+0x8e>
 8014d40:	4b35      	ldr	r3, [pc, #212]	; (8014e18 <atan+0x1e8>)
 8014d42:	429c      	cmp	r4, r3
 8014d44:	da0b      	bge.n	8014d5e <atan+0x12e>
 8014d46:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014d4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014d4e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8014d52:	eea0 6b07 	vfma.f64	d6, d0, d7
 8014d56:	2302      	movs	r3, #2
 8014d58:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8014d5c:	e7af      	b.n	8014cbe <atan+0x8e>
 8014d5e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014d62:	2303      	movs	r3, #3
 8014d64:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014d68:	e7a9      	b.n	8014cbe <atan+0x8e>
 8014d6a:	4a2c      	ldr	r2, [pc, #176]	; (8014e1c <atan+0x1ec>)
 8014d6c:	492c      	ldr	r1, [pc, #176]	; (8014e20 <atan+0x1f0>)
 8014d6e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014d72:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8014d76:	ed93 5b00 	vldr	d5, [r3]
 8014d7a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014d7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014d82:	ed92 6b00 	vldr	d6, [r2]
 8014d86:	2d00      	cmp	r5, #0
 8014d88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014d8c:	bfb8      	it	lt
 8014d8e:	eeb1 7b47 	vneglt.f64	d7, d7
 8014d92:	e760      	b.n	8014c56 <atan+0x26>
 8014d94:	f3af 8000 	nop.w
 8014d98:	54442d18 	.word	0x54442d18
 8014d9c:	3ff921fb 	.word	0x3ff921fb
 8014da0:	54442d18 	.word	0x54442d18
 8014da4:	bff921fb 	.word	0xbff921fb
 8014da8:	8800759c 	.word	0x8800759c
 8014dac:	7e37e43c 	.word	0x7e37e43c
 8014db0:	e322da11 	.word	0xe322da11
 8014db4:	3f90ad3a 	.word	0x3f90ad3a
 8014db8:	24760deb 	.word	0x24760deb
 8014dbc:	3fa97b4b 	.word	0x3fa97b4b
 8014dc0:	a0d03d51 	.word	0xa0d03d51
 8014dc4:	3fb10d66 	.word	0x3fb10d66
 8014dc8:	c54c206e 	.word	0xc54c206e
 8014dcc:	3fb745cd 	.word	0x3fb745cd
 8014dd0:	920083ff 	.word	0x920083ff
 8014dd4:	3fc24924 	.word	0x3fc24924
 8014dd8:	5555550d 	.word	0x5555550d
 8014ddc:	3fd55555 	.word	0x3fd55555
 8014de0:	52defd9a 	.word	0x52defd9a
 8014de4:	bfadde2d 	.word	0xbfadde2d
 8014de8:	2c6a6c2f 	.word	0x2c6a6c2f
 8014dec:	bfa2b444 	.word	0xbfa2b444
 8014df0:	af749a6d 	.word	0xaf749a6d
 8014df4:	bfb3b0f2 	.word	0xbfb3b0f2
 8014df8:	fe231671 	.word	0xfe231671
 8014dfc:	bfbc71c6 	.word	0xbfbc71c6
 8014e00:	9998ebc4 	.word	0x9998ebc4
 8014e04:	bfc99999 	.word	0xbfc99999
 8014e08:	440fffff 	.word	0x440fffff
 8014e0c:	7ff00000 	.word	0x7ff00000
 8014e10:	3fdbffff 	.word	0x3fdbffff
 8014e14:	3ff2ffff 	.word	0x3ff2ffff
 8014e18:	40038000 	.word	0x40038000
 8014e1c:	08015520 	.word	0x08015520
 8014e20:	08015540 	.word	0x08015540

08014e24 <fabs>:
 8014e24:	ec51 0b10 	vmov	r0, r1, d0
 8014e28:	ee10 2a10 	vmov	r2, s0
 8014e2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e30:	ec43 2b10 	vmov	d0, r2, r3
 8014e34:	4770      	bx	lr
	...

08014e38 <atanf>:
 8014e38:	b538      	push	{r3, r4, r5, lr}
 8014e3a:	ee10 5a10 	vmov	r5, s0
 8014e3e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014e42:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014e46:	eef0 7a40 	vmov.f32	s15, s0
 8014e4a:	db0f      	blt.n	8014e6c <atanf+0x34>
 8014e4c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014e50:	dd04      	ble.n	8014e5c <atanf+0x24>
 8014e52:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014e56:	eeb0 0a67 	vmov.f32	s0, s15
 8014e5a:	bd38      	pop	{r3, r4, r5, pc}
 8014e5c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014f94 <atanf+0x15c>
 8014e60:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014f98 <atanf+0x160>
 8014e64:	2d00      	cmp	r5, #0
 8014e66:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8014e6a:	e7f4      	b.n	8014e56 <atanf+0x1e>
 8014e6c:	4b4b      	ldr	r3, [pc, #300]	; (8014f9c <atanf+0x164>)
 8014e6e:	429c      	cmp	r4, r3
 8014e70:	dc10      	bgt.n	8014e94 <atanf+0x5c>
 8014e72:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014e76:	da0a      	bge.n	8014e8e <atanf+0x56>
 8014e78:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014fa0 <atanf+0x168>
 8014e7c:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014e80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014e84:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e8c:	dce3      	bgt.n	8014e56 <atanf+0x1e>
 8014e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e92:	e013      	b.n	8014ebc <atanf+0x84>
 8014e94:	f000 f8a4 	bl	8014fe0 <fabsf>
 8014e98:	4b42      	ldr	r3, [pc, #264]	; (8014fa4 <atanf+0x16c>)
 8014e9a:	429c      	cmp	r4, r3
 8014e9c:	dc4f      	bgt.n	8014f3e <atanf+0x106>
 8014e9e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014ea2:	429c      	cmp	r4, r3
 8014ea4:	dc41      	bgt.n	8014f2a <atanf+0xf2>
 8014ea6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014eaa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014eae:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014eb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014ebc:	1c5a      	adds	r2, r3, #1
 8014ebe:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014ec2:	eddf 5a39 	vldr	s11, [pc, #228]	; 8014fa8 <atanf+0x170>
 8014ec6:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8014fac <atanf+0x174>
 8014eca:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8014fb0 <atanf+0x178>
 8014ece:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8014fb4 <atanf+0x17c>
 8014ed2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014ed6:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014eda:	eddf 5a37 	vldr	s11, [pc, #220]	; 8014fb8 <atanf+0x180>
 8014ede:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014ee2:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8014fbc <atanf+0x184>
 8014ee6:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014eea:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014fc0 <atanf+0x188>
 8014eee:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014ef2:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8014fc4 <atanf+0x18c>
 8014ef6:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014efa:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014fc8 <atanf+0x190>
 8014efe:	eee7 5a05 	vfma.f32	s11, s14, s10
 8014f02:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8014fcc <atanf+0x194>
 8014f06:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014f0a:	eddf 5a31 	vldr	s11, [pc, #196]	; 8014fd0 <atanf+0x198>
 8014f0e:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014f12:	eea5 0a87 	vfma.f32	s0, s11, s14
 8014f16:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014f1a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014f1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014f22:	d121      	bne.n	8014f68 <atanf+0x130>
 8014f24:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014f28:	e795      	b.n	8014e56 <atanf+0x1e>
 8014f2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014f2e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014f32:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014f36:	2301      	movs	r3, #1
 8014f38:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014f3c:	e7be      	b.n	8014ebc <atanf+0x84>
 8014f3e:	4b25      	ldr	r3, [pc, #148]	; (8014fd4 <atanf+0x19c>)
 8014f40:	429c      	cmp	r4, r3
 8014f42:	dc0b      	bgt.n	8014f5c <atanf+0x124>
 8014f44:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014f4c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014f50:	2302      	movs	r3, #2
 8014f52:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014f5a:	e7af      	b.n	8014ebc <atanf+0x84>
 8014f5c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014f60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014f64:	2303      	movs	r3, #3
 8014f66:	e7a9      	b.n	8014ebc <atanf+0x84>
 8014f68:	4a1b      	ldr	r2, [pc, #108]	; (8014fd8 <atanf+0x1a0>)
 8014f6a:	491c      	ldr	r1, [pc, #112]	; (8014fdc <atanf+0x1a4>)
 8014f6c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014f70:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014f74:	ed93 7a00 	vldr	s14, [r3]
 8014f78:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014f7c:	2d00      	cmp	r5, #0
 8014f7e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014f82:	ed92 0a00 	vldr	s0, [r2]
 8014f86:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014f8a:	bfb8      	it	lt
 8014f8c:	eef1 7a67 	vneglt.f32	s15, s15
 8014f90:	e761      	b.n	8014e56 <atanf+0x1e>
 8014f92:	bf00      	nop
 8014f94:	3fc90fdb 	.word	0x3fc90fdb
 8014f98:	bfc90fdb 	.word	0xbfc90fdb
 8014f9c:	3edfffff 	.word	0x3edfffff
 8014fa0:	7149f2ca 	.word	0x7149f2ca
 8014fa4:	3f97ffff 	.word	0x3f97ffff
 8014fa8:	3c8569d7 	.word	0x3c8569d7
 8014fac:	3d4bda59 	.word	0x3d4bda59
 8014fb0:	bd15a221 	.word	0xbd15a221
 8014fb4:	be4ccccd 	.word	0xbe4ccccd
 8014fb8:	3d886b35 	.word	0x3d886b35
 8014fbc:	3dba2e6e 	.word	0x3dba2e6e
 8014fc0:	3e124925 	.word	0x3e124925
 8014fc4:	3eaaaaab 	.word	0x3eaaaaab
 8014fc8:	bd6ef16b 	.word	0xbd6ef16b
 8014fcc:	bd9d8795 	.word	0xbd9d8795
 8014fd0:	bde38e38 	.word	0xbde38e38
 8014fd4:	401bffff 	.word	0x401bffff
 8014fd8:	08015560 	.word	0x08015560
 8014fdc:	08015570 	.word	0x08015570

08014fe0 <fabsf>:
 8014fe0:	ee10 3a10 	vmov	r3, s0
 8014fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014fe8:	ee00 3a10 	vmov	s0, r3
 8014fec:	4770      	bx	lr
	...

08014ff0 <nanf>:
 8014ff0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014ff8 <nanf+0x8>
 8014ff4:	4770      	bx	lr
 8014ff6:	bf00      	nop
 8014ff8:	7fc00000 	.word	0x7fc00000

08014ffc <_init>:
 8014ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ffe:	bf00      	nop
 8015000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015002:	bc08      	pop	{r3}
 8015004:	469e      	mov	lr, r3
 8015006:	4770      	bx	lr

08015008 <_fini>:
 8015008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801500a:	bf00      	nop
 801500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801500e:	bc08      	pop	{r3}
 8015010:	469e      	mov	lr, r3
 8015012:	4770      	bx	lr
