
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08014570  08014570  00024570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014ad8  08014ad8  00024ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014ae0  08014ae0  00024ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014ae4  08014ae4  00024ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08014ae8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000060c  240001f8  08014ce0  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000804  08014ce0  00030804  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bd6a  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004537  00000000  00000000  0005bf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e8  00000000  00000000  000604c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016d8  00000000  00000000  00061cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394f7  00000000  00000000  00063388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f763  00000000  00000000  0009c87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168716  00000000  00000000  000bbfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002246f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076e4  00000000  00000000  0022474c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014554 	.word	0x08014554

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08014554 	.word	0x08014554

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:

FSiA6B_iBus iBus;
uint8_t iBus_return;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	815a      	strh	r2, [r3, #10]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	825a      	strh	r2, [r3, #18]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	81da      	strh	r2, [r3, #14]

	iBus->FailSafe = (data[13] >> 4);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	330d      	adds	r3, #13
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	b2da      	uxtb	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	751a      	strb	r2, [r3, #20]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus* iBus)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7d1b      	ldrb	r3, [r3, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af04      	add	r7, sp, #16
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70bb      	strb	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d81b      	bhi.n	80008e8 <MPU9250_Init+0x58>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <MPU9250_Init+0x28>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	080008d1 	.word	0x080008d1
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	080008e1 	.word	0x080008e1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008ca:	4a5e      	ldr	r2, [pc, #376]	; (8000a44 <MPU9250_Init+0x1b4>)
 80008cc:	601a      	str	r2, [r3, #0]
		break;
 80008ce:	e00c      	b.n	80008ea <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008d0:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008d2:	4a5d      	ldr	r2, [pc, #372]	; (8000a48 <MPU9250_Init+0x1b8>)
 80008d4:	601a      	str	r2, [r3, #0]
		break;
 80008d6:	e008      	b.n	80008ea <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008da:	4a5c      	ldr	r2, [pc, #368]	; (8000a4c <MPU9250_Init+0x1bc>)
 80008dc:	601a      	str	r2, [r3, #0]
		break;
 80008de:	e004      	b.n	80008ea <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008e0:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008e2:	4a5b      	ldr	r2, [pc, #364]	; (8000a50 <MPU9250_Init+0x1c0>)
 80008e4:	601a      	str	r2, [r3, #0]
		break;
 80008e6:	e000      	b.n	80008ea <MPU9250_Init+0x5a>
	default:
		break;
 80008e8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d81f      	bhi.n	8000930 <MPU9250_Init+0xa0>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <MPU9250_Init+0x68>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000909 	.word	0x08000909
 80008fc:	08000913 	.word	0x08000913
 8000900:	0800091d 	.word	0x0800091d
 8000904:	08000927 	.word	0x08000927
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000908:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <MPU9250_Init+0x1c4>)
 800090a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800090e:	601a      	str	r2, [r3, #0]
		break;
 8000910:	e00f      	b.n	8000932 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000914:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000918:	601a      	str	r2, [r3, #0]
		break;
 800091a:	e00a      	b.n	8000932 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MPU9250_Init+0x1c4>)
 800091e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000922:	601a      	str	r2, [r3, #0]
		break;
 8000924:	e005      	b.n	8000932 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000928:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800092c:	601a      	str	r2, [r3, #0]
		break;
 800092e:	e000      	b.n	8000932 <MPU9250_Init+0xa2>
	default:
		break;
 8000930:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	2301      	movs	r3, #1
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <MPU9250_Init+0x1c8>)
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2301      	movs	r3, #1
 8000940:	2275      	movs	r2, #117	; 0x75
 8000942:	21d0      	movs	r1, #208	; 0xd0
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f007 ff69 	bl	800881c <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800094a:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <MPU9250_Init+0x1c8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b71      	cmp	r3, #113	; 0x71
 8000950:	d171      	bne.n	8000a36 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2219      	movs	r2, #25
 8000968:	21d0      	movs	r1, #208	; 0xd0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f007 fe42 	bl	80085f4 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000970:	200a      	movs	r0, #10
 8000972:	f004 fc51 	bl	8005218 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000976:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000978:	787b      	ldrb	r3, [r7, #1]
 800097a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	221a      	movs	r2, #26
 800098c:	21d0      	movs	r1, #208	; 0xd0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f007 fe30 	bl	80085f4 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000994:	200a      	movs	r0, #10
 8000996:	f004 fc3f 	bl	8005218 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009a2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	221b      	movs	r2, #27
 80009b4:	21d0      	movs	r1, #208	; 0xd0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f007 fe1c 	bl	80085f4 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009bc:	200a      	movs	r0, #10
 80009be:	f004 fc2b 	bl	8005218 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80009c2:	78bb      	ldrb	r3, [r7, #2]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ca:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2301      	movs	r3, #1
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	221c      	movs	r2, #28
 80009dc:	21d0      	movs	r1, #208	; 0xd0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f007 fe08 	bl	80085f4 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f004 fc17 	bl	8005218 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	221d      	movs	r2, #29
 8000a00:	21d0      	movs	r1, #208	; 0xd0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f007 fdf6 	bl	80085f4 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f004 fc05 	bl	8005218 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	226b      	movs	r2, #107	; 0x6b
 8000a24:	21d0      	movs	r1, #208	; 0xd0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f007 fde4 	bl	80085f4 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f004 fbf3 	bl	8005218 <HAL_Delay>

		return 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000000 	.word	0x24000000
 8000a44:	43030000 	.word	0x43030000
 8000a48:	42830000 	.word	0x42830000
 8000a4c:	42033333 	.word	0x42033333
 8000a50:	41833333 	.word	0x41833333
 8000a54:	24000004 	.word	0x24000004
 8000a58:	240002f9 	.word	0x240002f9
 8000a5c:	24000279 	.word	0x24000279

08000a60 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	226a      	movs	r2, #106	; 0x6a
 8000a7e:	21d0      	movs	r1, #208	; 0xd0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f007 fdb7 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f004 fbc6 	bl	8005218 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	2237      	movs	r2, #55	; 0x37
 8000aa2:	21d0      	movs	r1, #208	; 0xd0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f007 fda5 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f004 fbb4 	bl	8005218 <HAL_Delay>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000279 	.word	0x24000279

08000abc <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	2237      	movs	r2, #55	; 0x37
 8000ada:	21d0      	movs	r1, #208	; 0xd0
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f007 fd89 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ae2:	200a      	movs	r0, #10
 8000ae4:	f004 fb98 	bl	8005218 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MPU9250_Master+0xa0>)
 8000aea:	2220      	movs	r2, #32
 8000aec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MPU9250_Master+0xa0>)
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	226a      	movs	r2, #106	; 0x6a
 8000afe:	21d0      	movs	r1, #208	; 0xd0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f007 fd77 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f004 fb86 	bl	8005218 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b0e:	220d      	movs	r2, #13
 8000b10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2301      	movs	r3, #1
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2224      	movs	r2, #36	; 0x24
 8000b22:	21d0      	movs	r1, #208	; 0xd0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f007 fd65 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f004 fb74 	bl	8005218 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	226b      	movs	r2, #107	; 0x6b
 8000b46:	21d0      	movs	r1, #208	; 0xd0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f007 fd53 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f004 fb62 	bl	8005218 <HAL_Delay>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000279 	.word	0x24000279

08000b60 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b6c:	2216      	movs	r2, #22
 8000b6e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	9302      	str	r3, [sp, #8]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	220a      	movs	r2, #10
 8000b80:	2118      	movs	r1, #24
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f007 fd36 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b88:	200a      	movs	r0, #10
 8000b8a:	f004 fb45 	bl	8005218 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2303      	movs	r3, #3
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	2118      	movs	r1, #24
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f007 fe3b 	bl	800881c <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f004 fb36 	bl	8005218 <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bb8:	785a      	ldrb	r2, [r3, #1]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bc2:	789a      	ldrb	r2, [r3, #2]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2303      	movs	r3, #3
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2118      	movs	r1, #24
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f007 fe1d 	bl	800881c <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f004 fb18 	bl	8005218 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b48      	cmp	r3, #72	; 0x48
 8000bee:	d101      	bne.n	8000bf4 <MPU9250_AK8963_Setup+0x94>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <MPU9250_AK8963_Setup+0x96>
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000279 	.word	0x24000279
 8000c04:	240002fc 	.word	0x240002fc
 8000c08:	240002f8 	.word	0x240002f8

08000c0c <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c16:	228c      	movs	r2, #140	; 0x8c
 8000c18:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	2225      	movs	r2, #37	; 0x25
 8000c2a:	21d0      	movs	r1, #208	; 0xd0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f007 fce1 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c32:	200a      	movs	r0, #10
 8000c34:	f004 faf0 	bl	8005218 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2226      	movs	r2, #38	; 0x26
 8000c4e:	21d0      	movs	r1, #208	; 0xd0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f007 fccf 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f004 fade 	bl	8005218 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c5e:	2287      	movs	r2, #135	; 0x87
 8000c60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2227      	movs	r2, #39	; 0x27
 8000c72:	21d0      	movs	r1, #208	; 0xd0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f007 fcbd 	bl	80085f4 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f004 facc 	bl	8005218 <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000279 	.word	0x24000279

08000c8c <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c94:	2314      	movs	r3, #20
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <MPU9250_Read_All+0x24>)
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	223b      	movs	r2, #59	; 0x3b
 8000ca0:	21d0      	movs	r1, #208	; 0xd0
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f007 fed4 	bl	8008a50 <HAL_I2C_Mem_Read_DMA>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240002fc 	.word	0x240002fc

08000cb4 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000cbc:	4bb6      	ldr	r3, [pc, #728]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	4bb4      	ldr	r3, [pc, #720]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	b21a      	sxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cda:	4baf      	ldr	r3, [pc, #700]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4bad      	ldr	r3, [pc, #692]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000ce4:	78db      	ldrb	r3, [r3, #3]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 8000cf0:	4ba9      	ldr	r3, [pc, #676]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cf2:	791b      	ldrb	r3, [r3, #4]
 8000cf4:	021b      	lsls	r3, r3, #8
 8000cf6:	b21a      	sxth	r2, r3
 8000cf8:	4ba7      	ldr	r3, [pc, #668]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000cfa:	795b      	ldrb	r3, [r3, #5]
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000d06:	4ba4      	ldr	r3, [pc, #656]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d08:	7a1b      	ldrb	r3, [r3, #8]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4ba2      	ldr	r3, [pc, #648]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d10:	7a5b      	ldrb	r3, [r3, #9]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000d1c:	4b9e      	ldr	r3, [pc, #632]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d1e:	7a9b      	ldrb	r3, [r3, #10]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b9c      	ldr	r3, [pc, #624]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d26:	7adb      	ldrb	r3, [r3, #11]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	425b      	negs	r3, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d3a:	4b97      	ldr	r3, [pc, #604]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d3c:	7b1b      	ldrb	r3, [r3, #12]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	4b95      	ldr	r3, [pc, #596]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d44:	7b5b      	ldrb	r3, [r3, #13]
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	425b      	negs	r3, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d58:	4b8f      	ldr	r3, [pc, #572]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d5a:	7bdb      	ldrb	r3, [r3, #15]
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b8d      	ldr	r3, [pc, #564]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d62:	7b9b      	ldrb	r3, [r3, #14]
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	425b      	negs	r3, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b21a      	sxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d78:	4b87      	ldr	r3, [pc, #540]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d7a:	7c5b      	ldrb	r3, [r3, #17]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b85      	ldr	r3, [pc, #532]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d82:	7c1b      	ldrb	r3, [r3, #16]
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4313      	orrs	r3, r2
 8000d88:	b21a      	sxth	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d90:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d92:	7cdb      	ldrb	r3, [r3, #19]
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b7f      	ldr	r3, [pc, #508]	; (8000f98 <MPU9250_Parsing+0x2e4>)
 8000d9a:	7c9b      	ldrb	r3, [r3, #18]
 8000d9c:	b21b      	sxth	r3, r3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000db6:	4b79      	ldr	r3, [pc, #484]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000db8:	ed93 7a00 	vldr	s14, [r3]
 8000dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dd4:	4b71      	ldr	r3, [pc, #452]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = (DataStruct->Az_Raw / MPU9250_Acc_LSB);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <MPU9250_Parsing+0x2e8>)
 8000df4:	ed93 7a00 	vldr	s14, [r3]
 8000df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e08:	ee07 3a90 	vmov	s15, r3
 8000e0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e10:	4b63      	ldr	r3, [pc, #396]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e12:	ed93 7a00 	vldr	s14, [r3]
 8000e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e2e:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e30:	ed93 7a00 	vldr	s14, [r3]
 8000e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000e44:	ee07 3a90 	vmov	s15, r3
 8000e48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e4c:	4b54      	ldr	r3, [pc, #336]	; (8000fa0 <MPU9250_Parsing+0x2ec>)
 8000e4e:	ed93 7a00 	vldr	s14, [r3]
 8000e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000e62:	461a      	mov	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000e6a:	3b80      	subs	r3, #128	; 0x80
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da00      	bge.n	8000e72 <MPU9250_Parsing+0x1be>
 8000e70:	33ff      	adds	r3, #255	; 0xff
 8000e72:	121b      	asrs	r3, r3, #8
 8000e74:	3301      	adds	r3, #1
 8000e76:	fb03 f302 	mul.w	r3, r3, r2
 8000e7a:	ee07 3a90 	vmov	s15, r3
 8000e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e82:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000e84:	edd3 7a00 	vldr	s15, [r3]
 8000e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000ea0:	3b80      	subs	r3, #128	; 0x80
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	da00      	bge.n	8000ea8 <MPU9250_Parsing+0x1f4>
 8000ea6:	33ff      	adds	r3, #255	; 0xff
 8000ea8:	121b      	asrs	r3, r3, #8
 8000eaa:	3301      	adds	r3, #1
 8000eac:	fb03 f302 	mul.w	r3, r3, r2
 8000eb0:	ee07 3a90 	vmov	s15, r3
 8000eb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ed6:	3b80      	subs	r3, #128	; 0x80
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da00      	bge.n	8000ede <MPU9250_Parsing+0x22a>
 8000edc:	33ff      	adds	r3, #255	; 0xff
 8000ede:	121b      	asrs	r3, r3, #8
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	fb03 f302 	mul.w	r3, r3, r2
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MPU9250_Parsing+0x2f0>)
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My -= DataStruct->My_Offset;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f88:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 8000f96:	e009      	b.n	8000fac <MPU9250_Parsing+0x2f8>
 8000f98:	240002fc 	.word	0x240002fc
 8000f9c:	24000004 	.word	0x24000004
 8000fa0:	24000000 	.word	0x24000000
 8000fa4:	24000008 	.word	0x24000008
 8000fa8:	3c8efa35 	.word	0x3c8efa35
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fb2:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fc6:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8000fa8 <MPU9250_Parsing+0x2f4>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000fe8:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8000ff2:	785b      	ldrb	r3, [r3, #1]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8001006:	4b9b      	ldr	r3, [pc, #620]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b99      	ldr	r3, [pc, #612]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 800101c:	4b95      	ldr	r3, [pc, #596]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800101e:	791b      	ldrb	r3, [r3, #4]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b93      	ldr	r3, [pc, #588]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001026:	795b      	ldrb	r3, [r3, #5]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8001032:	4b90      	ldr	r3, [pc, #576]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001034:	7a1b      	ldrb	r3, [r3, #8]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b8e      	ldr	r3, [pc, #568]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800103c:	7a5b      	ldrb	r3, [r3, #9]
 800103e:	b21b      	sxth	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b21a      	sxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001048:	4b8a      	ldr	r3, [pc, #552]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800104a:	7a9b      	ldrb	r3, [r3, #10]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	4b88      	ldr	r3, [pc, #544]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001052:	7adb      	ldrb	r3, [r3, #11]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29b      	uxth	r3, r3
 800105c:	425b      	negs	r3, r3
 800105e:	b29b      	uxth	r3, r3
 8001060:	b21a      	sxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8001066:	4b83      	ldr	r3, [pc, #524]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001068:	7b1b      	ldrb	r3, [r3, #12]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b81      	ldr	r3, [pc, #516]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001070:	7b5b      	ldrb	r3, [r3, #13]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	b29b      	uxth	r3, r3
 800107a:	425b      	negs	r3, r3
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8001084:	4b7b      	ldr	r3, [pc, #492]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 8001086:	7bdb      	ldrb	r3, [r3, #15]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b79      	ldr	r3, [pc, #484]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 800108e:	7b9b      	ldrb	r3, [r3, #14]
 8001090:	b21b      	sxth	r3, r3
 8001092:	4313      	orrs	r3, r2
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29b      	uxth	r3, r3
 8001098:	425b      	negs	r3, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	b21a      	sxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010a4:	4b73      	ldr	r3, [pc, #460]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010a6:	7c5b      	ldrb	r3, [r3, #17]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	4b71      	ldr	r3, [pc, #452]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010ae:	7c1b      	ldrb	r3, [r3, #16]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010bc:	4b6d      	ldr	r3, [pc, #436]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010be:	7cdb      	ldrb	r3, [r3, #19]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b6b      	ldr	r3, [pc, #428]	; (8001274 <MPU9250_Parsing_NoOffset+0x294>)
 80010c6:	7c9b      	ldrb	r3, [r3, #18]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e2:	4b65      	ldr	r3, [pc, #404]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f8:	ee07 3a90 	vmov	s15, r3
 80010fc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001100:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = (DataStruct->Az_Raw / MPU9250_Acc_LSB);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800111e:	4b56      	ldr	r3, [pc, #344]	; (8001278 <MPU9250_Parsing_NoOffset+0x298>)
 8001120:	ed93 7a00 	vldr	s14, [r3]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800113c:	4b4f      	ldr	r3, [pc, #316]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001178:	4b40      	ldr	r3, [pc, #256]	; (800127c <MPU9250_Parsing_NoOffset+0x29c>)
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8001196:	3b80      	subs	r3, #128	; 0x80
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <MPU9250_Parsing_NoOffset+0x1be>
 800119c:	33ff      	adds	r3, #255	; 0xff
 800119e:	121b      	asrs	r3, r3, #8
 80011a0:	3301      	adds	r3, #1
 80011a2:	fb03 f302 	mul.w	r3, r3, r2
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	4b34      	ldr	r3, [pc, #208]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80011cc:	3b80      	subs	r3, #128	; 0x80
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	da00      	bge.n	80011d4 <MPU9250_Parsing_NoOffset+0x1f4>
 80011d2:	33ff      	adds	r3, #255	; 0xff
 80011d4:	121b      	asrs	r3, r3, #8
 80011d6:	3301      	adds	r3, #1
 80011d8:	fb03 f302 	mul.w	r3, r3, r2
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001202:	3b80      	subs	r3, #128	; 0x80
 8001204:	2b00      	cmp	r3, #0
 8001206:	da00      	bge.n	800120a <MPU9250_Parsing_NoOffset+0x22a>
 8001208:	33ff      	adds	r3, #255	; 0xff
 800120a:	121b      	asrs	r3, r3, #8
 800120c:	3301      	adds	r3, #1
 800120e:	fb03 f302 	mul.w	r3, r3, r2
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MPU9250_Parsing_NoOffset+0x2a0>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001230:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	edd3 7a08 	vldr	s15, [r3, #32]
 8001244:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 8001248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001258:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001284 <MPU9250_Parsing_NoOffset+0x2a4>
 800125c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	240002fc 	.word	0x240002fc
 8001278:	24000004 	.word	0x24000004
 800127c:	24000000 	.word	0x24000000
 8001280:	24000008 	.word	0x24000008
 8001284:	3c8efa35 	.word	0x3c8efa35

08001288 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b0ae      	sub	sp, #184	; 0xb8
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001292:	edc7 0a08 	vstr	s1, [r7, #32]
 8001296:	ed87 1a07 	vstr	s2, [r7, #28]
 800129a:	edc7 1a06 	vstr	s3, [r7, #24]
 800129e:	ed87 2a05 	vstr	s4, [r7, #20]
 80012a2:	edc7 2a04 	vstr	s5, [r7, #16]
 80012a6:	ed87 3a03 	vstr	s6, [r7, #12]
 80012aa:	edc7 3a02 	vstr	s7, [r7, #8]
 80012ae:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80012b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	d11d      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
 80012c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012cc:	d116      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
 80012ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	d10f      	bne.n	80012fc <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80012dc:	edd7 2a04 	vldr	s5, [r7, #16]
 80012e0:	ed97 2a05 	vldr	s4, [r7, #20]
 80012e4:	edd7 1a06 	vldr	s3, [r7, #24]
 80012e8:	ed97 1a07 	vldr	s2, [r7, #28]
 80012ec:	edd7 0a08 	vldr	s1, [r7, #32]
 80012f0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80012f4:	f000 ffd6 	bl	80022a4 <MadgwickAHRSupdateIMU>
		return;
 80012f8:	f000 bfb4 	b.w	8002264 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80012fc:	4be6      	ldr	r3, [pc, #920]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eeb1 7a67 	vneg.f32	s14, s15
 8001306:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800130a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130e:	4be3      	ldr	r3, [pc, #908]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001310:	edd3 6a00 	vldr	s13, [r3]
 8001314:	edd7 7a08 	vldr	s15, [r7, #32]
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001320:	4bdf      	ldr	r3, [pc, #892]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001322:	edd3 6a00 	vldr	s13, [r3]
 8001326:	edd7 7a07 	vldr	s15, [r7, #28]
 800132a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001332:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800133e:	4bd9      	ldr	r3, [pc, #868]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 8001340:	ed93 7a00 	vldr	s14, [r3]
 8001344:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001348:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134c:	4bd3      	ldr	r3, [pc, #844]	; (800169c <MadgwickAHRSupdate+0x414>)
 800134e:	edd3 6a00 	vldr	s13, [r3]
 8001352:	edd7 7a07 	vldr	s15, [r7, #28]
 8001356:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800135e:	4bd0      	ldr	r3, [pc, #832]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001360:	edd3 6a00 	vldr	s13, [r3]
 8001364:	edd7 7a08 	vldr	s15, [r7, #32]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001370:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800137c:	4bc9      	ldr	r3, [pc, #804]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800137e:	ed93 7a00 	vldr	s14, [r3]
 8001382:	edd7 7a08 	vldr	s15, [r7, #32]
 8001386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138a:	4bc3      	ldr	r3, [pc, #780]	; (8001698 <MadgwickAHRSupdate+0x410>)
 800138c:	edd3 6a00 	vldr	s13, [r3]
 8001390:	edd7 7a07 	vldr	s15, [r7, #28]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800139c:	4bc0      	ldr	r3, [pc, #768]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 800139e:	edd3 6a00 	vldr	s13, [r3]
 80013a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80013ba:	4bba      	ldr	r3, [pc, #744]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c8:	4bb3      	ldr	r3, [pc, #716]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80013ca:	edd3 6a00 	vldr	s13, [r3]
 80013ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80013d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013da:	4bb0      	ldr	r3, [pc, #704]	; (800169c <MadgwickAHRSupdate+0x414>)
 80013dc:	edd3 6a00 	vldr	s13, [r3]
 80013e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80013f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001404:	d10e      	bne.n	8001424 <MadgwickAHRSupdate+0x19c>
 8001406:	edd7 7a05 	vldr	s15, [r7, #20]
 800140a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d107      	bne.n	8001424 <MadgwickAHRSupdate+0x19c>
 8001414:	edd7 7a04 	vldr	s15, [r7, #16]
 8001418:	eef5 7a40 	vcmp.f32	s15, #0.0
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	f000 85a6 	beq.w	8001f70 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001424:	edd7 7a06 	vldr	s15, [r7, #24]
 8001428:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800142c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001430:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001438:	edd7 7a04 	vldr	s15, [r7, #16]
 800143c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001444:	eeb0 0a67 	vmov.f32	s0, s15
 8001448:	f001 fb5a 	bl	8002b00 <invSqrt>
 800144c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001450:	ed97 7a06 	vldr	s14, [r7, #24]
 8001454:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001460:	ed97 7a05 	vldr	s14, [r7, #20]
 8001464:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146c:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001470:	ed97 7a04 	vldr	s14, [r7, #16]
 8001474:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001480:	edd7 7a03 	vldr	s15, [r7, #12]
 8001484:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001488:	edd7 7a02 	vldr	s15, [r7, #8]
 800148c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 7a01 	vldr	s15, [r7, #4]
 8001498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	f001 fb2c 	bl	8002b00 <invSqrt>
 80014a8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80014ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80014b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80014bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80014cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80014dc:	4b71      	ldr	r3, [pc, #452]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ee:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001512:	ed97 7a01 	vldr	s14, [r7, #4]
 8001516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800151e:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001528:	ed97 7a03 	vldr	s14, [r7, #12]
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800153e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001542:	4b55      	ldr	r3, [pc, #340]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800154c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001550:	4b52      	ldr	r3, [pc, #328]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800155a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 800155e:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001568:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 800156c:	4b4d      	ldr	r3, [pc, #308]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001580:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001584:	4b45      	ldr	r3, [pc, #276]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800158e:	4b44      	ldr	r3, [pc, #272]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 800159c:	4b41      	ldr	r3, [pc, #260]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80015b0:	4b3c      	ldr	r3, [pc, #240]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	4b38      	ldr	r3, [pc, #224]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80015c4:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <MadgwickAHRSupdate+0x414>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80015d8:	4b32      	ldr	r3, [pc, #200]	; (80016a4 <MadgwickAHRSupdate+0x41c>)
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <MadgwickAHRSupdate+0x410>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001600:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <MadgwickAHRSupdate+0x410>)
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MadgwickAHRSupdate+0x414>)
 800162a:	ed93 7a00 	vldr	s14, [r3]
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 800163c:	4b17      	ldr	r3, [pc, #92]	; (800169c <MadgwickAHRSupdate+0x414>)
 800163e:	ed93 7a00 	vldr	s14, [r3]
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001652:	ed93 7a00 	vldr	s14, [r3]
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001664:	ed97 7a03 	vldr	s14, [r7, #12]
 8001668:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800166c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MadgwickAHRSupdate+0x418>)
 8001672:	edd3 6a00 	vldr	s13, [r3]
 8001676:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MadgwickAHRSupdate+0x414>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800168c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001690:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001694:	e008      	b.n	80016a8 <MadgwickAHRSupdate+0x420>
 8001696:	bf00      	nop
 8001698:	24000214 	.word	0x24000214
 800169c:	24000218 	.word	0x24000218
 80016a0:	2400021c 	.word	0x2400021c
 80016a4:	24000010 	.word	0x24000010
 80016a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ac:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80016b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b8:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80016bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016c4:	4bf5      	ldr	r3, [pc, #980]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80016d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	4bf0      	ldr	r3, [pc, #960]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ec:	edd7 6a03 	vldr	s13, [r7, #12]
 80016f0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001700:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001710:	4be3      	ldr	r3, [pc, #908]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800171a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800171e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001722:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172e:	4bdd      	ldr	r3, [pc, #884]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001730:	edd3 6a00 	vldr	s13, [r3]
 8001734:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800173c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001740:	4bd6      	ldr	r3, [pc, #856]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 8001742:	edd3 6a00 	vldr	s13, [r3]
 8001746:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001752:	edd7 6a02 	vldr	s13, [r7, #8]
 8001756:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800175a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001762:	edd7 6a02 	vldr	s13, [r7, #8]
 8001766:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800176a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001772:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001776:	edd7 7a01 	vldr	s15, [r7, #4]
 800177a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800177e:	4bc8      	ldr	r3, [pc, #800]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001780:	edd3 7a00 	vldr	s15, [r3]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001790:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80017a0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017a8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80017ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017b8:	eeb0 0b47 	vmov.f64	d0, d7
 80017bc:	f012 fa28 	bl	8013c10 <sqrt>
 80017c0:	eeb0 7b40 	vmov.f64	d7, d0
 80017c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80017cc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80017d0:	eeb1 7a67 	vneg.f32	s14, s15
 80017d4:	4bb1      	ldr	r3, [pc, #708]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017de:	4bb1      	ldr	r3, [pc, #708]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 80017e0:	edd3 6a00 	vldr	s13, [r3]
 80017e4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017f4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001800:	4ba7      	ldr	r3, [pc, #668]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001802:	edd3 6a00 	vldr	s13, [r3]
 8001806:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001812:	edd7 6a01 	vldr	s13, [r7, #4]
 8001816:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800181a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001822:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001826:	edd7 7a02 	vldr	s15, [r7, #8]
 800182a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800182e:	4b9c      	ldr	r3, [pc, #624]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001840:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee37 7a67 	vsub.f32	s14, s14, s15
 800184c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001850:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001860:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001864:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001868:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 800186c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001870:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001874:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001878:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800187c:	eeb1 7a67 	vneg.f32	s14, s15
 8001880:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001884:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001888:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800188c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001890:	edd7 7a06 	vldr	s15, [r7, #24]
 8001894:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018a4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018b4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80018b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 80018c2:	edd3 6a00 	vldr	s13, [r3]
 80018c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80018d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018d6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018de:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ea:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80018ee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018f2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018fa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018fe:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001902:	edd7 7a03 	vldr	s15, [r7, #12]
 8001906:	ee76 7a67 	vsub.f32	s15, s12, s15
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001912:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001916:	eef1 6a67 	vneg.f32	s13, s15
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001924:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001926:	ed93 6a00 	vldr	s12, [r3]
 800192a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800192e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001932:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001936:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800193a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800193e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001942:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001946:	ee26 6a27 	vmul.f32	s12, s12, s15
 800194a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800194e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001952:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001956:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800195a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800195e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	ee76 7a67 	vsub.f32	s15, s12, s15
 800196a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <MadgwickAHRSupdate+0x814>)
 8001974:	edd3 6a00 	vldr	s13, [r3]
 8001978:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800197c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001980:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001984:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001988:	ee36 6a27 	vadd.f32	s12, s12, s15
 800198c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001990:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001994:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001998:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800199c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019a4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019a8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80019c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019d0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019ec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a00:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0c:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <MadgwickAHRSupdate+0x81c>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a16:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a1a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a22:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a26:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a32:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a36:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MadgwickAHRSupdate+0x818>)
 8001a48:	edd3 6a00 	vldr	s13, [r3]
 8001a4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a54:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a58:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a5c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a60:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a68:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a70:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a74:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a78:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a98:	e006      	b.n	8001aa8 <MadgwickAHRSupdate+0x820>
 8001a9a:	bf00      	nop
 8001a9c:	24000218 	.word	0x24000218
 8001aa0:	2400021c 	.word	0x2400021c
 8001aa4:	24000214 	.word	0x24000214
 8001aa8:	4bf6      	ldr	r3, [pc, #984]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001aaa:	edd3 6a00 	vldr	s13, [r3]
 8001aae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ab2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ab6:	4bf4      	ldr	r3, [pc, #976]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001ab8:	ed93 6a00 	vldr	s12, [r3]
 8001abc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ac0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ac4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ac8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001acc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ad0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ad4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001adc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001ae0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ae4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ae8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001af0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001af4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001af8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b04:	4be1      	ldr	r3, [pc, #900]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001b06:	edd3 6a00 	vldr	s13, [r3]
 8001b0a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b12:	4bdf      	ldr	r3, [pc, #892]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001b14:	ed93 6a00 	vldr	s12, [r3]
 8001b18:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b24:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b2c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b38:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b3c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b40:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b44:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b48:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b50:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b6c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b70:	eeb1 7a67 	vneg.f32	s14, s15
 8001b74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b7c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b84:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b90:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b94:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b98:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b9c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ba8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb4:	4bb3      	ldr	r3, [pc, #716]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001bbe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bc2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001bce:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bd2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bda:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bee:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001bf2:	eef1 6a67 	vneg.f32	s13, s15
 8001bf6:	4ba3      	ldr	r3, [pc, #652]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c00:	4ba1      	ldr	r3, [pc, #644]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001c02:	ed93 6a00 	vldr	s12, [r3]
 8001c06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c0a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c12:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c16:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c1a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c1e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c22:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c26:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c2e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c32:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c36:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c3e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c42:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c56:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001c58:	edd3 6a00 	vldr	s13, [r3]
 8001c5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c64:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001c66:	ed93 6a00 	vldr	s12, [r3]
 8001c6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c72:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c76:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c7a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c7e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c8a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c8e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c92:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb2:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001cb4:	edd3 6a00 	vldr	s13, [r3]
 8001cb8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc0:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001cc2:	ed93 6a00 	vldr	s12, [r3]
 8001cc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cd2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001cd6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cda:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cde:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ce2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cee:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cf2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cf6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cfa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cfe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d02:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d1a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d1e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d22:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d32:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d3a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d3e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d42:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d52:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d62:	eef1 6a67 	vneg.f32	s13, s15
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <MadgwickAHRSupdate+0xc04>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d70:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001d72:	ed93 6a00 	vldr	s12, [r3]
 8001d76:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d82:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001d86:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d8a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d8e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d92:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d9a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d9e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001da2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001da6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001daa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001db2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001db6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dba:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dca:	eef1 6a67 	vneg.f32	s13, s15
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <MadgwickAHRSupdate+0xc00>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <MadgwickAHRSupdate+0xbfc>)
 8001dda:	ed93 6a00 	vldr	s12, [r3]
 8001dde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001de6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dea:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001dee:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001df2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001df6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dfe:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e02:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e06:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e0e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e12:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e26:	4b1a      	ldr	r3, [pc, #104]	; (8001e90 <MadgwickAHRSupdate+0xc08>)
 8001e28:	edd3 6a00 	vldr	s13, [r3]
 8001e2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e34:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e38:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e40:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e44:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e48:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e4c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e50:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e58:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001e7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e80:	e008      	b.n	8001e94 <MadgwickAHRSupdate+0xc0c>
 8001e82:	bf00      	nop
 8001e84:	24000218 	.word	0x24000218
 8001e88:	24000010 	.word	0x24000010
 8001e8c:	2400021c 	.word	0x2400021c
 8001e90:	24000214 	.word	0x24000214
 8001e94:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e98:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ea8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec0:	f000 fe1e 	bl	8002b00 <invSqrt>
 8001ec4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001ec8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001ecc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001ed8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001edc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001ee8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001eec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001ef8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001efc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f04:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f08:	4bd8      	ldr	r3, [pc, #864]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001f22:	4bd2      	ldr	r3, [pc, #840]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f38:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f3c:	4bcb      	ldr	r3, [pc, #812]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f3e:	ed93 7a00 	vldr	s14, [r3]
 8001f42:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001f56:	4bc5      	ldr	r3, [pc, #788]	; (800226c <MadgwickAHRSupdate+0xfe4>)
 8001f58:	ed93 7a00 	vldr	s14, [r3]
 8001f5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001f70:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f74:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001f78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f7c:	4bbd      	ldr	r3, [pc, #756]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f86:	4bbb      	ldr	r3, [pc, #748]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001f88:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001f8c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001f90:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001f94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f98:	4bb7      	ldr	r3, [pc, #732]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa2:	4bb5      	ldr	r3, [pc, #724]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001fa4:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001fa8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001fac:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001fb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fb4:	4bb1      	ldr	r3, [pc, #708]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	4baf      	ldr	r3, [pc, #700]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8001fc0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001fc4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fc8:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002270 <MadgwickAHRSupdate+0xfe8>
 8001fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd0:	4bab      	ldr	r3, [pc, #684]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	4ba9      	ldr	r3, [pc, #676]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8001fdc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001fe0:	4ba4      	ldr	r3, [pc, #656]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001fe2:	ed93 7a00 	vldr	s14, [r3]
 8001fe6:	4ba3      	ldr	r3, [pc, #652]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ff0:	4ba1      	ldr	r3, [pc, #644]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001ff2:	edd3 6a00 	vldr	s13, [r3]
 8001ff6:	4ba0      	ldr	r3, [pc, #640]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002004:	4b9d      	ldr	r3, [pc, #628]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002006:	edd3 6a00 	vldr	s13, [r3]
 800200a:	4b9c      	ldr	r3, [pc, #624]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002018:	4b99      	ldr	r3, [pc, #612]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 800201a:	edd3 6a00 	vldr	s13, [r3]
 800201e:	4b98      	ldr	r3, [pc, #608]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202c:	eeb0 0a67 	vmov.f32	s0, s15
 8002030:	f000 fd66 	bl	8002b00 <invSqrt>
 8002034:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8002038:	4b8e      	ldr	r3, [pc, #568]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800204c:	4b8a      	ldr	r3, [pc, #552]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205a:	4b87      	ldr	r3, [pc, #540]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800205c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002060:	4b86      	ldr	r3, [pc, #536]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206e:	4b83      	ldr	r3, [pc, #524]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002070:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002074:	4b82      	ldr	r3, [pc, #520]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002076:	ed93 7a00 	vldr	s14, [r3]
 800207a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002084:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002088:	4b7a      	ldr	r3, [pc, #488]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800208a:	ed93 7a00 	vldr	s14, [r3]
 800208e:	4b7a      	ldr	r3, [pc, #488]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002098:	4b78      	ldr	r3, [pc, #480]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800209a:	edd3 6a00 	vldr	s13, [r3]
 800209e:	4b78      	ldr	r3, [pc, #480]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee37 6a27 	vadd.f32	s12, s14, s15
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020ae:	ed93 7a00 	vldr	s14, [r3]
 80020b2:	4b71      	ldr	r3, [pc, #452]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c4:	4b6d      	ldr	r3, [pc, #436]	; (800227c <MadgwickAHRSupdate+0xff4>)
 80020c6:	edd3 6a00 	vldr	s13, [r3]
 80020ca:	4b6c      	ldr	r3, [pc, #432]	; (800227c <MadgwickAHRSupdate+0xff4>)
 80020cc:	edd3 7a00 	vldr	s15, [r3]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d8:	eef0 0a67 	vmov.f32	s1, s15
 80020dc:	eeb0 0a46 	vmov.f32	s0, s12
 80020e0:	f011 fdf2 	bl	8013cc8 <atan2f>
 80020e4:	eef0 7a40 	vmov.f32	s15, s0
 80020e8:	4b66      	ldr	r3, [pc, #408]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80020ea:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 80020ee:	4b62      	ldr	r3, [pc, #392]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	4b62      	ldr	r3, [pc, #392]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002100:	edd3 6a00 	vldr	s13, [r3]
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002112:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211a:	eeb0 0a67 	vmov.f32	s0, s15
 800211e:	f011 fda1 	bl	8013c64 <asinf>
 8002122:	eef0 7a40 	vmov.f32	s15, s0
 8002126:	4b58      	ldr	r3, [pc, #352]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002128:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	4b52      	ldr	r3, [pc, #328]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213c:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800213e:	edd3 6a00 	vldr	s13, [r3]
 8002142:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002158:	4b46      	ldr	r3, [pc, #280]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 800215a:	ed93 6a00 	vldr	s12, [r3]
 800215e:	4b45      	ldr	r3, [pc, #276]	; (8002274 <MadgwickAHRSupdate+0xfec>)
 8002160:	edd3 6a00 	vldr	s13, [r3]
 8002164:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002168:	4b43      	ldr	r3, [pc, #268]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 800216a:	edd3 5a00 	vldr	s11, [r3]
 800216e:	4b42      	ldr	r3, [pc, #264]	; (8002278 <MadgwickAHRSupdate+0xff0>)
 8002170:	edd3 6a00 	vldr	s13, [r3]
 8002174:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002178:	ee36 6a26 	vadd.f32	s12, s12, s13
 800217c:	4b3f      	ldr	r3, [pc, #252]	; (800227c <MadgwickAHRSupdate+0xff4>)
 800217e:	edd3 5a00 	vldr	s11, [r3]
 8002182:	4b3e      	ldr	r3, [pc, #248]	; (800227c <MadgwickAHRSupdate+0xff4>)
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800218c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002192:	edd3 5a00 	vldr	s11, [r3]
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <MadgwickAHRSupdate+0xff8>)
 8002198:	edd3 6a00 	vldr	s13, [r3]
 800219c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021a0:	ee76 6a66 	vsub.f32	s13, s12, s13
 80021a4:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80021a8:	eeb0 1b46 	vmov.f64	d1, d6
 80021ac:	eeb0 0b47 	vmov.f64	d0, d7
 80021b0:	f011 fd2a 	bl	8013c08 <atan2>
 80021b4:	eeb0 7b40 	vmov.f64	d7, d0
 80021b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021be:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 80021d2:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 80021e6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002290 <MadgwickAHRSupdate+0x1008>
 80021f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <MadgwickAHRSupdate+0x1004>)
 80021fa:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <MadgwickAHRSupdate+0x100c>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <MadgwickAHRSupdate+0xffc>)
 8002210:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MadgwickAHRSupdate+0x1010>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MadgwickAHRSupdate+0x1000>)
 8002226:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <MadgwickAHRSupdate+0x1004>)
 800222c:	ed93 7a00 	vldr	s14, [r3]
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MadgwickAHRSupdate+0x1014>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MadgwickAHRSupdate+0x1004>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800224a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800224e:	d509      	bpl.n	8002264 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022a0 <MadgwickAHRSupdate+0x1018>
 800225a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <MadgwickAHRSupdate+0x1004>)
 8002260:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002264:	37b8      	adds	r7, #184	; 0xb8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2400000c 	.word	0x2400000c
 8002270:	3b03126f 	.word	0x3b03126f
 8002274:	24000010 	.word	0x24000010
 8002278:	24000214 	.word	0x24000214
 800227c:	24000218 	.word	0x24000218
 8002280:	2400021c 	.word	0x2400021c
 8002284:	24000314 	.word	0x24000314
 8002288:	24000318 	.word	0x24000318
 800228c:	24000310 	.word	0x24000310
 8002290:	42652ee1 	.word	0x42652ee1
 8002294:	24000220 	.word	0x24000220
 8002298:	24000224 	.word	0x24000224
 800229c:	24000228 	.word	0x24000228
 80022a0:	43b40000 	.word	0x43b40000

080022a4 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b09c      	sub	sp, #112	; 0x70
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80022ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80022b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80022b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80022ba:	ed87 2a01 	vstr	s4, [r7, #4]
 80022be:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80022c2:	4bee      	ldr	r3, [pc, #952]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb1 7a67 	vneg.f32	s14, s15
 80022cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d4:	4bea      	ldr	r3, [pc, #936]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80022d6:	edd3 6a00 	vldr	s13, [r3]
 80022da:	edd7 7a04 	vldr	s15, [r7, #16]
 80022de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022e6:	4be7      	ldr	r3, [pc, #924]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 80022e8:	edd3 6a00 	vldr	s13, [r3]
 80022ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002300:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002304:	4be0      	ldr	r3, [pc, #896]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002306:	ed93 7a00 	vldr	s14, [r3]
 800230a:	edd7 7a05 	vldr	s15, [r7, #20]
 800230e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002312:	4bdb      	ldr	r3, [pc, #876]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002314:	edd3 6a00 	vldr	s13, [r3]
 8002318:	edd7 7a03 	vldr	s15, [r7, #12]
 800231c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002324:	4bd7      	ldr	r3, [pc, #860]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002326:	edd3 6a00 	vldr	s13, [r3]
 800232a:	edd7 7a04 	vldr	s15, [r7, #16]
 800232e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002336:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800233a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002342:	4bd1      	ldr	r3, [pc, #836]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	edd7 7a04 	vldr	s15, [r7, #16]
 800234c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002350:	4bca      	ldr	r3, [pc, #808]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002352:	edd3 6a00 	vldr	s13, [r3]
 8002356:	edd7 7a03 	vldr	s15, [r7, #12]
 800235a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800235e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002362:	4bc8      	ldr	r3, [pc, #800]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002364:	edd3 6a00 	vldr	s13, [r3]
 8002368:	edd7 7a05 	vldr	s15, [r7, #20]
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002380:	4bc1      	ldr	r3, [pc, #772]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	edd7 7a03 	vldr	s15, [r7, #12]
 800238a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238e:	4bbb      	ldr	r3, [pc, #748]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002390:	edd3 6a00 	vldr	s13, [r3]
 8002394:	edd7 7a04 	vldr	s15, [r7, #16]
 8002398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a0:	4bb7      	ldr	r3, [pc, #732]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80023a2:	edd3 6a00 	vldr	s13, [r3]
 80023a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80023aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ba:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80023be:	edd7 7a02 	vldr	s15, [r7, #8]
 80023c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	d10e      	bne.n	80023ea <MadgwickAHRSupdateIMU+0x146>
 80023cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d107      	bne.n	80023ea <MadgwickAHRSupdateIMU+0x146>
 80023da:	edd7 7a00 	vldr	s15, [r7]
 80023de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	f000 81e5 	beq.w	80027b4 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80023ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fe:	edd7 7a00 	vldr	s15, [r7]
 8002402:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f000 fb77 	bl	8002b00 <invSqrt>
 8002412:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8002416:	ed97 7a02 	vldr	s14, [r7, #8]
 800241a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800241e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002422:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002426:	ed97 7a01 	vldr	s14, [r7, #4]
 800242a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8002436:	ed97 7a00 	vldr	s14, [r7]
 800243a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002446:	4b90      	ldr	r3, [pc, #576]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002450:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 8002454:	4b89      	ldr	r3, [pc, #548]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800245e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 8002462:	4b87      	ldr	r3, [pc, #540]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800246c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8002470:	4b84      	ldr	r3, [pc, #528]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800247a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 800247e:	4b82      	ldr	r3, [pc, #520]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 8002480:	edd3 7a00 	vldr	s15, [r3]
 8002484:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8002490:	4b7a      	ldr	r3, [pc, #488]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800249a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80024a2:	4b77      	ldr	r3, [pc, #476]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 80024b4:	4b71      	ldr	r3, [pc, #452]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 80024c6:	4b6e      	ldr	r3, [pc, #440]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80024d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 80024d8:	4b6b      	ldr	r3, [pc, #428]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 80024da:	ed93 7a00 	vldr	s14, [r3]
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <MadgwickAHRSupdateIMU+0x3e4>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 80024ec:	4b63      	ldr	r3, [pc, #396]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024ee:	ed93 7a00 	vldr	s14, [r3]
 80024f2:	4b62      	ldr	r3, [pc, #392]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002500:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002502:	ed93 7a00 	vldr	s14, [r3]
 8002506:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 8002516:	ed93 7a00 	vldr	s14, [r3]
 800251a:	4b5a      	ldr	r3, [pc, #360]	; (8002684 <MadgwickAHRSupdateIMU+0x3e0>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002524:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002528:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800252c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002534:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002538:	edd7 7a02 	vldr	s15, [r7, #8]
 800253c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002544:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002548:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800254c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002554:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002558:	edd7 7a01 	vldr	s15, [r7, #4]
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002564:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002568:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800256c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002574:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002578:	edd7 7a02 	vldr	s15, [r7, #8]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002584:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002588:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800258c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <MadgwickAHRSupdateIMU+0x3d8>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80025a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80025b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025b6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80025ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80025ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80025da:	edd7 7a00 	vldr	s15, [r7]
 80025de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80025ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025ee:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80025f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025f6:	4b22      	ldr	r3, [pc, #136]	; (8002680 <MadgwickAHRSupdateIMU+0x3dc>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002600:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002604:	edd7 7a02 	vldr	s15, [r7, #8]
 8002608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002610:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002620:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002624:	edd7 7a01 	vldr	s15, [r7, #4]
 8002628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002630:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002634:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002638:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800263c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002644:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002648:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800264c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002658:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800265c:	edd7 7a00 	vldr	s15, [r7]
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800266c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002670:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002674:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002678:	e008      	b.n	800268c <MadgwickAHRSupdateIMU+0x3e8>
 800267a:	bf00      	nop
 800267c:	24000214 	.word	0x24000214
 8002680:	24000218 	.word	0x24000218
 8002684:	2400021c 	.word	0x2400021c
 8002688:	24000010 	.word	0x24000010
 800268c:	4be0      	ldr	r3, [pc, #896]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800268e:	edd3 7a00 	vldr	s15, [r3]
 8002692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002696:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800269a:	edd7 7a02 	vldr	s15, [r7, #8]
 800269e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026aa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80026ae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026b2:	4bd7      	ldr	r3, [pc, #860]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80026c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d0:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80026d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80026e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80026ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80026f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	eeb0 0a67 	vmov.f32	s0, s15
 8002704:	f000 f9fc 	bl	8002b00 <invSqrt>
 8002708:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 800270c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002710:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002718:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 800271c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002720:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 800272c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002730:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002738:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 800273c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002740:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 800274c:	4bb1      	ldr	r3, [pc, #708]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 800274e:	ed93 7a00 	vldr	s14, [r3]
 8002752:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800275e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002762:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002766:	4bab      	ldr	r3, [pc, #684]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 8002768:	ed93 7a00 	vldr	s14, [r3]
 800276c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002778:	ee77 7a67 	vsub.f32	s15, s14, s15
 800277c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002780:	4ba4      	ldr	r3, [pc, #656]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 8002782:	ed93 7a00 	vldr	s14, [r3]
 8002786:	edd7 7a07 	vldr	s15, [r7, #28]
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 800279a:	4b9e      	ldr	r3, [pc, #632]	; (8002a14 <MadgwickAHRSupdateIMU+0x770>)
 800279c:	ed93 7a00 	vldr	s14, [r3]
 80027a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80027ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80027b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80027b8:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027c0:	4b96      	ldr	r3, [pc, #600]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ca:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80027cc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 80027d0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80027d4:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027dc:	4b90      	ldr	r3, [pc, #576]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	4b8e      	ldr	r3, [pc, #568]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80027e8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80027ec:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80027f0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 80027f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f8:	4b8a      	ldr	r3, [pc, #552]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002804:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002808:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800280c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a18 <MadgwickAHRSupdateIMU+0x774>
 8002810:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002820:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002824:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002834:	4b7a      	ldr	r3, [pc, #488]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002836:	edd3 6a00 	vldr	s13, [r3]
 800283a:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002848:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800284a:	edd3 6a00 	vldr	s13, [r3]
 800284e:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800285e:	edd3 6a00 	vldr	s13, [r3]
 8002862:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002870:	eeb0 0a67 	vmov.f32	s0, s15
 8002874:	f000 f944 	bl	8002b00 <invSqrt>
 8002878:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 800287c:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800287e:	ed93 7a00 	vldr	s14, [r3]
 8002882:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	4b64      	ldr	r3, [pc, #400]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800288c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002890:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	4b60      	ldr	r3, [pc, #384]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028a0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80028a4:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028a6:	ed93 7a00 	vldr	s14, [r3]
 80028aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b2:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028b4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80028b8:	4b55      	ldr	r3, [pc, #340]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028ba:	ed93 7a00 	vldr	s14, [r3]
 80028be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c6:	4b52      	ldr	r3, [pc, #328]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028c8:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80028cc:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028dc:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80028de:	edd3 6a00 	vldr	s13, [r3]
 80028e2:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ec:	ee37 6a27 	vadd.f32	s12, s14, s15
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028f2:	ed93 7a00 	vldr	s14, [r3]
 80028f6:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002900:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002908:	4b46      	ldr	r3, [pc, #280]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800290a:	edd3 6a00 	vldr	s13, [r3]
 800290e:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002910:	edd3 7a00 	vldr	s15, [r3]
 8002914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291c:	eef0 0a67 	vmov.f32	s1, s15
 8002920:	eeb0 0a46 	vmov.f32	s0, s12
 8002924:	f011 f9d0 	bl	8013cc8 <atan2f>
 8002928:	eef0 7a40 	vmov.f32	s15, s0
 800292c:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <MadgwickAHRSupdateIMU+0x784>)
 800292e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002934:	ed93 7a00 	vldr	s14, [r3]
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 800293a:	edd3 7a00 	vldr	s15, [r3]
 800293e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002944:	edd3 6a00 	vldr	s13, [r3]
 8002948:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002952:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002956:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800295a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295e:	eeb0 0a67 	vmov.f32	s0, s15
 8002962:	f011 f97f 	bl	8013c64 <asinf>
 8002966:	eef0 7a40 	vmov.f32	s15, s0
 800296a:	4b30      	ldr	r3, [pc, #192]	; (8002a2c <MadgwickAHRSupdateIMU+0x788>)
 800296c:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002970:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 8002982:	edd3 6a00 	vldr	s13, [r3]
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002998:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 800299e:	ed93 6a00 	vldr	s12, [r3]
 80029a2:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <MadgwickAHRSupdateIMU+0x778>)
 80029a4:	edd3 6a00 	vldr	s13, [r3]
 80029a8:	ee26 6a26 	vmul.f32	s12, s12, s13
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80029ae:	edd3 5a00 	vldr	s11, [r3]
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <MadgwickAHRSupdateIMU+0x77c>)
 80029b4:	edd3 6a00 	vldr	s13, [r3]
 80029b8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029bc:	ee36 6a26 	vadd.f32	s12, s12, s13
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80029c2:	edd3 5a00 	vldr	s11, [r3]
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <MadgwickAHRSupdateIMU+0x780>)
 80029c8:	edd3 6a00 	vldr	s13, [r3]
 80029cc:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029d0:	ee36 6a66 	vsub.f32	s12, s12, s13
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80029d6:	edd3 5a00 	vldr	s11, [r3]
 80029da:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <MadgwickAHRSupdateIMU+0x76c>)
 80029dc:	edd3 6a00 	vldr	s13, [r3]
 80029e0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80029e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80029e8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80029ec:	eeb0 1b46 	vmov.f64	d1, d6
 80029f0:	eeb0 0b47 	vmov.f64	d0, d7
 80029f4:	f011 f908 	bl	8013c08 <atan2>
 80029f8:	eeb0 7b40 	vmov.f64	d7, d0
 80029fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <MadgwickAHRSupdateIMU+0x78c>)
 8002a02:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MadgwickAHRSupdateIMU+0x784>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	e014      	b.n	8002a38 <MadgwickAHRSupdateIMU+0x794>
 8002a0e:	bf00      	nop
 8002a10:	2400021c 	.word	0x2400021c
 8002a14:	2400000c 	.word	0x2400000c
 8002a18:	3b03126f 	.word	0x3b03126f
 8002a1c:	24000010 	.word	0x24000010
 8002a20:	24000214 	.word	0x24000214
 8002a24:	24000218 	.word	0x24000218
 8002a28:	24000314 	.word	0x24000314
 8002a2c:	24000318 	.word	0x24000318
 8002a30:	24000310 	.word	0x24000310
 8002a34:	42652ee1 	.word	0x42652ee1
 8002a38:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002a34 <MadgwickAHRSupdateIMU+0x790>
 8002a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a42:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002ae8 <MadgwickAHRSupdateIMU+0x844>
 8002a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a54:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a56:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002a5a:	4b24      	ldr	r3, [pc, #144]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ae8 <MadgwickAHRSupdateIMU+0x844>
 8002a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a68:	4b20      	ldr	r3, [pc, #128]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a6a:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <MadgwickAHRSupdateIMU+0x84c>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <MadgwickAHRSupdateIMU+0x83c>)
 8002a80:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002a84:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a86:	ed93 7a00 	vldr	s14, [r3]
 8002a8a:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <MadgwickAHRSupdateIMU+0x850>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a94:	4b13      	ldr	r3, [pc, #76]	; (8002ae4 <MadgwickAHRSupdateIMU+0x840>)
 8002a96:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002a9c:	ed93 7a00 	vldr	s14, [r3]
 8002aa0:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <MadgwickAHRSupdateIMU+0x854>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002ab0:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ab2:	edd3 7a00 	vldr	s15, [r3]
 8002ab6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002abe:	d400      	bmi.n	8002ac2 <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002ac0:	e009      	b.n	8002ad6 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002afc <MadgwickAHRSupdateIMU+0x858>
 8002acc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <MadgwickAHRSupdateIMU+0x848>)
 8002ad2:	edc3 7a00 	vstr	s15, [r3]
}
 8002ad6:	bf00      	nop
 8002ad8:	3770      	adds	r7, #112	; 0x70
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	24000314 	.word	0x24000314
 8002ae4:	24000318 	.word	0x24000318
 8002ae8:	42652ee1 	.word	0x42652ee1
 8002aec:	24000310 	.word	0x24000310
 8002af0:	24000220 	.word	0x24000220
 8002af4:	24000224 	.word	0x24000224
 8002af8:	24000228 	.word	0x24000228
 8002afc:	43b40000 	.word	0x43b40000

08002b00 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b0e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b16:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	105a      	asrs	r2, r3, #1
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <invSqrt+0x74>)
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b30:	f107 030c 	add.w	r3, r7, #12
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b38:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b44:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b54:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	ee07 3a90 	vmov	s15, r3
}
 8002b66:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	5f3759df 	.word	0x5f3759df

08002b78 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68b9      	ldr	r1, [r7, #8]
 8002b8c:	4803      	ldr	r0, [pc, #12]	; (8002b9c <_write+0x24>)
 8002b8e:	f00c fdcd 	bl	800f72c <HAL_UART_Transmit_DMA>
}
 8002b92:	bf00      	nop
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	24000528 	.word	0x24000528

08002ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba4:	b088      	sub	sp, #32
 8002ba6:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	MPU9250.Gx_Offset = 0.43;
 8002ba8:	4baf      	ldr	r3, [pc, #700]	; (8002e68 <main+0x2c8>)
 8002baa:	4ab0      	ldr	r2, [pc, #704]	; (8002e6c <main+0x2cc>)
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250.Gy_Offset = -0.49;
 8002bae:	4bae      	ldr	r3, [pc, #696]	; (8002e68 <main+0x2c8>)
 8002bb0:	4aaf      	ldr	r2, [pc, #700]	; (8002e70 <main+0x2d0>)
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
	MPU9250.Gz_Offset = -1.40;
 8002bb4:	4bac      	ldr	r3, [pc, #688]	; (8002e68 <main+0x2c8>)
 8002bb6:	4aaf      	ldr	r2, [pc, #700]	; (8002e74 <main+0x2d4>)
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250.Mx_Offset = 0;
 8002bba:	4bab      	ldr	r3, [pc, #684]	; (8002e68 <main+0x2c8>)
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250.My_Offset = 0;
 8002bc2:	4ba9      	ldr	r3, [pc, #676]	; (8002e68 <main+0x2c8>)
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	669a      	str	r2, [r3, #104]	; 0x68
	MPU9250.Mz_Offset = 0;
 8002bca:	4ba7      	ldr	r3, [pc, #668]	; (8002e68 <main+0x2c8>)
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bd2:	f002 fa8f 	bl	80050f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd6:	f000 fb4f 	bl	8003278 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002bda:	f000 fbcb 	bl	8003374 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bde:	f000 fe19 	bl	8003814 <MX_GPIO_Init>
  MX_DMA_Init();
 8002be2:	f000 fddf 	bl	80037a4 <MX_DMA_Init>
  MX_TIM7_Init();
 8002be6:	f000 fd0f 	bl	8003608 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002bea:	f000 fd43 	bl	8003674 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002bee:	f000 fbdd 	bl	80033ac <MX_I2C1_Init>
  MX_SPI1_Init();
 8002bf2:	f000 fc1b 	bl	800342c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002bf6:	f000 fd89 	bl	800370c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002bfa:	f000 fc6d 	bl	80034d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2102      	movs	r1, #2
 8002c02:	489d      	ldr	r0, [pc, #628]	; (8002e78 <main+0x2d8>)
 8002c04:	f005 fc4c 	bl	80084a0 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8002c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c0c:	f002 fb04 	bl	8005218 <HAL_Delay>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002c10:	2201      	movs	r2, #1
 8002c12:	2102      	movs	r1, #2
 8002c14:	4898      	ldr	r0, [pc, #608]	; (8002e78 <main+0x2d8>)
 8002c16:	f005 fc43 	bl	80084a0 <HAL_GPIO_WritePin>

  //General Timer HAL
  HAL_TIM_Base_Start_IT(&htim7);
 8002c1a:	4898      	ldr	r0, [pc, #608]	; (8002e7c <main+0x2dc>)
 8002c1c:	f00b faf8 	bl	800e210 <HAL_TIM_Base_Start_IT>
  //General PWM LL
//  LL_TIM_EnableCounter(TIM7);
//  LL_TIM_EnableIT_UPDATE(TIM7);

  //USART Channels HAL
  HAL_UART_Receive_DMA(&huart1, &uart1_rx_data, 1); //FTDI
 8002c20:	2201      	movs	r2, #1
 8002c22:	4997      	ldr	r1, [pc, #604]	; (8002e80 <main+0x2e0>)
 8002c24:	4897      	ldr	r0, [pc, #604]	; (8002e84 <main+0x2e4>)
 8002c26:	f00c fe01 	bl	800f82c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, &uart2_rx_data, 1); //Receiver
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	4996      	ldr	r1, [pc, #600]	; (8002e88 <main+0x2e8>)
 8002c2e:	4897      	ldr	r0, [pc, #604]	; (8002e8c <main+0x2ec>)
 8002c30:	f00c fdfc 	bl	800f82c <HAL_UART_Receive_DMA>

	//Motor PWM HAL
	HAL_TIM_Base_Start_IT(&htim3);
 8002c34:	4896      	ldr	r0, [pc, #600]	; (8002e90 <main+0x2f0>)
 8002c36:	f00b faeb 	bl	800e210 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4894      	ldr	r0, [pc, #592]	; (8002e90 <main+0x2f0>)
 8002c3e:	f00b fbb9 	bl	800e3b4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8002c42:	2104      	movs	r1, #4
 8002c44:	4892      	ldr	r0, [pc, #584]	; (8002e90 <main+0x2f0>)
 8002c46:	f00b fbb5 	bl	800e3b4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8002c4a:	2108      	movs	r1, #8
 8002c4c:	4890      	ldr	r0, [pc, #576]	; (8002e90 <main+0x2f0>)
 8002c4e:	f00b fbb1 	bl	800e3b4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 8002c52:	210c      	movs	r1, #12
 8002c54:	488e      	ldr	r0, [pc, #568]	; (8002e90 <main+0x2f0>)
 8002c56:	f00b fbad 	bl	800e3b4 <HAL_TIM_PWM_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c5a:	e009      	b.n	8002c70 <main+0xd0>
	{
		if(tim1_20ms_flag == 1)
 8002c5c:	4b8d      	ldr	r3, [pc, #564]	; (8002e94 <main+0x2f4>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <main+0xd0>
		{
			tim1_20ms_flag = 0;
 8002c64:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <main+0x2f4>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002c6a:	488b      	ldr	r0, [pc, #556]	; (8002e98 <main+0x2f8>)
 8002c6c:	f00e ffc8 	bl	8011c00 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c70:	2303      	movs	r3, #3
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2303      	movs	r3, #3
 8002c76:	2203      	movs	r2, #3
 8002c78:	2103      	movs	r1, #3
 8002c7a:	4888      	ldr	r0, [pc, #544]	; (8002e9c <main+0x2fc>)
 8002c7c:	f7fd fe08 	bl	8000890 <MPU9250_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0ea      	beq.n	8002c5c <main+0xbc>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002c86:	4885      	ldr	r0, [pc, #532]	; (8002e9c <main+0x2fc>)
 8002c88:	f7fd feea 	bl	8000a60 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002c8c:	e009      	b.n	8002ca2 <main+0x102>
	{
		if(tim1_20ms_flag == 1)
 8002c8e:	4b81      	ldr	r3, [pc, #516]	; (8002e94 <main+0x2f4>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <main+0x102>
		{
			tim1_20ms_flag = 0;
 8002c96:	4b7f      	ldr	r3, [pc, #508]	; (8002e94 <main+0x2f4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002c9c:	4880      	ldr	r0, [pc, #512]	; (8002ea0 <main+0x300>)
 8002c9e:	f00e ffaf 	bl	8011c00 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002ca2:	4971      	ldr	r1, [pc, #452]	; (8002e68 <main+0x2c8>)
 8002ca4:	487d      	ldr	r0, [pc, #500]	; (8002e9c <main+0x2fc>)
 8002ca6:	f7fd ff5b 	bl	8000b60 <MPU9250_AK8963_Setup>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0ee      	beq.n	8002c8e <main+0xee>
		}
	}
	MPU9250_Master(&hi2c1);
 8002cb0:	487a      	ldr	r0, [pc, #488]	; (8002e9c <main+0x2fc>)
 8002cb2:	f7fd ff03 	bl	8000abc <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002cb6:	4879      	ldr	r0, [pc, #484]	; (8002e9c <main+0x2fc>)
 8002cb8:	f7fd ffa8 	bl	8000c0c <MPU9250_Slave0_Enable>

	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002cbc:	f001 feea 	bl	8004a94 <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002cc0:	230c      	movs	r3, #12
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4877      	ldr	r0, [pc, #476]	; (8002ea4 <main+0x304>)
 8002cc8:	f002 f988 	bl	8004fdc <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002ccc:	4b75      	ldr	r3, [pc, #468]	; (8002ea4 <main+0x304>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a65      	ldr	r2, [pc, #404]	; (8002e68 <main+0x2c8>)
 8002cd2:	6653      	str	r3, [r2, #100]	; 0x64
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002cd4:	4b74      	ldr	r3, [pc, #464]	; (8002ea8 <main+0x308>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a63      	ldr	r2, [pc, #396]	; (8002e68 <main+0x2c8>)
 8002cda:	6693      	str	r3, [r2, #104]	; 0x68
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002cdc:	4b73      	ldr	r3, [pc, #460]	; (8002eac <main+0x30c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a61      	ldr	r2, [pc, #388]	; (8002e68 <main+0x2c8>)
 8002ce2:	66d3      	str	r3, [r2, #108]	; 0x6c

	//Receiver Check
	printf("Receiver Status Check \n"); HAL_Delay(10);
 8002ce4:	4872      	ldr	r0, [pc, #456]	; (8002eb0 <main+0x310>)
 8002ce6:	f00e ff8b 	bl	8011c00 <puts>
 8002cea:	200a      	movs	r0, #10
 8002cec:	f002 fa94 	bl	8005218 <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002cf0:	e011      	b.n	8002d16 <main+0x176>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	4860      	ldr	r0, [pc, #384]	; (8002e78 <main+0x2d8>)
 8002cf8:	f005 fbd2 	bl	80084a0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d00:	f002 fa8a 	bl	8005218 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002d04:	2201      	movs	r2, #1
 8002d06:	2102      	movs	r1, #2
 8002d08:	485b      	ldr	r0, [pc, #364]	; (8002e78 <main+0x2d8>)
 8002d0a:	f005 fbc9 	bl	80084a0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d12:	f002 fa81 	bl	8005218 <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <main+0x314>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 fc16 	bl	800454c <Is_iBus_Received>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0e5      	beq.n	8002cf2 <main+0x152>
	}
	while(Is_Throttle_Min() == 0)
 8002d26:	e01d      	b.n	8002d64 <main+0x1c4>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2102      	movs	r1, #2
 8002d2c:	4852      	ldr	r0, [pc, #328]	; (8002e78 <main+0x2d8>)
 8002d2e:	f005 fbb7 	bl	80084a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_GPIO_Port, GPIO_PIN_SET);
 8002d32:	2201      	movs	r2, #1
 8002d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d38:	485f      	ldr	r0, [pc, #380]	; (8002eb8 <main+0x318>)
 8002d3a:	f005 fbb1 	bl	80084a0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002d3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d42:	f002 fa69 	bl	8005218 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002d46:	2201      	movs	r2, #1
 8002d48:	2102      	movs	r1, #2
 8002d4a:	484b      	ldr	r0, [pc, #300]	; (8002e78 <main+0x2d8>)
 8002d4c:	f005 fba8 	bl	80084a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_GPIO_Port, GPIO_PIN_RESET);
 8002d50:	2200      	movs	r2, #0
 8002d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d56:	4858      	ldr	r0, [pc, #352]	; (8002eb8 <main+0x318>)
 8002d58:	f005 fba2 	bl	80084a0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8002d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d60:	f002 fa5a 	bl	8005218 <HAL_Delay>
	while(Is_Throttle_Min() == 0)
 8002d64:	f001 fc2c 	bl	80045c0 <Is_Throttle_Min>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0dc      	beq.n	8002d28 <main+0x188>
	}
	printf("Receiver OK \n"); HAL_Delay(10);
 8002d6e:	4853      	ldr	r0, [pc, #332]	; (8002ebc <main+0x31c>)
 8002d70:	f00e ff46 	bl	8011c00 <puts>
 8002d74:	200a      	movs	r0, #10
 8002d76:	f002 fa4f 	bl	8005218 <HAL_Delay>

	//ESC Calibration
	if(iBus.SwB == 2000 && iBus.SwC == 2000)
 8002d7a:	4b51      	ldr	r3, [pc, #324]	; (8002ec0 <main+0x320>)
 8002d7c:	895b      	ldrh	r3, [r3, #10]
 8002d7e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d82:	d111      	bne.n	8002da8 <main+0x208>
 8002d84:	4b4e      	ldr	r3, [pc, #312]	; (8002ec0 <main+0x320>)
 8002d86:	899b      	ldrh	r3, [r3, #12]
 8002d88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d8c:	d10c      	bne.n	8002da8 <main+0x208>
	{
		ESC_Calibration();
 8002d8e:	f000 fecb 	bl	8003b28 <ESC_Calibration>
		while(iBus.SwB != 1000) Is_iBus_Received(ibus_rx_cplt_flag);
 8002d92:	e004      	b.n	8002d9e <main+0x1fe>
 8002d94:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <main+0x314>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 fbd7 	bl	800454c <Is_iBus_Received>
 8002d9e:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <main+0x320>)
 8002da0:	895b      	ldrh	r3, [r3, #10]
 8002da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da6:	d1f5      	bne.n	8002d94 <main+0x1f4>
	}

	while (1)
	{
		//UART Message Check
		Receive_Command();
 8002da8:	f001 fb58 	bl	800445c <Receive_Command>
		Compass_Calibration(mag_calibration_enable);
 8002dac:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <main+0x324>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fdcb 	bl	800394c <Compass_Calibration>

		//Receiver Channel Check
		Is_iBus_Received(ibus_rx_cplt_flag);
 8002db6:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <main+0x314>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 fbc6 	bl	800454c <Is_iBus_Received>
		if(iBus.SwA == 2000 && iBus_SwA_Prev != 2000)
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <main+0x320>)
 8002dc2:	891b      	ldrh	r3, [r3, #8]
 8002dc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dc8:	d111      	bne.n	8002dee <main+0x24e>
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <main+0x328>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dd2:	d00c      	beq.n	8002dee <main+0x24e>
		{
			if(iBus.LV < 1010)
 8002dd4:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <main+0x320>)
 8002dd6:	889b      	ldrh	r3, [r3, #4]
 8002dd8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d806      	bhi.n	8002dee <main+0x24e>
			{
				motor_arming_flag = 1;
 8002de0:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <main+0x32c>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]
				yaw_heading_reference = System_Yaw;
 8002de6:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <main+0x330>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a3a      	ldr	r2, [pc, #232]	; (8002ed4 <main+0x334>)
 8002dec:	6013      	str	r3, [r2, #0]
			}
		}
		iBus_SwA_Prev = iBus.SwA;
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <main+0x320>)
 8002df0:	891a      	ldrh	r2, [r3, #8]
 8002df2:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <main+0x328>)
 8002df4:	801a      	strh	r2, [r3, #0]
		if(iBus.SwA != 2000)
 8002df6:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <main+0x320>)
 8002df8:	891b      	ldrh	r3, [r3, #8]
 8002dfa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002dfe:	d002      	beq.n	8002e06 <main+0x266>
		{
			motor_arming_flag = 0;
 8002e00:	4b32      	ldr	r3, [pc, #200]	; (8002ecc <main+0x32c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
		}
		if(motor_arming_flag == 1)
 8002e06:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <main+0x32c>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	f040 80b7 	bne.w	8002f7e <main+0x3de>
		{
			if(failsafe_flag == 0)
 8002e10:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <main+0x338>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f040 80a1 	bne.w	8002f5c <main+0x3bc>
			{
				if(iBus.LV > 1010)
 8002e1a:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <main+0x320>)
 8002e1c:	889b      	ldrh	r3, [r3, #4]
 8002e1e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8002e22:	4293      	cmp	r3, r2
 8002e24:	f240 8089 	bls.w	8002f3a <main+0x39a>
				{
					TIM3->CCR1 = ccr1 > 20000 ? 19900 : ccr1 < 10000 ? 10000 : ccr1;
 8002e28:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <main+0x33c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d807      	bhi.n	8002e44 <main+0x2a4>
 8002e34:	4b29      	ldr	r3, [pc, #164]	; (8002edc <main+0x33c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf38      	it	cc
 8002e40:	4613      	movcc	r3, r2
 8002e42:	e001      	b.n	8002e48 <main+0x2a8>
 8002e44:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8002e48:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <main+0x340>)
 8002e4a:	6353      	str	r3, [r2, #52]	; 0x34
					TIM3->CCR2 = ccr2 > 20000 ? 19900 : ccr2 < 10000 ? 10000 : ccr2;
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <main+0x344>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d847      	bhi.n	8002ee8 <main+0x348>
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <main+0x344>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e60:	4293      	cmp	r3, r2
 8002e62:	bf38      	it	cc
 8002e64:	4613      	movcc	r3, r2
 8002e66:	e041      	b.n	8002eec <main+0x34c>
 8002e68:	2400027c 	.word	0x2400027c
 8002e6c:	3edc28f6 	.word	0x3edc28f6
 8002e70:	befae148 	.word	0xbefae148
 8002e74:	bfb33333 	.word	0xbfb33333
 8002e78:	58020000 	.word	0x58020000
 8002e7c:	24000758 	.word	0x24000758
 8002e80:	2400023d 	.word	0x2400023d
 8002e84:	24000528 	.word	0x24000528
 8002e88:	2400023f 	.word	0x2400023f
 8002e8c:	240006bc 	.word	0x240006bc
 8002e90:	240003e4 	.word	0x240003e4
 8002e94:	2400023b 	.word	0x2400023b
 8002e98:	08014570 	.word	0x08014570
 8002e9c:	24000398 	.word	0x24000398
 8002ea0:	08014584 	.word	0x08014584
 8002ea4:	2400074c 	.word	0x2400074c
 8002ea8:	24000750 	.word	0x24000750
 8002eac:	24000754 	.word	0x24000754
 8002eb0:	08014598 	.word	0x08014598
 8002eb4:	24000240 	.word	0x24000240
 8002eb8:	58021000 	.word	0x58021000
 8002ebc:	080145b0 	.word	0x080145b0
 8002ec0:	24000260 	.word	0x24000260
 8002ec4:	2400022d 	.word	0x2400022d
 8002ec8:	24000230 	.word	0x24000230
 8002ecc:	2400022e 	.word	0x2400022e
 8002ed0:	24000310 	.word	0x24000310
 8002ed4:	24000234 	.word	0x24000234
 8002ed8:	24000238 	.word	0x24000238
 8002edc:	24000394 	.word	0x24000394
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	24000520 	.word	0x24000520
 8002ee8:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8002eec:	4ab8      	ldr	r2, [pc, #736]	; (80031d0 <main+0x630>)
 8002eee:	6393      	str	r3, [r2, #56]	; 0x38
					TIM3->CCR3 = ccr3 > 20000 ? 19900 : ccr3 < 10000 ? 10000 : ccr3;
 8002ef0:	4bb8      	ldr	r3, [pc, #736]	; (80031d4 <main+0x634>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d807      	bhi.n	8002f0c <main+0x36c>
 8002efc:	4bb5      	ldr	r3, [pc, #724]	; (80031d4 <main+0x634>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f04:	4293      	cmp	r3, r2
 8002f06:	bf38      	it	cc
 8002f08:	4613      	movcc	r3, r2
 8002f0a:	e001      	b.n	8002f10 <main+0x370>
 8002f0c:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8002f10:	4aaf      	ldr	r2, [pc, #700]	; (80031d0 <main+0x630>)
 8002f12:	63d3      	str	r3, [r2, #60]	; 0x3c
					TIM3->CCR4 = ccr4 > 20000 ? 19900 : ccr4 < 10000 ? 10000 : ccr4;
 8002f14:	4bb0      	ldr	r3, [pc, #704]	; (80031d8 <main+0x638>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d807      	bhi.n	8002f30 <main+0x390>
 8002f20:	4bad      	ldr	r3, [pc, #692]	; (80031d8 <main+0x638>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf38      	it	cc
 8002f2c:	4613      	movcc	r3, r2
 8002f2e:	e001      	b.n	8002f34 <main+0x394>
 8002f30:	f644 53bc 	movw	r3, #19900	; 0x4dbc
 8002f34:	4aa6      	ldr	r2, [pc, #664]	; (80031d0 <main+0x630>)
 8002f36:	6413      	str	r3, [r2, #64]	; 0x40
 8002f38:	e031      	b.n	8002f9e <main+0x3fe>
				}
				else
				{
					TIM3->CCR1 = 10000;
 8002f3a:	4ba5      	ldr	r3, [pc, #660]	; (80031d0 <main+0x630>)
 8002f3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f40:	635a      	str	r2, [r3, #52]	; 0x34
					TIM3->CCR2 = 10000;
 8002f42:	4ba3      	ldr	r3, [pc, #652]	; (80031d0 <main+0x630>)
 8002f44:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
					TIM3->CCR3 = 10000;
 8002f4a:	4ba1      	ldr	r3, [pc, #644]	; (80031d0 <main+0x630>)
 8002f4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f50:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR4 = 10000;
 8002f52:	4b9f      	ldr	r3, [pc, #636]	; (80031d0 <main+0x630>)
 8002f54:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
 8002f5a:	e020      	b.n	8002f9e <main+0x3fe>
				}
			}
			else
			{
				TIM3->CCR1 = 10000;
 8002f5c:	4b9c      	ldr	r3, [pc, #624]	; (80031d0 <main+0x630>)
 8002f5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f62:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->CCR2 = 10000;
 8002f64:	4b9a      	ldr	r3, [pc, #616]	; (80031d0 <main+0x630>)
 8002f66:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f6a:	639a      	str	r2, [r3, #56]	; 0x38
				TIM3->CCR3 = 10000;
 8002f6c:	4b98      	ldr	r3, [pc, #608]	; (80031d0 <main+0x630>)
 8002f6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f72:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM3->CCR4 = 10000;
 8002f74:	4b96      	ldr	r3, [pc, #600]	; (80031d0 <main+0x630>)
 8002f76:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f7c:	e00f      	b.n	8002f9e <main+0x3fe>
			}
		}
		else
		{
			TIM3->CCR1 = 10000;
 8002f7e:	4b94      	ldr	r3, [pc, #592]	; (80031d0 <main+0x630>)
 8002f80:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f84:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 10000;
 8002f86:	4b92      	ldr	r3, [pc, #584]	; (80031d0 <main+0x630>)
 8002f88:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f8c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = 10000;
 8002f8e:	4b90      	ldr	r3, [pc, #576]	; (80031d0 <main+0x630>)
 8002f90:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f94:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR4 = 10000;
 8002f96:	4b8e      	ldr	r3, [pc, #568]	; (80031d0 <main+0x630>)
 8002f98:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
		}

		//Read MPU9250 + Motor PID
		if(tim1_2ms_flag == 1)
 8002f9e:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <main+0x63c>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d16f      	bne.n	8003086 <main+0x4e6>
		{
			tim1_2ms_flag = 0;
 8002fa6:	4b8d      	ldr	r3, [pc, #564]	; (80031dc <main+0x63c>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002fac:	488c      	ldr	r0, [pc, #560]	; (80031e0 <main+0x640>)
 8002fae:	f7fd fe6d 	bl	8000c8c <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002fb2:	488c      	ldr	r0, [pc, #560]	; (80031e4 <main+0x644>)
 8002fb4:	f7fd fe7e 	bl	8000cb4 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8002fb8:	4b8a      	ldr	r3, [pc, #552]	; (80031e4 <main+0x644>)
 8002fba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002fbe:	4b89      	ldr	r3, [pc, #548]	; (80031e4 <main+0x644>)
 8002fc0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002fc4:	4b87      	ldr	r3, [pc, #540]	; (80031e4 <main+0x644>)
 8002fc6:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002fca:	4b86      	ldr	r3, [pc, #536]	; (80031e4 <main+0x644>)
 8002fcc:	ed93 6a02 	vldr	s12, [r3, #8]
 8002fd0:	4b84      	ldr	r3, [pc, #528]	; (80031e4 <main+0x644>)
 8002fd2:	edd3 5a03 	vldr	s11, [r3, #12]
 8002fd6:	4b83      	ldr	r3, [pc, #524]	; (80031e4 <main+0x644>)
 8002fd8:	ed93 5a04 	vldr	s10, [r3, #16]
 8002fdc:	4b81      	ldr	r3, [pc, #516]	; (80031e4 <main+0x644>)
 8002fde:	edd3 4a1c 	vldr	s9, [r3, #112]	; 0x70
 8002fe2:	4b80      	ldr	r3, [pc, #512]	; (80031e4 <main+0x644>)
 8002fe4:	edd3 3a1d 	vldr	s7, [r3, #116]	; 0x74
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <main+0x644>)
 8002fea:	ed93 4a1e 	vldr	s8, [r3, #120]	; 0x78
 8002fee:	eeb0 3a64 	vmov.f32	s6, s9
 8002ff2:	eef0 2a45 	vmov.f32	s5, s10
 8002ff6:	eeb0 2a65 	vmov.f32	s4, s11
 8002ffa:	eef0 1a46 	vmov.f32	s3, s12
 8002ffe:	eeb0 1a66 	vmov.f32	s2, s13
 8003002:	eef0 0a47 	vmov.f32	s1, s14
 8003006:	eeb0 0a67 	vmov.f32	s0, s15
 800300a:	f7fe f93d 	bl	8001288 <MadgwickAHRSupdate>

			ccr1 = 10000 + (iBus.LV-1000)*10;
 800300e:	4b76      	ldr	r3, [pc, #472]	; (80031e8 <main+0x648>)
 8003010:	889b      	ldrh	r3, [r3, #4]
 8003012:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	461a      	mov	r2, r3
 8003020:	f242 7310 	movw	r3, #10000	; 0x2710
 8003024:	4413      	add	r3, r2
 8003026:	461a      	mov	r2, r3
 8003028:	4b70      	ldr	r3, [pc, #448]	; (80031ec <main+0x64c>)
 800302a:	601a      	str	r2, [r3, #0]
			ccr2 = 10000 + (iBus.LV-1000)*10;
 800302c:	4b6e      	ldr	r3, [pc, #440]	; (80031e8 <main+0x648>)
 800302e:	889b      	ldrh	r3, [r3, #4]
 8003030:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	461a      	mov	r2, r3
 800303e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003042:	4413      	add	r3, r2
 8003044:	461a      	mov	r2, r3
 8003046:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <main+0x650>)
 8003048:	601a      	str	r2, [r3, #0]
			ccr3 = 10000 + (iBus.LV-1000)*10;
 800304a:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <main+0x648>)
 800304c:	889b      	ldrh	r3, [r3, #4]
 800304e:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	461a      	mov	r2, r3
 800305c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003060:	4413      	add	r3, r2
 8003062:	461a      	mov	r2, r3
 8003064:	4b5b      	ldr	r3, [pc, #364]	; (80031d4 <main+0x634>)
 8003066:	601a      	str	r2, [r3, #0]
			ccr4 = 10000 + (iBus.LV-1000)*10;
 8003068:	4b5f      	ldr	r3, [pc, #380]	; (80031e8 <main+0x648>)
 800306a:	889b      	ldrh	r3, [r3, #4]
 800306c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	461a      	mov	r2, r3
 800307a:	f242 7310 	movw	r3, #10000	; 0x2710
 800307e:	4413      	add	r3, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <main+0x638>)
 8003084:	601a      	str	r2, [r3, #0]
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 8003086:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <main+0x654>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	f040 80eb 	bne.w	8003266 <main+0x6c6>
		{
			tim1_20ms_flag = 0;
 8003090:	4b58      	ldr	r3, [pc, #352]	; (80031f4 <main+0x654>)
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]
//			printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw);

			switch(print_mode)
 8003096:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <main+0x658>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	3b01      	subs	r3, #1
 800309c:	2b0a      	cmp	r3, #10
 800309e:	f200 80e4 	bhi.w	800326a <main+0x6ca>
 80030a2:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <main+0x508>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030d5 	.word	0x080030d5
 80030ac:	0800326b 	.word	0x0800326b
 80030b0:	08003107 	.word	0x08003107
 80030b4:	08003139 	.word	0x08003139
 80030b8:	0800316b 	.word	0x0800316b
 80030bc:	0800319d 	.word	0x0800319d
 80030c0:	0800326b 	.word	0x0800326b
 80030c4:	0800326b 	.word	0x0800326b
 80030c8:	0800326b 	.word	0x0800326b
 80030cc:	0800326b 	.word	0x0800326b
 80030d0:	08003211 	.word	0x08003211
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 80030d4:	4b49      	ldr	r3, [pc, #292]	; (80031fc <main+0x65c>)
 80030d6:	edd3 7a00 	vldr	s15, [r3]
 80030da:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80030de:	4b48      	ldr	r3, [pc, #288]	; (8003200 <main+0x660>)
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <main+0x664>)
 80030ea:	edd3 6a00 	vldr	s13, [r3]
 80030ee:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80030f2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80030f6:	ed8d 7b00 	vstr	d7, [sp]
 80030fa:	ec53 2b15 	vmov	r2, r3, d5
 80030fe:	4842      	ldr	r0, [pc, #264]	; (8003208 <main+0x668>)
 8003100:	f00e fcf8 	bl	8011af4 <iprintf>
 8003104:	e0b2      	b.n	800326c <main+0x6cc>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8003106:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <main+0x644>)
 8003108:	edd3 7a07 	vldr	s15, [r3, #28]
 800310c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003110:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <main+0x644>)
 8003112:	edd3 7a08 	vldr	s15, [r3, #32]
 8003116:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800311a:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <main+0x644>)
 800311c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003120:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003124:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003128:	ed8d 7b00 	vstr	d7, [sp]
 800312c:	ec53 2b15 	vmov	r2, r3, d5
 8003130:	4835      	ldr	r0, [pc, #212]	; (8003208 <main+0x668>)
 8003132:	f00e fcdf 	bl	8011af4 <iprintf>
 8003136:	e099      	b.n	800326c <main+0x6cc>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8003138:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <main+0x644>)
 800313a:	edd3 7a02 	vldr	s15, [r3, #8]
 800313e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003142:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <main+0x644>)
 8003144:	edd3 7a03 	vldr	s15, [r3, #12]
 8003148:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <main+0x644>)
 800314e:	edd3 6a04 	vldr	s13, [r3, #16]
 8003152:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003156:	ed8d 6b02 	vstr	d6, [sp, #8]
 800315a:	ed8d 7b00 	vstr	d7, [sp]
 800315e:	ec53 2b15 	vmov	r2, r3, d5
 8003162:	4829      	ldr	r0, [pc, #164]	; (8003208 <main+0x668>)
 8003164:	f00e fcc6 	bl	8011af4 <iprintf>
 8003168:	e080      	b.n	800326c <main+0x6cc>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <main+0x644>)
 800316c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8003170:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <main+0x644>)
 8003176:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800317a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800317e:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <main+0x644>)
 8003180:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8003184:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003188:	ed8d 6b02 	vstr	d6, [sp, #8]
 800318c:	ed8d 7b00 	vstr	d7, [sp]
 8003190:	ec53 2b15 	vmov	r2, r3, d5
 8003194:	481c      	ldr	r0, [pc, #112]	; (8003208 <main+0x668>)
 8003196:	f00e fcad 	bl	8011af4 <iprintf>
 800319a:	e067      	b.n	800326c <main+0x6cc>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 800319c:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <main+0x644>)
 800319e:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80031a2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <main+0x644>)
 80031a8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80031ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <main+0x644>)
 80031b2:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80031b6:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80031ba:	ed8d 6b02 	vstr	d6, [sp, #8]
 80031be:	ed8d 7b00 	vstr	d7, [sp]
 80031c2:	ec53 2b15 	vmov	r2, r3, d5
 80031c6:	4811      	ldr	r0, [pc, #68]	; (800320c <main+0x66c>)
 80031c8:	f00e fc94 	bl	8011af4 <iprintf>
 80031cc:	e04e      	b.n	800326c <main+0x6cc>
 80031ce:	bf00      	nop
 80031d0:	40000400 	.word	0x40000400
 80031d4:	240006b8 	.word	0x240006b8
 80031d8:	24000524 	.word	0x24000524
 80031dc:	24000239 	.word	0x24000239
 80031e0:	24000398 	.word	0x24000398
 80031e4:	2400027c 	.word	0x2400027c
 80031e8:	24000260 	.word	0x24000260
 80031ec:	24000394 	.word	0x24000394
 80031f0:	24000520 	.word	0x24000520
 80031f4:	2400023b 	.word	0x2400023b
 80031f8:	2400022c 	.word	0x2400022c
 80031fc:	24000314 	.word	0x24000314
 8003200:	24000318 	.word	0x24000318
 8003204:	24000310 	.word	0x24000310
 8003208:	080145c0 	.word	0x080145c0
 800320c:	080145d8 	.word	0x080145d8
			case 11: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8003210:	4b17      	ldr	r3, [pc, #92]	; (8003270 <main+0x6d0>)
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	469c      	mov	ip, r3
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <main+0x6d0>)
 8003218:	885b      	ldrh	r3, [r3, #2]
 800321a:	469e      	mov	lr, r3
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <main+0x6d0>)
 800321e:	889b      	ldrh	r3, [r3, #4]
 8003220:	4698      	mov	r8, r3
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <main+0x6d0>)
 8003224:	88db      	ldrh	r3, [r3, #6]
 8003226:	461a      	mov	r2, r3
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <main+0x6d0>)
 800322a:	891b      	ldrh	r3, [r3, #8]
 800322c:	4619      	mov	r1, r3
 800322e:	4b10      	ldr	r3, [pc, #64]	; (8003270 <main+0x6d0>)
 8003230:	895b      	ldrh	r3, [r3, #10]
 8003232:	4618      	mov	r0, r3
 8003234:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <main+0x6d0>)
 8003236:	8a1b      	ldrh	r3, [r3, #16]
 8003238:	461c      	mov	r4, r3
 800323a:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <main+0x6d0>)
 800323c:	8a5b      	ldrh	r3, [r3, #18]
 800323e:	461d      	mov	r5, r3
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <main+0x6d0>)
 8003242:	899b      	ldrh	r3, [r3, #12]
 8003244:	461e      	mov	r6, r3
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <main+0x6d0>)
 8003248:	89db      	ldrh	r3, [r3, #14]
 800324a:	9306      	str	r3, [sp, #24]
 800324c:	9605      	str	r6, [sp, #20]
 800324e:	9504      	str	r5, [sp, #16]
 8003250:	9403      	str	r4, [sp, #12]
 8003252:	9002      	str	r0, [sp, #8]
 8003254:	9101      	str	r1, [sp, #4]
 8003256:	9200      	str	r2, [sp, #0]
 8003258:	4643      	mov	r3, r8
 800325a:	4672      	mov	r2, lr
 800325c:	4661      	mov	r1, ip
 800325e:	4805      	ldr	r0, [pc, #20]	; (8003274 <main+0x6d4>)
 8003260:	f00e fc48 	bl	8011af4 <iprintf>
 8003264:	e002      	b.n	800326c <main+0x6cc>
			default: break;
			}
		}
 8003266:	bf00      	nop
 8003268:	e59e      	b.n	8002da8 <main+0x208>
			default: break;
 800326a:	bf00      	nop
	{
 800326c:	e59c      	b.n	8002da8 <main+0x208>
 800326e:	bf00      	nop
 8003270:	24000260 	.word	0x24000260
 8003274:	080145ec 	.word	0x080145ec

08003278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b09c      	sub	sp, #112	; 0x70
 800327c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800327e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003282:	224c      	movs	r2, #76	; 0x4c
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f00d ffe8 	bl	801125c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800328c:	1d3b      	adds	r3, r7, #4
 800328e:	2220      	movs	r2, #32
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f00d ffe2 	bl	801125c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003298:	2002      	movs	r0, #2
 800329a:	f007 fb6f 	bl	800a97c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800329e:	2300      	movs	r3, #0
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	4b32      	ldr	r3, [pc, #200]	; (800336c <SystemClock_Config+0xf4>)
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	4a31      	ldr	r2, [pc, #196]	; (800336c <SystemClock_Config+0xf4>)
 80032a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ac:	6193      	str	r3, [r2, #24]
 80032ae:	4b2f      	ldr	r3, [pc, #188]	; (800336c <SystemClock_Config+0xf4>)
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032b6:	603b      	str	r3, [r7, #0]
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <SystemClock_Config+0xf8>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <SystemClock_Config+0xf8>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032c4:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <SystemClock_Config+0xf8>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80032d0:	bf00      	nop
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <SystemClock_Config+0xf4>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032de:	d1f8      	bne.n	80032d2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80032e0:	2303      	movs	r3, #3
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80032ea:	2301      	movs	r3, #1
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032ee:	2340      	movs	r3, #64	; 0x40
 80032f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032f2:	2302      	movs	r3, #2
 80032f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032f6:	2302      	movs	r3, #2
 80032f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80032fa:	2305      	movs	r3, #5
 80032fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 80032fe:	23c0      	movs	r3, #192	; 0xc0
 8003300:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003302:	2302      	movs	r3, #2
 8003304:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003306:	2302      	movs	r3, #2
 8003308:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800330a:	2302      	movs	r3, #2
 800330c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800330e:	2308      	movs	r3, #8
 8003310:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003312:	2300      	movs	r3, #0
 8003314:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800331a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800331e:	4618      	mov	r0, r3
 8003320:	f007 fb66 	bl	800a9f0 <HAL_RCC_OscConfig>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800332a:	f000 fc2b 	bl	8003b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800332e:	233f      	movs	r3, #63	; 0x3f
 8003330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003332:	2303      	movs	r3, #3
 8003334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800333a:	2308      	movs	r3, #8
 800333c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800333e:	2340      	movs	r3, #64	; 0x40
 8003340:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003342:	2340      	movs	r3, #64	; 0x40
 8003344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800334c:	2340      	movs	r3, #64	; 0x40
 800334e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	2104      	movs	r1, #4
 8003354:	4618      	mov	r0, r3
 8003356:	f007 ff5b 	bl	800b210 <HAL_RCC_ClockConfig>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003360:	f000 fc10 	bl	8003b84 <Error_Handler>
  }
}
 8003364:	bf00      	nop
 8003366:	3770      	adds	r7, #112	; 0x70
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	58024800 	.word	0x58024800
 8003370:	58000400 	.word	0x58000400

08003374 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b0b0      	sub	sp, #192	; 0xc0
 8003378:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	22bc      	movs	r2, #188	; 0xbc
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f00d ff6b 	bl	801125c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8003386:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800338a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800338c:	2300      	movs	r3, #0
 800338e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f008 fac8 	bl	800b928 <HAL_RCCEx_PeriphCLKConfig>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 800339e:	f000 fbf1 	bl	8003b84 <Error_Handler>
  }
}
 80033a2:	bf00      	nop
 80033a4:	37c0      	adds	r7, #192	; 0xc0
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <MX_I2C1_Init+0x74>)
 80033b2:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <MX_I2C1_Init+0x78>)
 80033b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <MX_I2C1_Init+0x74>)
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <MX_I2C1_Init+0x7c>)
 80033ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <MX_I2C1_Init+0x74>)
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033c2:	4b17      	ldr	r3, [pc, #92]	; (8003420 <MX_I2C1_Init+0x74>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033c8:	4b15      	ldr	r3, [pc, #84]	; (8003420 <MX_I2C1_Init+0x74>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <MX_I2C1_Init+0x74>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033d4:	4b12      	ldr	r3, [pc, #72]	; (8003420 <MX_I2C1_Init+0x74>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <MX_I2C1_Init+0x74>)
 80033dc:	2200      	movs	r2, #0
 80033de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <MX_I2C1_Init+0x74>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033e6:	480e      	ldr	r0, [pc, #56]	; (8003420 <MX_I2C1_Init+0x74>)
 80033e8:	f005 f874 	bl	80084d4 <HAL_I2C_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033f2:	f000 fbc7 	bl	8003b84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033f6:	2100      	movs	r1, #0
 80033f8:	4809      	ldr	r0, [pc, #36]	; (8003420 <MX_I2C1_Init+0x74>)
 80033fa:	f007 fa27 	bl	800a84c <HAL_I2CEx_ConfigAnalogFilter>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003404:	f000 fbbe 	bl	8003b84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003408:	2100      	movs	r1, #0
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <MX_I2C1_Init+0x74>)
 800340c:	f007 fa69 	bl	800a8e2 <HAL_I2CEx_ConfigDigitalFilter>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003416:	f000 fbb5 	bl	8003b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	24000398 	.word	0x24000398
 8003424:	40005400 	.word	0x40005400
 8003428:	00b03fdb 	.word	0x00b03fdb

0800342c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003430:	4b27      	ldr	r3, [pc, #156]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003432:	4a28      	ldr	r2, [pc, #160]	; (80034d4 <MX_SPI1_Init+0xa8>)
 8003434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003438:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800343c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003440:	2200      	movs	r2, #0
 8003442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003444:	4b22      	ldr	r3, [pc, #136]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003446:	2207      	movs	r2, #7
 8003448:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <MX_SPI1_Init+0xa4>)
 800344c:	2200      	movs	r2, #0
 800344e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003450:	4b1f      	ldr	r3, [pc, #124]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003452:	2200      	movs	r2, #0
 8003454:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003458:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800345c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800345e:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003460:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003468:	2200      	movs	r2, #0
 800346a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800346c:	4b18      	ldr	r3, [pc, #96]	; (80034d0 <MX_SPI1_Init+0xa4>)
 800346e:	2200      	movs	r2, #0
 8003470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003472:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003474:	2200      	movs	r2, #0
 8003476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003478:	4b15      	ldr	r3, [pc, #84]	; (80034d0 <MX_SPI1_Init+0xa4>)
 800347a:	2200      	movs	r2, #0
 800347c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003484:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003488:	2200      	movs	r2, #0
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800348c:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <MX_SPI1_Init+0xa4>)
 800348e:	2200      	movs	r2, #0
 8003490:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003492:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <MX_SPI1_Init+0xa4>)
 8003494:	2200      	movs	r2, #0
 8003496:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <MX_SPI1_Init+0xa4>)
 800349a:	2200      	movs	r2, #0
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <MX_SPI1_Init+0xa4>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80034a4:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <MX_SPI1_Init+0xa4>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <MX_SPI1_Init+0xa4>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <MX_SPI1_Init+0xa4>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <MX_SPI1_Init+0xa4>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034bc:	4804      	ldr	r0, [pc, #16]	; (80034d0 <MX_SPI1_Init+0xa4>)
 80034be:	f009 fd95 	bl	800cfec <HAL_SPI_Init>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80034c8:	f000 fb5c 	bl	8003b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	24000630 	.word	0x24000630
 80034d4:	40013000 	.word	0x40013000

080034d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	; 0x38
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ec:	f107 031c 	add.w	r3, r7, #28
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034f8:	463b      	mov	r3, r7
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	611a      	str	r2, [r3, #16]
 8003506:	615a      	str	r2, [r3, #20]
 8003508:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800350a:	4b3d      	ldr	r3, [pc, #244]	; (8003600 <MX_TIM3_Init+0x128>)
 800350c:	4a3d      	ldr	r2, [pc, #244]	; (8003604 <MX_TIM3_Init+0x12c>)
 800350e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003510:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <MX_TIM3_Init+0x128>)
 8003512:	2217      	movs	r2, #23
 8003514:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003516:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <MX_TIM3_Init+0x128>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800351c:	4b38      	ldr	r3, [pc, #224]	; (8003600 <MX_TIM3_Init+0x128>)
 800351e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003524:	4b36      	ldr	r3, [pc, #216]	; (8003600 <MX_TIM3_Init+0x128>)
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800352a:	4b35      	ldr	r3, [pc, #212]	; (8003600 <MX_TIM3_Init+0x128>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003530:	4833      	ldr	r0, [pc, #204]	; (8003600 <MX_TIM3_Init+0x128>)
 8003532:	f00a fe16 	bl	800e162 <HAL_TIM_Base_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800353c:	f000 fb22 	bl	8003b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800354a:	4619      	mov	r1, r3
 800354c:	482c      	ldr	r0, [pc, #176]	; (8003600 <MX_TIM3_Init+0x128>)
 800354e:	f00b faaf 	bl	800eab0 <HAL_TIM_ConfigClockSource>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003558:	f000 fb14 	bl	8003b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800355c:	4828      	ldr	r0, [pc, #160]	; (8003600 <MX_TIM3_Init+0x128>)
 800355e:	f00a fec7 	bl	800e2f0 <HAL_TIM_PWM_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003568:	f000 fb0c 	bl	8003b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003574:	f107 031c 	add.w	r3, r7, #28
 8003578:	4619      	mov	r1, r3
 800357a:	4821      	ldr	r0, [pc, #132]	; (8003600 <MX_TIM3_Init+0x128>)
 800357c:	f00b ffe0 	bl	800f540 <HAL_TIMEx_MasterConfigSynchronization>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003586:	f000 fafd 	bl	8003b84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800358a:	2360      	movs	r3, #96	; 0x60
 800358c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800359a:	463b      	mov	r3, r7
 800359c:	2200      	movs	r2, #0
 800359e:	4619      	mov	r1, r3
 80035a0:	4817      	ldr	r0, [pc, #92]	; (8003600 <MX_TIM3_Init+0x128>)
 80035a2:	f00b f975 	bl	800e890 <HAL_TIM_PWM_ConfigChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80035ac:	f000 faea 	bl	8003b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035b0:	463b      	mov	r3, r7
 80035b2:	2204      	movs	r2, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4812      	ldr	r0, [pc, #72]	; (8003600 <MX_TIM3_Init+0x128>)
 80035b8:	f00b f96a 	bl	800e890 <HAL_TIM_PWM_ConfigChannel>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80035c2:	f000 fadf 	bl	8003b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80035c6:	463b      	mov	r3, r7
 80035c8:	2208      	movs	r2, #8
 80035ca:	4619      	mov	r1, r3
 80035cc:	480c      	ldr	r0, [pc, #48]	; (8003600 <MX_TIM3_Init+0x128>)
 80035ce:	f00b f95f 	bl	800e890 <HAL_TIM_PWM_ConfigChannel>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80035d8:	f000 fad4 	bl	8003b84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80035dc:	463b      	mov	r3, r7
 80035de:	220c      	movs	r2, #12
 80035e0:	4619      	mov	r1, r3
 80035e2:	4807      	ldr	r0, [pc, #28]	; (8003600 <MX_TIM3_Init+0x128>)
 80035e4:	f00b f954 	bl	800e890 <HAL_TIM_PWM_ConfigChannel>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80035ee:	f000 fac9 	bl	8003b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80035f2:	4803      	ldr	r0, [pc, #12]	; (8003600 <MX_TIM3_Init+0x128>)
 80035f4:	f000 fc32 	bl	8003e5c <HAL_TIM_MspPostInit>

}
 80035f8:	bf00      	nop
 80035fa:	3738      	adds	r7, #56	; 0x38
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	240003e4 	.word	0x240003e4
 8003604:	40000400 	.word	0x40000400

08003608 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <MX_TIM7_Init+0x64>)
 800361a:	4a15      	ldr	r2, [pc, #84]	; (8003670 <MX_TIM7_Init+0x68>)
 800361c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <MX_TIM7_Init+0x64>)
 8003620:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003624:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003626:	4b11      	ldr	r3, [pc, #68]	; (800366c <MX_TIM7_Init+0x64>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <MX_TIM7_Init+0x64>)
 800362e:	2205      	movs	r2, #5
 8003630:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <MX_TIM7_Init+0x64>)
 8003634:	2280      	movs	r2, #128	; 0x80
 8003636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003638:	480c      	ldr	r0, [pc, #48]	; (800366c <MX_TIM7_Init+0x64>)
 800363a:	f00a fd92 	bl	800e162 <HAL_TIM_Base_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003644:	f000 fa9e 	bl	8003b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4805      	ldr	r0, [pc, #20]	; (800366c <MX_TIM7_Init+0x64>)
 8003656:	f00b ff73 	bl	800f540 <HAL_TIMEx_MasterConfigSynchronization>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003660:	f000 fa90 	bl	8003b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	24000758 	.word	0x24000758
 8003670:	40001400 	.word	0x40001400

08003674 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003678:	4b22      	ldr	r3, [pc, #136]	; (8003704 <MX_USART1_UART_Init+0x90>)
 800367a:	4a23      	ldr	r2, [pc, #140]	; (8003708 <MX_USART1_UART_Init+0x94>)
 800367c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800367e:	4b21      	ldr	r3, [pc, #132]	; (8003704 <MX_USART1_UART_Init+0x90>)
 8003680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003684:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003686:	4b1f      	ldr	r3, [pc, #124]	; (8003704 <MX_USART1_UART_Init+0x90>)
 8003688:	2200      	movs	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <MX_USART1_UART_Init+0x90>)
 800368e:	2200      	movs	r2, #0
 8003690:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <MX_USART1_UART_Init+0x90>)
 8003694:	2200      	movs	r2, #0
 8003696:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <MX_USART1_UART_Init+0x90>)
 800369a:	220c      	movs	r2, #12
 800369c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <MX_USART1_UART_Init+0x90>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <MX_USART1_UART_Init+0x90>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <MX_USART1_UART_Init+0x90>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <MX_USART1_UART_Init+0x90>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <MX_USART1_UART_Init+0x90>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036bc:	4811      	ldr	r0, [pc, #68]	; (8003704 <MX_USART1_UART_Init+0x90>)
 80036be:	f00b ffe5 	bl	800f68c <HAL_UART_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80036c8:	f000 fa5c 	bl	8003b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036cc:	2100      	movs	r1, #0
 80036ce:	480d      	ldr	r0, [pc, #52]	; (8003704 <MX_USART1_UART_Init+0x90>)
 80036d0:	f00d fcd0 	bl	8011074 <HAL_UARTEx_SetTxFifoThreshold>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80036da:	f000 fa53 	bl	8003b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036de:	2100      	movs	r1, #0
 80036e0:	4808      	ldr	r0, [pc, #32]	; (8003704 <MX_USART1_UART_Init+0x90>)
 80036e2:	f00d fd05 	bl	80110f0 <HAL_UARTEx_SetRxFifoThreshold>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80036ec:	f000 fa4a 	bl	8003b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80036f0:	4804      	ldr	r0, [pc, #16]	; (8003704 <MX_USART1_UART_Init+0x90>)
 80036f2:	f00d fc86 	bl	8011002 <HAL_UARTEx_DisableFifoMode>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80036fc:	f000 fa42 	bl	8003b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003700:	bf00      	nop
 8003702:	bd80      	pop	{r7, pc}
 8003704:	24000528 	.word	0x24000528
 8003708:	40011000 	.word	0x40011000

0800370c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003710:	4b22      	ldr	r3, [pc, #136]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003712:	4a23      	ldr	r2, [pc, #140]	; (80037a0 <MX_USART2_UART_Init+0x94>)
 8003714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800371c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003724:	4b1d      	ldr	r3, [pc, #116]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <MX_USART2_UART_Init+0x90>)
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003732:	220c      	movs	r2, #12
 8003734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003736:	4b19      	ldr	r3, [pc, #100]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800373c:	4b17      	ldr	r3, [pc, #92]	; (800379c <MX_USART2_UART_Init+0x90>)
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003742:	4b16      	ldr	r3, [pc, #88]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003744:	2200      	movs	r2, #0
 8003746:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003748:	4b14      	ldr	r3, [pc, #80]	; (800379c <MX_USART2_UART_Init+0x90>)
 800374a:	2200      	movs	r2, #0
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003754:	4811      	ldr	r0, [pc, #68]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003756:	f00b ff99 	bl	800f68c <HAL_UART_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003760:	f000 fa10 	bl	8003b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003764:	2100      	movs	r1, #0
 8003766:	480d      	ldr	r0, [pc, #52]	; (800379c <MX_USART2_UART_Init+0x90>)
 8003768:	f00d fc84 	bl	8011074 <HAL_UARTEx_SetTxFifoThreshold>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003772:	f000 fa07 	bl	8003b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003776:	2100      	movs	r1, #0
 8003778:	4808      	ldr	r0, [pc, #32]	; (800379c <MX_USART2_UART_Init+0x90>)
 800377a:	f00d fcb9 	bl	80110f0 <HAL_UARTEx_SetRxFifoThreshold>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003784:	f000 f9fe 	bl	8003b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003788:	4804      	ldr	r0, [pc, #16]	; (800379c <MX_USART2_UART_Init+0x90>)
 800378a:	f00d fc3a 	bl	8011002 <HAL_UARTEx_DisableFifoMode>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003794:	f000 f9f6 	bl	8003b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}
 800379c:	240006bc 	.word	0x240006bc
 80037a0:	40004400 	.word	0x40004400

080037a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037aa:	4b19      	ldr	r3, [pc, #100]	; (8003810 <MX_DMA_Init+0x6c>)
 80037ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037b0:	4a17      	ldr	r2, [pc, #92]	; (8003810 <MX_DMA_Init+0x6c>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <MX_DMA_Init+0x6c>)
 80037bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2100      	movs	r1, #0
 80037cc:	200b      	movs	r0, #11
 80037ce:	f001 fe2e 	bl	800542e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80037d2:	200b      	movs	r0, #11
 80037d4:	f001 fe45 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	2100      	movs	r1, #0
 80037dc:	200c      	movs	r0, #12
 80037de:	f001 fe26 	bl	800542e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80037e2:	200c      	movs	r0, #12
 80037e4:	f001 fe3d 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2100      	movs	r1, #0
 80037ec:	200d      	movs	r0, #13
 80037ee:	f001 fe1e 	bl	800542e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80037f2:	200d      	movs	r0, #13
 80037f4:	f001 fe35 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80037f8:	2200      	movs	r2, #0
 80037fa:	2100      	movs	r1, #0
 80037fc:	200e      	movs	r0, #14
 80037fe:	f001 fe16 	bl	800542e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003802:	200e      	movs	r0, #14
 8003804:	f001 fe2d 	bl	8005462 <HAL_NVIC_EnableIRQ>

}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	58024400 	.word	0x58024400

08003814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381a:	f107 0314 	add.w	r3, r7, #20
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800382a:	4b44      	ldr	r3, [pc, #272]	; (800393c <MX_GPIO_Init+0x128>)
 800382c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003830:	4a42      	ldr	r2, [pc, #264]	; (800393c <MX_GPIO_Init+0x128>)
 8003832:	f043 0310 	orr.w	r3, r3, #16
 8003836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800383a:	4b40      	ldr	r3, [pc, #256]	; (800393c <MX_GPIO_Init+0x128>)
 800383c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003848:	4b3c      	ldr	r3, [pc, #240]	; (800393c <MX_GPIO_Init+0x128>)
 800384a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384e:	4a3b      	ldr	r2, [pc, #236]	; (800393c <MX_GPIO_Init+0x128>)
 8003850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003858:	4b38      	ldr	r3, [pc, #224]	; (800393c <MX_GPIO_Init+0x128>)
 800385a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003866:	4b35      	ldr	r3, [pc, #212]	; (800393c <MX_GPIO_Init+0x128>)
 8003868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800386c:	4a33      	ldr	r2, [pc, #204]	; (800393c <MX_GPIO_Init+0x128>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003876:	4b31      	ldr	r3, [pc, #196]	; (800393c <MX_GPIO_Init+0x128>)
 8003878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003884:	4b2d      	ldr	r3, [pc, #180]	; (800393c <MX_GPIO_Init+0x128>)
 8003886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388a:	4a2c      	ldr	r2, [pc, #176]	; (800393c <MX_GPIO_Init+0x128>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003894:	4b29      	ldr	r3, [pc, #164]	; (800393c <MX_GPIO_Init+0x128>)
 8003896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	607b      	str	r3, [r7, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a2:	4b26      	ldr	r3, [pc, #152]	; (800393c <MX_GPIO_Init+0x128>)
 80038a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a8:	4a24      	ldr	r2, [pc, #144]	; (800393c <MX_GPIO_Init+0x128>)
 80038aa:	f043 0304 	orr.w	r3, r3, #4
 80038ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <MX_GPIO_Init+0x128>)
 80038b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	603b      	str	r3, [r7, #0]
 80038be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2108      	movs	r1, #8
 80038c4:	481e      	ldr	r0, [pc, #120]	; (8003940 <MX_GPIO_Init+0x12c>)
 80038c6:	f004 fdeb 	bl	80084a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2102      	movs	r1, #2
 80038ce:	481d      	ldr	r0, [pc, #116]	; (8003944 <MX_GPIO_Init+0x130>)
 80038d0:	f004 fde6 	bl	80084a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25qxx_CS_GPIO_Port, W25qxx_CS_Pin, GPIO_PIN_RESET);
 80038d4:	2200      	movs	r2, #0
 80038d6:	2140      	movs	r1, #64	; 0x40
 80038d8:	481b      	ldr	r0, [pc, #108]	; (8003948 <MX_GPIO_Init+0x134>)
 80038da:	f004 fde1 	bl	80084a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80038de:	2308      	movs	r3, #8
 80038e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ea:	2300      	movs	r3, #0
 80038ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80038ee:	f107 0314 	add.w	r3, r7, #20
 80038f2:	4619      	mov	r1, r3
 80038f4:	4812      	ldr	r0, [pc, #72]	; (8003940 <MX_GPIO_Init+0x12c>)
 80038f6:	f004 fc23 	bl	8008140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80038fa:	2302      	movs	r3, #2
 80038fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	2300      	movs	r3, #0
 8003908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	4619      	mov	r1, r3
 8003910:	480c      	ldr	r0, [pc, #48]	; (8003944 <MX_GPIO_Init+0x130>)
 8003912:	f004 fc15 	bl	8008140 <HAL_GPIO_Init>

  /*Configure GPIO pin : W25qxx_CS_Pin */
  GPIO_InitStruct.Pin = W25qxx_CS_Pin;
 8003916:	2340      	movs	r3, #64	; 0x40
 8003918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800391a:	2301      	movs	r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003922:	2300      	movs	r3, #0
 8003924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W25qxx_CS_GPIO_Port, &GPIO_InitStruct);
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4619      	mov	r1, r3
 800392c:	4806      	ldr	r0, [pc, #24]	; (8003948 <MX_GPIO_Init+0x134>)
 800392e:	f004 fc07 	bl	8008140 <HAL_GPIO_Init>

}
 8003932:	bf00      	nop
 8003934:	3728      	adds	r7, #40	; 0x28
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	58024400 	.word	0x58024400
 8003940:	58021000 	.word	0x58021000
 8003944:	58020000 	.word	0x58020000
 8003948:	58020400 	.word	0x58020400

0800394c <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b01      	cmp	r3, #1
 800395a:	f040 80d6 	bne.w	8003b0a <Compass_Calibration+0x1be>
	{
		for(int i =0;i<5;i++)
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e00b      	b.n	800397c <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 8003964:	486b      	ldr	r0, [pc, #428]	; (8003b14 <Compass_Calibration+0x1c8>)
 8003966:	f7fd f991 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 800396a:	2001      	movs	r0, #1
 800396c:	f001 fc54 	bl	8005218 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8003970:	4869      	ldr	r0, [pc, #420]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003972:	f7fd fb35 	bl	8000fe0 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	3301      	adds	r3, #1
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b04      	cmp	r3, #4
 8003980:	ddf0      	ble.n	8003964 <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 8003982:	4b65      	ldr	r3, [pc, #404]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4a64      	ldr	r2, [pc, #400]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003988:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mx_Min = MPU9250.Mx;
 800398a:	4b63      	ldr	r3, [pc, #396]	; (8003b18 <Compass_Calibration+0x1cc>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a62      	ldr	r2, [pc, #392]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003990:	64d3      	str	r3, [r2, #76]	; 0x4c
		MPU9250.My_Max = MPU9250.My;
 8003992:	4b61      	ldr	r3, [pc, #388]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	4a60      	ldr	r2, [pc, #384]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003998:	65d3      	str	r3, [r2, #92]	; 0x5c
		MPU9250.My_Min = MPU9250.My;
 800399a:	4b5f      	ldr	r3, [pc, #380]	; (8003b18 <Compass_Calibration+0x1cc>)
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	4a5e      	ldr	r2, [pc, #376]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039a0:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mz_Max = MPU9250.Mz;
 80039a2:	4b5d      	ldr	r3, [pc, #372]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a6:	4a5c      	ldr	r2, [pc, #368]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039a8:	6613      	str	r3, [r2, #96]	; 0x60
		MPU9250.Mz_Min = MPU9250.Mz;
 80039aa:	4b5b      	ldr	r3, [pc, #364]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ae:	4a5a      	ldr	r2, [pc, #360]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039b0:	6553      	str	r3, [r2, #84]	; 0x54

		while(mag_calibration_enable != 0)
 80039b2:	e065      	b.n	8003a80 <Compass_Calibration+0x134>
		{
			Receive_Command();
 80039b4:	f000 fd52 	bl	800445c <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 80039b8:	4856      	ldr	r0, [pc, #344]	; (8003b14 <Compass_Calibration+0x1c8>)
 80039ba:	f7fd f967 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 80039be:	2001      	movs	r0, #1
 80039c0:	f001 fc2a 	bl	8005218 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 80039c4:	4854      	ldr	r0, [pc, #336]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039c6:	f7fd fb0b 	bl	8000fe0 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 80039ca:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039cc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80039d0:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039d2:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80039d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039de:	dd03      	ble.n	80039e8 <Compass_Calibration+0x9c>
 80039e0:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	4a4c      	ldr	r2, [pc, #304]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039e6:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 80039e8:	4b4b      	ldr	r3, [pc, #300]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039ea:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80039ee:	4b4a      	ldr	r3, [pc, #296]	; (8003b18 <Compass_Calibration+0x1cc>)
 80039f0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80039f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fc:	d503      	bpl.n	8003a06 <Compass_Calibration+0xba>
 80039fe:	4b46      	ldr	r3, [pc, #280]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a45      	ldr	r2, [pc, #276]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a04:	64d3      	str	r3, [r2, #76]	; 0x4c

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 8003a06:	4b44      	ldr	r3, [pc, #272]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a08:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003a0c:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a0e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1a:	dd03      	ble.n	8003a24 <Compass_Calibration+0xd8>
 8003a1c:	4b3e      	ldr	r3, [pc, #248]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a20:	4a3d      	ldr	r2, [pc, #244]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a22:	65d3      	str	r3, [r2, #92]	; 0x5c
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 8003a24:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a26:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8003a2a:	4b3b      	ldr	r3, [pc, #236]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a2c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003a30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a38:	d503      	bpl.n	8003a42 <Compass_Calibration+0xf6>
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3e:	4a36      	ldr	r2, [pc, #216]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a40:	6513      	str	r3, [r2, #80]	; 0x50

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 8003a42:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a44:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003a48:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a4a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a56:	dd03      	ble.n	8003a60 <Compass_Calibration+0x114>
 8003a58:	4b2f      	ldr	r3, [pc, #188]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a5c:	4a2e      	ldr	r2, [pc, #184]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a5e:	6613      	str	r3, [r2, #96]	; 0x60
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 8003a60:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a62:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003a66:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a68:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a74:	d400      	bmi.n	8003a78 <Compass_Calibration+0x12c>
 8003a76:	e003      	b.n	8003a80 <Compass_Calibration+0x134>
 8003a78:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a7c:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a7e:	6553      	str	r3, [r2, #84]	; 0x54
		while(mag_calibration_enable != 0)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d196      	bne.n	80039b4 <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 8003a86:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a88:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003a8e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a96:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003aa0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 8003aa4:	4b1c      	ldr	r3, [pc, #112]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003aa6:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003aaa:	4b1b      	ldr	r3, [pc, #108]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003aac:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ab4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ab8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003abc:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003abe:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003ac4:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003ac8:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003aca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003ace:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ad2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ada:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003adc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8003ae0:	4a0e      	ldr	r2, [pc, #56]	; (8003b1c <Compass_Calibration+0x1d0>)
 8003ae2:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ae6:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	; (8003b20 <Compass_Calibration+0x1d4>)
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aee:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8003af0:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <Compass_Calibration+0x1d8>)
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <Compass_Calibration+0x1cc>)
 8003af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af6:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 8003af8:	2000      	movs	r0, #0
 8003afa:	f001 f89d 	bl	8004c38 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8003afe:	230c      	movs	r3, #12
 8003b00:	2200      	movs	r2, #0
 8003b02:	2100      	movs	r1, #0
 8003b04:	4805      	ldr	r0, [pc, #20]	; (8003b1c <Compass_Calibration+0x1d0>)
 8003b06:	f001 f989 	bl	8004e1c <W25qxx_WriteSector>
	}
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	24000398 	.word	0x24000398
 8003b18:	2400027c 	.word	0x2400027c
 8003b1c:	2400074c 	.word	0x2400074c
 8003b20:	24000750 	.word	0x24000750
 8003b24:	24000754 	.word	0x24000754

08003b28 <ESC_Calibration>:

void ESC_Calibration(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 20000;
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <ESC_Calibration+0x58>)
 8003b2e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 20000;
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <ESC_Calibration+0x58>)
 8003b36:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 20000;
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <ESC_Calibration+0x58>)
 8003b3e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003b42:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 20000;
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <ESC_Calibration+0x58>)
 8003b46:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 8003b4c:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003b50:	f001 fb62 	bl	8005218 <HAL_Delay>
	TIM3->CCR1 = 10000;
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <ESC_Calibration+0x58>)
 8003b56:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b5a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 10000;
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <ESC_Calibration+0x58>)
 8003b5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 10000;
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <ESC_Calibration+0x58>)
 8003b66:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 10000;
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <ESC_Calibration+0x58>)
 8003b6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 8003b74:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003b78:	f001 fb4e 	bl	8005218 <HAL_Delay>
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40000400 	.word	0x40000400

08003b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b88:	b672      	cpsid	i
}
 8003b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003b8c:	e7fe      	b.n	8003b8c <Error_Handler+0x8>
	...

08003b90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_MspInit+0x30>)
 8003b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b9c:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <HAL_MspInit+0x30>)
 8003b9e:	f043 0302 	orr.w	r3, r3, #2
 8003ba2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ba6:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <HAL_MspInit+0x30>)
 8003ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	58024400 	.word	0x58024400

08003bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b0b8      	sub	sp, #224	; 0xe0
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	22bc      	movs	r2, #188	; 0xbc
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f00d fb39 	bl	801125c <memset>
  if(hi2c->Instance==I2C1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3f      	ldr	r2, [pc, #252]	; (8003cec <HAL_I2C_MspInit+0x128>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d177      	bne.n	8003ce4 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003bf4:	2308      	movs	r3, #8
 8003bf6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bfe:	f107 0310 	add.w	r3, r7, #16
 8003c02:	4618      	mov	r0, r3
 8003c04:	f007 fe90 	bl	800b928 <HAL_RCCEx_PeriphCLKConfig>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003c0e:	f7ff ffb9 	bl	8003b84 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c12:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <HAL_I2C_MspInit+0x12c>)
 8003c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c18:	4a35      	ldr	r2, [pc, #212]	; (8003cf0 <HAL_I2C_MspInit+0x12c>)
 8003c1a:	f043 0302 	orr.w	r3, r3, #2
 8003c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c22:	4b33      	ldr	r3, [pc, #204]	; (8003cf0 <HAL_I2C_MspInit+0x12c>)
 8003c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003c30:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c38:	2312      	movs	r3, #18
 8003c3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c54:	4619      	mov	r1, r3
 8003c56:	4827      	ldr	r0, [pc, #156]	; (8003cf4 <HAL_I2C_MspInit+0x130>)
 8003c58:	f004 fa72 	bl	8008140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c5c:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <HAL_I2C_MspInit+0x12c>)
 8003c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c62:	4a23      	ldr	r2, [pc, #140]	; (8003cf0 <HAL_I2C_MspInit+0x12c>)
 8003c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_I2C_MspInit+0x12c>)
 8003c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 8003c7a:	4b1f      	ldr	r3, [pc, #124]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <HAL_I2C_MspInit+0x138>)
 8003c7e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003c80:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003c82:	2221      	movs	r2, #33	; 0x21
 8003c84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c86:	4b1c      	ldr	r3, [pc, #112]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c8c:	4b1a      	ldr	r3, [pc, #104]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c92:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c9a:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ca0:	4b15      	ldr	r3, [pc, #84]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003ca6:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cb2:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003cb8:	480f      	ldr	r0, [pc, #60]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003cba:	f001 fbed 	bl	8005498 <HAL_DMA_Init>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8003cc4:	f7ff ff5e 	bl	8003b84 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0b      	ldr	r2, [pc, #44]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003ccc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cce:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <HAL_I2C_MspInit+0x134>)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	201f      	movs	r0, #31
 8003cda:	f001 fba8 	bl	800542e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003cde:	201f      	movs	r0, #31
 8003ce0:	f001 fbbf 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ce4:	bf00      	nop
 8003ce6:	37e0      	adds	r7, #224	; 0xe0
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40005400 	.word	0x40005400
 8003cf0:	58024400 	.word	0x58024400
 8003cf4:	58020400 	.word	0x58020400
 8003cf8:	240005b8 	.word	0x240005b8
 8003cfc:	40020028 	.word	0x40020028

08003d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b0b8      	sub	sp, #224	; 0xe0
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d18:	f107 0310 	add.w	r3, r7, #16
 8003d1c:	22bc      	movs	r2, #188	; 0xbc
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f00d fa9b 	bl	801125c <memset>
  if(hspi->Instance==SPI1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a25      	ldr	r2, [pc, #148]	; (8003dc0 <HAL_SPI_MspInit+0xc0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d142      	bne.n	8003db6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d3c:	f107 0310 	add.w	r3, r7, #16
 8003d40:	4618      	mov	r0, r3
 8003d42:	f007 fdf1 	bl	800b928 <HAL_RCCEx_PeriphCLKConfig>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8003d4c:	f7ff ff1a 	bl	8003b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d50:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <HAL_SPI_MspInit+0xc4>)
 8003d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d56:	4a1b      	ldr	r2, [pc, #108]	; (8003dc4 <HAL_SPI_MspInit+0xc4>)
 8003d58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d5c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d60:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <HAL_SPI_MspInit+0xc4>)
 8003d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_SPI_MspInit+0xc4>)
 8003d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d74:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <HAL_SPI_MspInit+0xc4>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d7e:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_SPI_MspInit+0xc4>)
 8003d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d8c:	23e0      	movs	r3, #224	; 0xe0
 8003d8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d92:	2302      	movs	r3, #2
 8003d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003da4:	2305      	movs	r3, #5
 8003da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003daa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dae:	4619      	mov	r1, r3
 8003db0:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <HAL_SPI_MspInit+0xc8>)
 8003db2:	f004 f9c5 	bl	8008140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003db6:	bf00      	nop
 8003db8:	37e0      	adds	r7, #224	; 0xe0
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40013000 	.word	0x40013000
 8003dc4:	58024400 	.word	0x58024400
 8003dc8:	58020000 	.word	0x58020000

08003dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <HAL_TIM_Base_MspInit+0x84>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d117      	bne.n	8003e0e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_TIM_Base_MspInit+0x88>)
 8003de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003de4:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_TIM_Base_MspInit+0x88>)
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003dee:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_TIM_Base_MspInit+0x88>)
 8003df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2100      	movs	r1, #0
 8003e00:	201d      	movs	r0, #29
 8003e02:	f001 fb14 	bl	800542e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e06:	201d      	movs	r0, #29
 8003e08:	f001 fb2b 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003e0c:	e01b      	b.n	8003e46 <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a11      	ldr	r2, [pc, #68]	; (8003e58 <HAL_TIM_Base_MspInit+0x8c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d116      	bne.n	8003e46 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <HAL_TIM_Base_MspInit+0x88>)
 8003e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e1e:	4a0d      	ldr	r2, [pc, #52]	; (8003e54 <HAL_TIM_Base_MspInit+0x88>)
 8003e20:	f043 0320 	orr.w	r3, r3, #32
 8003e24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <HAL_TIM_Base_MspInit+0x88>)
 8003e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	2037      	movs	r0, #55	; 0x37
 8003e3c:	f001 faf7 	bl	800542e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e40:	2037      	movs	r0, #55	; 0x37
 8003e42:	f001 fb0e 	bl	8005462 <HAL_NVIC_EnableIRQ>
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40000400 	.word	0x40000400
 8003e54:	58024400 	.word	0x58024400
 8003e58:	40001400 	.word	0x40001400

08003e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <HAL_TIM_MspPostInit+0xa8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d13d      	bne.n	8003efa <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <HAL_TIM_MspPostInit+0xac>)
 8003e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e84:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <HAL_TIM_MspPostInit+0xac>)
 8003e86:	f043 0302 	orr.w	r3, r3, #2
 8003e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e8e:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <HAL_TIM_MspPostInit+0xac>)
 8003e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9c:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_TIM_MspPostInit+0xac>)
 8003e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_TIM_MspPostInit+0xac>)
 8003ea4:	f043 0304 	orr.w	r3, r3, #4
 8003ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003eac:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <HAL_TIM_MspPostInit+0xac>)
 8003eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ece:	f107 0314 	add.w	r3, r7, #20
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	480d      	ldr	r0, [pc, #52]	; (8003f0c <HAL_TIM_MspPostInit+0xb0>)
 8003ed6:	f004 f933 	bl	8008140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003eda:	23c0      	movs	r3, #192	; 0xc0
 8003edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eea:	2302      	movs	r3, #2
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eee:	f107 0314 	add.w	r3, r7, #20
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4806      	ldr	r0, [pc, #24]	; (8003f10 <HAL_TIM_MspPostInit+0xb4>)
 8003ef6:	f004 f923 	bl	8008140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003efa:	bf00      	nop
 8003efc:	3728      	adds	r7, #40	; 0x28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40000400 	.word	0x40000400
 8003f08:	58024400 	.word	0x58024400
 8003f0c:	58020400 	.word	0x58020400
 8003f10:	58020800 	.word	0x58020800

08003f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b0ba      	sub	sp, #232	; 0xe8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f2c:	f107 0318 	add.w	r3, r7, #24
 8003f30:	22bc      	movs	r2, #188	; 0xbc
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f00d f991 	bl	801125c <memset>
  if(huart->Instance==USART1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a96      	ldr	r2, [pc, #600]	; (8004198 <HAL_UART_MspInit+0x284>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	f040 80a7 	bne.w	8004094 <HAL_UART_MspInit+0x180>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f50:	f107 0318 	add.w	r3, r7, #24
 8003f54:	4618      	mov	r0, r3
 8003f56:	f007 fce7 	bl	800b928 <HAL_RCCEx_PeriphCLKConfig>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003f60:	f7ff fe10 	bl	8003b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f64:	4b8d      	ldr	r3, [pc, #564]	; (800419c <HAL_UART_MspInit+0x288>)
 8003f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f6a:	4a8c      	ldr	r2, [pc, #560]	; (800419c <HAL_UART_MspInit+0x288>)
 8003f6c:	f043 0310 	orr.w	r3, r3, #16
 8003f70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f74:	4b89      	ldr	r3, [pc, #548]	; (800419c <HAL_UART_MspInit+0x288>)
 8003f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f7a:	f003 0310 	and.w	r3, r3, #16
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f82:	4b86      	ldr	r3, [pc, #536]	; (800419c <HAL_UART_MspInit+0x288>)
 8003f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f88:	4a84      	ldr	r2, [pc, #528]	; (800419c <HAL_UART_MspInit+0x288>)
 8003f8a:	f043 0302 	orr.w	r3, r3, #2
 8003f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f92:	4b82      	ldr	r3, [pc, #520]	; (800419c <HAL_UART_MspInit+0x288>)
 8003f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003fa0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003fba:	2304      	movs	r3, #4
 8003fbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4876      	ldr	r0, [pc, #472]	; (80041a0 <HAL_UART_MspInit+0x28c>)
 8003fc8:	f004 f8ba 	bl	8008140 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8003fcc:	4b75      	ldr	r3, [pc, #468]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8003fce:	4a76      	ldr	r2, [pc, #472]	; (80041a8 <HAL_UART_MspInit+0x294>)
 8003fd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003fd2:	4b74      	ldr	r3, [pc, #464]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8003fd4:	2229      	movs	r2, #41	; 0x29
 8003fd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fd8:	4b72      	ldr	r3, [pc, #456]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fde:	4b71      	ldr	r3, [pc, #452]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8003fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fec:	4b6d      	ldr	r3, [pc, #436]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ff2:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8003ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ffe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004000:	4b68      	ldr	r3, [pc, #416]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8004002:	2200      	movs	r2, #0
 8004004:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004006:	4b67      	ldr	r3, [pc, #412]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8004008:	2200      	movs	r2, #0
 800400a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800400c:	4865      	ldr	r0, [pc, #404]	; (80041a4 <HAL_UART_MspInit+0x290>)
 800400e:	f001 fa43 	bl	8005498 <HAL_DMA_Init>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004018:	f7ff fdb4 	bl	8003b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a61      	ldr	r2, [pc, #388]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8004020:	67da      	str	r2, [r3, #124]	; 0x7c
 8004022:	4a60      	ldr	r2, [pc, #384]	; (80041a4 <HAL_UART_MspInit+0x290>)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8004028:	4b60      	ldr	r3, [pc, #384]	; (80041ac <HAL_UART_MspInit+0x298>)
 800402a:	4a61      	ldr	r2, [pc, #388]	; (80041b0 <HAL_UART_MspInit+0x29c>)
 800402c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800402e:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <HAL_UART_MspInit+0x298>)
 8004030:	222a      	movs	r2, #42	; 0x2a
 8004032:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004034:	4b5d      	ldr	r3, [pc, #372]	; (80041ac <HAL_UART_MspInit+0x298>)
 8004036:	2240      	movs	r2, #64	; 0x40
 8004038:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800403a:	4b5c      	ldr	r3, [pc, #368]	; (80041ac <HAL_UART_MspInit+0x298>)
 800403c:	2200      	movs	r2, #0
 800403e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004040:	4b5a      	ldr	r3, [pc, #360]	; (80041ac <HAL_UART_MspInit+0x298>)
 8004042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004046:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004048:	4b58      	ldr	r3, [pc, #352]	; (80041ac <HAL_UART_MspInit+0x298>)
 800404a:	2200      	movs	r2, #0
 800404c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800404e:	4b57      	ldr	r3, [pc, #348]	; (80041ac <HAL_UART_MspInit+0x298>)
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004054:	4b55      	ldr	r3, [pc, #340]	; (80041ac <HAL_UART_MspInit+0x298>)
 8004056:	2200      	movs	r2, #0
 8004058:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800405a:	4b54      	ldr	r3, [pc, #336]	; (80041ac <HAL_UART_MspInit+0x298>)
 800405c:	2200      	movs	r2, #0
 800405e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004060:	4b52      	ldr	r3, [pc, #328]	; (80041ac <HAL_UART_MspInit+0x298>)
 8004062:	2200      	movs	r2, #0
 8004064:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004066:	4851      	ldr	r0, [pc, #324]	; (80041ac <HAL_UART_MspInit+0x298>)
 8004068:	f001 fa16 	bl	8005498 <HAL_DMA_Init>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8004072:	f7ff fd87 	bl	8003b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4c      	ldr	r2, [pc, #304]	; (80041ac <HAL_UART_MspInit+0x298>)
 800407a:	679a      	str	r2, [r3, #120]	; 0x78
 800407c:	4a4b      	ldr	r2, [pc, #300]	; (80041ac <HAL_UART_MspInit+0x298>)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004082:	2200      	movs	r2, #0
 8004084:	2100      	movs	r1, #0
 8004086:	2025      	movs	r0, #37	; 0x25
 8004088:	f001 f9d1 	bl	800542e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800408c:	2025      	movs	r0, #37	; 0x25
 800408e:	f001 f9e8 	bl	8005462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004092:	e07c      	b.n	800418e <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART2)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a46      	ldr	r2, [pc, #280]	; (80041b4 <HAL_UART_MspInit+0x2a0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d177      	bne.n	800418e <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800409e:	2302      	movs	r3, #2
 80040a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040a8:	f107 0318 	add.w	r3, r7, #24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f007 fc3b 	bl	800b928 <HAL_RCCEx_PeriphCLKConfig>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80040b8:	f7ff fd64 	bl	8003b84 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040bc:	4b37      	ldr	r3, [pc, #220]	; (800419c <HAL_UART_MspInit+0x288>)
 80040be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040c2:	4a36      	ldr	r2, [pc, #216]	; (800419c <HAL_UART_MspInit+0x288>)
 80040c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040cc:	4b33      	ldr	r3, [pc, #204]	; (800419c <HAL_UART_MspInit+0x288>)
 80040ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040da:	4b30      	ldr	r3, [pc, #192]	; (800419c <HAL_UART_MspInit+0x288>)
 80040dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e0:	4a2e      	ldr	r2, [pc, #184]	; (800419c <HAL_UART_MspInit+0x288>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040ea:	4b2c      	ldr	r3, [pc, #176]	; (800419c <HAL_UART_MspInit+0x288>)
 80040ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040f8:	230c      	movs	r3, #12
 80040fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fe:	2302      	movs	r3, #2
 8004100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410a:	2300      	movs	r3, #0
 800410c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004110:	2307      	movs	r3, #7
 8004112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004116:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800411a:	4619      	mov	r1, r3
 800411c:	4826      	ldr	r0, [pc, #152]	; (80041b8 <HAL_UART_MspInit+0x2a4>)
 800411e:	f004 f80f 	bl	8008140 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream3;
 8004122:	4b26      	ldr	r3, [pc, #152]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 8004124:	4a26      	ldr	r2, [pc, #152]	; (80041c0 <HAL_UART_MspInit+0x2ac>)
 8004126:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004128:	4b24      	ldr	r3, [pc, #144]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 800412a:	222b      	movs	r2, #43	; 0x2b
 800412c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800412e:	4b23      	ldr	r3, [pc, #140]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 8004130:	2200      	movs	r2, #0
 8004132:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004134:	4b21      	ldr	r3, [pc, #132]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 8004136:	2200      	movs	r2, #0
 8004138:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 800413a:	4b20      	ldr	r3, [pc, #128]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 800413c:	2200      	movs	r2, #0
 800413e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004140:	4b1e      	ldr	r3, [pc, #120]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 8004142:	2200      	movs	r2, #0
 8004144:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 8004148:	2200      	movs	r2, #0
 800414a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 800414e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004152:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 8004156:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800415a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 800415e:	2200      	movs	r2, #0
 8004160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004162:	4816      	ldr	r0, [pc, #88]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 8004164:	f001 f998 	bl	8005498 <HAL_DMA_Init>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800416e:	f7ff fd09 	bl	8003b84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 8004176:	67da      	str	r2, [r3, #124]	; 0x7c
 8004178:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_UART_MspInit+0x2a8>)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800417e:	2200      	movs	r2, #0
 8004180:	2100      	movs	r1, #0
 8004182:	2026      	movs	r0, #38	; 0x26
 8004184:	f001 f953 	bl	800542e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004188:	2026      	movs	r0, #38	; 0x26
 800418a:	f001 f96a 	bl	8005462 <HAL_NVIC_EnableIRQ>
}
 800418e:	bf00      	nop
 8004190:	37e8      	adds	r7, #232	; 0xe8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40011000 	.word	0x40011000
 800419c:	58024400 	.word	0x58024400
 80041a0:	58020400 	.word	0x58020400
 80041a4:	240004a8 	.word	0x240004a8
 80041a8:	40020010 	.word	0x40020010
 80041ac:	24000430 	.word	0x24000430
 80041b0:	40020040 	.word	0x40020040
 80041b4:	40004400 	.word	0x40004400
 80041b8:	58020000 	.word	0x58020000
 80041bc:	2400031c 	.word	0x2400031c
 80041c0:	40020058 	.word	0x40020058

080041c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80041c8:	e7fe      	b.n	80041c8 <NMI_Handler+0x4>

080041ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ca:	b480      	push	{r7}
 80041cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ce:	e7fe      	b.n	80041ce <HardFault_Handler+0x4>

080041d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041d4:	e7fe      	b.n	80041d4 <MemManage_Handler+0x4>

080041d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041d6:	b480      	push	{r7}
 80041d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041da:	e7fe      	b.n	80041da <BusFault_Handler+0x4>

080041dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041e0:	e7fe      	b.n	80041e0 <UsageFault_Handler+0x4>

080041e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041e2:	b480      	push	{r7}
 80041e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041fe:	b480      	push	{r7}
 8004200:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004210:	f000 ffe2 	bl	80051d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004214:	bf00      	nop
 8004216:	bd80      	pop	{r7, pc}

08004218 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800421c:	4802      	ldr	r0, [pc, #8]	; (8004228 <DMA1_Stream0_IRQHandler+0x10>)
 800421e:	f002 fc63 	bl	8006ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	240004a8 	.word	0x240004a8

0800422c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004230:	4802      	ldr	r0, [pc, #8]	; (800423c <DMA1_Stream1_IRQHandler+0x10>)
 8004232:	f002 fc59 	bl	8006ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	240005b8 	.word	0x240005b8

08004240 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <DMA1_Stream2_IRQHandler+0x10>)
 8004246:	f002 fc4f 	bl	8006ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	24000430 	.word	0x24000430

08004254 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004258:	4802      	ldr	r0, [pc, #8]	; (8004264 <DMA1_Stream3_IRQHandler+0x10>)
 800425a:	f002 fc45 	bl	8006ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2400031c 	.word	0x2400031c

08004268 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800426c:	4802      	ldr	r0, [pc, #8]	; (8004278 <TIM3_IRQHandler+0x10>)
 800426e:	f00a f9ef 	bl	800e650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	240003e4 	.word	0x240003e4

0800427c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004280:	4802      	ldr	r0, [pc, #8]	; (800428c <I2C1_EV_IRQHandler+0x10>)
 8004282:	f004 fcdd 	bl	8008c40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	24000398 	.word	0x24000398

08004290 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004294:	4802      	ldr	r0, [pc, #8]	; (80042a0 <USART1_IRQHandler+0x10>)
 8004296:	f00b fb0f 	bl	800f8b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	24000528 	.word	0x24000528

080042a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042a8:	4802      	ldr	r0, [pc, #8]	; (80042b4 <USART2_IRQHandler+0x10>)
 80042aa:	f00b fb05 	bl	800f8b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	240006bc 	.word	0x240006bc

080042b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
//			tim1_20ms_count = 0;
//			tim1_20ms_flag = 1;
//		}
//	}
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80042bc:	4802      	ldr	r0, [pc, #8]	; (80042c8 <TIM7_IRQHandler+0x10>)
 80042be:	f00a f9c7 	bl	800e650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	24000758 	.word	0x24000758

080042cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	static unsigned int tim1_2ms_count = 0;
	static unsigned int tim1_10ms_count = 0;
	static unsigned int tim1_20ms_count = 0;

	if(htim->Instance == TIM7)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d12c      	bne.n	8004338 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		tim1_2ms_count++;
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80042e6:	6013      	str	r3, [r2, #0]
		if(tim1_2ms_count == 2)
 80042e8:	4b17      	ldr	r3, [pc, #92]	; (8004348 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d105      	bne.n	80042fc <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			tim1_2ms_count = 0;
 80042f0:	4b15      	ldr	r3, [pc, #84]	; (8004348 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
			tim1_2ms_flag = 1;
 80042f6:	4b15      	ldr	r3, [pc, #84]	; (800434c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a13      	ldr	r2, [pc, #76]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004304:	6013      	str	r3, [r2, #0]
		if(tim1_10ms_count == 10)
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b0a      	cmp	r3, #10
 800430c:	d105      	bne.n	800431a <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			tim1_10ms_count = 0;
 800430e:	4b10      	ldr	r3, [pc, #64]	; (8004350 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]
			tim1_10ms_flag = 1;
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3301      	adds	r3, #1
 8004320:	4a0d      	ldr	r2, [pc, #52]	; (8004358 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004322:	6013      	str	r3, [r2, #0]
		if(tim1_20ms_count == 20)
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b14      	cmp	r3, #20
 800432a:	d105      	bne.n	8004338 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			tim1_20ms_count = 0;
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
			tim1_20ms_flag = 1;
 8004332:	4b0a      	ldr	r3, [pc, #40]	; (800435c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40001400 	.word	0x40001400
 8004348:	24000244 	.word	0x24000244
 800434c:	24000239 	.word	0x24000239
 8004350:	24000248 	.word	0x24000248
 8004354:	2400023a 	.word	0x2400023a
 8004358:	2400024c 	.word	0x2400024c
 800435c:	2400023b 	.word	0x2400023b

08004360 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a33      	ldr	r2, [pc, #204]	; (800443c <HAL_UART_RxCpltCallback+0xdc>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d103      	bne.n	800437a <HAL_UART_RxCpltCallback+0x1a>
	{
		uart1_rx_flag = 1;
 8004372:	4b33      	ldr	r3, [pc, #204]	; (8004440 <HAL_UART_RxCpltCallback+0xe0>)
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
			ibus_rx_buf[cnt]=uart2_rx_data;
			cnt++;
			break;
		}
	}
}
 8004378:	e059      	b.n	800442e <HAL_UART_RxCpltCallback+0xce>
	else if(huart->Instance == USART2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a31      	ldr	r2, [pc, #196]	; (8004444 <HAL_UART_RxCpltCallback+0xe4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d151      	bne.n	8004428 <HAL_UART_RxCpltCallback+0xc8>
		uart2_rx_flag = 1;
 8004384:	4b30      	ldr	r3, [pc, #192]	; (8004448 <HAL_UART_RxCpltCallback+0xe8>)
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 800438a:	4b30      	ldr	r3, [pc, #192]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b1f      	cmp	r3, #31
 8004390:	d02e      	beq.n	80043f0 <HAL_UART_RxCpltCallback+0x90>
 8004392:	2b1f      	cmp	r3, #31
 8004394:	dc3a      	bgt.n	800440c <HAL_UART_RxCpltCallback+0xac>
 8004396:	2b00      	cmp	r3, #0
 8004398:	d002      	beq.n	80043a0 <HAL_UART_RxCpltCallback+0x40>
 800439a:	2b01      	cmp	r3, #1
 800439c:	d012      	beq.n	80043c4 <HAL_UART_RxCpltCallback+0x64>
 800439e:	e035      	b.n	800440c <HAL_UART_RxCpltCallback+0xac>
			if(uart2_rx_data==0x20)
 80043a0:	4b2b      	ldr	r3, [pc, #172]	; (8004450 <HAL_UART_RxCpltCallback+0xf0>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d141      	bne.n	800442c <HAL_UART_RxCpltCallback+0xcc>
				ibus_rx_buf[cnt]=uart2_rx_data;
 80043a8:	4b28      	ldr	r3, [pc, #160]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <HAL_UART_RxCpltCallback+0xf0>)
 80043b0:	7819      	ldrb	r1, [r3, #0]
 80043b2:	4b28      	ldr	r3, [pc, #160]	; (8004454 <HAL_UART_RxCpltCallback+0xf4>)
 80043b4:	5499      	strb	r1, [r3, r2]
				cnt++;
 80043b6:	4b25      	ldr	r3, [pc, #148]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b23      	ldr	r3, [pc, #140]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 80043c0:	701a      	strb	r2, [r3, #0]
			break;
 80043c2:	e033      	b.n	800442c <HAL_UART_RxCpltCallback+0xcc>
			if(uart2_rx_data==0x40)
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_UART_RxCpltCallback+0xf0>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d10d      	bne.n	80043e8 <HAL_UART_RxCpltCallback+0x88>
				ibus_rx_buf[cnt]=uart2_rx_data;
 80043cc:	4b1f      	ldr	r3, [pc, #124]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <HAL_UART_RxCpltCallback+0xf0>)
 80043d4:	7819      	ldrb	r1, [r3, #0]
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <HAL_UART_RxCpltCallback+0xf4>)
 80043d8:	5499      	strb	r1, [r3, r2]
				cnt++;
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	3301      	adds	r3, #1
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	4b1a      	ldr	r3, [pc, #104]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 80043e4:	701a      	strb	r2, [r3, #0]
			break;
 80043e6:	e022      	b.n	800442e <HAL_UART_RxCpltCallback+0xce>
				cnt=0;
 80043e8:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
			break;
 80043ee:	e01e      	b.n	800442e <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 80043f0:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <HAL_UART_RxCpltCallback+0xf0>)
 80043f8:	7819      	ldrb	r1, [r3, #0]
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <HAL_UART_RxCpltCallback+0xf4>)
 80043fc:	5499      	strb	r1, [r3, r2]
			cnt=0;
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8004404:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_UART_RxCpltCallback+0xf8>)
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
			break;
 800440a:	e010      	b.n	800442e <HAL_UART_RxCpltCallback+0xce>
			ibus_rx_buf[cnt]=uart2_rx_data;
 800440c:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_UART_RxCpltCallback+0xf0>)
 8004414:	7819      	ldrb	r1, [r3, #0]
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_UART_RxCpltCallback+0xf4>)
 8004418:	5499      	strb	r1, [r3, r2]
			cnt++;
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	3301      	adds	r3, #1
 8004420:	b2da      	uxtb	r2, r3
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_UART_RxCpltCallback+0xec>)
 8004424:	701a      	strb	r2, [r3, #0]
			break;
 8004426:	e002      	b.n	800442e <HAL_UART_RxCpltCallback+0xce>
	}
 8004428:	bf00      	nop
 800442a:	e000      	b.n	800442e <HAL_UART_RxCpltCallback+0xce>
			break;
 800442c:	bf00      	nop
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40011000 	.word	0x40011000
 8004440:	2400023c 	.word	0x2400023c
 8004444:	40004400 	.word	0x40004400
 8004448:	2400023e 	.word	0x2400023e
 800444c:	24000250 	.word	0x24000250
 8004450:	2400023f 	.word	0x2400023f
 8004454:	240007a8 	.word	0x240007a8
 8004458:	24000240 	.word	0x24000240

0800445c <Receive_Command>:

void Receive_Command(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 8004460:	4b36      	ldr	r3, [pc, #216]	; (800453c <Receive_Command+0xe0>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d163      	bne.n	8004530 <Receive_Command+0xd4>
	{
		uart1_rx_flag = 0;
 8004468:	4b34      	ldr	r3, [pc, #208]	; (800453c <Receive_Command+0xe0>)
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 800446e:	4b34      	ldr	r3, [pc, #208]	; (8004540 <Receive_Command+0xe4>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	3b01      	subs	r3, #1
 8004474:	2b14      	cmp	r3, #20
 8004476:	d854      	bhi.n	8004522 <Receive_Command+0xc6>
 8004478:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <Receive_Command+0x24>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	080044d5 	.word	0x080044d5
 8004484:	080044dd 	.word	0x080044dd
 8004488:	080044e5 	.word	0x080044e5
 800448c:	080044ed 	.word	0x080044ed
 8004490:	080044f5 	.word	0x080044f5
 8004494:	080044fd 	.word	0x080044fd
 8004498:	08004523 	.word	0x08004523
 800449c:	08004523 	.word	0x08004523
 80044a0:	08004523 	.word	0x08004523
 80044a4:	08004523 	.word	0x08004523
 80044a8:	08004505 	.word	0x08004505
 80044ac:	0800450d 	.word	0x0800450d
 80044b0:	08004523 	.word	0x08004523
 80044b4:	08004523 	.word	0x08004523
 80044b8:	08004523 	.word	0x08004523
 80044bc:	08004523 	.word	0x08004523
 80044c0:	08004523 	.word	0x08004523
 80044c4:	08004523 	.word	0x08004523
 80044c8:	08004523 	.word	0x08004523
 80044cc:	08004523 	.word	0x08004523
 80044d0:	08004515 	.word	0x08004515
		{
		case 1: print_mode = 1; break; //Roll, Pitch, Yaw
 80044d4:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <Receive_Command+0xe8>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e02a      	b.n	8004532 <Receive_Command+0xd6>
		case 2: print_mode = 2; break; //Alt Raw, Alt Filt
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <Receive_Command+0xe8>)
 80044de:	2202      	movs	r2, #2
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e026      	b.n	8004532 <Receive_Command+0xd6>
		case 3: print_mode = 3; break; //Gyro
 80044e4:	4b17      	ldr	r3, [pc, #92]	; (8004544 <Receive_Command+0xe8>)
 80044e6:	2203      	movs	r2, #3
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e022      	b.n	8004532 <Receive_Command+0xd6>
		case 4: print_mode = 4; break; //Accel
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <Receive_Command+0xe8>)
 80044ee:	2204      	movs	r2, #4
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e01e      	b.n	8004532 <Receive_Command+0xd6>
		case 5: print_mode = 5; break; //Mag
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <Receive_Command+0xe8>)
 80044f6:	2205      	movs	r2, #5
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	e01a      	b.n	8004532 <Receive_Command+0xd6>
		case 6: print_mode = 6; break; //Mag_Offset
 80044fc:	4b11      	ldr	r3, [pc, #68]	; (8004544 <Receive_Command+0xe8>)
 80044fe:	2206      	movs	r2, #6
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	e016      	b.n	8004532 <Receive_Command+0xd6>
		case 11: print_mode = 11; break; //Controller Channels
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <Receive_Command+0xe8>)
 8004506:	220b      	movs	r2, #11
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e012      	b.n	8004532 <Receive_Command+0xd6>
		case 12: print_mode = 12; break; //GPS
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <Receive_Command+0xe8>)
 800450e:	220c      	movs	r2, #12
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	e00e      	b.n	8004532 <Receive_Command+0xd6>
		case 21: mag_calibration_enable = 1; print_mode = 0; break; //Mag Offset
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <Receive_Command+0xec>)
 8004516:	2201      	movs	r2, #1
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <Receive_Command+0xe8>)
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e007      	b.n	8004532 <Receive_Command+0xd6>
		default: mag_calibration_enable = 0; print_mode = 0; break; // Stop Printing
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <Receive_Command+0xec>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <Receive_Command+0xe8>)
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	e000      	b.n	8004532 <Receive_Command+0xd6>
		}
	}
 8004530:	bf00      	nop
}
 8004532:	bf00      	nop
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	2400023c 	.word	0x2400023c
 8004540:	2400023d 	.word	0x2400023d
 8004544:	2400022c 	.word	0x2400022c
 8004548:	2400022d 	.word	0x2400022d

0800454c <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
	iBus_return = 0;
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <Is_iBus_Received+0x64>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
	if(ibus_rx_cplt_flag==1)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d120      	bne.n	80045a4 <Is_iBus_Received+0x58>
	{
		ibus_rx_cplt_flag=0;
 8004562:	2300      	movs	r3, #0
 8004564:	71fb      	strb	r3, [r7, #7]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8004566:	2120      	movs	r1, #32
 8004568:	4812      	ldr	r0, [pc, #72]	; (80045b4 <Is_iBus_Received+0x68>)
 800456a:	f7fc f88d 	bl	8000688 <iBus_Check_CHKSUM>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d117      	bne.n	80045a4 <Is_iBus_Received+0x58>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004574:	4910      	ldr	r1, [pc, #64]	; (80045b8 <Is_iBus_Received+0x6c>)
 8004576:	480f      	ldr	r0, [pc, #60]	; (80045b4 <Is_iBus_Received+0x68>)
 8004578:	f7fc f8bd 	bl	80006f6 <iBus_Parsing>
//			iBus_return = 1;
			if(iBus_isActiveFailSafe(&iBus) == 1)
 800457c:	480e      	ldr	r0, [pc, #56]	; (80045b8 <Is_iBus_Received+0x6c>)
 800457e:	f7fc f976 	bl	800086e <iBus_isActiveFailSafe>
 8004582:	4603      	mov	r3, r0
 8004584:	2b01      	cmp	r3, #1
 8004586:	d105      	bne.n	8004594 <Is_iBus_Received+0x48>
			{
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8004588:	2201      	movs	r2, #1
 800458a:	2108      	movs	r1, #8
 800458c:	480b      	ldr	r0, [pc, #44]	; (80045bc <Is_iBus_Received+0x70>)
 800458e:	f003 ff87 	bl	80084a0 <HAL_GPIO_WritePin>
 8004592:	e007      	b.n	80045a4 <Is_iBus_Received+0x58>
			}
			else
			{
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8004594:	2200      	movs	r2, #0
 8004596:	2108      	movs	r1, #8
 8004598:	4808      	ldr	r0, [pc, #32]	; (80045bc <Is_iBus_Received+0x70>)
 800459a:	f003 ff81 	bl	80084a0 <HAL_GPIO_WritePin>
				iBus_return = 1;
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <Is_iBus_Received+0x64>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return iBus_return;
 80045a4:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <Is_iBus_Received+0x64>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	24000276 	.word	0x24000276
 80045b4:	240007a8 	.word	0x240007a8
 80045b8:	24000260 	.word	0x24000260
 80045bc:	58021000 	.word	0x58021000

080045c0 <Is_Throttle_Min>:

int Is_Throttle_Min(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
	iBus_return = 0;
 80045c4:	4b10      	ldr	r3, [pc, #64]	; (8004608 <Is_Throttle_Min+0x48>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
	if(ibus_rx_cplt_flag==1)
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <Is_Throttle_Min+0x4c>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d115      	bne.n	80045fe <Is_Throttle_Min+0x3e>
	{
		ibus_rx_cplt_flag=0;
 80045d2:	4b0e      	ldr	r3, [pc, #56]	; (800460c <Is_Throttle_Min+0x4c>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 80045d8:	2120      	movs	r1, #32
 80045da:	480d      	ldr	r0, [pc, #52]	; (8004610 <Is_Throttle_Min+0x50>)
 80045dc:	f7fc f854 	bl	8000688 <iBus_Check_CHKSUM>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d10b      	bne.n	80045fe <Is_Throttle_Min+0x3e>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80045e6:	490b      	ldr	r1, [pc, #44]	; (8004614 <Is_Throttle_Min+0x54>)
 80045e8:	4809      	ldr	r0, [pc, #36]	; (8004610 <Is_Throttle_Min+0x50>)
 80045ea:	f7fc f884 	bl	80006f6 <iBus_Parsing>
			if(iBus.LV < 1025) iBus_return =  1;
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <Is_Throttle_Min+0x54>)
 80045f0:	889b      	ldrh	r3, [r3, #4]
 80045f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f6:	d802      	bhi.n	80045fe <Is_Throttle_Min+0x3e>
 80045f8:	4b03      	ldr	r3, [pc, #12]	; (8004608 <Is_Throttle_Min+0x48>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
		}
	}
	return iBus_return;
 80045fe:	4b02      	ldr	r3, [pc, #8]	; (8004608 <Is_Throttle_Min+0x48>)
 8004600:	781b      	ldrb	r3, [r3, #0]
}
 8004602:	4618      	mov	r0, r3
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	24000276 	.word	0x24000276
 800460c:	24000240 	.word	0x24000240
 8004610:	240007a8 	.word	0x240007a8
 8004614:	24000260 	.word	0x24000260

08004618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
	return 1;
 800461c:	2301      	movs	r3, #1
}
 800461e:	4618      	mov	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <_kill>:

int _kill(int pid, int sig)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004632:	f00c fde9 	bl	8011208 <__errno>
 8004636:	4603      	mov	r3, r0
 8004638:	2216      	movs	r2, #22
 800463a:	601a      	str	r2, [r3, #0]
	return -1;
 800463c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <_exit>:

void _exit (int status)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004650:	f04f 31ff 	mov.w	r1, #4294967295
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff ffe7 	bl	8004628 <_kill>
	while (1) {}		/* Make sure we hang here */
 800465a:	e7fe      	b.n	800465a <_exit+0x12>

0800465c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e00a      	b.n	8004684 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800466e:	f3af 8000 	nop.w
 8004672:	4601      	mov	r1, r0
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	60ba      	str	r2, [r7, #8]
 800467a:	b2ca      	uxtb	r2, r1
 800467c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	3301      	adds	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	429a      	cmp	r2, r3
 800468a:	dbf0      	blt.n	800466e <_read+0x12>
	}

return len;
 800468c:	687b      	ldr	r3, [r7, #4]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
	return -1;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046be:	605a      	str	r2, [r3, #4]
	return 0;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <_isatty>:

int _isatty(int file)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
	return 1;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
	return 0;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <_sbrk+0x5c>)
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <_sbrk+0x60>)
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <_sbrk+0x64>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <_sbrk+0x64>)
 800471e:	4a12      	ldr	r2, [pc, #72]	; (8004768 <_sbrk+0x68>)
 8004720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <_sbrk+0x64>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	429a      	cmp	r2, r3
 800472e:	d207      	bcs.n	8004740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004730:	f00c fd6a 	bl	8011208 <__errno>
 8004734:	4603      	mov	r3, r0
 8004736:	220c      	movs	r2, #12
 8004738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800473a:	f04f 33ff 	mov.w	r3, #4294967295
 800473e:	e009      	b.n	8004754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <_sbrk+0x64>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004746:	4b07      	ldr	r3, [pc, #28]	; (8004764 <_sbrk+0x64>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <_sbrk+0x64>)
 8004750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3718      	adds	r7, #24
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	24080000 	.word	0x24080000
 8004760:	00000400 	.word	0x00000400
 8004764:	24000254 	.word	0x24000254
 8004768:	24000808 	.word	0x24000808

0800476c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004770:	4b39      	ldr	r3, [pc, #228]	; (8004858 <SystemInit+0xec>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	4a38      	ldr	r2, [pc, #224]	; (8004858 <SystemInit+0xec>)
 8004778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800477c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004780:	4b36      	ldr	r3, [pc, #216]	; (800485c <SystemInit+0xf0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	2b06      	cmp	r3, #6
 800478a:	d807      	bhi.n	800479c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800478c:	4b33      	ldr	r3, [pc, #204]	; (800485c <SystemInit+0xf0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 030f 	bic.w	r3, r3, #15
 8004794:	4a31      	ldr	r2, [pc, #196]	; (800485c <SystemInit+0xf0>)
 8004796:	f043 0307 	orr.w	r3, r3, #7
 800479a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800479c:	4b30      	ldr	r3, [pc, #192]	; (8004860 <SystemInit+0xf4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a2f      	ldr	r2, [pc, #188]	; (8004860 <SystemInit+0xf4>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047a8:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <SystemInit+0xf4>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80047ae:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <SystemInit+0xf4>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	492b      	ldr	r1, [pc, #172]	; (8004860 <SystemInit+0xf4>)
 80047b4:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <SystemInit+0xf8>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80047ba:	4b28      	ldr	r3, [pc, #160]	; (800485c <SystemInit+0xf0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80047c6:	4b25      	ldr	r3, [pc, #148]	; (800485c <SystemInit+0xf0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 030f 	bic.w	r3, r3, #15
 80047ce:	4a23      	ldr	r2, [pc, #140]	; (800485c <SystemInit+0xf0>)
 80047d0:	f043 0307 	orr.w	r3, r3, #7
 80047d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <SystemInit+0xf4>)
 80047d8:	2200      	movs	r2, #0
 80047da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80047dc:	4b20      	ldr	r3, [pc, #128]	; (8004860 <SystemInit+0xf4>)
 80047de:	2200      	movs	r2, #0
 80047e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80047e2:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <SystemInit+0xf4>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80047e8:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <SystemInit+0xf4>)
 80047ea:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <SystemInit+0xfc>)
 80047ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80047ee:	4b1c      	ldr	r3, [pc, #112]	; (8004860 <SystemInit+0xf4>)
 80047f0:	4a1e      	ldr	r2, [pc, #120]	; (800486c <SystemInit+0x100>)
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80047f4:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <SystemInit+0xf4>)
 80047f6:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <SystemInit+0x104>)
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80047fa:	4b19      	ldr	r3, [pc, #100]	; (8004860 <SystemInit+0xf4>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <SystemInit+0xf4>)
 8004802:	4a1b      	ldr	r2, [pc, #108]	; (8004870 <SystemInit+0x104>)
 8004804:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <SystemInit+0xf4>)
 8004808:	2200      	movs	r2, #0
 800480a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <SystemInit+0xf4>)
 800480e:	4a18      	ldr	r2, [pc, #96]	; (8004870 <SystemInit+0x104>)
 8004810:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004812:	4b13      	ldr	r3, [pc, #76]	; (8004860 <SystemInit+0xf4>)
 8004814:	2200      	movs	r2, #0
 8004816:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004818:	4b11      	ldr	r3, [pc, #68]	; (8004860 <SystemInit+0xf4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a10      	ldr	r2, [pc, #64]	; (8004860 <SystemInit+0xf4>)
 800481e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004824:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <SystemInit+0xf4>)
 8004826:	2200      	movs	r2, #0
 8004828:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <SystemInit+0x108>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <SystemInit+0x10c>)
 8004830:	4013      	ands	r3, r2
 8004832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004836:	d202      	bcs.n	800483e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <SystemInit+0x110>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800483e:	4b10      	ldr	r3, [pc, #64]	; (8004880 <SystemInit+0x114>)
 8004840:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004844:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004846:	4b04      	ldr	r3, [pc, #16]	; (8004858 <SystemInit+0xec>)
 8004848:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800484c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800484e:	bf00      	nop
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000ed00 	.word	0xe000ed00
 800485c:	52002000 	.word	0x52002000
 8004860:	58024400 	.word	0x58024400
 8004864:	eaf6ed7f 	.word	0xeaf6ed7f
 8004868:	02020200 	.word	0x02020200
 800486c:	01ff0000 	.word	0x01ff0000
 8004870:	01010280 	.word	0x01010280
 8004874:	5c001000 	.word	0x5c001000
 8004878:	ffff0000 	.word	0xffff0000
 800487c:	51008108 	.word	0x51008108
 8004880:	52004000 	.word	0x52004000

08004884 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af02      	add	r7, sp, #8
 800488a:	4603      	mov	r3, r0
 800488c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800488e:	f107 020f 	add.w	r2, r7, #15
 8004892:	1df9      	adds	r1, r7, #7
 8004894:	2364      	movs	r3, #100	; 0x64
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	2301      	movs	r3, #1
 800489a:	4804      	ldr	r0, [pc, #16]	; (80048ac <W25qxx_Spi+0x28>)
 800489c:	f009 f88c 	bl	800d9b8 <HAL_SPI_TransmitReceive>
	return ret;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	24000630 	.word	0x24000630

080048b0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	2300      	movs	r3, #0
 80048c0:	607b      	str	r3, [r7, #4]
 80048c2:	2300      	movs	r3, #0
 80048c4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80048c6:	2200      	movs	r2, #0
 80048c8:	2140      	movs	r1, #64	; 0x40
 80048ca:	4813      	ldr	r0, [pc, #76]	; (8004918 <W25qxx_ReadID+0x68>)
 80048cc:	f003 fde8 	bl	80084a0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80048d0:	209f      	movs	r0, #159	; 0x9f
 80048d2:	f7ff ffd7 	bl	8004884 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80048d6:	20a5      	movs	r0, #165	; 0xa5
 80048d8:	f7ff ffd4 	bl	8004884 <W25qxx_Spi>
 80048dc:	4603      	mov	r3, r0
 80048de:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80048e0:	20a5      	movs	r0, #165	; 0xa5
 80048e2:	f7ff ffcf 	bl	8004884 <W25qxx_Spi>
 80048e6:	4603      	mov	r3, r0
 80048e8:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80048ea:	20a5      	movs	r0, #165	; 0xa5
 80048ec:	f7ff ffca 	bl	8004884 <W25qxx_Spi>
 80048f0:	4603      	mov	r3, r0
 80048f2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80048f4:	2201      	movs	r2, #1
 80048f6:	2140      	movs	r1, #64	; 0x40
 80048f8:	4807      	ldr	r0, [pc, #28]	; (8004918 <W25qxx_ReadID+0x68>)
 80048fa:	f003 fdd1 	bl	80084a0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	041a      	lsls	r2, r3, #16
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	4313      	orrs	r3, r2
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800490e:	68fb      	ldr	r3, [r7, #12]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	58020400 	.word	0x58020400

0800491c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004922:	2200      	movs	r2, #0
 8004924:	2140      	movs	r1, #64	; 0x40
 8004926:	4816      	ldr	r0, [pc, #88]	; (8004980 <W25qxx_ReadUniqID+0x64>)
 8004928:	f003 fdba 	bl	80084a0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800492c:	204b      	movs	r0, #75	; 0x4b
 800492e:	f7ff ffa9 	bl	8004884 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004932:	2300      	movs	r3, #0
 8004934:	71fb      	strb	r3, [r7, #7]
 8004936:	e005      	b.n	8004944 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004938:	20a5      	movs	r0, #165	; 0xa5
 800493a:	f7ff ffa3 	bl	8004884 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	3301      	adds	r3, #1
 8004942:	71fb      	strb	r3, [r7, #7]
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d9f6      	bls.n	8004938 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	71bb      	strb	r3, [r7, #6]
 800494e:	e00b      	b.n	8004968 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004950:	79bc      	ldrb	r4, [r7, #6]
 8004952:	20a5      	movs	r0, #165	; 0xa5
 8004954:	f7ff ff96 	bl	8004884 <W25qxx_Spi>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <W25qxx_ReadUniqID+0x68>)
 800495e:	4423      	add	r3, r4
 8004960:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8004962:	79bb      	ldrb	r3, [r7, #6]
 8004964:	3301      	adds	r3, #1
 8004966:	71bb      	strb	r3, [r7, #6]
 8004968:	79bb      	ldrb	r3, [r7, #6]
 800496a:	2b07      	cmp	r3, #7
 800496c:	d9f0      	bls.n	8004950 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800496e:	2201      	movs	r2, #1
 8004970:	2140      	movs	r1, #64	; 0x40
 8004972:	4803      	ldr	r0, [pc, #12]	; (8004980 <W25qxx_ReadUniqID+0x64>)
 8004974:	f003 fd94 	bl	80084a0 <HAL_GPIO_WritePin>
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	bd90      	pop	{r4, r7, pc}
 8004980:	58020400 	.word	0x58020400
 8004984:	240007c8 	.word	0x240007c8

08004988 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800498c:	2200      	movs	r2, #0
 800498e:	2140      	movs	r1, #64	; 0x40
 8004990:	4807      	ldr	r0, [pc, #28]	; (80049b0 <W25qxx_WriteEnable+0x28>)
 8004992:	f003 fd85 	bl	80084a0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8004996:	2006      	movs	r0, #6
 8004998:	f7ff ff74 	bl	8004884 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800499c:	2201      	movs	r2, #1
 800499e:	2140      	movs	r1, #64	; 0x40
 80049a0:	4803      	ldr	r0, [pc, #12]	; (80049b0 <W25qxx_WriteEnable+0x28>)
 80049a2:	f003 fd7d 	bl	80084a0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80049a6:	2001      	movs	r0, #1
 80049a8:	f000 fc36 	bl	8005218 <HAL_Delay>
}
 80049ac:	bf00      	nop
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	58020400 	.word	0x58020400

080049b4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80049c2:	2200      	movs	r2, #0
 80049c4:	2140      	movs	r1, #64	; 0x40
 80049c6:	481c      	ldr	r0, [pc, #112]	; (8004a38 <W25qxx_ReadStatusRegister+0x84>)
 80049c8:	f003 fd6a 	bl	80084a0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d10c      	bne.n	80049ec <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80049d2:	2005      	movs	r0, #5
 80049d4:	f7ff ff56 	bl	8004884 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80049d8:	20a5      	movs	r0, #165	; 0xa5
 80049da:	f7ff ff53 	bl	8004884 <W25qxx_Spi>
 80049de:	4603      	mov	r3, r0
 80049e0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80049e2:	4a16      	ldr	r2, [pc, #88]	; (8004a3c <W25qxx_ReadStatusRegister+0x88>)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80049ea:	e01b      	b.n	8004a24 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80049ec:	79fb      	ldrb	r3, [r7, #7]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d10c      	bne.n	8004a0c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80049f2:	2035      	movs	r0, #53	; 0x35
 80049f4:	f7ff ff46 	bl	8004884 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80049f8:	20a5      	movs	r0, #165	; 0xa5
 80049fa:	f7ff ff43 	bl	8004884 <W25qxx_Spi>
 80049fe:	4603      	mov	r3, r0
 8004a00:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004a02:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <W25qxx_ReadStatusRegister+0x88>)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004a0a:	e00b      	b.n	8004a24 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004a0c:	2015      	movs	r0, #21
 8004a0e:	f7ff ff39 	bl	8004884 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a12:	20a5      	movs	r0, #165	; 0xa5
 8004a14:	f7ff ff36 	bl	8004884 <W25qxx_Spi>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004a1c:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <W25qxx_ReadStatusRegister+0x88>)
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a24:	2201      	movs	r2, #1
 8004a26:	2140      	movs	r1, #64	; 0x40
 8004a28:	4803      	ldr	r0, [pc, #12]	; (8004a38 <W25qxx_ReadStatusRegister+0x84>)
 8004a2a:	f003 fd39 	bl	80084a0 <HAL_GPIO_WritePin>
	return status;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	58020400 	.word	0x58020400
 8004a3c:	240007c8 	.word	0x240007c8

08004a40 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004a44:	2001      	movs	r0, #1
 8004a46:	f000 fbe7 	bl	8005218 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	480f      	ldr	r0, [pc, #60]	; (8004a8c <W25qxx_WaitForWriteEnd+0x4c>)
 8004a50:	f003 fd26 	bl	80084a0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004a54:	2005      	movs	r0, #5
 8004a56:	f7ff ff15 	bl	8004884 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004a5a:	20a5      	movs	r0, #165	; 0xa5
 8004a5c:	f7ff ff12 	bl	8004884 <W25qxx_Spi>
 8004a60:	4603      	mov	r3, r0
 8004a62:	461a      	mov	r2, r3
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <W25qxx_WaitForWriteEnd+0x50>)
 8004a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f000 fbd4 	bl	8005218 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <W25qxx_WaitForWriteEnd+0x50>)
 8004a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1ed      	bne.n	8004a5a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a7e:	2201      	movs	r2, #1
 8004a80:	2140      	movs	r1, #64	; 0x40
 8004a82:	4802      	ldr	r0, [pc, #8]	; (8004a8c <W25qxx_WaitForWriteEnd+0x4c>)
 8004a84:	f003 fd0c 	bl	80084a0 <HAL_GPIO_WritePin>
}
 8004a88:	bf00      	nop
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	58020400 	.word	0x58020400
 8004a90:	240007c8 	.word	0x240007c8

08004a94 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004a9a:	4b65      	ldr	r3, [pc, #404]	; (8004c30 <W25qxx_Init+0x19c>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8004aa2:	e002      	b.n	8004aaa <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	f000 fbb7 	bl	8005218 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8004aaa:	f000 fba9 	bl	8005200 <HAL_GetTick>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b63      	cmp	r3, #99	; 0x63
 8004ab2:	d9f7      	bls.n	8004aa4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	2140      	movs	r1, #64	; 0x40
 8004ab8:	485e      	ldr	r0, [pc, #376]	; (8004c34 <W25qxx_Init+0x1a0>)
 8004aba:	f003 fcf1 	bl	80084a0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004abe:	2064      	movs	r0, #100	; 0x64
 8004ac0:	f000 fbaa 	bl	8005218 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8004ac4:	f7ff fef4 	bl	80048b0 <W25qxx_ReadID>
 8004ac8:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	3b11      	subs	r3, #17
 8004ad0:	2b0f      	cmp	r3, #15
 8004ad2:	d86c      	bhi.n	8004bae <W25qxx_Init+0x11a>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <W25qxx_Init+0x48>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004ba1 	.word	0x08004ba1
 8004ae0:	08004b93 	.word	0x08004b93
 8004ae4:	08004b85 	.word	0x08004b85
 8004ae8:	08004b77 	.word	0x08004b77
 8004aec:	08004b69 	.word	0x08004b69
 8004af0:	08004b5b 	.word	0x08004b5b
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	08004b3d 	.word	0x08004b3d
 8004afc:	08004b2d 	.word	0x08004b2d
 8004b00:	08004baf 	.word	0x08004baf
 8004b04:	08004baf 	.word	0x08004baf
 8004b08:	08004baf 	.word	0x08004baf
 8004b0c:	08004baf 	.word	0x08004baf
 8004b10:	08004baf 	.word	0x08004baf
 8004b14:	08004baf 	.word	0x08004baf
 8004b18:	08004b1d 	.word	0x08004b1d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004b1c:	4b44      	ldr	r3, [pc, #272]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b1e:	220a      	movs	r2, #10
 8004b20:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004b22:	4b43      	ldr	r3, [pc, #268]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b28:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8004b2a:	e046      	b.n	8004bba <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004b2c:	4b40      	ldr	r3, [pc, #256]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b2e:	2209      	movs	r2, #9
 8004b30:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004b32:	4b3f      	ldr	r3, [pc, #252]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b38:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8004b3a:	e03e      	b.n	8004bba <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004b3c:	4b3c      	ldr	r3, [pc, #240]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b3e:	2208      	movs	r2, #8
 8004b40:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004b42:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8004b4a:	e036      	b.n	8004bba <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004b4c:	4b38      	ldr	r3, [pc, #224]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b4e:	2207      	movs	r2, #7
 8004b50:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004b52:	4b37      	ldr	r3, [pc, #220]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b54:	2280      	movs	r2, #128	; 0x80
 8004b56:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8004b58:	e02f      	b.n	8004bba <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004b5a:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b5c:	2206      	movs	r2, #6
 8004b5e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004b60:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8004b66:	e028      	b.n	8004bba <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004b68:	4b31      	ldr	r3, [pc, #196]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b6a:	2205      	movs	r2, #5
 8004b6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004b6e:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b70:	2220      	movs	r2, #32
 8004b72:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8004b74:	e021      	b.n	8004bba <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b78:	2204      	movs	r2, #4
 8004b7a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004b7c:	4b2c      	ldr	r3, [pc, #176]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b7e:	2210      	movs	r2, #16
 8004b80:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8004b82:	e01a      	b.n	8004bba <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004b84:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b86:	2203      	movs	r2, #3
 8004b88:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004b8a:	4b29      	ldr	r3, [pc, #164]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8004b90:	e013      	b.n	8004bba <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004b92:	4b27      	ldr	r3, [pc, #156]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b94:	2202      	movs	r2, #2
 8004b96:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <W25qxx_Init+0x19c>)
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8004b9e:	e00c      	b.n	8004bba <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004ba0:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <W25qxx_Init+0x19c>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004ba6:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <W25qxx_Init+0x19c>)
 8004ba8:	2202      	movs	r2, #2
 8004baa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8004bac:	e005      	b.n	8004bba <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8004bae:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e036      	b.n	8004c28 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8004bba:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bc0:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004bc2:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bc8:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004bca:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bd2:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004bd4:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	4a15      	ldr	r2, [pc, #84]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bda:	6912      	ldr	r2, [r2, #16]
 8004bdc:	fb02 f303 	mul.w	r3, r2, r3
 8004be0:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <W25qxx_Init+0x19c>)
 8004be2:	8952      	ldrh	r2, [r2, #10]
 8004be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004be8:	4a11      	ldr	r2, [pc, #68]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bea:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004bec:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	4a0f      	ldr	r2, [pc, #60]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bf4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004bf6:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	4a0d      	ldr	r2, [pc, #52]	; (8004c30 <W25qxx_Init+0x19c>)
 8004bfc:	6912      	ldr	r2, [r2, #16]
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	0a9b      	lsrs	r3, r3, #10
 8004c04:	4a0a      	ldr	r2, [pc, #40]	; (8004c30 <W25qxx_Init+0x19c>)
 8004c06:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004c08:	f7ff fe88 	bl	800491c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004c0c:	2001      	movs	r0, #1
 8004c0e:	f7ff fed1 	bl	80049b4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004c12:	2002      	movs	r0, #2
 8004c14:	f7ff fece 	bl	80049b4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004c18:	2003      	movs	r0, #3
 8004c1a:	f7ff fecb 	bl	80049b4 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8004c1e:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <W25qxx_Init+0x19c>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004c26:	2301      	movs	r3, #1
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	240007c8 	.word	0x240007c8
 8004c34:	58020400 	.word	0x58020400

08004c38 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004c40:	e002      	b.n	8004c48 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004c42:	2001      	movs	r0, #1
 8004c44:	f000 fae8 	bl	8005218 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <W25qxx_EraseSector+0xa8>)
 8004c4a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d0f7      	beq.n	8004c42 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004c52:	4b23      	ldr	r3, [pc, #140]	; (8004ce0 <W25qxx_EraseSector+0xa8>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8004c5a:	f7ff fef1 	bl	8004a40 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004c5e:	4b20      	ldr	r3, [pc, #128]	; (8004ce0 <W25qxx_EraseSector+0xa8>)
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004c6a:	f7ff fe8d 	bl	8004988 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	481c      	ldr	r0, [pc, #112]	; (8004ce4 <W25qxx_EraseSector+0xac>)
 8004c74:	f003 fc14 	bl	80084a0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <W25qxx_EraseSector+0xa8>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d909      	bls.n	8004c94 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8004c80:	2021      	movs	r0, #33	; 0x21
 8004c82:	f7ff fdff 	bl	8004884 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	0e1b      	lsrs	r3, r3, #24
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fdf9 	bl	8004884 <W25qxx_Spi>
 8004c92:	e002      	b.n	8004c9a <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004c94:	2020      	movs	r0, #32
 8004c96:	f7ff fdf5 	bl	8004884 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fdef 	bl	8004884 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0a1b      	lsrs	r3, r3, #8
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fde9 	bl	8004884 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fde4 	bl	8004884 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2140      	movs	r1, #64	; 0x40
 8004cc0:	4808      	ldr	r0, [pc, #32]	; (8004ce4 <W25qxx_EraseSector+0xac>)
 8004cc2:	f003 fbed 	bl	80084a0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004cc6:	f7ff febb 	bl	8004a40 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8004cca:	2001      	movs	r0, #1
 8004ccc:	f000 faa4 	bl	8005218 <HAL_Delay>
	w25qxx.Lock = 0;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <W25qxx_EraseSector+0xa8>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	240007c8 	.word	0x240007c8
 8004ce4:	58020400 	.word	0x58020400

08004ce8 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <W25qxx_SectorToPage+0x28>)
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	fb02 f303 	mul.w	r3, r2, r3
 8004cfa:	4a05      	ldr	r2, [pc, #20]	; (8004d10 <W25qxx_SectorToPage+0x28>)
 8004cfc:	8952      	ldrh	r2, [r2, #10]
 8004cfe:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	240007c8 	.word	0x240007c8

08004d14 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004d22:	e002      	b.n	8004d2a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004d24:	2001      	movs	r0, #1
 8004d26:	f000 fa77 	bl	8005218 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004d2a:	4b39      	ldr	r3, [pc, #228]	; (8004e10 <W25qxx_WritePage+0xfc>)
 8004d2c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d0f7      	beq.n	8004d24 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004d34:	4b36      	ldr	r3, [pc, #216]	; (8004e10 <W25qxx_WritePage+0xfc>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4413      	add	r3, r2
 8004d42:	4a33      	ldr	r2, [pc, #204]	; (8004e10 <W25qxx_WritePage+0xfc>)
 8004d44:	8952      	ldrh	r2, [r2, #10]
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d802      	bhi.n	8004d50 <W25qxx_WritePage+0x3c>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d105      	bne.n	8004d5c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004d50:	4b2f      	ldr	r3, [pc, #188]	; (8004e10 <W25qxx_WritePage+0xfc>)
 8004d52:	895b      	ldrh	r3, [r3, #10]
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	4413      	add	r3, r2
 8004d62:	4a2b      	ldr	r2, [pc, #172]	; (8004e10 <W25qxx_WritePage+0xfc>)
 8004d64:	8952      	ldrh	r2, [r2, #10]
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d905      	bls.n	8004d76 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004d6a:	4b29      	ldr	r3, [pc, #164]	; (8004e10 <W25qxx_WritePage+0xfc>)
 8004d6c:	895b      	ldrh	r3, [r3, #10]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8004d76:	f7ff fe63 	bl	8004a40 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004d7a:	f7ff fe05 	bl	8004988 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2140      	movs	r1, #64	; 0x40
 8004d82:	4824      	ldr	r0, [pc, #144]	; (8004e14 <W25qxx_WritePage+0x100>)
 8004d84:	f003 fb8c 	bl	80084a0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004d88:	4b21      	ldr	r3, [pc, #132]	; (8004e10 <W25qxx_WritePage+0xfc>)
 8004d8a:	895b      	ldrh	r3, [r3, #10]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	fb03 f302 	mul.w	r3, r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004d9a:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <W25qxx_WritePage+0xfc>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d909      	bls.n	8004db6 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8004da2:	2012      	movs	r0, #18
 8004da4:	f7ff fd6e 	bl	8004884 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	0e1b      	lsrs	r3, r3, #24
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fd68 	bl	8004884 <W25qxx_Spi>
 8004db4:	e002      	b.n	8004dbc <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004db6:	2002      	movs	r0, #2
 8004db8:	f7ff fd64 	bl	8004884 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fd5e 	bl	8004884 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fd58 	bl	8004884 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff fd53 	bl	8004884 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	b29a      	uxth	r2, r3
 8004de2:	2364      	movs	r3, #100	; 0x64
 8004de4:	68f9      	ldr	r1, [r7, #12]
 8004de6:	480c      	ldr	r0, [pc, #48]	; (8004e18 <W25qxx_WritePage+0x104>)
 8004de8:	f008 fa02 	bl	800d1f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004dec:	2201      	movs	r2, #1
 8004dee:	2140      	movs	r1, #64	; 0x40
 8004df0:	4808      	ldr	r0, [pc, #32]	; (8004e14 <W25qxx_WritePage+0x100>)
 8004df2:	f003 fb55 	bl	80084a0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004df6:	f7ff fe23 	bl	8004a40 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	f000 fa0c 	bl	8005218 <HAL_Delay>
	w25qxx.Lock = 0;
 8004e00:	4b03      	ldr	r3, [pc, #12]	; (8004e10 <W25qxx_WritePage+0xfc>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	240007c8 	.word	0x240007c8
 8004e14:	58020400 	.word	0x58020400
 8004e18:	24000630 	.word	0x24000630

08004e1c <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b088      	sub	sp, #32
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004e2a:	4b2c      	ldr	r3, [pc, #176]	; (8004edc <W25qxx_WriteSector+0xc0>)
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d802      	bhi.n	8004e3a <W25qxx_WriteSector+0x1e>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d102      	bne.n	8004e40 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004e3a:	4b28      	ldr	r3, [pc, #160]	; (8004edc <W25qxx_WriteSector+0xc0>)
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004e40:	4b26      	ldr	r3, [pc, #152]	; (8004edc <W25qxx_WriteSector+0xc0>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d243      	bcs.n	8004ed2 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	441a      	add	r2, r3
 8004e50:	4b22      	ldr	r3, [pc, #136]	; (8004edc <W25qxx_WriteSector+0xc0>)
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d905      	bls.n	8004e64 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004e58:	4b20      	ldr	r3, [pc, #128]	; (8004edc <W25qxx_WriteSector+0xc0>)
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	e001      	b.n	8004e68 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004e68:	68b8      	ldr	r0, [r7, #8]
 8004e6a:	f7ff ff3d 	bl	8004ce8 <W25qxx_SectorToPage>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <W25qxx_WriteSector+0xc0>)
 8004e72:	895b      	ldrh	r3, [r3, #10]
 8004e74:	4619      	mov	r1, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e7c:	4413      	add	r3, r2
 8004e7e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004e80:	4b16      	ldr	r3, [pc, #88]	; (8004edc <W25qxx_WriteSector+0xc0>)
 8004e82:	895b      	ldrh	r3, [r3, #10]
 8004e84:	461a      	mov	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e8c:	fb02 f201 	mul.w	r2, r2, r1
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	69f9      	ldr	r1, [r7, #28]
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7ff ff3a 	bl	8004d14 <W25qxx_WritePage>
		StartPage++;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004ea6:	4b0d      	ldr	r3, [pc, #52]	; (8004edc <W25qxx_WriteSector+0xc0>)
 8004ea8:	895b      	ldrh	r3, [r3, #10]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	1a9a      	subs	r2, r3, r2
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <W25qxx_WriteSector+0xc0>)
 8004eb8:	895b      	ldrh	r3, [r3, #10]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	dce1      	bgt.n	8004e94 <W25qxx_WriteSector+0x78>
 8004ed0:	e000      	b.n	8004ed4 <W25qxx_WriteSector+0xb8>
		return;
 8004ed2:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	240007c8 	.word	0x240007c8

08004ee0 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004eee:	e002      	b.n	8004ef6 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	f000 f991 	bl	8005218 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004ef6:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <W25qxx_ReadPage+0xf0>)
 8004ef8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d0f7      	beq.n	8004ef0 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004f00:	4b33      	ldr	r3, [pc, #204]	; (8004fd0 <W25qxx_ReadPage+0xf0>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004f08:	4b31      	ldr	r3, [pc, #196]	; (8004fd0 <W25qxx_ReadPage+0xf0>)
 8004f0a:	895b      	ldrh	r3, [r3, #10]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d802      	bhi.n	8004f1a <W25qxx_ReadPage+0x3a>
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <W25qxx_ReadPage+0xf0>)
 8004f1c:	895b      	ldrh	r3, [r3, #10]
 8004f1e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	4413      	add	r3, r2
 8004f26:	4a2a      	ldr	r2, [pc, #168]	; (8004fd0 <W25qxx_ReadPage+0xf0>)
 8004f28:	8952      	ldrh	r2, [r2, #10]
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d905      	bls.n	8004f3a <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004f2e:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <W25qxx_ReadPage+0xf0>)
 8004f30:	895b      	ldrh	r3, [r3, #10]
 8004f32:	461a      	mov	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004f3a:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <W25qxx_ReadPage+0xf0>)
 8004f3c:	895b      	ldrh	r3, [r3, #10]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	fb03 f302 	mul.w	r3, r3, r2
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2140      	movs	r1, #64	; 0x40
 8004f50:	4820      	ldr	r0, [pc, #128]	; (8004fd4 <W25qxx_ReadPage+0xf4>)
 8004f52:	f003 faa5 	bl	80084a0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004f56:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <W25qxx_ReadPage+0xf0>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b08      	cmp	r3, #8
 8004f5c:	d909      	bls.n	8004f72 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8004f5e:	200c      	movs	r0, #12
 8004f60:	f7ff fc90 	bl	8004884 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	0e1b      	lsrs	r3, r3, #24
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fc8a 	bl	8004884 <W25qxx_Spi>
 8004f70:	e002      	b.n	8004f78 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004f72:	200b      	movs	r0, #11
 8004f74:	f7ff fc86 	bl	8004884 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fc80 	bl	8004884 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fc7a 	bl	8004884 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff fc75 	bl	8004884 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7ff fc72 	bl	8004884 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	2364      	movs	r3, #100	; 0x64
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	480b      	ldr	r0, [pc, #44]	; (8004fd8 <W25qxx_ReadPage+0xf8>)
 8004faa:	f008 fb13 	bl	800d5d4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004fae:	2201      	movs	r2, #1
 8004fb0:	2140      	movs	r1, #64	; 0x40
 8004fb2:	4808      	ldr	r0, [pc, #32]	; (8004fd4 <W25qxx_ReadPage+0xf4>)
 8004fb4:	f003 fa74 	bl	80084a0 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004fb8:	2001      	movs	r0, #1
 8004fba:	f000 f92d 	bl	8005218 <HAL_Delay>
	w25qxx.Lock = 0;
 8004fbe:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <W25qxx_ReadPage+0xf0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	240007c8 	.word	0x240007c8
 8004fd4:	58020400 	.word	0x58020400
 8004fd8:	24000630 	.word	0x24000630

08004fdc <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <W25qxx_ReadSector+0xc0>)
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d802      	bhi.n	8004ffa <W25qxx_ReadSector+0x1e>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004ffa:	4b28      	ldr	r3, [pc, #160]	; (800509c <W25qxx_ReadSector+0xc0>)
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005000:	4b26      	ldr	r3, [pc, #152]	; (800509c <W25qxx_ReadSector+0xc0>)
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d243      	bcs.n	8005092 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	441a      	add	r2, r3
 8005010:	4b22      	ldr	r3, [pc, #136]	; (800509c <W25qxx_ReadSector+0xc0>)
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	429a      	cmp	r2, r3
 8005016:	d905      	bls.n	8005024 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8005018:	4b20      	ldr	r3, [pc, #128]	; (800509c <W25qxx_ReadSector+0xc0>)
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e001      	b.n	8005028 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8005028:	68b8      	ldr	r0, [r7, #8]
 800502a:	f7ff fe5d 	bl	8004ce8 <W25qxx_SectorToPage>
 800502e:	4602      	mov	r2, r0
 8005030:	4b1a      	ldr	r3, [pc, #104]	; (800509c <W25qxx_ReadSector+0xc0>)
 8005032:	895b      	ldrh	r3, [r3, #10]
 8005034:	4619      	mov	r1, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	fbb3 f3f1 	udiv	r3, r3, r1
 800503c:	4413      	add	r3, r2
 800503e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8005040:	4b16      	ldr	r3, [pc, #88]	; (800509c <W25qxx_ReadSector+0xc0>)
 8005042:	895b      	ldrh	r3, [r3, #10]
 8005044:	461a      	mov	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	fbb3 f1f2 	udiv	r1, r3, r2
 800504c:	fb02 f201 	mul.w	r2, r2, r1
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	69f9      	ldr	r1, [r7, #28]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f7ff ff40 	bl	8004ee0 <W25qxx_ReadPage>
		StartPage++;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3301      	adds	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <W25qxx_ReadSector+0xc0>)
 8005068:	895b      	ldrh	r3, [r3, #10]
 800506a:	461a      	mov	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	1a9a      	subs	r2, r3, r2
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	4413      	add	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <W25qxx_ReadSector+0xc0>)
 8005078:	895b      	ldrh	r3, [r3, #10]
 800507a:	461a      	mov	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	dce1      	bgt.n	8005054 <W25qxx_ReadSector+0x78>
 8005090:	e000      	b.n	8005094 <W25qxx_ReadSector+0xb8>
		return;
 8005092:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	240007c8 	.word	0x240007c8

080050a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80050a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80050a4:	f7ff fb62 	bl	800476c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050a8:	480c      	ldr	r0, [pc, #48]	; (80050dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80050aa:	490d      	ldr	r1, [pc, #52]	; (80050e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80050ac:	4a0d      	ldr	r2, [pc, #52]	; (80050e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80050ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050b0:	e002      	b.n	80050b8 <LoopCopyDataInit>

080050b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050b6:	3304      	adds	r3, #4

080050b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050bc:	d3f9      	bcc.n	80050b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050be:	4a0a      	ldr	r2, [pc, #40]	; (80050e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80050c0:	4c0a      	ldr	r4, [pc, #40]	; (80050ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80050c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050c4:	e001      	b.n	80050ca <LoopFillZerobss>

080050c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050c8:	3204      	adds	r2, #4

080050ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050cc:	d3fb      	bcc.n	80050c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80050ce:	f00c f8a1 	bl	8011214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050d2:	f7fd fd65 	bl	8002ba0 <main>
  bx  lr
 80050d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80050d8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80050dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80050e0:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 80050e4:	08014ae8 	.word	0x08014ae8
  ldr r2, =_sbss
 80050e8:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 80050ec:	24000804 	.word	0x24000804

080050f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050f0:	e7fe      	b.n	80050f0 <ADC3_IRQHandler>
	...

080050f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050fa:	2003      	movs	r0, #3
 80050fc:	f000 f98c 	bl	8005418 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005100:	f006 fa3c 	bl	800b57c <HAL_RCC_GetSysClockFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <HAL_Init+0x68>)
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	4913      	ldr	r1, [pc, #76]	; (8005160 <HAL_Init+0x6c>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800511e:	4b0f      	ldr	r3, [pc, #60]	; (800515c <HAL_Init+0x68>)
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	4a0e      	ldr	r2, [pc, #56]	; (8005160 <HAL_Init+0x6c>)
 8005128:	5cd3      	ldrb	r3, [r2, r3]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
 8005134:	4a0b      	ldr	r2, [pc, #44]	; (8005164 <HAL_Init+0x70>)
 8005136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005138:	4a0b      	ldr	r2, [pc, #44]	; (8005168 <HAL_Init+0x74>)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800513e:	200f      	movs	r0, #15
 8005140:	f000 f814 	bl	800516c <HAL_InitTick>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e002      	b.n	8005154 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800514e:	f7fe fd1f 	bl	8003b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	58024400 	.word	0x58024400
 8005160:	0801460c 	.word	0x0801460c
 8005164:	24000018 	.word	0x24000018
 8005168:	24000014 	.word	0x24000014

0800516c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005174:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_InitTick+0x60>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e021      	b.n	80051c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005180:	4b13      	ldr	r3, [pc, #76]	; (80051d0 <HAL_InitTick+0x64>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <HAL_InitTick+0x60>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	4619      	mov	r1, r3
 800518a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800518e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	4618      	mov	r0, r3
 8005198:	f000 f971 	bl	800547e <HAL_SYSTICK_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e00e      	b.n	80051c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b0f      	cmp	r3, #15
 80051aa:	d80a      	bhi.n	80051c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051ac:	2200      	movs	r2, #0
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	f000 f93b 	bl	800542e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051b8:	4a06      	ldr	r2, [pc, #24]	; (80051d4 <HAL_InitTick+0x68>)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	e000      	b.n	80051c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	24000020 	.word	0x24000020
 80051d0:	24000014 	.word	0x24000014
 80051d4:	2400001c 	.word	0x2400001c

080051d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <HAL_IncTick+0x20>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	461a      	mov	r2, r3
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_IncTick+0x24>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4413      	add	r3, r2
 80051e8:	4a04      	ldr	r2, [pc, #16]	; (80051fc <HAL_IncTick+0x24>)
 80051ea:	6013      	str	r3, [r2, #0]
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	24000020 	.word	0x24000020
 80051fc:	240007f0 	.word	0x240007f0

08005200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return uwTick;
 8005204:	4b03      	ldr	r3, [pc, #12]	; (8005214 <HAL_GetTick+0x14>)
 8005206:	681b      	ldr	r3, [r3, #0]
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	240007f0 	.word	0x240007f0

08005218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005220:	f7ff ffee 	bl	8005200 <HAL_GetTick>
 8005224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d005      	beq.n	800523e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_Delay+0x44>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800523e:	bf00      	nop
 8005240:	f7ff ffde 	bl	8005200 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	429a      	cmp	r2, r3
 800524e:	d8f7      	bhi.n	8005240 <HAL_Delay+0x28>
  {
  }
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	24000020 	.word	0x24000020

08005260 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <HAL_GetREVID+0x14>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	0c1b      	lsrs	r3, r3, #16
}
 800526a:	4618      	mov	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	5c001000 	.word	0x5c001000

08005278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005288:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <__NVIC_SetPriorityGrouping+0x40>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005294:	4013      	ands	r3, r2
 8005296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <__NVIC_SetPriorityGrouping+0x44>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052a6:	4a04      	ldr	r2, [pc, #16]	; (80052b8 <__NVIC_SetPriorityGrouping+0x40>)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	60d3      	str	r3, [r2, #12]
}
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000ed00 	.word	0xe000ed00
 80052bc:	05fa0000 	.word	0x05fa0000

080052c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <__NVIC_GetPriorityGrouping+0x18>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	f003 0307 	and.w	r3, r3, #7
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	e000ed00 	.word	0xe000ed00

080052dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80052e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	db0b      	blt.n	8005306 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	f003 021f 	and.w	r2, r3, #31
 80052f4:	4907      	ldr	r1, [pc, #28]	; (8005314 <__NVIC_EnableIRQ+0x38>)
 80052f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	2001      	movs	r0, #1
 80052fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	e000e100 	.word	0xe000e100

08005318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	6039      	str	r1, [r7, #0]
 8005322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005328:	2b00      	cmp	r3, #0
 800532a:	db0a      	blt.n	8005342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	490c      	ldr	r1, [pc, #48]	; (8005364 <__NVIC_SetPriority+0x4c>)
 8005332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005336:	0112      	lsls	r2, r2, #4
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	440b      	add	r3, r1
 800533c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005340:	e00a      	b.n	8005358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	b2da      	uxtb	r2, r3
 8005346:	4908      	ldr	r1, [pc, #32]	; (8005368 <__NVIC_SetPriority+0x50>)
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	3b04      	subs	r3, #4
 8005350:	0112      	lsls	r2, r2, #4
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	440b      	add	r3, r1
 8005356:	761a      	strb	r2, [r3, #24]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	e000e100 	.word	0xe000e100
 8005368:	e000ed00 	.word	0xe000ed00

0800536c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800536c:	b480      	push	{r7}
 800536e:	b089      	sub	sp, #36	; 0x24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f1c3 0307 	rsb	r3, r3, #7
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf28      	it	cs
 800538a:	2304      	movcs	r3, #4
 800538c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3304      	adds	r3, #4
 8005392:	2b06      	cmp	r3, #6
 8005394:	d902      	bls.n	800539c <NVIC_EncodePriority+0x30>
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3b03      	subs	r3, #3
 800539a:	e000      	b.n	800539e <NVIC_EncodePriority+0x32>
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a0:	f04f 32ff 	mov.w	r2, #4294967295
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43da      	mvns	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	401a      	ands	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053b4:	f04f 31ff 	mov.w	r1, #4294967295
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	43d9      	mvns	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053c4:	4313      	orrs	r3, r2
         );
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3724      	adds	r7, #36	; 0x24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3b01      	subs	r3, #1
 80053e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053e4:	d301      	bcc.n	80053ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80053e6:	2301      	movs	r3, #1
 80053e8:	e00f      	b.n	800540a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80053ea:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <SysTick_Config+0x40>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80053f2:	210f      	movs	r1, #15
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	f7ff ff8e 	bl	8005318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053fc:	4b05      	ldr	r3, [pc, #20]	; (8005414 <SysTick_Config+0x40>)
 80053fe:	2200      	movs	r2, #0
 8005400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005402:	4b04      	ldr	r3, [pc, #16]	; (8005414 <SysTick_Config+0x40>)
 8005404:	2207      	movs	r2, #7
 8005406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	e000e010 	.word	0xe000e010

08005418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ff29 	bl	8005278 <__NVIC_SetPriorityGrouping>
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b086      	sub	sp, #24
 8005432:	af00      	add	r7, sp, #0
 8005434:	4603      	mov	r3, r0
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800543c:	f7ff ff40 	bl	80052c0 <__NVIC_GetPriorityGrouping>
 8005440:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	6978      	ldr	r0, [r7, #20]
 8005448:	f7ff ff90 	bl	800536c <NVIC_EncodePriority>
 800544c:	4602      	mov	r2, r0
 800544e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff ff5f 	bl	8005318 <__NVIC_SetPriority>
}
 800545a:	bf00      	nop
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	4603      	mov	r3, r0
 800546a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800546c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff ff33 	bl	80052dc <__NVIC_EnableIRQ>
}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b082      	sub	sp, #8
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ffa4 	bl	80053d4 <SysTick_Config>
 800548c:	4603      	mov	r3, r0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80054a0:	f7ff feae 	bl	8005200 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e316      	b.n	8005ade <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a66      	ldr	r2, [pc, #408]	; (8005650 <HAL_DMA_Init+0x1b8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d04a      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a65      	ldr	r2, [pc, #404]	; (8005654 <HAL_DMA_Init+0x1bc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d045      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a63      	ldr	r2, [pc, #396]	; (8005658 <HAL_DMA_Init+0x1c0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d040      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a62      	ldr	r2, [pc, #392]	; (800565c <HAL_DMA_Init+0x1c4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d03b      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a60      	ldr	r2, [pc, #384]	; (8005660 <HAL_DMA_Init+0x1c8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d036      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a5f      	ldr	r2, [pc, #380]	; (8005664 <HAL_DMA_Init+0x1cc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d031      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a5d      	ldr	r2, [pc, #372]	; (8005668 <HAL_DMA_Init+0x1d0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02c      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a5c      	ldr	r2, [pc, #368]	; (800566c <HAL_DMA_Init+0x1d4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d027      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a5a      	ldr	r2, [pc, #360]	; (8005670 <HAL_DMA_Init+0x1d8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a59      	ldr	r2, [pc, #356]	; (8005674 <HAL_DMA_Init+0x1dc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d01d      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a57      	ldr	r2, [pc, #348]	; (8005678 <HAL_DMA_Init+0x1e0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a56      	ldr	r2, [pc, #344]	; (800567c <HAL_DMA_Init+0x1e4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a54      	ldr	r2, [pc, #336]	; (8005680 <HAL_DMA_Init+0x1e8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a53      	ldr	r2, [pc, #332]	; (8005684 <HAL_DMA_Init+0x1ec>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a51      	ldr	r2, [pc, #324]	; (8005688 <HAL_DMA_Init+0x1f0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a50      	ldr	r2, [pc, #320]	; (800568c <HAL_DMA_Init+0x1f4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <HAL_DMA_Init+0xbc>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_DMA_Init+0xbe>
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 813b 	beq.w	80057d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2202      	movs	r2, #2
 8005568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a37      	ldr	r2, [pc, #220]	; (8005650 <HAL_DMA_Init+0x1b8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d04a      	beq.n	800560c <HAL_DMA_Init+0x174>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a36      	ldr	r2, [pc, #216]	; (8005654 <HAL_DMA_Init+0x1bc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d045      	beq.n	800560c <HAL_DMA_Init+0x174>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a34      	ldr	r2, [pc, #208]	; (8005658 <HAL_DMA_Init+0x1c0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d040      	beq.n	800560c <HAL_DMA_Init+0x174>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a33      	ldr	r2, [pc, #204]	; (800565c <HAL_DMA_Init+0x1c4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d03b      	beq.n	800560c <HAL_DMA_Init+0x174>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a31      	ldr	r2, [pc, #196]	; (8005660 <HAL_DMA_Init+0x1c8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d036      	beq.n	800560c <HAL_DMA_Init+0x174>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a30      	ldr	r2, [pc, #192]	; (8005664 <HAL_DMA_Init+0x1cc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d031      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2e      	ldr	r2, [pc, #184]	; (8005668 <HAL_DMA_Init+0x1d0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d02c      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2d      	ldr	r2, [pc, #180]	; (800566c <HAL_DMA_Init+0x1d4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d027      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2b      	ldr	r2, [pc, #172]	; (8005670 <HAL_DMA_Init+0x1d8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d022      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2a      	ldr	r2, [pc, #168]	; (8005674 <HAL_DMA_Init+0x1dc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d01d      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a28      	ldr	r2, [pc, #160]	; (8005678 <HAL_DMA_Init+0x1e0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d018      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a27      	ldr	r2, [pc, #156]	; (800567c <HAL_DMA_Init+0x1e4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a25      	ldr	r2, [pc, #148]	; (8005680 <HAL_DMA_Init+0x1e8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a24      	ldr	r2, [pc, #144]	; (8005684 <HAL_DMA_Init+0x1ec>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a22      	ldr	r2, [pc, #136]	; (8005688 <HAL_DMA_Init+0x1f0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_DMA_Init+0x174>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a21      	ldr	r2, [pc, #132]	; (800568c <HAL_DMA_Init+0x1f4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <HAL_DMA_Init+0x186>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e007      	b.n	800562e <HAL_DMA_Init+0x196>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800562e:	e02f      	b.n	8005690 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005630:	f7ff fde6 	bl	8005200 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b05      	cmp	r3, #5
 800563c:	d928      	bls.n	8005690 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2203      	movs	r2, #3
 8005648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e246      	b.n	8005ade <HAL_DMA_Init+0x646>
 8005650:	40020010 	.word	0x40020010
 8005654:	40020028 	.word	0x40020028
 8005658:	40020040 	.word	0x40020040
 800565c:	40020058 	.word	0x40020058
 8005660:	40020070 	.word	0x40020070
 8005664:	40020088 	.word	0x40020088
 8005668:	400200a0 	.word	0x400200a0
 800566c:	400200b8 	.word	0x400200b8
 8005670:	40020410 	.word	0x40020410
 8005674:	40020428 	.word	0x40020428
 8005678:	40020440 	.word	0x40020440
 800567c:	40020458 	.word	0x40020458
 8005680:	40020470 	.word	0x40020470
 8005684:	40020488 	.word	0x40020488
 8005688:	400204a0 	.word	0x400204a0
 800568c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1c8      	bne.n	8005630 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4b83      	ldr	r3, [pc, #524]	; (80058b8 <HAL_DMA_Init+0x420>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80056b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d107      	bne.n	80056f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	4313      	orrs	r3, r2
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80056f4:	4b71      	ldr	r3, [pc, #452]	; (80058bc <HAL_DMA_Init+0x424>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4b71      	ldr	r3, [pc, #452]	; (80058c0 <HAL_DMA_Init+0x428>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005700:	d328      	bcc.n	8005754 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b28      	cmp	r3, #40	; 0x28
 8005708:	d903      	bls.n	8005712 <HAL_DMA_Init+0x27a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b2e      	cmp	r3, #46	; 0x2e
 8005710:	d917      	bls.n	8005742 <HAL_DMA_Init+0x2aa>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b3e      	cmp	r3, #62	; 0x3e
 8005718:	d903      	bls.n	8005722 <HAL_DMA_Init+0x28a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b42      	cmp	r3, #66	; 0x42
 8005720:	d90f      	bls.n	8005742 <HAL_DMA_Init+0x2aa>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b46      	cmp	r3, #70	; 0x46
 8005728:	d903      	bls.n	8005732 <HAL_DMA_Init+0x29a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b48      	cmp	r3, #72	; 0x48
 8005730:	d907      	bls.n	8005742 <HAL_DMA_Init+0x2aa>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b4e      	cmp	r3, #78	; 0x4e
 8005738:	d905      	bls.n	8005746 <HAL_DMA_Init+0x2ae>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b52      	cmp	r3, #82	; 0x52
 8005740:	d801      	bhi.n	8005746 <HAL_DMA_Init+0x2ae>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <HAL_DMA_Init+0x2b0>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005752:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0307 	bic.w	r3, r3, #7
 800576a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b04      	cmp	r3, #4
 800577c:	d117      	bne.n	80057ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00e      	beq.n	80057ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f002 fb4b 	bl	8007e2c <DMA_CheckFifoParam>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	; 0x40
 80057a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e197      	b.n	8005ade <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f002 fa86 	bl	8007cc8 <DMA_CalcBaseAndBitshift>
 80057bc:	4603      	mov	r3, r0
 80057be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	223f      	movs	r2, #63	; 0x3f
 80057ca:	409a      	lsls	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	e0cd      	b.n	800596e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a3b      	ldr	r2, [pc, #236]	; (80058c4 <HAL_DMA_Init+0x42c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d022      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a39      	ldr	r2, [pc, #228]	; (80058c8 <HAL_DMA_Init+0x430>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01d      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a38      	ldr	r2, [pc, #224]	; (80058cc <HAL_DMA_Init+0x434>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d018      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a36      	ldr	r2, [pc, #216]	; (80058d0 <HAL_DMA_Init+0x438>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a35      	ldr	r2, [pc, #212]	; (80058d4 <HAL_DMA_Init+0x43c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00e      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a33      	ldr	r2, [pc, #204]	; (80058d8 <HAL_DMA_Init+0x440>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a32      	ldr	r2, [pc, #200]	; (80058dc <HAL_DMA_Init+0x444>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <HAL_DMA_Init+0x448>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <HAL_DMA_Init+0x38e>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_DMA_Init+0x390>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8097 	beq.w	800595c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a24      	ldr	r2, [pc, #144]	; (80058c4 <HAL_DMA_Init+0x42c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d021      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <HAL_DMA_Init+0x430>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01c      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a21      	ldr	r2, [pc, #132]	; (80058cc <HAL_DMA_Init+0x434>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d017      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <HAL_DMA_Init+0x438>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d012      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <HAL_DMA_Init+0x43c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00d      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <HAL_DMA_Init+0x440>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d008      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <HAL_DMA_Init+0x444>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <HAL_DMA_Init+0x448>)
 800587a:	4293      	cmp	r3, r2
 800587c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <HAL_DMA_Init+0x44c>)
 800589a:	4013      	ands	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d020      	beq.n	80058e8 <HAL_DMA_Init+0x450>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b80      	cmp	r3, #128	; 0x80
 80058ac:	d102      	bne.n	80058b4 <HAL_DMA_Init+0x41c>
 80058ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058b2:	e01a      	b.n	80058ea <HAL_DMA_Init+0x452>
 80058b4:	2300      	movs	r3, #0
 80058b6:	e018      	b.n	80058ea <HAL_DMA_Init+0x452>
 80058b8:	fe10803f 	.word	0xfe10803f
 80058bc:	5c001000 	.word	0x5c001000
 80058c0:	ffff0000 	.word	0xffff0000
 80058c4:	58025408 	.word	0x58025408
 80058c8:	5802541c 	.word	0x5802541c
 80058cc:	58025430 	.word	0x58025430
 80058d0:	58025444 	.word	0x58025444
 80058d4:	58025458 	.word	0x58025458
 80058d8:	5802546c 	.word	0x5802546c
 80058dc:	58025480 	.word	0x58025480
 80058e0:	58025494 	.word	0x58025494
 80058e4:	fffe000f 	.word	0xfffe000f
 80058e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68d2      	ldr	r2, [r2, #12]
 80058ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005918:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	4b6e      	ldr	r3, [pc, #440]	; (8005ae8 <HAL_DMA_Init+0x650>)
 8005930:	4413      	add	r3, r2
 8005932:	4a6e      	ldr	r2, [pc, #440]	; (8005aec <HAL_DMA_Init+0x654>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	091b      	lsrs	r3, r3, #4
 800593a:	009a      	lsls	r2, r3, #2
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f002 f9c1 	bl	8007cc8 <DMA_CalcBaseAndBitshift>
 8005946:	4603      	mov	r3, r0
 8005948:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2201      	movs	r2, #1
 8005954:	409a      	lsls	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	e008      	b.n	800596e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2240      	movs	r2, #64	; 0x40
 8005960:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2203      	movs	r2, #3
 8005966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0b7      	b.n	8005ade <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a5f      	ldr	r2, [pc, #380]	; (8005af0 <HAL_DMA_Init+0x658>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d072      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a5d      	ldr	r2, [pc, #372]	; (8005af4 <HAL_DMA_Init+0x65c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d06d      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a5c      	ldr	r2, [pc, #368]	; (8005af8 <HAL_DMA_Init+0x660>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d068      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5a      	ldr	r2, [pc, #360]	; (8005afc <HAL_DMA_Init+0x664>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d063      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a59      	ldr	r2, [pc, #356]	; (8005b00 <HAL_DMA_Init+0x668>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d05e      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a57      	ldr	r2, [pc, #348]	; (8005b04 <HAL_DMA_Init+0x66c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d059      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a56      	ldr	r2, [pc, #344]	; (8005b08 <HAL_DMA_Init+0x670>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d054      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a54      	ldr	r2, [pc, #336]	; (8005b0c <HAL_DMA_Init+0x674>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d04f      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a53      	ldr	r2, [pc, #332]	; (8005b10 <HAL_DMA_Init+0x678>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d04a      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a51      	ldr	r2, [pc, #324]	; (8005b14 <HAL_DMA_Init+0x67c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d045      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a50      	ldr	r2, [pc, #320]	; (8005b18 <HAL_DMA_Init+0x680>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d040      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a4e      	ldr	r2, [pc, #312]	; (8005b1c <HAL_DMA_Init+0x684>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d03b      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a4d      	ldr	r2, [pc, #308]	; (8005b20 <HAL_DMA_Init+0x688>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d036      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a4b      	ldr	r2, [pc, #300]	; (8005b24 <HAL_DMA_Init+0x68c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d031      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a4a      	ldr	r2, [pc, #296]	; (8005b28 <HAL_DMA_Init+0x690>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d02c      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a48      	ldr	r2, [pc, #288]	; (8005b2c <HAL_DMA_Init+0x694>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d027      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a47      	ldr	r2, [pc, #284]	; (8005b30 <HAL_DMA_Init+0x698>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d022      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a45      	ldr	r2, [pc, #276]	; (8005b34 <HAL_DMA_Init+0x69c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01d      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a44      	ldr	r2, [pc, #272]	; (8005b38 <HAL_DMA_Init+0x6a0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d018      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a42      	ldr	r2, [pc, #264]	; (8005b3c <HAL_DMA_Init+0x6a4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a41      	ldr	r2, [pc, #260]	; (8005b40 <HAL_DMA_Init+0x6a8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00e      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a3f      	ldr	r2, [pc, #252]	; (8005b44 <HAL_DMA_Init+0x6ac>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a3e      	ldr	r2, [pc, #248]	; (8005b48 <HAL_DMA_Init+0x6b0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a3c      	ldr	r2, [pc, #240]	; (8005b4c <HAL_DMA_Init+0x6b4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d101      	bne.n	8005a62 <HAL_DMA_Init+0x5ca>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <HAL_DMA_Init+0x5cc>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d032      	beq.n	8005ace <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f002 fa5b 	bl	8007f24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d102      	bne.n	8005a7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d010      	beq.n	8005abc <HAL_DMA_Init+0x624>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d80c      	bhi.n	8005abc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f002 fad8 	bl	8008058 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	e008      	b.n	8005ace <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	a7fdabf8 	.word	0xa7fdabf8
 8005aec:	cccccccd 	.word	0xcccccccd
 8005af0:	40020010 	.word	0x40020010
 8005af4:	40020028 	.word	0x40020028
 8005af8:	40020040 	.word	0x40020040
 8005afc:	40020058 	.word	0x40020058
 8005b00:	40020070 	.word	0x40020070
 8005b04:	40020088 	.word	0x40020088
 8005b08:	400200a0 	.word	0x400200a0
 8005b0c:	400200b8 	.word	0x400200b8
 8005b10:	40020410 	.word	0x40020410
 8005b14:	40020428 	.word	0x40020428
 8005b18:	40020440 	.word	0x40020440
 8005b1c:	40020458 	.word	0x40020458
 8005b20:	40020470 	.word	0x40020470
 8005b24:	40020488 	.word	0x40020488
 8005b28:	400204a0 	.word	0x400204a0
 8005b2c:	400204b8 	.word	0x400204b8
 8005b30:	58025408 	.word	0x58025408
 8005b34:	5802541c 	.word	0x5802541c
 8005b38:	58025430 	.word	0x58025430
 8005b3c:	58025444 	.word	0x58025444
 8005b40:	58025458 	.word	0x58025458
 8005b44:	5802546c 	.word	0x5802546c
 8005b48:	58025480 	.word	0x58025480
 8005b4c:	58025494 	.word	0x58025494

08005b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e226      	b.n	8005fba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_DMA_Start_IT+0x2a>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e21f      	b.n	8005fba <HAL_DMA_Start_IT+0x46a>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	f040 820a 	bne.w	8005fa4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a68      	ldr	r2, [pc, #416]	; (8005d44 <HAL_DMA_Start_IT+0x1f4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d04a      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a66      	ldr	r2, [pc, #408]	; (8005d48 <HAL_DMA_Start_IT+0x1f8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d045      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a65      	ldr	r2, [pc, #404]	; (8005d4c <HAL_DMA_Start_IT+0x1fc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d040      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a63      	ldr	r2, [pc, #396]	; (8005d50 <HAL_DMA_Start_IT+0x200>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d03b      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a62      	ldr	r2, [pc, #392]	; (8005d54 <HAL_DMA_Start_IT+0x204>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d036      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a60      	ldr	r2, [pc, #384]	; (8005d58 <HAL_DMA_Start_IT+0x208>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d031      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a5f      	ldr	r2, [pc, #380]	; (8005d5c <HAL_DMA_Start_IT+0x20c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d02c      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a5d      	ldr	r2, [pc, #372]	; (8005d60 <HAL_DMA_Start_IT+0x210>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d027      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a5c      	ldr	r2, [pc, #368]	; (8005d64 <HAL_DMA_Start_IT+0x214>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5a      	ldr	r2, [pc, #360]	; (8005d68 <HAL_DMA_Start_IT+0x218>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01d      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a59      	ldr	r2, [pc, #356]	; (8005d6c <HAL_DMA_Start_IT+0x21c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a57      	ldr	r2, [pc, #348]	; (8005d70 <HAL_DMA_Start_IT+0x220>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a56      	ldr	r2, [pc, #344]	; (8005d74 <HAL_DMA_Start_IT+0x224>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a54      	ldr	r2, [pc, #336]	; (8005d78 <HAL_DMA_Start_IT+0x228>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a53      	ldr	r2, [pc, #332]	; (8005d7c <HAL_DMA_Start_IT+0x22c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a51      	ldr	r2, [pc, #324]	; (8005d80 <HAL_DMA_Start_IT+0x230>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d108      	bne.n	8005c50 <HAL_DMA_Start_IT+0x100>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e007      	b.n	8005c60 <HAL_DMA_Start_IT+0x110>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f001 fe82 	bl	8007970 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a34      	ldr	r2, [pc, #208]	; (8005d44 <HAL_DMA_Start_IT+0x1f4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d04a      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a33      	ldr	r2, [pc, #204]	; (8005d48 <HAL_DMA_Start_IT+0x1f8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d045      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a31      	ldr	r2, [pc, #196]	; (8005d4c <HAL_DMA_Start_IT+0x1fc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d040      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a30      	ldr	r2, [pc, #192]	; (8005d50 <HAL_DMA_Start_IT+0x200>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d03b      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a2e      	ldr	r2, [pc, #184]	; (8005d54 <HAL_DMA_Start_IT+0x204>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d036      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2d      	ldr	r2, [pc, #180]	; (8005d58 <HAL_DMA_Start_IT+0x208>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d031      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <HAL_DMA_Start_IT+0x20c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d02c      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <HAL_DMA_Start_IT+0x210>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d027      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a28      	ldr	r2, [pc, #160]	; (8005d64 <HAL_DMA_Start_IT+0x214>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d022      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a27      	ldr	r2, [pc, #156]	; (8005d68 <HAL_DMA_Start_IT+0x218>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d01d      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <HAL_DMA_Start_IT+0x21c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d018      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a24      	ldr	r2, [pc, #144]	; (8005d70 <HAL_DMA_Start_IT+0x220>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a22      	ldr	r2, [pc, #136]	; (8005d74 <HAL_DMA_Start_IT+0x224>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00e      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <HAL_DMA_Start_IT+0x228>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d009      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <HAL_DMA_Start_IT+0x22c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <HAL_DMA_Start_IT+0x230>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d101      	bne.n	8005d10 <HAL_DMA_Start_IT+0x1c0>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <HAL_DMA_Start_IT+0x1c2>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d036      	beq.n	8005d84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f023 021e 	bic.w	r2, r3, #30
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0216 	orr.w	r2, r2, #22
 8005d28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d03e      	beq.n	8005db0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0208 	orr.w	r2, r2, #8
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e035      	b.n	8005db0 <HAL_DMA_Start_IT+0x260>
 8005d44:	40020010 	.word	0x40020010
 8005d48:	40020028 	.word	0x40020028
 8005d4c:	40020040 	.word	0x40020040
 8005d50:	40020058 	.word	0x40020058
 8005d54:	40020070 	.word	0x40020070
 8005d58:	40020088 	.word	0x40020088
 8005d5c:	400200a0 	.word	0x400200a0
 8005d60:	400200b8 	.word	0x400200b8
 8005d64:	40020410 	.word	0x40020410
 8005d68:	40020428 	.word	0x40020428
 8005d6c:	40020440 	.word	0x40020440
 8005d70:	40020458 	.word	0x40020458
 8005d74:	40020470 	.word	0x40020470
 8005d78:	40020488 	.word	0x40020488
 8005d7c:	400204a0 	.word	0x400204a0
 8005d80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 020e 	bic.w	r2, r3, #14
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 020a 	orr.w	r2, r2, #10
 8005d96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0204 	orr.w	r2, r2, #4
 8005dae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a83      	ldr	r2, [pc, #524]	; (8005fc4 <HAL_DMA_Start_IT+0x474>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d072      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a82      	ldr	r2, [pc, #520]	; (8005fc8 <HAL_DMA_Start_IT+0x478>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d06d      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a80      	ldr	r2, [pc, #512]	; (8005fcc <HAL_DMA_Start_IT+0x47c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d068      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a7f      	ldr	r2, [pc, #508]	; (8005fd0 <HAL_DMA_Start_IT+0x480>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d063      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a7d      	ldr	r2, [pc, #500]	; (8005fd4 <HAL_DMA_Start_IT+0x484>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d05e      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a7c      	ldr	r2, [pc, #496]	; (8005fd8 <HAL_DMA_Start_IT+0x488>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d059      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a7a      	ldr	r2, [pc, #488]	; (8005fdc <HAL_DMA_Start_IT+0x48c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d054      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a79      	ldr	r2, [pc, #484]	; (8005fe0 <HAL_DMA_Start_IT+0x490>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04f      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a77      	ldr	r2, [pc, #476]	; (8005fe4 <HAL_DMA_Start_IT+0x494>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d04a      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a76      	ldr	r2, [pc, #472]	; (8005fe8 <HAL_DMA_Start_IT+0x498>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d045      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a74      	ldr	r2, [pc, #464]	; (8005fec <HAL_DMA_Start_IT+0x49c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d040      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a73      	ldr	r2, [pc, #460]	; (8005ff0 <HAL_DMA_Start_IT+0x4a0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d03b      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a71      	ldr	r2, [pc, #452]	; (8005ff4 <HAL_DMA_Start_IT+0x4a4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d036      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a70      	ldr	r2, [pc, #448]	; (8005ff8 <HAL_DMA_Start_IT+0x4a8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d031      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6e      	ldr	r2, [pc, #440]	; (8005ffc <HAL_DMA_Start_IT+0x4ac>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02c      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6d      	ldr	r2, [pc, #436]	; (8006000 <HAL_DMA_Start_IT+0x4b0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d027      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6b      	ldr	r2, [pc, #428]	; (8006004 <HAL_DMA_Start_IT+0x4b4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6a      	ldr	r2, [pc, #424]	; (8006008 <HAL_DMA_Start_IT+0x4b8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01d      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a68      	ldr	r2, [pc, #416]	; (800600c <HAL_DMA_Start_IT+0x4bc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a67      	ldr	r2, [pc, #412]	; (8006010 <HAL_DMA_Start_IT+0x4c0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a65      	ldr	r2, [pc, #404]	; (8006014 <HAL_DMA_Start_IT+0x4c4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a64      	ldr	r2, [pc, #400]	; (8006018 <HAL_DMA_Start_IT+0x4c8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a62      	ldr	r2, [pc, #392]	; (800601c <HAL_DMA_Start_IT+0x4cc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a61      	ldr	r2, [pc, #388]	; (8006020 <HAL_DMA_Start_IT+0x4d0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <HAL_DMA_Start_IT+0x354>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <HAL_DMA_Start_IT+0x356>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01a      	beq.n	8005ee0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ec6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ede:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a37      	ldr	r2, [pc, #220]	; (8005fc4 <HAL_DMA_Start_IT+0x474>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d04a      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a36      	ldr	r2, [pc, #216]	; (8005fc8 <HAL_DMA_Start_IT+0x478>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d045      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a34      	ldr	r2, [pc, #208]	; (8005fcc <HAL_DMA_Start_IT+0x47c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d040      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a33      	ldr	r2, [pc, #204]	; (8005fd0 <HAL_DMA_Start_IT+0x480>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d03b      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a31      	ldr	r2, [pc, #196]	; (8005fd4 <HAL_DMA_Start_IT+0x484>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d036      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a30      	ldr	r2, [pc, #192]	; (8005fd8 <HAL_DMA_Start_IT+0x488>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d031      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a2e      	ldr	r2, [pc, #184]	; (8005fdc <HAL_DMA_Start_IT+0x48c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d02c      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2d      	ldr	r2, [pc, #180]	; (8005fe0 <HAL_DMA_Start_IT+0x490>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d027      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2b      	ldr	r2, [pc, #172]	; (8005fe4 <HAL_DMA_Start_IT+0x494>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d022      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2a      	ldr	r2, [pc, #168]	; (8005fe8 <HAL_DMA_Start_IT+0x498>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d01d      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a28      	ldr	r2, [pc, #160]	; (8005fec <HAL_DMA_Start_IT+0x49c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d018      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <HAL_DMA_Start_IT+0x4a0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a25      	ldr	r2, [pc, #148]	; (8005ff4 <HAL_DMA_Start_IT+0x4a4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00e      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a24      	ldr	r2, [pc, #144]	; (8005ff8 <HAL_DMA_Start_IT+0x4a8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a22      	ldr	r2, [pc, #136]	; (8005ffc <HAL_DMA_Start_IT+0x4ac>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a21      	ldr	r2, [pc, #132]	; (8006000 <HAL_DMA_Start_IT+0x4b0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d108      	bne.n	8005f92 <HAL_DMA_Start_IT+0x442>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e012      	b.n	8005fb8 <HAL_DMA_Start_IT+0x468>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	e009      	b.n	8005fb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40020010 	.word	0x40020010
 8005fc8:	40020028 	.word	0x40020028
 8005fcc:	40020040 	.word	0x40020040
 8005fd0:	40020058 	.word	0x40020058
 8005fd4:	40020070 	.word	0x40020070
 8005fd8:	40020088 	.word	0x40020088
 8005fdc:	400200a0 	.word	0x400200a0
 8005fe0:	400200b8 	.word	0x400200b8
 8005fe4:	40020410 	.word	0x40020410
 8005fe8:	40020428 	.word	0x40020428
 8005fec:	40020440 	.word	0x40020440
 8005ff0:	40020458 	.word	0x40020458
 8005ff4:	40020470 	.word	0x40020470
 8005ff8:	40020488 	.word	0x40020488
 8005ffc:	400204a0 	.word	0x400204a0
 8006000:	400204b8 	.word	0x400204b8
 8006004:	58025408 	.word	0x58025408
 8006008:	5802541c 	.word	0x5802541c
 800600c:	58025430 	.word	0x58025430
 8006010:	58025444 	.word	0x58025444
 8006014:	58025458 	.word	0x58025458
 8006018:	5802546c 	.word	0x5802546c
 800601c:	58025480 	.word	0x58025480
 8006020:	58025494 	.word	0x58025494

08006024 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800602c:	f7ff f8e8 	bl	8005200 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e2dc      	b.n	80065f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d008      	beq.n	800605a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e2cd      	b.n	80065f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a76      	ldr	r2, [pc, #472]	; (8006238 <HAL_DMA_Abort+0x214>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04a      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a74      	ldr	r2, [pc, #464]	; (800623c <HAL_DMA_Abort+0x218>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d045      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a73      	ldr	r2, [pc, #460]	; (8006240 <HAL_DMA_Abort+0x21c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d040      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a71      	ldr	r2, [pc, #452]	; (8006244 <HAL_DMA_Abort+0x220>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d03b      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a70      	ldr	r2, [pc, #448]	; (8006248 <HAL_DMA_Abort+0x224>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d036      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a6e      	ldr	r2, [pc, #440]	; (800624c <HAL_DMA_Abort+0x228>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d031      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a6d      	ldr	r2, [pc, #436]	; (8006250 <HAL_DMA_Abort+0x22c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d02c      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a6b      	ldr	r2, [pc, #428]	; (8006254 <HAL_DMA_Abort+0x230>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d027      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a6a      	ldr	r2, [pc, #424]	; (8006258 <HAL_DMA_Abort+0x234>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d022      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a68      	ldr	r2, [pc, #416]	; (800625c <HAL_DMA_Abort+0x238>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01d      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a67      	ldr	r2, [pc, #412]	; (8006260 <HAL_DMA_Abort+0x23c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a65      	ldr	r2, [pc, #404]	; (8006264 <HAL_DMA_Abort+0x240>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a64      	ldr	r2, [pc, #400]	; (8006268 <HAL_DMA_Abort+0x244>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a62      	ldr	r2, [pc, #392]	; (800626c <HAL_DMA_Abort+0x248>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a61      	ldr	r2, [pc, #388]	; (8006270 <HAL_DMA_Abort+0x24c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a5f      	ldr	r2, [pc, #380]	; (8006274 <HAL_DMA_Abort+0x250>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d101      	bne.n	80060fe <HAL_DMA_Abort+0xda>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <HAL_DMA_Abort+0xdc>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d013      	beq.n	800612c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 021e 	bic.w	r2, r2, #30
 8006112:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006122:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e00a      	b.n	8006142 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 020e 	bic.w	r2, r2, #14
 800613a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <HAL_DMA_Abort+0x214>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d072      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3a      	ldr	r2, [pc, #232]	; (800623c <HAL_DMA_Abort+0x218>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d06d      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a39      	ldr	r2, [pc, #228]	; (8006240 <HAL_DMA_Abort+0x21c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d068      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a37      	ldr	r2, [pc, #220]	; (8006244 <HAL_DMA_Abort+0x220>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d063      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a36      	ldr	r2, [pc, #216]	; (8006248 <HAL_DMA_Abort+0x224>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d05e      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a34      	ldr	r2, [pc, #208]	; (800624c <HAL_DMA_Abort+0x228>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d059      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a33      	ldr	r2, [pc, #204]	; (8006250 <HAL_DMA_Abort+0x22c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d054      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a31      	ldr	r2, [pc, #196]	; (8006254 <HAL_DMA_Abort+0x230>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04f      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a30      	ldr	r2, [pc, #192]	; (8006258 <HAL_DMA_Abort+0x234>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d04a      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2e      	ldr	r2, [pc, #184]	; (800625c <HAL_DMA_Abort+0x238>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d045      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2d      	ldr	r2, [pc, #180]	; (8006260 <HAL_DMA_Abort+0x23c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d040      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2b      	ldr	r2, [pc, #172]	; (8006264 <HAL_DMA_Abort+0x240>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d03b      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <HAL_DMA_Abort+0x244>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d036      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a28      	ldr	r2, [pc, #160]	; (800626c <HAL_DMA_Abort+0x248>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d031      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a27      	ldr	r2, [pc, #156]	; (8006270 <HAL_DMA_Abort+0x24c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d02c      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a25      	ldr	r2, [pc, #148]	; (8006274 <HAL_DMA_Abort+0x250>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d027      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a24      	ldr	r2, [pc, #144]	; (8006278 <HAL_DMA_Abort+0x254>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a22      	ldr	r2, [pc, #136]	; (800627c <HAL_DMA_Abort+0x258>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01d      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <HAL_DMA_Abort+0x25c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <HAL_DMA_Abort+0x260>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <HAL_DMA_Abort+0x264>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1c      	ldr	r2, [pc, #112]	; (800628c <HAL_DMA_Abort+0x268>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <HAL_DMA_Abort+0x26c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a19      	ldr	r2, [pc, #100]	; (8006294 <HAL_DMA_Abort+0x270>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d132      	bne.n	8006298 <HAL_DMA_Abort+0x274>
 8006232:	2301      	movs	r3, #1
 8006234:	e031      	b.n	800629a <HAL_DMA_Abort+0x276>
 8006236:	bf00      	nop
 8006238:	40020010 	.word	0x40020010
 800623c:	40020028 	.word	0x40020028
 8006240:	40020040 	.word	0x40020040
 8006244:	40020058 	.word	0x40020058
 8006248:	40020070 	.word	0x40020070
 800624c:	40020088 	.word	0x40020088
 8006250:	400200a0 	.word	0x400200a0
 8006254:	400200b8 	.word	0x400200b8
 8006258:	40020410 	.word	0x40020410
 800625c:	40020428 	.word	0x40020428
 8006260:	40020440 	.word	0x40020440
 8006264:	40020458 	.word	0x40020458
 8006268:	40020470 	.word	0x40020470
 800626c:	40020488 	.word	0x40020488
 8006270:	400204a0 	.word	0x400204a0
 8006274:	400204b8 	.word	0x400204b8
 8006278:	58025408 	.word	0x58025408
 800627c:	5802541c 	.word	0x5802541c
 8006280:	58025430 	.word	0x58025430
 8006284:	58025444 	.word	0x58025444
 8006288:	58025458 	.word	0x58025458
 800628c:	5802546c 	.word	0x5802546c
 8006290:	58025480 	.word	0x58025480
 8006294:	58025494 	.word	0x58025494
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a6d      	ldr	r2, [pc, #436]	; (8006468 <HAL_DMA_Abort+0x444>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d04a      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a6b      	ldr	r2, [pc, #428]	; (800646c <HAL_DMA_Abort+0x448>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d045      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a6a      	ldr	r2, [pc, #424]	; (8006470 <HAL_DMA_Abort+0x44c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d040      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a68      	ldr	r2, [pc, #416]	; (8006474 <HAL_DMA_Abort+0x450>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d03b      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a67      	ldr	r2, [pc, #412]	; (8006478 <HAL_DMA_Abort+0x454>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d036      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a65      	ldr	r2, [pc, #404]	; (800647c <HAL_DMA_Abort+0x458>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d031      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a64      	ldr	r2, [pc, #400]	; (8006480 <HAL_DMA_Abort+0x45c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d02c      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a62      	ldr	r2, [pc, #392]	; (8006484 <HAL_DMA_Abort+0x460>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d027      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a61      	ldr	r2, [pc, #388]	; (8006488 <HAL_DMA_Abort+0x464>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d022      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a5f      	ldr	r2, [pc, #380]	; (800648c <HAL_DMA_Abort+0x468>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d01d      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5e      	ldr	r2, [pc, #376]	; (8006490 <HAL_DMA_Abort+0x46c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d018      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5c      	ldr	r2, [pc, #368]	; (8006494 <HAL_DMA_Abort+0x470>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d013      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a5b      	ldr	r2, [pc, #364]	; (8006498 <HAL_DMA_Abort+0x474>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00e      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a59      	ldr	r2, [pc, #356]	; (800649c <HAL_DMA_Abort+0x478>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d009      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a58      	ldr	r2, [pc, #352]	; (80064a0 <HAL_DMA_Abort+0x47c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a56      	ldr	r2, [pc, #344]	; (80064a4 <HAL_DMA_Abort+0x480>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d108      	bne.n	8006360 <HAL_DMA_Abort+0x33c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e007      	b.n	8006370 <HAL_DMA_Abort+0x34c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0201 	bic.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006370:	e013      	b.n	800639a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006372:	f7fe ff45 	bl	8005200 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b05      	cmp	r3, #5
 800637e:	d90c      	bls.n	800639a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2203      	movs	r2, #3
 8006392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e12d      	b.n	80065f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a2f      	ldr	r2, [pc, #188]	; (8006468 <HAL_DMA_Abort+0x444>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d04a      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2d      	ldr	r2, [pc, #180]	; (800646c <HAL_DMA_Abort+0x448>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d045      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2c      	ldr	r2, [pc, #176]	; (8006470 <HAL_DMA_Abort+0x44c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d040      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a2a      	ldr	r2, [pc, #168]	; (8006474 <HAL_DMA_Abort+0x450>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d03b      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a29      	ldr	r2, [pc, #164]	; (8006478 <HAL_DMA_Abort+0x454>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d036      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a27      	ldr	r2, [pc, #156]	; (800647c <HAL_DMA_Abort+0x458>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d031      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a26      	ldr	r2, [pc, #152]	; (8006480 <HAL_DMA_Abort+0x45c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d02c      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a24      	ldr	r2, [pc, #144]	; (8006484 <HAL_DMA_Abort+0x460>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d027      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a23      	ldr	r2, [pc, #140]	; (8006488 <HAL_DMA_Abort+0x464>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d022      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a21      	ldr	r2, [pc, #132]	; (800648c <HAL_DMA_Abort+0x468>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01d      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a20      	ldr	r2, [pc, #128]	; (8006490 <HAL_DMA_Abort+0x46c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <HAL_DMA_Abort+0x470>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <HAL_DMA_Abort+0x474>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1b      	ldr	r2, [pc, #108]	; (800649c <HAL_DMA_Abort+0x478>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1a      	ldr	r2, [pc, #104]	; (80064a0 <HAL_DMA_Abort+0x47c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <HAL_DMA_Abort+0x480>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d101      	bne.n	800644a <HAL_DMA_Abort+0x426>
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_DMA_Abort+0x428>
 800644a:	2300      	movs	r3, #0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d02b      	beq.n	80064a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	223f      	movs	r2, #63	; 0x3f
 8006460:	409a      	lsls	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	609a      	str	r2, [r3, #8]
 8006466:	e02a      	b.n	80064be <HAL_DMA_Abort+0x49a>
 8006468:	40020010 	.word	0x40020010
 800646c:	40020028 	.word	0x40020028
 8006470:	40020040 	.word	0x40020040
 8006474:	40020058 	.word	0x40020058
 8006478:	40020070 	.word	0x40020070
 800647c:	40020088 	.word	0x40020088
 8006480:	400200a0 	.word	0x400200a0
 8006484:	400200b8 	.word	0x400200b8
 8006488:	40020410 	.word	0x40020410
 800648c:	40020428 	.word	0x40020428
 8006490:	40020440 	.word	0x40020440
 8006494:	40020458 	.word	0x40020458
 8006498:	40020470 	.word	0x40020470
 800649c:	40020488 	.word	0x40020488
 80064a0:	400204a0 	.word	0x400204a0
 80064a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2201      	movs	r2, #1
 80064b8:	409a      	lsls	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a4f      	ldr	r2, [pc, #316]	; (8006600 <HAL_DMA_Abort+0x5dc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d072      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a4d      	ldr	r2, [pc, #308]	; (8006604 <HAL_DMA_Abort+0x5e0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d06d      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a4c      	ldr	r2, [pc, #304]	; (8006608 <HAL_DMA_Abort+0x5e4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d068      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a4a      	ldr	r2, [pc, #296]	; (800660c <HAL_DMA_Abort+0x5e8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d063      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a49      	ldr	r2, [pc, #292]	; (8006610 <HAL_DMA_Abort+0x5ec>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d05e      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a47      	ldr	r2, [pc, #284]	; (8006614 <HAL_DMA_Abort+0x5f0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d059      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a46      	ldr	r2, [pc, #280]	; (8006618 <HAL_DMA_Abort+0x5f4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d054      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a44      	ldr	r2, [pc, #272]	; (800661c <HAL_DMA_Abort+0x5f8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d04f      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a43      	ldr	r2, [pc, #268]	; (8006620 <HAL_DMA_Abort+0x5fc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d04a      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a41      	ldr	r2, [pc, #260]	; (8006624 <HAL_DMA_Abort+0x600>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d045      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a40      	ldr	r2, [pc, #256]	; (8006628 <HAL_DMA_Abort+0x604>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d040      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a3e      	ldr	r2, [pc, #248]	; (800662c <HAL_DMA_Abort+0x608>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d03b      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a3d      	ldr	r2, [pc, #244]	; (8006630 <HAL_DMA_Abort+0x60c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d036      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a3b      	ldr	r2, [pc, #236]	; (8006634 <HAL_DMA_Abort+0x610>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d031      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a3a      	ldr	r2, [pc, #232]	; (8006638 <HAL_DMA_Abort+0x614>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d02c      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a38      	ldr	r2, [pc, #224]	; (800663c <HAL_DMA_Abort+0x618>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d027      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a37      	ldr	r2, [pc, #220]	; (8006640 <HAL_DMA_Abort+0x61c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d022      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a35      	ldr	r2, [pc, #212]	; (8006644 <HAL_DMA_Abort+0x620>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01d      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a34      	ldr	r2, [pc, #208]	; (8006648 <HAL_DMA_Abort+0x624>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d018      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a32      	ldr	r2, [pc, #200]	; (800664c <HAL_DMA_Abort+0x628>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a31      	ldr	r2, [pc, #196]	; (8006650 <HAL_DMA_Abort+0x62c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a2f      	ldr	r2, [pc, #188]	; (8006654 <HAL_DMA_Abort+0x630>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a2e      	ldr	r2, [pc, #184]	; (8006658 <HAL_DMA_Abort+0x634>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a2c      	ldr	r2, [pc, #176]	; (800665c <HAL_DMA_Abort+0x638>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d101      	bne.n	80065b2 <HAL_DMA_Abort+0x58e>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <HAL_DMA_Abort+0x590>
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40020010 	.word	0x40020010
 8006604:	40020028 	.word	0x40020028
 8006608:	40020040 	.word	0x40020040
 800660c:	40020058 	.word	0x40020058
 8006610:	40020070 	.word	0x40020070
 8006614:	40020088 	.word	0x40020088
 8006618:	400200a0 	.word	0x400200a0
 800661c:	400200b8 	.word	0x400200b8
 8006620:	40020410 	.word	0x40020410
 8006624:	40020428 	.word	0x40020428
 8006628:	40020440 	.word	0x40020440
 800662c:	40020458 	.word	0x40020458
 8006630:	40020470 	.word	0x40020470
 8006634:	40020488 	.word	0x40020488
 8006638:	400204a0 	.word	0x400204a0
 800663c:	400204b8 	.word	0x400204b8
 8006640:	58025408 	.word	0x58025408
 8006644:	5802541c 	.word	0x5802541c
 8006648:	58025430 	.word	0x58025430
 800664c:	58025444 	.word	0x58025444
 8006650:	58025458 	.word	0x58025458
 8006654:	5802546c 	.word	0x5802546c
 8006658:	58025480 	.word	0x58025480
 800665c:	58025494 	.word	0x58025494

08006660 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e205      	b.n	8006a7e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d004      	beq.n	8006688 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2280      	movs	r2, #128	; 0x80
 8006682:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e1fa      	b.n	8006a7e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a8c      	ldr	r2, [pc, #560]	; (80068c0 <HAL_DMA_Abort_IT+0x260>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d04a      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a8b      	ldr	r2, [pc, #556]	; (80068c4 <HAL_DMA_Abort_IT+0x264>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d045      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a89      	ldr	r2, [pc, #548]	; (80068c8 <HAL_DMA_Abort_IT+0x268>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d040      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a88      	ldr	r2, [pc, #544]	; (80068cc <HAL_DMA_Abort_IT+0x26c>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d03b      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a86      	ldr	r2, [pc, #536]	; (80068d0 <HAL_DMA_Abort_IT+0x270>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d036      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a85      	ldr	r2, [pc, #532]	; (80068d4 <HAL_DMA_Abort_IT+0x274>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d031      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a83      	ldr	r2, [pc, #524]	; (80068d8 <HAL_DMA_Abort_IT+0x278>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d02c      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a82      	ldr	r2, [pc, #520]	; (80068dc <HAL_DMA_Abort_IT+0x27c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d027      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a80      	ldr	r2, [pc, #512]	; (80068e0 <HAL_DMA_Abort_IT+0x280>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d022      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a7f      	ldr	r2, [pc, #508]	; (80068e4 <HAL_DMA_Abort_IT+0x284>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01d      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a7d      	ldr	r2, [pc, #500]	; (80068e8 <HAL_DMA_Abort_IT+0x288>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d018      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a7c      	ldr	r2, [pc, #496]	; (80068ec <HAL_DMA_Abort_IT+0x28c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a7a      	ldr	r2, [pc, #488]	; (80068f0 <HAL_DMA_Abort_IT+0x290>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00e      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a79      	ldr	r2, [pc, #484]	; (80068f4 <HAL_DMA_Abort_IT+0x294>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a77      	ldr	r2, [pc, #476]	; (80068f8 <HAL_DMA_Abort_IT+0x298>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a76      	ldr	r2, [pc, #472]	; (80068fc <HAL_DMA_Abort_IT+0x29c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d101      	bne.n	800672c <HAL_DMA_Abort_IT+0xcc>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <HAL_DMA_Abort_IT+0xce>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d065      	beq.n	80067fe <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2204      	movs	r2, #4
 8006736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a60      	ldr	r2, [pc, #384]	; (80068c0 <HAL_DMA_Abort_IT+0x260>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d04a      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a5e      	ldr	r2, [pc, #376]	; (80068c4 <HAL_DMA_Abort_IT+0x264>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d045      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a5d      	ldr	r2, [pc, #372]	; (80068c8 <HAL_DMA_Abort_IT+0x268>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d040      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a5b      	ldr	r2, [pc, #364]	; (80068cc <HAL_DMA_Abort_IT+0x26c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d03b      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a5a      	ldr	r2, [pc, #360]	; (80068d0 <HAL_DMA_Abort_IT+0x270>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d036      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a58      	ldr	r2, [pc, #352]	; (80068d4 <HAL_DMA_Abort_IT+0x274>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d031      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a57      	ldr	r2, [pc, #348]	; (80068d8 <HAL_DMA_Abort_IT+0x278>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d02c      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a55      	ldr	r2, [pc, #340]	; (80068dc <HAL_DMA_Abort_IT+0x27c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d027      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a54      	ldr	r2, [pc, #336]	; (80068e0 <HAL_DMA_Abort_IT+0x280>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d022      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a52      	ldr	r2, [pc, #328]	; (80068e4 <HAL_DMA_Abort_IT+0x284>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d01d      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a51      	ldr	r2, [pc, #324]	; (80068e8 <HAL_DMA_Abort_IT+0x288>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d018      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a4f      	ldr	r2, [pc, #316]	; (80068ec <HAL_DMA_Abort_IT+0x28c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d013      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a4e      	ldr	r2, [pc, #312]	; (80068f0 <HAL_DMA_Abort_IT+0x290>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00e      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a4c      	ldr	r2, [pc, #304]	; (80068f4 <HAL_DMA_Abort_IT+0x294>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d009      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a4b      	ldr	r2, [pc, #300]	; (80068f8 <HAL_DMA_Abort_IT+0x298>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d004      	beq.n	80067da <HAL_DMA_Abort_IT+0x17a>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a49      	ldr	r2, [pc, #292]	; (80068fc <HAL_DMA_Abort_IT+0x29c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d108      	bne.n	80067ec <HAL_DMA_Abort_IT+0x18c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	e147      	b.n	8006a7c <HAL_DMA_Abort_IT+0x41c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0201 	bic.w	r2, r2, #1
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	e13e      	b.n	8006a7c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 020e 	bic.w	r2, r2, #14
 800680c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a2b      	ldr	r2, [pc, #172]	; (80068c0 <HAL_DMA_Abort_IT+0x260>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d04a      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a29      	ldr	r2, [pc, #164]	; (80068c4 <HAL_DMA_Abort_IT+0x264>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d045      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a28      	ldr	r2, [pc, #160]	; (80068c8 <HAL_DMA_Abort_IT+0x268>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d040      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a26      	ldr	r2, [pc, #152]	; (80068cc <HAL_DMA_Abort_IT+0x26c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d03b      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a25      	ldr	r2, [pc, #148]	; (80068d0 <HAL_DMA_Abort_IT+0x270>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d036      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a23      	ldr	r2, [pc, #140]	; (80068d4 <HAL_DMA_Abort_IT+0x274>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d031      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <HAL_DMA_Abort_IT+0x278>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d02c      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a20      	ldr	r2, [pc, #128]	; (80068dc <HAL_DMA_Abort_IT+0x27c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d027      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <HAL_DMA_Abort_IT+0x280>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d022      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <HAL_DMA_Abort_IT+0x284>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01d      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1c      	ldr	r2, [pc, #112]	; (80068e8 <HAL_DMA_Abort_IT+0x288>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d018      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a1a      	ldr	r2, [pc, #104]	; (80068ec <HAL_DMA_Abort_IT+0x28c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a19      	ldr	r2, [pc, #100]	; (80068f0 <HAL_DMA_Abort_IT+0x290>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a17      	ldr	r2, [pc, #92]	; (80068f4 <HAL_DMA_Abort_IT+0x294>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a16      	ldr	r2, [pc, #88]	; (80068f8 <HAL_DMA_Abort_IT+0x298>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_DMA_Abort_IT+0x24e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a14      	ldr	r2, [pc, #80]	; (80068fc <HAL_DMA_Abort_IT+0x29c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d128      	bne.n	8006900 <HAL_DMA_Abort_IT+0x2a0>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0201 	bic.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	e027      	b.n	8006910 <HAL_DMA_Abort_IT+0x2b0>
 80068c0:	40020010 	.word	0x40020010
 80068c4:	40020028 	.word	0x40020028
 80068c8:	40020040 	.word	0x40020040
 80068cc:	40020058 	.word	0x40020058
 80068d0:	40020070 	.word	0x40020070
 80068d4:	40020088 	.word	0x40020088
 80068d8:	400200a0 	.word	0x400200a0
 80068dc:	400200b8 	.word	0x400200b8
 80068e0:	40020410 	.word	0x40020410
 80068e4:	40020428 	.word	0x40020428
 80068e8:	40020440 	.word	0x40020440
 80068ec:	40020458 	.word	0x40020458
 80068f0:	40020470 	.word	0x40020470
 80068f4:	40020488 	.word	0x40020488
 80068f8:	400204a0 	.word	0x400204a0
 80068fc:	400204b8 	.word	0x400204b8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a5c      	ldr	r2, [pc, #368]	; (8006a88 <HAL_DMA_Abort_IT+0x428>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d072      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a5b      	ldr	r2, [pc, #364]	; (8006a8c <HAL_DMA_Abort_IT+0x42c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d06d      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a59      	ldr	r2, [pc, #356]	; (8006a90 <HAL_DMA_Abort_IT+0x430>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d068      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a58      	ldr	r2, [pc, #352]	; (8006a94 <HAL_DMA_Abort_IT+0x434>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d063      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a56      	ldr	r2, [pc, #344]	; (8006a98 <HAL_DMA_Abort_IT+0x438>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d05e      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a55      	ldr	r2, [pc, #340]	; (8006a9c <HAL_DMA_Abort_IT+0x43c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d059      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a53      	ldr	r2, [pc, #332]	; (8006aa0 <HAL_DMA_Abort_IT+0x440>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d054      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a52      	ldr	r2, [pc, #328]	; (8006aa4 <HAL_DMA_Abort_IT+0x444>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d04f      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a50      	ldr	r2, [pc, #320]	; (8006aa8 <HAL_DMA_Abort_IT+0x448>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d04a      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a4f      	ldr	r2, [pc, #316]	; (8006aac <HAL_DMA_Abort_IT+0x44c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d045      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a4d      	ldr	r2, [pc, #308]	; (8006ab0 <HAL_DMA_Abort_IT+0x450>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d040      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a4c      	ldr	r2, [pc, #304]	; (8006ab4 <HAL_DMA_Abort_IT+0x454>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d03b      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a4a      	ldr	r2, [pc, #296]	; (8006ab8 <HAL_DMA_Abort_IT+0x458>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d036      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a49      	ldr	r2, [pc, #292]	; (8006abc <HAL_DMA_Abort_IT+0x45c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d031      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a47      	ldr	r2, [pc, #284]	; (8006ac0 <HAL_DMA_Abort_IT+0x460>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d02c      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a46      	ldr	r2, [pc, #280]	; (8006ac4 <HAL_DMA_Abort_IT+0x464>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d027      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a44      	ldr	r2, [pc, #272]	; (8006ac8 <HAL_DMA_Abort_IT+0x468>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d022      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a43      	ldr	r2, [pc, #268]	; (8006acc <HAL_DMA_Abort_IT+0x46c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d01d      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a41      	ldr	r2, [pc, #260]	; (8006ad0 <HAL_DMA_Abort_IT+0x470>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d018      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a40      	ldr	r2, [pc, #256]	; (8006ad4 <HAL_DMA_Abort_IT+0x474>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d013      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a3e      	ldr	r2, [pc, #248]	; (8006ad8 <HAL_DMA_Abort_IT+0x478>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00e      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a3d      	ldr	r2, [pc, #244]	; (8006adc <HAL_DMA_Abort_IT+0x47c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d009      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a3b      	ldr	r2, [pc, #236]	; (8006ae0 <HAL_DMA_Abort_IT+0x480>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d004      	beq.n	8006a00 <HAL_DMA_Abort_IT+0x3a0>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a3a      	ldr	r2, [pc, #232]	; (8006ae4 <HAL_DMA_Abort_IT+0x484>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d101      	bne.n	8006a04 <HAL_DMA_Abort_IT+0x3a4>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <HAL_DMA_Abort_IT+0x3a6>
 8006a04:	2300      	movs	r3, #0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d028      	beq.n	8006a5c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a18:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a1e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2201      	movs	r2, #1
 8006a2a:	409a      	lsls	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a38:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00c      	beq.n	8006a5c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a50:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a5a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40020010 	.word	0x40020010
 8006a8c:	40020028 	.word	0x40020028
 8006a90:	40020040 	.word	0x40020040
 8006a94:	40020058 	.word	0x40020058
 8006a98:	40020070 	.word	0x40020070
 8006a9c:	40020088 	.word	0x40020088
 8006aa0:	400200a0 	.word	0x400200a0
 8006aa4:	400200b8 	.word	0x400200b8
 8006aa8:	40020410 	.word	0x40020410
 8006aac:	40020428 	.word	0x40020428
 8006ab0:	40020440 	.word	0x40020440
 8006ab4:	40020458 	.word	0x40020458
 8006ab8:	40020470 	.word	0x40020470
 8006abc:	40020488 	.word	0x40020488
 8006ac0:	400204a0 	.word	0x400204a0
 8006ac4:	400204b8 	.word	0x400204b8
 8006ac8:	58025408 	.word	0x58025408
 8006acc:	5802541c 	.word	0x5802541c
 8006ad0:	58025430 	.word	0x58025430
 8006ad4:	58025444 	.word	0x58025444
 8006ad8:	58025458 	.word	0x58025458
 8006adc:	5802546c 	.word	0x5802546c
 8006ae0:	58025480 	.word	0x58025480
 8006ae4:	58025494 	.word	0x58025494

08006ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006af4:	4b67      	ldr	r3, [pc, #412]	; (8006c94 <HAL_DMA_IRQHandler+0x1ac>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a67      	ldr	r2, [pc, #412]	; (8006c98 <HAL_DMA_IRQHandler+0x1b0>)
 8006afa:	fba2 2303 	umull	r2, r3, r2, r3
 8006afe:	0a9b      	lsrs	r3, r3, #10
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a5f      	ldr	r2, [pc, #380]	; (8006c9c <HAL_DMA_IRQHandler+0x1b4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d04a      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a5d      	ldr	r2, [pc, #372]	; (8006ca0 <HAL_DMA_IRQHandler+0x1b8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d045      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a5c      	ldr	r2, [pc, #368]	; (8006ca4 <HAL_DMA_IRQHandler+0x1bc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d040      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a5a      	ldr	r2, [pc, #360]	; (8006ca8 <HAL_DMA_IRQHandler+0x1c0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d03b      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a59      	ldr	r2, [pc, #356]	; (8006cac <HAL_DMA_IRQHandler+0x1c4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d036      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a57      	ldr	r2, [pc, #348]	; (8006cb0 <HAL_DMA_IRQHandler+0x1c8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d031      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a56      	ldr	r2, [pc, #344]	; (8006cb4 <HAL_DMA_IRQHandler+0x1cc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d02c      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a54      	ldr	r2, [pc, #336]	; (8006cb8 <HAL_DMA_IRQHandler+0x1d0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d027      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a53      	ldr	r2, [pc, #332]	; (8006cbc <HAL_DMA_IRQHandler+0x1d4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d022      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a51      	ldr	r2, [pc, #324]	; (8006cc0 <HAL_DMA_IRQHandler+0x1d8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d01d      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a50      	ldr	r2, [pc, #320]	; (8006cc4 <HAL_DMA_IRQHandler+0x1dc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d018      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a4e      	ldr	r2, [pc, #312]	; (8006cc8 <HAL_DMA_IRQHandler+0x1e0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d013      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a4d      	ldr	r2, [pc, #308]	; (8006ccc <HAL_DMA_IRQHandler+0x1e4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d00e      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a4b      	ldr	r2, [pc, #300]	; (8006cd0 <HAL_DMA_IRQHandler+0x1e8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d009      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a4a      	ldr	r2, [pc, #296]	; (8006cd4 <HAL_DMA_IRQHandler+0x1ec>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d004      	beq.n	8006bba <HAL_DMA_IRQHandler+0xd2>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a48      	ldr	r2, [pc, #288]	; (8006cd8 <HAL_DMA_IRQHandler+0x1f0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d101      	bne.n	8006bbe <HAL_DMA_IRQHandler+0xd6>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <HAL_DMA_IRQHandler+0xd8>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 842b 	beq.w	800741c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2208      	movs	r2, #8
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80a2 	beq.w	8006d20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a2e      	ldr	r2, [pc, #184]	; (8006c9c <HAL_DMA_IRQHandler+0x1b4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d04a      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a2d      	ldr	r2, [pc, #180]	; (8006ca0 <HAL_DMA_IRQHandler+0x1b8>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d045      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a2b      	ldr	r2, [pc, #172]	; (8006ca4 <HAL_DMA_IRQHandler+0x1bc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d040      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a2a      	ldr	r2, [pc, #168]	; (8006ca8 <HAL_DMA_IRQHandler+0x1c0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d03b      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a28      	ldr	r2, [pc, #160]	; (8006cac <HAL_DMA_IRQHandler+0x1c4>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d036      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a27      	ldr	r2, [pc, #156]	; (8006cb0 <HAL_DMA_IRQHandler+0x1c8>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d031      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a25      	ldr	r2, [pc, #148]	; (8006cb4 <HAL_DMA_IRQHandler+0x1cc>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d02c      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a24      	ldr	r2, [pc, #144]	; (8006cb8 <HAL_DMA_IRQHandler+0x1d0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d027      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a22      	ldr	r2, [pc, #136]	; (8006cbc <HAL_DMA_IRQHandler+0x1d4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d022      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a21      	ldr	r2, [pc, #132]	; (8006cc0 <HAL_DMA_IRQHandler+0x1d8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01d      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1f      	ldr	r2, [pc, #124]	; (8006cc4 <HAL_DMA_IRQHandler+0x1dc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1e      	ldr	r2, [pc, #120]	; (8006cc8 <HAL_DMA_IRQHandler+0x1e0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1c      	ldr	r2, [pc, #112]	; (8006ccc <HAL_DMA_IRQHandler+0x1e4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <HAL_DMA_IRQHandler+0x1e8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a19      	ldr	r2, [pc, #100]	; (8006cd4 <HAL_DMA_IRQHandler+0x1ec>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x194>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a18      	ldr	r2, [pc, #96]	; (8006cd8 <HAL_DMA_IRQHandler+0x1f0>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d12f      	bne.n	8006cdc <HAL_DMA_IRQHandler+0x1f4>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bf14      	ite	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	e02e      	b.n	8006cf0 <HAL_DMA_IRQHandler+0x208>
 8006c92:	bf00      	nop
 8006c94:	24000014 	.word	0x24000014
 8006c98:	1b4e81b5 	.word	0x1b4e81b5
 8006c9c:	40020010 	.word	0x40020010
 8006ca0:	40020028 	.word	0x40020028
 8006ca4:	40020040 	.word	0x40020040
 8006ca8:	40020058 	.word	0x40020058
 8006cac:	40020070 	.word	0x40020070
 8006cb0:	40020088 	.word	0x40020088
 8006cb4:	400200a0 	.word	0x400200a0
 8006cb8:	400200b8 	.word	0x400200b8
 8006cbc:	40020410 	.word	0x40020410
 8006cc0:	40020428 	.word	0x40020428
 8006cc4:	40020440 	.word	0x40020440
 8006cc8:	40020458 	.word	0x40020458
 8006ccc:	40020470 	.word	0x40020470
 8006cd0:	40020488 	.word	0x40020488
 8006cd4:	400204a0 	.word	0x400204a0
 8006cd8:	400204b8 	.word	0x400204b8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bf14      	ite	ne
 8006cea:	2301      	movne	r3, #1
 8006cec:	2300      	moveq	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d015      	beq.n	8006d20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0204 	bic.w	r2, r2, #4
 8006d02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d08:	f003 031f 	and.w	r3, r3, #31
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d18:	f043 0201 	orr.w	r2, r3, #1
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d24:	f003 031f 	and.w	r3, r3, #31
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d06e      	beq.n	8006e14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a69      	ldr	r2, [pc, #420]	; (8006ee0 <HAL_DMA_IRQHandler+0x3f8>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d04a      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a67      	ldr	r2, [pc, #412]	; (8006ee4 <HAL_DMA_IRQHandler+0x3fc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d045      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a66      	ldr	r2, [pc, #408]	; (8006ee8 <HAL_DMA_IRQHandler+0x400>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d040      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a64      	ldr	r2, [pc, #400]	; (8006eec <HAL_DMA_IRQHandler+0x404>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d03b      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a63      	ldr	r2, [pc, #396]	; (8006ef0 <HAL_DMA_IRQHandler+0x408>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d036      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a61      	ldr	r2, [pc, #388]	; (8006ef4 <HAL_DMA_IRQHandler+0x40c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d031      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a60      	ldr	r2, [pc, #384]	; (8006ef8 <HAL_DMA_IRQHandler+0x410>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d02c      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a5e      	ldr	r2, [pc, #376]	; (8006efc <HAL_DMA_IRQHandler+0x414>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d027      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a5d      	ldr	r2, [pc, #372]	; (8006f00 <HAL_DMA_IRQHandler+0x418>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d022      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a5b      	ldr	r2, [pc, #364]	; (8006f04 <HAL_DMA_IRQHandler+0x41c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d01d      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a5a      	ldr	r2, [pc, #360]	; (8006f08 <HAL_DMA_IRQHandler+0x420>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d018      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a58      	ldr	r2, [pc, #352]	; (8006f0c <HAL_DMA_IRQHandler+0x424>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d013      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a57      	ldr	r2, [pc, #348]	; (8006f10 <HAL_DMA_IRQHandler+0x428>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00e      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a55      	ldr	r2, [pc, #340]	; (8006f14 <HAL_DMA_IRQHandler+0x42c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a54      	ldr	r2, [pc, #336]	; (8006f18 <HAL_DMA_IRQHandler+0x430>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0x2ee>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a52      	ldr	r2, [pc, #328]	; (8006f1c <HAL_DMA_IRQHandler+0x434>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d10a      	bne.n	8006dec <HAL_DMA_IRQHandler+0x304>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	bf14      	ite	ne
 8006de4:	2301      	movne	r3, #1
 8006de6:	2300      	moveq	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	e003      	b.n	8006df4 <HAL_DMA_IRQHandler+0x30c>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00d      	beq.n	8006e14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfc:	f003 031f 	and.w	r3, r3, #31
 8006e00:	2201      	movs	r2, #1
 8006e02:	409a      	lsls	r2, r3
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0c:	f043 0202 	orr.w	r2, r3, #2
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e18:	f003 031f 	and.w	r3, r3, #31
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	409a      	lsls	r2, r3
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	4013      	ands	r3, r2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 808f 	beq.w	8006f48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a2c      	ldr	r2, [pc, #176]	; (8006ee0 <HAL_DMA_IRQHandler+0x3f8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d04a      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a2a      	ldr	r2, [pc, #168]	; (8006ee4 <HAL_DMA_IRQHandler+0x3fc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d045      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a29      	ldr	r2, [pc, #164]	; (8006ee8 <HAL_DMA_IRQHandler+0x400>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d040      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a27      	ldr	r2, [pc, #156]	; (8006eec <HAL_DMA_IRQHandler+0x404>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d03b      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a26      	ldr	r2, [pc, #152]	; (8006ef0 <HAL_DMA_IRQHandler+0x408>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d036      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a24      	ldr	r2, [pc, #144]	; (8006ef4 <HAL_DMA_IRQHandler+0x40c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d031      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a23      	ldr	r2, [pc, #140]	; (8006ef8 <HAL_DMA_IRQHandler+0x410>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d02c      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a21      	ldr	r2, [pc, #132]	; (8006efc <HAL_DMA_IRQHandler+0x414>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d027      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a20      	ldr	r2, [pc, #128]	; (8006f00 <HAL_DMA_IRQHandler+0x418>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d022      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a1e      	ldr	r2, [pc, #120]	; (8006f04 <HAL_DMA_IRQHandler+0x41c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d01d      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a1d      	ldr	r2, [pc, #116]	; (8006f08 <HAL_DMA_IRQHandler+0x420>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d018      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1b      	ldr	r2, [pc, #108]	; (8006f0c <HAL_DMA_IRQHandler+0x424>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d013      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1a      	ldr	r2, [pc, #104]	; (8006f10 <HAL_DMA_IRQHandler+0x428>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a18      	ldr	r2, [pc, #96]	; (8006f14 <HAL_DMA_IRQHandler+0x42c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d009      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <HAL_DMA_IRQHandler+0x430>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <HAL_DMA_IRQHandler+0x3e2>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <HAL_DMA_IRQHandler+0x434>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d12a      	bne.n	8006f20 <HAL_DMA_IRQHandler+0x438>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf14      	ite	ne
 8006ed8:	2301      	movne	r3, #1
 8006eda:	2300      	moveq	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	e023      	b.n	8006f28 <HAL_DMA_IRQHandler+0x440>
 8006ee0:	40020010 	.word	0x40020010
 8006ee4:	40020028 	.word	0x40020028
 8006ee8:	40020040 	.word	0x40020040
 8006eec:	40020058 	.word	0x40020058
 8006ef0:	40020070 	.word	0x40020070
 8006ef4:	40020088 	.word	0x40020088
 8006ef8:	400200a0 	.word	0x400200a0
 8006efc:	400200b8 	.word	0x400200b8
 8006f00:	40020410 	.word	0x40020410
 8006f04:	40020428 	.word	0x40020428
 8006f08:	40020440 	.word	0x40020440
 8006f0c:	40020458 	.word	0x40020458
 8006f10:	40020470 	.word	0x40020470
 8006f14:	40020488 	.word	0x40020488
 8006f18:	400204a0 	.word	0x400204a0
 8006f1c:	400204b8 	.word	0x400204b8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2300      	movs	r3, #0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00d      	beq.n	8006f48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2204      	movs	r2, #4
 8006f36:	409a      	lsls	r2, r3
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f40:	f043 0204 	orr.w	r2, r3, #4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2210      	movs	r2, #16
 8006f52:	409a      	lsls	r2, r3
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80a6 	beq.w	80070aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a85      	ldr	r2, [pc, #532]	; (8007178 <HAL_DMA_IRQHandler+0x690>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d04a      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a83      	ldr	r2, [pc, #524]	; (800717c <HAL_DMA_IRQHandler+0x694>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d045      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a82      	ldr	r2, [pc, #520]	; (8007180 <HAL_DMA_IRQHandler+0x698>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d040      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a80      	ldr	r2, [pc, #512]	; (8007184 <HAL_DMA_IRQHandler+0x69c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d03b      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a7f      	ldr	r2, [pc, #508]	; (8007188 <HAL_DMA_IRQHandler+0x6a0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d036      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a7d      	ldr	r2, [pc, #500]	; (800718c <HAL_DMA_IRQHandler+0x6a4>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d031      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a7c      	ldr	r2, [pc, #496]	; (8007190 <HAL_DMA_IRQHandler+0x6a8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d02c      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a7a      	ldr	r2, [pc, #488]	; (8007194 <HAL_DMA_IRQHandler+0x6ac>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d027      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a79      	ldr	r2, [pc, #484]	; (8007198 <HAL_DMA_IRQHandler+0x6b0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d022      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a77      	ldr	r2, [pc, #476]	; (800719c <HAL_DMA_IRQHandler+0x6b4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d01d      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a76      	ldr	r2, [pc, #472]	; (80071a0 <HAL_DMA_IRQHandler+0x6b8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d018      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a74      	ldr	r2, [pc, #464]	; (80071a4 <HAL_DMA_IRQHandler+0x6bc>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d013      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a73      	ldr	r2, [pc, #460]	; (80071a8 <HAL_DMA_IRQHandler+0x6c0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d00e      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a71      	ldr	r2, [pc, #452]	; (80071ac <HAL_DMA_IRQHandler+0x6c4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a70      	ldr	r2, [pc, #448]	; (80071b0 <HAL_DMA_IRQHandler+0x6c8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x516>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a6e      	ldr	r2, [pc, #440]	; (80071b4 <HAL_DMA_IRQHandler+0x6cc>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d10a      	bne.n	8007014 <HAL_DMA_IRQHandler+0x52c>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0308 	and.w	r3, r3, #8
 8007008:	2b00      	cmp	r3, #0
 800700a:	bf14      	ite	ne
 800700c:	2301      	movne	r3, #1
 800700e:	2300      	moveq	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	e009      	b.n	8007028 <HAL_DMA_IRQHandler+0x540>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	bf14      	ite	ne
 8007022:	2301      	movne	r3, #1
 8007024:	2300      	moveq	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d03e      	beq.n	80070aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	2210      	movs	r2, #16
 8007036:	409a      	lsls	r2, r3
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d018      	beq.n	800707c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d108      	bne.n	800706a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d024      	beq.n	80070aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	4798      	blx	r3
 8007068:	e01f      	b.n	80070aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706e:	2b00      	cmp	r3, #0
 8007070:	d01b      	beq.n	80070aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
 800707a:	e016      	b.n	80070aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007086:	2b00      	cmp	r3, #0
 8007088:	d107      	bne.n	800709a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0208 	bic.w	r2, r2, #8
 8007098:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	2220      	movs	r2, #32
 80070b4:	409a      	lsls	r2, r3
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	4013      	ands	r3, r2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 8110 	beq.w	80072e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a2c      	ldr	r2, [pc, #176]	; (8007178 <HAL_DMA_IRQHandler+0x690>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d04a      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a2b      	ldr	r2, [pc, #172]	; (800717c <HAL_DMA_IRQHandler+0x694>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d045      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a29      	ldr	r2, [pc, #164]	; (8007180 <HAL_DMA_IRQHandler+0x698>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d040      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a28      	ldr	r2, [pc, #160]	; (8007184 <HAL_DMA_IRQHandler+0x69c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d03b      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a26      	ldr	r2, [pc, #152]	; (8007188 <HAL_DMA_IRQHandler+0x6a0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d036      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a25      	ldr	r2, [pc, #148]	; (800718c <HAL_DMA_IRQHandler+0x6a4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d031      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a23      	ldr	r2, [pc, #140]	; (8007190 <HAL_DMA_IRQHandler+0x6a8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d02c      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a22      	ldr	r2, [pc, #136]	; (8007194 <HAL_DMA_IRQHandler+0x6ac>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d027      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a20      	ldr	r2, [pc, #128]	; (8007198 <HAL_DMA_IRQHandler+0x6b0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a1f      	ldr	r2, [pc, #124]	; (800719c <HAL_DMA_IRQHandler+0x6b4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d01d      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a1d      	ldr	r2, [pc, #116]	; (80071a0 <HAL_DMA_IRQHandler+0x6b8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <HAL_DMA_IRQHandler+0x6bc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a1a      	ldr	r2, [pc, #104]	; (80071a8 <HAL_DMA_IRQHandler+0x6c0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a19      	ldr	r2, [pc, #100]	; (80071ac <HAL_DMA_IRQHandler+0x6c4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a17      	ldr	r2, [pc, #92]	; (80071b0 <HAL_DMA_IRQHandler+0x6c8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_DMA_IRQHandler+0x678>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a16      	ldr	r2, [pc, #88]	; (80071b4 <HAL_DMA_IRQHandler+0x6cc>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d12b      	bne.n	80071b8 <HAL_DMA_IRQHandler+0x6d0>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b00      	cmp	r3, #0
 800716c:	bf14      	ite	ne
 800716e:	2301      	movne	r3, #1
 8007170:	2300      	moveq	r3, #0
 8007172:	b2db      	uxtb	r3, r3
 8007174:	e02a      	b.n	80071cc <HAL_DMA_IRQHandler+0x6e4>
 8007176:	bf00      	nop
 8007178:	40020010 	.word	0x40020010
 800717c:	40020028 	.word	0x40020028
 8007180:	40020040 	.word	0x40020040
 8007184:	40020058 	.word	0x40020058
 8007188:	40020070 	.word	0x40020070
 800718c:	40020088 	.word	0x40020088
 8007190:	400200a0 	.word	0x400200a0
 8007194:	400200b8 	.word	0x400200b8
 8007198:	40020410 	.word	0x40020410
 800719c:	40020428 	.word	0x40020428
 80071a0:	40020440 	.word	0x40020440
 80071a4:	40020458 	.word	0x40020458
 80071a8:	40020470 	.word	0x40020470
 80071ac:	40020488 	.word	0x40020488
 80071b0:	400204a0 	.word	0x400204a0
 80071b4:	400204b8 	.word	0x400204b8
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf14      	ite	ne
 80071c6:	2301      	movne	r3, #1
 80071c8:	2300      	moveq	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 8087 	beq.w	80072e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d6:	f003 031f 	and.w	r3, r3, #31
 80071da:	2220      	movs	r2, #32
 80071dc:	409a      	lsls	r2, r3
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d139      	bne.n	8007262 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 0216 	bic.w	r2, r2, #22
 80071fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	695a      	ldr	r2, [r3, #20]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800720c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d103      	bne.n	800721e <HAL_DMA_IRQHandler+0x736>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721a:	2b00      	cmp	r3, #0
 800721c:	d007      	beq.n	800722e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0208 	bic.w	r2, r2, #8
 800722c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	223f      	movs	r2, #63	; 0x3f
 8007238:	409a      	lsls	r2, r3
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007252:	2b00      	cmp	r3, #0
 8007254:	f000 834a 	beq.w	80078ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	4798      	blx	r3
          }
          return;
 8007260:	e344      	b.n	80078ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d018      	beq.n	80072a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d108      	bne.n	8007290 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	2b00      	cmp	r3, #0
 8007284:	d02c      	beq.n	80072e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
 800728e:	e027      	b.n	80072e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007294:	2b00      	cmp	r3, #0
 8007296:	d023      	beq.n	80072e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
 80072a0:	e01e      	b.n	80072e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10f      	bne.n	80072d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0210 	bic.w	r2, r2, #16
 80072be:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 8306 	beq.w	80078f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 8088 	beq.w	8007408 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2204      	movs	r2, #4
 80072fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a7a      	ldr	r2, [pc, #488]	; (80074f0 <HAL_DMA_IRQHandler+0xa08>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d04a      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a79      	ldr	r2, [pc, #484]	; (80074f4 <HAL_DMA_IRQHandler+0xa0c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d045      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a77      	ldr	r2, [pc, #476]	; (80074f8 <HAL_DMA_IRQHandler+0xa10>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d040      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a76      	ldr	r2, [pc, #472]	; (80074fc <HAL_DMA_IRQHandler+0xa14>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d03b      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a74      	ldr	r2, [pc, #464]	; (8007500 <HAL_DMA_IRQHandler+0xa18>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d036      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a73      	ldr	r2, [pc, #460]	; (8007504 <HAL_DMA_IRQHandler+0xa1c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d031      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a71      	ldr	r2, [pc, #452]	; (8007508 <HAL_DMA_IRQHandler+0xa20>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d02c      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a70      	ldr	r2, [pc, #448]	; (800750c <HAL_DMA_IRQHandler+0xa24>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d027      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a6e      	ldr	r2, [pc, #440]	; (8007510 <HAL_DMA_IRQHandler+0xa28>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d022      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a6d      	ldr	r2, [pc, #436]	; (8007514 <HAL_DMA_IRQHandler+0xa2c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d01d      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a6b      	ldr	r2, [pc, #428]	; (8007518 <HAL_DMA_IRQHandler+0xa30>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d018      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a6a      	ldr	r2, [pc, #424]	; (800751c <HAL_DMA_IRQHandler+0xa34>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a68      	ldr	r2, [pc, #416]	; (8007520 <HAL_DMA_IRQHandler+0xa38>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d00e      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a67      	ldr	r2, [pc, #412]	; (8007524 <HAL_DMA_IRQHandler+0xa3c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d009      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a65      	ldr	r2, [pc, #404]	; (8007528 <HAL_DMA_IRQHandler+0xa40>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d004      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x8b8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a64      	ldr	r2, [pc, #400]	; (800752c <HAL_DMA_IRQHandler+0xa44>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d108      	bne.n	80073b2 <HAL_DMA_IRQHandler+0x8ca>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0201 	bic.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e007      	b.n	80073c2 <HAL_DMA_IRQHandler+0x8da>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0201 	bic.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d307      	bcc.n	80073de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1f2      	bne.n	80073c2 <HAL_DMA_IRQHandler+0x8da>
 80073dc:	e000      	b.n	80073e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80073de:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d004      	beq.n	8007400 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2203      	movs	r2, #3
 80073fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80073fe:	e003      	b.n	8007408 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8272 	beq.w	80078f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
 800741a:	e26c      	b.n	80078f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a43      	ldr	r2, [pc, #268]	; (8007530 <HAL_DMA_IRQHandler+0xa48>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d022      	beq.n	800746c <HAL_DMA_IRQHandler+0x984>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a42      	ldr	r2, [pc, #264]	; (8007534 <HAL_DMA_IRQHandler+0xa4c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d01d      	beq.n	800746c <HAL_DMA_IRQHandler+0x984>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a40      	ldr	r2, [pc, #256]	; (8007538 <HAL_DMA_IRQHandler+0xa50>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d018      	beq.n	800746c <HAL_DMA_IRQHandler+0x984>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a3f      	ldr	r2, [pc, #252]	; (800753c <HAL_DMA_IRQHandler+0xa54>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d013      	beq.n	800746c <HAL_DMA_IRQHandler+0x984>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a3d      	ldr	r2, [pc, #244]	; (8007540 <HAL_DMA_IRQHandler+0xa58>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00e      	beq.n	800746c <HAL_DMA_IRQHandler+0x984>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a3c      	ldr	r2, [pc, #240]	; (8007544 <HAL_DMA_IRQHandler+0xa5c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d009      	beq.n	800746c <HAL_DMA_IRQHandler+0x984>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a3a      	ldr	r2, [pc, #232]	; (8007548 <HAL_DMA_IRQHandler+0xa60>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <HAL_DMA_IRQHandler+0x984>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a39      	ldr	r2, [pc, #228]	; (800754c <HAL_DMA_IRQHandler+0xa64>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d101      	bne.n	8007470 <HAL_DMA_IRQHandler+0x988>
 800746c:	2301      	movs	r3, #1
 800746e:	e000      	b.n	8007472 <HAL_DMA_IRQHandler+0x98a>
 8007470:	2300      	movs	r3, #0
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 823f 	beq.w	80078f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2204      	movs	r2, #4
 800748a:	409a      	lsls	r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	4013      	ands	r3, r2
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 80cd 	beq.w	8007630 <HAL_DMA_IRQHandler+0xb48>
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80c7 	beq.w	8007630 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	2204      	movs	r2, #4
 80074ac:	409a      	lsls	r2, r3
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d049      	beq.n	8007550 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f000 8210 	beq.w	80078f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074d8:	e20a      	b.n	80078f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8206 	beq.w	80078f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074ec:	e200      	b.n	80078f0 <HAL_DMA_IRQHandler+0xe08>
 80074ee:	bf00      	nop
 80074f0:	40020010 	.word	0x40020010
 80074f4:	40020028 	.word	0x40020028
 80074f8:	40020040 	.word	0x40020040
 80074fc:	40020058 	.word	0x40020058
 8007500:	40020070 	.word	0x40020070
 8007504:	40020088 	.word	0x40020088
 8007508:	400200a0 	.word	0x400200a0
 800750c:	400200b8 	.word	0x400200b8
 8007510:	40020410 	.word	0x40020410
 8007514:	40020428 	.word	0x40020428
 8007518:	40020440 	.word	0x40020440
 800751c:	40020458 	.word	0x40020458
 8007520:	40020470 	.word	0x40020470
 8007524:	40020488 	.word	0x40020488
 8007528:	400204a0 	.word	0x400204a0
 800752c:	400204b8 	.word	0x400204b8
 8007530:	58025408 	.word	0x58025408
 8007534:	5802541c 	.word	0x5802541c
 8007538:	58025430 	.word	0x58025430
 800753c:	58025444 	.word	0x58025444
 8007540:	58025458 	.word	0x58025458
 8007544:	5802546c 	.word	0x5802546c
 8007548:	58025480 	.word	0x58025480
 800754c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d160      	bne.n	800761c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a8c      	ldr	r2, [pc, #560]	; (8007790 <HAL_DMA_IRQHandler+0xca8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d04a      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a8a      	ldr	r2, [pc, #552]	; (8007794 <HAL_DMA_IRQHandler+0xcac>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d045      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a89      	ldr	r2, [pc, #548]	; (8007798 <HAL_DMA_IRQHandler+0xcb0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d040      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a87      	ldr	r2, [pc, #540]	; (800779c <HAL_DMA_IRQHandler+0xcb4>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d03b      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a86      	ldr	r2, [pc, #536]	; (80077a0 <HAL_DMA_IRQHandler+0xcb8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d036      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a84      	ldr	r2, [pc, #528]	; (80077a4 <HAL_DMA_IRQHandler+0xcbc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d031      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a83      	ldr	r2, [pc, #524]	; (80077a8 <HAL_DMA_IRQHandler+0xcc0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d02c      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a81      	ldr	r2, [pc, #516]	; (80077ac <HAL_DMA_IRQHandler+0xcc4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d027      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a80      	ldr	r2, [pc, #512]	; (80077b0 <HAL_DMA_IRQHandler+0xcc8>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d022      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a7e      	ldr	r2, [pc, #504]	; (80077b4 <HAL_DMA_IRQHandler+0xccc>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01d      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a7d      	ldr	r2, [pc, #500]	; (80077b8 <HAL_DMA_IRQHandler+0xcd0>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d018      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a7b      	ldr	r2, [pc, #492]	; (80077bc <HAL_DMA_IRQHandler+0xcd4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d013      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a7a      	ldr	r2, [pc, #488]	; (80077c0 <HAL_DMA_IRQHandler+0xcd8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00e      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a78      	ldr	r2, [pc, #480]	; (80077c4 <HAL_DMA_IRQHandler+0xcdc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d009      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a77      	ldr	r2, [pc, #476]	; (80077c8 <HAL_DMA_IRQHandler+0xce0>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d004      	beq.n	80075fa <HAL_DMA_IRQHandler+0xb12>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a75      	ldr	r2, [pc, #468]	; (80077cc <HAL_DMA_IRQHandler+0xce4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d108      	bne.n	800760c <HAL_DMA_IRQHandler+0xb24>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0208 	bic.w	r2, r2, #8
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	e007      	b.n	800761c <HAL_DMA_IRQHandler+0xb34>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0204 	bic.w	r2, r2, #4
 800761a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8165 	beq.w	80078f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800762e:	e15f      	b.n	80078f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	2202      	movs	r2, #2
 800763a:	409a      	lsls	r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	4013      	ands	r3, r2
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 80c5 	beq.w	80077d0 <HAL_DMA_IRQHandler+0xce8>
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f003 0302 	and.w	r3, r3, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 80bf 	beq.w	80077d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007656:	f003 031f 	and.w	r3, r3, #31
 800765a:	2202      	movs	r2, #2
 800765c:	409a      	lsls	r2, r3
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d018      	beq.n	800769e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 813a 	beq.w	80078f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007688:	e134      	b.n	80078f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768e:	2b00      	cmp	r3, #0
 8007690:	f000 8130 	beq.w	80078f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800769c:	e12a      	b.n	80078f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d168      	bne.n	800777a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a38      	ldr	r2, [pc, #224]	; (8007790 <HAL_DMA_IRQHandler+0xca8>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d04a      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a37      	ldr	r2, [pc, #220]	; (8007794 <HAL_DMA_IRQHandler+0xcac>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d045      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a35      	ldr	r2, [pc, #212]	; (8007798 <HAL_DMA_IRQHandler+0xcb0>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d040      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a34      	ldr	r2, [pc, #208]	; (800779c <HAL_DMA_IRQHandler+0xcb4>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d03b      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a32      	ldr	r2, [pc, #200]	; (80077a0 <HAL_DMA_IRQHandler+0xcb8>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d036      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a31      	ldr	r2, [pc, #196]	; (80077a4 <HAL_DMA_IRQHandler+0xcbc>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d031      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a2f      	ldr	r2, [pc, #188]	; (80077a8 <HAL_DMA_IRQHandler+0xcc0>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d02c      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a2e      	ldr	r2, [pc, #184]	; (80077ac <HAL_DMA_IRQHandler+0xcc4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d027      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a2c      	ldr	r2, [pc, #176]	; (80077b0 <HAL_DMA_IRQHandler+0xcc8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d022      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a2b      	ldr	r2, [pc, #172]	; (80077b4 <HAL_DMA_IRQHandler+0xccc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d01d      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a29      	ldr	r2, [pc, #164]	; (80077b8 <HAL_DMA_IRQHandler+0xcd0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d018      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a28      	ldr	r2, [pc, #160]	; (80077bc <HAL_DMA_IRQHandler+0xcd4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d013      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a26      	ldr	r2, [pc, #152]	; (80077c0 <HAL_DMA_IRQHandler+0xcd8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00e      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a25      	ldr	r2, [pc, #148]	; (80077c4 <HAL_DMA_IRQHandler+0xcdc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d009      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a23      	ldr	r2, [pc, #140]	; (80077c8 <HAL_DMA_IRQHandler+0xce0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d004      	beq.n	8007748 <HAL_DMA_IRQHandler+0xc60>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a22      	ldr	r2, [pc, #136]	; (80077cc <HAL_DMA_IRQHandler+0xce4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d108      	bne.n	800775a <HAL_DMA_IRQHandler+0xc72>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0214 	bic.w	r2, r2, #20
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	e007      	b.n	800776a <HAL_DMA_IRQHandler+0xc82>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 020a 	bic.w	r2, r2, #10
 8007768:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 80b8 	beq.w	80078f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800778c:	e0b2      	b.n	80078f4 <HAL_DMA_IRQHandler+0xe0c>
 800778e:	bf00      	nop
 8007790:	40020010 	.word	0x40020010
 8007794:	40020028 	.word	0x40020028
 8007798:	40020040 	.word	0x40020040
 800779c:	40020058 	.word	0x40020058
 80077a0:	40020070 	.word	0x40020070
 80077a4:	40020088 	.word	0x40020088
 80077a8:	400200a0 	.word	0x400200a0
 80077ac:	400200b8 	.word	0x400200b8
 80077b0:	40020410 	.word	0x40020410
 80077b4:	40020428 	.word	0x40020428
 80077b8:	40020440 	.word	0x40020440
 80077bc:	40020458 	.word	0x40020458
 80077c0:	40020470 	.word	0x40020470
 80077c4:	40020488 	.word	0x40020488
 80077c8:	400204a0 	.word	0x400204a0
 80077cc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d4:	f003 031f 	and.w	r3, r3, #31
 80077d8:	2208      	movs	r2, #8
 80077da:	409a      	lsls	r2, r3
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8088 	beq.w	80078f6 <HAL_DMA_IRQHandler+0xe0e>
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	f003 0308 	and.w	r3, r3, #8
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8082 	beq.w	80078f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a41      	ldr	r2, [pc, #260]	; (80078fc <HAL_DMA_IRQHandler+0xe14>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d04a      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a3f      	ldr	r2, [pc, #252]	; (8007900 <HAL_DMA_IRQHandler+0xe18>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d045      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a3e      	ldr	r2, [pc, #248]	; (8007904 <HAL_DMA_IRQHandler+0xe1c>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d040      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a3c      	ldr	r2, [pc, #240]	; (8007908 <HAL_DMA_IRQHandler+0xe20>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d03b      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a3b      	ldr	r2, [pc, #236]	; (800790c <HAL_DMA_IRQHandler+0xe24>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d036      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a39      	ldr	r2, [pc, #228]	; (8007910 <HAL_DMA_IRQHandler+0xe28>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d031      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a38      	ldr	r2, [pc, #224]	; (8007914 <HAL_DMA_IRQHandler+0xe2c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d02c      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a36      	ldr	r2, [pc, #216]	; (8007918 <HAL_DMA_IRQHandler+0xe30>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d027      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a35      	ldr	r2, [pc, #212]	; (800791c <HAL_DMA_IRQHandler+0xe34>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d022      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a33      	ldr	r2, [pc, #204]	; (8007920 <HAL_DMA_IRQHandler+0xe38>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d01d      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a32      	ldr	r2, [pc, #200]	; (8007924 <HAL_DMA_IRQHandler+0xe3c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d018      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a30      	ldr	r2, [pc, #192]	; (8007928 <HAL_DMA_IRQHandler+0xe40>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d013      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a2f      	ldr	r2, [pc, #188]	; (800792c <HAL_DMA_IRQHandler+0xe44>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d00e      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a2d      	ldr	r2, [pc, #180]	; (8007930 <HAL_DMA_IRQHandler+0xe48>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d009      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a2c      	ldr	r2, [pc, #176]	; (8007934 <HAL_DMA_IRQHandler+0xe4c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_DMA_IRQHandler+0xdaa>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2a      	ldr	r2, [pc, #168]	; (8007938 <HAL_DMA_IRQHandler+0xe50>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d108      	bne.n	80078a4 <HAL_DMA_IRQHandler+0xdbc>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f022 021c 	bic.w	r2, r2, #28
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	e007      	b.n	80078b4 <HAL_DMA_IRQHandler+0xdcc>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 020e 	bic.w	r2, r2, #14
 80078b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b8:	f003 031f 	and.w	r3, r3, #31
 80078bc:	2201      	movs	r2, #1
 80078be:	409a      	lsls	r2, r3
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d009      	beq.n	80078f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
 80078ea:	e004      	b.n	80078f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80078ec:	bf00      	nop
 80078ee:	e002      	b.n	80078f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078f0:	bf00      	nop
 80078f2:	e000      	b.n	80078f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80078f6:	3728      	adds	r7, #40	; 0x28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	40020010 	.word	0x40020010
 8007900:	40020028 	.word	0x40020028
 8007904:	40020040 	.word	0x40020040
 8007908:	40020058 	.word	0x40020058
 800790c:	40020070 	.word	0x40020070
 8007910:	40020088 	.word	0x40020088
 8007914:	400200a0 	.word	0x400200a0
 8007918:	400200b8 	.word	0x400200b8
 800791c:	40020410 	.word	0x40020410
 8007920:	40020428 	.word	0x40020428
 8007924:	40020440 	.word	0x40020440
 8007928:	40020458 	.word	0x40020458
 800792c:	40020470 	.word	0x40020470
 8007930:	40020488 	.word	0x40020488
 8007934:	400204a0 	.word	0x400204a0
 8007938:	400204b8 	.word	0x400204b8

0800793c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800794a:	b2db      	uxtb	r3, r3
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007964:	4618      	mov	r0, r3
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007982:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007988:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a84      	ldr	r2, [pc, #528]	; (8007ba0 <DMA_SetConfig+0x230>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d072      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a82      	ldr	r2, [pc, #520]	; (8007ba4 <DMA_SetConfig+0x234>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d06d      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a81      	ldr	r2, [pc, #516]	; (8007ba8 <DMA_SetConfig+0x238>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d068      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a7f      	ldr	r2, [pc, #508]	; (8007bac <DMA_SetConfig+0x23c>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d063      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a7e      	ldr	r2, [pc, #504]	; (8007bb0 <DMA_SetConfig+0x240>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d05e      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a7c      	ldr	r2, [pc, #496]	; (8007bb4 <DMA_SetConfig+0x244>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d059      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a7b      	ldr	r2, [pc, #492]	; (8007bb8 <DMA_SetConfig+0x248>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d054      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a79      	ldr	r2, [pc, #484]	; (8007bbc <DMA_SetConfig+0x24c>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d04f      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a78      	ldr	r2, [pc, #480]	; (8007bc0 <DMA_SetConfig+0x250>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d04a      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a76      	ldr	r2, [pc, #472]	; (8007bc4 <DMA_SetConfig+0x254>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d045      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a75      	ldr	r2, [pc, #468]	; (8007bc8 <DMA_SetConfig+0x258>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d040      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a73      	ldr	r2, [pc, #460]	; (8007bcc <DMA_SetConfig+0x25c>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d03b      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a72      	ldr	r2, [pc, #456]	; (8007bd0 <DMA_SetConfig+0x260>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d036      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a70      	ldr	r2, [pc, #448]	; (8007bd4 <DMA_SetConfig+0x264>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d031      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a6f      	ldr	r2, [pc, #444]	; (8007bd8 <DMA_SetConfig+0x268>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d02c      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a6d      	ldr	r2, [pc, #436]	; (8007bdc <DMA_SetConfig+0x26c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d027      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a6c      	ldr	r2, [pc, #432]	; (8007be0 <DMA_SetConfig+0x270>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d022      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a6a      	ldr	r2, [pc, #424]	; (8007be4 <DMA_SetConfig+0x274>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d01d      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a69      	ldr	r2, [pc, #420]	; (8007be8 <DMA_SetConfig+0x278>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d018      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a67      	ldr	r2, [pc, #412]	; (8007bec <DMA_SetConfig+0x27c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a66      	ldr	r2, [pc, #408]	; (8007bf0 <DMA_SetConfig+0x280>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d00e      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a64      	ldr	r2, [pc, #400]	; (8007bf4 <DMA_SetConfig+0x284>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d009      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a63      	ldr	r2, [pc, #396]	; (8007bf8 <DMA_SetConfig+0x288>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d004      	beq.n	8007a7a <DMA_SetConfig+0x10a>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a61      	ldr	r2, [pc, #388]	; (8007bfc <DMA_SetConfig+0x28c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d101      	bne.n	8007a7e <DMA_SetConfig+0x10e>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <DMA_SetConfig+0x110>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00d      	beq.n	8007aa0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a8c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a9e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a3e      	ldr	r2, [pc, #248]	; (8007ba0 <DMA_SetConfig+0x230>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d04a      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a3d      	ldr	r2, [pc, #244]	; (8007ba4 <DMA_SetConfig+0x234>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d045      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a3b      	ldr	r2, [pc, #236]	; (8007ba8 <DMA_SetConfig+0x238>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d040      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a3a      	ldr	r2, [pc, #232]	; (8007bac <DMA_SetConfig+0x23c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d03b      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a38      	ldr	r2, [pc, #224]	; (8007bb0 <DMA_SetConfig+0x240>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d036      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a37      	ldr	r2, [pc, #220]	; (8007bb4 <DMA_SetConfig+0x244>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d031      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a35      	ldr	r2, [pc, #212]	; (8007bb8 <DMA_SetConfig+0x248>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d02c      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a34      	ldr	r2, [pc, #208]	; (8007bbc <DMA_SetConfig+0x24c>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d027      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a32      	ldr	r2, [pc, #200]	; (8007bc0 <DMA_SetConfig+0x250>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d022      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a31      	ldr	r2, [pc, #196]	; (8007bc4 <DMA_SetConfig+0x254>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d01d      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a2f      	ldr	r2, [pc, #188]	; (8007bc8 <DMA_SetConfig+0x258>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d018      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a2e      	ldr	r2, [pc, #184]	; (8007bcc <DMA_SetConfig+0x25c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a2c      	ldr	r2, [pc, #176]	; (8007bd0 <DMA_SetConfig+0x260>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00e      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a2b      	ldr	r2, [pc, #172]	; (8007bd4 <DMA_SetConfig+0x264>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a29      	ldr	r2, [pc, #164]	; (8007bd8 <DMA_SetConfig+0x268>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d004      	beq.n	8007b40 <DMA_SetConfig+0x1d0>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a28      	ldr	r2, [pc, #160]	; (8007bdc <DMA_SetConfig+0x26c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d101      	bne.n	8007b44 <DMA_SetConfig+0x1d4>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e000      	b.n	8007b46 <DMA_SetConfig+0x1d6>
 8007b44:	2300      	movs	r3, #0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d05a      	beq.n	8007c00 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	223f      	movs	r2, #63	; 0x3f
 8007b54:	409a      	lsls	r2, r3
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b68:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d108      	bne.n	8007b8c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b8a:	e087      	b.n	8007c9c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	60da      	str	r2, [r3, #12]
}
 8007b9c:	e07e      	b.n	8007c9c <DMA_SetConfig+0x32c>
 8007b9e:	bf00      	nop
 8007ba0:	40020010 	.word	0x40020010
 8007ba4:	40020028 	.word	0x40020028
 8007ba8:	40020040 	.word	0x40020040
 8007bac:	40020058 	.word	0x40020058
 8007bb0:	40020070 	.word	0x40020070
 8007bb4:	40020088 	.word	0x40020088
 8007bb8:	400200a0 	.word	0x400200a0
 8007bbc:	400200b8 	.word	0x400200b8
 8007bc0:	40020410 	.word	0x40020410
 8007bc4:	40020428 	.word	0x40020428
 8007bc8:	40020440 	.word	0x40020440
 8007bcc:	40020458 	.word	0x40020458
 8007bd0:	40020470 	.word	0x40020470
 8007bd4:	40020488 	.word	0x40020488
 8007bd8:	400204a0 	.word	0x400204a0
 8007bdc:	400204b8 	.word	0x400204b8
 8007be0:	58025408 	.word	0x58025408
 8007be4:	5802541c 	.word	0x5802541c
 8007be8:	58025430 	.word	0x58025430
 8007bec:	58025444 	.word	0x58025444
 8007bf0:	58025458 	.word	0x58025458
 8007bf4:	5802546c 	.word	0x5802546c
 8007bf8:	58025480 	.word	0x58025480
 8007bfc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a28      	ldr	r2, [pc, #160]	; (8007ca8 <DMA_SetConfig+0x338>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d022      	beq.n	8007c50 <DMA_SetConfig+0x2e0>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a27      	ldr	r2, [pc, #156]	; (8007cac <DMA_SetConfig+0x33c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d01d      	beq.n	8007c50 <DMA_SetConfig+0x2e0>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a25      	ldr	r2, [pc, #148]	; (8007cb0 <DMA_SetConfig+0x340>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d018      	beq.n	8007c50 <DMA_SetConfig+0x2e0>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a24      	ldr	r2, [pc, #144]	; (8007cb4 <DMA_SetConfig+0x344>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d013      	beq.n	8007c50 <DMA_SetConfig+0x2e0>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a22      	ldr	r2, [pc, #136]	; (8007cb8 <DMA_SetConfig+0x348>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00e      	beq.n	8007c50 <DMA_SetConfig+0x2e0>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a21      	ldr	r2, [pc, #132]	; (8007cbc <DMA_SetConfig+0x34c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d009      	beq.n	8007c50 <DMA_SetConfig+0x2e0>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1f      	ldr	r2, [pc, #124]	; (8007cc0 <DMA_SetConfig+0x350>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <DMA_SetConfig+0x2e0>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1e      	ldr	r2, [pc, #120]	; (8007cc4 <DMA_SetConfig+0x354>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d101      	bne.n	8007c54 <DMA_SetConfig+0x2e4>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <DMA_SetConfig+0x2e6>
 8007c54:	2300      	movs	r3, #0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d020      	beq.n	8007c9c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c5e:	f003 031f 	and.w	r3, r3, #31
 8007c62:	2201      	movs	r2, #1
 8007c64:	409a      	lsls	r2, r3
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	2b40      	cmp	r3, #64	; 0x40
 8007c78:	d108      	bne.n	8007c8c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	60da      	str	r2, [r3, #12]
}
 8007c8a:	e007      	b.n	8007c9c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	60da      	str	r2, [r3, #12]
}
 8007c9c:	bf00      	nop
 8007c9e:	371c      	adds	r7, #28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	58025408 	.word	0x58025408
 8007cac:	5802541c 	.word	0x5802541c
 8007cb0:	58025430 	.word	0x58025430
 8007cb4:	58025444 	.word	0x58025444
 8007cb8:	58025458 	.word	0x58025458
 8007cbc:	5802546c 	.word	0x5802546c
 8007cc0:	58025480 	.word	0x58025480
 8007cc4:	58025494 	.word	0x58025494

08007cc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a42      	ldr	r2, [pc, #264]	; (8007de0 <DMA_CalcBaseAndBitshift+0x118>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d04a      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a41      	ldr	r2, [pc, #260]	; (8007de4 <DMA_CalcBaseAndBitshift+0x11c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d045      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a3f      	ldr	r2, [pc, #252]	; (8007de8 <DMA_CalcBaseAndBitshift+0x120>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d040      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a3e      	ldr	r2, [pc, #248]	; (8007dec <DMA_CalcBaseAndBitshift+0x124>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d03b      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a3c      	ldr	r2, [pc, #240]	; (8007df0 <DMA_CalcBaseAndBitshift+0x128>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d036      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a3b      	ldr	r2, [pc, #236]	; (8007df4 <DMA_CalcBaseAndBitshift+0x12c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d031      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a39      	ldr	r2, [pc, #228]	; (8007df8 <DMA_CalcBaseAndBitshift+0x130>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d02c      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a38      	ldr	r2, [pc, #224]	; (8007dfc <DMA_CalcBaseAndBitshift+0x134>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d027      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a36      	ldr	r2, [pc, #216]	; (8007e00 <DMA_CalcBaseAndBitshift+0x138>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d022      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a35      	ldr	r2, [pc, #212]	; (8007e04 <DMA_CalcBaseAndBitshift+0x13c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d01d      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a33      	ldr	r2, [pc, #204]	; (8007e08 <DMA_CalcBaseAndBitshift+0x140>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d018      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a32      	ldr	r2, [pc, #200]	; (8007e0c <DMA_CalcBaseAndBitshift+0x144>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d013      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a30      	ldr	r2, [pc, #192]	; (8007e10 <DMA_CalcBaseAndBitshift+0x148>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00e      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a2f      	ldr	r2, [pc, #188]	; (8007e14 <DMA_CalcBaseAndBitshift+0x14c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d009      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a2d      	ldr	r2, [pc, #180]	; (8007e18 <DMA_CalcBaseAndBitshift+0x150>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d004      	beq.n	8007d70 <DMA_CalcBaseAndBitshift+0xa8>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a2c      	ldr	r2, [pc, #176]	; (8007e1c <DMA_CalcBaseAndBitshift+0x154>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d101      	bne.n	8007d74 <DMA_CalcBaseAndBitshift+0xac>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <DMA_CalcBaseAndBitshift+0xae>
 8007d74:	2300      	movs	r3, #0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d024      	beq.n	8007dc4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	3b10      	subs	r3, #16
 8007d82:	4a27      	ldr	r2, [pc, #156]	; (8007e20 <DMA_CalcBaseAndBitshift+0x158>)
 8007d84:	fba2 2303 	umull	r2, r3, r2, r3
 8007d88:	091b      	lsrs	r3, r3, #4
 8007d8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	4a24      	ldr	r2, [pc, #144]	; (8007e24 <DMA_CalcBaseAndBitshift+0x15c>)
 8007d94:	5cd3      	ldrb	r3, [r2, r3]
 8007d96:	461a      	mov	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b03      	cmp	r3, #3
 8007da0:	d908      	bls.n	8007db4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	4b1f      	ldr	r3, [pc, #124]	; (8007e28 <DMA_CalcBaseAndBitshift+0x160>)
 8007daa:	4013      	ands	r3, r2
 8007dac:	1d1a      	adds	r2, r3, #4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	659a      	str	r2, [r3, #88]	; 0x58
 8007db2:	e00d      	b.n	8007dd0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <DMA_CalcBaseAndBitshift+0x160>)
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8007dc2:	e005      	b.n	8007dd0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr
 8007de0:	40020010 	.word	0x40020010
 8007de4:	40020028 	.word	0x40020028
 8007de8:	40020040 	.word	0x40020040
 8007dec:	40020058 	.word	0x40020058
 8007df0:	40020070 	.word	0x40020070
 8007df4:	40020088 	.word	0x40020088
 8007df8:	400200a0 	.word	0x400200a0
 8007dfc:	400200b8 	.word	0x400200b8
 8007e00:	40020410 	.word	0x40020410
 8007e04:	40020428 	.word	0x40020428
 8007e08:	40020440 	.word	0x40020440
 8007e0c:	40020458 	.word	0x40020458
 8007e10:	40020470 	.word	0x40020470
 8007e14:	40020488 	.word	0x40020488
 8007e18:	400204a0 	.word	0x400204a0
 8007e1c:	400204b8 	.word	0x400204b8
 8007e20:	aaaaaaab 	.word	0xaaaaaaab
 8007e24:	0801461c 	.word	0x0801461c
 8007e28:	fffffc00 	.word	0xfffffc00

08007e2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d120      	bne.n	8007e82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d858      	bhi.n	8007efa <DMA_CheckFifoParam+0xce>
 8007e48:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <DMA_CheckFifoParam+0x24>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007e73 	.word	0x08007e73
 8007e58:	08007e61 	.word	0x08007e61
 8007e5c:	08007efb 	.word	0x08007efb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d048      	beq.n	8007efe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e70:	e045      	b.n	8007efe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e7a:	d142      	bne.n	8007f02 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e80:	e03f      	b.n	8007f02 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e8a:	d123      	bne.n	8007ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d838      	bhi.n	8007f06 <DMA_CheckFifoParam+0xda>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <DMA_CheckFifoParam+0x70>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ead 	.word	0x08007ead
 8007ea0:	08007eb3 	.word	0x08007eb3
 8007ea4:	08007ead 	.word	0x08007ead
 8007ea8:	08007ec5 	.word	0x08007ec5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	73fb      	strb	r3, [r7, #15]
        break;
 8007eb0:	e030      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d025      	beq.n	8007f0a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ec2:	e022      	b.n	8007f0a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ecc:	d11f      	bne.n	8007f0e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ed2:	e01c      	b.n	8007f0e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d902      	bls.n	8007ee2 <DMA_CheckFifoParam+0xb6>
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d003      	beq.n	8007ee8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ee0:	e018      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
        break;
 8007ee6:	e015      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00e      	beq.n	8007f12 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef8:	e00b      	b.n	8007f12 <DMA_CheckFifoParam+0xe6>
        break;
 8007efa:	bf00      	nop
 8007efc:	e00a      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007efe:	bf00      	nop
 8007f00:	e008      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007f02:	bf00      	nop
 8007f04:	e006      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007f06:	bf00      	nop
 8007f08:	e004      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007f0a:	bf00      	nop
 8007f0c:	e002      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
        break;
 8007f0e:	bf00      	nop
 8007f10:	e000      	b.n	8007f14 <DMA_CheckFifoParam+0xe8>
    break;
 8007f12:	bf00      	nop
    }
  }

  return status;
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop

08007f24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a38      	ldr	r2, [pc, #224]	; (8008018 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d022      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a36      	ldr	r2, [pc, #216]	; (800801c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d01d      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a35      	ldr	r2, [pc, #212]	; (8008020 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d018      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a33      	ldr	r2, [pc, #204]	; (8008024 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d013      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a32      	ldr	r2, [pc, #200]	; (8008028 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d00e      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a30      	ldr	r2, [pc, #192]	; (800802c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d009      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2f      	ldr	r2, [pc, #188]	; (8008030 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d004      	beq.n	8007f82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2d      	ldr	r2, [pc, #180]	; (8008034 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d101      	bne.n	8007f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007f82:	2301      	movs	r3, #1
 8007f84:	e000      	b.n	8007f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007f86:	2300      	movs	r3, #0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01a      	beq.n	8007fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	3b08      	subs	r3, #8
 8007f94:	4a28      	ldr	r2, [pc, #160]	; (8008038 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007f96:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9a:	091b      	lsrs	r3, r3, #4
 8007f9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	4b26      	ldr	r3, [pc, #152]	; (800803c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a24      	ldr	r2, [pc, #144]	; (8008040 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007fb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	2201      	movs	r2, #1
 8007fba:	409a      	lsls	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007fc0:	e024      	b.n	800800c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	3b10      	subs	r3, #16
 8007fca:	4a1e      	ldr	r2, [pc, #120]	; (8008044 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd0:	091b      	lsrs	r3, r3, #4
 8007fd2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	4a1c      	ldr	r2, [pc, #112]	; (8008048 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d806      	bhi.n	8007fea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4a1b      	ldr	r2, [pc, #108]	; (800804c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d902      	bls.n	8007fea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4b18      	ldr	r3, [pc, #96]	; (8008050 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a16      	ldr	r2, [pc, #88]	; (8008054 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ffc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f003 031f 	and.w	r3, r3, #31
 8008004:	2201      	movs	r2, #1
 8008006:	409a      	lsls	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800800c:	bf00      	nop
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	58025408 	.word	0x58025408
 800801c:	5802541c 	.word	0x5802541c
 8008020:	58025430 	.word	0x58025430
 8008024:	58025444 	.word	0x58025444
 8008028:	58025458 	.word	0x58025458
 800802c:	5802546c 	.word	0x5802546c
 8008030:	58025480 	.word	0x58025480
 8008034:	58025494 	.word	0x58025494
 8008038:	cccccccd 	.word	0xcccccccd
 800803c:	16009600 	.word	0x16009600
 8008040:	58025880 	.word	0x58025880
 8008044:	aaaaaaab 	.word	0xaaaaaaab
 8008048:	400204b8 	.word	0x400204b8
 800804c:	4002040f 	.word	0x4002040f
 8008050:	10008200 	.word	0x10008200
 8008054:	40020880 	.word	0x40020880

08008058 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008058:	b480      	push	{r7}
 800805a:	b085      	sub	sp, #20
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d04a      	beq.n	8008104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b08      	cmp	r3, #8
 8008072:	d847      	bhi.n	8008104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a25      	ldr	r2, [pc, #148]	; (8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d022      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a24      	ldr	r2, [pc, #144]	; (8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d01d      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a22      	ldr	r2, [pc, #136]	; (8008118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d018      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a21      	ldr	r2, [pc, #132]	; (800811c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d013      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a1f      	ldr	r2, [pc, #124]	; (8008120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00e      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a1e      	ldr	r2, [pc, #120]	; (8008124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d009      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1c      	ldr	r2, [pc, #112]	; (8008128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d004      	beq.n	80080c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a1b      	ldr	r2, [pc, #108]	; (800812c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d101      	bne.n	80080c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80080c8:	2300      	movs	r3, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4b17      	ldr	r3, [pc, #92]	; (8008130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a15      	ldr	r2, [pc, #84]	; (8008134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80080e0:	671a      	str	r2, [r3, #112]	; 0x70
 80080e2:	e009      	b.n	80080f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a11      	ldr	r2, [pc, #68]	; (800813c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80080f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	2201      	movs	r2, #1
 80080fe:	409a      	lsls	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	58025408 	.word	0x58025408
 8008114:	5802541c 	.word	0x5802541c
 8008118:	58025430 	.word	0x58025430
 800811c:	58025444 	.word	0x58025444
 8008120:	58025458 	.word	0x58025458
 8008124:	5802546c 	.word	0x5802546c
 8008128:	58025480 	.word	0x58025480
 800812c:	58025494 	.word	0x58025494
 8008130:	1600963f 	.word	0x1600963f
 8008134:	58025940 	.word	0x58025940
 8008138:	1000823f 	.word	0x1000823f
 800813c:	40020940 	.word	0x40020940

08008140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008140:	b480      	push	{r7}
 8008142:	b089      	sub	sp, #36	; 0x24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800814a:	2300      	movs	r3, #0
 800814c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800814e:	4b89      	ldr	r3, [pc, #548]	; (8008374 <HAL_GPIO_Init+0x234>)
 8008150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008152:	e194      	b.n	800847e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	2101      	movs	r1, #1
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	fa01 f303 	lsl.w	r3, r1, r3
 8008160:	4013      	ands	r3, r2
 8008162:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8186 	beq.w	8008478 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d00b      	beq.n	800818c <HAL_GPIO_Init+0x4c>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d007      	beq.n	800818c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008180:	2b11      	cmp	r3, #17
 8008182:	d003      	beq.n	800818c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	2b12      	cmp	r3, #18
 800818a:	d130      	bne.n	80081ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	2203      	movs	r2, #3
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	43db      	mvns	r3, r3
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	4013      	ands	r3, r2
 80081a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	68da      	ldr	r2, [r3, #12]
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69ba      	ldr	r2, [r7, #24]
 80081ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081c2:	2201      	movs	r2, #1
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	43db      	mvns	r3, r3
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	4013      	ands	r3, r2
 80081d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	091b      	lsrs	r3, r3, #4
 80081d8:	f003 0201 	and.w	r2, r3, #1
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	2203      	movs	r2, #3
 80081fa:	fa02 f303 	lsl.w	r3, r2, r3
 80081fe:	43db      	mvns	r3, r3
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	4013      	ands	r3, r2
 8008204:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689a      	ldr	r2, [r3, #8]
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	69ba      	ldr	r2, [r7, #24]
 8008214:	4313      	orrs	r3, r2
 8008216:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d003      	beq.n	800822e <HAL_GPIO_Init+0xee>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b12      	cmp	r3, #18
 800822c:	d123      	bne.n	8008276 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	08da      	lsrs	r2, r3, #3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3208      	adds	r2, #8
 8008236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	220f      	movs	r2, #15
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	43db      	mvns	r3, r3
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	4013      	ands	r3, r2
 8008250:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	4313      	orrs	r3, r2
 8008266:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	08da      	lsrs	r2, r3, #3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3208      	adds	r2, #8
 8008270:	69b9      	ldr	r1, [r7, #24]
 8008272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	2203      	movs	r2, #3
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	43db      	mvns	r3, r3
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	4013      	ands	r3, r2
 800828c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f003 0203 	and.w	r2, r3, #3
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80e0 	beq.w	8008478 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082b8:	4b2f      	ldr	r3, [pc, #188]	; (8008378 <HAL_GPIO_Init+0x238>)
 80082ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082be:	4a2e      	ldr	r2, [pc, #184]	; (8008378 <HAL_GPIO_Init+0x238>)
 80082c0:	f043 0302 	orr.w	r3, r3, #2
 80082c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80082c8:	4b2b      	ldr	r3, [pc, #172]	; (8008378 <HAL_GPIO_Init+0x238>)
 80082ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082d6:	4a29      	ldr	r2, [pc, #164]	; (800837c <HAL_GPIO_Init+0x23c>)
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	089b      	lsrs	r3, r3, #2
 80082dc:	3302      	adds	r3, #2
 80082de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f003 0303 	and.w	r3, r3, #3
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	220f      	movs	r2, #15
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	43db      	mvns	r3, r3
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	4013      	ands	r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a20      	ldr	r2, [pc, #128]	; (8008380 <HAL_GPIO_Init+0x240>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d052      	beq.n	80083a8 <HAL_GPIO_Init+0x268>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <HAL_GPIO_Init+0x244>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d031      	beq.n	800836e <HAL_GPIO_Init+0x22e>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a1e      	ldr	r2, [pc, #120]	; (8008388 <HAL_GPIO_Init+0x248>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d02b      	beq.n	800836a <HAL_GPIO_Init+0x22a>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1d      	ldr	r2, [pc, #116]	; (800838c <HAL_GPIO_Init+0x24c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d025      	beq.n	8008366 <HAL_GPIO_Init+0x226>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a1c      	ldr	r2, [pc, #112]	; (8008390 <HAL_GPIO_Init+0x250>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d01f      	beq.n	8008362 <HAL_GPIO_Init+0x222>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a1b      	ldr	r2, [pc, #108]	; (8008394 <HAL_GPIO_Init+0x254>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d019      	beq.n	800835e <HAL_GPIO_Init+0x21e>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a1a      	ldr	r2, [pc, #104]	; (8008398 <HAL_GPIO_Init+0x258>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d013      	beq.n	800835a <HAL_GPIO_Init+0x21a>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a19      	ldr	r2, [pc, #100]	; (800839c <HAL_GPIO_Init+0x25c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d00d      	beq.n	8008356 <HAL_GPIO_Init+0x216>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a18      	ldr	r2, [pc, #96]	; (80083a0 <HAL_GPIO_Init+0x260>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d007      	beq.n	8008352 <HAL_GPIO_Init+0x212>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <HAL_GPIO_Init+0x264>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d101      	bne.n	800834e <HAL_GPIO_Init+0x20e>
 800834a:	2309      	movs	r3, #9
 800834c:	e02d      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800834e:	230a      	movs	r3, #10
 8008350:	e02b      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008352:	2308      	movs	r3, #8
 8008354:	e029      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008356:	2307      	movs	r3, #7
 8008358:	e027      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800835a:	2306      	movs	r3, #6
 800835c:	e025      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800835e:	2305      	movs	r3, #5
 8008360:	e023      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008362:	2304      	movs	r3, #4
 8008364:	e021      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008366:	2303      	movs	r3, #3
 8008368:	e01f      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800836a:	2302      	movs	r3, #2
 800836c:	e01d      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 800836e:	2301      	movs	r3, #1
 8008370:	e01b      	b.n	80083aa <HAL_GPIO_Init+0x26a>
 8008372:	bf00      	nop
 8008374:	58000080 	.word	0x58000080
 8008378:	58024400 	.word	0x58024400
 800837c:	58000400 	.word	0x58000400
 8008380:	58020000 	.word	0x58020000
 8008384:	58020400 	.word	0x58020400
 8008388:	58020800 	.word	0x58020800
 800838c:	58020c00 	.word	0x58020c00
 8008390:	58021000 	.word	0x58021000
 8008394:	58021400 	.word	0x58021400
 8008398:	58021800 	.word	0x58021800
 800839c:	58021c00 	.word	0x58021c00
 80083a0:	58022000 	.word	0x58022000
 80083a4:	58022400 	.word	0x58022400
 80083a8:	2300      	movs	r3, #0
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	f002 0203 	and.w	r2, r2, #3
 80083b0:	0092      	lsls	r2, r2, #2
 80083b2:	4093      	lsls	r3, r2
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083ba:	4938      	ldr	r1, [pc, #224]	; (800849c <HAL_GPIO_Init+0x35c>)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	089b      	lsrs	r3, r3, #2
 80083c0:	3302      	adds	r3, #2
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	43db      	mvns	r3, r3
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	4013      	ands	r3, r2
 80083d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d003      	beq.n	80083ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	69ba      	ldr	r2, [r7, #24]
 80083f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	43db      	mvns	r3, r3
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	4013      	ands	r3, r2
 8008400:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d003      	beq.n	8008416 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	4313      	orrs	r3, r2
 8008414:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800841c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	43db      	mvns	r3, r3
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	4013      	ands	r3, r2
 800842c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800843a:	69ba      	ldr	r2, [r7, #24]
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800844a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	43db      	mvns	r3, r3
 8008456:	69ba      	ldr	r2, [r7, #24]
 8008458:	4013      	ands	r3, r2
 800845a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	4313      	orrs	r3, r2
 800846e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	3301      	adds	r3, #1
 800847c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	fa22 f303 	lsr.w	r3, r2, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	f47f ae63 	bne.w	8008154 <HAL_GPIO_Init+0x14>
  }
}
 800848e:	bf00      	nop
 8008490:	bf00      	nop
 8008492:	3724      	adds	r7, #36	; 0x24
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	58000400 	.word	0x58000400

080084a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	807b      	strh	r3, [r7, #2]
 80084ac:	4613      	mov	r3, r2
 80084ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80084b0:	787b      	ldrb	r3, [r7, #1]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084b6:	887a      	ldrh	r2, [r7, #2]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80084bc:	e003      	b.n	80084c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80084be:	887b      	ldrh	r3, [r7, #2]
 80084c0:	041a      	lsls	r2, r3, #16
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	619a      	str	r2, [r3, #24]
}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
	...

080084d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e07f      	b.n	80085e6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fb fb62 	bl	8003bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2224      	movs	r2, #36	; 0x24
 8008504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 0201 	bic.w	r2, r2, #1
 8008516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008524:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689a      	ldr	r2, [r3, #8]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008534:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d107      	bne.n	800854e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800854a:	609a      	str	r2, [r3, #8]
 800854c:	e006      	b.n	800855c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689a      	ldr	r2, [r3, #8]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800855a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d104      	bne.n	800856e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800856c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6859      	ldr	r1, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <HAL_I2C_Init+0x11c>)
 800857a:	430b      	orrs	r3, r1
 800857c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800858c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	ea42 0103 	orr.w	r1, r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	021a      	lsls	r2, r3, #8
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	69d9      	ldr	r1, [r3, #28]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a1a      	ldr	r2, [r3, #32]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	02008000 	.word	0x02008000

080085f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	461a      	mov	r2, r3
 8008602:	4603      	mov	r3, r0
 8008604:	817b      	strh	r3, [r7, #10]
 8008606:	460b      	mov	r3, r1
 8008608:	813b      	strh	r3, [r7, #8]
 800860a:	4613      	mov	r3, r2
 800860c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b20      	cmp	r3, #32
 8008618:	f040 80f9 	bne.w	800880e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d002      	beq.n	8008628 <HAL_I2C_Mem_Write+0x34>
 8008622:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008624:	2b00      	cmp	r3, #0
 8008626:	d105      	bne.n	8008634 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800862e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e0ed      	b.n	8008810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800863a:	2b01      	cmp	r3, #1
 800863c:	d101      	bne.n	8008642 <HAL_I2C_Mem_Write+0x4e>
 800863e:	2302      	movs	r3, #2
 8008640:	e0e6      	b.n	8008810 <HAL_I2C_Mem_Write+0x21c>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800864a:	f7fc fdd9 	bl	8005200 <HAL_GetTick>
 800864e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	2319      	movs	r3, #25
 8008656:	2201      	movs	r2, #1
 8008658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f001 fee3 	bl	800a428 <I2C_WaitOnFlagUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e0d1      	b.n	8008810 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2221      	movs	r2, #33	; 0x21
 8008670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2240      	movs	r2, #64	; 0x40
 8008678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a3a      	ldr	r2, [r7, #32]
 8008686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800868c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008694:	88f8      	ldrh	r0, [r7, #6]
 8008696:	893a      	ldrh	r2, [r7, #8]
 8008698:	8979      	ldrh	r1, [r7, #10]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	9301      	str	r3, [sp, #4]
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	4603      	mov	r3, r0
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 ff23 	bl	80094f0 <I2C_RequestMemoryWrite>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d005      	beq.n	80086bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e0a9      	b.n	8008810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2bff      	cmp	r3, #255	; 0xff
 80086c4:	d90e      	bls.n	80086e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	22ff      	movs	r2, #255	; 0xff
 80086ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	8979      	ldrh	r1, [r7, #10]
 80086d4:	2300      	movs	r3, #0
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f001 ffc5 	bl	800a66c <I2C_TransferConfig>
 80086e2:	e00f      	b.n	8008704 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f2:	b2da      	uxtb	r2, r3
 80086f4:	8979      	ldrh	r1, [r7, #10]
 80086f6:	2300      	movs	r3, #0
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f001 ffb4 	bl	800a66c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f001 fecd 	bl	800a4a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e07b      	b.n	8008810 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	781a      	ldrb	r2, [r3, #0]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008732:	b29b      	uxth	r3, r3
 8008734:	3b01      	subs	r3, #1
 8008736:	b29a      	uxth	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008740:	3b01      	subs	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800874c:	b29b      	uxth	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d034      	beq.n	80087bc <HAL_I2C_Mem_Write+0x1c8>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d130      	bne.n	80087bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	2200      	movs	r2, #0
 8008762:	2180      	movs	r1, #128	; 0x80
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f001 fe5f 	bl	800a428 <I2C_WaitOnFlagUntilTimeout>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e04d      	b.n	8008810 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008778:	b29b      	uxth	r3, r3
 800877a:	2bff      	cmp	r3, #255	; 0xff
 800877c:	d90e      	bls.n	800879c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	22ff      	movs	r2, #255	; 0xff
 8008782:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008788:	b2da      	uxtb	r2, r3
 800878a:	8979      	ldrh	r1, [r7, #10]
 800878c:	2300      	movs	r3, #0
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f001 ff69 	bl	800a66c <I2C_TransferConfig>
 800879a:	e00f      	b.n	80087bc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	8979      	ldrh	r1, [r7, #10]
 80087ae:	2300      	movs	r3, #0
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f001 ff58 	bl	800a66c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d19e      	bne.n	8008704 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	f001 feac 	bl	800a528 <I2C_WaitOnSTOPFlagUntilTimeout>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e01a      	b.n	8008810 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2220      	movs	r2, #32
 80087e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6859      	ldr	r1, [r3, #4]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	4b0a      	ldr	r3, [pc, #40]	; (8008818 <HAL_I2C_Mem_Write+0x224>)
 80087ee:	400b      	ands	r3, r1
 80087f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	e000      	b.n	8008810 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800880e:	2302      	movs	r3, #2
  }
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	fe00e800 	.word	0xfe00e800

0800881c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af02      	add	r7, sp, #8
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	4608      	mov	r0, r1
 8008826:	4611      	mov	r1, r2
 8008828:	461a      	mov	r2, r3
 800882a:	4603      	mov	r3, r0
 800882c:	817b      	strh	r3, [r7, #10]
 800882e:	460b      	mov	r3, r1
 8008830:	813b      	strh	r3, [r7, #8]
 8008832:	4613      	mov	r3, r2
 8008834:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b20      	cmp	r3, #32
 8008840:	f040 80fd 	bne.w	8008a3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <HAL_I2C_Mem_Read+0x34>
 800884a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800884c:	2b00      	cmp	r3, #0
 800884e:	d105      	bne.n	800885c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008856:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e0f1      	b.n	8008a40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008862:	2b01      	cmp	r3, #1
 8008864:	d101      	bne.n	800886a <HAL_I2C_Mem_Read+0x4e>
 8008866:	2302      	movs	r3, #2
 8008868:	e0ea      	b.n	8008a40 <HAL_I2C_Mem_Read+0x224>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008872:	f7fc fcc5 	bl	8005200 <HAL_GetTick>
 8008876:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	2319      	movs	r3, #25
 800887e:	2201      	movs	r2, #1
 8008880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f001 fdcf 	bl	800a428 <I2C_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e0d5      	b.n	8008a40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2222      	movs	r2, #34	; 0x22
 8008898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2240      	movs	r2, #64	; 0x40
 80088a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a3a      	ldr	r2, [r7, #32]
 80088ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088bc:	88f8      	ldrh	r0, [r7, #6]
 80088be:	893a      	ldrh	r2, [r7, #8]
 80088c0:	8979      	ldrh	r1, [r7, #10]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	9301      	str	r3, [sp, #4]
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	4603      	mov	r3, r0
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fe63 	bl	8009598 <I2C_RequestMemoryRead>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e0ad      	b.n	8008a40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2bff      	cmp	r3, #255	; 0xff
 80088ec:	d90e      	bls.n	800890c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	22ff      	movs	r2, #255	; 0xff
 80088f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	8979      	ldrh	r1, [r7, #10]
 80088fc:	4b52      	ldr	r3, [pc, #328]	; (8008a48 <HAL_I2C_Mem_Read+0x22c>)
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f001 feb1 	bl	800a66c <I2C_TransferConfig>
 800890a:	e00f      	b.n	800892c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008910:	b29a      	uxth	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800891a:	b2da      	uxtb	r2, r3
 800891c:	8979      	ldrh	r1, [r7, #10]
 800891e:	4b4a      	ldr	r3, [pc, #296]	; (8008a48 <HAL_I2C_Mem_Read+0x22c>)
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f001 fea0 	bl	800a66c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	2200      	movs	r2, #0
 8008934:	2104      	movs	r1, #4
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f001 fd76 	bl	800a428 <I2C_WaitOnFlagUntilTimeout>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e07c      	b.n	8008a40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	b2d2      	uxtb	r2, r2
 8008952:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008962:	3b01      	subs	r3, #1
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800896e:	b29b      	uxth	r3, r3
 8008970:	3b01      	subs	r3, #1
 8008972:	b29a      	uxth	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897c:	b29b      	uxth	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d034      	beq.n	80089ec <HAL_I2C_Mem_Read+0x1d0>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008986:	2b00      	cmp	r3, #0
 8008988:	d130      	bne.n	80089ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008990:	2200      	movs	r2, #0
 8008992:	2180      	movs	r1, #128	; 0x80
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f001 fd47 	bl	800a428 <I2C_WaitOnFlagUntilTimeout>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e04d      	b.n	8008a40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	2bff      	cmp	r3, #255	; 0xff
 80089ac:	d90e      	bls.n	80089cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	22ff      	movs	r2, #255	; 0xff
 80089b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	8979      	ldrh	r1, [r7, #10]
 80089bc:	2300      	movs	r3, #0
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f001 fe51 	bl	800a66c <I2C_TransferConfig>
 80089ca:	e00f      	b.n	80089ec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089da:	b2da      	uxtb	r2, r3
 80089dc:	8979      	ldrh	r1, [r7, #10]
 80089de:	2300      	movs	r3, #0
 80089e0:	9300      	str	r3, [sp, #0]
 80089e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f001 fe40 	bl	800a66c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d19a      	bne.n	800892c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f001 fd94 	bl	800a528 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e01a      	b.n	8008a40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6859      	ldr	r1, [r3, #4]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <HAL_I2C_Mem_Read+0x230>)
 8008a1e:	400b      	ands	r3, r1
 8008a20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e000      	b.n	8008a40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008a3e:	2302      	movs	r3, #2
  }
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	80002400 	.word	0x80002400
 8008a4c:	fe00e800 	.word	0xfe00e800

08008a50 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08a      	sub	sp, #40	; 0x28
 8008a54:	af02      	add	r7, sp, #8
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	4608      	mov	r0, r1
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	817b      	strh	r3, [r7, #10]
 8008a62:	460b      	mov	r3, r1
 8008a64:	813b      	strh	r3, [r7, #8]
 8008a66:	4613      	mov	r3, r2
 8008a68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	f040 80d5 	bne.w	8008c22 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d002      	beq.n	8008a84 <HAL_I2C_Mem_Read_DMA+0x34>
 8008a7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d105      	bne.n	8008a90 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e0c9      	b.n	8008c24 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a9e:	d101      	bne.n	8008aa4 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e0bf      	b.n	8008c24 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d101      	bne.n	8008ab2 <HAL_I2C_Mem_Read_DMA+0x62>
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e0b8      	b.n	8008c24 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008aba:	f7fc fba1 	bl	8005200 <HAL_GetTick>
 8008abe:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2222      	movs	r2, #34	; 0x22
 8008ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2240      	movs	r2, #64	; 0x40
 8008acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4a51      	ldr	r2, [pc, #324]	; (8008c2c <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8008ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4a51      	ldr	r2, [pc, #324]	; (8008c30 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8008aec:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	2bff      	cmp	r3, #255	; 0xff
 8008af6:	d906      	bls.n	8008b06 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	22ff      	movs	r2, #255	; 0xff
 8008afc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008afe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b02:	61fb      	str	r3, [r7, #28]
 8008b04:	e007      	b.n	8008b16 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b14:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008b16:	88f8      	ldrh	r0, [r7, #6]
 8008b18:	893a      	ldrh	r2, [r7, #8]
 8008b1a:	8979      	ldrh	r1, [r7, #10]
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	2319      	movs	r3, #25
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	4603      	mov	r3, r0
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fd36 	bl	8009598 <I2C_RequestMemoryRead>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e072      	b.n	8008c24 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d020      	beq.n	8008b88 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b4a:	4a3a      	ldr	r2, [pc, #232]	; (8008c34 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8008b4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b52:	4a39      	ldr	r2, [pc, #228]	; (8008c38 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8008b54:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b62:	2200      	movs	r2, #0
 8008b64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3324      	adds	r3, #36	; 0x24
 8008b70:	4619      	mov	r1, r3
 8008b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b78:	f7fc ffea 	bl	8005b50 <HAL_DMA_Start_IT>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d139      	bne.n	8008bfa <HAL_I2C_Mem_Read_DMA+0x1aa>
 8008b86:	e013      	b.n	8008bb0 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e039      	b.n	8008c24 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	8979      	ldrh	r1, [r7, #10]
 8008bb8:	4b20      	ldr	r3, [pc, #128]	; (8008c3c <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f001 fd54 	bl	800a66c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008bde:	2110      	movs	r1, #16
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f001 fd71 	bl	800a6c8 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bf4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e014      	b.n	8008c24 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0e:	f043 0210 	orr.w	r2, r3, #16
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e000      	b.n	8008c24 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8008c22:	2302      	movs	r3, #2
  }
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3720      	adds	r7, #32
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	ffff0000 	.word	0xffff0000
 8008c30:	08008f4b 	.word	0x08008f4b
 8008c34:	0800a0e7 	.word	0x0800a0e7
 8008c38:	0800a17d 	.word	0x0800a17d
 8008c3c:	80002400 	.word	0x80002400

08008c40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	68f9      	ldr	r1, [r7, #12]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	4798      	blx	r3
  }
}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70fb      	strb	r3, [r7, #3]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d101      	bne.n	8008d68 <I2C_Slave_ISR_IT+0x24>
 8008d64:	2302      	movs	r3, #2
 8008d66:	e0ec      	b.n	8008f42 <I2C_Slave_ISR_IT+0x1fe>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	095b      	lsrs	r3, r3, #5
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d009      	beq.n	8008d90 <I2C_Slave_ISR_IT+0x4c>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	095b      	lsrs	r3, r3, #5
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008d88:	6939      	ldr	r1, [r7, #16]
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 fe42 	bl	8009a14 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	091b      	lsrs	r3, r3, #4
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d04d      	beq.n	8008e38 <I2C_Slave_ISR_IT+0xf4>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	091b      	lsrs	r3, r3, #4
 8008da0:	f003 0301 	and.w	r3, r3, #1
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d047      	beq.n	8008e38 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d128      	bne.n	8008e04 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b28      	cmp	r3, #40	; 0x28
 8008dbc:	d108      	bne.n	8008dd0 <I2C_Slave_ISR_IT+0x8c>
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dc4:	d104      	bne.n	8008dd0 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008dc6:	6939      	ldr	r1, [r7, #16]
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f001 f81b 	bl	8009e04 <I2C_ITListenCplt>
 8008dce:	e032      	b.n	8008e36 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	2b29      	cmp	r3, #41	; 0x29
 8008dda:	d10e      	bne.n	8008dfa <I2C_Slave_ISR_IT+0xb6>
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008de2:	d00a      	beq.n	8008dfa <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2210      	movs	r2, #16
 8008dea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f001 f956 	bl	800a09e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 fce5 	bl	80097c2 <I2C_ITSlaveSeqCplt>
 8008df8:	e01d      	b.n	8008e36 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2210      	movs	r2, #16
 8008e00:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008e02:	e096      	b.n	8008f32 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2210      	movs	r2, #16
 8008e0a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e10:	f043 0204 	orr.w	r2, r3, #4
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <I2C_Slave_ISR_IT+0xe4>
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e24:	f040 8085 	bne.w	8008f32 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f001 f83e 	bl	8009eb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008e34:	e07d      	b.n	8008f32 <I2C_Slave_ISR_IT+0x1ee>
 8008e36:	e07c      	b.n	8008f32 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	089b      	lsrs	r3, r3, #2
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d030      	beq.n	8008ea6 <I2C_Slave_ISR_IT+0x162>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	089b      	lsrs	r3, r3, #2
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d02a      	beq.n	8008ea6 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d018      	beq.n	8008e8c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	1c5a      	adds	r2, r3, #1
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	3b01      	subs	r3, #1
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d14f      	bne.n	8008f36 <I2C_Slave_ISR_IT+0x1f2>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e9c:	d04b      	beq.n	8008f36 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 fc8f 	bl	80097c2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008ea4:	e047      	b.n	8008f36 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	08db      	lsrs	r3, r3, #3
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00a      	beq.n	8008ec8 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	08db      	lsrs	r3, r3, #3
 8008eb6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008ebe:	6939      	ldr	r1, [r7, #16]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 fbbd 	bl	8009640 <I2C_ITAddrCplt>
 8008ec6:	e037      	b.n	8008f38 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d031      	beq.n	8008f38 <I2C_Slave_ISR_IT+0x1f4>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	085b      	lsrs	r3, r3, #1
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d02b      	beq.n	8008f38 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d018      	beq.n	8008f1c <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	3b01      	subs	r3, #1
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f12:	3b01      	subs	r3, #1
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	851a      	strh	r2, [r3, #40]	; 0x28
 8008f1a:	e00d      	b.n	8008f38 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f22:	d002      	beq.n	8008f2a <I2C_Slave_ISR_IT+0x1e6>
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 fc49 	bl	80097c2 <I2C_ITSlaveSeqCplt>
 8008f30:	e002      	b.n	8008f38 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008f32:	bf00      	nop
 8008f34:	e000      	b.n	8008f38 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008f36:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3718      	adds	r7, #24
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b088      	sub	sp, #32
 8008f4e:	af02      	add	r7, sp, #8
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d101      	bne.n	8008f64 <I2C_Master_ISR_DMA+0x1a>
 8008f60:	2302      	movs	r3, #2
 8008f62:	e0e1      	b.n	8009128 <I2C_Master_ISR_DMA+0x1de>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	091b      	lsrs	r3, r3, #4
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d017      	beq.n	8008fa8 <I2C_Master_ISR_DMA+0x5e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	091b      	lsrs	r3, r3, #4
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d011      	beq.n	8008fa8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2210      	movs	r2, #16
 8008f8a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f90:	f043 0204 	orr.w	r2, r3, #4
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008f98:	2120      	movs	r1, #32
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f001 fb94 	bl	800a6c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f001 f87c 	bl	800a09e <I2C_Flush_TXDR>
 8008fa6:	e0ba      	b.n	800911e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	09db      	lsrs	r3, r3, #7
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d072      	beq.n	800909a <I2C_Master_ISR_DMA+0x150>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	099b      	lsrs	r3, r3, #6
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d06c      	beq.n	800909a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fce:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d04e      	beq.n	8009078 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fe6:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	2bff      	cmp	r3, #255	; 0xff
 8008ff0:	d906      	bls.n	8009000 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	22ff      	movs	r2, #255	; 0xff
 8008ff6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e010      	b.n	8009022 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009004:	b29a      	uxth	r2, r3
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009012:	d003      	beq.n	800901c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	e002      	b.n	8009022 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800901c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009020:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009026:	b2da      	uxtb	r2, r3
 8009028:	8a79      	ldrh	r1, [r7, #18]
 800902a:	2300      	movs	r3, #0
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f001 fb1b 	bl	800a66c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800903a:	b29a      	uxth	r2, r3
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	b29a      	uxth	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b22      	cmp	r3, #34	; 0x22
 8009052:	d108      	bne.n	8009066 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009062:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009064:	e05b      	b.n	800911e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009074:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009076:	e052      	b.n	800911e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009086:	d003      	beq.n	8009090 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f000 fb5d 	bl	8009748 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800908e:	e046      	b.n	800911e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009090:	2140      	movs	r1, #64	; 0x40
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 ff0c 	bl	8009eb0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009098:	e041      	b.n	800911e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	099b      	lsrs	r3, r3, #6
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d029      	beq.n	80090fa <I2C_Master_ISR_DMA+0x1b0>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	099b      	lsrs	r3, r3, #6
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d023      	beq.n	80090fa <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d119      	bne.n	80090f0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ca:	d027      	beq.n	800911c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090d4:	d108      	bne.n	80090e8 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090e4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80090e6:	e019      	b.n	800911c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80090e8:	68f8      	ldr	r0, [r7, #12]
 80090ea:	f000 fb2d 	bl	8009748 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80090ee:	e015      	b.n	800911c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80090f0:	2140      	movs	r1, #64	; 0x40
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	f000 fedc 	bl	8009eb0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80090f8:	e010      	b.n	800911c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	095b      	lsrs	r3, r3, #5
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <I2C_Master_ISR_DMA+0x1d4>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	095b      	lsrs	r3, r3, #5
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 fbb3 	bl	8009880 <I2C_ITMasterCplt>
 800911a:	e000      	b.n	800911e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800911c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3718      	adds	r7, #24
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800914c:	2b01      	cmp	r3, #1
 800914e:	d101      	bne.n	8009154 <I2C_Slave_ISR_DMA+0x24>
 8009150:	2302      	movs	r3, #2
 8009152:	e1c8      	b.n	80094e6 <I2C_Slave_ISR_DMA+0x3b6>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	095b      	lsrs	r3, r3, #5
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <I2C_Slave_ISR_DMA+0x4c>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	095b      	lsrs	r3, r3, #5
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f000 fc4c 	bl	8009a14 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	091b      	lsrs	r3, r3, #4
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 8199 	beq.w	80094bc <I2C_Slave_ISR_DMA+0x38c>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	091b      	lsrs	r3, r3, #4
 800918e:	f003 0301 	and.w	r3, r3, #1
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 8192 	beq.w	80094bc <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	0b9b      	lsrs	r3, r3, #14
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d106      	bne.n	80091b2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	0bdb      	lsrs	r3, r3, #15
 80091a8:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 817e 	beq.w	80094ae <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d07c      	beq.n	80092b4 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	0bdb      	lsrs	r3, r3, #15
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d076      	beq.n	80092b4 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a8d      	ldr	r2, [pc, #564]	; (8009404 <I2C_Slave_ISR_DMA+0x2d4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d059      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a8b      	ldr	r2, [pc, #556]	; (8009408 <I2C_Slave_ISR_DMA+0x2d8>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d053      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a89      	ldr	r2, [pc, #548]	; (800940c <I2C_Slave_ISR_DMA+0x2dc>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d04d      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a87      	ldr	r2, [pc, #540]	; (8009410 <I2C_Slave_ISR_DMA+0x2e0>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d047      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a85      	ldr	r2, [pc, #532]	; (8009414 <I2C_Slave_ISR_DMA+0x2e4>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d041      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a83      	ldr	r2, [pc, #524]	; (8009418 <I2C_Slave_ISR_DMA+0x2e8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d03b      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a81      	ldr	r2, [pc, #516]	; (800941c <I2C_Slave_ISR_DMA+0x2ec>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d035      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a7f      	ldr	r2, [pc, #508]	; (8009420 <I2C_Slave_ISR_DMA+0x2f0>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d02f      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a7d      	ldr	r2, [pc, #500]	; (8009424 <I2C_Slave_ISR_DMA+0x2f4>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d029      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a7b      	ldr	r2, [pc, #492]	; (8009428 <I2C_Slave_ISR_DMA+0x2f8>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d023      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a79      	ldr	r2, [pc, #484]	; (800942c <I2C_Slave_ISR_DMA+0x2fc>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d01d      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a77      	ldr	r2, [pc, #476]	; (8009430 <I2C_Slave_ISR_DMA+0x300>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d017      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a75      	ldr	r2, [pc, #468]	; (8009434 <I2C_Slave_ISR_DMA+0x304>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d011      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a73      	ldr	r2, [pc, #460]	; (8009438 <I2C_Slave_ISR_DMA+0x308>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d00b      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a71      	ldr	r2, [pc, #452]	; (800943c <I2C_Slave_ISR_DMA+0x30c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d005      	beq.n	8009286 <I2C_Slave_ISR_DMA+0x156>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a6f      	ldr	r2, [pc, #444]	; (8009440 <I2C_Slave_ISR_DMA+0x310>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d109      	bne.n	800929a <I2C_Slave_ISR_DMA+0x16a>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bf0c      	ite	eq
 8009292:	2301      	moveq	r3, #1
 8009294:	2300      	movne	r3, #0
 8009296:	b2db      	uxtb	r3, r3
 8009298:	e008      	b.n	80092ac <I2C_Slave_ISR_DMA+0x17c>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	bf0c      	ite	eq
 80092a6:	2301      	moveq	r3, #1
 80092a8:	2300      	movne	r3, #0
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80092b0:	2301      	movs	r3, #1
 80092b2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d07c      	beq.n	80093b6 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	0b9b      	lsrs	r3, r3, #14
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d076      	beq.n	80093b6 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a4d      	ldr	r2, [pc, #308]	; (8009404 <I2C_Slave_ISR_DMA+0x2d4>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d059      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a4b      	ldr	r2, [pc, #300]	; (8009408 <I2C_Slave_ISR_DMA+0x2d8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d053      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a49      	ldr	r2, [pc, #292]	; (800940c <I2C_Slave_ISR_DMA+0x2dc>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d04d      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a47      	ldr	r2, [pc, #284]	; (8009410 <I2C_Slave_ISR_DMA+0x2e0>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d047      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a45      	ldr	r2, [pc, #276]	; (8009414 <I2C_Slave_ISR_DMA+0x2e4>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d041      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a43      	ldr	r2, [pc, #268]	; (8009418 <I2C_Slave_ISR_DMA+0x2e8>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d03b      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a41      	ldr	r2, [pc, #260]	; (800941c <I2C_Slave_ISR_DMA+0x2ec>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d035      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a3f      	ldr	r2, [pc, #252]	; (8009420 <I2C_Slave_ISR_DMA+0x2f0>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d02f      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a3d      	ldr	r2, [pc, #244]	; (8009424 <I2C_Slave_ISR_DMA+0x2f4>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d029      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a3b      	ldr	r2, [pc, #236]	; (8009428 <I2C_Slave_ISR_DMA+0x2f8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d023      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a39      	ldr	r2, [pc, #228]	; (800942c <I2C_Slave_ISR_DMA+0x2fc>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d01d      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a37      	ldr	r2, [pc, #220]	; (8009430 <I2C_Slave_ISR_DMA+0x300>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d017      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a35      	ldr	r2, [pc, #212]	; (8009434 <I2C_Slave_ISR_DMA+0x304>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d011      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a33      	ldr	r2, [pc, #204]	; (8009438 <I2C_Slave_ISR_DMA+0x308>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d00b      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a31      	ldr	r2, [pc, #196]	; (800943c <I2C_Slave_ISR_DMA+0x30c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d005      	beq.n	8009388 <I2C_Slave_ISR_DMA+0x258>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a2f      	ldr	r2, [pc, #188]	; (8009440 <I2C_Slave_ISR_DMA+0x310>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d109      	bne.n	800939c <I2C_Slave_ISR_DMA+0x26c>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	bf0c      	ite	eq
 8009394:	2301      	moveq	r3, #1
 8009396:	2300      	movne	r3, #0
 8009398:	b2db      	uxtb	r3, r3
 800939a:	e008      	b.n	80093ae <I2C_Slave_ISR_DMA+0x27e>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bf0c      	ite	eq
 80093a8:	2301      	moveq	r3, #1
 80093aa:	2300      	movne	r3, #0
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 80093b2:	2301      	movs	r3, #1
 80093b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d148      	bne.n	800944e <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b28      	cmp	r3, #40	; 0x28
 80093c6:	d108      	bne.n	80093da <I2C_Slave_ISR_DMA+0x2aa>
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093ce:	d104      	bne.n	80093da <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80093d0:	68b9      	ldr	r1, [r7, #8]
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fd16 	bl	8009e04 <I2C_ITListenCplt>
 80093d8:	e068      	b.n	80094ac <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b29      	cmp	r3, #41	; 0x29
 80093e4:	d12e      	bne.n	8009444 <I2C_Slave_ISR_DMA+0x314>
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80093ec:	d02a      	beq.n	8009444 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	2210      	movs	r2, #16
 80093f4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f000 fe51 	bl	800a09e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f9e0 	bl	80097c2 <I2C_ITSlaveSeqCplt>
 8009402:	e053      	b.n	80094ac <I2C_Slave_ISR_DMA+0x37c>
 8009404:	40020010 	.word	0x40020010
 8009408:	40020028 	.word	0x40020028
 800940c:	40020040 	.word	0x40020040
 8009410:	40020058 	.word	0x40020058
 8009414:	40020070 	.word	0x40020070
 8009418:	40020088 	.word	0x40020088
 800941c:	400200a0 	.word	0x400200a0
 8009420:	400200b8 	.word	0x400200b8
 8009424:	40020410 	.word	0x40020410
 8009428:	40020428 	.word	0x40020428
 800942c:	40020440 	.word	0x40020440
 8009430:	40020458 	.word	0x40020458
 8009434:	40020470 	.word	0x40020470
 8009438:	40020488 	.word	0x40020488
 800943c:	400204a0 	.word	0x400204a0
 8009440:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2210      	movs	r2, #16
 800944a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800944c:	e034      	b.n	80094b8 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2210      	movs	r2, #16
 8009454:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945a:	f043 0204 	orr.w	r2, r3, #4
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009468:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <I2C_Slave_ISR_DMA+0x348>
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009476:	d11f      	bne.n	80094b8 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	2b21      	cmp	r3, #33	; 0x21
 800947c:	d002      	beq.n	8009484 <I2C_Slave_ISR_DMA+0x354>
 800947e:	7dfb      	ldrb	r3, [r7, #23]
 8009480:	2b29      	cmp	r3, #41	; 0x29
 8009482:	d103      	bne.n	800948c <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2221      	movs	r2, #33	; 0x21
 8009488:	631a      	str	r2, [r3, #48]	; 0x30
 800948a:	e008      	b.n	800949e <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	2b22      	cmp	r3, #34	; 0x22
 8009490:	d002      	beq.n	8009498 <I2C_Slave_ISR_DMA+0x368>
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	2b2a      	cmp	r3, #42	; 0x2a
 8009496:	d102      	bne.n	800949e <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2222      	movs	r2, #34	; 0x22
 800949c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a2:	4619      	mov	r1, r3
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 fd03 	bl	8009eb0 <I2C_ITError>
      if (treatdmanack == 1U)
 80094aa:	e005      	b.n	80094b8 <I2C_Slave_ISR_DMA+0x388>
 80094ac:	e004      	b.n	80094b8 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2210      	movs	r2, #16
 80094b4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80094b6:	e011      	b.n	80094dc <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 80094b8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80094ba:	e00f      	b.n	80094dc <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	08db      	lsrs	r3, r3, #3
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d009      	beq.n	80094dc <I2C_Slave_ISR_DMA+0x3ac>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	08db      	lsrs	r3, r3, #3
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f8b2 	bl	8009640 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3720      	adds	r7, #32
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop

080094f0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af02      	add	r7, sp, #8
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	4608      	mov	r0, r1
 80094fa:	4611      	mov	r1, r2
 80094fc:	461a      	mov	r2, r3
 80094fe:	4603      	mov	r3, r0
 8009500:	817b      	strh	r3, [r7, #10]
 8009502:	460b      	mov	r3, r1
 8009504:	813b      	strh	r3, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800950a:	88fb      	ldrh	r3, [r7, #6]
 800950c:	b2da      	uxtb	r2, r3
 800950e:	8979      	ldrh	r1, [r7, #10]
 8009510:	4b20      	ldr	r3, [pc, #128]	; (8009594 <I2C_RequestMemoryWrite+0xa4>)
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f001 f8a7 	bl	800a66c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800951e:	69fa      	ldr	r2, [r7, #28]
 8009520:	69b9      	ldr	r1, [r7, #24]
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 ffc0 	bl	800a4a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e02c      	b.n	800958c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009532:	88fb      	ldrh	r3, [r7, #6]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d105      	bne.n	8009544 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009538:	893b      	ldrh	r3, [r7, #8]
 800953a:	b2da      	uxtb	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	629a      	str	r2, [r3, #40]	; 0x28
 8009542:	e015      	b.n	8009570 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009544:	893b      	ldrh	r3, [r7, #8]
 8009546:	0a1b      	lsrs	r3, r3, #8
 8009548:	b29b      	uxth	r3, r3
 800954a:	b2da      	uxtb	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009552:	69fa      	ldr	r2, [r7, #28]
 8009554:	69b9      	ldr	r1, [r7, #24]
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 ffa6 	bl	800a4a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e012      	b.n	800958c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009566:	893b      	ldrh	r3, [r7, #8]
 8009568:	b2da      	uxtb	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2200      	movs	r2, #0
 8009578:	2180      	movs	r1, #128	; 0x80
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 ff54 	bl	800a428 <I2C_WaitOnFlagUntilTimeout>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e000      	b.n	800958c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	80002000 	.word	0x80002000

08009598 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	4608      	mov	r0, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	461a      	mov	r2, r3
 80095a6:	4603      	mov	r3, r0
 80095a8:	817b      	strh	r3, [r7, #10]
 80095aa:	460b      	mov	r3, r1
 80095ac:	813b      	strh	r3, [r7, #8]
 80095ae:	4613      	mov	r3, r2
 80095b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	8979      	ldrh	r1, [r7, #10]
 80095b8:	4b20      	ldr	r3, [pc, #128]	; (800963c <I2C_RequestMemoryRead+0xa4>)
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	2300      	movs	r3, #0
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f001 f854 	bl	800a66c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095c4:	69fa      	ldr	r2, [r7, #28]
 80095c6:	69b9      	ldr	r1, [r7, #24]
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 ff6d 	bl	800a4a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e02c      	b.n	8009632 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d105      	bne.n	80095ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095de:	893b      	ldrh	r3, [r7, #8]
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	629a      	str	r2, [r3, #40]	; 0x28
 80095e8:	e015      	b.n	8009616 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095ea:	893b      	ldrh	r3, [r7, #8]
 80095ec:	0a1b      	lsrs	r3, r3, #8
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	69b9      	ldr	r1, [r7, #24]
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 ff53 	bl	800a4a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e012      	b.n	8009632 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800960c:	893b      	ldrh	r3, [r7, #8]
 800960e:	b2da      	uxtb	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	2200      	movs	r2, #0
 800961e:	2140      	movs	r1, #64	; 0x40
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 ff01 	bl	800a428 <I2C_WaitOnFlagUntilTimeout>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e000      	b.n	8009632 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	80002000 	.word	0x80002000

08009640 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009656:	2b28      	cmp	r3, #40	; 0x28
 8009658:	d16a      	bne.n	8009730 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	0c1b      	lsrs	r3, r3, #16
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 0301 	and.w	r3, r3, #1
 8009668:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	0c1b      	lsrs	r3, r3, #16
 8009672:	b29b      	uxth	r3, r3
 8009674:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009678:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	b29b      	uxth	r3, r3
 8009682:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009686:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	b29b      	uxth	r3, r3
 8009690:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009694:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	2b02      	cmp	r3, #2
 800969c:	d138      	bne.n	8009710 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800969e:	897b      	ldrh	r3, [r7, #10]
 80096a0:	09db      	lsrs	r3, r3, #7
 80096a2:	b29a      	uxth	r2, r3
 80096a4:	89bb      	ldrh	r3, [r7, #12]
 80096a6:	4053      	eors	r3, r2
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	f003 0306 	and.w	r3, r3, #6
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d11c      	bne.n	80096ec <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80096b2:	897b      	ldrh	r3, [r7, #10]
 80096b4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096ba:	1c5a      	adds	r2, r3, #1
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	d13b      	bne.n	8009740 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2208      	movs	r2, #8
 80096d4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80096de:	89ba      	ldrh	r2, [r7, #12]
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff faed 	bl	8008cc4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80096ea:	e029      	b.n	8009740 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80096ec:	893b      	ldrh	r3, [r7, #8]
 80096ee:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80096f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f001 f84b 	bl	800a790 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009702:	89ba      	ldrh	r2, [r7, #12]
 8009704:	7bfb      	ldrb	r3, [r7, #15]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff fadb 	bl	8008cc4 <HAL_I2C_AddrCallback>
}
 800970e:	e017      	b.n	8009740 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009710:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 f83b 	bl	800a790 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009722:	89ba      	ldrh	r2, [r7, #12]
 8009724:	7bfb      	ldrb	r3, [r7, #15]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7ff facb 	bl	8008cc4 <HAL_I2C_AddrCallback>
}
 800972e:	e007      	b.n	8009740 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2208      	movs	r2, #8
 8009736:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009740:	bf00      	nop
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b21      	cmp	r3, #33	; 0x21
 8009762:	d115      	bne.n	8009790 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2211      	movs	r2, #17
 8009770:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009778:	2101      	movs	r1, #1
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 f808 	bl	800a790 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7ff fa73 	bl	8008c74 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800978e:	e014      	b.n	80097ba <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2220      	movs	r2, #32
 8009794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2212      	movs	r2, #18
 800979c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80097a4:	2102      	movs	r1, #2
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fff2 	bl	800a790 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fa67 	bl	8008c88 <HAL_I2C_MasterRxCpltCallback>
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	0b9b      	lsrs	r3, r3, #14
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d008      	beq.n	80097f8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e00d      	b.n	8009814 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	0bdb      	lsrs	r3, r3, #15
 80097fc:	f003 0301 	and.w	r3, r3, #1
 8009800:	2b00      	cmp	r3, #0
 8009802:	d007      	beq.n	8009814 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009812:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800981a:	b2db      	uxtb	r3, r3
 800981c:	2b29      	cmp	r3, #41	; 0x29
 800981e:	d112      	bne.n	8009846 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2228      	movs	r2, #40	; 0x28
 8009824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2221      	movs	r2, #33	; 0x21
 800982c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800982e:	2101      	movs	r1, #1
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 ffad 	bl	800a790 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7ff fa2c 	bl	8008c9c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009844:	e017      	b.n	8009876 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b2a      	cmp	r3, #42	; 0x2a
 8009850:	d111      	bne.n	8009876 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2228      	movs	r2, #40	; 0x28
 8009856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2222      	movs	r2, #34	; 0x22
 800985e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009860:	2102      	movs	r1, #2
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 ff94 	bl	800a790 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fa1d 	bl	8008cb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2220      	movs	r2, #32
 8009894:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b21      	cmp	r3, #33	; 0x21
 80098a0:	d107      	bne.n	80098b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80098a2:	2101      	movs	r1, #1
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 ff73 	bl	800a790 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2211      	movs	r2, #17
 80098ae:	631a      	str	r2, [r3, #48]	; 0x30
 80098b0:	e00c      	b.n	80098cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b22      	cmp	r3, #34	; 0x22
 80098bc:	d106      	bne.n	80098cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80098be:	2102      	movs	r1, #2
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 ff65 	bl	800a790 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2212      	movs	r2, #18
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6859      	ldr	r1, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	4b4d      	ldr	r3, [pc, #308]	; (8009a0c <I2C_ITMasterCplt+0x18c>)
 80098d8:	400b      	ands	r3, r1
 80098da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a4a      	ldr	r2, [pc, #296]	; (8009a10 <I2C_ITMasterCplt+0x190>)
 80098e6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	091b      	lsrs	r3, r3, #4
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2210      	movs	r2, #16
 80098fa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009900:	f043 0204 	orr.w	r2, r3, #4
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b60      	cmp	r3, #96	; 0x60
 8009912:	d10b      	bne.n	800992c <I2C_ITMasterCplt+0xac>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	089b      	lsrs	r3, r3, #2
 8009918:	f003 0301 	and.w	r3, r3, #1
 800991c:	2b00      	cmp	r3, #0
 800991e:	d005      	beq.n	800992c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	b2db      	uxtb	r3, r3
 8009928:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800992a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fbb6 	bl	800a09e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b60      	cmp	r3, #96	; 0x60
 8009942:	d002      	beq.n	800994a <I2C_ITMasterCplt+0xca>
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d006      	beq.n	8009958 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800994e:	4619      	mov	r1, r3
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 faad 	bl	8009eb0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009956:	e054      	b.n	8009a02 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b21      	cmp	r3, #33	; 0x21
 8009962:	d124      	bne.n	80099ae <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2220      	movs	r2, #32
 8009968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	d10b      	bne.n	8009996 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff f9b0 	bl	8008cf4 <HAL_I2C_MemTxCpltCallback>
}
 8009994:	e035      	b.n	8009a02 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff f964 	bl	8008c74 <HAL_I2C_MasterTxCpltCallback>
}
 80099ac:	e029      	b.n	8009a02 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b22      	cmp	r3, #34	; 0x22
 80099b8:	d123      	bne.n	8009a02 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2220      	movs	r2, #32
 80099be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b40      	cmp	r3, #64	; 0x40
 80099d2:	d10b      	bne.n	80099ec <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff f98f 	bl	8008d08 <HAL_I2C_MemRxCpltCallback>
}
 80099ea:	e00a      	b.n	8009a02 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7ff f943 	bl	8008c88 <HAL_I2C_MasterRxCpltCallback>
}
 8009a02:	bf00      	nop
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	fe00e800 	.word	0xfe00e800
 8009a10:	ffff0000 	.word	0xffff0000

08009a14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a30:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2220      	movs	r2, #32
 8009a38:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	2b21      	cmp	r3, #33	; 0x21
 8009a3e:	d002      	beq.n	8009a46 <I2C_ITSlaveCplt+0x32>
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b29      	cmp	r3, #41	; 0x29
 8009a44:	d108      	bne.n	8009a58 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009a46:	f248 0101 	movw	r1, #32769	; 0x8001
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fea0 	bl	800a790 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2221      	movs	r2, #33	; 0x21
 8009a54:	631a      	str	r2, [r3, #48]	; 0x30
 8009a56:	e00d      	b.n	8009a74 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	2b22      	cmp	r3, #34	; 0x22
 8009a5c:	d002      	beq.n	8009a64 <I2C_ITSlaveCplt+0x50>
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	2b2a      	cmp	r3, #42	; 0x2a
 8009a62:	d107      	bne.n	8009a74 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009a64:	f248 0102 	movw	r1, #32770	; 0x8002
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fe91 	bl	800a790 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2222      	movs	r2, #34	; 0x22
 8009a72:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a82:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6859      	ldr	r1, [r3, #4]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	4b80      	ldr	r3, [pc, #512]	; (8009c90 <I2C_ITSlaveCplt+0x27c>)
 8009a90:	400b      	ands	r3, r1
 8009a92:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fb02 	bl	800a09e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	0b9b      	lsrs	r3, r3, #14
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d07a      	beq.n	8009b9c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ab4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 8111 	beq.w	8009ce2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a73      	ldr	r2, [pc, #460]	; (8009c94 <I2C_ITSlaveCplt+0x280>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d059      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a71      	ldr	r2, [pc, #452]	; (8009c98 <I2C_ITSlaveCplt+0x284>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d053      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a6f      	ldr	r2, [pc, #444]	; (8009c9c <I2C_ITSlaveCplt+0x288>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d04d      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a6d      	ldr	r2, [pc, #436]	; (8009ca0 <I2C_ITSlaveCplt+0x28c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d047      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a6b      	ldr	r2, [pc, #428]	; (8009ca4 <I2C_ITSlaveCplt+0x290>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d041      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a69      	ldr	r2, [pc, #420]	; (8009ca8 <I2C_ITSlaveCplt+0x294>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d03b      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a67      	ldr	r2, [pc, #412]	; (8009cac <I2C_ITSlaveCplt+0x298>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d035      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a65      	ldr	r2, [pc, #404]	; (8009cb0 <I2C_ITSlaveCplt+0x29c>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d02f      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a63      	ldr	r2, [pc, #396]	; (8009cb4 <I2C_ITSlaveCplt+0x2a0>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d029      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a61      	ldr	r2, [pc, #388]	; (8009cb8 <I2C_ITSlaveCplt+0x2a4>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d023      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a5f      	ldr	r2, [pc, #380]	; (8009cbc <I2C_ITSlaveCplt+0x2a8>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d01d      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a5d      	ldr	r2, [pc, #372]	; (8009cc0 <I2C_ITSlaveCplt+0x2ac>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d017      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a5b      	ldr	r2, [pc, #364]	; (8009cc4 <I2C_ITSlaveCplt+0x2b0>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d011      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a59      	ldr	r2, [pc, #356]	; (8009cc8 <I2C_ITSlaveCplt+0x2b4>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00b      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a57      	ldr	r2, [pc, #348]	; (8009ccc <I2C_ITSlaveCplt+0x2b8>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d005      	beq.n	8009b80 <I2C_ITSlaveCplt+0x16c>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a55      	ldr	r2, [pc, #340]	; (8009cd0 <I2C_ITSlaveCplt+0x2bc>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d105      	bne.n	8009b8c <I2C_ITSlaveCplt+0x178>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	e004      	b.n	8009b96 <I2C_ITSlaveCplt+0x182>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	8553      	strh	r3, [r2, #42]	; 0x2a
 8009b9a:	e0a2      	b.n	8009ce2 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	0bdb      	lsrs	r3, r3, #15
 8009ba0:	f003 0301 	and.w	r3, r3, #1
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f000 809c 	beq.w	8009ce2 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009bb8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f000 808f 	beq.w	8009ce2 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a32      	ldr	r2, [pc, #200]	; (8009c94 <I2C_ITSlaveCplt+0x280>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d059      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a30      	ldr	r2, [pc, #192]	; (8009c98 <I2C_ITSlaveCplt+0x284>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d053      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a2e      	ldr	r2, [pc, #184]	; (8009c9c <I2C_ITSlaveCplt+0x288>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d04d      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a2c      	ldr	r2, [pc, #176]	; (8009ca0 <I2C_ITSlaveCplt+0x28c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d047      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a2a      	ldr	r2, [pc, #168]	; (8009ca4 <I2C_ITSlaveCplt+0x290>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d041      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a28      	ldr	r2, [pc, #160]	; (8009ca8 <I2C_ITSlaveCplt+0x294>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d03b      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a26      	ldr	r2, [pc, #152]	; (8009cac <I2C_ITSlaveCplt+0x298>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d035      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a24      	ldr	r2, [pc, #144]	; (8009cb0 <I2C_ITSlaveCplt+0x29c>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d02f      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a22      	ldr	r2, [pc, #136]	; (8009cb4 <I2C_ITSlaveCplt+0x2a0>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d029      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a20      	ldr	r2, [pc, #128]	; (8009cb8 <I2C_ITSlaveCplt+0x2a4>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d023      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a1e      	ldr	r2, [pc, #120]	; (8009cbc <I2C_ITSlaveCplt+0x2a8>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d01d      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a1c      	ldr	r2, [pc, #112]	; (8009cc0 <I2C_ITSlaveCplt+0x2ac>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d017      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a1a      	ldr	r2, [pc, #104]	; (8009cc4 <I2C_ITSlaveCplt+0x2b0>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d011      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a18      	ldr	r2, [pc, #96]	; (8009cc8 <I2C_ITSlaveCplt+0x2b4>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d00b      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a16      	ldr	r2, [pc, #88]	; (8009ccc <I2C_ITSlaveCplt+0x2b8>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d005      	beq.n	8009c84 <I2C_ITSlaveCplt+0x270>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a14      	ldr	r2, [pc, #80]	; (8009cd0 <I2C_ITSlaveCplt+0x2bc>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d127      	bne.n	8009cd4 <I2C_ITSlaveCplt+0x2c0>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	e026      	b.n	8009cde <I2C_ITSlaveCplt+0x2ca>
 8009c90:	fe00e800 	.word	0xfe00e800
 8009c94:	40020010 	.word	0x40020010
 8009c98:	40020028 	.word	0x40020028
 8009c9c:	40020040 	.word	0x40020040
 8009ca0:	40020058 	.word	0x40020058
 8009ca4:	40020070 	.word	0x40020070
 8009ca8:	40020088 	.word	0x40020088
 8009cac:	400200a0 	.word	0x400200a0
 8009cb0:	400200b8 	.word	0x400200b8
 8009cb4:	40020410 	.word	0x40020410
 8009cb8:	40020428 	.word	0x40020428
 8009cbc:	40020440 	.word	0x40020440
 8009cc0:	40020458 	.word	0x40020458
 8009cc4:	40020470 	.word	0x40020470
 8009cc8:	40020488 	.word	0x40020488
 8009ccc:	400204a0 	.word	0x400204a0
 8009cd0:	400204b8 	.word	0x400204b8
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	089b      	lsrs	r3, r3, #2
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d020      	beq.n	8009d30 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f023 0304 	bic.w	r3, r3, #4
 8009cf4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	b2d2      	uxtb	r2, r2
 8009d02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	1c5a      	adds	r2, r3, #1
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00c      	beq.n	8009d30 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d1a:	3b01      	subs	r3, #1
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d005      	beq.n	8009d46 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d3e:	f043 0204 	orr.w	r2, r3, #4
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d010      	beq.n	8009d7e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f8a4 	bl	8009eb0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b28      	cmp	r3, #40	; 0x28
 8009d72:	d141      	bne.n	8009df8 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009d74:	6979      	ldr	r1, [r7, #20]
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f844 	bl	8009e04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009d7c:	e03c      	b.n	8009df8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d86:	d014      	beq.n	8009db2 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff fd1a 	bl	80097c2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a1b      	ldr	r2, [pc, #108]	; (8009e00 <I2C_ITSlaveCplt+0x3ec>)
 8009d92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7fe ff98 	bl	8008ce0 <HAL_I2C_ListenCpltCallback>
}
 8009db0:	e022      	b.n	8009df8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b22      	cmp	r3, #34	; 0x22
 8009dbc:	d10e      	bne.n	8009ddc <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7fe ff6b 	bl	8008cb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8009dda:	e00d      	b.n	8009df8 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2220      	movs	r2, #32
 8009de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fe ff52 	bl	8008c9c <HAL_I2C_SlaveTxCpltCallback>
}
 8009df8:	bf00      	nop
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	ffff0000 	.word	0xffff0000

08009e04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a26      	ldr	r2, [pc, #152]	; (8009eac <I2C_ITListenCplt+0xa8>)
 8009e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	089b      	lsrs	r3, r3, #2
 8009e34:	f003 0301 	and.w	r3, r3, #1
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d022      	beq.n	8009e82 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	b2d2      	uxtb	r2, r2
 8009e48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d012      	beq.n	8009e82 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e7a:	f043 0204 	orr.w	r2, r3, #4
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e82:	f248 0103 	movw	r1, #32771	; 0x8003
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fc82 	bl	800a790 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2210      	movs	r2, #16
 8009e92:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f7fe ff1f 	bl	8008ce0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	ffff0000 	.word	0xffff0000

08009eb0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a5d      	ldr	r2, [pc, #372]	; (800a044 <I2C_ITError+0x194>)
 8009ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	431a      	orrs	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	2b28      	cmp	r3, #40	; 0x28
 8009ee6:	d005      	beq.n	8009ef4 <I2C_ITError+0x44>
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
 8009eea:	2b29      	cmp	r3, #41	; 0x29
 8009eec:	d002      	beq.n	8009ef4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009eee:	7bfb      	ldrb	r3, [r7, #15]
 8009ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef2:	d10b      	bne.n	8009f0c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009ef4:	2103      	movs	r1, #3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 fc4a 	bl	800a790 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2228      	movs	r2, #40	; 0x28
 8009f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a50      	ldr	r2, [pc, #320]	; (800a048 <I2C_ITError+0x198>)
 8009f08:	635a      	str	r2, [r3, #52]	; 0x34
 8009f0a:	e011      	b.n	8009f30 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f0c:	f248 0103 	movw	r1, #32771	; 0x8003
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fc3d 	bl	800a790 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b60      	cmp	r3, #96	; 0x60
 8009f20:	d003      	beq.n	8009f2a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f34:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d039      	beq.n	8009fb2 <I2C_ITError+0x102>
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b11      	cmp	r3, #17
 8009f42:	d002      	beq.n	8009f4a <I2C_ITError+0x9a>
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b21      	cmp	r3, #33	; 0x21
 8009f48:	d133      	bne.n	8009fb2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f58:	d107      	bne.n	8009f6a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f68:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7fd fce4 	bl	800793c <HAL_DMA_GetState>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d017      	beq.n	8009faa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7e:	4a33      	ldr	r2, [pc, #204]	; (800a04c <I2C_ITError+0x19c>)
 8009f80:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7fc fb66 	bl	8006660 <HAL_DMA_Abort_IT>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d04d      	beq.n	800a036 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009fa8:	e045      	b.n	800a036 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f850 	bl	800a050 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009fb0:	e041      	b.n	800a036 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d039      	beq.n	800a02e <I2C_ITError+0x17e>
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2b12      	cmp	r3, #18
 8009fbe:	d002      	beq.n	8009fc6 <I2C_ITError+0x116>
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b22      	cmp	r3, #34	; 0x22
 8009fc4:	d133      	bne.n	800a02e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fd4:	d107      	bne.n	8009fe6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fe4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7fd fca6 	bl	800793c <HAL_DMA_GetState>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d017      	beq.n	800a026 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ffa:	4a14      	ldr	r2, [pc, #80]	; (800a04c <I2C_ITError+0x19c>)
 8009ffc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fc fb28 	bl	8006660 <HAL_DMA_Abort_IT>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d011      	beq.n	800a03a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a020:	4610      	mov	r0, r2
 800a022:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a024:	e009      	b.n	800a03a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f812 	bl	800a050 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a02c:	e005      	b.n	800a03a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f80e 	bl	800a050 <I2C_TreatErrorCallback>
  }
}
 800a034:	e002      	b.n	800a03c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a036:	bf00      	nop
 800a038:	e000      	b.n	800a03c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a03a:	bf00      	nop
}
 800a03c:	bf00      	nop
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	ffff0000 	.word	0xffff0000
 800a048:	08008d45 	.word	0x08008d45
 800a04c:	0800a3ed 	.word	0x0800a3ed

0800a050 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b60      	cmp	r3, #96	; 0x60
 800a062:	d10e      	bne.n	800a082 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2220      	movs	r2, #32
 800a068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7fe fe58 	bl	8008d30 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a080:	e009      	b.n	800a096 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7fe fe43 	bl	8008d1c <HAL_I2C_ErrorCallback>
}
 800a096:	bf00      	nop
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d103      	bne.n	800a0bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d007      	beq.n	800a0da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	699a      	ldr	r2, [r3, #24]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f042 0201 	orr.w	r2, r2, #1
 800a0d8:	619a      	str	r2, [r3, #24]
  }
}
 800a0da:	bf00      	nop
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b084      	sub	sp, #16
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0f2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a102:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a108:	b29b      	uxth	r3, r3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d104      	bne.n	800a118 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a10e:	2120      	movs	r1, #32
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f000 fad9 	bl	800a6c8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a116:	e02d      	b.n	800a174 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a120:	441a      	add	r2, r3
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	2bff      	cmp	r3, #255	; 0xff
 800a12e:	d903      	bls.n	800a138 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	22ff      	movs	r2, #255	; 0xff
 800a134:	851a      	strh	r2, [r3, #40]	; 0x28
 800a136:	e004      	b.n	800a142 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3324      	adds	r3, #36	; 0x24
 800a14c:	4619      	mov	r1, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a152:	461a      	mov	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a158:	f7fb fcfa 	bl	8005b50 <HAL_DMA_Start_IT>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d004      	beq.n	800a16c <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a162:	2110      	movs	r1, #16
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff fea3 	bl	8009eb0 <I2C_ITError>
}
 800a16a:	e003      	b.n	800a174 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a16c:	2140      	movs	r1, #64	; 0x40
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 faaa 	bl	800a6c8 <I2C_Enable_IRQ>
}
 800a174:	bf00      	nop
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a18c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a192:	2b00      	cmp	r3, #0
 800a194:	d076      	beq.n	800a284 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a83      	ldr	r2, [pc, #524]	; (800a3ac <I2C_DMAError+0x230>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d059      	beq.n	800a256 <I2C_DMAError+0xda>
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a81      	ldr	r2, [pc, #516]	; (800a3b0 <I2C_DMAError+0x234>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d053      	beq.n	800a256 <I2C_DMAError+0xda>
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a7f      	ldr	r2, [pc, #508]	; (800a3b4 <I2C_DMAError+0x238>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d04d      	beq.n	800a256 <I2C_DMAError+0xda>
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a7d      	ldr	r2, [pc, #500]	; (800a3b8 <I2C_DMAError+0x23c>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d047      	beq.n	800a256 <I2C_DMAError+0xda>
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a7b      	ldr	r2, [pc, #492]	; (800a3bc <I2C_DMAError+0x240>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d041      	beq.n	800a256 <I2C_DMAError+0xda>
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a79      	ldr	r2, [pc, #484]	; (800a3c0 <I2C_DMAError+0x244>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d03b      	beq.n	800a256 <I2C_DMAError+0xda>
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a77      	ldr	r2, [pc, #476]	; (800a3c4 <I2C_DMAError+0x248>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d035      	beq.n	800a256 <I2C_DMAError+0xda>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a75      	ldr	r2, [pc, #468]	; (800a3c8 <I2C_DMAError+0x24c>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d02f      	beq.n	800a256 <I2C_DMAError+0xda>
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a73      	ldr	r2, [pc, #460]	; (800a3cc <I2C_DMAError+0x250>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d029      	beq.n	800a256 <I2C_DMAError+0xda>
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a71      	ldr	r2, [pc, #452]	; (800a3d0 <I2C_DMAError+0x254>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d023      	beq.n	800a256 <I2C_DMAError+0xda>
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a6f      	ldr	r2, [pc, #444]	; (800a3d4 <I2C_DMAError+0x258>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d01d      	beq.n	800a256 <I2C_DMAError+0xda>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a6d      	ldr	r2, [pc, #436]	; (800a3d8 <I2C_DMAError+0x25c>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d017      	beq.n	800a256 <I2C_DMAError+0xda>
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a6b      	ldr	r2, [pc, #428]	; (800a3dc <I2C_DMAError+0x260>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d011      	beq.n	800a256 <I2C_DMAError+0xda>
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a69      	ldr	r2, [pc, #420]	; (800a3e0 <I2C_DMAError+0x264>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d00b      	beq.n	800a256 <I2C_DMAError+0xda>
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a67      	ldr	r2, [pc, #412]	; (800a3e4 <I2C_DMAError+0x268>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d005      	beq.n	800a256 <I2C_DMAError+0xda>
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a65      	ldr	r2, [pc, #404]	; (800a3e8 <I2C_DMAError+0x26c>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d109      	bne.n	800a26a <I2C_DMAError+0xee>
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bf0c      	ite	eq
 800a262:	2301      	moveq	r3, #1
 800a264:	2300      	movne	r3, #0
 800a266:	b2db      	uxtb	r3, r3
 800a268:	e008      	b.n	800a27c <I2C_DMAError+0x100>
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	bf0c      	ite	eq
 800a276:	2301      	moveq	r3, #1
 800a278:	2300      	movne	r3, #0
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d001      	beq.n	800a284 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800a280:	2301      	movs	r3, #1
 800a282:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d076      	beq.n	800a37a <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a46      	ldr	r2, [pc, #280]	; (800a3ac <I2C_DMAError+0x230>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d059      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a44      	ldr	r2, [pc, #272]	; (800a3b0 <I2C_DMAError+0x234>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d053      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a42      	ldr	r2, [pc, #264]	; (800a3b4 <I2C_DMAError+0x238>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d04d      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a40      	ldr	r2, [pc, #256]	; (800a3b8 <I2C_DMAError+0x23c>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d047      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a3e      	ldr	r2, [pc, #248]	; (800a3bc <I2C_DMAError+0x240>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d041      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a3c      	ldr	r2, [pc, #240]	; (800a3c0 <I2C_DMAError+0x244>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d03b      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a3a      	ldr	r2, [pc, #232]	; (800a3c4 <I2C_DMAError+0x248>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d035      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a38      	ldr	r2, [pc, #224]	; (800a3c8 <I2C_DMAError+0x24c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d02f      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a36      	ldr	r2, [pc, #216]	; (800a3cc <I2C_DMAError+0x250>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d029      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a34      	ldr	r2, [pc, #208]	; (800a3d0 <I2C_DMAError+0x254>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d023      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a32      	ldr	r2, [pc, #200]	; (800a3d4 <I2C_DMAError+0x258>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d01d      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a30      	ldr	r2, [pc, #192]	; (800a3d8 <I2C_DMAError+0x25c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d017      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a2e      	ldr	r2, [pc, #184]	; (800a3dc <I2C_DMAError+0x260>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d011      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a2c      	ldr	r2, [pc, #176]	; (800a3e0 <I2C_DMAError+0x264>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d00b      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a2a      	ldr	r2, [pc, #168]	; (800a3e4 <I2C_DMAError+0x268>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d005      	beq.n	800a34c <I2C_DMAError+0x1d0>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a28      	ldr	r2, [pc, #160]	; (800a3e8 <I2C_DMAError+0x26c>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d109      	bne.n	800a360 <I2C_DMAError+0x1e4>
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	bf0c      	ite	eq
 800a358:	2301      	moveq	r3, #1
 800a35a:	2300      	movne	r3, #0
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	e008      	b.n	800a372 <I2C_DMAError+0x1f6>
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bf0c      	ite	eq
 800a36c:	2301      	moveq	r3, #1
 800a36e:	2300      	movne	r3, #0
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 800a376:	2301      	movs	r3, #1
 800a378:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7fd faec 	bl	8007958 <HAL_DMA_GetError>
 800a380:	4603      	mov	r3, r0
 800a382:	2b02      	cmp	r3, #2
 800a384:	d00e      	beq.n	800a3a4 <I2C_DMAError+0x228>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00b      	beq.n	800a3a4 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685a      	ldr	r2, [r3, #4]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a39a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a39c:	2110      	movs	r1, #16
 800a39e:	68b8      	ldr	r0, [r7, #8]
 800a3a0:	f7ff fd86 	bl	8009eb0 <I2C_ITError>
  }
}
 800a3a4:	bf00      	nop
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	40020010 	.word	0x40020010
 800a3b0:	40020028 	.word	0x40020028
 800a3b4:	40020040 	.word	0x40020040
 800a3b8:	40020058 	.word	0x40020058
 800a3bc:	40020070 	.word	0x40020070
 800a3c0:	40020088 	.word	0x40020088
 800a3c4:	400200a0 	.word	0x400200a0
 800a3c8:	400200b8 	.word	0x400200b8
 800a3cc:	40020410 	.word	0x40020410
 800a3d0:	40020428 	.word	0x40020428
 800a3d4:	40020440 	.word	0x40020440
 800a3d8:	40020458 	.word	0x40020458
 800a3dc:	40020470 	.word	0x40020470
 800a3e0:	40020488 	.word	0x40020488
 800a3e4:	400204a0 	.word	0x400204a0
 800a3e8:	400204b8 	.word	0x400204b8

0800a3ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a406:	2200      	movs	r2, #0
 800a408:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d003      	beq.n	800a41a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a416:	2200      	movs	r2, #0
 800a418:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800a41a:	68f8      	ldr	r0, [r7, #12]
 800a41c:	f7ff fe18 	bl	800a050 <I2C_TreatErrorCallback>
}
 800a420:	bf00      	nop
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	603b      	str	r3, [r7, #0]
 800a434:	4613      	mov	r3, r2
 800a436:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a438:	e022      	b.n	800a480 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a440:	d01e      	beq.n	800a480 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a442:	f7fa fedd 	bl	8005200 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d302      	bcc.n	800a458 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d113      	bne.n	800a480 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a45c:	f043 0220 	orr.w	r2, r3, #32
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2220      	movs	r2, #32
 800a468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e00f      	b.n	800a4a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	699a      	ldr	r2, [r3, #24]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	4013      	ands	r3, r2
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	bf0c      	ite	eq
 800a490:	2301      	moveq	r3, #1
 800a492:	2300      	movne	r3, #0
 800a494:	b2db      	uxtb	r3, r3
 800a496:	461a      	mov	r2, r3
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d0cd      	beq.n	800a43a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a4b4:	e02c      	b.n	800a510 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 f870 	bl	800a5a0 <I2C_IsAcknowledgeFailed>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e02a      	b.n	800a520 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d0:	d01e      	beq.n	800a510 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d2:	f7fa fe95 	bl	8005200 <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d302      	bcc.n	800a4e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d113      	bne.n	800a510 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ec:	f043 0220 	orr.w	r2, r3, #32
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e007      	b.n	800a520 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	f003 0302 	and.w	r3, r3, #2
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d1cb      	bne.n	800a4b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a534:	e028      	b.n	800a588 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	68b9      	ldr	r1, [r7, #8]
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 f830 	bl	800a5a0 <I2C_IsAcknowledgeFailed>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e026      	b.n	800a598 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a54a:	f7fa fe59 	bl	8005200 <HAL_GetTick>
 800a54e:	4602      	mov	r2, r0
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	429a      	cmp	r2, r3
 800a558:	d302      	bcc.n	800a560 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d113      	bne.n	800a588 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a564:	f043 0220 	orr.w	r2, r3, #32
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2220      	movs	r2, #32
 800a570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e007      	b.n	800a598 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	f003 0320 	and.w	r3, r3, #32
 800a592:	2b20      	cmp	r3, #32
 800a594:	d1cf      	bne.n	800a536 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	699b      	ldr	r3, [r3, #24]
 800a5b2:	f003 0310 	and.w	r3, r3, #16
 800a5b6:	2b10      	cmp	r3, #16
 800a5b8:	d151      	bne.n	800a65e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5ba:	e022      	b.n	800a602 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c2:	d01e      	beq.n	800a602 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5c4:	f7fa fe1c 	bl	8005200 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d302      	bcc.n	800a5da <I2C_IsAcknowledgeFailed+0x3a>
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d113      	bne.n	800a602 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5de:	f043 0220 	orr.w	r2, r3, #32
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2220      	movs	r2, #32
 800a5ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e02e      	b.n	800a660 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	f003 0320 	and.w	r3, r3, #32
 800a60c:	2b20      	cmp	r3, #32
 800a60e:	d1d5      	bne.n	800a5bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2210      	movs	r2, #16
 800a616:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2220      	movs	r2, #32
 800a61e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f7ff fd3c 	bl	800a09e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6859      	ldr	r1, [r3, #4]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <I2C_IsAcknowledgeFailed+0xc8>)
 800a632:	400b      	ands	r3, r1
 800a634:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63a:	f043 0204 	orr.w	r2, r3, #4
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2220      	movs	r2, #32
 800a646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e000      	b.n	800a660 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	fe00e800 	.word	0xfe00e800

0800a66c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	607b      	str	r3, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	817b      	strh	r3, [r7, #10]
 800a67a:	4613      	mov	r3, r2
 800a67c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	0d5b      	lsrs	r3, r3, #21
 800a688:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a68c:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <I2C_TransferConfig+0x58>)
 800a68e:	430b      	orrs	r3, r1
 800a690:	43db      	mvns	r3, r3
 800a692:	ea02 0103 	and.w	r1, r2, r3
 800a696:	897b      	ldrh	r3, [r7, #10]
 800a698:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a69c:	7a7b      	ldrb	r3, [r7, #9]
 800a69e:	041b      	lsls	r3, r3, #16
 800a6a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a6b6:	bf00      	nop
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	03ff63ff 	.word	0x03ff63ff

0800a6c8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6dc:	4a2a      	ldr	r2, [pc, #168]	; (800a788 <I2C_Enable_IRQ+0xc0>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d004      	beq.n	800a6ec <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a6e6:	4a29      	ldr	r2, [pc, #164]	; (800a78c <I2C_Enable_IRQ+0xc4>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d11d      	bne.n	800a728 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a6ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	da03      	bge.n	800a6fc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a6fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a6fc:	887b      	ldrh	r3, [r7, #2]
 800a6fe:	2b10      	cmp	r3, #16
 800a700:	d103      	bne.n	800a70a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a708:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a70a:	887b      	ldrh	r3, [r7, #2]
 800a70c:	2b20      	cmp	r3, #32
 800a70e:	d103      	bne.n	800a718 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a716:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a718:	887b      	ldrh	r3, [r7, #2]
 800a71a:	2b40      	cmp	r3, #64	; 0x40
 800a71c:	d125      	bne.n	800a76a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a724:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a726:	e020      	b.n	800a76a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a728:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	da03      	bge.n	800a738 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a736:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a738:	887b      	ldrh	r3, [r7, #2]
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d003      	beq.n	800a74a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a748:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a74a:	887b      	ldrh	r3, [r7, #2]
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	2b00      	cmp	r3, #0
 800a752:	d003      	beq.n	800a75c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a75a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a75c:	887b      	ldrh	r3, [r7, #2]
 800a75e:	2b20      	cmp	r3, #32
 800a760:	d103      	bne.n	800a76a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f043 0320 	orr.w	r3, r3, #32
 800a768:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	6819      	ldr	r1, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	430a      	orrs	r2, r1
 800a778:	601a      	str	r2, [r3, #0]
}
 800a77a:	bf00      	nop
 800a77c:	3714      	adds	r7, #20
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	08008f4b 	.word	0x08008f4b
 800a78c:	08009131 	.word	0x08009131

0800a790 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a7a0:	887b      	ldrh	r3, [r7, #2]
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00f      	beq.n	800a7ca <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a7b0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a7be:	2b28      	cmp	r3, #40	; 0x28
 800a7c0:	d003      	beq.n	800a7ca <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a7c8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a7ca:	887b      	ldrh	r3, [r7, #2]
 800a7cc:	f003 0302 	and.w	r3, r3, #2
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00f      	beq.n	800a7f4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a7da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a7e8:	2b28      	cmp	r3, #40	; 0x28
 800a7ea:	d003      	beq.n	800a7f4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a7f2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a7f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	da03      	bge.n	800a804 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a802:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a804:	887b      	ldrh	r3, [r7, #2]
 800a806:	2b10      	cmp	r3, #16
 800a808:	d103      	bne.n	800a812 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a810:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a812:	887b      	ldrh	r3, [r7, #2]
 800a814:	2b20      	cmp	r3, #32
 800a816:	d103      	bne.n	800a820 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f043 0320 	orr.w	r3, r3, #32
 800a81e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a820:	887b      	ldrh	r3, [r7, #2]
 800a822:	2b40      	cmp	r3, #64	; 0x40
 800a824:	d103      	bne.n	800a82e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a82c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6819      	ldr	r1, [r3, #0]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	43da      	mvns	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	400a      	ands	r2, r1
 800a83e:	601a      	str	r2, [r3, #0]
}
 800a840:	bf00      	nop
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b20      	cmp	r3, #32
 800a860:	d138      	bne.n	800a8d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d101      	bne.n	800a870 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a86c:	2302      	movs	r3, #2
 800a86e:	e032      	b.n	800a8d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2224      	movs	r2, #36	; 0x24
 800a87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f022 0201 	bic.w	r2, r2, #1
 800a88e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a89e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6819      	ldr	r1, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f042 0201 	orr.w	r2, r2, #1
 800a8be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2220      	movs	r2, #32
 800a8c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	e000      	b.n	800a8d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a8d4:	2302      	movs	r3, #2
  }
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	2b20      	cmp	r3, #32
 800a8f6:	d139      	bne.n	800a96c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d101      	bne.n	800a906 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a902:	2302      	movs	r3, #2
 800a904:	e033      	b.n	800a96e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2224      	movs	r2, #36	; 0x24
 800a912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f022 0201 	bic.w	r2, r2, #1
 800a924:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a934:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	021b      	lsls	r3, r3, #8
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0201 	orr.w	r2, r2, #1
 800a956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2220      	movs	r2, #32
 800a95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	e000      	b.n	800a96e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a96c:	2302      	movs	r3, #2
  }
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
	...

0800a97c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a984:	4b19      	ldr	r3, [pc, #100]	; (800a9ec <HAL_PWREx_ConfigSupply+0x70>)
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d00a      	beq.n	800a9a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a990:	4b16      	ldr	r3, [pc, #88]	; (800a9ec <HAL_PWREx_ConfigSupply+0x70>)
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	f003 0307 	and.w	r3, r3, #7
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d001      	beq.n	800a9a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e01f      	b.n	800a9e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	e01d      	b.n	800a9e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a9a6:	4b11      	ldr	r3, [pc, #68]	; (800a9ec <HAL_PWREx_ConfigSupply+0x70>)
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	f023 0207 	bic.w	r2, r3, #7
 800a9ae:	490f      	ldr	r1, [pc, #60]	; (800a9ec <HAL_PWREx_ConfigSupply+0x70>)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a9b6:	f7fa fc23 	bl	8005200 <HAL_GetTick>
 800a9ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a9bc:	e009      	b.n	800a9d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a9be:	f7fa fc1f 	bl	8005200 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a9cc:	d901      	bls.n	800a9d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e007      	b.n	800a9e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a9d2:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <HAL_PWREx_ConfigSupply+0x70>)
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9de:	d1ee      	bne.n	800a9be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	58024800 	.word	0x58024800

0800a9f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08c      	sub	sp, #48	; 0x30
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e3ff      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f000 8087 	beq.w	800ab1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa10:	4b99      	ldr	r3, [pc, #612]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa18:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa1a:	4b97      	ldr	r3, [pc, #604]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	2b10      	cmp	r3, #16
 800aa24:	d007      	beq.n	800aa36 <HAL_RCC_OscConfig+0x46>
 800aa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa28:	2b18      	cmp	r3, #24
 800aa2a:	d110      	bne.n	800aa4e <HAL_RCC_OscConfig+0x5e>
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d10b      	bne.n	800aa4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa36:	4b90      	ldr	r3, [pc, #576]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d06c      	beq.n	800ab1c <HAL_RCC_OscConfig+0x12c>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d168      	bne.n	800ab1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e3d9      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa56:	d106      	bne.n	800aa66 <HAL_RCC_OscConfig+0x76>
 800aa58:	4b87      	ldr	r3, [pc, #540]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a86      	ldr	r2, [pc, #536]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	e02e      	b.n	800aac4 <HAL_RCC_OscConfig+0xd4>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10c      	bne.n	800aa88 <HAL_RCC_OscConfig+0x98>
 800aa6e:	4b82      	ldr	r3, [pc, #520]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a81      	ldr	r2, [pc, #516]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	4b7f      	ldr	r3, [pc, #508]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a7e      	ldr	r2, [pc, #504]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa84:	6013      	str	r3, [r2, #0]
 800aa86:	e01d      	b.n	800aac4 <HAL_RCC_OscConfig+0xd4>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa90:	d10c      	bne.n	800aaac <HAL_RCC_OscConfig+0xbc>
 800aa92:	4b79      	ldr	r3, [pc, #484]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a78      	ldr	r2, [pc, #480]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aa98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	4b76      	ldr	r3, [pc, #472]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a75      	ldr	r2, [pc, #468]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aaa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	e00b      	b.n	800aac4 <HAL_RCC_OscConfig+0xd4>
 800aaac:	4b72      	ldr	r3, [pc, #456]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a71      	ldr	r2, [pc, #452]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	4b6f      	ldr	r3, [pc, #444]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a6e      	ldr	r2, [pc, #440]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aabe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d013      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aacc:	f7fa fb98 	bl	8005200 <HAL_GetTick>
 800aad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aad2:	e008      	b.n	800aae6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aad4:	f7fa fb94 	bl	8005200 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b64      	cmp	r3, #100	; 0x64
 800aae0:	d901      	bls.n	800aae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e38d      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aae6:	4b64      	ldr	r3, [pc, #400]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f0      	beq.n	800aad4 <HAL_RCC_OscConfig+0xe4>
 800aaf2:	e014      	b.n	800ab1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaf4:	f7fa fb84 	bl	8005200 <HAL_GetTick>
 800aaf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aafa:	e008      	b.n	800ab0e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aafc:	f7fa fb80 	bl	8005200 <HAL_GetTick>
 800ab00:	4602      	mov	r2, r0
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2b64      	cmp	r3, #100	; 0x64
 800ab08:	d901      	bls.n	800ab0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	e379      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab0e:	4b5a      	ldr	r3, [pc, #360]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d1f0      	bne.n	800aafc <HAL_RCC_OscConfig+0x10c>
 800ab1a:	e000      	b.n	800ab1e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f000 80ae 	beq.w	800ac88 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab2c:	4b52      	ldr	r3, [pc, #328]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab36:	4b50      	ldr	r3, [pc, #320]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ab38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab3a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d007      	beq.n	800ab52 <HAL_RCC_OscConfig+0x162>
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	2b18      	cmp	r3, #24
 800ab46:	d13a      	bne.n	800abbe <HAL_RCC_OscConfig+0x1ce>
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f003 0303 	and.w	r3, r3, #3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d135      	bne.n	800abbe <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab52:	4b49      	ldr	r3, [pc, #292]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0304 	and.w	r3, r3, #4
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <HAL_RCC_OscConfig+0x17a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d101      	bne.n	800ab6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ab66:	2301      	movs	r3, #1
 800ab68:	e34b      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab6a:	f7fa fb79 	bl	8005260 <HAL_GetREVID>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d817      	bhi.n	800aba8 <HAL_RCC_OscConfig+0x1b8>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	2b40      	cmp	r3, #64	; 0x40
 800ab7e:	d108      	bne.n	800ab92 <HAL_RCC_OscConfig+0x1a2>
 800ab80:	4b3d      	ldr	r3, [pc, #244]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ab88:	4a3b      	ldr	r2, [pc, #236]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ab8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab8e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab90:	e07a      	b.n	800ac88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab92:	4b39      	ldr	r3, [pc, #228]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	031b      	lsls	r3, r3, #12
 800aba0:	4935      	ldr	r1, [pc, #212]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aba6:	e06f      	b.n	800ac88 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aba8:	4b33      	ldr	r3, [pc, #204]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	061b      	lsls	r3, r3, #24
 800abb6:	4930      	ldr	r1, [pc, #192]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abbc:	e064      	b.n	800ac88 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d045      	beq.n	800ac52 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800abc6:	4b2c      	ldr	r3, [pc, #176]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f023 0219 	bic.w	r2, r3, #25
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	4929      	ldr	r1, [pc, #164]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800abd4:	4313      	orrs	r3, r2
 800abd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abd8:	f7fa fb12 	bl	8005200 <HAL_GetTick>
 800abdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abde:	e008      	b.n	800abf2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abe0:	f7fa fb0e 	bl	8005200 <HAL_GetTick>
 800abe4:	4602      	mov	r2, r0
 800abe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	2b02      	cmp	r3, #2
 800abec:	d901      	bls.n	800abf2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e307      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abf2:	4b21      	ldr	r3, [pc, #132]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f003 0304 	and.w	r3, r3, #4
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0f0      	beq.n	800abe0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abfe:	f7fa fb2f 	bl	8005260 <HAL_GetREVID>
 800ac02:	4603      	mov	r3, r0
 800ac04:	f241 0203 	movw	r2, #4099	; 0x1003
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d817      	bhi.n	800ac3c <HAL_RCC_OscConfig+0x24c>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	2b40      	cmp	r3, #64	; 0x40
 800ac12:	d108      	bne.n	800ac26 <HAL_RCC_OscConfig+0x236>
 800ac14:	4b18      	ldr	r3, [pc, #96]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ac1c:	4a16      	ldr	r2, [pc, #88]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ac1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac22:	6053      	str	r3, [r2, #4]
 800ac24:	e030      	b.n	800ac88 <HAL_RCC_OscConfig+0x298>
 800ac26:	4b14      	ldr	r3, [pc, #80]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	031b      	lsls	r3, r3, #12
 800ac34:	4910      	ldr	r1, [pc, #64]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ac36:	4313      	orrs	r3, r2
 800ac38:	604b      	str	r3, [r1, #4]
 800ac3a:	e025      	b.n	800ac88 <HAL_RCC_OscConfig+0x298>
 800ac3c:	4b0e      	ldr	r3, [pc, #56]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	061b      	lsls	r3, r3, #24
 800ac4a:	490b      	ldr	r1, [pc, #44]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	604b      	str	r3, [r1, #4]
 800ac50:	e01a      	b.n	800ac88 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac52:	4b09      	ldr	r3, [pc, #36]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a08      	ldr	r2, [pc, #32]	; (800ac78 <HAL_RCC_OscConfig+0x288>)
 800ac58:	f023 0301 	bic.w	r3, r3, #1
 800ac5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac5e:	f7fa facf 	bl	8005200 <HAL_GetTick>
 800ac62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac64:	e00a      	b.n	800ac7c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac66:	f7fa facb 	bl	8005200 <HAL_GetTick>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d903      	bls.n	800ac7c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e2c4      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
 800ac78:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac7c:	4ba4      	ldr	r3, [pc, #656]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1ee      	bne.n	800ac66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0310 	and.w	r3, r3, #16
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 80a9 	beq.w	800ade8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac96:	4b9e      	ldr	r3, [pc, #632]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aca0:	4b9b      	ldr	r3, [pc, #620]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800aca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d007      	beq.n	800acbc <HAL_RCC_OscConfig+0x2cc>
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	2b18      	cmp	r3, #24
 800acb0:	d13a      	bne.n	800ad28 <HAL_RCC_OscConfig+0x338>
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d135      	bne.n	800ad28 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acbc:	4b94      	ldr	r3, [pc, #592]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <HAL_RCC_OscConfig+0x2e4>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	69db      	ldr	r3, [r3, #28]
 800accc:	2b80      	cmp	r3, #128	; 0x80
 800acce:	d001      	beq.n	800acd4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e296      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acd4:	f7fa fac4 	bl	8005260 <HAL_GetREVID>
 800acd8:	4603      	mov	r3, r0
 800acda:	f241 0203 	movw	r2, #4099	; 0x1003
 800acde:	4293      	cmp	r3, r2
 800ace0:	d817      	bhi.n	800ad12 <HAL_RCC_OscConfig+0x322>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	2b20      	cmp	r3, #32
 800ace8:	d108      	bne.n	800acfc <HAL_RCC_OscConfig+0x30c>
 800acea:	4b89      	ldr	r3, [pc, #548]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800acf2:	4a87      	ldr	r2, [pc, #540]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800acf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acfa:	e075      	b.n	800ade8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acfc:	4b84      	ldr	r3, [pc, #528]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	069b      	lsls	r3, r3, #26
 800ad0a:	4981      	ldr	r1, [pc, #516]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad10:	e06a      	b.n	800ade8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad12:	4b7f      	ldr	r3, [pc, #508]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	061b      	lsls	r3, r3, #24
 800ad20:	497b      	ldr	r1, [pc, #492]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad26:	e05f      	b.n	800ade8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d042      	beq.n	800adb6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ad30:	4b77      	ldr	r3, [pc, #476]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a76      	ldr	r2, [pc, #472]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad3c:	f7fa fa60 	bl	8005200 <HAL_GetTick>
 800ad40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad42:	e008      	b.n	800ad56 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ad44:	f7fa fa5c 	bl	8005200 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d901      	bls.n	800ad56 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e255      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad56:	4b6e      	ldr	r3, [pc, #440]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d0f0      	beq.n	800ad44 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad62:	f7fa fa7d 	bl	8005260 <HAL_GetREVID>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f241 0203 	movw	r2, #4099	; 0x1003
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d817      	bhi.n	800ada0 <HAL_RCC_OscConfig+0x3b0>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	2b20      	cmp	r3, #32
 800ad76:	d108      	bne.n	800ad8a <HAL_RCC_OscConfig+0x39a>
 800ad78:	4b65      	ldr	r3, [pc, #404]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ad80:	4a63      	ldr	r2, [pc, #396]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad86:	6053      	str	r3, [r2, #4]
 800ad88:	e02e      	b.n	800ade8 <HAL_RCC_OscConfig+0x3f8>
 800ad8a:	4b61      	ldr	r3, [pc, #388]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	069b      	lsls	r3, r3, #26
 800ad98:	495d      	ldr	r1, [pc, #372]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	604b      	str	r3, [r1, #4]
 800ad9e:	e023      	b.n	800ade8 <HAL_RCC_OscConfig+0x3f8>
 800ada0:	4b5b      	ldr	r3, [pc, #364]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	061b      	lsls	r3, r3, #24
 800adae:	4958      	ldr	r1, [pc, #352]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60cb      	str	r3, [r1, #12]
 800adb4:	e018      	b.n	800ade8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800adb6:	4b56      	ldr	r3, [pc, #344]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a55      	ldr	r2, [pc, #340]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800adbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adc2:	f7fa fa1d 	bl	8005200 <HAL_GetTick>
 800adc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800adc8:	e008      	b.n	800addc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800adca:	f7fa fa19 	bl	8005200 <HAL_GetTick>
 800adce:	4602      	mov	r2, r0
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	1ad3      	subs	r3, r2, r3
 800add4:	2b02      	cmp	r3, #2
 800add6:	d901      	bls.n	800addc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800add8:	2303      	movs	r3, #3
 800adda:	e212      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800addc:	4b4c      	ldr	r3, [pc, #304]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1f0      	bne.n	800adca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0308 	and.w	r3, r3, #8
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d036      	beq.n	800ae62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d019      	beq.n	800ae30 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adfc:	4b44      	ldr	r3, [pc, #272]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800adfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae00:	4a43      	ldr	r2, [pc, #268]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ae02:	f043 0301 	orr.w	r3, r3, #1
 800ae06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae08:	f7fa f9fa 	bl	8005200 <HAL_GetTick>
 800ae0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae0e:	e008      	b.n	800ae22 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae10:	f7fa f9f6 	bl	8005200 <HAL_GetTick>
 800ae14:	4602      	mov	r2, r0
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	d901      	bls.n	800ae22 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800ae1e:	2303      	movs	r3, #3
 800ae20:	e1ef      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ae22:	4b3b      	ldr	r3, [pc, #236]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ae24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae26:	f003 0302 	and.w	r3, r3, #2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d0f0      	beq.n	800ae10 <HAL_RCC_OscConfig+0x420>
 800ae2e:	e018      	b.n	800ae62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae30:	4b37      	ldr	r3, [pc, #220]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ae32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae34:	4a36      	ldr	r2, [pc, #216]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ae36:	f023 0301 	bic.w	r3, r3, #1
 800ae3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae3c:	f7fa f9e0 	bl	8005200 <HAL_GetTick>
 800ae40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae42:	e008      	b.n	800ae56 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae44:	f7fa f9dc 	bl	8005200 <HAL_GetTick>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	1ad3      	subs	r3, r2, r3
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d901      	bls.n	800ae56 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e1d5      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae56:	4b2e      	ldr	r3, [pc, #184]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ae58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1f0      	bne.n	800ae44 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0320 	and.w	r3, r3, #32
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d036      	beq.n	800aedc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d019      	beq.n	800aeaa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ae76:	4b26      	ldr	r3, [pc, #152]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a25      	ldr	r2, [pc, #148]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ae7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae82:	f7fa f9bd 	bl	8005200 <HAL_GetTick>
 800ae86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae88:	e008      	b.n	800ae9c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ae8a:	f7fa f9b9 	bl	8005200 <HAL_GetTick>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	1ad3      	subs	r3, r2, r3
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d901      	bls.n	800ae9c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e1b2      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae9c:	4b1c      	ldr	r3, [pc, #112]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d0f0      	beq.n	800ae8a <HAL_RCC_OscConfig+0x49a>
 800aea8:	e018      	b.n	800aedc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aeaa:	4b19      	ldr	r3, [pc, #100]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a18      	ldr	r2, [pc, #96]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800aeb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeb4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aeb6:	f7fa f9a3 	bl	8005200 <HAL_GetTick>
 800aeba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aebc:	e008      	b.n	800aed0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800aebe:	f7fa f99f 	bl	8005200 <HAL_GetTick>
 800aec2:	4602      	mov	r2, r0
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d901      	bls.n	800aed0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e198      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aed0:	4b0f      	ldr	r3, [pc, #60]	; (800af10 <HAL_RCC_OscConfig+0x520>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1f0      	bne.n	800aebe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 0304 	and.w	r3, r3, #4
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 8085 	beq.w	800aff4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aeea:	4b0a      	ldr	r3, [pc, #40]	; (800af14 <HAL_RCC_OscConfig+0x524>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a09      	ldr	r2, [pc, #36]	; (800af14 <HAL_RCC_OscConfig+0x524>)
 800aef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aef4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aef6:	f7fa f983 	bl	8005200 <HAL_GetTick>
 800aefa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aefc:	e00c      	b.n	800af18 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800aefe:	f7fa f97f 	bl	8005200 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	2b64      	cmp	r3, #100	; 0x64
 800af0a:	d905      	bls.n	800af18 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e178      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
 800af10:	58024400 	.word	0x58024400
 800af14:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af18:	4b96      	ldr	r3, [pc, #600]	; (800b174 <HAL_RCC_OscConfig+0x784>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0ec      	beq.n	800aefe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d106      	bne.n	800af3a <HAL_RCC_OscConfig+0x54a>
 800af2c:	4b92      	ldr	r3, [pc, #584]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af30:	4a91      	ldr	r2, [pc, #580]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af32:	f043 0301 	orr.w	r3, r3, #1
 800af36:	6713      	str	r3, [r2, #112]	; 0x70
 800af38:	e02d      	b.n	800af96 <HAL_RCC_OscConfig+0x5a6>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10c      	bne.n	800af5c <HAL_RCC_OscConfig+0x56c>
 800af42:	4b8d      	ldr	r3, [pc, #564]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af46:	4a8c      	ldr	r2, [pc, #560]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af48:	f023 0301 	bic.w	r3, r3, #1
 800af4c:	6713      	str	r3, [r2, #112]	; 0x70
 800af4e:	4b8a      	ldr	r3, [pc, #552]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af52:	4a89      	ldr	r2, [pc, #548]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af54:	f023 0304 	bic.w	r3, r3, #4
 800af58:	6713      	str	r3, [r2, #112]	; 0x70
 800af5a:	e01c      	b.n	800af96 <HAL_RCC_OscConfig+0x5a6>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	2b05      	cmp	r3, #5
 800af62:	d10c      	bne.n	800af7e <HAL_RCC_OscConfig+0x58e>
 800af64:	4b84      	ldr	r3, [pc, #528]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af68:	4a83      	ldr	r2, [pc, #524]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af6a:	f043 0304 	orr.w	r3, r3, #4
 800af6e:	6713      	str	r3, [r2, #112]	; 0x70
 800af70:	4b81      	ldr	r3, [pc, #516]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af74:	4a80      	ldr	r2, [pc, #512]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af76:	f043 0301 	orr.w	r3, r3, #1
 800af7a:	6713      	str	r3, [r2, #112]	; 0x70
 800af7c:	e00b      	b.n	800af96 <HAL_RCC_OscConfig+0x5a6>
 800af7e:	4b7e      	ldr	r3, [pc, #504]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af82:	4a7d      	ldr	r2, [pc, #500]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af84:	f023 0301 	bic.w	r3, r3, #1
 800af88:	6713      	str	r3, [r2, #112]	; 0x70
 800af8a:	4b7b      	ldr	r3, [pc, #492]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8e:	4a7a      	ldr	r2, [pc, #488]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800af90:	f023 0304 	bic.w	r3, r3, #4
 800af94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d015      	beq.n	800afca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af9e:	f7fa f92f 	bl	8005200 <HAL_GetTick>
 800afa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afa4:	e00a      	b.n	800afbc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afa6:	f7fa f92b 	bl	8005200 <HAL_GetTick>
 800afaa:	4602      	mov	r2, r0
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d901      	bls.n	800afbc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800afb8:	2303      	movs	r3, #3
 800afba:	e122      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800afbc:	4b6e      	ldr	r3, [pc, #440]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800afbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc0:	f003 0302 	and.w	r3, r3, #2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d0ee      	beq.n	800afa6 <HAL_RCC_OscConfig+0x5b6>
 800afc8:	e014      	b.n	800aff4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afca:	f7fa f919 	bl	8005200 <HAL_GetTick>
 800afce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800afd0:	e00a      	b.n	800afe8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afd2:	f7fa f915 	bl	8005200 <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d901      	bls.n	800afe8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e10c      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800afe8:	4b63      	ldr	r3, [pc, #396]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800afea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afec:	f003 0302 	and.w	r3, r3, #2
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1ee      	bne.n	800afd2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 8101 	beq.w	800b200 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800affe:	4b5e      	ldr	r3, [pc, #376]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b006:	2b18      	cmp	r3, #24
 800b008:	f000 80bc 	beq.w	800b184 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	2b02      	cmp	r3, #2
 800b012:	f040 8095 	bne.w	800b140 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b016:	4b58      	ldr	r3, [pc, #352]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a57      	ldr	r2, [pc, #348]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b01c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b022:	f7fa f8ed 	bl	8005200 <HAL_GetTick>
 800b026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b028:	e008      	b.n	800b03c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b02a:	f7fa f8e9 	bl	8005200 <HAL_GetTick>
 800b02e:	4602      	mov	r2, r0
 800b030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	2b02      	cmp	r3, #2
 800b036:	d901      	bls.n	800b03c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800b038:	2303      	movs	r3, #3
 800b03a:	e0e2      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b03c:	4b4e      	ldr	r3, [pc, #312]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1f0      	bne.n	800b02a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b048:	4b4b      	ldr	r3, [pc, #300]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b04a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b04c:	4b4b      	ldr	r3, [pc, #300]	; (800b17c <HAL_RCC_OscConfig+0x78c>)
 800b04e:	4013      	ands	r3, r2
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b058:	0112      	lsls	r2, r2, #4
 800b05a:	430a      	orrs	r2, r1
 800b05c:	4946      	ldr	r1, [pc, #280]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	628b      	str	r3, [r1, #40]	; 0x28
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b066:	3b01      	subs	r3, #1
 800b068:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b070:	3b01      	subs	r3, #1
 800b072:	025b      	lsls	r3, r3, #9
 800b074:	b29b      	uxth	r3, r3
 800b076:	431a      	orrs	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07c:	3b01      	subs	r3, #1
 800b07e:	041b      	lsls	r3, r3, #16
 800b080:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b084:	431a      	orrs	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b08a:	3b01      	subs	r3, #1
 800b08c:	061b      	lsls	r3, r3, #24
 800b08e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b092:	4939      	ldr	r1, [pc, #228]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b094:	4313      	orrs	r3, r2
 800b096:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b098:	4b37      	ldr	r3, [pc, #220]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09c:	4a36      	ldr	r2, [pc, #216]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b09e:	f023 0301 	bic.w	r3, r3, #1
 800b0a2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b0a4:	4b34      	ldr	r3, [pc, #208]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0a8:	4b35      	ldr	r3, [pc, #212]	; (800b180 <HAL_RCC_OscConfig+0x790>)
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b0b0:	00d2      	lsls	r2, r2, #3
 800b0b2:	4931      	ldr	r1, [pc, #196]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b0b8:	4b2f      	ldr	r3, [pc, #188]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	f023 020c 	bic.w	r2, r3, #12
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c4:	492c      	ldr	r1, [pc, #176]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b0ca:	4b2b      	ldr	r3, [pc, #172]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ce:	f023 0202 	bic.w	r2, r3, #2
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d6:	4928      	ldr	r1, [pc, #160]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b0dc:	4b26      	ldr	r3, [pc, #152]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e0:	4a25      	ldr	r2, [pc, #148]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0e8:	4b23      	ldr	r3, [pc, #140]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ec:	4a22      	ldr	r2, [pc, #136]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b0f4:	4b20      	ldr	r3, [pc, #128]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f8:	4a1f      	ldr	r2, [pc, #124]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b0fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b100:	4b1d      	ldr	r3, [pc, #116]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	4a1c      	ldr	r2, [pc, #112]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b106:	f043 0301 	orr.w	r3, r3, #1
 800b10a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b10c:	4b1a      	ldr	r3, [pc, #104]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a19      	ldr	r2, [pc, #100]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b118:	f7fa f872 	bl	8005200 <HAL_GetTick>
 800b11c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b11e:	e008      	b.n	800b132 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b120:	f7fa f86e 	bl	8005200 <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d901      	bls.n	800b132 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e067      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b132:	4b11      	ldr	r3, [pc, #68]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0f0      	beq.n	800b120 <HAL_RCC_OscConfig+0x730>
 800b13e:	e05f      	b.n	800b200 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b140:	4b0d      	ldr	r3, [pc, #52]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a0c      	ldr	r2, [pc, #48]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b14a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b14c:	f7fa f858 	bl	8005200 <HAL_GetTick>
 800b150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b152:	e008      	b.n	800b166 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b154:	f7fa f854 	bl	8005200 <HAL_GetTick>
 800b158:	4602      	mov	r2, r0
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	2b02      	cmp	r3, #2
 800b160:	d901      	bls.n	800b166 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e04d      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b166:	4b04      	ldr	r3, [pc, #16]	; (800b178 <HAL_RCC_OscConfig+0x788>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1f0      	bne.n	800b154 <HAL_RCC_OscConfig+0x764>
 800b172:	e045      	b.n	800b200 <HAL_RCC_OscConfig+0x810>
 800b174:	58024800 	.word	0x58024800
 800b178:	58024400 	.word	0x58024400
 800b17c:	fffffc0c 	.word	0xfffffc0c
 800b180:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b184:	4b21      	ldr	r3, [pc, #132]	; (800b20c <HAL_RCC_OscConfig+0x81c>)
 800b186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b188:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b18a:	4b20      	ldr	r3, [pc, #128]	; (800b20c <HAL_RCC_OscConfig+0x81c>)
 800b18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b194:	2b01      	cmp	r3, #1
 800b196:	d031      	beq.n	800b1fc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f003 0203 	and.w	r2, r3, #3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d12a      	bne.n	800b1fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	091b      	lsrs	r3, r3, #4
 800b1aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d122      	bne.n	800b1fc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d11a      	bne.n	800b1fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	0a5b      	lsrs	r3, r3, #9
 800b1ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d111      	bne.n	800b1fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	0c1b      	lsrs	r3, r3, #16
 800b1dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d108      	bne.n	800b1fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	0e1b      	lsrs	r3, r3, #24
 800b1ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d001      	beq.n	800b200 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e000      	b.n	800b202 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3730      	adds	r7, #48	; 0x30
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	58024400 	.word	0x58024400

0800b210 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e19c      	b.n	800b55e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b224:	4b8a      	ldr	r3, [pc, #552]	; (800b450 <HAL_RCC_ClockConfig+0x240>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	683a      	ldr	r2, [r7, #0]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d910      	bls.n	800b254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b232:	4b87      	ldr	r3, [pc, #540]	; (800b450 <HAL_RCC_ClockConfig+0x240>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f023 020f 	bic.w	r2, r3, #15
 800b23a:	4985      	ldr	r1, [pc, #532]	; (800b450 <HAL_RCC_ClockConfig+0x240>)
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	4313      	orrs	r3, r2
 800b240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b242:	4b83      	ldr	r3, [pc, #524]	; (800b450 <HAL_RCC_ClockConfig+0x240>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 030f 	and.w	r3, r3, #15
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d001      	beq.n	800b254 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	e184      	b.n	800b55e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 0304 	and.w	r3, r3, #4
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d010      	beq.n	800b282 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	691a      	ldr	r2, [r3, #16]
 800b264:	4b7b      	ldr	r3, [pc, #492]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d908      	bls.n	800b282 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b270:	4b78      	ldr	r3, [pc, #480]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b272:	699b      	ldr	r3, [r3, #24]
 800b274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	4975      	ldr	r1, [pc, #468]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0308 	and.w	r3, r3, #8
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d010      	beq.n	800b2b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	695a      	ldr	r2, [r3, #20]
 800b292:	4b70      	ldr	r3, [pc, #448]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d908      	bls.n	800b2b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b29e:	4b6d      	ldr	r3, [pc, #436]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b2a0:	69db      	ldr	r3, [r3, #28]
 800b2a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	496a      	ldr	r1, [pc, #424]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f003 0310 	and.w	r3, r3, #16
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d010      	beq.n	800b2de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	699a      	ldr	r2, [r3, #24]
 800b2c0:	4b64      	ldr	r3, [pc, #400]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d908      	bls.n	800b2de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2cc:	4b61      	ldr	r3, [pc, #388]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	495e      	ldr	r1, [pc, #376]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0320 	and.w	r3, r3, #32
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d010      	beq.n	800b30c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	69da      	ldr	r2, [r3, #28]
 800b2ee:	4b59      	ldr	r3, [pc, #356]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b2f0:	6a1b      	ldr	r3, [r3, #32]
 800b2f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d908      	bls.n	800b30c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b2fa:	4b56      	ldr	r3, [pc, #344]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	4953      	ldr	r1, [pc, #332]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b308:	4313      	orrs	r3, r2
 800b30a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 0302 	and.w	r3, r3, #2
 800b314:	2b00      	cmp	r3, #0
 800b316:	d010      	beq.n	800b33a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	4b4d      	ldr	r3, [pc, #308]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	f003 030f 	and.w	r3, r3, #15
 800b324:	429a      	cmp	r2, r3
 800b326:	d908      	bls.n	800b33a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b328:	4b4a      	ldr	r3, [pc, #296]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	f023 020f 	bic.w	r2, r3, #15
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	4947      	ldr	r1, [pc, #284]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b336:	4313      	orrs	r3, r2
 800b338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	d055      	beq.n	800b3f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b346:	4b43      	ldr	r3, [pc, #268]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	4940      	ldr	r1, [pc, #256]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b354:	4313      	orrs	r3, r2
 800b356:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d107      	bne.n	800b370 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b360:	4b3c      	ldr	r3, [pc, #240]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d121      	bne.n	800b3b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e0f6      	b.n	800b55e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	2b03      	cmp	r3, #3
 800b376:	d107      	bne.n	800b388 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b378:	4b36      	ldr	r3, [pc, #216]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d115      	bne.n	800b3b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e0ea      	b.n	800b55e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d107      	bne.n	800b3a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b390:	4b30      	ldr	r3, [pc, #192]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d109      	bne.n	800b3b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e0de      	b.n	800b55e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3a0:	4b2c      	ldr	r3, [pc, #176]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e0d6      	b.n	800b55e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b3b0:	4b28      	ldr	r3, [pc, #160]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	f023 0207 	bic.w	r2, r3, #7
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	4925      	ldr	r1, [pc, #148]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3c2:	f7f9 ff1d 	bl	8005200 <HAL_GetTick>
 800b3c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3c8:	e00a      	b.n	800b3e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3ca:	f7f9 ff19 	bl	8005200 <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d901      	bls.n	800b3e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e0be      	b.n	800b55e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3e0:	4b1c      	ldr	r3, [pc, #112]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	00db      	lsls	r3, r3, #3
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d1eb      	bne.n	800b3ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 0302 	and.w	r3, r3, #2
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d010      	beq.n	800b420 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68da      	ldr	r2, [r3, #12]
 800b402:	4b14      	ldr	r3, [pc, #80]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b404:	699b      	ldr	r3, [r3, #24]
 800b406:	f003 030f 	and.w	r3, r3, #15
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d208      	bcs.n	800b420 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b40e:	4b11      	ldr	r3, [pc, #68]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	f023 020f 	bic.w	r2, r3, #15
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	490e      	ldr	r1, [pc, #56]	; (800b454 <HAL_RCC_ClockConfig+0x244>)
 800b41c:	4313      	orrs	r3, r2
 800b41e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b420:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <HAL_RCC_ClockConfig+0x240>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f003 030f 	and.w	r3, r3, #15
 800b428:	683a      	ldr	r2, [r7, #0]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d214      	bcs.n	800b458 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b42e:	4b08      	ldr	r3, [pc, #32]	; (800b450 <HAL_RCC_ClockConfig+0x240>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f023 020f 	bic.w	r2, r3, #15
 800b436:	4906      	ldr	r1, [pc, #24]	; (800b450 <HAL_RCC_ClockConfig+0x240>)
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b43e:	4b04      	ldr	r3, [pc, #16]	; (800b450 <HAL_RCC_ClockConfig+0x240>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 030f 	and.w	r3, r3, #15
 800b446:	683a      	ldr	r2, [r7, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d005      	beq.n	800b458 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e086      	b.n	800b55e <HAL_RCC_ClockConfig+0x34e>
 800b450:	52002000 	.word	0x52002000
 800b454:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f003 0304 	and.w	r3, r3, #4
 800b460:	2b00      	cmp	r3, #0
 800b462:	d010      	beq.n	800b486 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	691a      	ldr	r2, [r3, #16]
 800b468:	4b3f      	ldr	r3, [pc, #252]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b470:	429a      	cmp	r2, r3
 800b472:	d208      	bcs.n	800b486 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b474:	4b3c      	ldr	r3, [pc, #240]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	4939      	ldr	r1, [pc, #228]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b482:	4313      	orrs	r3, r2
 800b484:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0308 	and.w	r3, r3, #8
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d010      	beq.n	800b4b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	695a      	ldr	r2, [r3, #20]
 800b496:	4b34      	ldr	r3, [pc, #208]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d208      	bcs.n	800b4b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4a2:	4b31      	ldr	r3, [pc, #196]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b4a4:	69db      	ldr	r3, [r3, #28]
 800b4a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	492e      	ldr	r1, [pc, #184]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 0310 	and.w	r3, r3, #16
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d010      	beq.n	800b4e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	699a      	ldr	r2, [r3, #24]
 800b4c4:	4b28      	ldr	r3, [pc, #160]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b4c6:	69db      	ldr	r3, [r3, #28]
 800b4c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d208      	bcs.n	800b4e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b4d0:	4b25      	ldr	r3, [pc, #148]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b4d2:	69db      	ldr	r3, [r3, #28]
 800b4d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	699b      	ldr	r3, [r3, #24]
 800b4dc:	4922      	ldr	r1, [pc, #136]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 0320 	and.w	r3, r3, #32
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d010      	beq.n	800b510 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	69da      	ldr	r2, [r3, #28]
 800b4f2:	4b1d      	ldr	r3, [pc, #116]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b4f4:	6a1b      	ldr	r3, [r3, #32]
 800b4f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d208      	bcs.n	800b510 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b4fe:	4b1a      	ldr	r3, [pc, #104]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	69db      	ldr	r3, [r3, #28]
 800b50a:	4917      	ldr	r1, [pc, #92]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b50c:	4313      	orrs	r3, r2
 800b50e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b510:	f000 f834 	bl	800b57c <HAL_RCC_GetSysClockFreq>
 800b514:	4602      	mov	r2, r0
 800b516:	4b14      	ldr	r3, [pc, #80]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	0a1b      	lsrs	r3, r3, #8
 800b51c:	f003 030f 	and.w	r3, r3, #15
 800b520:	4912      	ldr	r1, [pc, #72]	; (800b56c <HAL_RCC_ClockConfig+0x35c>)
 800b522:	5ccb      	ldrb	r3, [r1, r3]
 800b524:	f003 031f 	and.w	r3, r3, #31
 800b528:	fa22 f303 	lsr.w	r3, r2, r3
 800b52c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b52e:	4b0e      	ldr	r3, [pc, #56]	; (800b568 <HAL_RCC_ClockConfig+0x358>)
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	f003 030f 	and.w	r3, r3, #15
 800b536:	4a0d      	ldr	r2, [pc, #52]	; (800b56c <HAL_RCC_ClockConfig+0x35c>)
 800b538:	5cd3      	ldrb	r3, [r2, r3]
 800b53a:	f003 031f 	and.w	r3, r3, #31
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	fa22 f303 	lsr.w	r3, r2, r3
 800b544:	4a0a      	ldr	r2, [pc, #40]	; (800b570 <HAL_RCC_ClockConfig+0x360>)
 800b546:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b548:	4a0a      	ldr	r2, [pc, #40]	; (800b574 <HAL_RCC_ClockConfig+0x364>)
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b54e:	4b0a      	ldr	r3, [pc, #40]	; (800b578 <HAL_RCC_ClockConfig+0x368>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4618      	mov	r0, r3
 800b554:	f7f9 fe0a 	bl	800516c <HAL_InitTick>
 800b558:	4603      	mov	r3, r0
 800b55a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	58024400 	.word	0x58024400
 800b56c:	0801460c 	.word	0x0801460c
 800b570:	24000018 	.word	0x24000018
 800b574:	24000014 	.word	0x24000014
 800b578:	2400001c 	.word	0x2400001c

0800b57c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b089      	sub	sp, #36	; 0x24
 800b580:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b582:	4bb3      	ldr	r3, [pc, #716]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b58a:	2b18      	cmp	r3, #24
 800b58c:	f200 8155 	bhi.w	800b83a <HAL_RCC_GetSysClockFreq+0x2be>
 800b590:	a201      	add	r2, pc, #4	; (adr r2, 800b598 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b596:	bf00      	nop
 800b598:	0800b5fd 	.word	0x0800b5fd
 800b59c:	0800b83b 	.word	0x0800b83b
 800b5a0:	0800b83b 	.word	0x0800b83b
 800b5a4:	0800b83b 	.word	0x0800b83b
 800b5a8:	0800b83b 	.word	0x0800b83b
 800b5ac:	0800b83b 	.word	0x0800b83b
 800b5b0:	0800b83b 	.word	0x0800b83b
 800b5b4:	0800b83b 	.word	0x0800b83b
 800b5b8:	0800b623 	.word	0x0800b623
 800b5bc:	0800b83b 	.word	0x0800b83b
 800b5c0:	0800b83b 	.word	0x0800b83b
 800b5c4:	0800b83b 	.word	0x0800b83b
 800b5c8:	0800b83b 	.word	0x0800b83b
 800b5cc:	0800b83b 	.word	0x0800b83b
 800b5d0:	0800b83b 	.word	0x0800b83b
 800b5d4:	0800b83b 	.word	0x0800b83b
 800b5d8:	0800b629 	.word	0x0800b629
 800b5dc:	0800b83b 	.word	0x0800b83b
 800b5e0:	0800b83b 	.word	0x0800b83b
 800b5e4:	0800b83b 	.word	0x0800b83b
 800b5e8:	0800b83b 	.word	0x0800b83b
 800b5ec:	0800b83b 	.word	0x0800b83b
 800b5f0:	0800b83b 	.word	0x0800b83b
 800b5f4:	0800b83b 	.word	0x0800b83b
 800b5f8:	0800b62f 	.word	0x0800b62f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5fc:	4b94      	ldr	r3, [pc, #592]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 0320 	and.w	r3, r3, #32
 800b604:	2b00      	cmp	r3, #0
 800b606:	d009      	beq.n	800b61c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b608:	4b91      	ldr	r3, [pc, #580]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	08db      	lsrs	r3, r3, #3
 800b60e:	f003 0303 	and.w	r3, r3, #3
 800b612:	4a90      	ldr	r2, [pc, #576]	; (800b854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b614:	fa22 f303 	lsr.w	r3, r2, r3
 800b618:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b61a:	e111      	b.n	800b840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b61c:	4b8d      	ldr	r3, [pc, #564]	; (800b854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b61e:	61bb      	str	r3, [r7, #24]
    break;
 800b620:	e10e      	b.n	800b840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b622:	4b8d      	ldr	r3, [pc, #564]	; (800b858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b624:	61bb      	str	r3, [r7, #24]
    break;
 800b626:	e10b      	b.n	800b840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b628:	4b8c      	ldr	r3, [pc, #560]	; (800b85c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b62a:	61bb      	str	r3, [r7, #24]
    break;
 800b62c:	e108      	b.n	800b840 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b62e:	4b88      	ldr	r3, [pc, #544]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b638:	4b85      	ldr	r3, [pc, #532]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63c:	091b      	lsrs	r3, r3, #4
 800b63e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b642:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b644:	4b82      	ldr	r3, [pc, #520]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b648:	f003 0301 	and.w	r3, r3, #1
 800b64c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b64e:	4b80      	ldr	r3, [pc, #512]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b652:	08db      	lsrs	r3, r3, #3
 800b654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	fb02 f303 	mul.w	r3, r2, r3
 800b65e:	ee07 3a90 	vmov	s15, r3
 800b662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b666:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 80e1 	beq.w	800b834 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b02      	cmp	r3, #2
 800b676:	f000 8083 	beq.w	800b780 <HAL_RCC_GetSysClockFreq+0x204>
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	f200 80a1 	bhi.w	800b7c4 <HAL_RCC_GetSysClockFreq+0x248>
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d003      	beq.n	800b690 <HAL_RCC_GetSysClockFreq+0x114>
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d056      	beq.n	800b73c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b68e:	e099      	b.n	800b7c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b690:	4b6f      	ldr	r3, [pc, #444]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0320 	and.w	r3, r3, #32
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d02d      	beq.n	800b6f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b69c:	4b6c      	ldr	r3, [pc, #432]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	08db      	lsrs	r3, r3, #3
 800b6a2:	f003 0303 	and.w	r3, r3, #3
 800b6a6:	4a6b      	ldr	r2, [pc, #428]	; (800b854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b6a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	ee07 3a90 	vmov	s15, r3
 800b6b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	ee07 3a90 	vmov	s15, r3
 800b6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c6:	4b62      	ldr	r3, [pc, #392]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6da:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b860 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b6f6:	e087      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	ee07 3a90 	vmov	s15, r3
 800b6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b702:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b864 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70a:	4b51      	ldr	r3, [pc, #324]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b71e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b860 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b73a:	e065      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b746:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b74e:	4b40      	ldr	r3, [pc, #256]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b75e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b762:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b860 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b76e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b77e:	e043      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b86c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b792:	4b2f      	ldr	r3, [pc, #188]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79a:	ee07 3a90 	vmov	s15, r3
 800b79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b860 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7c2:	e021      	b.n	800b808 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	ee07 3a90 	vmov	s15, r3
 800b7ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7d6:	4b1e      	ldr	r3, [pc, #120]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7de:	ee07 3a90 	vmov	s15, r3
 800b7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b860 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b806:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b808:	4b11      	ldr	r3, [pc, #68]	; (800b850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b80c:	0a5b      	lsrs	r3, r3, #9
 800b80e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b812:	3301      	adds	r3, #1
 800b814:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	ee07 3a90 	vmov	s15, r3
 800b81c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b820:	edd7 6a07 	vldr	s13, [r7, #28]
 800b824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b82c:	ee17 3a90 	vmov	r3, s15
 800b830:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b832:	e005      	b.n	800b840 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	61bb      	str	r3, [r7, #24]
    break;
 800b838:	e002      	b.n	800b840 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b83a:	4b07      	ldr	r3, [pc, #28]	; (800b858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b83c:	61bb      	str	r3, [r7, #24]
    break;
 800b83e:	bf00      	nop
  }

  return sysclockfreq;
 800b840:	69bb      	ldr	r3, [r7, #24]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3724      	adds	r7, #36	; 0x24
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	58024400 	.word	0x58024400
 800b854:	03d09000 	.word	0x03d09000
 800b858:	003d0900 	.word	0x003d0900
 800b85c:	017d7840 	.word	0x017d7840
 800b860:	46000000 	.word	0x46000000
 800b864:	4c742400 	.word	0x4c742400
 800b868:	4a742400 	.word	0x4a742400
 800b86c:	4bbebc20 	.word	0x4bbebc20

0800b870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b876:	f7ff fe81 	bl	800b57c <HAL_RCC_GetSysClockFreq>
 800b87a:	4602      	mov	r2, r0
 800b87c:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	0a1b      	lsrs	r3, r3, #8
 800b882:	f003 030f 	and.w	r3, r3, #15
 800b886:	490f      	ldr	r1, [pc, #60]	; (800b8c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b888:	5ccb      	ldrb	r3, [r1, r3]
 800b88a:	f003 031f 	and.w	r3, r3, #31
 800b88e:	fa22 f303 	lsr.w	r3, r2, r3
 800b892:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b894:	4b0a      	ldr	r3, [pc, #40]	; (800b8c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	f003 030f 	and.w	r3, r3, #15
 800b89c:	4a09      	ldr	r2, [pc, #36]	; (800b8c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b89e:	5cd3      	ldrb	r3, [r2, r3]
 800b8a0:	f003 031f 	and.w	r3, r3, #31
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b8aa:	4a07      	ldr	r2, [pc, #28]	; (800b8c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b8ae:	4a07      	ldr	r2, [pc, #28]	; (800b8cc <HAL_RCC_GetHCLKFreq+0x5c>)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b8b4:	4b04      	ldr	r3, [pc, #16]	; (800b8c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	58024400 	.word	0x58024400
 800b8c4:	0801460c 	.word	0x0801460c
 800b8c8:	24000018 	.word	0x24000018
 800b8cc:	24000014 	.word	0x24000014

0800b8d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b8d4:	f7ff ffcc 	bl	800b870 <HAL_RCC_GetHCLKFreq>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	4b06      	ldr	r3, [pc, #24]	; (800b8f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	091b      	lsrs	r3, r3, #4
 800b8e0:	f003 0307 	and.w	r3, r3, #7
 800b8e4:	4904      	ldr	r1, [pc, #16]	; (800b8f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8e6:	5ccb      	ldrb	r3, [r1, r3]
 800b8e8:	f003 031f 	and.w	r3, r3, #31
 800b8ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	58024400 	.word	0x58024400
 800b8f8:	0801460c 	.word	0x0801460c

0800b8fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b900:	f7ff ffb6 	bl	800b870 <HAL_RCC_GetHCLKFreq>
 800b904:	4602      	mov	r2, r0
 800b906:	4b06      	ldr	r3, [pc, #24]	; (800b920 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	0a1b      	lsrs	r3, r3, #8
 800b90c:	f003 0307 	and.w	r3, r3, #7
 800b910:	4904      	ldr	r1, [pc, #16]	; (800b924 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b912:	5ccb      	ldrb	r3, [r1, r3]
 800b914:	f003 031f 	and.w	r3, r3, #31
 800b918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	58024400 	.word	0x58024400
 800b924:	0801460c 	.word	0x0801460c

0800b928 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b930:	2300      	movs	r3, #0
 800b932:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b934:	2300      	movs	r3, #0
 800b936:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d03f      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b94c:	d02a      	beq.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b94e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b952:	d824      	bhi.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b958:	d018      	beq.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b95a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b95e:	d81e      	bhi.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b960:	2b00      	cmp	r3, #0
 800b962:	d003      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b968:	d007      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b96a:	e018      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b96c:	4bab      	ldr	r3, [pc, #684]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b970:	4aaa      	ldr	r2, [pc, #680]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b978:	e015      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3304      	adds	r3, #4
 800b97e:	2102      	movs	r1, #2
 800b980:	4618      	mov	r0, r3
 800b982:	f001 f9cf 	bl	800cd24 <RCCEx_PLL2_Config>
 800b986:	4603      	mov	r3, r0
 800b988:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b98a:	e00c      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	3324      	adds	r3, #36	; 0x24
 800b990:	2102      	movs	r1, #2
 800b992:	4618      	mov	r0, r3
 800b994:	f001 fa78 	bl	800ce88 <RCCEx_PLL3_Config>
 800b998:	4603      	mov	r3, r0
 800b99a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b99c:	e003      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	75fb      	strb	r3, [r7, #23]
      break;
 800b9a2:	e000      	b.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b9a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d109      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b9ac:	4b9b      	ldr	r3, [pc, #620]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b8:	4998      	ldr	r1, [pc, #608]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	650b      	str	r3, [r1, #80]	; 0x50
 800b9be:	e001      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d03d      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d4:	2b04      	cmp	r3, #4
 800b9d6:	d826      	bhi.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b9d8:	a201      	add	r2, pc, #4	; (adr r2, 800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9de:	bf00      	nop
 800b9e0:	0800b9f5 	.word	0x0800b9f5
 800b9e4:	0800ba03 	.word	0x0800ba03
 800b9e8:	0800ba15 	.word	0x0800ba15
 800b9ec:	0800ba2d 	.word	0x0800ba2d
 800b9f0:	0800ba2d 	.word	0x0800ba2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9f4:	4b89      	ldr	r3, [pc, #548]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f8:	4a88      	ldr	r2, [pc, #544]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba00:	e015      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	3304      	adds	r3, #4
 800ba06:	2100      	movs	r1, #0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f001 f98b 	bl	800cd24 <RCCEx_PLL2_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba12:	e00c      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	3324      	adds	r3, #36	; 0x24
 800ba18:	2100      	movs	r1, #0
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f001 fa34 	bl	800ce88 <RCCEx_PLL3_Config>
 800ba20:	4603      	mov	r3, r0
 800ba22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ba24:	e003      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	75fb      	strb	r3, [r7, #23]
      break;
 800ba2a:	e000      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ba2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d109      	bne.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba34:	4b79      	ldr	r3, [pc, #484]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba38:	f023 0207 	bic.w	r2, r3, #7
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba40:	4976      	ldr	r1, [pc, #472]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba42:	4313      	orrs	r3, r2
 800ba44:	650b      	str	r3, [r1, #80]	; 0x50
 800ba46:	e001      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba48:	7dfb      	ldrb	r3, [r7, #23]
 800ba4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d042      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba60:	d02b      	beq.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ba62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba66:	d825      	bhi.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ba68:	2bc0      	cmp	r3, #192	; 0xc0
 800ba6a:	d028      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ba6c:	2bc0      	cmp	r3, #192	; 0xc0
 800ba6e:	d821      	bhi.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ba70:	2b80      	cmp	r3, #128	; 0x80
 800ba72:	d016      	beq.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ba74:	2b80      	cmp	r3, #128	; 0x80
 800ba76:	d81d      	bhi.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ba7c:	2b40      	cmp	r3, #64	; 0x40
 800ba7e:	d007      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ba80:	e018      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba82:	4b66      	ldr	r3, [pc, #408]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba86:	4a65      	ldr	r2, [pc, #404]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ba8e:	e017      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	3304      	adds	r3, #4
 800ba94:	2100      	movs	r1, #0
 800ba96:	4618      	mov	r0, r3
 800ba98:	f001 f944 	bl	800cd24 <RCCEx_PLL2_Config>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800baa0:	e00e      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3324      	adds	r3, #36	; 0x24
 800baa6:	2100      	movs	r1, #0
 800baa8:	4618      	mov	r0, r3
 800baaa:	f001 f9ed 	bl	800ce88 <RCCEx_PLL3_Config>
 800baae:	4603      	mov	r3, r0
 800bab0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bab2:	e005      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	75fb      	strb	r3, [r7, #23]
      break;
 800bab8:	e002      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800baba:	bf00      	nop
 800babc:	e000      	b.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800babe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bac0:	7dfb      	ldrb	r3, [r7, #23]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d109      	bne.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bac6:	4b55      	ldr	r3, [pc, #340]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad2:	4952      	ldr	r1, [pc, #328]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bad4:	4313      	orrs	r3, r2
 800bad6:	650b      	str	r3, [r1, #80]	; 0x50
 800bad8:	e001      	b.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bada:	7dfb      	ldrb	r3, [r7, #23]
 800badc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d049      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800baf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800baf4:	d030      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800baf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bafa:	d82a      	bhi.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bafc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb00:	d02c      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800bb02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bb06:	d824      	bhi.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bb08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb0c:	d018      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800bb0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb12:	d81e      	bhi.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d003      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800bb18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb1c:	d007      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bb1e:	e018      	b.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb20:	4b3e      	ldr	r3, [pc, #248]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb24:	4a3d      	ldr	r2, [pc, #244]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb2c:	e017      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3304      	adds	r3, #4
 800bb32:	2100      	movs	r1, #0
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 f8f5 	bl	800cd24 <RCCEx_PLL2_Config>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bb3e:	e00e      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	3324      	adds	r3, #36	; 0x24
 800bb44:	2100      	movs	r1, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f001 f99e 	bl	800ce88 <RCCEx_PLL3_Config>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb50:	e005      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bb52:	2301      	movs	r3, #1
 800bb54:	75fb      	strb	r3, [r7, #23]
      break;
 800bb56:	e002      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bb58:	bf00      	nop
 800bb5a:	e000      	b.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bb5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10a      	bne.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bb64:	4b2d      	ldr	r3, [pc, #180]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb68:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb72:	492a      	ldr	r1, [pc, #168]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	658b      	str	r3, [r1, #88]	; 0x58
 800bb78:	e001      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb7a:	7dfb      	ldrb	r3, [r7, #23]
 800bb7c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d04c      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb94:	d030      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bb96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb9a:	d82a      	bhi.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bb9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bba0:	d02c      	beq.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800bba2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bba6:	d824      	bhi.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbac:	d018      	beq.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bbae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbb2:	d81e      	bhi.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d003      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bbb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bbbc:	d007      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bbbe:	e018      	b.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbc0:	4b16      	ldr	r3, [pc, #88]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc4:	4a15      	ldr	r2, [pc, #84]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bbcc:	e017      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 f8a5 	bl	800cd24 <RCCEx_PLL2_Config>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bbde:	e00e      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3324      	adds	r3, #36	; 0x24
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f001 f94e 	bl	800ce88 <RCCEx_PLL3_Config>
 800bbec:	4603      	mov	r3, r0
 800bbee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bbf0:	e005      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	75fb      	strb	r3, [r7, #23]
      break;
 800bbf6:	e002      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800bbf8:	bf00      	nop
 800bbfa:	e000      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800bbfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10d      	bne.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc04:	4b05      	ldr	r3, [pc, #20]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc08:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bc12:	4902      	ldr	r1, [pc, #8]	; (800bc1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bc14:	4313      	orrs	r3, r2
 800bc16:	658b      	str	r3, [r1, #88]	; 0x58
 800bc18:	e004      	b.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800bc1a:	bf00      	nop
 800bc1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d032      	beq.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc34:	2b30      	cmp	r3, #48	; 0x30
 800bc36:	d01c      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800bc38:	2b30      	cmp	r3, #48	; 0x30
 800bc3a:	d817      	bhi.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800bc3c:	2b20      	cmp	r3, #32
 800bc3e:	d00c      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800bc40:	2b20      	cmp	r3, #32
 800bc42:	d813      	bhi.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d016      	beq.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800bc48:	2b10      	cmp	r3, #16
 800bc4a:	d10f      	bne.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc4c:	4baf      	ldr	r3, [pc, #700]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc50:	4aae      	ldr	r2, [pc, #696]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bc58:	e00e      	b.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	3304      	adds	r3, #4
 800bc5e:	2102      	movs	r1, #2
 800bc60:	4618      	mov	r0, r3
 800bc62:	f001 f85f 	bl	800cd24 <RCCEx_PLL2_Config>
 800bc66:	4603      	mov	r3, r0
 800bc68:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bc6a:	e005      	b.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	75fb      	strb	r3, [r7, #23]
      break;
 800bc70:	e002      	b.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800bc72:	bf00      	nop
 800bc74:	e000      	b.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800bc76:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d109      	bne.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bc7e:	4ba3      	ldr	r3, [pc, #652]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc8a:	49a0      	ldr	r1, [pc, #640]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bc90:	e001      	b.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc92:	7dfb      	ldrb	r3, [r7, #23]
 800bc94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d047      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcaa:	d030      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800bcac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcb0:	d82a      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bcb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcb6:	d02c      	beq.n	800bd12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800bcb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcbc:	d824      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bcbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcc2:	d018      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800bcc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcc8:	d81e      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d003      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800bcce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcd2:	d007      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800bcd4:	e018      	b.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcd6:	4b8d      	ldr	r3, [pc, #564]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bcd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcda:	4a8c      	ldr	r2, [pc, #560]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bcdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bce0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bce2:	e017      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	3304      	adds	r3, #4
 800bce8:	2100      	movs	r1, #0
 800bcea:	4618      	mov	r0, r3
 800bcec:	f001 f81a 	bl	800cd24 <RCCEx_PLL2_Config>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bcf4:	e00e      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	3324      	adds	r3, #36	; 0x24
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f001 f8c3 	bl	800ce88 <RCCEx_PLL3_Config>
 800bd02:	4603      	mov	r3, r0
 800bd04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bd06:	e005      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	75fb      	strb	r3, [r7, #23]
      break;
 800bd0c:	e002      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800bd0e:	bf00      	nop
 800bd10:	e000      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800bd12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd14:	7dfb      	ldrb	r3, [r7, #23]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d109      	bne.n	800bd2e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd1a:	4b7c      	ldr	r3, [pc, #496]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd1e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd26:	4979      	ldr	r1, [pc, #484]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	650b      	str	r3, [r1, #80]	; 0x50
 800bd2c:	e001      	b.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
 800bd30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d049      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd46:	d02e      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800bd48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd4c:	d828      	bhi.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bd4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd52:	d02a      	beq.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0x482>
 800bd54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd58:	d822      	bhi.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bd5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd5e:	d026      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x486>
 800bd60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd64:	d81c      	bhi.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bd66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd6a:	d010      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800bd6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd70:	d816      	bhi.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d01d      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800bd76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd7a:	d111      	bne.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	2101      	movs	r1, #1
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 ffce 	bl	800cd24 <RCCEx_PLL2_Config>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bd8c:	e012      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	3324      	adds	r3, #36	; 0x24
 800bd92:	2101      	movs	r1, #1
 800bd94:	4618      	mov	r0, r3
 800bd96:	f001 f877 	bl	800ce88 <RCCEx_PLL3_Config>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bd9e:	e009      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	75fb      	strb	r3, [r7, #23]
      break;
 800bda4:	e006      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bda6:	bf00      	nop
 800bda8:	e004      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bdaa:	bf00      	nop
 800bdac:	e002      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bdae:	bf00      	nop
 800bdb0:	e000      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bdb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bdb4:	7dfb      	ldrb	r3, [r7, #23]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d109      	bne.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bdba:	4b54      	ldr	r3, [pc, #336]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bdbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdbe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdc6:	4951      	ldr	r1, [pc, #324]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	650b      	str	r3, [r1, #80]	; 0x50
 800bdcc:	e001      	b.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdce:	7dfb      	ldrb	r3, [r7, #23]
 800bdd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d04b      	beq.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bde4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bde8:	d02e      	beq.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800bdea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdee:	d828      	bhi.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bdf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdf4:	d02a      	beq.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800bdf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdfa:	d822      	bhi.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bdfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be00:	d026      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800be02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be06:	d81c      	bhi.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800be08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be0c:	d010      	beq.n	800be30 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800be0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be12:	d816      	bhi.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800be14:	2b00      	cmp	r3, #0
 800be16:	d01d      	beq.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800be18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be1c:	d111      	bne.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	3304      	adds	r3, #4
 800be22:	2101      	movs	r1, #1
 800be24:	4618      	mov	r0, r3
 800be26:	f000 ff7d 	bl	800cd24 <RCCEx_PLL2_Config>
 800be2a:	4603      	mov	r3, r0
 800be2c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800be2e:	e012      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	3324      	adds	r3, #36	; 0x24
 800be34:	2101      	movs	r1, #1
 800be36:	4618      	mov	r0, r3
 800be38:	f001 f826 	bl	800ce88 <RCCEx_PLL3_Config>
 800be3c:	4603      	mov	r3, r0
 800be3e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800be40:	e009      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	75fb      	strb	r3, [r7, #23]
      break;
 800be46:	e006      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800be48:	bf00      	nop
 800be4a:	e004      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800be4c:	bf00      	nop
 800be4e:	e002      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800be50:	bf00      	nop
 800be52:	e000      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800be54:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be56:	7dfb      	ldrb	r3, [r7, #23]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d10a      	bne.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800be5c:	4b2b      	ldr	r3, [pc, #172]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800be5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be60:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800be6a:	4928      	ldr	r1, [pc, #160]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800be6c:	4313      	orrs	r3, r2
 800be6e:	658b      	str	r3, [r1, #88]	; 0x58
 800be70:	e001      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d02f      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be8a:	d00e      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x582>
 800be8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be90:	d814      	bhi.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x594>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d015      	beq.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800be96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be9a:	d10f      	bne.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be9c:	4b1b      	ldr	r3, [pc, #108]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	4a1a      	ldr	r2, [pc, #104]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800bea8:	e00c      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3304      	adds	r3, #4
 800beae:	2101      	movs	r1, #1
 800beb0:	4618      	mov	r0, r3
 800beb2:	f000 ff37 	bl	800cd24 <RCCEx_PLL2_Config>
 800beb6:	4603      	mov	r3, r0
 800beb8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800beba:	e003      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bebc:	2301      	movs	r3, #1
 800bebe:	75fb      	strb	r3, [r7, #23]
      break;
 800bec0:	e000      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800bec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bec4:	7dfb      	ldrb	r3, [r7, #23]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d109      	bne.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800beca:	4b10      	ldr	r3, [pc, #64]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800becc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bece:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bed6:	490d      	ldr	r1, [pc, #52]	; (800bf0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bed8:	4313      	orrs	r3, r2
 800beda:	650b      	str	r3, [r1, #80]	; 0x50
 800bedc:	e001      	b.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800beea:	2b00      	cmp	r3, #0
 800beec:	d033      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef2:	2b03      	cmp	r3, #3
 800bef4:	d81c      	bhi.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800bef6:	a201      	add	r2, pc, #4	; (adr r2, 800befc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800bef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befc:	0800bf37 	.word	0x0800bf37
 800bf00:	0800bf11 	.word	0x0800bf11
 800bf04:	0800bf1f 	.word	0x0800bf1f
 800bf08:	0800bf37 	.word	0x0800bf37
 800bf0c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf10:	4bb8      	ldr	r3, [pc, #736]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf14:	4ab7      	ldr	r2, [pc, #732]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bf1c:	e00c      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	3304      	adds	r3, #4
 800bf22:	2102      	movs	r1, #2
 800bf24:	4618      	mov	r0, r3
 800bf26:	f000 fefd 	bl	800cd24 <RCCEx_PLL2_Config>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bf2e:	e003      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	75fb      	strb	r3, [r7, #23]
      break;
 800bf34:	e000      	b.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bf36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d109      	bne.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bf3e:	4bad      	ldr	r3, [pc, #692]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf42:	f023 0203 	bic.w	r2, r3, #3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf4a:	49aa      	ldr	r1, [pc, #680]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bf50:	e001      	b.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf52:	7dfb      	ldrb	r3, [r7, #23]
 800bf54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 8086 	beq.w	800c070 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf64:	4ba4      	ldr	r3, [pc, #656]	; (800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4aa3      	ldr	r2, [pc, #652]	; (800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bf6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf70:	f7f9 f946 	bl	8005200 <HAL_GetTick>
 800bf74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf76:	e009      	b.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf78:	f7f9 f942 	bl	8005200 <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	2b64      	cmp	r3, #100	; 0x64
 800bf84:	d902      	bls.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bf86:	2303      	movs	r3, #3
 800bf88:	75fb      	strb	r3, [r7, #23]
        break;
 800bf8a:	e005      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf8c:	4b9a      	ldr	r3, [pc, #616]	; (800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d0ef      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bf98:	7dfb      	ldrb	r3, [r7, #23]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d166      	bne.n	800c06c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf9e:	4b95      	ldr	r3, [pc, #596]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfa8:	4053      	eors	r3, r2
 800bfaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d013      	beq.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bfb2:	4b90      	ldr	r3, [pc, #576]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bfbc:	4b8d      	ldr	r3, [pc, #564]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfc0:	4a8c      	ldr	r2, [pc, #560]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bfc8:	4b8a      	ldr	r3, [pc, #552]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfcc:	4a89      	ldr	r2, [pc, #548]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfd2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bfd4:	4a87      	ldr	r2, [pc, #540]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfe4:	d115      	bne.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfe6:	f7f9 f90b 	bl	8005200 <HAL_GetTick>
 800bfea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfec:	e00b      	b.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfee:	f7f9 f907 	bl	8005200 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d902      	bls.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	75fb      	strb	r3, [r7, #23]
            break;
 800c004:	e005      	b.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c006:	4b7b      	ldr	r3, [pc, #492]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c00a:	f003 0302 	and.w	r3, r3, #2
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0ed      	beq.n	800bfee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c012:	7dfb      	ldrb	r3, [r7, #23]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d126      	bne.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c01e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c026:	d10d      	bne.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c028:	4b72      	ldr	r3, [pc, #456]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c036:	0919      	lsrs	r1, r3, #4
 800c038:	4b70      	ldr	r3, [pc, #448]	; (800c1fc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800c03a:	400b      	ands	r3, r1
 800c03c:	496d      	ldr	r1, [pc, #436]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	610b      	str	r3, [r1, #16]
 800c042:	e005      	b.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c044:	4b6b      	ldr	r3, [pc, #428]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	4a6a      	ldr	r2, [pc, #424]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c04a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c04e:	6113      	str	r3, [r2, #16]
 800c050:	4b68      	ldr	r3, [pc, #416]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c05a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c05e:	4965      	ldr	r1, [pc, #404]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c060:	4313      	orrs	r3, r2
 800c062:	670b      	str	r3, [r1, #112]	; 0x70
 800c064:	e004      	b.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c066:	7dfb      	ldrb	r3, [r7, #23]
 800c068:	75bb      	strb	r3, [r7, #22]
 800c06a:	e001      	b.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 0301 	and.w	r3, r3, #1
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d07e      	beq.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c080:	2b28      	cmp	r3, #40	; 0x28
 800c082:	d867      	bhi.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c084:	a201      	add	r2, pc, #4	; (adr r2, 800c08c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08a:	bf00      	nop
 800c08c:	0800c15b 	.word	0x0800c15b
 800c090:	0800c155 	.word	0x0800c155
 800c094:	0800c155 	.word	0x0800c155
 800c098:	0800c155 	.word	0x0800c155
 800c09c:	0800c155 	.word	0x0800c155
 800c0a0:	0800c155 	.word	0x0800c155
 800c0a4:	0800c155 	.word	0x0800c155
 800c0a8:	0800c155 	.word	0x0800c155
 800c0ac:	0800c131 	.word	0x0800c131
 800c0b0:	0800c155 	.word	0x0800c155
 800c0b4:	0800c155 	.word	0x0800c155
 800c0b8:	0800c155 	.word	0x0800c155
 800c0bc:	0800c155 	.word	0x0800c155
 800c0c0:	0800c155 	.word	0x0800c155
 800c0c4:	0800c155 	.word	0x0800c155
 800c0c8:	0800c155 	.word	0x0800c155
 800c0cc:	0800c143 	.word	0x0800c143
 800c0d0:	0800c155 	.word	0x0800c155
 800c0d4:	0800c155 	.word	0x0800c155
 800c0d8:	0800c155 	.word	0x0800c155
 800c0dc:	0800c155 	.word	0x0800c155
 800c0e0:	0800c155 	.word	0x0800c155
 800c0e4:	0800c155 	.word	0x0800c155
 800c0e8:	0800c155 	.word	0x0800c155
 800c0ec:	0800c15b 	.word	0x0800c15b
 800c0f0:	0800c155 	.word	0x0800c155
 800c0f4:	0800c155 	.word	0x0800c155
 800c0f8:	0800c155 	.word	0x0800c155
 800c0fc:	0800c155 	.word	0x0800c155
 800c100:	0800c155 	.word	0x0800c155
 800c104:	0800c155 	.word	0x0800c155
 800c108:	0800c155 	.word	0x0800c155
 800c10c:	0800c15b 	.word	0x0800c15b
 800c110:	0800c155 	.word	0x0800c155
 800c114:	0800c155 	.word	0x0800c155
 800c118:	0800c155 	.word	0x0800c155
 800c11c:	0800c155 	.word	0x0800c155
 800c120:	0800c155 	.word	0x0800c155
 800c124:	0800c155 	.word	0x0800c155
 800c128:	0800c155 	.word	0x0800c155
 800c12c:	0800c15b 	.word	0x0800c15b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	3304      	adds	r3, #4
 800c134:	2101      	movs	r1, #1
 800c136:	4618      	mov	r0, r3
 800c138:	f000 fdf4 	bl	800cd24 <RCCEx_PLL2_Config>
 800c13c:	4603      	mov	r3, r0
 800c13e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c140:	e00c      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	3324      	adds	r3, #36	; 0x24
 800c146:	2101      	movs	r1, #1
 800c148:	4618      	mov	r0, r3
 800c14a:	f000 fe9d 	bl	800ce88 <RCCEx_PLL3_Config>
 800c14e:	4603      	mov	r3, r0
 800c150:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c152:	e003      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	75fb      	strb	r3, [r7, #23]
      break;
 800c158:	e000      	b.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800c15a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c15c:	7dfb      	ldrb	r3, [r7, #23]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d109      	bne.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c162:	4b24      	ldr	r3, [pc, #144]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c166:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c16e:	4921      	ldr	r1, [pc, #132]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c170:	4313      	orrs	r3, r2
 800c172:	654b      	str	r3, [r1, #84]	; 0x54
 800c174:	e001      	b.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c176:	7dfb      	ldrb	r3, [r7, #23]
 800c178:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 0302 	and.w	r3, r3, #2
 800c182:	2b00      	cmp	r3, #0
 800c184:	d03e      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c18a:	2b05      	cmp	r3, #5
 800c18c:	d820      	bhi.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800c18e:	a201      	add	r2, pc, #4	; (adr r2, 800c194 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800c190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c194:	0800c1d7 	.word	0x0800c1d7
 800c198:	0800c1ad 	.word	0x0800c1ad
 800c19c:	0800c1bf 	.word	0x0800c1bf
 800c1a0:	0800c1d7 	.word	0x0800c1d7
 800c1a4:	0800c1d7 	.word	0x0800c1d7
 800c1a8:	0800c1d7 	.word	0x0800c1d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f000 fdb6 	bl	800cd24 <RCCEx_PLL2_Config>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c1bc:	e00c      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	3324      	adds	r3, #36	; 0x24
 800c1c2:	2101      	movs	r1, #1
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 fe5f 	bl	800ce88 <RCCEx_PLL3_Config>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c1ce:	e003      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c1d4:	e000      	b.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800c1d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d110      	bne.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c1de:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e2:	f023 0207 	bic.w	r2, r3, #7
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1ea:	4902      	ldr	r1, [pc, #8]	; (800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	654b      	str	r3, [r1, #84]	; 0x54
 800c1f0:	e008      	b.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800c1f2:	bf00      	nop
 800c1f4:	58024400 	.word	0x58024400
 800c1f8:	58024800 	.word	0x58024800
 800c1fc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c200:	7dfb      	ldrb	r3, [r7, #23]
 800c202:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f003 0304 	and.w	r3, r3, #4
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d039      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c216:	2b05      	cmp	r3, #5
 800c218:	d820      	bhi.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800c21a:	a201      	add	r2, pc, #4	; (adr r2, 800c220 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800c21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c220:	0800c263 	.word	0x0800c263
 800c224:	0800c239 	.word	0x0800c239
 800c228:	0800c24b 	.word	0x0800c24b
 800c22c:	0800c263 	.word	0x0800c263
 800c230:	0800c263 	.word	0x0800c263
 800c234:	0800c263 	.word	0x0800c263
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	3304      	adds	r3, #4
 800c23c:	2101      	movs	r1, #1
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fd70 	bl	800cd24 <RCCEx_PLL2_Config>
 800c244:	4603      	mov	r3, r0
 800c246:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c248:	e00c      	b.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3324      	adds	r3, #36	; 0x24
 800c24e:	2101      	movs	r1, #1
 800c250:	4618      	mov	r0, r3
 800c252:	f000 fe19 	bl	800ce88 <RCCEx_PLL3_Config>
 800c256:	4603      	mov	r3, r0
 800c258:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c25a:	e003      	b.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	75fb      	strb	r3, [r7, #23]
      break;
 800c260:	e000      	b.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800c262:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c264:	7dfb      	ldrb	r3, [r7, #23]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d10a      	bne.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c26a:	4bb7      	ldr	r3, [pc, #732]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c26c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c26e:	f023 0207 	bic.w	r2, r3, #7
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c278:	49b3      	ldr	r1, [pc, #716]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c27a:	4313      	orrs	r3, r2
 800c27c:	658b      	str	r3, [r1, #88]	; 0x58
 800c27e:	e001      	b.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f003 0320 	and.w	r3, r3, #32
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d04b      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c29a:	d02e      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800c29c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2a0:	d828      	bhi.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2a6:	d02a      	beq.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2ac:	d822      	bhi.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c2ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2b2:	d026      	beq.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c2b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2b8:	d81c      	bhi.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2be:	d010      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800c2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c4:	d816      	bhi.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d01d      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c2ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2ce:	d111      	bne.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fd24 	bl	800cd24 <RCCEx_PLL2_Config>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c2e0:	e012      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3324      	adds	r3, #36	; 0x24
 800c2e6:	2102      	movs	r1, #2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fdcd 	bl	800ce88 <RCCEx_PLL3_Config>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c2f2:	e009      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	75fb      	strb	r3, [r7, #23]
      break;
 800c2f8:	e006      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c2fa:	bf00      	nop
 800c2fc:	e004      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c2fe:	bf00      	nop
 800c300:	e002      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c302:	bf00      	nop
 800c304:	e000      	b.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c306:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c308:	7dfb      	ldrb	r3, [r7, #23]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10a      	bne.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c30e:	4b8e      	ldr	r3, [pc, #568]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c312:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c31c:	498a      	ldr	r1, [pc, #552]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c31e:	4313      	orrs	r3, r2
 800c320:	654b      	str	r3, [r1, #84]	; 0x54
 800c322:	e001      	b.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c324:	7dfb      	ldrb	r3, [r7, #23]
 800c326:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	d04b      	beq.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c33a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c33e:	d02e      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800c340:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c344:	d828      	bhi.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c34a:	d02a      	beq.n	800c3a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c34c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c350:	d822      	bhi.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c352:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c356:	d026      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c358:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c35c:	d81c      	bhi.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c35e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c362:	d010      	beq.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800c364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c368:	d816      	bhi.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d01d      	beq.n	800c3aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c36e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c372:	d111      	bne.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	3304      	adds	r3, #4
 800c378:	2100      	movs	r1, #0
 800c37a:	4618      	mov	r0, r3
 800c37c:	f000 fcd2 	bl	800cd24 <RCCEx_PLL2_Config>
 800c380:	4603      	mov	r3, r0
 800c382:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c384:	e012      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3324      	adds	r3, #36	; 0x24
 800c38a:	2102      	movs	r1, #2
 800c38c:	4618      	mov	r0, r3
 800c38e:	f000 fd7b 	bl	800ce88 <RCCEx_PLL3_Config>
 800c392:	4603      	mov	r3, r0
 800c394:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c396:	e009      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	75fb      	strb	r3, [r7, #23]
      break;
 800c39c:	e006      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c39e:	bf00      	nop
 800c3a0:	e004      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c3a2:	bf00      	nop
 800c3a4:	e002      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c3a6:	bf00      	nop
 800c3a8:	e000      	b.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c3aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3ac:	7dfb      	ldrb	r3, [r7, #23]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d10a      	bne.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c3b2:	4b65      	ldr	r3, [pc, #404]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c3c0:	4961      	ldr	r1, [pc, #388]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	658b      	str	r3, [r1, #88]	; 0x58
 800c3c6:	e001      	b.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3c8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d04b      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c3de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c3e2:	d02e      	beq.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800c3e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c3e8:	d828      	bhi.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c3ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3ee:	d02a      	beq.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800c3f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3f4:	d822      	bhi.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c3f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c3fa:	d026      	beq.n	800c44a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c3fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c400:	d81c      	bhi.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c406:	d010      	beq.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800c408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c40c:	d816      	bhi.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d01d      	beq.n	800c44e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c416:	d111      	bne.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	3304      	adds	r3, #4
 800c41c:	2100      	movs	r1, #0
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fc80 	bl	800cd24 <RCCEx_PLL2_Config>
 800c424:	4603      	mov	r3, r0
 800c426:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c428:	e012      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	3324      	adds	r3, #36	; 0x24
 800c42e:	2102      	movs	r1, #2
 800c430:	4618      	mov	r0, r3
 800c432:	f000 fd29 	bl	800ce88 <RCCEx_PLL3_Config>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c43a:	e009      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	75fb      	strb	r3, [r7, #23]
      break;
 800c440:	e006      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c442:	bf00      	nop
 800c444:	e004      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c446:	bf00      	nop
 800c448:	e002      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c44a:	bf00      	nop
 800c44c:	e000      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c44e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10a      	bne.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c456:	4b3c      	ldr	r3, [pc, #240]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c45a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c464:	4938      	ldr	r1, [pc, #224]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c466:	4313      	orrs	r3, r2
 800c468:	658b      	str	r3, [r1, #88]	; 0x58
 800c46a:	e001      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c46c:	7dfb      	ldrb	r3, [r7, #23]
 800c46e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f003 0308 	and.w	r3, r3, #8
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d01a      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c486:	d10a      	bne.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3324      	adds	r3, #36	; 0x24
 800c48c:	2102      	movs	r1, #2
 800c48e:	4618      	mov	r0, r3
 800c490:	f000 fcfa 	bl	800ce88 <RCCEx_PLL3_Config>
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c49e:	4b2a      	ldr	r3, [pc, #168]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4ac:	4926      	ldr	r1, [pc, #152]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 0310 	and.w	r3, r3, #16
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d01a      	beq.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4c8:	d10a      	bne.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	3324      	adds	r3, #36	; 0x24
 800c4ce:	2102      	movs	r1, #2
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 fcd9 	bl	800ce88 <RCCEx_PLL3_Config>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d001      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4e0:	4b19      	ldr	r3, [pc, #100]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c4e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4ee:	4916      	ldr	r1, [pc, #88]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d036      	beq.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c50a:	d01f      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c50c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c510:	d817      	bhi.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800c512:	2b00      	cmp	r3, #0
 800c514:	d003      	beq.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800c516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c51a:	d009      	beq.n	800c530 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800c51c:	e011      	b.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3304      	adds	r3, #4
 800c522:	2100      	movs	r1, #0
 800c524:	4618      	mov	r0, r3
 800c526:	f000 fbfd 	bl	800cd24 <RCCEx_PLL2_Config>
 800c52a:	4603      	mov	r3, r0
 800c52c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c52e:	e00e      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3324      	adds	r3, #36	; 0x24
 800c534:	2102      	movs	r1, #2
 800c536:	4618      	mov	r0, r3
 800c538:	f000 fca6 	bl	800ce88 <RCCEx_PLL3_Config>
 800c53c:	4603      	mov	r3, r0
 800c53e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c540:	e005      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	75fb      	strb	r3, [r7, #23]
      break;
 800c546:	e002      	b.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800c548:	58024400 	.word	0x58024400
      break;
 800c54c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c54e:	7dfb      	ldrb	r3, [r7, #23]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10a      	bne.n	800c56a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c554:	4b93      	ldr	r3, [pc, #588]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c558:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c562:	4990      	ldr	r1, [pc, #576]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c564:	4313      	orrs	r3, r2
 800c566:	658b      	str	r3, [r1, #88]	; 0x58
 800c568:	e001      	b.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c56a:	7dfb      	ldrb	r3, [r7, #23]
 800c56c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c576:	2b00      	cmp	r3, #0
 800c578:	d033      	beq.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c580:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c584:	d01c      	beq.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800c586:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c58a:	d816      	bhi.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800c58c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c590:	d003      	beq.n	800c59a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800c592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c596:	d007      	beq.n	800c5a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800c598:	e00f      	b.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c59a:	4b82      	ldr	r3, [pc, #520]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59e:	4a81      	ldr	r2, [pc, #516]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c5a6:	e00c      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3324      	adds	r3, #36	; 0x24
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fc6a 	bl	800ce88 <RCCEx_PLL3_Config>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c5b8:	e003      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	75fb      	strb	r3, [r7, #23]
      break;
 800c5be:	e000      	b.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800c5c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10a      	bne.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5c8:	4b76      	ldr	r3, [pc, #472]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5d6:	4973      	ldr	r1, [pc, #460]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	654b      	str	r3, [r1, #84]	; 0x54
 800c5dc:	e001      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5de:	7dfb      	ldrb	r3, [r7, #23]
 800c5e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d029      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d003      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800c5f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5fa:	d007      	beq.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800c5fc:	e00f      	b.n	800c61e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5fe:	4b69      	ldr	r3, [pc, #420]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c602:	4a68      	ldr	r2, [pc, #416]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c608:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c60a:	e00b      	b.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	3304      	adds	r3, #4
 800c610:	2102      	movs	r1, #2
 800c612:	4618      	mov	r0, r3
 800c614:	f000 fb86 	bl	800cd24 <RCCEx_PLL2_Config>
 800c618:	4603      	mov	r3, r0
 800c61a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c61c:	e002      	b.n	800c624 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	75fb      	strb	r3, [r7, #23]
      break;
 800c622:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c624:	7dfb      	ldrb	r3, [r7, #23]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d109      	bne.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c62a:	4b5e      	ldr	r3, [pc, #376]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c62e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c636:	495b      	ldr	r1, [pc, #364]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c638:	4313      	orrs	r3, r2
 800c63a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c63c:	e001      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
 800c640:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00a      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3324      	adds	r3, #36	; 0x24
 800c652:	2102      	movs	r1, #2
 800c654:	4618      	mov	r0, r3
 800c656:	f000 fc17 	bl	800ce88 <RCCEx_PLL3_Config>
 800c65a:	4603      	mov	r3, r0
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d001      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d030      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c678:	d017      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800c67a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c67e:	d811      	bhi.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c684:	d013      	beq.n	800c6ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c68a:	d80b      	bhi.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d010      	beq.n	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c694:	d106      	bne.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c696:	4b43      	ldr	r3, [pc, #268]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69a:	4a42      	ldr	r2, [pc, #264]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c69c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c6a2:	e007      	b.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	75fb      	strb	r3, [r7, #23]
      break;
 800c6a8:	e004      	b.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c6aa:	bf00      	nop
 800c6ac:	e002      	b.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c6ae:	bf00      	nop
 800c6b0:	e000      	b.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c6b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d109      	bne.n	800c6ce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c6ba:	4b3a      	ldr	r3, [pc, #232]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c6:	4937      	ldr	r1, [pc, #220]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	654b      	str	r3, [r1, #84]	; 0x54
 800c6cc:	e001      	b.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6ce:	7dfb      	ldrb	r3, [r7, #23]
 800c6d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d008      	beq.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c6de:	4b31      	ldr	r3, [pc, #196]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ea:	492e      	ldr	r1, [pc, #184]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d009      	beq.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c6fc:	4b29      	ldr	r3, [pc, #164]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c70a:	4926      	ldr	r1, [pc, #152]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c70c:	4313      	orrs	r3, r2
 800c70e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d008      	beq.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c71c:	4b21      	ldr	r3, [pc, #132]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c720:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c728:	491e      	ldr	r1, [pc, #120]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c72a:	4313      	orrs	r3, r2
 800c72c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00d      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c73a:	4b1a      	ldr	r3, [pc, #104]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	4a19      	ldr	r2, [pc, #100]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c740:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c744:	6113      	str	r3, [r2, #16]
 800c746:	4b17      	ldr	r3, [pc, #92]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c748:	691a      	ldr	r2, [r3, #16]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c750:	4914      	ldr	r1, [pc, #80]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c752:	4313      	orrs	r3, r2
 800c754:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	da08      	bge.n	800c770 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c75e:	4b11      	ldr	r3, [pc, #68]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c762:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c76a:	490e      	ldr	r1, [pc, #56]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c76c:	4313      	orrs	r3, r2
 800c76e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d009      	beq.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c77c:	4b09      	ldr	r3, [pc, #36]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c77e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c780:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c78a:	4906      	ldr	r1, [pc, #24]	; (800c7a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c78c:	4313      	orrs	r3, r2
 800c78e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c790:	7dbb      	ldrb	r3, [r7, #22]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c796:	2300      	movs	r3, #0
 800c798:	e000      	b.n	800c79c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c79a:	2301      	movs	r3, #1
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3718      	adds	r7, #24
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	58024400 	.word	0x58024400

0800c7a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c7ac:	f7ff f860 	bl	800b870 <HAL_RCC_GetHCLKFreq>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c7b4:	6a1b      	ldr	r3, [r3, #32]
 800c7b6:	091b      	lsrs	r3, r3, #4
 800c7b8:	f003 0307 	and.w	r3, r3, #7
 800c7bc:	4904      	ldr	r1, [pc, #16]	; (800c7d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c7be:	5ccb      	ldrb	r3, [r1, r3]
 800c7c0:	f003 031f 	and.w	r3, r3, #31
 800c7c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	58024400 	.word	0x58024400
 800c7d0:	0801460c 	.word	0x0801460c

0800c7d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b089      	sub	sp, #36	; 0x24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7dc:	4ba1      	ldr	r3, [pc, #644]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e0:	f003 0303 	and.w	r3, r3, #3
 800c7e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c7e6:	4b9f      	ldr	r3, [pc, #636]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ea:	0b1b      	lsrs	r3, r3, #12
 800c7ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c7f2:	4b9c      	ldr	r3, [pc, #624]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f6:	091b      	lsrs	r3, r3, #4
 800c7f8:	f003 0301 	and.w	r3, r3, #1
 800c7fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c7fe:	4b99      	ldr	r3, [pc, #612]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c802:	08db      	lsrs	r3, r3, #3
 800c804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	fb02 f303 	mul.w	r3, r2, r3
 800c80e:	ee07 3a90 	vmov	s15, r3
 800c812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c816:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f000 8111 	beq.w	800ca44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	2b02      	cmp	r3, #2
 800c826:	f000 8083 	beq.w	800c930 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	f200 80a1 	bhi.w	800c974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d003      	beq.n	800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d056      	beq.n	800c8ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c83e:	e099      	b.n	800c974 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c840:	4b88      	ldr	r3, [pc, #544]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 0320 	and.w	r3, r3, #32
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d02d      	beq.n	800c8a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c84c:	4b85      	ldr	r3, [pc, #532]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	08db      	lsrs	r3, r3, #3
 800c852:	f003 0303 	and.w	r3, r3, #3
 800c856:	4a84      	ldr	r2, [pc, #528]	; (800ca68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c858:	fa22 f303 	lsr.w	r3, r2, r3
 800c85c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	ee07 3a90 	vmov	s15, r3
 800c864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	ee07 3a90 	vmov	s15, r3
 800c86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c876:	4b7b      	ldr	r3, [pc, #492]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c87e:	ee07 3a90 	vmov	s15, r3
 800c882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c886:	ed97 6a03 	vldr	s12, [r7, #12]
 800c88a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c88e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c89a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c89e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c8a6:	e087      	b.n	800c9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	ee07 3a90 	vmov	s15, r3
 800c8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c8b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ba:	4b6a      	ldr	r3, [pc, #424]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c2:	ee07 3a90 	vmov	s15, r3
 800c8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8ea:	e065      	b.n	800c9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	ee07 3a90 	vmov	s15, r3
 800c8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c8fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8fe:	4b59      	ldr	r3, [pc, #356]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c90e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c912:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c91a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c91e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c92a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c92e:	e043      	b.n	800c9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	ee07 3a90 	vmov	s15, r3
 800c936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c93a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c93e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c942:	4b48      	ldr	r3, [pc, #288]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c94a:	ee07 3a90 	vmov	s15, r3
 800c94e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c952:	ed97 6a03 	vldr	s12, [r7, #12]
 800c956:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c95a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c95e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c96a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c96e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c972:	e021      	b.n	800c9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	ee07 3a90 	vmov	s15, r3
 800c97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c97e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c986:	4b37      	ldr	r3, [pc, #220]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c98e:	ee07 3a90 	vmov	s15, r3
 800c992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c996:	ed97 6a03 	vldr	s12, [r7, #12]
 800c99a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c9b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c9b8:	4b2a      	ldr	r3, [pc, #168]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9bc:	0a5b      	lsrs	r3, r3, #9
 800c9be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9de:	ee17 2a90 	vmov	r2, s15
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c9e6:	4b1f      	ldr	r3, [pc, #124]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ea:	0c1b      	lsrs	r3, r3, #16
 800c9ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f0:	ee07 3a90 	vmov	s15, r3
 800c9f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca0c:	ee17 2a90 	vmov	r2, s15
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ca14:	4b13      	ldr	r3, [pc, #76]	; (800ca64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca18:	0e1b      	lsrs	r3, r3, #24
 800ca1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca1e:	ee07 3a90 	vmov	s15, r3
 800ca22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca3a:	ee17 2a90 	vmov	r2, s15
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ca42:	e008      	b.n	800ca56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	609a      	str	r2, [r3, #8]
}
 800ca56:	bf00      	nop
 800ca58:	3724      	adds	r7, #36	; 0x24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	58024400 	.word	0x58024400
 800ca68:	03d09000 	.word	0x03d09000
 800ca6c:	46000000 	.word	0x46000000
 800ca70:	4c742400 	.word	0x4c742400
 800ca74:	4a742400 	.word	0x4a742400
 800ca78:	4bbebc20 	.word	0x4bbebc20

0800ca7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b089      	sub	sp, #36	; 0x24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca84:	4ba1      	ldr	r3, [pc, #644]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca88:	f003 0303 	and.w	r3, r3, #3
 800ca8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ca8e:	4b9f      	ldr	r3, [pc, #636]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca92:	0d1b      	lsrs	r3, r3, #20
 800ca94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ca9a:	4b9c      	ldr	r3, [pc, #624]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9e:	0a1b      	lsrs	r3, r3, #8
 800caa0:	f003 0301 	and.w	r3, r3, #1
 800caa4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800caa6:	4b99      	ldr	r3, [pc, #612]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caaa:	08db      	lsrs	r3, r3, #3
 800caac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	fb02 f303 	mul.w	r3, r2, r3
 800cab6:	ee07 3a90 	vmov	s15, r3
 800caba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cabe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 8111 	beq.w	800ccec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	2b02      	cmp	r3, #2
 800cace:	f000 8083 	beq.w	800cbd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	f200 80a1 	bhi.w	800cc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d003      	beq.n	800cae8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	d056      	beq.n	800cb94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cae6:	e099      	b.n	800cc1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cae8:	4b88      	ldr	r3, [pc, #544]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f003 0320 	and.w	r3, r3, #32
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d02d      	beq.n	800cb50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800caf4:	4b85      	ldr	r3, [pc, #532]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	08db      	lsrs	r3, r3, #3
 800cafa:	f003 0303 	and.w	r3, r3, #3
 800cafe:	4a84      	ldr	r2, [pc, #528]	; (800cd10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb00:	fa22 f303 	lsr.w	r3, r2, r3
 800cb04:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	ee07 3a90 	vmov	s15, r3
 800cb0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	ee07 3a90 	vmov	s15, r3
 800cb16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb1e:	4b7b      	ldr	r3, [pc, #492]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb26:	ee07 3a90 	vmov	s15, r3
 800cb2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb32:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cb4e:	e087      	b.n	800cc60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	ee07 3a90 	vmov	s15, r3
 800cb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cb5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb62:	4b6a      	ldr	r3, [pc, #424]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb6a:	ee07 3a90 	vmov	s15, r3
 800cb6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb76:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb92:	e065      	b.n	800cc60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	ee07 3a90 	vmov	s15, r3
 800cb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cba6:	4b59      	ldr	r3, [pc, #356]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbae:	ee07 3a90 	vmov	s15, r3
 800cbb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbd6:	e043      	b.n	800cc60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	ee07 3a90 	vmov	s15, r3
 800cbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cbe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbea:	4b48      	ldr	r3, [pc, #288]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbf2:	ee07 3a90 	vmov	s15, r3
 800cbf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc1a:	e021      	b.n	800cc60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	ee07 3a90 	vmov	s15, r3
 800cc22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc2e:	4b37      	ldr	r3, [pc, #220]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc36:	ee07 3a90 	vmov	s15, r3
 800cc3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc42:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cc5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800cc60:	4b2a      	ldr	r3, [pc, #168]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc64:	0a5b      	lsrs	r3, r3, #9
 800cc66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc6a:	ee07 3a90 	vmov	s15, r3
 800cc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc86:	ee17 2a90 	vmov	r2, s15
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cc8e:	4b1f      	ldr	r3, [pc, #124]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc92:	0c1b      	lsrs	r3, r3, #16
 800cc94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc98:	ee07 3a90 	vmov	s15, r3
 800cc9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cca8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccb4:	ee17 2a90 	vmov	r2, s15
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ccbc:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc0:	0e1b      	lsrs	r3, r3, #24
 800ccc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccc6:	ee07 3a90 	vmov	s15, r3
 800ccca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cce2:	ee17 2a90 	vmov	r2, s15
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ccea:	e008      	b.n	800ccfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	609a      	str	r2, [r3, #8]
}
 800ccfe:	bf00      	nop
 800cd00:	3724      	adds	r7, #36	; 0x24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	58024400 	.word	0x58024400
 800cd10:	03d09000 	.word	0x03d09000
 800cd14:	46000000 	.word	0x46000000
 800cd18:	4c742400 	.word	0x4c742400
 800cd1c:	4a742400 	.word	0x4a742400
 800cd20:	4bbebc20 	.word	0x4bbebc20

0800cd24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd32:	4b53      	ldr	r3, [pc, #332]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd36:	f003 0303 	and.w	r3, r3, #3
 800cd3a:	2b03      	cmp	r3, #3
 800cd3c:	d101      	bne.n	800cd42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e099      	b.n	800ce76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd42:	4b4f      	ldr	r3, [pc, #316]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4a4e      	ldr	r2, [pc, #312]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cd48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd4e:	f7f8 fa57 	bl	8005200 <HAL_GetTick>
 800cd52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd54:	e008      	b.n	800cd68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cd56:	f7f8 fa53 	bl	8005200 <HAL_GetTick>
 800cd5a:	4602      	mov	r2, r0
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	1ad3      	subs	r3, r2, r3
 800cd60:	2b02      	cmp	r3, #2
 800cd62:	d901      	bls.n	800cd68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd64:	2303      	movs	r3, #3
 800cd66:	e086      	b.n	800ce76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd68:	4b45      	ldr	r3, [pc, #276]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1f0      	bne.n	800cd56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd74:	4b42      	ldr	r3, [pc, #264]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	031b      	lsls	r3, r3, #12
 800cd82:	493f      	ldr	r1, [pc, #252]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cd84:	4313      	orrs	r3, r2
 800cd86:	628b      	str	r3, [r1, #40]	; 0x28
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	3b01      	subs	r3, #1
 800cd98:	025b      	lsls	r3, r3, #9
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	431a      	orrs	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	041b      	lsls	r3, r3, #16
 800cda6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdaa:	431a      	orrs	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	691b      	ldr	r3, [r3, #16]
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	061b      	lsls	r3, r3, #24
 800cdb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cdb8:	4931      	ldr	r1, [pc, #196]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cdbe:	4b30      	ldr	r3, [pc, #192]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	695b      	ldr	r3, [r3, #20]
 800cdca:	492d      	ldr	r1, [pc, #180]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cdd0:	4b2b      	ldr	r3, [pc, #172]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd4:	f023 0220 	bic.w	r2, r3, #32
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	699b      	ldr	r3, [r3, #24]
 800cddc:	4928      	ldr	r1, [pc, #160]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cdde:	4313      	orrs	r3, r2
 800cde0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cde2:	4b27      	ldr	r3, [pc, #156]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde6:	4a26      	ldr	r2, [pc, #152]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cde8:	f023 0310 	bic.w	r3, r3, #16
 800cdec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cdee:	4b24      	ldr	r3, [pc, #144]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cdf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdf2:	4b24      	ldr	r3, [pc, #144]	; (800ce84 <RCCEx_PLL2_Config+0x160>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	69d2      	ldr	r2, [r2, #28]
 800cdfa:	00d2      	lsls	r2, r2, #3
 800cdfc:	4920      	ldr	r1, [pc, #128]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce02:	4b1f      	ldr	r3, [pc, #124]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce06:	4a1e      	ldr	r2, [pc, #120]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce08:	f043 0310 	orr.w	r3, r3, #16
 800ce0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d106      	bne.n	800ce22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce14:	4b1a      	ldr	r3, [pc, #104]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce18:	4a19      	ldr	r2, [pc, #100]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce20:	e00f      	b.n	800ce42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d106      	bne.n	800ce36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce28:	4b15      	ldr	r3, [pc, #84]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2c:	4a14      	ldr	r2, [pc, #80]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce34:	e005      	b.n	800ce42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce36:	4b12      	ldr	r3, [pc, #72]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3a:	4a11      	ldr	r2, [pc, #68]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce42:	4b0f      	ldr	r3, [pc, #60]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a0e      	ldr	r2, [pc, #56]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce4e:	f7f8 f9d7 	bl	8005200 <HAL_GetTick>
 800ce52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce54:	e008      	b.n	800ce68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ce56:	f7f8 f9d3 	bl	8005200 <HAL_GetTick>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d901      	bls.n	800ce68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce64:	2303      	movs	r3, #3
 800ce66:	e006      	b.n	800ce76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce68:	4b05      	ldr	r3, [pc, #20]	; (800ce80 <RCCEx_PLL2_Config+0x15c>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d0f0      	beq.n	800ce56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	58024400 	.word	0x58024400
 800ce84:	ffff0007 	.word	0xffff0007

0800ce88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce92:	2300      	movs	r3, #0
 800ce94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce96:	4b53      	ldr	r3, [pc, #332]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800ce98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9a:	f003 0303 	and.w	r3, r3, #3
 800ce9e:	2b03      	cmp	r3, #3
 800cea0:	d101      	bne.n	800cea6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	e099      	b.n	800cfda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cea6:	4b4f      	ldr	r3, [pc, #316]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4a4e      	ldr	r2, [pc, #312]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800ceac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ceb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceb2:	f7f8 f9a5 	bl	8005200 <HAL_GetTick>
 800ceb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ceb8:	e008      	b.n	800cecc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ceba:	f7f8 f9a1 	bl	8005200 <HAL_GetTick>
 800cebe:	4602      	mov	r2, r0
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	1ad3      	subs	r3, r2, r3
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d901      	bls.n	800cecc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cec8:	2303      	movs	r3, #3
 800ceca:	e086      	b.n	800cfda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cecc:	4b45      	ldr	r3, [pc, #276]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d1f0      	bne.n	800ceba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ced8:	4b42      	ldr	r3, [pc, #264]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800ceda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cedc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	051b      	lsls	r3, r3, #20
 800cee6:	493f      	ldr	r1, [pc, #252]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cee8:	4313      	orrs	r3, r2
 800ceea:	628b      	str	r3, [r1, #40]	; 0x28
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	3b01      	subs	r3, #1
 800cef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	3b01      	subs	r3, #1
 800cefc:	025b      	lsls	r3, r3, #9
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	431a      	orrs	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	3b01      	subs	r3, #1
 800cf08:	041b      	lsls	r3, r3, #16
 800cf0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf0e:	431a      	orrs	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	691b      	ldr	r3, [r3, #16]
 800cf14:	3b01      	subs	r3, #1
 800cf16:	061b      	lsls	r3, r3, #24
 800cf18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf1c:	4931      	ldr	r1, [pc, #196]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf22:	4b30      	ldr	r3, [pc, #192]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	695b      	ldr	r3, [r3, #20]
 800cf2e:	492d      	ldr	r1, [pc, #180]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf30:	4313      	orrs	r3, r2
 800cf32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf34:	4b2b      	ldr	r3, [pc, #172]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	699b      	ldr	r3, [r3, #24]
 800cf40:	4928      	ldr	r1, [pc, #160]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf42:	4313      	orrs	r3, r2
 800cf44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf46:	4b27      	ldr	r3, [pc, #156]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4a:	4a26      	ldr	r2, [pc, #152]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf52:	4b24      	ldr	r3, [pc, #144]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf56:	4b24      	ldr	r3, [pc, #144]	; (800cfe8 <RCCEx_PLL3_Config+0x160>)
 800cf58:	4013      	ands	r3, r2
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	69d2      	ldr	r2, [r2, #28]
 800cf5e:	00d2      	lsls	r2, r2, #3
 800cf60:	4920      	ldr	r1, [pc, #128]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf62:	4313      	orrs	r3, r2
 800cf64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf66:	4b1f      	ldr	r3, [pc, #124]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf6a:	4a1e      	ldr	r2, [pc, #120]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d106      	bne.n	800cf86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf78:	4b1a      	ldr	r3, [pc, #104]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7c:	4a19      	ldr	r2, [pc, #100]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf84:	e00f      	b.n	800cfa6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d106      	bne.n	800cf9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf8c:	4b15      	ldr	r3, [pc, #84]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf90:	4a14      	ldr	r2, [pc, #80]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf98:	e005      	b.n	800cfa6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf9a:	4b12      	ldr	r3, [pc, #72]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9e:	4a11      	ldr	r2, [pc, #68]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cfa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cfa6:	4b0f      	ldr	r3, [pc, #60]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a0e      	ldr	r2, [pc, #56]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cfac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfb2:	f7f8 f925 	bl	8005200 <HAL_GetTick>
 800cfb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfb8:	e008      	b.n	800cfcc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cfba:	f7f8 f921 	bl	8005200 <HAL_GetTick>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d901      	bls.n	800cfcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfc8:	2303      	movs	r3, #3
 800cfca:	e006      	b.n	800cfda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfcc:	4b05      	ldr	r3, [pc, #20]	; (800cfe4 <RCCEx_PLL3_Config+0x15c>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d0f0      	beq.n	800cfba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cfd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	58024400 	.word	0x58024400
 800cfe8:	ffff0007 	.word	0xffff0007

0800cfec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800cff4:	2300      	movs	r3, #0
 800cff6:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e0eb      	b.n	800d1da <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a75      	ldr	r2, [pc, #468]	; (800d1e4 <HAL_SPI_Init+0x1f8>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d00f      	beq.n	800d032 <HAL_SPI_Init+0x46>
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a74      	ldr	r2, [pc, #464]	; (800d1e8 <HAL_SPI_Init+0x1fc>)
 800d018:	4293      	cmp	r3, r2
 800d01a:	d00a      	beq.n	800d032 <HAL_SPI_Init+0x46>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a72      	ldr	r2, [pc, #456]	; (800d1ec <HAL_SPI_Init+0x200>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d005      	beq.n	800d032 <HAL_SPI_Init+0x46>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	2b0f      	cmp	r3, #15
 800d02c:	d901      	bls.n	800d032 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e0d3      	b.n	800d1da <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f001 f87a 	bl	800e12c <SPI_GetPacketSize>
 800d038:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a69      	ldr	r2, [pc, #420]	; (800d1e4 <HAL_SPI_Init+0x1f8>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d00c      	beq.n	800d05e <HAL_SPI_Init+0x72>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a67      	ldr	r2, [pc, #412]	; (800d1e8 <HAL_SPI_Init+0x1fc>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d007      	beq.n	800d05e <HAL_SPI_Init+0x72>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a66      	ldr	r2, [pc, #408]	; (800d1ec <HAL_SPI_Init+0x200>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d002      	beq.n	800d05e <HAL_SPI_Init+0x72>
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b08      	cmp	r3, #8
 800d05c:	d811      	bhi.n	800d082 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d062:	4a60      	ldr	r2, [pc, #384]	; (800d1e4 <HAL_SPI_Init+0x1f8>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d009      	beq.n	800d07c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a5e      	ldr	r2, [pc, #376]	; (800d1e8 <HAL_SPI_Init+0x1fc>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d004      	beq.n	800d07c <HAL_SPI_Init+0x90>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a5d      	ldr	r2, [pc, #372]	; (800d1ec <HAL_SPI_Init+0x200>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d104      	bne.n	800d086 <HAL_SPI_Init+0x9a>
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	2b10      	cmp	r3, #16
 800d080:	d901      	bls.n	800d086 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	e0a9      	b.n	800d1da <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d106      	bne.n	800d0a0 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7f6 fe30 	bl	8003d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2202      	movs	r2, #2
 800d0a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f022 0201 	bic.w	r2, r2, #1
 800d0b6:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	699b      	ldr	r3, [r3, #24]
 800d0bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d0c0:	d119      	bne.n	800d0f6 <HAL_SPI_Init+0x10a>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d0ca:	d103      	bne.n	800d0d4 <HAL_SPI_Init+0xe8>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d008      	beq.n	800d0e6 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10c      	bne.n	800d0f6 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0e4:	d107      	bne.n	800d0f6 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d0f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	69da      	ldr	r2, [r3, #28]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0fe:	431a      	orrs	r2, r3
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	431a      	orrs	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d108:	ea42 0103 	orr.w	r1, r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	68da      	ldr	r2, [r3, #12]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	430a      	orrs	r2, r1
 800d116:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d120:	431a      	orrs	r2, r3
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d126:	431a      	orrs	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	431a      	orrs	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	691b      	ldr	r3, [r3, #16]
 800d132:	431a      	orrs	r2, r3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	695b      	ldr	r3, [r3, #20]
 800d138:	431a      	orrs	r2, r3
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6a1b      	ldr	r3, [r3, #32]
 800d13e:	431a      	orrs	r2, r3
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	431a      	orrs	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d14a:	431a      	orrs	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	431a      	orrs	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d156:	ea42 0103 	orr.w	r1, r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	430a      	orrs	r2, r1
 800d164:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d113      	bne.n	800d196 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d180:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d194:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f022 0201 	bic.w	r2, r2, #1
 800d1a4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00a      	beq.n	800d1c8 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	68db      	ldr	r3, [r3, #12]
 800d1b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	430a      	orrs	r2, r1
 800d1c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	40013000 	.word	0x40013000
 800d1e8:	40003800 	.word	0x40003800
 800d1ec:	40003c00 	.word	0x40003c00

0800d1f0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b08a      	sub	sp, #40	; 0x28
 800d1f4:	af02      	add	r7, sp, #8
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	603b      	str	r3, [r7, #0]
 800d1fc:	4613      	mov	r3, r2
 800d1fe:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	3320      	adds	r3, #32
 800d206:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d212:	2b01      	cmp	r3, #1
 800d214:	d101      	bne.n	800d21a <HAL_SPI_Transmit+0x2a>
 800d216:	2302      	movs	r3, #2
 800d218:	e1d7      	b.n	800d5ca <HAL_SPI_Transmit+0x3da>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d222:	f7f7 ffed 	bl	8005200 <HAL_GetTick>
 800d226:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b01      	cmp	r3, #1
 800d232:	d007      	beq.n	800d244 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d234:	2302      	movs	r3, #2
 800d236:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d240:	7efb      	ldrb	r3, [r7, #27]
 800d242:	e1c2      	b.n	800d5ca <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d002      	beq.n	800d250 <HAL_SPI_Transmit+0x60>
 800d24a:	88fb      	ldrh	r3, [r7, #6]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d107      	bne.n	800d260 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d250:	2301      	movs	r3, #1
 800d252:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d25c:	7efb      	ldrb	r3, [r7, #27]
 800d25e:	e1b4      	b.n	800d5ca <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2203      	movs	r2, #3
 800d264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2200      	movs	r2, #0
 800d26c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	88fa      	ldrh	r2, [r7, #6]
 800d27a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	88fa      	ldrh	r2, [r7, #6]
 800d282:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2200      	movs	r2, #0
 800d290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d2b0:	d107      	bne.n	800d2c2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	4b96      	ldr	r3, [pc, #600]	; (800d524 <HAL_SPI_Transmit+0x334>)
 800d2ca:	4013      	ands	r3, r2
 800d2cc:	88f9      	ldrh	r1, [r7, #6]
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	6812      	ldr	r2, [r2, #0]
 800d2d2:	430b      	orrs	r3, r1
 800d2d4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f042 0201 	orr.w	r2, r2, #1
 800d2e4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2ee:	d107      	bne.n	800d300 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	2b0f      	cmp	r3, #15
 800d306:	d947      	bls.n	800d398 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d308:	e03f      	b.n	800d38a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	f003 0302 	and.w	r3, r3, #2
 800d314:	2b02      	cmp	r3, #2
 800d316:	d114      	bne.n	800d342 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6812      	ldr	r2, [r2, #0]
 800d322:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d328:	1d1a      	adds	r2, r3, #4
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d334:	b29b      	uxth	r3, r3
 800d336:	3b01      	subs	r3, #1
 800d338:	b29a      	uxth	r2, r3
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d340:	e023      	b.n	800d38a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d342:	f7f7 ff5d 	bl	8005200 <HAL_GetTick>
 800d346:	4602      	mov	r2, r0
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	683a      	ldr	r2, [r7, #0]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d803      	bhi.n	800d35a <HAL_SPI_Transmit+0x16a>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d358:	d102      	bne.n	800d360 <HAL_SPI_Transmit+0x170>
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d114      	bne.n	800d38a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 fe15 	bl	800df90 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d374:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2201      	movs	r2, #1
 800d382:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	e11f      	b.n	800d5ca <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d390:	b29b      	uxth	r3, r3
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1b9      	bne.n	800d30a <HAL_SPI_Transmit+0x11a>
 800d396:	e0f2      	b.n	800d57e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	2b07      	cmp	r3, #7
 800d39e:	f240 80e7 	bls.w	800d570 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d3a2:	e05d      	b.n	800d460 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	f003 0302 	and.w	r3, r3, #2
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d132      	bne.n	800d418 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d918      	bls.n	800d3f0 <HAL_SPI_Transmit+0x200>
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d014      	beq.n	800d3f0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	6812      	ldr	r2, [r2, #0]
 800d3d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3d6:	1d1a      	adds	r2, r3, #4
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	3b02      	subs	r3, #2
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d3ee:	e037      	b.n	800d460 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3f4:	881a      	ldrh	r2, [r3, #0]
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d3fe:	1c9a      	adds	r2, r3, #2
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	3b01      	subs	r3, #1
 800d40e:	b29a      	uxth	r2, r3
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d416:	e023      	b.n	800d460 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d418:	f7f7 fef2 	bl	8005200 <HAL_GetTick>
 800d41c:	4602      	mov	r2, r0
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	1ad3      	subs	r3, r2, r3
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	429a      	cmp	r2, r3
 800d426:	d803      	bhi.n	800d430 <HAL_SPI_Transmit+0x240>
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42e:	d102      	bne.n	800d436 <HAL_SPI_Transmit+0x246>
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d114      	bne.n	800d460 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f000 fdaa 	bl	800df90 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2200      	movs	r2, #0
 800d440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d44a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2201      	movs	r2, #1
 800d458:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	e0b4      	b.n	800d5ca <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d466:	b29b      	uxth	r3, r3
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d19b      	bne.n	800d3a4 <HAL_SPI_Transmit+0x1b4>
 800d46c:	e087      	b.n	800d57e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	695b      	ldr	r3, [r3, #20]
 800d474:	f003 0302 	and.w	r3, r3, #2
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d155      	bne.n	800d528 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d482:	b29b      	uxth	r3, r3
 800d484:	2b03      	cmp	r3, #3
 800d486:	d918      	bls.n	800d4ba <HAL_SPI_Transmit+0x2ca>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d48c:	2b40      	cmp	r3, #64	; 0x40
 800d48e:	d914      	bls.n	800d4ba <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	6812      	ldr	r2, [r2, #0]
 800d49a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4a0:	1d1a      	adds	r2, r3, #4
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	3b04      	subs	r3, #4
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d4b8:	e05a      	b.n	800d570 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d917      	bls.n	800d4f6 <HAL_SPI_Transmit+0x306>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d013      	beq.n	800d4f6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4d2:	881a      	ldrh	r2, [r3, #0]
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d4dc:	1c9a      	adds	r2, r3, #2
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	3b02      	subs	r3, #2
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d4f4:	e03c      	b.n	800d570 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3320      	adds	r3, #32
 800d500:	7812      	ldrb	r2, [r2, #0]
 800d502:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d508:	1c5a      	adds	r2, r3, #1
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d514:	b29b      	uxth	r3, r3
 800d516:	3b01      	subs	r3, #1
 800d518:	b29a      	uxth	r2, r3
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d520:	e026      	b.n	800d570 <HAL_SPI_Transmit+0x380>
 800d522:	bf00      	nop
 800d524:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d528:	f7f7 fe6a 	bl	8005200 <HAL_GetTick>
 800d52c:	4602      	mov	r2, r0
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	683a      	ldr	r2, [r7, #0]
 800d534:	429a      	cmp	r2, r3
 800d536:	d803      	bhi.n	800d540 <HAL_SPI_Transmit+0x350>
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53e:	d102      	bne.n	800d546 <HAL_SPI_Transmit+0x356>
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d114      	bne.n	800d570 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f000 fd22 	bl	800df90 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d55a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2201      	movs	r2, #1
 800d568:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d56c:	2301      	movs	r3, #1
 800d56e:	e02c      	b.n	800d5ca <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d576:	b29b      	uxth	r3, r3
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f47f af78 	bne.w	800d46e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	2200      	movs	r2, #0
 800d586:	2108      	movs	r1, #8
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f000 fda1 	bl	800e0d0 <SPI_WaitOnFlagUntilTimeout>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d007      	beq.n	800d5a4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d59a:	f043 0220 	orr.w	r2, r3, #32
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f000 fcf3 	bl	800df90 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d001      	beq.n	800d5c8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e000      	b.n	800d5ca <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d5c8:	7efb      	ldrb	r3, [r7, #27]
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3720      	adds	r7, #32
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop

0800d5d4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b08a      	sub	sp, #40	; 0x28
 800d5d8:	af02      	add	r7, sp, #8
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	603b      	str	r3, [r7, #0]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3330      	adds	r3, #48	; 0x30
 800d5ee:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d5f8:	d112      	bne.n	800d620 <HAL_SPI_Receive+0x4c>
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10e      	bne.n	800d620 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2204      	movs	r2, #4
 800d606:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d60a:	88fa      	ldrh	r2, [r7, #6]
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	4613      	mov	r3, r2
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	68b9      	ldr	r1, [r7, #8]
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f000 f9ce 	bl	800d9b8 <HAL_SPI_TransmitReceive>
 800d61c:	4603      	mov	r3, r0
 800d61e:	e1c7      	b.n	800d9b0 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d626:	2b01      	cmp	r3, #1
 800d628:	d101      	bne.n	800d62e <HAL_SPI_Receive+0x5a>
 800d62a:	2302      	movs	r3, #2
 800d62c:	e1c0      	b.n	800d9b0 <HAL_SPI_Receive+0x3dc>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2201      	movs	r2, #1
 800d632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d636:	f7f7 fde3 	bl	8005200 <HAL_GetTick>
 800d63a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d642:	b2db      	uxtb	r3, r3
 800d644:	2b01      	cmp	r3, #1
 800d646:	d007      	beq.n	800d658 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800d648:	2302      	movs	r3, #2
 800d64a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d654:	7ffb      	ldrb	r3, [r7, #31]
 800d656:	e1ab      	b.n	800d9b0 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d002      	beq.n	800d664 <HAL_SPI_Receive+0x90>
 800d65e:	88fb      	ldrh	r3, [r7, #6]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d107      	bne.n	800d674 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d670:	7ffb      	ldrb	r3, [r7, #31]
 800d672:	e19d      	b.n	800d9b0 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2204      	movs	r2, #4
 800d678:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	68ba      	ldr	r2, [r7, #8]
 800d688:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	88fa      	ldrh	r2, [r7, #6]
 800d68e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	88fa      	ldrh	r2, [r7, #6]
 800d696:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2200      	movs	r2, #0
 800d69e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d6c4:	d107      	bne.n	800d6d6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	681a      	ldr	r2, [r3, #0]
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	4b94      	ldr	r3, [pc, #592]	; (800d930 <HAL_SPI_Receive+0x35c>)
 800d6de:	4013      	ands	r3, r2
 800d6e0:	88f9      	ldrh	r1, [r7, #6]
 800d6e2:	68fa      	ldr	r2, [r7, #12]
 800d6e4:	6812      	ldr	r2, [r2, #0]
 800d6e6:	430b      	orrs	r3, r1
 800d6e8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f042 0201 	orr.w	r2, r2, #1
 800d6f8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d702:	d107      	bne.n	800d714 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d712:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	2b0f      	cmp	r3, #15
 800d71a:	d948      	bls.n	800d7ae <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d71c:	e040      	b.n	800d7a0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	695a      	ldr	r2, [r3, #20]
 800d724:	f248 0308 	movw	r3, #32776	; 0x8008
 800d728:	4013      	ands	r3, r2
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d014      	beq.n	800d758 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d736:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d738:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d73e:	1d1a      	adds	r2, r3, #4
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	3b01      	subs	r3, #1
 800d74e:	b29a      	uxth	r2, r3
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d756:	e023      	b.n	800d7a0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d758:	f7f7 fd52 	bl	8005200 <HAL_GetTick>
 800d75c:	4602      	mov	r2, r0
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	1ad3      	subs	r3, r2, r3
 800d762:	683a      	ldr	r2, [r7, #0]
 800d764:	429a      	cmp	r2, r3
 800d766:	d803      	bhi.n	800d770 <HAL_SPI_Receive+0x19c>
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76e:	d102      	bne.n	800d776 <HAL_SPI_Receive+0x1a2>
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d114      	bne.n	800d7a0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f000 fc0a 	bl	800df90 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d78a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e107      	b.n	800d9b0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d1b8      	bne.n	800d71e <HAL_SPI_Receive+0x14a>
 800d7ac:	e0ed      	b.n	800d98a <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	68db      	ldr	r3, [r3, #12]
 800d7b2:	2b07      	cmp	r3, #7
 800d7b4:	f240 80e2 	bls.w	800d97c <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d7b8:	e05b      	b.n	800d872 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d030      	beq.n	800d82a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	695b      	ldr	r3, [r3, #20]
 800d7ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d014      	beq.n	800d800 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d7e0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7e6:	1d1a      	adds	r2, r3, #4
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7f2:	b29b      	uxth	r3, r3
 800d7f4:	3b02      	subs	r3, #2
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d7fe:	e038      	b.n	800d872 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d804:	69ba      	ldr	r2, [r7, #24]
 800d806:	8812      	ldrh	r2, [r2, #0]
 800d808:	b292      	uxth	r2, r2
 800d80a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d810:	1c9a      	adds	r2, r3, #2
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	3b01      	subs	r3, #1
 800d820:	b29a      	uxth	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d828:	e023      	b.n	800d872 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d82a:	f7f7 fce9 	bl	8005200 <HAL_GetTick>
 800d82e:	4602      	mov	r2, r0
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	1ad3      	subs	r3, r2, r3
 800d834:	683a      	ldr	r2, [r7, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d803      	bhi.n	800d842 <HAL_SPI_Receive+0x26e>
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d840:	d102      	bne.n	800d848 <HAL_SPI_Receive+0x274>
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d114      	bne.n	800d872 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d848:	68f8      	ldr	r0, [r7, #12]
 800d84a:	f000 fba1 	bl	800df90 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2200      	movs	r2, #0
 800d852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d85c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d86e:	2301      	movs	r3, #1
 800d870:	e09e      	b.n	800d9b0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d878:	b29b      	uxth	r3, r3
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d19d      	bne.n	800d7ba <HAL_SPI_Receive+0x1e6>
 800d87e:	e084      	b.n	800d98a <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	695b      	ldr	r3, [r3, #20]
 800d886:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d052      	beq.n	800d934 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d014      	beq.n	800d8c6 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d8a6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8ac:	1d1a      	adds	r2, r3, #4
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	3b04      	subs	r3, #4
 800d8bc:	b29a      	uxth	r2, r3
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d8c4:	e05a      	b.n	800d97c <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	695b      	ldr	r3, [r3, #20]
 800d8cc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d8d4:	d914      	bls.n	800d900 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8da:	69ba      	ldr	r2, [r7, #24]
 800d8dc:	8812      	ldrh	r2, [r2, #0]
 800d8de:	b292      	uxth	r2, r2
 800d8e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8e6:	1c9a      	adds	r2, r3, #2
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	3b02      	subs	r3, #2
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d8fe:	e03d      	b.n	800d97c <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d90c:	7812      	ldrb	r2, [r2, #0]
 800d90e:	b2d2      	uxtb	r2, r2
 800d910:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d922:	b29b      	uxth	r3, r3
 800d924:	3b01      	subs	r3, #1
 800d926:	b29a      	uxth	r2, r3
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d92e:	e025      	b.n	800d97c <HAL_SPI_Receive+0x3a8>
 800d930:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d934:	f7f7 fc64 	bl	8005200 <HAL_GetTick>
 800d938:	4602      	mov	r2, r0
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	429a      	cmp	r2, r3
 800d942:	d803      	bhi.n	800d94c <HAL_SPI_Receive+0x378>
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d94a:	d102      	bne.n	800d952 <HAL_SPI_Receive+0x37e>
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d114      	bne.n	800d97c <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f000 fb1c 	bl	800df90 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d966:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2201      	movs	r2, #1
 800d974:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d978:	2301      	movs	r3, #1
 800d97a:	e019      	b.n	800d9b0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d982:	b29b      	uxth	r3, r3
 800d984:	2b00      	cmp	r3, #0
 800d986:	f47f af7b 	bne.w	800d880 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f000 fb00 	bl	800df90 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e000      	b.n	800d9b0 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d9ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3720      	adds	r7, #32
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08e      	sub	sp, #56	; 0x38
 800d9bc:	af02      	add	r7, sp, #8
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
 800d9c4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	3320      	adds	r3, #32
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	3330      	adds	r3, #48	; 0x30
 800d9da:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d101      	bne.n	800d9ea <HAL_SPI_TransmitReceive+0x32>
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	e2ce      	b.n	800df88 <HAL_SPI_TransmitReceive+0x5d0>
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d9f2:	f7f7 fc05 	bl	8005200 <HAL_GetTick>
 800d9f6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d9f8:	887b      	ldrh	r3, [r7, #2]
 800d9fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d9fc:	887b      	ldrh	r3, [r7, #2]
 800d9fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da06:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800da0e:	7efb      	ldrb	r3, [r7, #27]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d014      	beq.n	800da3e <HAL_SPI_TransmitReceive+0x86>
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da1a:	d106      	bne.n	800da2a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	689b      	ldr	r3, [r3, #8]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d102      	bne.n	800da2a <HAL_SPI_TransmitReceive+0x72>
 800da24:	7efb      	ldrb	r3, [r7, #27]
 800da26:	2b04      	cmp	r3, #4
 800da28:	d009      	beq.n	800da3e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800da2a:	2302      	movs	r3, #2
 800da2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2200      	movs	r2, #0
 800da34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800da38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da3c:	e2a4      	b.n	800df88 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d005      	beq.n	800da50 <HAL_SPI_TransmitReceive+0x98>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d002      	beq.n	800da50 <HAL_SPI_TransmitReceive+0x98>
 800da4a:	887b      	ldrh	r3, [r7, #2]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d109      	bne.n	800da64 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800da5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da62:	e291      	b.n	800df88 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	2b04      	cmp	r3, #4
 800da6e:	d003      	beq.n	800da78 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2205      	movs	r2, #5
 800da74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	887a      	ldrh	r2, [r7, #2]
 800da8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	887a      	ldrh	r2, [r7, #2]
 800da92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	887a      	ldrh	r2, [r7, #2]
 800daa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	887a      	ldrh	r2, [r7, #2]
 800daa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2200      	movs	r2, #0
 800dab0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2200      	movs	r2, #0
 800dab6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	685a      	ldr	r2, [r3, #4]
 800dabe:	4b9f      	ldr	r3, [pc, #636]	; (800dd3c <HAL_SPI_TransmitReceive+0x384>)
 800dac0:	4013      	ands	r3, r2
 800dac2:	8879      	ldrh	r1, [r7, #2]
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	6812      	ldr	r2, [r2, #0]
 800dac8:	430b      	orrs	r3, r1
 800daca:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f042 0201 	orr.w	r2, r2, #1
 800dada:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dae4:	d107      	bne.n	800daf6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800daf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	2b0f      	cmp	r3, #15
 800dafc:	d970      	bls.n	800dbe0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dafe:	e068      	b.n	800dbd2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	f003 0302 	and.w	r3, r3, #2
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d11a      	bne.n	800db44 <HAL_SPI_TransmitReceive+0x18c>
 800db0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db10:	2b00      	cmp	r3, #0
 800db12:	d017      	beq.n	800db44 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	6812      	ldr	r2, [r2, #0]
 800db1e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db24:	1d1a      	adds	r2, r3, #4
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db30:	b29b      	uxth	r3, r3
 800db32:	3b01      	subs	r3, #1
 800db34:	b29a      	uxth	r2, r3
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db42:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	695a      	ldr	r2, [r3, #20]
 800db4a:	f248 0308 	movw	r3, #32776	; 0x8008
 800db4e:	4013      	ands	r3, r2
 800db50:	2b00      	cmp	r3, #0
 800db52:	d01a      	beq.n	800db8a <HAL_SPI_TransmitReceive+0x1d2>
 800db54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db56:	2b00      	cmp	r3, #0
 800db58:	d017      	beq.n	800db8a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800db64:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db6a:	1d1a      	adds	r2, r3, #4
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db76:	b29b      	uxth	r3, r3
 800db78:	3b01      	subs	r3, #1
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db88:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db8a:	f7f7 fb39 	bl	8005200 <HAL_GetTick>
 800db8e:	4602      	mov	r2, r0
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db96:	429a      	cmp	r2, r3
 800db98:	d803      	bhi.n	800dba2 <HAL_SPI_TransmitReceive+0x1ea>
 800db9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba0:	d102      	bne.n	800dba8 <HAL_SPI_TransmitReceive+0x1f0>
 800dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d114      	bne.n	800dbd2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f000 f9f1 	bl	800df90 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2201      	movs	r2, #1
 800dbca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e1da      	b.n	800df88 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dbd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d193      	bne.n	800db00 <HAL_SPI_TransmitReceive+0x148>
 800dbd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d190      	bne.n	800db00 <HAL_SPI_TransmitReceive+0x148>
 800dbde:	e1ac      	b.n	800df3a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	2b07      	cmp	r3, #7
 800dbe6:	f240 81a0 	bls.w	800df2a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dbea:	e0a9      	b.n	800dd40 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	f003 0302 	and.w	r3, r3, #2
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	d139      	bne.n	800dc6e <HAL_SPI_TransmitReceive+0x2b6>
 800dbfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d036      	beq.n	800dc6e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dc00:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d91c      	bls.n	800dc40 <HAL_SPI_TransmitReceive+0x288>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d018      	beq.n	800dc40 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6812      	ldr	r2, [r2, #0]
 800dc18:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc1e:	1d1a      	adds	r2, r3, #4
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	3b02      	subs	r3, #2
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dc3e:	e016      	b.n	800dc6e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc44:	881a      	ldrh	r2, [r3, #0]
 800dc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc48:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc4e:	1c9a      	adds	r2, r3, #2
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	695b      	ldr	r3, [r3, #20]
 800dc74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d03a      	beq.n	800dcf2 <HAL_SPI_TransmitReceive+0x33a>
 800dc7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d037      	beq.n	800dcf2 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	695b      	ldr	r3, [r3, #20]
 800dc88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d018      	beq.n	800dcc2 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dc9a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dca0:	1d1a      	adds	r2, r3, #4
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	3b02      	subs	r3, #2
 800dcb0:	b29a      	uxth	r2, r3
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dcc0:	e017      	b.n	800dcf2 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcc6:	6a3a      	ldr	r2, [r7, #32]
 800dcc8:	8812      	ldrh	r2, [r2, #0]
 800dcca:	b292      	uxth	r2, r2
 800dccc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcd2:	1c9a      	adds	r2, r3, #2
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	3b01      	subs	r3, #1
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcf0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcf2:	f7f7 fa85 	bl	8005200 <HAL_GetTick>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	1ad3      	subs	r3, r2, r3
 800dcfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d803      	bhi.n	800dd0a <HAL_SPI_TransmitReceive+0x352>
 800dd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd08:	d102      	bne.n	800dd10 <HAL_SPI_TransmitReceive+0x358>
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d117      	bne.n	800dd40 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f000 f93d 	bl	800df90 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2201      	movs	r2, #1
 800dd32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dd36:	2301      	movs	r3, #1
 800dd38:	e126      	b.n	800df88 <HAL_SPI_TransmitReceive+0x5d0>
 800dd3a:	bf00      	nop
 800dd3c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dd40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f47f af52 	bne.w	800dbec <HAL_SPI_TransmitReceive+0x234>
 800dd48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f47f af4e 	bne.w	800dbec <HAL_SPI_TransmitReceive+0x234>
 800dd50:	e0f3      	b.n	800df3a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	695b      	ldr	r3, [r3, #20]
 800dd58:	f003 0302 	and.w	r3, r3, #2
 800dd5c:	2b02      	cmp	r3, #2
 800dd5e:	d15a      	bne.n	800de16 <HAL_SPI_TransmitReceive+0x45e>
 800dd60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d057      	beq.n	800de16 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dd66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd68:	2b03      	cmp	r3, #3
 800dd6a:	d91c      	bls.n	800dda6 <HAL_SPI_TransmitReceive+0x3ee>
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd70:	2b40      	cmp	r3, #64	; 0x40
 800dd72:	d918      	bls.n	800dda6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6812      	ldr	r2, [r2, #0]
 800dd7e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd84:	1d1a      	adds	r2, r3, #4
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3b04      	subs	r3, #4
 800dd94:	b29a      	uxth	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dda2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dda4:	e037      	b.n	800de16 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dda6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d91b      	bls.n	800dde4 <HAL_SPI_TransmitReceive+0x42c>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d017      	beq.n	800dde4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddb8:	881a      	ldrh	r2, [r3, #0]
 800ddba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddbc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddc2:	1c9a      	adds	r2, r3, #2
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	3b02      	subs	r3, #2
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dde0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dde2:	e018      	b.n	800de16 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3320      	adds	r3, #32
 800ddee:	7812      	ldrb	r2, [r2, #0]
 800ddf0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddf6:	1c5a      	adds	r2, r3, #1
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de02:	b29b      	uxth	r3, r3
 800de04:	3b01      	subs	r3, #1
 800de06:	b29a      	uxth	r2, r3
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de14:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d05e      	beq.n	800dee2 <HAL_SPI_TransmitReceive+0x52a>
 800de24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800de26:	2b00      	cmp	r3, #0
 800de28:	d05b      	beq.n	800dee2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	695b      	ldr	r3, [r3, #20]
 800de30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de34:	2b00      	cmp	r3, #0
 800de36:	d018      	beq.n	800de6a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800de42:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de48:	1d1a      	adds	r2, r3, #4
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de54:	b29b      	uxth	r3, r3
 800de56:	3b04      	subs	r3, #4
 800de58:	b29a      	uxth	r2, r3
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800de68:	e03b      	b.n	800dee2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	695b      	ldr	r3, [r3, #20]
 800de70:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800de74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de78:	d918      	bls.n	800deac <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de7e:	6a3a      	ldr	r2, [r7, #32]
 800de80:	8812      	ldrh	r2, [r2, #0]
 800de82:	b292      	uxth	r2, r2
 800de84:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de8a:	1c9a      	adds	r2, r3, #2
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de96:	b29b      	uxth	r3, r3
 800de98:	3b02      	subs	r3, #2
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dea8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800deaa:	e01a      	b.n	800dee2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deb8:	7812      	ldrb	r2, [r2, #0]
 800deba:	b2d2      	uxtb	r2, r2
 800debc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dec2:	1c5a      	adds	r2, r3, #1
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dece:	b29b      	uxth	r3, r3
 800ded0:	3b01      	subs	r3, #1
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dee0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dee2:	f7f7 f98d 	bl	8005200 <HAL_GetTick>
 800dee6:	4602      	mov	r2, r0
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800deee:	429a      	cmp	r2, r3
 800def0:	d803      	bhi.n	800defa <HAL_SPI_TransmitReceive+0x542>
 800def2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def8:	d102      	bne.n	800df00 <HAL_SPI_TransmitReceive+0x548>
 800defa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defc:	2b00      	cmp	r3, #0
 800defe:	d114      	bne.n	800df2a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f000 f845 	bl	800df90 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2201      	movs	r2, #1
 800df22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800df26:	2301      	movs	r3, #1
 800df28:	e02e      	b.n	800df88 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800df2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	f47f af10 	bne.w	800dd52 <HAL_SPI_TransmitReceive+0x39a>
 800df32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800df34:	2b00      	cmp	r3, #0
 800df36:	f47f af0c 	bne.w	800dd52 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800df3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	2200      	movs	r2, #0
 800df42:	2108      	movs	r1, #8
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f000 f8c3 	bl	800e0d0 <SPI_WaitOnFlagUntilTimeout>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d007      	beq.n	800df60 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df56:	f043 0220 	orr.w	r2, r3, #32
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f000 f815 	bl	800df90 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2200      	movs	r2, #0
 800df6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2201      	movs	r2, #1
 800df72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d001      	beq.n	800df84 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e001      	b.n	800df88 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800df84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3730      	adds	r7, #48	; 0x30
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800df90:	b480      	push	{r7}
 800df92:	b085      	sub	sp, #20
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	695b      	ldr	r3, [r3, #20]
 800df9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	699a      	ldr	r2, [r3, #24]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f042 0208 	orr.w	r2, r2, #8
 800dfae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	699a      	ldr	r2, [r3, #24]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f042 0210 	orr.w	r2, r2, #16
 800dfbe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f022 0201 	bic.w	r2, r2, #1
 800dfce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	6919      	ldr	r1, [r3, #16]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	4b3c      	ldr	r3, [pc, #240]	; (800e0cc <SPI_CloseTransfer+0x13c>)
 800dfdc:	400b      	ands	r3, r1
 800dfde:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	689a      	ldr	r2, [r3, #8]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800dfee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	2b04      	cmp	r3, #4
 800dffa:	d014      	beq.n	800e026 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f003 0320 	and.w	r3, r3, #32
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00f      	beq.n	800e026 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e00c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	699a      	ldr	r2, [r3, #24]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f042 0220 	orr.w	r2, r2, #32
 800e024:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d014      	beq.n	800e05c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d00f      	beq.n	800e05c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e042:	f043 0204 	orr.w	r2, r3, #4
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	699a      	ldr	r2, [r3, #24]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e05a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00f      	beq.n	800e086 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e06c:	f043 0201 	orr.w	r2, r3, #1
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	699a      	ldr	r2, [r3, #24]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e084:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00f      	beq.n	800e0b0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e096:	f043 0208 	orr.w	r2, r3, #8
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	699a      	ldr	r2, [r3, #24]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e0c0:	bf00      	nop
 800e0c2:	3714      	adds	r7, #20
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ca:	4770      	bx	lr
 800e0cc:	fffffc90 	.word	0xfffffc90

0800e0d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	60b9      	str	r1, [r7, #8]
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	4613      	mov	r3, r2
 800e0de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e0e0:	e010      	b.n	800e104 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0e2:	f7f7 f88d 	bl	8005200 <HAL_GetTick>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	1ad3      	subs	r3, r2, r3
 800e0ec:	69ba      	ldr	r2, [r7, #24]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d803      	bhi.n	800e0fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e0f2:	69bb      	ldr	r3, [r7, #24]
 800e0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f8:	d102      	bne.n	800e100 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d101      	bne.n	800e104 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e100:	2303      	movs	r3, #3
 800e102:	e00f      	b.n	800e124 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	695a      	ldr	r2, [r3, #20]
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	4013      	ands	r3, r2
 800e10e:	68ba      	ldr	r2, [r7, #8]
 800e110:	429a      	cmp	r2, r3
 800e112:	bf0c      	ite	eq
 800e114:	2301      	moveq	r3, #1
 800e116:	2300      	movne	r3, #0
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	461a      	mov	r2, r3
 800e11c:	79fb      	ldrb	r3, [r7, #7]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d0df      	beq.n	800e0e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b085      	sub	sp, #20
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e138:	095b      	lsrs	r3, r3, #5
 800e13a:	3301      	adds	r3, #1
 800e13c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	3301      	adds	r3, #1
 800e144:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	3307      	adds	r3, #7
 800e14a:	08db      	lsrs	r3, r3, #3
 800e14c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	fb02 f303 	mul.w	r3, r2, r3
}
 800e156:	4618      	mov	r0, r3
 800e158:	3714      	adds	r7, #20
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr

0800e162 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b082      	sub	sp, #8
 800e166:	af00      	add	r7, sp, #0
 800e168:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d101      	bne.n	800e174 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e170:	2301      	movs	r3, #1
 800e172:	e049      	b.n	800e208 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d106      	bne.n	800e18e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f7f5 fe1f 	bl	8003dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2202      	movs	r2, #2
 800e192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	3304      	adds	r3, #4
 800e19e:	4619      	mov	r1, r3
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	f000 fda1 	bl	800ece8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	2b01      	cmp	r3, #1
 800e222:	d001      	beq.n	800e228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e224:	2301      	movs	r3, #1
 800e226:	e04f      	b.n	800e2c8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2202      	movs	r2, #2
 800e22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	68da      	ldr	r2, [r3, #12]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f042 0201 	orr.w	r2, r2, #1
 800e23e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	4a23      	ldr	r2, [pc, #140]	; (800e2d4 <HAL_TIM_Base_Start_IT+0xc4>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d01d      	beq.n	800e286 <HAL_TIM_Base_Start_IT+0x76>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e252:	d018      	beq.n	800e286 <HAL_TIM_Base_Start_IT+0x76>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4a1f      	ldr	r2, [pc, #124]	; (800e2d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d013      	beq.n	800e286 <HAL_TIM_Base_Start_IT+0x76>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4a1e      	ldr	r2, [pc, #120]	; (800e2dc <HAL_TIM_Base_Start_IT+0xcc>)
 800e264:	4293      	cmp	r3, r2
 800e266:	d00e      	beq.n	800e286 <HAL_TIM_Base_Start_IT+0x76>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	4a1c      	ldr	r2, [pc, #112]	; (800e2e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d009      	beq.n	800e286 <HAL_TIM_Base_Start_IT+0x76>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a1b      	ldr	r2, [pc, #108]	; (800e2e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d004      	beq.n	800e286 <HAL_TIM_Base_Start_IT+0x76>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4a19      	ldr	r2, [pc, #100]	; (800e2e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d115      	bne.n	800e2b2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	689a      	ldr	r2, [r3, #8]
 800e28c:	4b17      	ldr	r3, [pc, #92]	; (800e2ec <HAL_TIM_Base_Start_IT+0xdc>)
 800e28e:	4013      	ands	r3, r2
 800e290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b06      	cmp	r3, #6
 800e296:	d015      	beq.n	800e2c4 <HAL_TIM_Base_Start_IT+0xb4>
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e29e:	d011      	beq.n	800e2c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	681a      	ldr	r2, [r3, #0]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f042 0201 	orr.w	r2, r2, #1
 800e2ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2b0:	e008      	b.n	800e2c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f042 0201 	orr.w	r2, r2, #1
 800e2c0:	601a      	str	r2, [r3, #0]
 800e2c2:	e000      	b.n	800e2c6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e2c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e2c6:	2300      	movs	r3, #0
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3714      	adds	r7, #20
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr
 800e2d4:	40010000 	.word	0x40010000
 800e2d8:	40000400 	.word	0x40000400
 800e2dc:	40000800 	.word	0x40000800
 800e2e0:	40000c00 	.word	0x40000c00
 800e2e4:	40010400 	.word	0x40010400
 800e2e8:	40001800 	.word	0x40001800
 800e2ec:	00010007 	.word	0x00010007

0800e2f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b082      	sub	sp, #8
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d101      	bne.n	800e302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e2fe:	2301      	movs	r3, #1
 800e300:	e049      	b.n	800e396 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d106      	bne.n	800e31c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2200      	movs	r2, #0
 800e312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 f841 	bl	800e39e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2202      	movs	r2, #2
 800e320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3304      	adds	r3, #4
 800e32c:	4619      	mov	r1, r3
 800e32e:	4610      	mov	r0, r2
 800e330:	f000 fcda 	bl	800ece8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2201      	movs	r2, #1
 800e340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2201      	movs	r2, #1
 800e348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2201      	movs	r2, #1
 800e358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2201      	movs	r2, #1
 800e360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2201      	movs	r2, #1
 800e368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2201      	movs	r2, #1
 800e370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2201      	movs	r2, #1
 800e378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2201      	movs	r2, #1
 800e388:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2201      	movs	r2, #1
 800e390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e39e:	b480      	push	{r7}
 800e3a0:	b083      	sub	sp, #12
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e3a6:	bf00      	nop
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
	...

0800e3b4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d109      	bne.n	800e3d8 <HAL_TIM_PWM_Start_IT+0x24>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	bf14      	ite	ne
 800e3d0:	2301      	movne	r3, #1
 800e3d2:	2300      	moveq	r3, #0
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	e03c      	b.n	800e452 <HAL_TIM_PWM_Start_IT+0x9e>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d109      	bne.n	800e3f2 <HAL_TIM_PWM_Start_IT+0x3e>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	bf14      	ite	ne
 800e3ea:	2301      	movne	r3, #1
 800e3ec:	2300      	moveq	r3, #0
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	e02f      	b.n	800e452 <HAL_TIM_PWM_Start_IT+0x9e>
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	2b08      	cmp	r3, #8
 800e3f6:	d109      	bne.n	800e40c <HAL_TIM_PWM_Start_IT+0x58>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	2b01      	cmp	r3, #1
 800e402:	bf14      	ite	ne
 800e404:	2301      	movne	r3, #1
 800e406:	2300      	moveq	r3, #0
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	e022      	b.n	800e452 <HAL_TIM_PWM_Start_IT+0x9e>
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	2b0c      	cmp	r3, #12
 800e410:	d109      	bne.n	800e426 <HAL_TIM_PWM_Start_IT+0x72>
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e418:	b2db      	uxtb	r3, r3
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	bf14      	ite	ne
 800e41e:	2301      	movne	r3, #1
 800e420:	2300      	moveq	r3, #0
 800e422:	b2db      	uxtb	r3, r3
 800e424:	e015      	b.n	800e452 <HAL_TIM_PWM_Start_IT+0x9e>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b10      	cmp	r3, #16
 800e42a:	d109      	bne.n	800e440 <HAL_TIM_PWM_Start_IT+0x8c>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e432:	b2db      	uxtb	r3, r3
 800e434:	2b01      	cmp	r3, #1
 800e436:	bf14      	ite	ne
 800e438:	2301      	movne	r3, #1
 800e43a:	2300      	moveq	r3, #0
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	e008      	b.n	800e452 <HAL_TIM_PWM_Start_IT+0x9e>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b01      	cmp	r3, #1
 800e44a:	bf14      	ite	ne
 800e44c:	2301      	movne	r3, #1
 800e44e:	2300      	moveq	r3, #0
 800e450:	b2db      	uxtb	r3, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800e456:	2301      	movs	r3, #1
 800e458:	e0e2      	b.n	800e620 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d104      	bne.n	800e46a <HAL_TIM_PWM_Start_IT+0xb6>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2202      	movs	r2, #2
 800e464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e468:	e023      	b.n	800e4b2 <HAL_TIM_PWM_Start_IT+0xfe>
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b04      	cmp	r3, #4
 800e46e:	d104      	bne.n	800e47a <HAL_TIM_PWM_Start_IT+0xc6>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2202      	movs	r2, #2
 800e474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e478:	e01b      	b.n	800e4b2 <HAL_TIM_PWM_Start_IT+0xfe>
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b08      	cmp	r3, #8
 800e47e:	d104      	bne.n	800e48a <HAL_TIM_PWM_Start_IT+0xd6>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2202      	movs	r2, #2
 800e484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e488:	e013      	b.n	800e4b2 <HAL_TIM_PWM_Start_IT+0xfe>
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	2b0c      	cmp	r3, #12
 800e48e:	d104      	bne.n	800e49a <HAL_TIM_PWM_Start_IT+0xe6>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2202      	movs	r2, #2
 800e494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e498:	e00b      	b.n	800e4b2 <HAL_TIM_PWM_Start_IT+0xfe>
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b10      	cmp	r3, #16
 800e49e:	d104      	bne.n	800e4aa <HAL_TIM_PWM_Start_IT+0xf6>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e4a8:	e003      	b.n	800e4b2 <HAL_TIM_PWM_Start_IT+0xfe>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2202      	movs	r2, #2
 800e4ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b0c      	cmp	r3, #12
 800e4b6:	d841      	bhi.n	800e53c <HAL_TIM_PWM_Start_IT+0x188>
 800e4b8:	a201      	add	r2, pc, #4	; (adr r2, 800e4c0 <HAL_TIM_PWM_Start_IT+0x10c>)
 800e4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4be:	bf00      	nop
 800e4c0:	0800e4f5 	.word	0x0800e4f5
 800e4c4:	0800e53d 	.word	0x0800e53d
 800e4c8:	0800e53d 	.word	0x0800e53d
 800e4cc:	0800e53d 	.word	0x0800e53d
 800e4d0:	0800e507 	.word	0x0800e507
 800e4d4:	0800e53d 	.word	0x0800e53d
 800e4d8:	0800e53d 	.word	0x0800e53d
 800e4dc:	0800e53d 	.word	0x0800e53d
 800e4e0:	0800e519 	.word	0x0800e519
 800e4e4:	0800e53d 	.word	0x0800e53d
 800e4e8:	0800e53d 	.word	0x0800e53d
 800e4ec:	0800e53d 	.word	0x0800e53d
 800e4f0:	0800e52b 	.word	0x0800e52b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	68da      	ldr	r2, [r3, #12]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f042 0202 	orr.w	r2, r2, #2
 800e502:	60da      	str	r2, [r3, #12]
      break;
 800e504:	e01b      	b.n	800e53e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68da      	ldr	r2, [r3, #12]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f042 0204 	orr.w	r2, r2, #4
 800e514:	60da      	str	r2, [r3, #12]
      break;
 800e516:	e012      	b.n	800e53e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	68da      	ldr	r2, [r3, #12]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f042 0208 	orr.w	r2, r2, #8
 800e526:	60da      	str	r2, [r3, #12]
      break;
 800e528:	e009      	b.n	800e53e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68da      	ldr	r2, [r3, #12]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f042 0210 	orr.w	r2, r2, #16
 800e538:	60da      	str	r2, [r3, #12]
      break;
 800e53a:	e000      	b.n	800e53e <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 800e53c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2201      	movs	r2, #1
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	4618      	mov	r0, r3
 800e548:	f000 ffd4 	bl	800f4f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a35      	ldr	r2, [pc, #212]	; (800e628 <HAL_TIM_PWM_Start_IT+0x274>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d013      	beq.n	800e57e <HAL_TIM_PWM_Start_IT+0x1ca>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a34      	ldr	r2, [pc, #208]	; (800e62c <HAL_TIM_PWM_Start_IT+0x278>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d00e      	beq.n	800e57e <HAL_TIM_PWM_Start_IT+0x1ca>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a32      	ldr	r2, [pc, #200]	; (800e630 <HAL_TIM_PWM_Start_IT+0x27c>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d009      	beq.n	800e57e <HAL_TIM_PWM_Start_IT+0x1ca>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a31      	ldr	r2, [pc, #196]	; (800e634 <HAL_TIM_PWM_Start_IT+0x280>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d004      	beq.n	800e57e <HAL_TIM_PWM_Start_IT+0x1ca>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a2f      	ldr	r2, [pc, #188]	; (800e638 <HAL_TIM_PWM_Start_IT+0x284>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d101      	bne.n	800e582 <HAL_TIM_PWM_Start_IT+0x1ce>
 800e57e:	2301      	movs	r3, #1
 800e580:	e000      	b.n	800e584 <HAL_TIM_PWM_Start_IT+0x1d0>
 800e582:	2300      	movs	r3, #0
 800e584:	2b00      	cmp	r3, #0
 800e586:	d007      	beq.n	800e598 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e596:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a22      	ldr	r2, [pc, #136]	; (800e628 <HAL_TIM_PWM_Start_IT+0x274>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d01d      	beq.n	800e5de <HAL_TIM_PWM_Start_IT+0x22a>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5aa:	d018      	beq.n	800e5de <HAL_TIM_PWM_Start_IT+0x22a>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a22      	ldr	r2, [pc, #136]	; (800e63c <HAL_TIM_PWM_Start_IT+0x288>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d013      	beq.n	800e5de <HAL_TIM_PWM_Start_IT+0x22a>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a21      	ldr	r2, [pc, #132]	; (800e640 <HAL_TIM_PWM_Start_IT+0x28c>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d00e      	beq.n	800e5de <HAL_TIM_PWM_Start_IT+0x22a>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a1f      	ldr	r2, [pc, #124]	; (800e644 <HAL_TIM_PWM_Start_IT+0x290>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d009      	beq.n	800e5de <HAL_TIM_PWM_Start_IT+0x22a>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	4a17      	ldr	r2, [pc, #92]	; (800e62c <HAL_TIM_PWM_Start_IT+0x278>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d004      	beq.n	800e5de <HAL_TIM_PWM_Start_IT+0x22a>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	4a1b      	ldr	r2, [pc, #108]	; (800e648 <HAL_TIM_PWM_Start_IT+0x294>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d115      	bne.n	800e60a <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	689a      	ldr	r2, [r3, #8]
 800e5e4:	4b19      	ldr	r3, [pc, #100]	; (800e64c <HAL_TIM_PWM_Start_IT+0x298>)
 800e5e6:	4013      	ands	r3, r2
 800e5e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b06      	cmp	r3, #6
 800e5ee:	d015      	beq.n	800e61c <HAL_TIM_PWM_Start_IT+0x268>
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f6:	d011      	beq.n	800e61c <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	681a      	ldr	r2, [r3, #0]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f042 0201 	orr.w	r2, r2, #1
 800e606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e608:	e008      	b.n	800e61c <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f042 0201 	orr.w	r2, r2, #1
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	e000      	b.n	800e61e <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e61c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3710      	adds	r7, #16
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}
 800e628:	40010000 	.word	0x40010000
 800e62c:	40010400 	.word	0x40010400
 800e630:	40014000 	.word	0x40014000
 800e634:	40014400 	.word	0x40014400
 800e638:	40014800 	.word	0x40014800
 800e63c:	40000400 	.word	0x40000400
 800e640:	40000800 	.word	0x40000800
 800e644:	40000c00 	.word	0x40000c00
 800e648:	40001800 	.word	0x40001800
 800e64c:	00010007 	.word	0x00010007

0800e650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	691b      	ldr	r3, [r3, #16]
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b02      	cmp	r3, #2
 800e664:	d122      	bne.n	800e6ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	f003 0302 	and.w	r3, r3, #2
 800e670:	2b02      	cmp	r3, #2
 800e672:	d11b      	bne.n	800e6ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f06f 0202 	mvn.w	r2, #2
 800e67c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2201      	movs	r2, #1
 800e682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	f003 0303 	and.w	r3, r3, #3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d003      	beq.n	800e69a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 fb0a 	bl	800ecac <HAL_TIM_IC_CaptureCallback>
 800e698:	e005      	b.n	800e6a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 fafc 	bl	800ec98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f000 fb0d 	bl	800ecc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	691b      	ldr	r3, [r3, #16]
 800e6b2:	f003 0304 	and.w	r3, r3, #4
 800e6b6:	2b04      	cmp	r3, #4
 800e6b8:	d122      	bne.n	800e700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	f003 0304 	and.w	r3, r3, #4
 800e6c4:	2b04      	cmp	r3, #4
 800e6c6:	d11b      	bne.n	800e700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f06f 0204 	mvn.w	r2, #4
 800e6d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2202      	movs	r2, #2
 800e6d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	699b      	ldr	r3, [r3, #24]
 800e6de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d003      	beq.n	800e6ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 fae0 	bl	800ecac <HAL_TIM_IC_CaptureCallback>
 800e6ec:	e005      	b.n	800e6fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 fad2 	bl	800ec98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 fae3 	bl	800ecc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	691b      	ldr	r3, [r3, #16]
 800e706:	f003 0308 	and.w	r3, r3, #8
 800e70a:	2b08      	cmp	r3, #8
 800e70c:	d122      	bne.n	800e754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	f003 0308 	and.w	r3, r3, #8
 800e718:	2b08      	cmp	r3, #8
 800e71a:	d11b      	bne.n	800e754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f06f 0208 	mvn.w	r2, #8
 800e724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2204      	movs	r2, #4
 800e72a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	69db      	ldr	r3, [r3, #28]
 800e732:	f003 0303 	and.w	r3, r3, #3
 800e736:	2b00      	cmp	r3, #0
 800e738:	d003      	beq.n	800e742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 fab6 	bl	800ecac <HAL_TIM_IC_CaptureCallback>
 800e740:	e005      	b.n	800e74e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 faa8 	bl	800ec98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f000 fab9 	bl	800ecc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	f003 0310 	and.w	r3, r3, #16
 800e75e:	2b10      	cmp	r3, #16
 800e760:	d122      	bne.n	800e7a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	f003 0310 	and.w	r3, r3, #16
 800e76c:	2b10      	cmp	r3, #16
 800e76e:	d11b      	bne.n	800e7a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	f06f 0210 	mvn.w	r2, #16
 800e778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2208      	movs	r2, #8
 800e77e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	69db      	ldr	r3, [r3, #28]
 800e786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d003      	beq.n	800e796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 fa8c 	bl	800ecac <HAL_TIM_IC_CaptureCallback>
 800e794:	e005      	b.n	800e7a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 fa7e 	bl	800ec98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f000 fa8f 	bl	800ecc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	f003 0301 	and.w	r3, r3, #1
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d10e      	bne.n	800e7d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	f003 0301 	and.w	r3, r3, #1
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d107      	bne.n	800e7d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f06f 0201 	mvn.w	r2, #1
 800e7cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f7f5 fd7c 	bl	80042cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	691b      	ldr	r3, [r3, #16]
 800e7da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7de:	2b80      	cmp	r3, #128	; 0x80
 800e7e0:	d10e      	bne.n	800e800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7ec:	2b80      	cmp	r3, #128	; 0x80
 800e7ee:	d107      	bne.n	800e800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e7f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 ff32 	bl	800f664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	691b      	ldr	r3, [r3, #16]
 800e806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e80e:	d10e      	bne.n	800e82e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e81a:	2b80      	cmp	r3, #128	; 0x80
 800e81c:	d107      	bne.n	800e82e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f000 ff25 	bl	800f678 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	691b      	ldr	r3, [r3, #16]
 800e834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e838:	2b40      	cmp	r3, #64	; 0x40
 800e83a:	d10e      	bne.n	800e85a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e846:	2b40      	cmp	r3, #64	; 0x40
 800e848:	d107      	bne.n	800e85a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f000 fa3d 	bl	800ecd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	691b      	ldr	r3, [r3, #16]
 800e860:	f003 0320 	and.w	r3, r3, #32
 800e864:	2b20      	cmp	r3, #32
 800e866:	d10e      	bne.n	800e886 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	f003 0320 	and.w	r3, r3, #32
 800e872:	2b20      	cmp	r3, #32
 800e874:	d107      	bne.n	800e886 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f06f 0220 	mvn.w	r2, #32
 800e87e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f000 fee5 	bl	800f650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e886:	bf00      	nop
 800e888:	3708      	adds	r7, #8
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
	...

0800e890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d101      	bne.n	800e8aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e8a6:	2302      	movs	r3, #2
 800e8a8:	e0fd      	b.n	800eaa6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2b14      	cmp	r3, #20
 800e8b6:	f200 80f0 	bhi.w	800ea9a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e8ba:	a201      	add	r2, pc, #4	; (adr r2, 800e8c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8c0:	0800e915 	.word	0x0800e915
 800e8c4:	0800ea9b 	.word	0x0800ea9b
 800e8c8:	0800ea9b 	.word	0x0800ea9b
 800e8cc:	0800ea9b 	.word	0x0800ea9b
 800e8d0:	0800e955 	.word	0x0800e955
 800e8d4:	0800ea9b 	.word	0x0800ea9b
 800e8d8:	0800ea9b 	.word	0x0800ea9b
 800e8dc:	0800ea9b 	.word	0x0800ea9b
 800e8e0:	0800e997 	.word	0x0800e997
 800e8e4:	0800ea9b 	.word	0x0800ea9b
 800e8e8:	0800ea9b 	.word	0x0800ea9b
 800e8ec:	0800ea9b 	.word	0x0800ea9b
 800e8f0:	0800e9d7 	.word	0x0800e9d7
 800e8f4:	0800ea9b 	.word	0x0800ea9b
 800e8f8:	0800ea9b 	.word	0x0800ea9b
 800e8fc:	0800ea9b 	.word	0x0800ea9b
 800e900:	0800ea19 	.word	0x0800ea19
 800e904:	0800ea9b 	.word	0x0800ea9b
 800e908:	0800ea9b 	.word	0x0800ea9b
 800e90c:	0800ea9b 	.word	0x0800ea9b
 800e910:	0800ea59 	.word	0x0800ea59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	68b9      	ldr	r1, [r7, #8]
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 fa7e 	bl	800ee1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	699a      	ldr	r2, [r3, #24]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	f042 0208 	orr.w	r2, r2, #8
 800e92e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	699a      	ldr	r2, [r3, #24]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f022 0204 	bic.w	r2, r2, #4
 800e93e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	6999      	ldr	r1, [r3, #24]
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	691a      	ldr	r2, [r3, #16]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	430a      	orrs	r2, r1
 800e950:	619a      	str	r2, [r3, #24]
      break;
 800e952:	e0a3      	b.n	800ea9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	68b9      	ldr	r1, [r7, #8]
 800e95a:	4618      	mov	r0, r3
 800e95c:	f000 faee 	bl	800ef3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	699a      	ldr	r2, [r3, #24]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e96e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	699a      	ldr	r2, [r3, #24]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e97e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	6999      	ldr	r1, [r3, #24]
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	021a      	lsls	r2, r3, #8
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	430a      	orrs	r2, r1
 800e992:	619a      	str	r2, [r3, #24]
      break;
 800e994:	e082      	b.n	800ea9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	68b9      	ldr	r1, [r7, #8]
 800e99c:	4618      	mov	r0, r3
 800e99e:	f000 fb57 	bl	800f050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	69da      	ldr	r2, [r3, #28]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f042 0208 	orr.w	r2, r2, #8
 800e9b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	69da      	ldr	r2, [r3, #28]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f022 0204 	bic.w	r2, r2, #4
 800e9c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	69d9      	ldr	r1, [r3, #28]
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	691a      	ldr	r2, [r3, #16]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	430a      	orrs	r2, r1
 800e9d2:	61da      	str	r2, [r3, #28]
      break;
 800e9d4:	e062      	b.n	800ea9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	68b9      	ldr	r1, [r7, #8]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f000 fbbd 	bl	800f15c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	69da      	ldr	r2, [r3, #28]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	69da      	ldr	r2, [r3, #28]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	69d9      	ldr	r1, [r3, #28]
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	691b      	ldr	r3, [r3, #16]
 800ea0c:	021a      	lsls	r2, r3, #8
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	430a      	orrs	r2, r1
 800ea14:	61da      	str	r2, [r3, #28]
      break;
 800ea16:	e041      	b.n	800ea9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	68b9      	ldr	r1, [r7, #8]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f000 fc04 	bl	800f22c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f042 0208 	orr.w	r2, r2, #8
 800ea32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f022 0204 	bic.w	r2, r2, #4
 800ea42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	691a      	ldr	r2, [r3, #16]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	430a      	orrs	r2, r1
 800ea54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ea56:	e021      	b.n	800ea9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	68b9      	ldr	r1, [r7, #8]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f000 fc46 	bl	800f2f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	691b      	ldr	r3, [r3, #16]
 800ea8e:	021a      	lsls	r2, r3, #8
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	430a      	orrs	r2, r1
 800ea96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ea98:	e000      	b.n	800ea9c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ea9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop

0800eab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b084      	sub	sp, #16
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d101      	bne.n	800eac8 <HAL_TIM_ConfigClockSource+0x18>
 800eac4:	2302      	movs	r3, #2
 800eac6:	e0db      	b.n	800ec80 <HAL_TIM_ConfigClockSource+0x1d0>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2201      	movs	r2, #1
 800eacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2202      	movs	r2, #2
 800ead4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	4b69      	ldr	r3, [pc, #420]	; (800ec88 <HAL_TIM_ConfigClockSource+0x1d8>)
 800eae4:	4013      	ands	r3, r2
 800eae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eaee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68fa      	ldr	r2, [r7, #12]
 800eaf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a63      	ldr	r2, [pc, #396]	; (800ec8c <HAL_TIM_ConfigClockSource+0x1dc>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	f000 80a9 	beq.w	800ec56 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb04:	4a61      	ldr	r2, [pc, #388]	; (800ec8c <HAL_TIM_ConfigClockSource+0x1dc>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	f200 80ae 	bhi.w	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb0c:	4a60      	ldr	r2, [pc, #384]	; (800ec90 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	f000 80a1 	beq.w	800ec56 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb14:	4a5e      	ldr	r2, [pc, #376]	; (800ec90 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	f200 80a6 	bhi.w	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb1c:	4a5d      	ldr	r2, [pc, #372]	; (800ec94 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	f000 8099 	beq.w	800ec56 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb24:	4a5b      	ldr	r2, [pc, #364]	; (800ec94 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	f200 809e 	bhi.w	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb2c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eb30:	f000 8091 	beq.w	800ec56 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eb38:	f200 8096 	bhi.w	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb40:	f000 8089 	beq.w	800ec56 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb48:	f200 808e 	bhi.w	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb50:	d03e      	beq.n	800ebd0 <HAL_TIM_ConfigClockSource+0x120>
 800eb52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb56:	f200 8087 	bhi.w	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb5e:	f000 8085 	beq.w	800ec6c <HAL_TIM_ConfigClockSource+0x1bc>
 800eb62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb66:	d87f      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb68:	2b70      	cmp	r3, #112	; 0x70
 800eb6a:	d01a      	beq.n	800eba2 <HAL_TIM_ConfigClockSource+0xf2>
 800eb6c:	2b70      	cmp	r3, #112	; 0x70
 800eb6e:	d87b      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb70:	2b60      	cmp	r3, #96	; 0x60
 800eb72:	d050      	beq.n	800ec16 <HAL_TIM_ConfigClockSource+0x166>
 800eb74:	2b60      	cmp	r3, #96	; 0x60
 800eb76:	d877      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb78:	2b50      	cmp	r3, #80	; 0x50
 800eb7a:	d03c      	beq.n	800ebf6 <HAL_TIM_ConfigClockSource+0x146>
 800eb7c:	2b50      	cmp	r3, #80	; 0x50
 800eb7e:	d873      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb80:	2b40      	cmp	r3, #64	; 0x40
 800eb82:	d058      	beq.n	800ec36 <HAL_TIM_ConfigClockSource+0x186>
 800eb84:	2b40      	cmp	r3, #64	; 0x40
 800eb86:	d86f      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb88:	2b30      	cmp	r3, #48	; 0x30
 800eb8a:	d064      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb8c:	2b30      	cmp	r3, #48	; 0x30
 800eb8e:	d86b      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb90:	2b20      	cmp	r3, #32
 800eb92:	d060      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb94:	2b20      	cmp	r3, #32
 800eb96:	d867      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d05c      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb9c:	2b10      	cmp	r3, #16
 800eb9e:	d05a      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800eba0:	e062      	b.n	800ec68 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6818      	ldr	r0, [r3, #0]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	6899      	ldr	r1, [r3, #8]
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	685a      	ldr	r2, [r3, #4]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	f000 fc7f 	bl	800f4b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ebc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	609a      	str	r2, [r3, #8]
      break;
 800ebce:	e04e      	b.n	800ec6e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6818      	ldr	r0, [r3, #0]
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	6899      	ldr	r1, [r3, #8]
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	685a      	ldr	r2, [r3, #4]
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	68db      	ldr	r3, [r3, #12]
 800ebe0:	f000 fc68 	bl	800f4b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	689a      	ldr	r2, [r3, #8]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ebf2:	609a      	str	r2, [r3, #8]
      break;
 800ebf4:	e03b      	b.n	800ec6e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6818      	ldr	r0, [r3, #0]
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	6859      	ldr	r1, [r3, #4]
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	461a      	mov	r2, r3
 800ec04:	f000 fbd8 	bl	800f3b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2150      	movs	r1, #80	; 0x50
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f000 fc32 	bl	800f478 <TIM_ITRx_SetConfig>
      break;
 800ec14:	e02b      	b.n	800ec6e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6818      	ldr	r0, [r3, #0]
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	6859      	ldr	r1, [r3, #4]
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	461a      	mov	r2, r3
 800ec24:	f000 fbf7 	bl	800f416 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2160      	movs	r1, #96	; 0x60
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f000 fc22 	bl	800f478 <TIM_ITRx_SetConfig>
      break;
 800ec34:	e01b      	b.n	800ec6e <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6818      	ldr	r0, [r3, #0]
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	6859      	ldr	r1, [r3, #4]
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	461a      	mov	r2, r3
 800ec44:	f000 fbb8 	bl	800f3b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2140      	movs	r1, #64	; 0x40
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 fc12 	bl	800f478 <TIM_ITRx_SetConfig>
      break;
 800ec54:	e00b      	b.n	800ec6e <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4619      	mov	r1, r3
 800ec60:	4610      	mov	r0, r2
 800ec62:	f000 fc09 	bl	800f478 <TIM_ITRx_SetConfig>
        break;
 800ec66:	e002      	b.n	800ec6e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ec68:	bf00      	nop
 800ec6a:	e000      	b.n	800ec6e <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ec6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2201      	movs	r2, #1
 800ec72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	ffceff88 	.word	0xffceff88
 800ec8c:	00100040 	.word	0x00100040
 800ec90:	00100030 	.word	0x00100030
 800ec94:	00100020 	.word	0x00100020

0800ec98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ecb4:	bf00      	nop
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ecc8:	bf00      	nop
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ecdc:	bf00      	nop
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4a40      	ldr	r2, [pc, #256]	; (800edfc <TIM_Base_SetConfig+0x114>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d013      	beq.n	800ed28 <TIM_Base_SetConfig+0x40>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed06:	d00f      	beq.n	800ed28 <TIM_Base_SetConfig+0x40>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4a3d      	ldr	r2, [pc, #244]	; (800ee00 <TIM_Base_SetConfig+0x118>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d00b      	beq.n	800ed28 <TIM_Base_SetConfig+0x40>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	4a3c      	ldr	r2, [pc, #240]	; (800ee04 <TIM_Base_SetConfig+0x11c>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d007      	beq.n	800ed28 <TIM_Base_SetConfig+0x40>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	4a3b      	ldr	r2, [pc, #236]	; (800ee08 <TIM_Base_SetConfig+0x120>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d003      	beq.n	800ed28 <TIM_Base_SetConfig+0x40>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4a3a      	ldr	r2, [pc, #232]	; (800ee0c <TIM_Base_SetConfig+0x124>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d108      	bne.n	800ed3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	4313      	orrs	r3, r2
 800ed38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a2f      	ldr	r2, [pc, #188]	; (800edfc <TIM_Base_SetConfig+0x114>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d01f      	beq.n	800ed82 <TIM_Base_SetConfig+0x9a>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed48:	d01b      	beq.n	800ed82 <TIM_Base_SetConfig+0x9a>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4a2c      	ldr	r2, [pc, #176]	; (800ee00 <TIM_Base_SetConfig+0x118>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d017      	beq.n	800ed82 <TIM_Base_SetConfig+0x9a>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4a2b      	ldr	r2, [pc, #172]	; (800ee04 <TIM_Base_SetConfig+0x11c>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d013      	beq.n	800ed82 <TIM_Base_SetConfig+0x9a>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4a2a      	ldr	r2, [pc, #168]	; (800ee08 <TIM_Base_SetConfig+0x120>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d00f      	beq.n	800ed82 <TIM_Base_SetConfig+0x9a>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4a29      	ldr	r2, [pc, #164]	; (800ee0c <TIM_Base_SetConfig+0x124>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d00b      	beq.n	800ed82 <TIM_Base_SetConfig+0x9a>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4a28      	ldr	r2, [pc, #160]	; (800ee10 <TIM_Base_SetConfig+0x128>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d007      	beq.n	800ed82 <TIM_Base_SetConfig+0x9a>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4a27      	ldr	r2, [pc, #156]	; (800ee14 <TIM_Base_SetConfig+0x12c>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d003      	beq.n	800ed82 <TIM_Base_SetConfig+0x9a>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4a26      	ldr	r2, [pc, #152]	; (800ee18 <TIM_Base_SetConfig+0x130>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d108      	bne.n	800ed94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	68db      	ldr	r3, [r3, #12]
 800ed8e:	68fa      	ldr	r2, [r7, #12]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	695b      	ldr	r3, [r3, #20]
 800ed9e:	4313      	orrs	r3, r2
 800eda0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	689a      	ldr	r2, [r3, #8]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4a10      	ldr	r2, [pc, #64]	; (800edfc <TIM_Base_SetConfig+0x114>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d00f      	beq.n	800ede0 <TIM_Base_SetConfig+0xf8>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	4a12      	ldr	r2, [pc, #72]	; (800ee0c <TIM_Base_SetConfig+0x124>)
 800edc4:	4293      	cmp	r3, r2
 800edc6:	d00b      	beq.n	800ede0 <TIM_Base_SetConfig+0xf8>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4a11      	ldr	r2, [pc, #68]	; (800ee10 <TIM_Base_SetConfig+0x128>)
 800edcc:	4293      	cmp	r3, r2
 800edce:	d007      	beq.n	800ede0 <TIM_Base_SetConfig+0xf8>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	4a10      	ldr	r2, [pc, #64]	; (800ee14 <TIM_Base_SetConfig+0x12c>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d003      	beq.n	800ede0 <TIM_Base_SetConfig+0xf8>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a0f      	ldr	r2, [pc, #60]	; (800ee18 <TIM_Base_SetConfig+0x130>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d103      	bne.n	800ede8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	691a      	ldr	r2, [r3, #16]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	615a      	str	r2, [r3, #20]
}
 800edee:	bf00      	nop
 800edf0:	3714      	adds	r7, #20
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
 800edfa:	bf00      	nop
 800edfc:	40010000 	.word	0x40010000
 800ee00:	40000400 	.word	0x40000400
 800ee04:	40000800 	.word	0x40000800
 800ee08:	40000c00 	.word	0x40000c00
 800ee0c:	40010400 	.word	0x40010400
 800ee10:	40014000 	.word	0x40014000
 800ee14:	40014400 	.word	0x40014400
 800ee18:	40014800 	.word	0x40014800

0800ee1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b087      	sub	sp, #28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6a1b      	ldr	r3, [r3, #32]
 800ee2a:	f023 0201 	bic.w	r2, r3, #1
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a1b      	ldr	r3, [r3, #32]
 800ee36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	699b      	ldr	r3, [r3, #24]
 800ee42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	4b37      	ldr	r3, [pc, #220]	; (800ef24 <TIM_OC1_SetConfig+0x108>)
 800ee48:	4013      	ands	r3, r2
 800ee4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f023 0303 	bic.w	r3, r3, #3
 800ee52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	68fa      	ldr	r2, [r7, #12]
 800ee5a:	4313      	orrs	r3, r2
 800ee5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	f023 0302 	bic.w	r3, r3, #2
 800ee64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	689b      	ldr	r3, [r3, #8]
 800ee6a:	697a      	ldr	r2, [r7, #20]
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4a2d      	ldr	r2, [pc, #180]	; (800ef28 <TIM_OC1_SetConfig+0x10c>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d00f      	beq.n	800ee98 <TIM_OC1_SetConfig+0x7c>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4a2c      	ldr	r2, [pc, #176]	; (800ef2c <TIM_OC1_SetConfig+0x110>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d00b      	beq.n	800ee98 <TIM_OC1_SetConfig+0x7c>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4a2b      	ldr	r2, [pc, #172]	; (800ef30 <TIM_OC1_SetConfig+0x114>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d007      	beq.n	800ee98 <TIM_OC1_SetConfig+0x7c>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a2a      	ldr	r2, [pc, #168]	; (800ef34 <TIM_OC1_SetConfig+0x118>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d003      	beq.n	800ee98 <TIM_OC1_SetConfig+0x7c>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a29      	ldr	r2, [pc, #164]	; (800ef38 <TIM_OC1_SetConfig+0x11c>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d10c      	bne.n	800eeb2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	f023 0308 	bic.w	r3, r3, #8
 800ee9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f023 0304 	bic.w	r3, r3, #4
 800eeb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4a1c      	ldr	r2, [pc, #112]	; (800ef28 <TIM_OC1_SetConfig+0x10c>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d00f      	beq.n	800eeda <TIM_OC1_SetConfig+0xbe>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a1b      	ldr	r2, [pc, #108]	; (800ef2c <TIM_OC1_SetConfig+0x110>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d00b      	beq.n	800eeda <TIM_OC1_SetConfig+0xbe>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4a1a      	ldr	r2, [pc, #104]	; (800ef30 <TIM_OC1_SetConfig+0x114>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d007      	beq.n	800eeda <TIM_OC1_SetConfig+0xbe>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4a19      	ldr	r2, [pc, #100]	; (800ef34 <TIM_OC1_SetConfig+0x118>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d003      	beq.n	800eeda <TIM_OC1_SetConfig+0xbe>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4a18      	ldr	r2, [pc, #96]	; (800ef38 <TIM_OC1_SetConfig+0x11c>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d111      	bne.n	800eefe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	695b      	ldr	r3, [r3, #20]
 800eeee:	693a      	ldr	r2, [r7, #16]
 800eef0:	4313      	orrs	r3, r2
 800eef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	693a      	ldr	r2, [r7, #16]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	693a      	ldr	r2, [r7, #16]
 800ef02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	685a      	ldr	r2, [r3, #4]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	697a      	ldr	r2, [r7, #20]
 800ef16:	621a      	str	r2, [r3, #32]
}
 800ef18:	bf00      	nop
 800ef1a:	371c      	adds	r7, #28
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr
 800ef24:	fffeff8f 	.word	0xfffeff8f
 800ef28:	40010000 	.word	0x40010000
 800ef2c:	40010400 	.word	0x40010400
 800ef30:	40014000 	.word	0x40014000
 800ef34:	40014400 	.word	0x40014400
 800ef38:	40014800 	.word	0x40014800

0800ef3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b087      	sub	sp, #28
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a1b      	ldr	r3, [r3, #32]
 800ef4a:	f023 0210 	bic.w	r2, r3, #16
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ef64:	68fa      	ldr	r2, [r7, #12]
 800ef66:	4b34      	ldr	r3, [pc, #208]	; (800f038 <TIM_OC2_SetConfig+0xfc>)
 800ef68:	4013      	ands	r3, r2
 800ef6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	021b      	lsls	r3, r3, #8
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	f023 0320 	bic.w	r3, r3, #32
 800ef86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	689b      	ldr	r3, [r3, #8]
 800ef8c:	011b      	lsls	r3, r3, #4
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	4313      	orrs	r3, r2
 800ef92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4a29      	ldr	r2, [pc, #164]	; (800f03c <TIM_OC2_SetConfig+0x100>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d003      	beq.n	800efa4 <TIM_OC2_SetConfig+0x68>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	4a28      	ldr	r2, [pc, #160]	; (800f040 <TIM_OC2_SetConfig+0x104>)
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d10d      	bne.n	800efc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	011b      	lsls	r3, r3, #4
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	4313      	orrs	r3, r2
 800efb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a1e      	ldr	r2, [pc, #120]	; (800f03c <TIM_OC2_SetConfig+0x100>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d00f      	beq.n	800efe8 <TIM_OC2_SetConfig+0xac>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4a1d      	ldr	r2, [pc, #116]	; (800f040 <TIM_OC2_SetConfig+0x104>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d00b      	beq.n	800efe8 <TIM_OC2_SetConfig+0xac>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	4a1c      	ldr	r2, [pc, #112]	; (800f044 <TIM_OC2_SetConfig+0x108>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d007      	beq.n	800efe8 <TIM_OC2_SetConfig+0xac>
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4a1b      	ldr	r2, [pc, #108]	; (800f048 <TIM_OC2_SetConfig+0x10c>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d003      	beq.n	800efe8 <TIM_OC2_SetConfig+0xac>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4a1a      	ldr	r2, [pc, #104]	; (800f04c <TIM_OC2_SetConfig+0x110>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d113      	bne.n	800f010 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800efee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	695b      	ldr	r3, [r3, #20]
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	693a      	ldr	r2, [r7, #16]
 800f000:	4313      	orrs	r3, r2
 800f002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	699b      	ldr	r3, [r3, #24]
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	693a      	ldr	r2, [r7, #16]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	693a      	ldr	r2, [r7, #16]
 800f014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	697a      	ldr	r2, [r7, #20]
 800f028:	621a      	str	r2, [r3, #32]
}
 800f02a:	bf00      	nop
 800f02c:	371c      	adds	r7, #28
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	feff8fff 	.word	0xfeff8fff
 800f03c:	40010000 	.word	0x40010000
 800f040:	40010400 	.word	0x40010400
 800f044:	40014000 	.word	0x40014000
 800f048:	40014400 	.word	0x40014400
 800f04c:	40014800 	.word	0x40014800

0800f050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f050:	b480      	push	{r7}
 800f052:	b087      	sub	sp, #28
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
 800f058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a1b      	ldr	r3, [r3, #32]
 800f05e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6a1b      	ldr	r3, [r3, #32]
 800f06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	69db      	ldr	r3, [r3, #28]
 800f076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f023 0303 	bic.w	r3, r3, #3
 800f086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	4313      	orrs	r3, r2
 800f090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	021b      	lsls	r3, r3, #8
 800f0a0:	697a      	ldr	r2, [r7, #20]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	4a27      	ldr	r2, [pc, #156]	; (800f148 <TIM_OC3_SetConfig+0xf8>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d003      	beq.n	800f0b6 <TIM_OC3_SetConfig+0x66>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	4a26      	ldr	r2, [pc, #152]	; (800f14c <TIM_OC3_SetConfig+0xfc>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d10d      	bne.n	800f0d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f0bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	021b      	lsls	r3, r3, #8
 800f0c4:	697a      	ldr	r2, [r7, #20]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f0d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4a1c      	ldr	r2, [pc, #112]	; (800f148 <TIM_OC3_SetConfig+0xf8>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d00f      	beq.n	800f0fa <TIM_OC3_SetConfig+0xaa>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4a1b      	ldr	r2, [pc, #108]	; (800f14c <TIM_OC3_SetConfig+0xfc>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d00b      	beq.n	800f0fa <TIM_OC3_SetConfig+0xaa>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	4a1a      	ldr	r2, [pc, #104]	; (800f150 <TIM_OC3_SetConfig+0x100>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d007      	beq.n	800f0fa <TIM_OC3_SetConfig+0xaa>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4a19      	ldr	r2, [pc, #100]	; (800f154 <TIM_OC3_SetConfig+0x104>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d003      	beq.n	800f0fa <TIM_OC3_SetConfig+0xaa>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4a18      	ldr	r2, [pc, #96]	; (800f158 <TIM_OC3_SetConfig+0x108>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d113      	bne.n	800f122 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	695b      	ldr	r3, [r3, #20]
 800f10e:	011b      	lsls	r3, r3, #4
 800f110:	693a      	ldr	r2, [r7, #16]
 800f112:	4313      	orrs	r3, r2
 800f114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	699b      	ldr	r3, [r3, #24]
 800f11a:	011b      	lsls	r3, r3, #4
 800f11c:	693a      	ldr	r2, [r7, #16]
 800f11e:	4313      	orrs	r3, r2
 800f120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	685a      	ldr	r2, [r3, #4]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	697a      	ldr	r2, [r7, #20]
 800f13a:	621a      	str	r2, [r3, #32]
}
 800f13c:	bf00      	nop
 800f13e:	371c      	adds	r7, #28
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr
 800f148:	40010000 	.word	0x40010000
 800f14c:	40010400 	.word	0x40010400
 800f150:	40014000 	.word	0x40014000
 800f154:	40014400 	.word	0x40014400
 800f158:	40014800 	.word	0x40014800

0800f15c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b087      	sub	sp, #28
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	6a1b      	ldr	r3, [r3, #32]
 800f16a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6a1b      	ldr	r3, [r3, #32]
 800f176:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	69db      	ldr	r3, [r3, #28]
 800f182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	021b      	lsls	r3, r3, #8
 800f19a:	68fa      	ldr	r2, [r7, #12]
 800f19c:	4313      	orrs	r3, r2
 800f19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f1a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	031b      	lsls	r3, r3, #12
 800f1ae:	693a      	ldr	r2, [r7, #16]
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4a18      	ldr	r2, [pc, #96]	; (800f218 <TIM_OC4_SetConfig+0xbc>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d00f      	beq.n	800f1dc <TIM_OC4_SetConfig+0x80>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4a17      	ldr	r2, [pc, #92]	; (800f21c <TIM_OC4_SetConfig+0xc0>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d00b      	beq.n	800f1dc <TIM_OC4_SetConfig+0x80>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	4a16      	ldr	r2, [pc, #88]	; (800f220 <TIM_OC4_SetConfig+0xc4>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d007      	beq.n	800f1dc <TIM_OC4_SetConfig+0x80>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4a15      	ldr	r2, [pc, #84]	; (800f224 <TIM_OC4_SetConfig+0xc8>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d003      	beq.n	800f1dc <TIM_OC4_SetConfig+0x80>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	4a14      	ldr	r2, [pc, #80]	; (800f228 <TIM_OC4_SetConfig+0xcc>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d109      	bne.n	800f1f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	695b      	ldr	r3, [r3, #20]
 800f1e8:	019b      	lsls	r3, r3, #6
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	697a      	ldr	r2, [r7, #20]
 800f1f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	685a      	ldr	r2, [r3, #4]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	693a      	ldr	r2, [r7, #16]
 800f208:	621a      	str	r2, [r3, #32]
}
 800f20a:	bf00      	nop
 800f20c:	371c      	adds	r7, #28
 800f20e:	46bd      	mov	sp, r7
 800f210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop
 800f218:	40010000 	.word	0x40010000
 800f21c:	40010400 	.word	0x40010400
 800f220:	40014000 	.word	0x40014000
 800f224:	40014400 	.word	0x40014400
 800f228:	40014800 	.word	0x40014800

0800f22c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b087      	sub	sp, #28
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a1b      	ldr	r3, [r3, #32]
 800f23a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a1b      	ldr	r3, [r3, #32]
 800f246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	4313      	orrs	r3, r2
 800f264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f26c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	041b      	lsls	r3, r3, #16
 800f274:	693a      	ldr	r2, [r7, #16]
 800f276:	4313      	orrs	r3, r2
 800f278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4a17      	ldr	r2, [pc, #92]	; (800f2dc <TIM_OC5_SetConfig+0xb0>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d00f      	beq.n	800f2a2 <TIM_OC5_SetConfig+0x76>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4a16      	ldr	r2, [pc, #88]	; (800f2e0 <TIM_OC5_SetConfig+0xb4>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d00b      	beq.n	800f2a2 <TIM_OC5_SetConfig+0x76>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4a15      	ldr	r2, [pc, #84]	; (800f2e4 <TIM_OC5_SetConfig+0xb8>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d007      	beq.n	800f2a2 <TIM_OC5_SetConfig+0x76>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4a14      	ldr	r2, [pc, #80]	; (800f2e8 <TIM_OC5_SetConfig+0xbc>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d003      	beq.n	800f2a2 <TIM_OC5_SetConfig+0x76>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4a13      	ldr	r2, [pc, #76]	; (800f2ec <TIM_OC5_SetConfig+0xc0>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d109      	bne.n	800f2b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	695b      	ldr	r3, [r3, #20]
 800f2ae:	021b      	lsls	r3, r3, #8
 800f2b0:	697a      	ldr	r2, [r7, #20]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	697a      	ldr	r2, [r7, #20]
 800f2ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	68fa      	ldr	r2, [r7, #12]
 800f2c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	685a      	ldr	r2, [r3, #4]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	621a      	str	r2, [r3, #32]
}
 800f2d0:	bf00      	nop
 800f2d2:	371c      	adds	r7, #28
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	40010000 	.word	0x40010000
 800f2e0:	40010400 	.word	0x40010400
 800f2e4:	40014000 	.word	0x40014000
 800f2e8:	40014400 	.word	0x40014400
 800f2ec:	40014800 	.word	0x40014800

0800f2f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b087      	sub	sp, #28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a1b      	ldr	r3, [r3, #32]
 800f2fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a1b      	ldr	r3, [r3, #32]
 800f30a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f31e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	021b      	lsls	r3, r3, #8
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	4313      	orrs	r3, r2
 800f32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	051b      	lsls	r3, r3, #20
 800f33a:	693a      	ldr	r2, [r7, #16]
 800f33c:	4313      	orrs	r3, r2
 800f33e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	4a18      	ldr	r2, [pc, #96]	; (800f3a4 <TIM_OC6_SetConfig+0xb4>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d00f      	beq.n	800f368 <TIM_OC6_SetConfig+0x78>
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	4a17      	ldr	r2, [pc, #92]	; (800f3a8 <TIM_OC6_SetConfig+0xb8>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d00b      	beq.n	800f368 <TIM_OC6_SetConfig+0x78>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4a16      	ldr	r2, [pc, #88]	; (800f3ac <TIM_OC6_SetConfig+0xbc>)
 800f354:	4293      	cmp	r3, r2
 800f356:	d007      	beq.n	800f368 <TIM_OC6_SetConfig+0x78>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	4a15      	ldr	r2, [pc, #84]	; (800f3b0 <TIM_OC6_SetConfig+0xc0>)
 800f35c:	4293      	cmp	r3, r2
 800f35e:	d003      	beq.n	800f368 <TIM_OC6_SetConfig+0x78>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	4a14      	ldr	r2, [pc, #80]	; (800f3b4 <TIM_OC6_SetConfig+0xc4>)
 800f364:	4293      	cmp	r3, r2
 800f366:	d109      	bne.n	800f37c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f36e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	695b      	ldr	r3, [r3, #20]
 800f374:	029b      	lsls	r3, r3, #10
 800f376:	697a      	ldr	r2, [r7, #20]
 800f378:	4313      	orrs	r3, r2
 800f37a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	697a      	ldr	r2, [r7, #20]
 800f380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	68fa      	ldr	r2, [r7, #12]
 800f386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	685a      	ldr	r2, [r3, #4]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	693a      	ldr	r2, [r7, #16]
 800f394:	621a      	str	r2, [r3, #32]
}
 800f396:	bf00      	nop
 800f398:	371c      	adds	r7, #28
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	40010000 	.word	0x40010000
 800f3a8:	40010400 	.word	0x40010400
 800f3ac:	40014000 	.word	0x40014000
 800f3b0:	40014400 	.word	0x40014400
 800f3b4:	40014800 	.word	0x40014800

0800f3b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b087      	sub	sp, #28
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	6a1b      	ldr	r3, [r3, #32]
 800f3c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6a1b      	ldr	r3, [r3, #32]
 800f3ce:	f023 0201 	bic.w	r2, r3, #1
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	699b      	ldr	r3, [r3, #24]
 800f3da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f3e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	011b      	lsls	r3, r3, #4
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	f023 030a 	bic.w	r3, r3, #10
 800f3f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f3f6:	697a      	ldr	r2, [r7, #20]
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	693a      	ldr	r2, [r7, #16]
 800f402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	697a      	ldr	r2, [r7, #20]
 800f408:	621a      	str	r2, [r3, #32]
}
 800f40a:	bf00      	nop
 800f40c:	371c      	adds	r7, #28
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f416:	b480      	push	{r7}
 800f418:	b087      	sub	sp, #28
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	60f8      	str	r0, [r7, #12]
 800f41e:	60b9      	str	r1, [r7, #8]
 800f420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	6a1b      	ldr	r3, [r3, #32]
 800f426:	f023 0210 	bic.w	r2, r3, #16
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	699b      	ldr	r3, [r3, #24]
 800f432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	6a1b      	ldr	r3, [r3, #32]
 800f438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	031b      	lsls	r3, r3, #12
 800f446:	697a      	ldr	r2, [r7, #20]
 800f448:	4313      	orrs	r3, r2
 800f44a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	011b      	lsls	r3, r3, #4
 800f458:	693a      	ldr	r2, [r7, #16]
 800f45a:	4313      	orrs	r3, r2
 800f45c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	697a      	ldr	r2, [r7, #20]
 800f462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	693a      	ldr	r2, [r7, #16]
 800f468:	621a      	str	r2, [r3, #32]
}
 800f46a:	bf00      	nop
 800f46c:	371c      	adds	r7, #28
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr
	...

0800f478 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f478:	b480      	push	{r7}
 800f47a:	b085      	sub	sp, #20
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	4b09      	ldr	r3, [pc, #36]	; (800f4b0 <TIM_ITRx_SetConfig+0x38>)
 800f48c:	4013      	ands	r3, r2
 800f48e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f490:	683a      	ldr	r2, [r7, #0]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	4313      	orrs	r3, r2
 800f496:	f043 0307 	orr.w	r3, r3, #7
 800f49a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	68fa      	ldr	r2, [r7, #12]
 800f4a0:	609a      	str	r2, [r3, #8]
}
 800f4a2:	bf00      	nop
 800f4a4:	3714      	adds	r7, #20
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr
 800f4ae:	bf00      	nop
 800f4b0:	ffcfff8f 	.word	0xffcfff8f

0800f4b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b087      	sub	sp, #28
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	607a      	str	r2, [r7, #4]
 800f4c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	689b      	ldr	r3, [r3, #8]
 800f4c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f4ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	021a      	lsls	r2, r3, #8
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	431a      	orrs	r2, r3
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	697a      	ldr	r2, [r7, #20]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	697a      	ldr	r2, [r7, #20]
 800f4e6:	609a      	str	r2, [r3, #8]
}
 800f4e8:	bf00      	nop
 800f4ea:	371c      	adds	r7, #28
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr

0800f4f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b087      	sub	sp, #28
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	f003 031f 	and.w	r3, r3, #31
 800f506:	2201      	movs	r2, #1
 800f508:	fa02 f303 	lsl.w	r3, r2, r3
 800f50c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	6a1a      	ldr	r2, [r3, #32]
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	43db      	mvns	r3, r3
 800f516:	401a      	ands	r2, r3
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6a1a      	ldr	r2, [r3, #32]
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	f003 031f 	and.w	r3, r3, #31
 800f526:	6879      	ldr	r1, [r7, #4]
 800f528:	fa01 f303 	lsl.w	r3, r1, r3
 800f52c:	431a      	orrs	r2, r3
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	621a      	str	r2, [r3, #32]
}
 800f532:	bf00      	nop
 800f534:	371c      	adds	r7, #28
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr
	...

0800f540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f540:	b480      	push	{r7}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f550:	2b01      	cmp	r3, #1
 800f552:	d101      	bne.n	800f558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f554:	2302      	movs	r3, #2
 800f556:	e068      	b.n	800f62a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2202      	movs	r2, #2
 800f564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	689b      	ldr	r3, [r3, #8]
 800f576:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4a2e      	ldr	r2, [pc, #184]	; (800f638 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d004      	beq.n	800f58c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	4a2d      	ldr	r2, [pc, #180]	; (800f63c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d108      	bne.n	800f59e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f592:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4a1e      	ldr	r2, [pc, #120]	; (800f638 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d01d      	beq.n	800f5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5ca:	d018      	beq.n	800f5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	4a1b      	ldr	r2, [pc, #108]	; (800f640 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d013      	beq.n	800f5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	4a1a      	ldr	r2, [pc, #104]	; (800f644 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d00e      	beq.n	800f5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	4a18      	ldr	r2, [pc, #96]	; (800f648 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	d009      	beq.n	800f5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	4a13      	ldr	r2, [pc, #76]	; (800f63c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d004      	beq.n	800f5fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a14      	ldr	r2, [pc, #80]	; (800f64c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d10c      	bne.n	800f618 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f604:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f606:	683b      	ldr	r3, [r7, #0]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	4313      	orrs	r3, r2
 800f60e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	68ba      	ldr	r2, [r7, #8]
 800f616:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2201      	movs	r2, #1
 800f61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f628:	2300      	movs	r3, #0
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3714      	adds	r7, #20
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr
 800f636:	bf00      	nop
 800f638:	40010000 	.word	0x40010000
 800f63c:	40010400 	.word	0x40010400
 800f640:	40000400 	.word	0x40000400
 800f644:	40000800 	.word	0x40000800
 800f648:	40000c00 	.word	0x40000c00
 800f64c:	40001800 	.word	0x40001800

0800f650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f650:	b480      	push	{r7}
 800f652:	b083      	sub	sp, #12
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f658:	bf00      	nop
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr

0800f678 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f680:	bf00      	nop
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr

0800f68c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d101      	bne.n	800f69e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f69a:	2301      	movs	r3, #1
 800f69c:	e042      	b.n	800f724 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d106      	bne.n	800f6b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f7f4 fc2f 	bl	8003f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2224      	movs	r2, #36	; 0x24
 800f6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f022 0201 	bic.w	r2, r2, #1
 800f6cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 fbe0 	bl	800fe94 <UART_SetConfig>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d101      	bne.n	800f6de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	e022      	b.n	800f724 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d002      	beq.n	800f6ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f001 f934 	bl	8010954 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	685a      	ldr	r2, [r3, #4]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f6fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	689a      	ldr	r2, [r3, #8]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f70a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f042 0201 	orr.w	r2, r2, #1
 800f71a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f001 f9bb 	bl	8010a98 <UART_CheckIdleState>
 800f722:	4603      	mov	r3, r0
}
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	4613      	mov	r3, r2
 800f738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f740:	2b20      	cmp	r3, #32
 800f742:	d168      	bne.n	800f816 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d002      	beq.n	800f750 <HAL_UART_Transmit_DMA+0x24>
 800f74a:	88fb      	ldrh	r3, [r7, #6]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d101      	bne.n	800f754 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f750:	2301      	movs	r3, #1
 800f752:	e061      	b.n	800f818 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d101      	bne.n	800f762 <HAL_UART_Transmit_DMA+0x36>
 800f75e:	2302      	movs	r3, #2
 800f760:	e05a      	b.n	800f818 <HAL_UART_Transmit_DMA+0xec>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2201      	movs	r2, #1
 800f766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	88fa      	ldrh	r2, [r7, #6]
 800f774:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	88fa      	ldrh	r2, [r7, #6]
 800f77c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2200      	movs	r2, #0
 800f784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2221      	movs	r2, #33	; 0x21
 800f78c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f794:	2b00      	cmp	r3, #0
 800f796:	d02c      	beq.n	800f7f2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f79c:	4a20      	ldr	r2, [pc, #128]	; (800f820 <HAL_UART_Transmit_DMA+0xf4>)
 800f79e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7a4:	4a1f      	ldr	r2, [pc, #124]	; (800f824 <HAL_UART_Transmit_DMA+0xf8>)
 800f7a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7ac:	4a1e      	ldr	r2, [pc, #120]	; (800f828 <HAL_UART_Transmit_DMA+0xfc>)
 800f7ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7b4:	2200      	movs	r2, #0
 800f7b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	3328      	adds	r3, #40	; 0x28
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	88fb      	ldrh	r3, [r7, #6]
 800f7cc:	f7f6 f9c0 	bl	8005b50 <HAL_DMA_Start_IT>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00d      	beq.n	800f7f2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2210      	movs	r2, #16
 800f7da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2200      	movs	r2, #0
 800f7e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2220      	movs	r2, #32
 800f7ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e012      	b.n	800f818 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2240      	movs	r2, #64	; 0x40
 800f7f8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	689a      	ldr	r2, [r3, #8]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f810:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800f812:	2300      	movs	r3, #0
 800f814:	e000      	b.n	800f818 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800f816:	2302      	movs	r3, #2
  }
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3710      	adds	r7, #16
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	08010dad 	.word	0x08010dad
 800f824:	08010dfd 	.word	0x08010dfd
 800f828:	08010ee7 	.word	0x08010ee7

0800f82c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	4613      	mov	r3, r2
 800f838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f840:	2b20      	cmp	r3, #32
 800f842:	d131      	bne.n	800f8a8 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d002      	beq.n	800f850 <HAL_UART_Receive_DMA+0x24>
 800f84a:	88fb      	ldrh	r3, [r7, #6]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d101      	bne.n	800f854 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	e02a      	b.n	800f8aa <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	d101      	bne.n	800f862 <HAL_UART_Receive_DMA+0x36>
 800f85e:	2302      	movs	r3, #2
 800f860:	e023      	b.n	800f8aa <HAL_UART_Receive_DMA+0x7e>
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2201      	movs	r2, #1
 800f866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2200      	movs	r2, #0
 800f86e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4a0f      	ldr	r2, [pc, #60]	; (800f8b4 <HAL_UART_Receive_DMA+0x88>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d00e      	beq.n	800f898 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f884:	2b00      	cmp	r3, #0
 800f886:	d007      	beq.n	800f898 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f896:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f898:	88fb      	ldrh	r3, [r7, #6]
 800f89a:	461a      	mov	r2, r3
 800f89c:	68b9      	ldr	r1, [r7, #8]
 800f89e:	68f8      	ldr	r0, [r7, #12]
 800f8a0:	f001 f9c6 	bl	8010c30 <UART_Start_Receive_DMA>
 800f8a4:	4603      	mov	r3, r0
 800f8a6:	e000      	b.n	800f8aa <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f8a8:	2302      	movs	r3, #2
  }
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	58000c00 	.word	0x58000c00

0800f8b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b088      	sub	sp, #32
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	69db      	ldr	r3, [r3, #28]
 800f8c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	689b      	ldr	r3, [r3, #8]
 800f8d6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f8d8:	69fa      	ldr	r2, [r7, #28]
 800f8da:	f640 030f 	movw	r3, #2063	; 0x80f
 800f8de:	4013      	ands	r3, r2
 800f8e0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d118      	bne.n	800f91a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	f003 0320 	and.w	r3, r3, #32
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d013      	beq.n	800f91a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	f003 0320 	and.w	r3, r3, #32
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d104      	bne.n	800f906 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f902:	2b00      	cmp	r3, #0
 800f904:	d009      	beq.n	800f91a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	f000 8282 	beq.w	800fe14 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	4798      	blx	r3
      }
      return;
 800f918:	e27c      	b.n	800fe14 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f000 80ef 	beq.w	800fb00 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f922:	697a      	ldr	r2, [r7, #20]
 800f924:	4b73      	ldr	r3, [pc, #460]	; (800faf4 <HAL_UART_IRQHandler+0x23c>)
 800f926:	4013      	ands	r3, r2
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d105      	bne.n	800f938 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f92c:	69ba      	ldr	r2, [r7, #24]
 800f92e:	4b72      	ldr	r3, [pc, #456]	; (800faf8 <HAL_UART_IRQHandler+0x240>)
 800f930:	4013      	ands	r3, r2
 800f932:	2b00      	cmp	r3, #0
 800f934:	f000 80e4 	beq.w	800fb00 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	f003 0301 	and.w	r3, r3, #1
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d010      	beq.n	800f964 <HAL_UART_IRQHandler+0xac>
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d00b      	beq.n	800f964 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	2201      	movs	r2, #1
 800f952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f95a:	f043 0201 	orr.w	r2, r3, #1
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f964:	69fb      	ldr	r3, [r7, #28]
 800f966:	f003 0302 	and.w	r3, r3, #2
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d010      	beq.n	800f990 <HAL_UART_IRQHandler+0xd8>
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	f003 0301 	and.w	r3, r3, #1
 800f974:	2b00      	cmp	r3, #0
 800f976:	d00b      	beq.n	800f990 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2202      	movs	r2, #2
 800f97e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f986:	f043 0204 	orr.w	r2, r3, #4
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	f003 0304 	and.w	r3, r3, #4
 800f996:	2b00      	cmp	r3, #0
 800f998:	d010      	beq.n	800f9bc <HAL_UART_IRQHandler+0x104>
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	f003 0301 	and.w	r3, r3, #1
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00b      	beq.n	800f9bc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2204      	movs	r2, #4
 800f9aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9b2:	f043 0202 	orr.w	r2, r3, #2
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	f003 0308 	and.w	r3, r3, #8
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d015      	beq.n	800f9f2 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	f003 0320 	and.w	r3, r3, #32
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d104      	bne.n	800f9da <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f9d0:	697a      	ldr	r2, [r7, #20]
 800f9d2:	4b48      	ldr	r3, [pc, #288]	; (800faf4 <HAL_UART_IRQHandler+0x23c>)
 800f9d4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d00b      	beq.n	800f9f2 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2208      	movs	r2, #8
 800f9e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9e8:	f043 0208 	orr.w	r2, r3, #8
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d011      	beq.n	800fa20 <HAL_UART_IRQHandler+0x168>
 800f9fc:	69bb      	ldr	r3, [r7, #24]
 800f9fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d00c      	beq.n	800fa20 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa16:	f043 0220 	orr.w	r2, r3, #32
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f000 81f6 	beq.w	800fe18 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	f003 0320 	and.w	r3, r3, #32
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d011      	beq.n	800fa5a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	f003 0320 	and.w	r3, r3, #32
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d104      	bne.n	800fa4a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d007      	beq.n	800fa5a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d003      	beq.n	800fa5a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa60:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa6c:	2b40      	cmp	r3, #64	; 0x40
 800fa6e:	d004      	beq.n	800fa7a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d031      	beq.n	800fade <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f001 f964 	bl	8010d48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	689b      	ldr	r3, [r3, #8]
 800fa86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa8a:	2b40      	cmp	r3, #64	; 0x40
 800fa8c:	d123      	bne.n	800fad6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	689a      	ldr	r2, [r3, #8]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fa9c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d013      	beq.n	800face <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800faaa:	4a14      	ldr	r2, [pc, #80]	; (800fafc <HAL_UART_IRQHandler+0x244>)
 800faac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fab2:	4618      	mov	r0, r3
 800fab4:	f7f6 fdd4 	bl	8006660 <HAL_DMA_Abort_IT>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d017      	beq.n	800faee <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800fac8:	4610      	mov	r0, r2
 800faca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800facc:	e00f      	b.n	800faee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f9ca 	bl	800fe68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fad4:	e00b      	b.n	800faee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f9c6 	bl	800fe68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fadc:	e007      	b.n	800faee <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 f9c2 	bl	800fe68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800faec:	e194      	b.n	800fe18 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faee:	bf00      	nop
    return;
 800faf0:	e192      	b.n	800fe18 <HAL_UART_IRQHandler+0x560>
 800faf2:	bf00      	nop
 800faf4:	10000001 	.word	0x10000001
 800faf8:	04000120 	.word	0x04000120
 800fafc:	08010f67 	.word	0x08010f67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	f040 810f 	bne.w	800fd28 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	f003 0310 	and.w	r3, r3, #16
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	f000 8109 	beq.w	800fd28 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	f003 0310 	and.w	r3, r3, #16
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	f000 8103 	beq.w	800fd28 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	2210      	movs	r2, #16
 800fb28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	689b      	ldr	r3, [r3, #8]
 800fb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb34:	2b40      	cmp	r3, #64	; 0x40
 800fb36:	f040 80bb 	bne.w	800fcb0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a96      	ldr	r2, [pc, #600]	; (800fd9c <HAL_UART_IRQHandler+0x4e4>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d059      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a94      	ldr	r2, [pc, #592]	; (800fda0 <HAL_UART_IRQHandler+0x4e8>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d053      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a92      	ldr	r2, [pc, #584]	; (800fda4 <HAL_UART_IRQHandler+0x4ec>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d04d      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a90      	ldr	r2, [pc, #576]	; (800fda8 <HAL_UART_IRQHandler+0x4f0>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d047      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4a8e      	ldr	r2, [pc, #568]	; (800fdac <HAL_UART_IRQHandler+0x4f4>)
 800fb72:	4293      	cmp	r3, r2
 800fb74:	d041      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4a8c      	ldr	r2, [pc, #560]	; (800fdb0 <HAL_UART_IRQHandler+0x4f8>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d03b      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a8a      	ldr	r2, [pc, #552]	; (800fdb4 <HAL_UART_IRQHandler+0x4fc>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d035      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	4a88      	ldr	r2, [pc, #544]	; (800fdb8 <HAL_UART_IRQHandler+0x500>)
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d02f      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a86      	ldr	r2, [pc, #536]	; (800fdbc <HAL_UART_IRQHandler+0x504>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d029      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a84      	ldr	r2, [pc, #528]	; (800fdc0 <HAL_UART_IRQHandler+0x508>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d023      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4a82      	ldr	r2, [pc, #520]	; (800fdc4 <HAL_UART_IRQHandler+0x50c>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d01d      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a80      	ldr	r2, [pc, #512]	; (800fdc8 <HAL_UART_IRQHandler+0x510>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d017      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a7e      	ldr	r2, [pc, #504]	; (800fdcc <HAL_UART_IRQHandler+0x514>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d011      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a7c      	ldr	r2, [pc, #496]	; (800fdd0 <HAL_UART_IRQHandler+0x518>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d00b      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4a7a      	ldr	r2, [pc, #488]	; (800fdd4 <HAL_UART_IRQHandler+0x51c>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d005      	beq.n	800fbfa <HAL_UART_IRQHandler+0x342>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a78      	ldr	r2, [pc, #480]	; (800fdd8 <HAL_UART_IRQHandler+0x520>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d105      	bne.n	800fc06 <HAL_UART_IRQHandler+0x34e>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	685b      	ldr	r3, [r3, #4]
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	e004      	b.n	800fc10 <HAL_UART_IRQHandler+0x358>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800fc12:	893b      	ldrh	r3, [r7, #8]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	f000 8101 	beq.w	800fe1c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc20:	893a      	ldrh	r2, [r7, #8]
 800fc22:	429a      	cmp	r2, r3
 800fc24:	f080 80fa 	bcs.w	800fe1c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	893a      	ldrh	r2, [r7, #8]
 800fc2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc34:	69db      	ldr	r3, [r3, #28]
 800fc36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc3a:	d02b      	beq.n	800fc94 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	681a      	ldr	r2, [r3, #0]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	689a      	ldr	r2, [r3, #8]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	f022 0201 	bic.w	r2, r2, #1
 800fc5a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	689a      	ldr	r2, [r3, #8]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc6a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2220      	movs	r2, #32
 800fc70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f022 0210 	bic.w	r2, r2, #16
 800fc88:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7f6 f9c8 	bl	8006024 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	b29b      	uxth	r3, r3
 800fca6:	4619      	mov	r1, r3
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 f8e7 	bl	800fe7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fcae:	e0b5      	b.n	800fe1c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	f000 80a8 	beq.w	800fe20 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800fcd0:	897b      	ldrh	r3, [r7, #10]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f000 80a4 	beq.w	800fe20 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fce6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	6899      	ldr	r1, [r3, #8]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	4b3a      	ldr	r3, [pc, #232]	; (800fddc <HAL_UART_IRQHandler+0x524>)
 800fcf4:	400b      	ands	r3, r1
 800fcf6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2220      	movs	r2, #32
 800fcfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2200      	movs	r2, #0
 800fd0a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	f022 0210 	bic.w	r2, r2, #16
 800fd1a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fd1c:	897b      	ldrh	r3, [r7, #10]
 800fd1e:	4619      	mov	r1, r3
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 f8ab 	bl	800fe7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd26:	e07b      	b.n	800fe20 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fd28:	69fb      	ldr	r3, [r7, #28]
 800fd2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d00d      	beq.n	800fd4e <HAL_UART_IRQHandler+0x496>
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d008      	beq.n	800fd4e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fd44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f001 f93d 	bl	8010fc6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd4c:	e06b      	b.n	800fe26 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fd4e:	69fb      	ldr	r3, [r7, #28]
 800fd50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d012      	beq.n	800fd7e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fd58:	69bb      	ldr	r3, [r7, #24]
 800fd5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d104      	bne.n	800fd6c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d008      	beq.n	800fd7e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d057      	beq.n	800fe24 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	4798      	blx	r3
    }
    return;
 800fd7c:	e052      	b.n	800fe24 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d02b      	beq.n	800fde0 <HAL_UART_IRQHandler+0x528>
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d026      	beq.n	800fde0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f001 f8fd 	bl	8010f92 <UART_EndTransmit_IT>
    return;
 800fd98:	e045      	b.n	800fe26 <HAL_UART_IRQHandler+0x56e>
 800fd9a:	bf00      	nop
 800fd9c:	40020010 	.word	0x40020010
 800fda0:	40020028 	.word	0x40020028
 800fda4:	40020040 	.word	0x40020040
 800fda8:	40020058 	.word	0x40020058
 800fdac:	40020070 	.word	0x40020070
 800fdb0:	40020088 	.word	0x40020088
 800fdb4:	400200a0 	.word	0x400200a0
 800fdb8:	400200b8 	.word	0x400200b8
 800fdbc:	40020410 	.word	0x40020410
 800fdc0:	40020428 	.word	0x40020428
 800fdc4:	40020440 	.word	0x40020440
 800fdc8:	40020458 	.word	0x40020458
 800fdcc:	40020470 	.word	0x40020470
 800fdd0:	40020488 	.word	0x40020488
 800fdd4:	400204a0 	.word	0x400204a0
 800fdd8:	400204b8 	.word	0x400204b8
 800fddc:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fde0:	69fb      	ldr	r3, [r7, #28]
 800fde2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d008      	beq.n	800fdfc <HAL_UART_IRQHandler+0x544>
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d003      	beq.n	800fdfc <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f001 f8fa 	bl	8010fee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fdfa:	e014      	b.n	800fe26 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00f      	beq.n	800fe26 <HAL_UART_IRQHandler+0x56e>
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	da0c      	bge.n	800fe26 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f001 f8e4 	bl	8010fda <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe12:	e008      	b.n	800fe26 <HAL_UART_IRQHandler+0x56e>
      return;
 800fe14:	bf00      	nop
 800fe16:	e006      	b.n	800fe26 <HAL_UART_IRQHandler+0x56e>
    return;
 800fe18:	bf00      	nop
 800fe1a:	e004      	b.n	800fe26 <HAL_UART_IRQHandler+0x56e>
      return;
 800fe1c:	bf00      	nop
 800fe1e:	e002      	b.n	800fe26 <HAL_UART_IRQHandler+0x56e>
      return;
 800fe20:	bf00      	nop
 800fe22:	e000      	b.n	800fe26 <HAL_UART_IRQHandler+0x56e>
    return;
 800fe24:	bf00      	nop
  }
}
 800fe26:	3720      	adds	r7, #32
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fe34:	bf00      	nop
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fe48:	bf00      	nop
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fe5c:	bf00      	nop
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fe70:	bf00      	nop
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	460b      	mov	r3, r1
 800fe86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fe88:	bf00      	nop
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe94:	b5b0      	push	{r4, r5, r7, lr}
 800fe96:	b08e      	sub	sp, #56	; 0x38
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	689a      	ldr	r2, [r3, #8]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	691b      	ldr	r3, [r3, #16]
 800feaa:	431a      	orrs	r2, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	695b      	ldr	r3, [r3, #20]
 800feb0:	431a      	orrs	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	69db      	ldr	r3, [r3, #28]
 800feb6:	4313      	orrs	r3, r2
 800feb8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	4bbf      	ldr	r3, [pc, #764]	; (80101c0 <UART_SetConfig+0x32c>)
 800fec2:	4013      	ands	r3, r2
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	6812      	ldr	r2, [r2, #0]
 800fec8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800feca:	430b      	orrs	r3, r1
 800fecc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	68da      	ldr	r2, [r3, #12]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	430a      	orrs	r2, r1
 800fee2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	699b      	ldr	r3, [r3, #24]
 800fee8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4ab5      	ldr	r2, [pc, #724]	; (80101c4 <UART_SetConfig+0x330>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d004      	beq.n	800fefe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a1b      	ldr	r3, [r3, #32]
 800fef8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fefa:	4313      	orrs	r3, r2
 800fefc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	689a      	ldr	r2, [r3, #8]
 800ff04:	4bb0      	ldr	r3, [pc, #704]	; (80101c8 <UART_SetConfig+0x334>)
 800ff06:	4013      	ands	r3, r2
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	6812      	ldr	r2, [r2, #0]
 800ff0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff0e:	430b      	orrs	r3, r1
 800ff10:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff18:	f023 010f 	bic.w	r1, r3, #15
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	430a      	orrs	r2, r1
 800ff26:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	4aa7      	ldr	r2, [pc, #668]	; (80101cc <UART_SetConfig+0x338>)
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d176      	bne.n	8010020 <UART_SetConfig+0x18c>
 800ff32:	4ba7      	ldr	r3, [pc, #668]	; (80101d0 <UART_SetConfig+0x33c>)
 800ff34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff3a:	2b28      	cmp	r3, #40	; 0x28
 800ff3c:	d86c      	bhi.n	8010018 <UART_SetConfig+0x184>
 800ff3e:	a201      	add	r2, pc, #4	; (adr r2, 800ff44 <UART_SetConfig+0xb0>)
 800ff40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff44:	0800ffe9 	.word	0x0800ffe9
 800ff48:	08010019 	.word	0x08010019
 800ff4c:	08010019 	.word	0x08010019
 800ff50:	08010019 	.word	0x08010019
 800ff54:	08010019 	.word	0x08010019
 800ff58:	08010019 	.word	0x08010019
 800ff5c:	08010019 	.word	0x08010019
 800ff60:	08010019 	.word	0x08010019
 800ff64:	0800fff1 	.word	0x0800fff1
 800ff68:	08010019 	.word	0x08010019
 800ff6c:	08010019 	.word	0x08010019
 800ff70:	08010019 	.word	0x08010019
 800ff74:	08010019 	.word	0x08010019
 800ff78:	08010019 	.word	0x08010019
 800ff7c:	08010019 	.word	0x08010019
 800ff80:	08010019 	.word	0x08010019
 800ff84:	0800fff9 	.word	0x0800fff9
 800ff88:	08010019 	.word	0x08010019
 800ff8c:	08010019 	.word	0x08010019
 800ff90:	08010019 	.word	0x08010019
 800ff94:	08010019 	.word	0x08010019
 800ff98:	08010019 	.word	0x08010019
 800ff9c:	08010019 	.word	0x08010019
 800ffa0:	08010019 	.word	0x08010019
 800ffa4:	08010001 	.word	0x08010001
 800ffa8:	08010019 	.word	0x08010019
 800ffac:	08010019 	.word	0x08010019
 800ffb0:	08010019 	.word	0x08010019
 800ffb4:	08010019 	.word	0x08010019
 800ffb8:	08010019 	.word	0x08010019
 800ffbc:	08010019 	.word	0x08010019
 800ffc0:	08010019 	.word	0x08010019
 800ffc4:	08010009 	.word	0x08010009
 800ffc8:	08010019 	.word	0x08010019
 800ffcc:	08010019 	.word	0x08010019
 800ffd0:	08010019 	.word	0x08010019
 800ffd4:	08010019 	.word	0x08010019
 800ffd8:	08010019 	.word	0x08010019
 800ffdc:	08010019 	.word	0x08010019
 800ffe0:	08010019 	.word	0x08010019
 800ffe4:	08010011 	.word	0x08010011
 800ffe8:	2301      	movs	r3, #1
 800ffea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffee:	e222      	b.n	8010436 <UART_SetConfig+0x5a2>
 800fff0:	2304      	movs	r3, #4
 800fff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fff6:	e21e      	b.n	8010436 <UART_SetConfig+0x5a2>
 800fff8:	2308      	movs	r3, #8
 800fffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fffe:	e21a      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010000:	2310      	movs	r3, #16
 8010002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010006:	e216      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010008:	2320      	movs	r3, #32
 801000a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801000e:	e212      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010010:	2340      	movs	r3, #64	; 0x40
 8010012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010016:	e20e      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010018:	2380      	movs	r3, #128	; 0x80
 801001a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801001e:	e20a      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a6b      	ldr	r2, [pc, #428]	; (80101d4 <UART_SetConfig+0x340>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d130      	bne.n	801008c <UART_SetConfig+0x1f8>
 801002a:	4b69      	ldr	r3, [pc, #420]	; (80101d0 <UART_SetConfig+0x33c>)
 801002c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801002e:	f003 0307 	and.w	r3, r3, #7
 8010032:	2b05      	cmp	r3, #5
 8010034:	d826      	bhi.n	8010084 <UART_SetConfig+0x1f0>
 8010036:	a201      	add	r2, pc, #4	; (adr r2, 801003c <UART_SetConfig+0x1a8>)
 8010038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801003c:	08010055 	.word	0x08010055
 8010040:	0801005d 	.word	0x0801005d
 8010044:	08010065 	.word	0x08010065
 8010048:	0801006d 	.word	0x0801006d
 801004c:	08010075 	.word	0x08010075
 8010050:	0801007d 	.word	0x0801007d
 8010054:	2300      	movs	r3, #0
 8010056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801005a:	e1ec      	b.n	8010436 <UART_SetConfig+0x5a2>
 801005c:	2304      	movs	r3, #4
 801005e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010062:	e1e8      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010064:	2308      	movs	r3, #8
 8010066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801006a:	e1e4      	b.n	8010436 <UART_SetConfig+0x5a2>
 801006c:	2310      	movs	r3, #16
 801006e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010072:	e1e0      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010074:	2320      	movs	r3, #32
 8010076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801007a:	e1dc      	b.n	8010436 <UART_SetConfig+0x5a2>
 801007c:	2340      	movs	r3, #64	; 0x40
 801007e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010082:	e1d8      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010084:	2380      	movs	r3, #128	; 0x80
 8010086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801008a:	e1d4      	b.n	8010436 <UART_SetConfig+0x5a2>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a51      	ldr	r2, [pc, #324]	; (80101d8 <UART_SetConfig+0x344>)
 8010092:	4293      	cmp	r3, r2
 8010094:	d130      	bne.n	80100f8 <UART_SetConfig+0x264>
 8010096:	4b4e      	ldr	r3, [pc, #312]	; (80101d0 <UART_SetConfig+0x33c>)
 8010098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801009a:	f003 0307 	and.w	r3, r3, #7
 801009e:	2b05      	cmp	r3, #5
 80100a0:	d826      	bhi.n	80100f0 <UART_SetConfig+0x25c>
 80100a2:	a201      	add	r2, pc, #4	; (adr r2, 80100a8 <UART_SetConfig+0x214>)
 80100a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100a8:	080100c1 	.word	0x080100c1
 80100ac:	080100c9 	.word	0x080100c9
 80100b0:	080100d1 	.word	0x080100d1
 80100b4:	080100d9 	.word	0x080100d9
 80100b8:	080100e1 	.word	0x080100e1
 80100bc:	080100e9 	.word	0x080100e9
 80100c0:	2300      	movs	r3, #0
 80100c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100c6:	e1b6      	b.n	8010436 <UART_SetConfig+0x5a2>
 80100c8:	2304      	movs	r3, #4
 80100ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ce:	e1b2      	b.n	8010436 <UART_SetConfig+0x5a2>
 80100d0:	2308      	movs	r3, #8
 80100d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d6:	e1ae      	b.n	8010436 <UART_SetConfig+0x5a2>
 80100d8:	2310      	movs	r3, #16
 80100da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100de:	e1aa      	b.n	8010436 <UART_SetConfig+0x5a2>
 80100e0:	2320      	movs	r3, #32
 80100e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100e6:	e1a6      	b.n	8010436 <UART_SetConfig+0x5a2>
 80100e8:	2340      	movs	r3, #64	; 0x40
 80100ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ee:	e1a2      	b.n	8010436 <UART_SetConfig+0x5a2>
 80100f0:	2380      	movs	r3, #128	; 0x80
 80100f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100f6:	e19e      	b.n	8010436 <UART_SetConfig+0x5a2>
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	4a37      	ldr	r2, [pc, #220]	; (80101dc <UART_SetConfig+0x348>)
 80100fe:	4293      	cmp	r3, r2
 8010100:	d130      	bne.n	8010164 <UART_SetConfig+0x2d0>
 8010102:	4b33      	ldr	r3, [pc, #204]	; (80101d0 <UART_SetConfig+0x33c>)
 8010104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010106:	f003 0307 	and.w	r3, r3, #7
 801010a:	2b05      	cmp	r3, #5
 801010c:	d826      	bhi.n	801015c <UART_SetConfig+0x2c8>
 801010e:	a201      	add	r2, pc, #4	; (adr r2, 8010114 <UART_SetConfig+0x280>)
 8010110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010114:	0801012d 	.word	0x0801012d
 8010118:	08010135 	.word	0x08010135
 801011c:	0801013d 	.word	0x0801013d
 8010120:	08010145 	.word	0x08010145
 8010124:	0801014d 	.word	0x0801014d
 8010128:	08010155 	.word	0x08010155
 801012c:	2300      	movs	r3, #0
 801012e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010132:	e180      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010134:	2304      	movs	r3, #4
 8010136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801013a:	e17c      	b.n	8010436 <UART_SetConfig+0x5a2>
 801013c:	2308      	movs	r3, #8
 801013e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010142:	e178      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010144:	2310      	movs	r3, #16
 8010146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801014a:	e174      	b.n	8010436 <UART_SetConfig+0x5a2>
 801014c:	2320      	movs	r3, #32
 801014e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010152:	e170      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010154:	2340      	movs	r3, #64	; 0x40
 8010156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801015a:	e16c      	b.n	8010436 <UART_SetConfig+0x5a2>
 801015c:	2380      	movs	r3, #128	; 0x80
 801015e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010162:	e168      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4a1d      	ldr	r2, [pc, #116]	; (80101e0 <UART_SetConfig+0x34c>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d142      	bne.n	80101f4 <UART_SetConfig+0x360>
 801016e:	4b18      	ldr	r3, [pc, #96]	; (80101d0 <UART_SetConfig+0x33c>)
 8010170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010172:	f003 0307 	and.w	r3, r3, #7
 8010176:	2b05      	cmp	r3, #5
 8010178:	d838      	bhi.n	80101ec <UART_SetConfig+0x358>
 801017a:	a201      	add	r2, pc, #4	; (adr r2, 8010180 <UART_SetConfig+0x2ec>)
 801017c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010180:	08010199 	.word	0x08010199
 8010184:	080101a1 	.word	0x080101a1
 8010188:	080101a9 	.word	0x080101a9
 801018c:	080101b1 	.word	0x080101b1
 8010190:	080101b9 	.word	0x080101b9
 8010194:	080101e5 	.word	0x080101e5
 8010198:	2300      	movs	r3, #0
 801019a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801019e:	e14a      	b.n	8010436 <UART_SetConfig+0x5a2>
 80101a0:	2304      	movs	r3, #4
 80101a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101a6:	e146      	b.n	8010436 <UART_SetConfig+0x5a2>
 80101a8:	2308      	movs	r3, #8
 80101aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ae:	e142      	b.n	8010436 <UART_SetConfig+0x5a2>
 80101b0:	2310      	movs	r3, #16
 80101b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101b6:	e13e      	b.n	8010436 <UART_SetConfig+0x5a2>
 80101b8:	2320      	movs	r3, #32
 80101ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101be:	e13a      	b.n	8010436 <UART_SetConfig+0x5a2>
 80101c0:	cfff69f3 	.word	0xcfff69f3
 80101c4:	58000c00 	.word	0x58000c00
 80101c8:	11fff4ff 	.word	0x11fff4ff
 80101cc:	40011000 	.word	0x40011000
 80101d0:	58024400 	.word	0x58024400
 80101d4:	40004400 	.word	0x40004400
 80101d8:	40004800 	.word	0x40004800
 80101dc:	40004c00 	.word	0x40004c00
 80101e0:	40005000 	.word	0x40005000
 80101e4:	2340      	movs	r3, #64	; 0x40
 80101e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ea:	e124      	b.n	8010436 <UART_SetConfig+0x5a2>
 80101ec:	2380      	movs	r3, #128	; 0x80
 80101ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101f2:	e120      	b.n	8010436 <UART_SetConfig+0x5a2>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4acc      	ldr	r2, [pc, #816]	; (801052c <UART_SetConfig+0x698>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d176      	bne.n	80102ec <UART_SetConfig+0x458>
 80101fe:	4bcc      	ldr	r3, [pc, #816]	; (8010530 <UART_SetConfig+0x69c>)
 8010200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010206:	2b28      	cmp	r3, #40	; 0x28
 8010208:	d86c      	bhi.n	80102e4 <UART_SetConfig+0x450>
 801020a:	a201      	add	r2, pc, #4	; (adr r2, 8010210 <UART_SetConfig+0x37c>)
 801020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010210:	080102b5 	.word	0x080102b5
 8010214:	080102e5 	.word	0x080102e5
 8010218:	080102e5 	.word	0x080102e5
 801021c:	080102e5 	.word	0x080102e5
 8010220:	080102e5 	.word	0x080102e5
 8010224:	080102e5 	.word	0x080102e5
 8010228:	080102e5 	.word	0x080102e5
 801022c:	080102e5 	.word	0x080102e5
 8010230:	080102bd 	.word	0x080102bd
 8010234:	080102e5 	.word	0x080102e5
 8010238:	080102e5 	.word	0x080102e5
 801023c:	080102e5 	.word	0x080102e5
 8010240:	080102e5 	.word	0x080102e5
 8010244:	080102e5 	.word	0x080102e5
 8010248:	080102e5 	.word	0x080102e5
 801024c:	080102e5 	.word	0x080102e5
 8010250:	080102c5 	.word	0x080102c5
 8010254:	080102e5 	.word	0x080102e5
 8010258:	080102e5 	.word	0x080102e5
 801025c:	080102e5 	.word	0x080102e5
 8010260:	080102e5 	.word	0x080102e5
 8010264:	080102e5 	.word	0x080102e5
 8010268:	080102e5 	.word	0x080102e5
 801026c:	080102e5 	.word	0x080102e5
 8010270:	080102cd 	.word	0x080102cd
 8010274:	080102e5 	.word	0x080102e5
 8010278:	080102e5 	.word	0x080102e5
 801027c:	080102e5 	.word	0x080102e5
 8010280:	080102e5 	.word	0x080102e5
 8010284:	080102e5 	.word	0x080102e5
 8010288:	080102e5 	.word	0x080102e5
 801028c:	080102e5 	.word	0x080102e5
 8010290:	080102d5 	.word	0x080102d5
 8010294:	080102e5 	.word	0x080102e5
 8010298:	080102e5 	.word	0x080102e5
 801029c:	080102e5 	.word	0x080102e5
 80102a0:	080102e5 	.word	0x080102e5
 80102a4:	080102e5 	.word	0x080102e5
 80102a8:	080102e5 	.word	0x080102e5
 80102ac:	080102e5 	.word	0x080102e5
 80102b0:	080102dd 	.word	0x080102dd
 80102b4:	2301      	movs	r3, #1
 80102b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ba:	e0bc      	b.n	8010436 <UART_SetConfig+0x5a2>
 80102bc:	2304      	movs	r3, #4
 80102be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102c2:	e0b8      	b.n	8010436 <UART_SetConfig+0x5a2>
 80102c4:	2308      	movs	r3, #8
 80102c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ca:	e0b4      	b.n	8010436 <UART_SetConfig+0x5a2>
 80102cc:	2310      	movs	r3, #16
 80102ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102d2:	e0b0      	b.n	8010436 <UART_SetConfig+0x5a2>
 80102d4:	2320      	movs	r3, #32
 80102d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102da:	e0ac      	b.n	8010436 <UART_SetConfig+0x5a2>
 80102dc:	2340      	movs	r3, #64	; 0x40
 80102de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102e2:	e0a8      	b.n	8010436 <UART_SetConfig+0x5a2>
 80102e4:	2380      	movs	r3, #128	; 0x80
 80102e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ea:	e0a4      	b.n	8010436 <UART_SetConfig+0x5a2>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	4a90      	ldr	r2, [pc, #576]	; (8010534 <UART_SetConfig+0x6a0>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d130      	bne.n	8010358 <UART_SetConfig+0x4c4>
 80102f6:	4b8e      	ldr	r3, [pc, #568]	; (8010530 <UART_SetConfig+0x69c>)
 80102f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102fa:	f003 0307 	and.w	r3, r3, #7
 80102fe:	2b05      	cmp	r3, #5
 8010300:	d826      	bhi.n	8010350 <UART_SetConfig+0x4bc>
 8010302:	a201      	add	r2, pc, #4	; (adr r2, 8010308 <UART_SetConfig+0x474>)
 8010304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010308:	08010321 	.word	0x08010321
 801030c:	08010329 	.word	0x08010329
 8010310:	08010331 	.word	0x08010331
 8010314:	08010339 	.word	0x08010339
 8010318:	08010341 	.word	0x08010341
 801031c:	08010349 	.word	0x08010349
 8010320:	2300      	movs	r3, #0
 8010322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010326:	e086      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010328:	2304      	movs	r3, #4
 801032a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801032e:	e082      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010330:	2308      	movs	r3, #8
 8010332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010336:	e07e      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010338:	2310      	movs	r3, #16
 801033a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801033e:	e07a      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010340:	2320      	movs	r3, #32
 8010342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010346:	e076      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010348:	2340      	movs	r3, #64	; 0x40
 801034a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801034e:	e072      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010350:	2380      	movs	r3, #128	; 0x80
 8010352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010356:	e06e      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a76      	ldr	r2, [pc, #472]	; (8010538 <UART_SetConfig+0x6a4>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d130      	bne.n	80103c4 <UART_SetConfig+0x530>
 8010362:	4b73      	ldr	r3, [pc, #460]	; (8010530 <UART_SetConfig+0x69c>)
 8010364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010366:	f003 0307 	and.w	r3, r3, #7
 801036a:	2b05      	cmp	r3, #5
 801036c:	d826      	bhi.n	80103bc <UART_SetConfig+0x528>
 801036e:	a201      	add	r2, pc, #4	; (adr r2, 8010374 <UART_SetConfig+0x4e0>)
 8010370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010374:	0801038d 	.word	0x0801038d
 8010378:	08010395 	.word	0x08010395
 801037c:	0801039d 	.word	0x0801039d
 8010380:	080103a5 	.word	0x080103a5
 8010384:	080103ad 	.word	0x080103ad
 8010388:	080103b5 	.word	0x080103b5
 801038c:	2300      	movs	r3, #0
 801038e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010392:	e050      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010394:	2304      	movs	r3, #4
 8010396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801039a:	e04c      	b.n	8010436 <UART_SetConfig+0x5a2>
 801039c:	2308      	movs	r3, #8
 801039e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103a2:	e048      	b.n	8010436 <UART_SetConfig+0x5a2>
 80103a4:	2310      	movs	r3, #16
 80103a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103aa:	e044      	b.n	8010436 <UART_SetConfig+0x5a2>
 80103ac:	2320      	movs	r3, #32
 80103ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103b2:	e040      	b.n	8010436 <UART_SetConfig+0x5a2>
 80103b4:	2340      	movs	r3, #64	; 0x40
 80103b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ba:	e03c      	b.n	8010436 <UART_SetConfig+0x5a2>
 80103bc:	2380      	movs	r3, #128	; 0x80
 80103be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103c2:	e038      	b.n	8010436 <UART_SetConfig+0x5a2>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	4a5c      	ldr	r2, [pc, #368]	; (801053c <UART_SetConfig+0x6a8>)
 80103ca:	4293      	cmp	r3, r2
 80103cc:	d130      	bne.n	8010430 <UART_SetConfig+0x59c>
 80103ce:	4b58      	ldr	r3, [pc, #352]	; (8010530 <UART_SetConfig+0x69c>)
 80103d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103d2:	f003 0307 	and.w	r3, r3, #7
 80103d6:	2b05      	cmp	r3, #5
 80103d8:	d826      	bhi.n	8010428 <UART_SetConfig+0x594>
 80103da:	a201      	add	r2, pc, #4	; (adr r2, 80103e0 <UART_SetConfig+0x54c>)
 80103dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e0:	080103f9 	.word	0x080103f9
 80103e4:	08010401 	.word	0x08010401
 80103e8:	08010409 	.word	0x08010409
 80103ec:	08010411 	.word	0x08010411
 80103f0:	08010419 	.word	0x08010419
 80103f4:	08010421 	.word	0x08010421
 80103f8:	2302      	movs	r3, #2
 80103fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103fe:	e01a      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010400:	2304      	movs	r3, #4
 8010402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010406:	e016      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010408:	2308      	movs	r3, #8
 801040a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801040e:	e012      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010410:	2310      	movs	r3, #16
 8010412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010416:	e00e      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010418:	2320      	movs	r3, #32
 801041a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801041e:	e00a      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010420:	2340      	movs	r3, #64	; 0x40
 8010422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010426:	e006      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010428:	2380      	movs	r3, #128	; 0x80
 801042a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801042e:	e002      	b.n	8010436 <UART_SetConfig+0x5a2>
 8010430:	2380      	movs	r3, #128	; 0x80
 8010432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4a40      	ldr	r2, [pc, #256]	; (801053c <UART_SetConfig+0x6a8>)
 801043c:	4293      	cmp	r3, r2
 801043e:	f040 80ef 	bne.w	8010620 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010442:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010446:	2b20      	cmp	r3, #32
 8010448:	dc46      	bgt.n	80104d8 <UART_SetConfig+0x644>
 801044a:	2b02      	cmp	r3, #2
 801044c:	f2c0 8081 	blt.w	8010552 <UART_SetConfig+0x6be>
 8010450:	3b02      	subs	r3, #2
 8010452:	2b1e      	cmp	r3, #30
 8010454:	d87d      	bhi.n	8010552 <UART_SetConfig+0x6be>
 8010456:	a201      	add	r2, pc, #4	; (adr r2, 801045c <UART_SetConfig+0x5c8>)
 8010458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801045c:	080104df 	.word	0x080104df
 8010460:	08010553 	.word	0x08010553
 8010464:	080104e7 	.word	0x080104e7
 8010468:	08010553 	.word	0x08010553
 801046c:	08010553 	.word	0x08010553
 8010470:	08010553 	.word	0x08010553
 8010474:	080104f7 	.word	0x080104f7
 8010478:	08010553 	.word	0x08010553
 801047c:	08010553 	.word	0x08010553
 8010480:	08010553 	.word	0x08010553
 8010484:	08010553 	.word	0x08010553
 8010488:	08010553 	.word	0x08010553
 801048c:	08010553 	.word	0x08010553
 8010490:	08010553 	.word	0x08010553
 8010494:	08010507 	.word	0x08010507
 8010498:	08010553 	.word	0x08010553
 801049c:	08010553 	.word	0x08010553
 80104a0:	08010553 	.word	0x08010553
 80104a4:	08010553 	.word	0x08010553
 80104a8:	08010553 	.word	0x08010553
 80104ac:	08010553 	.word	0x08010553
 80104b0:	08010553 	.word	0x08010553
 80104b4:	08010553 	.word	0x08010553
 80104b8:	08010553 	.word	0x08010553
 80104bc:	08010553 	.word	0x08010553
 80104c0:	08010553 	.word	0x08010553
 80104c4:	08010553 	.word	0x08010553
 80104c8:	08010553 	.word	0x08010553
 80104cc:	08010553 	.word	0x08010553
 80104d0:	08010553 	.word	0x08010553
 80104d4:	08010545 	.word	0x08010545
 80104d8:	2b40      	cmp	r3, #64	; 0x40
 80104da:	d036      	beq.n	801054a <UART_SetConfig+0x6b6>
 80104dc:	e039      	b.n	8010552 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80104de:	f7fc f963 	bl	800c7a8 <HAL_RCCEx_GetD3PCLK1Freq>
 80104e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80104e4:	e03b      	b.n	801055e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104e6:	f107 0314 	add.w	r3, r7, #20
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fc f972 	bl	800c7d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80104f4:	e033      	b.n	801055e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104f6:	f107 0308 	add.w	r3, r7, #8
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fc fabe 	bl	800ca7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010504:	e02b      	b.n	801055e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010506:	4b0a      	ldr	r3, [pc, #40]	; (8010530 <UART_SetConfig+0x69c>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f003 0320 	and.w	r3, r3, #32
 801050e:	2b00      	cmp	r3, #0
 8010510:	d009      	beq.n	8010526 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010512:	4b07      	ldr	r3, [pc, #28]	; (8010530 <UART_SetConfig+0x69c>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	08db      	lsrs	r3, r3, #3
 8010518:	f003 0303 	and.w	r3, r3, #3
 801051c:	4a08      	ldr	r2, [pc, #32]	; (8010540 <UART_SetConfig+0x6ac>)
 801051e:	fa22 f303 	lsr.w	r3, r2, r3
 8010522:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010524:	e01b      	b.n	801055e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8010526:	4b06      	ldr	r3, [pc, #24]	; (8010540 <UART_SetConfig+0x6ac>)
 8010528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801052a:	e018      	b.n	801055e <UART_SetConfig+0x6ca>
 801052c:	40011400 	.word	0x40011400
 8010530:	58024400 	.word	0x58024400
 8010534:	40007800 	.word	0x40007800
 8010538:	40007c00 	.word	0x40007c00
 801053c:	58000c00 	.word	0x58000c00
 8010540:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010544:	4bc4      	ldr	r3, [pc, #784]	; (8010858 <UART_SetConfig+0x9c4>)
 8010546:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010548:	e009      	b.n	801055e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801054a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801054e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010550:	e005      	b.n	801055e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8010552:	2300      	movs	r3, #0
 8010554:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010556:	2301      	movs	r3, #1
 8010558:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801055c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010560:	2b00      	cmp	r3, #0
 8010562:	f000 81da 	beq.w	801091a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801056a:	4abc      	ldr	r2, [pc, #752]	; (801085c <UART_SetConfig+0x9c8>)
 801056c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010570:	461a      	mov	r2, r3
 8010572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010574:	fbb3 f3f2 	udiv	r3, r3, r2
 8010578:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	685a      	ldr	r2, [r3, #4]
 801057e:	4613      	mov	r3, r2
 8010580:	005b      	lsls	r3, r3, #1
 8010582:	4413      	add	r3, r2
 8010584:	6a3a      	ldr	r2, [r7, #32]
 8010586:	429a      	cmp	r2, r3
 8010588:	d305      	bcc.n	8010596 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010590:	6a3a      	ldr	r2, [r7, #32]
 8010592:	429a      	cmp	r2, r3
 8010594:	d903      	bls.n	801059e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8010596:	2301      	movs	r3, #1
 8010598:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801059c:	e1bd      	b.n	801091a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a0:	4618      	mov	r0, r3
 80105a2:	f04f 0100 	mov.w	r1, #0
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105aa:	4aac      	ldr	r2, [pc, #688]	; (801085c <UART_SetConfig+0x9c8>)
 80105ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	f04f 0300 	mov.w	r3, #0
 80105b6:	f7ef feeb 	bl	8000390 <__aeabi_uldivmod>
 80105ba:	4602      	mov	r2, r0
 80105bc:	460b      	mov	r3, r1
 80105be:	4610      	mov	r0, r2
 80105c0:	4619      	mov	r1, r3
 80105c2:	f04f 0200 	mov.w	r2, #0
 80105c6:	f04f 0300 	mov.w	r3, #0
 80105ca:	020b      	lsls	r3, r1, #8
 80105cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80105d0:	0202      	lsls	r2, r0, #8
 80105d2:	6879      	ldr	r1, [r7, #4]
 80105d4:	6849      	ldr	r1, [r1, #4]
 80105d6:	0849      	lsrs	r1, r1, #1
 80105d8:	4608      	mov	r0, r1
 80105da:	f04f 0100 	mov.w	r1, #0
 80105de:	1814      	adds	r4, r2, r0
 80105e0:	eb43 0501 	adc.w	r5, r3, r1
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	461a      	mov	r2, r3
 80105ea:	f04f 0300 	mov.w	r3, #0
 80105ee:	4620      	mov	r0, r4
 80105f0:	4629      	mov	r1, r5
 80105f2:	f7ef fecd 	bl	8000390 <__aeabi_uldivmod>
 80105f6:	4602      	mov	r2, r0
 80105f8:	460b      	mov	r3, r1
 80105fa:	4613      	mov	r3, r2
 80105fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80105fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010604:	d308      	bcc.n	8010618 <UART_SetConfig+0x784>
 8010606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010608:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801060c:	d204      	bcs.n	8010618 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010614:	60da      	str	r2, [r3, #12]
 8010616:	e180      	b.n	801091a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8010618:	2301      	movs	r3, #1
 801061a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801061e:	e17c      	b.n	801091a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	69db      	ldr	r3, [r3, #28]
 8010624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010628:	f040 80bf 	bne.w	80107aa <UART_SetConfig+0x916>
  {
    switch (clocksource)
 801062c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010630:	2b20      	cmp	r3, #32
 8010632:	dc49      	bgt.n	80106c8 <UART_SetConfig+0x834>
 8010634:	2b00      	cmp	r3, #0
 8010636:	db7c      	blt.n	8010732 <UART_SetConfig+0x89e>
 8010638:	2b20      	cmp	r3, #32
 801063a:	d87a      	bhi.n	8010732 <UART_SetConfig+0x89e>
 801063c:	a201      	add	r2, pc, #4	; (adr r2, 8010644 <UART_SetConfig+0x7b0>)
 801063e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010642:	bf00      	nop
 8010644:	080106cf 	.word	0x080106cf
 8010648:	080106d7 	.word	0x080106d7
 801064c:	08010733 	.word	0x08010733
 8010650:	08010733 	.word	0x08010733
 8010654:	080106df 	.word	0x080106df
 8010658:	08010733 	.word	0x08010733
 801065c:	08010733 	.word	0x08010733
 8010660:	08010733 	.word	0x08010733
 8010664:	080106ef 	.word	0x080106ef
 8010668:	08010733 	.word	0x08010733
 801066c:	08010733 	.word	0x08010733
 8010670:	08010733 	.word	0x08010733
 8010674:	08010733 	.word	0x08010733
 8010678:	08010733 	.word	0x08010733
 801067c:	08010733 	.word	0x08010733
 8010680:	08010733 	.word	0x08010733
 8010684:	080106ff 	.word	0x080106ff
 8010688:	08010733 	.word	0x08010733
 801068c:	08010733 	.word	0x08010733
 8010690:	08010733 	.word	0x08010733
 8010694:	08010733 	.word	0x08010733
 8010698:	08010733 	.word	0x08010733
 801069c:	08010733 	.word	0x08010733
 80106a0:	08010733 	.word	0x08010733
 80106a4:	08010733 	.word	0x08010733
 80106a8:	08010733 	.word	0x08010733
 80106ac:	08010733 	.word	0x08010733
 80106b0:	08010733 	.word	0x08010733
 80106b4:	08010733 	.word	0x08010733
 80106b8:	08010733 	.word	0x08010733
 80106bc:	08010733 	.word	0x08010733
 80106c0:	08010733 	.word	0x08010733
 80106c4:	08010725 	.word	0x08010725
 80106c8:	2b40      	cmp	r3, #64	; 0x40
 80106ca:	d02e      	beq.n	801072a <UART_SetConfig+0x896>
 80106cc:	e031      	b.n	8010732 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80106ce:	f7fb f8ff 	bl	800b8d0 <HAL_RCC_GetPCLK1Freq>
 80106d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80106d4:	e033      	b.n	801073e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106d6:	f7fb f911 	bl	800b8fc <HAL_RCC_GetPCLK2Freq>
 80106da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80106dc:	e02f      	b.n	801073e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106de:	f107 0314 	add.w	r3, r7, #20
 80106e2:	4618      	mov	r0, r3
 80106e4:	f7fc f876 	bl	800c7d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80106e8:	69bb      	ldr	r3, [r7, #24]
 80106ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106ec:	e027      	b.n	801073e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106ee:	f107 0308 	add.w	r3, r7, #8
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7fc f9c2 	bl	800ca7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106fc:	e01f      	b.n	801073e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80106fe:	4b58      	ldr	r3, [pc, #352]	; (8010860 <UART_SetConfig+0x9cc>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f003 0320 	and.w	r3, r3, #32
 8010706:	2b00      	cmp	r3, #0
 8010708:	d009      	beq.n	801071e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801070a:	4b55      	ldr	r3, [pc, #340]	; (8010860 <UART_SetConfig+0x9cc>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	08db      	lsrs	r3, r3, #3
 8010710:	f003 0303 	and.w	r3, r3, #3
 8010714:	4a53      	ldr	r2, [pc, #332]	; (8010864 <UART_SetConfig+0x9d0>)
 8010716:	fa22 f303 	lsr.w	r3, r2, r3
 801071a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801071c:	e00f      	b.n	801073e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 801071e:	4b51      	ldr	r3, [pc, #324]	; (8010864 <UART_SetConfig+0x9d0>)
 8010720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010722:	e00c      	b.n	801073e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010724:	4b4c      	ldr	r3, [pc, #304]	; (8010858 <UART_SetConfig+0x9c4>)
 8010726:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010728:	e009      	b.n	801073e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801072a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801072e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010730:	e005      	b.n	801073e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8010732:	2300      	movs	r3, #0
 8010734:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010736:	2301      	movs	r3, #1
 8010738:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801073c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801073e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010740:	2b00      	cmp	r3, #0
 8010742:	f000 80ea 	beq.w	801091a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074a:	4a44      	ldr	r2, [pc, #272]	; (801085c <UART_SetConfig+0x9c8>)
 801074c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010750:	461a      	mov	r2, r3
 8010752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010754:	fbb3 f3f2 	udiv	r3, r3, r2
 8010758:	005a      	lsls	r2, r3, #1
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	085b      	lsrs	r3, r3, #1
 8010760:	441a      	add	r2, r3
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	fbb2 f3f3 	udiv	r3, r2, r3
 801076a:	b29b      	uxth	r3, r3
 801076c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010770:	2b0f      	cmp	r3, #15
 8010772:	d916      	bls.n	80107a2 <UART_SetConfig+0x90e>
 8010774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801077a:	d212      	bcs.n	80107a2 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801077e:	b29b      	uxth	r3, r3
 8010780:	f023 030f 	bic.w	r3, r3, #15
 8010784:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010788:	085b      	lsrs	r3, r3, #1
 801078a:	b29b      	uxth	r3, r3
 801078c:	f003 0307 	and.w	r3, r3, #7
 8010790:	b29a      	uxth	r2, r3
 8010792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010794:	4313      	orrs	r3, r2
 8010796:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801079e:	60da      	str	r2, [r3, #12]
 80107a0:	e0bb      	b.n	801091a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80107a2:	2301      	movs	r3, #1
 80107a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80107a8:	e0b7      	b.n	801091a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80107aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80107ae:	2b20      	cmp	r3, #32
 80107b0:	dc4a      	bgt.n	8010848 <UART_SetConfig+0x9b4>
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	f2c0 8086 	blt.w	80108c4 <UART_SetConfig+0xa30>
 80107b8:	2b20      	cmp	r3, #32
 80107ba:	f200 8083 	bhi.w	80108c4 <UART_SetConfig+0xa30>
 80107be:	a201      	add	r2, pc, #4	; (adr r2, 80107c4 <UART_SetConfig+0x930>)
 80107c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c4:	0801084f 	.word	0x0801084f
 80107c8:	08010869 	.word	0x08010869
 80107cc:	080108c5 	.word	0x080108c5
 80107d0:	080108c5 	.word	0x080108c5
 80107d4:	08010871 	.word	0x08010871
 80107d8:	080108c5 	.word	0x080108c5
 80107dc:	080108c5 	.word	0x080108c5
 80107e0:	080108c5 	.word	0x080108c5
 80107e4:	08010881 	.word	0x08010881
 80107e8:	080108c5 	.word	0x080108c5
 80107ec:	080108c5 	.word	0x080108c5
 80107f0:	080108c5 	.word	0x080108c5
 80107f4:	080108c5 	.word	0x080108c5
 80107f8:	080108c5 	.word	0x080108c5
 80107fc:	080108c5 	.word	0x080108c5
 8010800:	080108c5 	.word	0x080108c5
 8010804:	08010891 	.word	0x08010891
 8010808:	080108c5 	.word	0x080108c5
 801080c:	080108c5 	.word	0x080108c5
 8010810:	080108c5 	.word	0x080108c5
 8010814:	080108c5 	.word	0x080108c5
 8010818:	080108c5 	.word	0x080108c5
 801081c:	080108c5 	.word	0x080108c5
 8010820:	080108c5 	.word	0x080108c5
 8010824:	080108c5 	.word	0x080108c5
 8010828:	080108c5 	.word	0x080108c5
 801082c:	080108c5 	.word	0x080108c5
 8010830:	080108c5 	.word	0x080108c5
 8010834:	080108c5 	.word	0x080108c5
 8010838:	080108c5 	.word	0x080108c5
 801083c:	080108c5 	.word	0x080108c5
 8010840:	080108c5 	.word	0x080108c5
 8010844:	080108b7 	.word	0x080108b7
 8010848:	2b40      	cmp	r3, #64	; 0x40
 801084a:	d037      	beq.n	80108bc <UART_SetConfig+0xa28>
 801084c:	e03a      	b.n	80108c4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801084e:	f7fb f83f 	bl	800b8d0 <HAL_RCC_GetPCLK1Freq>
 8010852:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010854:	e03c      	b.n	80108d0 <UART_SetConfig+0xa3c>
 8010856:	bf00      	nop
 8010858:	003d0900 	.word	0x003d0900
 801085c:	08014624 	.word	0x08014624
 8010860:	58024400 	.word	0x58024400
 8010864:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010868:	f7fb f848 	bl	800b8fc <HAL_RCC_GetPCLK2Freq>
 801086c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801086e:	e02f      	b.n	80108d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010870:	f107 0314 	add.w	r3, r7, #20
 8010874:	4618      	mov	r0, r3
 8010876:	f7fb ffad 	bl	800c7d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801087a:	69bb      	ldr	r3, [r7, #24]
 801087c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801087e:	e027      	b.n	80108d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010880:	f107 0308 	add.w	r3, r7, #8
 8010884:	4618      	mov	r0, r3
 8010886:	f7fc f8f9 	bl	800ca7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801088e:	e01f      	b.n	80108d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010890:	4b2c      	ldr	r3, [pc, #176]	; (8010944 <UART_SetConfig+0xab0>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f003 0320 	and.w	r3, r3, #32
 8010898:	2b00      	cmp	r3, #0
 801089a:	d009      	beq.n	80108b0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801089c:	4b29      	ldr	r3, [pc, #164]	; (8010944 <UART_SetConfig+0xab0>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	08db      	lsrs	r3, r3, #3
 80108a2:	f003 0303 	and.w	r3, r3, #3
 80108a6:	4a28      	ldr	r2, [pc, #160]	; (8010948 <UART_SetConfig+0xab4>)
 80108a8:	fa22 f303 	lsr.w	r3, r2, r3
 80108ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108ae:	e00f      	b.n	80108d0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80108b0:	4b25      	ldr	r3, [pc, #148]	; (8010948 <UART_SetConfig+0xab4>)
 80108b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108b4:	e00c      	b.n	80108d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108b6:	4b25      	ldr	r3, [pc, #148]	; (801094c <UART_SetConfig+0xab8>)
 80108b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108ba:	e009      	b.n	80108d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108c2:	e005      	b.n	80108d0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80108c4:	2300      	movs	r3, #0
 80108c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80108c8:	2301      	movs	r3, #1
 80108ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80108ce:	bf00      	nop
    }

    if (pclk != 0U)
 80108d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d021      	beq.n	801091a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108da:	4a1d      	ldr	r2, [pc, #116]	; (8010950 <UART_SetConfig+0xabc>)
 80108dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108e0:	461a      	mov	r2, r3
 80108e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	085b      	lsrs	r3, r3, #1
 80108ee:	441a      	add	r2, r3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fe:	2b0f      	cmp	r3, #15
 8010900:	d908      	bls.n	8010914 <UART_SetConfig+0xa80>
 8010902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010908:	d204      	bcs.n	8010914 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010910:	60da      	str	r2, [r3, #12]
 8010912:	e002      	b.n	801091a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010914:	2301      	movs	r3, #1
 8010916:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2201      	movs	r2, #1
 801091e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2201      	movs	r2, #1
 8010926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2200      	movs	r2, #0
 801092e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010936:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801093a:	4618      	mov	r0, r3
 801093c:	3738      	adds	r7, #56	; 0x38
 801093e:	46bd      	mov	sp, r7
 8010940:	bdb0      	pop	{r4, r5, r7, pc}
 8010942:	bf00      	nop
 8010944:	58024400 	.word	0x58024400
 8010948:	03d09000 	.word	0x03d09000
 801094c:	003d0900 	.word	0x003d0900
 8010950:	08014624 	.word	0x08014624

08010954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010954:	b480      	push	{r7}
 8010956:	b083      	sub	sp, #12
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010960:	f003 0301 	and.w	r3, r3, #1
 8010964:	2b00      	cmp	r3, #0
 8010966:	d00a      	beq.n	801097e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	430a      	orrs	r2, r1
 801097c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010982:	f003 0302 	and.w	r3, r3, #2
 8010986:	2b00      	cmp	r3, #0
 8010988:	d00a      	beq.n	80109a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	430a      	orrs	r2, r1
 801099e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a4:	f003 0304 	and.w	r3, r3, #4
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d00a      	beq.n	80109c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	430a      	orrs	r2, r1
 80109c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109c6:	f003 0308 	and.w	r3, r3, #8
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d00a      	beq.n	80109e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	430a      	orrs	r2, r1
 80109e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e8:	f003 0310 	and.w	r3, r3, #16
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00a      	beq.n	8010a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	689b      	ldr	r3, [r3, #8]
 80109f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	430a      	orrs	r2, r1
 8010a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a0a:	f003 0320 	and.w	r3, r3, #32
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00a      	beq.n	8010a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	689b      	ldr	r3, [r3, #8]
 8010a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	430a      	orrs	r2, r1
 8010a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d01a      	beq.n	8010a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	430a      	orrs	r2, r1
 8010a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a52:	d10a      	bne.n	8010a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	430a      	orrs	r2, r1
 8010a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d00a      	beq.n	8010a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	685b      	ldr	r3, [r3, #4]
 8010a7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	430a      	orrs	r2, r1
 8010a8a:	605a      	str	r2, [r3, #4]
  }
}
 8010a8c:	bf00      	nop
 8010a8e:	370c      	adds	r7, #12
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b086      	sub	sp, #24
 8010a9c:	af02      	add	r7, sp, #8
 8010a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010aa8:	f7f4 fbaa 	bl	8005200 <HAL_GetTick>
 8010aac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f003 0308 	and.w	r3, r3, #8
 8010ab8:	2b08      	cmp	r3, #8
 8010aba:	d10e      	bne.n	8010ada <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ac0:	9300      	str	r3, [sp, #0]
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f000 f82f 	bl	8010b2e <UART_WaitOnFlagUntilTimeout>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d001      	beq.n	8010ada <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ad6:	2303      	movs	r3, #3
 8010ad8:	e025      	b.n	8010b26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	f003 0304 	and.w	r3, r3, #4
 8010ae4:	2b04      	cmp	r3, #4
 8010ae6:	d10e      	bne.n	8010b06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 f819 	bl	8010b2e <UART_WaitOnFlagUntilTimeout>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d001      	beq.n	8010b06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b02:	2303      	movs	r3, #3
 8010b04:	e00f      	b.n	8010b26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2220      	movs	r2, #32
 8010b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2220      	movs	r2, #32
 8010b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b084      	sub	sp, #16
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	60f8      	str	r0, [r7, #12]
 8010b36:	60b9      	str	r1, [r7, #8]
 8010b38:	603b      	str	r3, [r7, #0]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b3e:	e062      	b.n	8010c06 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b40:	69bb      	ldr	r3, [r7, #24]
 8010b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b46:	d05e      	beq.n	8010c06 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b48:	f7f4 fb5a 	bl	8005200 <HAL_GetTick>
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	1ad3      	subs	r3, r2, r3
 8010b52:	69ba      	ldr	r2, [r7, #24]
 8010b54:	429a      	cmp	r2, r3
 8010b56:	d302      	bcc.n	8010b5e <UART_WaitOnFlagUntilTimeout+0x30>
 8010b58:	69bb      	ldr	r3, [r7, #24]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d11d      	bne.n	8010b9a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	689a      	ldr	r2, [r3, #8]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f022 0201 	bic.w	r2, r2, #1
 8010b7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2220      	movs	r2, #32
 8010b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2220      	movs	r2, #32
 8010b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010b96:	2303      	movs	r3, #3
 8010b98:	e045      	b.n	8010c26 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f003 0304 	and.w	r3, r3, #4
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d02e      	beq.n	8010c06 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	69db      	ldr	r3, [r3, #28]
 8010bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bb6:	d126      	bne.n	8010c06 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010bc0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010bd0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	689a      	ldr	r2, [r3, #8]
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	f022 0201 	bic.w	r2, r2, #1
 8010be0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2220      	movs	r2, #32
 8010be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	2220      	movs	r2, #32
 8010bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2220      	movs	r2, #32
 8010bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010c02:	2303      	movs	r3, #3
 8010c04:	e00f      	b.n	8010c26 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	69da      	ldr	r2, [r3, #28]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	4013      	ands	r3, r2
 8010c10:	68ba      	ldr	r2, [r7, #8]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	bf0c      	ite	eq
 8010c16:	2301      	moveq	r3, #1
 8010c18:	2300      	movne	r3, #0
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	79fb      	ldrb	r3, [r7, #7]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d08d      	beq.n	8010b40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c24:	2300      	movs	r3, #0
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
	...

08010c30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	60f8      	str	r0, [r7, #12]
 8010c38:	60b9      	str	r1, [r7, #8]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	68ba      	ldr	r2, [r7, #8]
 8010c42:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	88fa      	ldrh	r2, [r7, #6]
 8010c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2222      	movs	r2, #34	; 0x22
 8010c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d02c      	beq.n	8010cbe <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c68:	4a25      	ldr	r2, [pc, #148]	; (8010d00 <UART_Start_Receive_DMA+0xd0>)
 8010c6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c70:	4a24      	ldr	r2, [pc, #144]	; (8010d04 <UART_Start_Receive_DMA+0xd4>)
 8010c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c78:	4a23      	ldr	r2, [pc, #140]	; (8010d08 <UART_Start_Receive_DMA+0xd8>)
 8010c7a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c80:	2200      	movs	r2, #0
 8010c82:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	3324      	adds	r3, #36	; 0x24
 8010c8e:	4619      	mov	r1, r3
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c94:	461a      	mov	r2, r3
 8010c96:	88fb      	ldrh	r3, [r7, #6]
 8010c98:	f7f4 ff5a 	bl	8005b50 <HAL_DMA_Start_IT>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d00d      	beq.n	8010cbe <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	2210      	movs	r2, #16
 8010ca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2200      	movs	r2, #0
 8010cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2220      	movs	r2, #32
 8010cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	e01c      	b.n	8010cf8 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010cd4:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	689a      	ldr	r2, [r3, #8]
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	f042 0201 	orr.w	r2, r2, #1
 8010ce4:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	689a      	ldr	r2, [r3, #8]
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010cf4:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8010cf6:	2300      	movs	r3, #0
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3710      	adds	r7, #16
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	08010e19 	.word	0x08010e19
 8010d04:	08010eaf 	.word	0x08010eaf
 8010d08:	08010ee7 	.word	0x08010ee7

08010d0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010d22:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	689a      	ldr	r2, [r3, #8]
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010d32:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2220      	movs	r2, #32
 8010d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010d3c:	bf00      	nop
 8010d3e:	370c      	adds	r7, #12
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr

08010d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	681a      	ldr	r2, [r3, #0]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010d5e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	6899      	ldr	r1, [r3, #8]
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681a      	ldr	r2, [r3, #0]
 8010d6a:	4b0f      	ldr	r3, [pc, #60]	; (8010da8 <UART_EndRxTransfer+0x60>)
 8010d6c:	400b      	ands	r3, r1
 8010d6e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d74:	2b01      	cmp	r3, #1
 8010d76:	d107      	bne.n	8010d88 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	f022 0210 	bic.w	r2, r2, #16
 8010d86:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2220      	movs	r2, #32
 8010d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010d9c:	bf00      	nop
 8010d9e:	370c      	adds	r7, #12
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr
 8010da8:	effffffe 	.word	0xeffffffe

08010dac <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010db8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	69db      	ldr	r3, [r3, #28]
 8010dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010dc2:	d014      	beq.n	8010dee <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	689a      	ldr	r2, [r3, #8]
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010dda:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010dea:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010dec:	e002      	b.n	8010df4 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8010dee:	68f8      	ldr	r0, [r7, #12]
 8010df0:	f7ff f81c 	bl	800fe2c <HAL_UART_TxCpltCallback>
}
 8010df4:	bf00      	nop
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e08:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010e0a:	68f8      	ldr	r0, [r7, #12]
 8010e0c:	f7ff f818 	bl	800fe40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e10:	bf00      	nop
 8010e12:	3710      	adds	r7, #16
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e24:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	69db      	ldr	r3, [r3, #28]
 8010e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e2e:	d02b      	beq.n	8010e88 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2200      	movs	r2, #0
 8010e34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010e46:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	689a      	ldr	r2, [r3, #8]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f022 0201 	bic.w	r2, r2, #1
 8010e56:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	689a      	ldr	r2, [r3, #8]
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010e66:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2220      	movs	r2, #32
 8010e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d107      	bne.n	8010e88 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f022 0210 	bic.w	r2, r2, #16
 8010e86:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	d107      	bne.n	8010ea0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010e96:	4619      	mov	r1, r3
 8010e98:	68f8      	ldr	r0, [r7, #12]
 8010e9a:	f7fe ffef 	bl	800fe7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010e9e:	e002      	b.n	8010ea6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8010ea0:	68f8      	ldr	r0, [r7, #12]
 8010ea2:	f7f3 fa5d 	bl	8004360 <HAL_UART_RxCpltCallback>
}
 8010ea6:	bf00      	nop
 8010ea8:	3710      	adds	r7, #16
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010eae:	b580      	push	{r7, lr}
 8010eb0:	b084      	sub	sp, #16
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d109      	bne.n	8010ed8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010eca:	085b      	lsrs	r3, r3, #1
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	4619      	mov	r1, r3
 8010ed0:	68f8      	ldr	r0, [r7, #12]
 8010ed2:	f7fe ffd3 	bl	800fe7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010ed6:	e002      	b.n	8010ede <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010ed8:	68f8      	ldr	r0, [r7, #12]
 8010eda:	f7fe ffbb 	bl	800fe54 <HAL_UART_RxHalfCpltCallback>
}
 8010ede:	bf00      	nop
 8010ee0:	3710      	adds	r7, #16
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}

08010ee6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010ee6:	b580      	push	{r7, lr}
 8010ee8:	b086      	sub	sp, #24
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ef2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010efa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	689b      	ldr	r3, [r3, #8]
 8010f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f0e:	2b80      	cmp	r3, #128	; 0x80
 8010f10:	d109      	bne.n	8010f26 <UART_DMAError+0x40>
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	2b21      	cmp	r3, #33	; 0x21
 8010f16:	d106      	bne.n	8010f26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010f20:	6978      	ldr	r0, [r7, #20]
 8010f22:	f7ff fef3 	bl	8010d0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	689b      	ldr	r3, [r3, #8]
 8010f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f30:	2b40      	cmp	r3, #64	; 0x40
 8010f32:	d109      	bne.n	8010f48 <UART_DMAError+0x62>
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2b22      	cmp	r3, #34	; 0x22
 8010f38:	d106      	bne.n	8010f48 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010f42:	6978      	ldr	r0, [r7, #20]
 8010f44:	f7ff ff00 	bl	8010d48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f4e:	f043 0210 	orr.w	r2, r3, #16
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f58:	6978      	ldr	r0, [r7, #20]
 8010f5a:	f7fe ff85 	bl	800fe68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f5e:	bf00      	nop
 8010f60:	3718      	adds	r7, #24
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	2200      	movs	r2, #0
 8010f78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010f84:	68f8      	ldr	r0, [r7, #12]
 8010f86:	f7fe ff6f 	bl	800fe68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f8a:	bf00      	nop
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b082      	sub	sp, #8
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010fa8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2220      	movs	r2, #32
 8010fae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f7fe ff37 	bl	800fe2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fbe:	bf00      	nop
 8010fc0:	3708      	adds	r7, #8
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}

08010fc6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010fc6:	b480      	push	{r7}
 8010fc8:	b083      	sub	sp, #12
 8010fca:	af00      	add	r7, sp, #0
 8010fcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010fce:	bf00      	nop
 8010fd0:	370c      	adds	r7, #12
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr

08010fda <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010fda:	b480      	push	{r7}
 8010fdc:	b083      	sub	sp, #12
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010fe2:	bf00      	nop
 8010fe4:	370c      	adds	r7, #12
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr

08010fee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010fee:	b480      	push	{r7}
 8010ff0:	b083      	sub	sp, #12
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ff6:	bf00      	nop
 8010ff8:	370c      	adds	r7, #12
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr

08011002 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011002:	b480      	push	{r7}
 8011004:	b085      	sub	sp, #20
 8011006:	af00      	add	r7, sp, #0
 8011008:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011010:	2b01      	cmp	r3, #1
 8011012:	d101      	bne.n	8011018 <HAL_UARTEx_DisableFifoMode+0x16>
 8011014:	2302      	movs	r3, #2
 8011016:	e027      	b.n	8011068 <HAL_UARTEx_DisableFifoMode+0x66>
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2201      	movs	r2, #1
 801101c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2224      	movs	r2, #36	; 0x24
 8011024:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	681a      	ldr	r2, [r3, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	f022 0201 	bic.w	r2, r2, #1
 801103e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011046:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2200      	movs	r2, #0
 801104c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	68fa      	ldr	r2, [r7, #12]
 8011054:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2220      	movs	r2, #32
 801105a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011066:	2300      	movs	r3, #0
}
 8011068:	4618      	mov	r0, r3
 801106a:	3714      	adds	r7, #20
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr

08011074 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011084:	2b01      	cmp	r3, #1
 8011086:	d101      	bne.n	801108c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011088:	2302      	movs	r3, #2
 801108a:	e02d      	b.n	80110e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2201      	movs	r2, #1
 8011090:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2224      	movs	r2, #36	; 0x24
 8011098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	681a      	ldr	r2, [r3, #0]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f022 0201 	bic.w	r2, r2, #1
 80110b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	689b      	ldr	r3, [r3, #8]
 80110ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	683a      	ldr	r2, [r7, #0]
 80110c4:	430a      	orrs	r2, r1
 80110c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110c8:	6878      	ldr	r0, [r7, #4]
 80110ca:	f000 f84f 	bl	801116c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	68fa      	ldr	r2, [r7, #12]
 80110d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2220      	movs	r2, #32
 80110da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2200      	movs	r2, #0
 80110e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80110e6:	2300      	movs	r3, #0
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3710      	adds	r7, #16
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011100:	2b01      	cmp	r3, #1
 8011102:	d101      	bne.n	8011108 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011104:	2302      	movs	r3, #2
 8011106:	e02d      	b.n	8011164 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2201      	movs	r2, #1
 801110c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2224      	movs	r2, #36	; 0x24
 8011114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	681a      	ldr	r2, [r3, #0]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f022 0201 	bic.w	r2, r2, #1
 801112e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	689b      	ldr	r3, [r3, #8]
 8011136:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	683a      	ldr	r2, [r7, #0]
 8011140:	430a      	orrs	r2, r1
 8011142:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 f811 	bl	801116c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	68fa      	ldr	r2, [r7, #12]
 8011150:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2220      	movs	r2, #32
 8011156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2200      	movs	r2, #0
 801115e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011162:	2300      	movs	r3, #0
}
 8011164:	4618      	mov	r0, r3
 8011166:	3710      	adds	r7, #16
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801116c:	b480      	push	{r7}
 801116e:	b085      	sub	sp, #20
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011178:	2b00      	cmp	r3, #0
 801117a:	d108      	bne.n	801118e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2201      	movs	r2, #1
 8011180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2201      	movs	r2, #1
 8011188:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801118c:	e031      	b.n	80111f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801118e:	2310      	movs	r3, #16
 8011190:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011192:	2310      	movs	r3, #16
 8011194:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	689b      	ldr	r3, [r3, #8]
 801119c:	0e5b      	lsrs	r3, r3, #25
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	f003 0307 	and.w	r3, r3, #7
 80111a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	689b      	ldr	r3, [r3, #8]
 80111ac:	0f5b      	lsrs	r3, r3, #29
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	f003 0307 	and.w	r3, r3, #7
 80111b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111b6:	7bbb      	ldrb	r3, [r7, #14]
 80111b8:	7b3a      	ldrb	r2, [r7, #12]
 80111ba:	4911      	ldr	r1, [pc, #68]	; (8011200 <UARTEx_SetNbDataToProcess+0x94>)
 80111bc:	5c8a      	ldrb	r2, [r1, r2]
 80111be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80111c2:	7b3a      	ldrb	r2, [r7, #12]
 80111c4:	490f      	ldr	r1, [pc, #60]	; (8011204 <UARTEx_SetNbDataToProcess+0x98>)
 80111c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80111c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111d4:	7bfb      	ldrb	r3, [r7, #15]
 80111d6:	7b7a      	ldrb	r2, [r7, #13]
 80111d8:	4909      	ldr	r1, [pc, #36]	; (8011200 <UARTEx_SetNbDataToProcess+0x94>)
 80111da:	5c8a      	ldrb	r2, [r1, r2]
 80111dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80111e0:	7b7a      	ldrb	r2, [r7, #13]
 80111e2:	4908      	ldr	r1, [pc, #32]	; (8011204 <UARTEx_SetNbDataToProcess+0x98>)
 80111e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80111e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80111f2:	bf00      	nop
 80111f4:	3714      	adds	r7, #20
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	0801463c 	.word	0x0801463c
 8011204:	08014644 	.word	0x08014644

08011208 <__errno>:
 8011208:	4b01      	ldr	r3, [pc, #4]	; (8011210 <__errno+0x8>)
 801120a:	6818      	ldr	r0, [r3, #0]
 801120c:	4770      	bx	lr
 801120e:	bf00      	nop
 8011210:	24000024 	.word	0x24000024

08011214 <__libc_init_array>:
 8011214:	b570      	push	{r4, r5, r6, lr}
 8011216:	4d0d      	ldr	r5, [pc, #52]	; (801124c <__libc_init_array+0x38>)
 8011218:	4c0d      	ldr	r4, [pc, #52]	; (8011250 <__libc_init_array+0x3c>)
 801121a:	1b64      	subs	r4, r4, r5
 801121c:	10a4      	asrs	r4, r4, #2
 801121e:	2600      	movs	r6, #0
 8011220:	42a6      	cmp	r6, r4
 8011222:	d109      	bne.n	8011238 <__libc_init_array+0x24>
 8011224:	4d0b      	ldr	r5, [pc, #44]	; (8011254 <__libc_init_array+0x40>)
 8011226:	4c0c      	ldr	r4, [pc, #48]	; (8011258 <__libc_init_array+0x44>)
 8011228:	f003 f994 	bl	8014554 <_init>
 801122c:	1b64      	subs	r4, r4, r5
 801122e:	10a4      	asrs	r4, r4, #2
 8011230:	2600      	movs	r6, #0
 8011232:	42a6      	cmp	r6, r4
 8011234:	d105      	bne.n	8011242 <__libc_init_array+0x2e>
 8011236:	bd70      	pop	{r4, r5, r6, pc}
 8011238:	f855 3b04 	ldr.w	r3, [r5], #4
 801123c:	4798      	blx	r3
 801123e:	3601      	adds	r6, #1
 8011240:	e7ee      	b.n	8011220 <__libc_init_array+0xc>
 8011242:	f855 3b04 	ldr.w	r3, [r5], #4
 8011246:	4798      	blx	r3
 8011248:	3601      	adds	r6, #1
 801124a:	e7f2      	b.n	8011232 <__libc_init_array+0x1e>
 801124c:	08014ae0 	.word	0x08014ae0
 8011250:	08014ae0 	.word	0x08014ae0
 8011254:	08014ae0 	.word	0x08014ae0
 8011258:	08014ae4 	.word	0x08014ae4

0801125c <memset>:
 801125c:	4402      	add	r2, r0
 801125e:	4603      	mov	r3, r0
 8011260:	4293      	cmp	r3, r2
 8011262:	d100      	bne.n	8011266 <memset+0xa>
 8011264:	4770      	bx	lr
 8011266:	f803 1b01 	strb.w	r1, [r3], #1
 801126a:	e7f9      	b.n	8011260 <memset+0x4>

0801126c <__cvt>:
 801126c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801126e:	ed2d 8b02 	vpush	{d8}
 8011272:	eeb0 8b40 	vmov.f64	d8, d0
 8011276:	b085      	sub	sp, #20
 8011278:	4617      	mov	r7, r2
 801127a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801127c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801127e:	ee18 2a90 	vmov	r2, s17
 8011282:	f025 0520 	bic.w	r5, r5, #32
 8011286:	2a00      	cmp	r2, #0
 8011288:	bfb6      	itet	lt
 801128a:	222d      	movlt	r2, #45	; 0x2d
 801128c:	2200      	movge	r2, #0
 801128e:	eeb1 8b40 	vneglt.f64	d8, d0
 8011292:	2d46      	cmp	r5, #70	; 0x46
 8011294:	460c      	mov	r4, r1
 8011296:	701a      	strb	r2, [r3, #0]
 8011298:	d004      	beq.n	80112a4 <__cvt+0x38>
 801129a:	2d45      	cmp	r5, #69	; 0x45
 801129c:	d100      	bne.n	80112a0 <__cvt+0x34>
 801129e:	3401      	adds	r4, #1
 80112a0:	2102      	movs	r1, #2
 80112a2:	e000      	b.n	80112a6 <__cvt+0x3a>
 80112a4:	2103      	movs	r1, #3
 80112a6:	ab03      	add	r3, sp, #12
 80112a8:	9301      	str	r3, [sp, #4]
 80112aa:	ab02      	add	r3, sp, #8
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	4622      	mov	r2, r4
 80112b0:	4633      	mov	r3, r6
 80112b2:	eeb0 0b48 	vmov.f64	d0, d8
 80112b6:	f000 fdf7 	bl	8011ea8 <_dtoa_r>
 80112ba:	2d47      	cmp	r5, #71	; 0x47
 80112bc:	d109      	bne.n	80112d2 <__cvt+0x66>
 80112be:	07fb      	lsls	r3, r7, #31
 80112c0:	d407      	bmi.n	80112d2 <__cvt+0x66>
 80112c2:	9b03      	ldr	r3, [sp, #12]
 80112c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80112c6:	1a1b      	subs	r3, r3, r0
 80112c8:	6013      	str	r3, [r2, #0]
 80112ca:	b005      	add	sp, #20
 80112cc:	ecbd 8b02 	vpop	{d8}
 80112d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112d2:	2d46      	cmp	r5, #70	; 0x46
 80112d4:	eb00 0204 	add.w	r2, r0, r4
 80112d8:	d10c      	bne.n	80112f4 <__cvt+0x88>
 80112da:	7803      	ldrb	r3, [r0, #0]
 80112dc:	2b30      	cmp	r3, #48	; 0x30
 80112de:	d107      	bne.n	80112f0 <__cvt+0x84>
 80112e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80112e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e8:	bf1c      	itt	ne
 80112ea:	f1c4 0401 	rsbne	r4, r4, #1
 80112ee:	6034      	strne	r4, [r6, #0]
 80112f0:	6833      	ldr	r3, [r6, #0]
 80112f2:	441a      	add	r2, r3
 80112f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fc:	bf08      	it	eq
 80112fe:	9203      	streq	r2, [sp, #12]
 8011300:	2130      	movs	r1, #48	; 0x30
 8011302:	9b03      	ldr	r3, [sp, #12]
 8011304:	4293      	cmp	r3, r2
 8011306:	d2dc      	bcs.n	80112c2 <__cvt+0x56>
 8011308:	1c5c      	adds	r4, r3, #1
 801130a:	9403      	str	r4, [sp, #12]
 801130c:	7019      	strb	r1, [r3, #0]
 801130e:	e7f8      	b.n	8011302 <__cvt+0x96>

08011310 <__exponent>:
 8011310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011312:	4603      	mov	r3, r0
 8011314:	2900      	cmp	r1, #0
 8011316:	bfb8      	it	lt
 8011318:	4249      	neglt	r1, r1
 801131a:	f803 2b02 	strb.w	r2, [r3], #2
 801131e:	bfb4      	ite	lt
 8011320:	222d      	movlt	r2, #45	; 0x2d
 8011322:	222b      	movge	r2, #43	; 0x2b
 8011324:	2909      	cmp	r1, #9
 8011326:	7042      	strb	r2, [r0, #1]
 8011328:	dd2a      	ble.n	8011380 <__exponent+0x70>
 801132a:	f10d 0407 	add.w	r4, sp, #7
 801132e:	46a4      	mov	ip, r4
 8011330:	270a      	movs	r7, #10
 8011332:	46a6      	mov	lr, r4
 8011334:	460a      	mov	r2, r1
 8011336:	fb91 f6f7 	sdiv	r6, r1, r7
 801133a:	fb07 1516 	mls	r5, r7, r6, r1
 801133e:	3530      	adds	r5, #48	; 0x30
 8011340:	2a63      	cmp	r2, #99	; 0x63
 8011342:	f104 34ff 	add.w	r4, r4, #4294967295
 8011346:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801134a:	4631      	mov	r1, r6
 801134c:	dcf1      	bgt.n	8011332 <__exponent+0x22>
 801134e:	3130      	adds	r1, #48	; 0x30
 8011350:	f1ae 0502 	sub.w	r5, lr, #2
 8011354:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011358:	1c44      	adds	r4, r0, #1
 801135a:	4629      	mov	r1, r5
 801135c:	4561      	cmp	r1, ip
 801135e:	d30a      	bcc.n	8011376 <__exponent+0x66>
 8011360:	f10d 0209 	add.w	r2, sp, #9
 8011364:	eba2 020e 	sub.w	r2, r2, lr
 8011368:	4565      	cmp	r5, ip
 801136a:	bf88      	it	hi
 801136c:	2200      	movhi	r2, #0
 801136e:	4413      	add	r3, r2
 8011370:	1a18      	subs	r0, r3, r0
 8011372:	b003      	add	sp, #12
 8011374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011376:	f811 2b01 	ldrb.w	r2, [r1], #1
 801137a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801137e:	e7ed      	b.n	801135c <__exponent+0x4c>
 8011380:	2330      	movs	r3, #48	; 0x30
 8011382:	3130      	adds	r1, #48	; 0x30
 8011384:	7083      	strb	r3, [r0, #2]
 8011386:	70c1      	strb	r1, [r0, #3]
 8011388:	1d03      	adds	r3, r0, #4
 801138a:	e7f1      	b.n	8011370 <__exponent+0x60>
 801138c:	0000      	movs	r0, r0
	...

08011390 <_printf_float>:
 8011390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011394:	b08b      	sub	sp, #44	; 0x2c
 8011396:	460c      	mov	r4, r1
 8011398:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801139c:	4616      	mov	r6, r2
 801139e:	461f      	mov	r7, r3
 80113a0:	4605      	mov	r5, r0
 80113a2:	f001 fcbb 	bl	8012d1c <_localeconv_r>
 80113a6:	f8d0 b000 	ldr.w	fp, [r0]
 80113aa:	4658      	mov	r0, fp
 80113ac:	f7ee ff98 	bl	80002e0 <strlen>
 80113b0:	2300      	movs	r3, #0
 80113b2:	9308      	str	r3, [sp, #32]
 80113b4:	f8d8 3000 	ldr.w	r3, [r8]
 80113b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80113bc:	6822      	ldr	r2, [r4, #0]
 80113be:	3307      	adds	r3, #7
 80113c0:	f023 0307 	bic.w	r3, r3, #7
 80113c4:	f103 0108 	add.w	r1, r3, #8
 80113c8:	f8c8 1000 	str.w	r1, [r8]
 80113cc:	4682      	mov	sl, r0
 80113ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80113d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80113d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011638 <_printf_float+0x2a8>
 80113da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80113de:	eeb0 6bc0 	vabs.f64	d6, d0
 80113e2:	eeb4 6b47 	vcmp.f64	d6, d7
 80113e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113ea:	dd24      	ble.n	8011436 <_printf_float+0xa6>
 80113ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80113f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f4:	d502      	bpl.n	80113fc <_printf_float+0x6c>
 80113f6:	232d      	movs	r3, #45	; 0x2d
 80113f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80113fc:	4b90      	ldr	r3, [pc, #576]	; (8011640 <_printf_float+0x2b0>)
 80113fe:	4891      	ldr	r0, [pc, #580]	; (8011644 <_printf_float+0x2b4>)
 8011400:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011404:	bf94      	ite	ls
 8011406:	4698      	movls	r8, r3
 8011408:	4680      	movhi	r8, r0
 801140a:	2303      	movs	r3, #3
 801140c:	6123      	str	r3, [r4, #16]
 801140e:	f022 0204 	bic.w	r2, r2, #4
 8011412:	2300      	movs	r3, #0
 8011414:	6022      	str	r2, [r4, #0]
 8011416:	9304      	str	r3, [sp, #16]
 8011418:	9700      	str	r7, [sp, #0]
 801141a:	4633      	mov	r3, r6
 801141c:	aa09      	add	r2, sp, #36	; 0x24
 801141e:	4621      	mov	r1, r4
 8011420:	4628      	mov	r0, r5
 8011422:	f000 f9d3 	bl	80117cc <_printf_common>
 8011426:	3001      	adds	r0, #1
 8011428:	f040 808a 	bne.w	8011540 <_printf_float+0x1b0>
 801142c:	f04f 30ff 	mov.w	r0, #4294967295
 8011430:	b00b      	add	sp, #44	; 0x2c
 8011432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011436:	eeb4 0b40 	vcmp.f64	d0, d0
 801143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801143e:	d709      	bvc.n	8011454 <_printf_float+0xc4>
 8011440:	ee10 3a90 	vmov	r3, s1
 8011444:	2b00      	cmp	r3, #0
 8011446:	bfbc      	itt	lt
 8011448:	232d      	movlt	r3, #45	; 0x2d
 801144a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801144e:	487e      	ldr	r0, [pc, #504]	; (8011648 <_printf_float+0x2b8>)
 8011450:	4b7e      	ldr	r3, [pc, #504]	; (801164c <_printf_float+0x2bc>)
 8011452:	e7d5      	b.n	8011400 <_printf_float+0x70>
 8011454:	6863      	ldr	r3, [r4, #4]
 8011456:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801145a:	9104      	str	r1, [sp, #16]
 801145c:	1c59      	adds	r1, r3, #1
 801145e:	d13c      	bne.n	80114da <_printf_float+0x14a>
 8011460:	2306      	movs	r3, #6
 8011462:	6063      	str	r3, [r4, #4]
 8011464:	2300      	movs	r3, #0
 8011466:	9303      	str	r3, [sp, #12]
 8011468:	ab08      	add	r3, sp, #32
 801146a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801146e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011472:	ab07      	add	r3, sp, #28
 8011474:	6861      	ldr	r1, [r4, #4]
 8011476:	9300      	str	r3, [sp, #0]
 8011478:	6022      	str	r2, [r4, #0]
 801147a:	f10d 031b 	add.w	r3, sp, #27
 801147e:	4628      	mov	r0, r5
 8011480:	f7ff fef4 	bl	801126c <__cvt>
 8011484:	9b04      	ldr	r3, [sp, #16]
 8011486:	9907      	ldr	r1, [sp, #28]
 8011488:	2b47      	cmp	r3, #71	; 0x47
 801148a:	4680      	mov	r8, r0
 801148c:	d108      	bne.n	80114a0 <_printf_float+0x110>
 801148e:	1cc8      	adds	r0, r1, #3
 8011490:	db02      	blt.n	8011498 <_printf_float+0x108>
 8011492:	6863      	ldr	r3, [r4, #4]
 8011494:	4299      	cmp	r1, r3
 8011496:	dd41      	ble.n	801151c <_printf_float+0x18c>
 8011498:	f1a9 0902 	sub.w	r9, r9, #2
 801149c:	fa5f f989 	uxtb.w	r9, r9
 80114a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80114a4:	d820      	bhi.n	80114e8 <_printf_float+0x158>
 80114a6:	3901      	subs	r1, #1
 80114a8:	464a      	mov	r2, r9
 80114aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80114ae:	9107      	str	r1, [sp, #28]
 80114b0:	f7ff ff2e 	bl	8011310 <__exponent>
 80114b4:	9a08      	ldr	r2, [sp, #32]
 80114b6:	9004      	str	r0, [sp, #16]
 80114b8:	1813      	adds	r3, r2, r0
 80114ba:	2a01      	cmp	r2, #1
 80114bc:	6123      	str	r3, [r4, #16]
 80114be:	dc02      	bgt.n	80114c6 <_printf_float+0x136>
 80114c0:	6822      	ldr	r2, [r4, #0]
 80114c2:	07d2      	lsls	r2, r2, #31
 80114c4:	d501      	bpl.n	80114ca <_printf_float+0x13a>
 80114c6:	3301      	adds	r3, #1
 80114c8:	6123      	str	r3, [r4, #16]
 80114ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d0a2      	beq.n	8011418 <_printf_float+0x88>
 80114d2:	232d      	movs	r3, #45	; 0x2d
 80114d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80114d8:	e79e      	b.n	8011418 <_printf_float+0x88>
 80114da:	9904      	ldr	r1, [sp, #16]
 80114dc:	2947      	cmp	r1, #71	; 0x47
 80114de:	d1c1      	bne.n	8011464 <_printf_float+0xd4>
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d1bf      	bne.n	8011464 <_printf_float+0xd4>
 80114e4:	2301      	movs	r3, #1
 80114e6:	e7bc      	b.n	8011462 <_printf_float+0xd2>
 80114e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80114ec:	d118      	bne.n	8011520 <_printf_float+0x190>
 80114ee:	2900      	cmp	r1, #0
 80114f0:	6863      	ldr	r3, [r4, #4]
 80114f2:	dd0b      	ble.n	801150c <_printf_float+0x17c>
 80114f4:	6121      	str	r1, [r4, #16]
 80114f6:	b913      	cbnz	r3, 80114fe <_printf_float+0x16e>
 80114f8:	6822      	ldr	r2, [r4, #0]
 80114fa:	07d0      	lsls	r0, r2, #31
 80114fc:	d502      	bpl.n	8011504 <_printf_float+0x174>
 80114fe:	3301      	adds	r3, #1
 8011500:	440b      	add	r3, r1
 8011502:	6123      	str	r3, [r4, #16]
 8011504:	2300      	movs	r3, #0
 8011506:	65a1      	str	r1, [r4, #88]	; 0x58
 8011508:	9304      	str	r3, [sp, #16]
 801150a:	e7de      	b.n	80114ca <_printf_float+0x13a>
 801150c:	b913      	cbnz	r3, 8011514 <_printf_float+0x184>
 801150e:	6822      	ldr	r2, [r4, #0]
 8011510:	07d2      	lsls	r2, r2, #31
 8011512:	d501      	bpl.n	8011518 <_printf_float+0x188>
 8011514:	3302      	adds	r3, #2
 8011516:	e7f4      	b.n	8011502 <_printf_float+0x172>
 8011518:	2301      	movs	r3, #1
 801151a:	e7f2      	b.n	8011502 <_printf_float+0x172>
 801151c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011520:	9b08      	ldr	r3, [sp, #32]
 8011522:	4299      	cmp	r1, r3
 8011524:	db05      	blt.n	8011532 <_printf_float+0x1a2>
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	6121      	str	r1, [r4, #16]
 801152a:	07d8      	lsls	r0, r3, #31
 801152c:	d5ea      	bpl.n	8011504 <_printf_float+0x174>
 801152e:	1c4b      	adds	r3, r1, #1
 8011530:	e7e7      	b.n	8011502 <_printf_float+0x172>
 8011532:	2900      	cmp	r1, #0
 8011534:	bfd4      	ite	le
 8011536:	f1c1 0202 	rsble	r2, r1, #2
 801153a:	2201      	movgt	r2, #1
 801153c:	4413      	add	r3, r2
 801153e:	e7e0      	b.n	8011502 <_printf_float+0x172>
 8011540:	6823      	ldr	r3, [r4, #0]
 8011542:	055a      	lsls	r2, r3, #21
 8011544:	d407      	bmi.n	8011556 <_printf_float+0x1c6>
 8011546:	6923      	ldr	r3, [r4, #16]
 8011548:	4642      	mov	r2, r8
 801154a:	4631      	mov	r1, r6
 801154c:	4628      	mov	r0, r5
 801154e:	47b8      	blx	r7
 8011550:	3001      	adds	r0, #1
 8011552:	d12a      	bne.n	80115aa <_printf_float+0x21a>
 8011554:	e76a      	b.n	801142c <_printf_float+0x9c>
 8011556:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801155a:	f240 80e2 	bls.w	8011722 <_printf_float+0x392>
 801155e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011562:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801156a:	d133      	bne.n	80115d4 <_printf_float+0x244>
 801156c:	4a38      	ldr	r2, [pc, #224]	; (8011650 <_printf_float+0x2c0>)
 801156e:	2301      	movs	r3, #1
 8011570:	4631      	mov	r1, r6
 8011572:	4628      	mov	r0, r5
 8011574:	47b8      	blx	r7
 8011576:	3001      	adds	r0, #1
 8011578:	f43f af58 	beq.w	801142c <_printf_float+0x9c>
 801157c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011580:	429a      	cmp	r2, r3
 8011582:	db02      	blt.n	801158a <_printf_float+0x1fa>
 8011584:	6823      	ldr	r3, [r4, #0]
 8011586:	07d8      	lsls	r0, r3, #31
 8011588:	d50f      	bpl.n	80115aa <_printf_float+0x21a>
 801158a:	4653      	mov	r3, sl
 801158c:	465a      	mov	r2, fp
 801158e:	4631      	mov	r1, r6
 8011590:	4628      	mov	r0, r5
 8011592:	47b8      	blx	r7
 8011594:	3001      	adds	r0, #1
 8011596:	f43f af49 	beq.w	801142c <_printf_float+0x9c>
 801159a:	f04f 0800 	mov.w	r8, #0
 801159e:	f104 091a 	add.w	r9, r4, #26
 80115a2:	9b08      	ldr	r3, [sp, #32]
 80115a4:	3b01      	subs	r3, #1
 80115a6:	4543      	cmp	r3, r8
 80115a8:	dc09      	bgt.n	80115be <_printf_float+0x22e>
 80115aa:	6823      	ldr	r3, [r4, #0]
 80115ac:	079b      	lsls	r3, r3, #30
 80115ae:	f100 8108 	bmi.w	80117c2 <_printf_float+0x432>
 80115b2:	68e0      	ldr	r0, [r4, #12]
 80115b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b6:	4298      	cmp	r0, r3
 80115b8:	bfb8      	it	lt
 80115ba:	4618      	movlt	r0, r3
 80115bc:	e738      	b.n	8011430 <_printf_float+0xa0>
 80115be:	2301      	movs	r3, #1
 80115c0:	464a      	mov	r2, r9
 80115c2:	4631      	mov	r1, r6
 80115c4:	4628      	mov	r0, r5
 80115c6:	47b8      	blx	r7
 80115c8:	3001      	adds	r0, #1
 80115ca:	f43f af2f 	beq.w	801142c <_printf_float+0x9c>
 80115ce:	f108 0801 	add.w	r8, r8, #1
 80115d2:	e7e6      	b.n	80115a2 <_printf_float+0x212>
 80115d4:	9b07      	ldr	r3, [sp, #28]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	dc3c      	bgt.n	8011654 <_printf_float+0x2c4>
 80115da:	4a1d      	ldr	r2, [pc, #116]	; (8011650 <_printf_float+0x2c0>)
 80115dc:	2301      	movs	r3, #1
 80115de:	4631      	mov	r1, r6
 80115e0:	4628      	mov	r0, r5
 80115e2:	47b8      	blx	r7
 80115e4:	3001      	adds	r0, #1
 80115e6:	f43f af21 	beq.w	801142c <_printf_float+0x9c>
 80115ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80115ee:	4313      	orrs	r3, r2
 80115f0:	d102      	bne.n	80115f8 <_printf_float+0x268>
 80115f2:	6823      	ldr	r3, [r4, #0]
 80115f4:	07d9      	lsls	r1, r3, #31
 80115f6:	d5d8      	bpl.n	80115aa <_printf_float+0x21a>
 80115f8:	4653      	mov	r3, sl
 80115fa:	465a      	mov	r2, fp
 80115fc:	4631      	mov	r1, r6
 80115fe:	4628      	mov	r0, r5
 8011600:	47b8      	blx	r7
 8011602:	3001      	adds	r0, #1
 8011604:	f43f af12 	beq.w	801142c <_printf_float+0x9c>
 8011608:	f04f 0900 	mov.w	r9, #0
 801160c:	f104 0a1a 	add.w	sl, r4, #26
 8011610:	9b07      	ldr	r3, [sp, #28]
 8011612:	425b      	negs	r3, r3
 8011614:	454b      	cmp	r3, r9
 8011616:	dc01      	bgt.n	801161c <_printf_float+0x28c>
 8011618:	9b08      	ldr	r3, [sp, #32]
 801161a:	e795      	b.n	8011548 <_printf_float+0x1b8>
 801161c:	2301      	movs	r3, #1
 801161e:	4652      	mov	r2, sl
 8011620:	4631      	mov	r1, r6
 8011622:	4628      	mov	r0, r5
 8011624:	47b8      	blx	r7
 8011626:	3001      	adds	r0, #1
 8011628:	f43f af00 	beq.w	801142c <_printf_float+0x9c>
 801162c:	f109 0901 	add.w	r9, r9, #1
 8011630:	e7ee      	b.n	8011610 <_printf_float+0x280>
 8011632:	bf00      	nop
 8011634:	f3af 8000 	nop.w
 8011638:	ffffffff 	.word	0xffffffff
 801163c:	7fefffff 	.word	0x7fefffff
 8011640:	08014650 	.word	0x08014650
 8011644:	08014654 	.word	0x08014654
 8011648:	0801465c 	.word	0x0801465c
 801164c:	08014658 	.word	0x08014658
 8011650:	08014660 	.word	0x08014660
 8011654:	9a08      	ldr	r2, [sp, #32]
 8011656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011658:	429a      	cmp	r2, r3
 801165a:	bfa8      	it	ge
 801165c:	461a      	movge	r2, r3
 801165e:	2a00      	cmp	r2, #0
 8011660:	4691      	mov	r9, r2
 8011662:	dc38      	bgt.n	80116d6 <_printf_float+0x346>
 8011664:	2300      	movs	r3, #0
 8011666:	9305      	str	r3, [sp, #20]
 8011668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801166c:	f104 021a 	add.w	r2, r4, #26
 8011670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011672:	9905      	ldr	r1, [sp, #20]
 8011674:	9304      	str	r3, [sp, #16]
 8011676:	eba3 0309 	sub.w	r3, r3, r9
 801167a:	428b      	cmp	r3, r1
 801167c:	dc33      	bgt.n	80116e6 <_printf_float+0x356>
 801167e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011682:	429a      	cmp	r2, r3
 8011684:	db3c      	blt.n	8011700 <_printf_float+0x370>
 8011686:	6823      	ldr	r3, [r4, #0]
 8011688:	07da      	lsls	r2, r3, #31
 801168a:	d439      	bmi.n	8011700 <_printf_float+0x370>
 801168c:	9a08      	ldr	r2, [sp, #32]
 801168e:	9b04      	ldr	r3, [sp, #16]
 8011690:	9907      	ldr	r1, [sp, #28]
 8011692:	1ad3      	subs	r3, r2, r3
 8011694:	eba2 0901 	sub.w	r9, r2, r1
 8011698:	4599      	cmp	r9, r3
 801169a:	bfa8      	it	ge
 801169c:	4699      	movge	r9, r3
 801169e:	f1b9 0f00 	cmp.w	r9, #0
 80116a2:	dc35      	bgt.n	8011710 <_printf_float+0x380>
 80116a4:	f04f 0800 	mov.w	r8, #0
 80116a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80116ac:	f104 0a1a 	add.w	sl, r4, #26
 80116b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80116b4:	1a9b      	subs	r3, r3, r2
 80116b6:	eba3 0309 	sub.w	r3, r3, r9
 80116ba:	4543      	cmp	r3, r8
 80116bc:	f77f af75 	ble.w	80115aa <_printf_float+0x21a>
 80116c0:	2301      	movs	r3, #1
 80116c2:	4652      	mov	r2, sl
 80116c4:	4631      	mov	r1, r6
 80116c6:	4628      	mov	r0, r5
 80116c8:	47b8      	blx	r7
 80116ca:	3001      	adds	r0, #1
 80116cc:	f43f aeae 	beq.w	801142c <_printf_float+0x9c>
 80116d0:	f108 0801 	add.w	r8, r8, #1
 80116d4:	e7ec      	b.n	80116b0 <_printf_float+0x320>
 80116d6:	4613      	mov	r3, r2
 80116d8:	4631      	mov	r1, r6
 80116da:	4642      	mov	r2, r8
 80116dc:	4628      	mov	r0, r5
 80116de:	47b8      	blx	r7
 80116e0:	3001      	adds	r0, #1
 80116e2:	d1bf      	bne.n	8011664 <_printf_float+0x2d4>
 80116e4:	e6a2      	b.n	801142c <_printf_float+0x9c>
 80116e6:	2301      	movs	r3, #1
 80116e8:	4631      	mov	r1, r6
 80116ea:	4628      	mov	r0, r5
 80116ec:	9204      	str	r2, [sp, #16]
 80116ee:	47b8      	blx	r7
 80116f0:	3001      	adds	r0, #1
 80116f2:	f43f ae9b 	beq.w	801142c <_printf_float+0x9c>
 80116f6:	9b05      	ldr	r3, [sp, #20]
 80116f8:	9a04      	ldr	r2, [sp, #16]
 80116fa:	3301      	adds	r3, #1
 80116fc:	9305      	str	r3, [sp, #20]
 80116fe:	e7b7      	b.n	8011670 <_printf_float+0x2e0>
 8011700:	4653      	mov	r3, sl
 8011702:	465a      	mov	r2, fp
 8011704:	4631      	mov	r1, r6
 8011706:	4628      	mov	r0, r5
 8011708:	47b8      	blx	r7
 801170a:	3001      	adds	r0, #1
 801170c:	d1be      	bne.n	801168c <_printf_float+0x2fc>
 801170e:	e68d      	b.n	801142c <_printf_float+0x9c>
 8011710:	9a04      	ldr	r2, [sp, #16]
 8011712:	464b      	mov	r3, r9
 8011714:	4442      	add	r2, r8
 8011716:	4631      	mov	r1, r6
 8011718:	4628      	mov	r0, r5
 801171a:	47b8      	blx	r7
 801171c:	3001      	adds	r0, #1
 801171e:	d1c1      	bne.n	80116a4 <_printf_float+0x314>
 8011720:	e684      	b.n	801142c <_printf_float+0x9c>
 8011722:	9a08      	ldr	r2, [sp, #32]
 8011724:	2a01      	cmp	r2, #1
 8011726:	dc01      	bgt.n	801172c <_printf_float+0x39c>
 8011728:	07db      	lsls	r3, r3, #31
 801172a:	d537      	bpl.n	801179c <_printf_float+0x40c>
 801172c:	2301      	movs	r3, #1
 801172e:	4642      	mov	r2, r8
 8011730:	4631      	mov	r1, r6
 8011732:	4628      	mov	r0, r5
 8011734:	47b8      	blx	r7
 8011736:	3001      	adds	r0, #1
 8011738:	f43f ae78 	beq.w	801142c <_printf_float+0x9c>
 801173c:	4653      	mov	r3, sl
 801173e:	465a      	mov	r2, fp
 8011740:	4631      	mov	r1, r6
 8011742:	4628      	mov	r0, r5
 8011744:	47b8      	blx	r7
 8011746:	3001      	adds	r0, #1
 8011748:	f43f ae70 	beq.w	801142c <_printf_float+0x9c>
 801174c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011750:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011758:	d01b      	beq.n	8011792 <_printf_float+0x402>
 801175a:	9b08      	ldr	r3, [sp, #32]
 801175c:	f108 0201 	add.w	r2, r8, #1
 8011760:	3b01      	subs	r3, #1
 8011762:	4631      	mov	r1, r6
 8011764:	4628      	mov	r0, r5
 8011766:	47b8      	blx	r7
 8011768:	3001      	adds	r0, #1
 801176a:	d10e      	bne.n	801178a <_printf_float+0x3fa>
 801176c:	e65e      	b.n	801142c <_printf_float+0x9c>
 801176e:	2301      	movs	r3, #1
 8011770:	464a      	mov	r2, r9
 8011772:	4631      	mov	r1, r6
 8011774:	4628      	mov	r0, r5
 8011776:	47b8      	blx	r7
 8011778:	3001      	adds	r0, #1
 801177a:	f43f ae57 	beq.w	801142c <_printf_float+0x9c>
 801177e:	f108 0801 	add.w	r8, r8, #1
 8011782:	9b08      	ldr	r3, [sp, #32]
 8011784:	3b01      	subs	r3, #1
 8011786:	4543      	cmp	r3, r8
 8011788:	dcf1      	bgt.n	801176e <_printf_float+0x3de>
 801178a:	9b04      	ldr	r3, [sp, #16]
 801178c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011790:	e6db      	b.n	801154a <_printf_float+0x1ba>
 8011792:	f04f 0800 	mov.w	r8, #0
 8011796:	f104 091a 	add.w	r9, r4, #26
 801179a:	e7f2      	b.n	8011782 <_printf_float+0x3f2>
 801179c:	2301      	movs	r3, #1
 801179e:	4642      	mov	r2, r8
 80117a0:	e7df      	b.n	8011762 <_printf_float+0x3d2>
 80117a2:	2301      	movs	r3, #1
 80117a4:	464a      	mov	r2, r9
 80117a6:	4631      	mov	r1, r6
 80117a8:	4628      	mov	r0, r5
 80117aa:	47b8      	blx	r7
 80117ac:	3001      	adds	r0, #1
 80117ae:	f43f ae3d 	beq.w	801142c <_printf_float+0x9c>
 80117b2:	f108 0801 	add.w	r8, r8, #1
 80117b6:	68e3      	ldr	r3, [r4, #12]
 80117b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80117ba:	1a5b      	subs	r3, r3, r1
 80117bc:	4543      	cmp	r3, r8
 80117be:	dcf0      	bgt.n	80117a2 <_printf_float+0x412>
 80117c0:	e6f7      	b.n	80115b2 <_printf_float+0x222>
 80117c2:	f04f 0800 	mov.w	r8, #0
 80117c6:	f104 0919 	add.w	r9, r4, #25
 80117ca:	e7f4      	b.n	80117b6 <_printf_float+0x426>

080117cc <_printf_common>:
 80117cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117d0:	4616      	mov	r6, r2
 80117d2:	4699      	mov	r9, r3
 80117d4:	688a      	ldr	r2, [r1, #8]
 80117d6:	690b      	ldr	r3, [r1, #16]
 80117d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80117dc:	4293      	cmp	r3, r2
 80117de:	bfb8      	it	lt
 80117e0:	4613      	movlt	r3, r2
 80117e2:	6033      	str	r3, [r6, #0]
 80117e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80117e8:	4607      	mov	r7, r0
 80117ea:	460c      	mov	r4, r1
 80117ec:	b10a      	cbz	r2, 80117f2 <_printf_common+0x26>
 80117ee:	3301      	adds	r3, #1
 80117f0:	6033      	str	r3, [r6, #0]
 80117f2:	6823      	ldr	r3, [r4, #0]
 80117f4:	0699      	lsls	r1, r3, #26
 80117f6:	bf42      	ittt	mi
 80117f8:	6833      	ldrmi	r3, [r6, #0]
 80117fa:	3302      	addmi	r3, #2
 80117fc:	6033      	strmi	r3, [r6, #0]
 80117fe:	6825      	ldr	r5, [r4, #0]
 8011800:	f015 0506 	ands.w	r5, r5, #6
 8011804:	d106      	bne.n	8011814 <_printf_common+0x48>
 8011806:	f104 0a19 	add.w	sl, r4, #25
 801180a:	68e3      	ldr	r3, [r4, #12]
 801180c:	6832      	ldr	r2, [r6, #0]
 801180e:	1a9b      	subs	r3, r3, r2
 8011810:	42ab      	cmp	r3, r5
 8011812:	dc26      	bgt.n	8011862 <_printf_common+0x96>
 8011814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011818:	1e13      	subs	r3, r2, #0
 801181a:	6822      	ldr	r2, [r4, #0]
 801181c:	bf18      	it	ne
 801181e:	2301      	movne	r3, #1
 8011820:	0692      	lsls	r2, r2, #26
 8011822:	d42b      	bmi.n	801187c <_printf_common+0xb0>
 8011824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011828:	4649      	mov	r1, r9
 801182a:	4638      	mov	r0, r7
 801182c:	47c0      	blx	r8
 801182e:	3001      	adds	r0, #1
 8011830:	d01e      	beq.n	8011870 <_printf_common+0xa4>
 8011832:	6823      	ldr	r3, [r4, #0]
 8011834:	68e5      	ldr	r5, [r4, #12]
 8011836:	6832      	ldr	r2, [r6, #0]
 8011838:	f003 0306 	and.w	r3, r3, #6
 801183c:	2b04      	cmp	r3, #4
 801183e:	bf08      	it	eq
 8011840:	1aad      	subeq	r5, r5, r2
 8011842:	68a3      	ldr	r3, [r4, #8]
 8011844:	6922      	ldr	r2, [r4, #16]
 8011846:	bf0c      	ite	eq
 8011848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801184c:	2500      	movne	r5, #0
 801184e:	4293      	cmp	r3, r2
 8011850:	bfc4      	itt	gt
 8011852:	1a9b      	subgt	r3, r3, r2
 8011854:	18ed      	addgt	r5, r5, r3
 8011856:	2600      	movs	r6, #0
 8011858:	341a      	adds	r4, #26
 801185a:	42b5      	cmp	r5, r6
 801185c:	d11a      	bne.n	8011894 <_printf_common+0xc8>
 801185e:	2000      	movs	r0, #0
 8011860:	e008      	b.n	8011874 <_printf_common+0xa8>
 8011862:	2301      	movs	r3, #1
 8011864:	4652      	mov	r2, sl
 8011866:	4649      	mov	r1, r9
 8011868:	4638      	mov	r0, r7
 801186a:	47c0      	blx	r8
 801186c:	3001      	adds	r0, #1
 801186e:	d103      	bne.n	8011878 <_printf_common+0xac>
 8011870:	f04f 30ff 	mov.w	r0, #4294967295
 8011874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011878:	3501      	adds	r5, #1
 801187a:	e7c6      	b.n	801180a <_printf_common+0x3e>
 801187c:	18e1      	adds	r1, r4, r3
 801187e:	1c5a      	adds	r2, r3, #1
 8011880:	2030      	movs	r0, #48	; 0x30
 8011882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011886:	4422      	add	r2, r4
 8011888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801188c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011890:	3302      	adds	r3, #2
 8011892:	e7c7      	b.n	8011824 <_printf_common+0x58>
 8011894:	2301      	movs	r3, #1
 8011896:	4622      	mov	r2, r4
 8011898:	4649      	mov	r1, r9
 801189a:	4638      	mov	r0, r7
 801189c:	47c0      	blx	r8
 801189e:	3001      	adds	r0, #1
 80118a0:	d0e6      	beq.n	8011870 <_printf_common+0xa4>
 80118a2:	3601      	adds	r6, #1
 80118a4:	e7d9      	b.n	801185a <_printf_common+0x8e>
	...

080118a8 <_printf_i>:
 80118a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80118ac:	460c      	mov	r4, r1
 80118ae:	4691      	mov	r9, r2
 80118b0:	7e27      	ldrb	r7, [r4, #24]
 80118b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80118b4:	2f78      	cmp	r7, #120	; 0x78
 80118b6:	4680      	mov	r8, r0
 80118b8:	469a      	mov	sl, r3
 80118ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80118be:	d807      	bhi.n	80118d0 <_printf_i+0x28>
 80118c0:	2f62      	cmp	r7, #98	; 0x62
 80118c2:	d80a      	bhi.n	80118da <_printf_i+0x32>
 80118c4:	2f00      	cmp	r7, #0
 80118c6:	f000 80d8 	beq.w	8011a7a <_printf_i+0x1d2>
 80118ca:	2f58      	cmp	r7, #88	; 0x58
 80118cc:	f000 80a3 	beq.w	8011a16 <_printf_i+0x16e>
 80118d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80118d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80118d8:	e03a      	b.n	8011950 <_printf_i+0xa8>
 80118da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80118de:	2b15      	cmp	r3, #21
 80118e0:	d8f6      	bhi.n	80118d0 <_printf_i+0x28>
 80118e2:	a001      	add	r0, pc, #4	; (adr r0, 80118e8 <_printf_i+0x40>)
 80118e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80118e8:	08011941 	.word	0x08011941
 80118ec:	08011955 	.word	0x08011955
 80118f0:	080118d1 	.word	0x080118d1
 80118f4:	080118d1 	.word	0x080118d1
 80118f8:	080118d1 	.word	0x080118d1
 80118fc:	080118d1 	.word	0x080118d1
 8011900:	08011955 	.word	0x08011955
 8011904:	080118d1 	.word	0x080118d1
 8011908:	080118d1 	.word	0x080118d1
 801190c:	080118d1 	.word	0x080118d1
 8011910:	080118d1 	.word	0x080118d1
 8011914:	08011a61 	.word	0x08011a61
 8011918:	08011985 	.word	0x08011985
 801191c:	08011a43 	.word	0x08011a43
 8011920:	080118d1 	.word	0x080118d1
 8011924:	080118d1 	.word	0x080118d1
 8011928:	08011a83 	.word	0x08011a83
 801192c:	080118d1 	.word	0x080118d1
 8011930:	08011985 	.word	0x08011985
 8011934:	080118d1 	.word	0x080118d1
 8011938:	080118d1 	.word	0x080118d1
 801193c:	08011a4b 	.word	0x08011a4b
 8011940:	680b      	ldr	r3, [r1, #0]
 8011942:	1d1a      	adds	r2, r3, #4
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	600a      	str	r2, [r1, #0]
 8011948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801194c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011950:	2301      	movs	r3, #1
 8011952:	e0a3      	b.n	8011a9c <_printf_i+0x1f4>
 8011954:	6825      	ldr	r5, [r4, #0]
 8011956:	6808      	ldr	r0, [r1, #0]
 8011958:	062e      	lsls	r6, r5, #24
 801195a:	f100 0304 	add.w	r3, r0, #4
 801195e:	d50a      	bpl.n	8011976 <_printf_i+0xce>
 8011960:	6805      	ldr	r5, [r0, #0]
 8011962:	600b      	str	r3, [r1, #0]
 8011964:	2d00      	cmp	r5, #0
 8011966:	da03      	bge.n	8011970 <_printf_i+0xc8>
 8011968:	232d      	movs	r3, #45	; 0x2d
 801196a:	426d      	negs	r5, r5
 801196c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011970:	485e      	ldr	r0, [pc, #376]	; (8011aec <_printf_i+0x244>)
 8011972:	230a      	movs	r3, #10
 8011974:	e019      	b.n	80119aa <_printf_i+0x102>
 8011976:	f015 0f40 	tst.w	r5, #64	; 0x40
 801197a:	6805      	ldr	r5, [r0, #0]
 801197c:	600b      	str	r3, [r1, #0]
 801197e:	bf18      	it	ne
 8011980:	b22d      	sxthne	r5, r5
 8011982:	e7ef      	b.n	8011964 <_printf_i+0xbc>
 8011984:	680b      	ldr	r3, [r1, #0]
 8011986:	6825      	ldr	r5, [r4, #0]
 8011988:	1d18      	adds	r0, r3, #4
 801198a:	6008      	str	r0, [r1, #0]
 801198c:	0628      	lsls	r0, r5, #24
 801198e:	d501      	bpl.n	8011994 <_printf_i+0xec>
 8011990:	681d      	ldr	r5, [r3, #0]
 8011992:	e002      	b.n	801199a <_printf_i+0xf2>
 8011994:	0669      	lsls	r1, r5, #25
 8011996:	d5fb      	bpl.n	8011990 <_printf_i+0xe8>
 8011998:	881d      	ldrh	r5, [r3, #0]
 801199a:	4854      	ldr	r0, [pc, #336]	; (8011aec <_printf_i+0x244>)
 801199c:	2f6f      	cmp	r7, #111	; 0x6f
 801199e:	bf0c      	ite	eq
 80119a0:	2308      	moveq	r3, #8
 80119a2:	230a      	movne	r3, #10
 80119a4:	2100      	movs	r1, #0
 80119a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80119aa:	6866      	ldr	r6, [r4, #4]
 80119ac:	60a6      	str	r6, [r4, #8]
 80119ae:	2e00      	cmp	r6, #0
 80119b0:	bfa2      	ittt	ge
 80119b2:	6821      	ldrge	r1, [r4, #0]
 80119b4:	f021 0104 	bicge.w	r1, r1, #4
 80119b8:	6021      	strge	r1, [r4, #0]
 80119ba:	b90d      	cbnz	r5, 80119c0 <_printf_i+0x118>
 80119bc:	2e00      	cmp	r6, #0
 80119be:	d04d      	beq.n	8011a5c <_printf_i+0x1b4>
 80119c0:	4616      	mov	r6, r2
 80119c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80119c6:	fb03 5711 	mls	r7, r3, r1, r5
 80119ca:	5dc7      	ldrb	r7, [r0, r7]
 80119cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80119d0:	462f      	mov	r7, r5
 80119d2:	42bb      	cmp	r3, r7
 80119d4:	460d      	mov	r5, r1
 80119d6:	d9f4      	bls.n	80119c2 <_printf_i+0x11a>
 80119d8:	2b08      	cmp	r3, #8
 80119da:	d10b      	bne.n	80119f4 <_printf_i+0x14c>
 80119dc:	6823      	ldr	r3, [r4, #0]
 80119de:	07df      	lsls	r7, r3, #31
 80119e0:	d508      	bpl.n	80119f4 <_printf_i+0x14c>
 80119e2:	6923      	ldr	r3, [r4, #16]
 80119e4:	6861      	ldr	r1, [r4, #4]
 80119e6:	4299      	cmp	r1, r3
 80119e8:	bfde      	ittt	le
 80119ea:	2330      	movle	r3, #48	; 0x30
 80119ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80119f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80119f4:	1b92      	subs	r2, r2, r6
 80119f6:	6122      	str	r2, [r4, #16]
 80119f8:	f8cd a000 	str.w	sl, [sp]
 80119fc:	464b      	mov	r3, r9
 80119fe:	aa03      	add	r2, sp, #12
 8011a00:	4621      	mov	r1, r4
 8011a02:	4640      	mov	r0, r8
 8011a04:	f7ff fee2 	bl	80117cc <_printf_common>
 8011a08:	3001      	adds	r0, #1
 8011a0a:	d14c      	bne.n	8011aa6 <_printf_i+0x1fe>
 8011a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a10:	b004      	add	sp, #16
 8011a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a16:	4835      	ldr	r0, [pc, #212]	; (8011aec <_printf_i+0x244>)
 8011a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011a1c:	6823      	ldr	r3, [r4, #0]
 8011a1e:	680e      	ldr	r6, [r1, #0]
 8011a20:	061f      	lsls	r7, r3, #24
 8011a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8011a26:	600e      	str	r6, [r1, #0]
 8011a28:	d514      	bpl.n	8011a54 <_printf_i+0x1ac>
 8011a2a:	07d9      	lsls	r1, r3, #31
 8011a2c:	bf44      	itt	mi
 8011a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8011a32:	6023      	strmi	r3, [r4, #0]
 8011a34:	b91d      	cbnz	r5, 8011a3e <_printf_i+0x196>
 8011a36:	6823      	ldr	r3, [r4, #0]
 8011a38:	f023 0320 	bic.w	r3, r3, #32
 8011a3c:	6023      	str	r3, [r4, #0]
 8011a3e:	2310      	movs	r3, #16
 8011a40:	e7b0      	b.n	80119a4 <_printf_i+0xfc>
 8011a42:	6823      	ldr	r3, [r4, #0]
 8011a44:	f043 0320 	orr.w	r3, r3, #32
 8011a48:	6023      	str	r3, [r4, #0]
 8011a4a:	2378      	movs	r3, #120	; 0x78
 8011a4c:	4828      	ldr	r0, [pc, #160]	; (8011af0 <_printf_i+0x248>)
 8011a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a52:	e7e3      	b.n	8011a1c <_printf_i+0x174>
 8011a54:	065e      	lsls	r6, r3, #25
 8011a56:	bf48      	it	mi
 8011a58:	b2ad      	uxthmi	r5, r5
 8011a5a:	e7e6      	b.n	8011a2a <_printf_i+0x182>
 8011a5c:	4616      	mov	r6, r2
 8011a5e:	e7bb      	b.n	80119d8 <_printf_i+0x130>
 8011a60:	680b      	ldr	r3, [r1, #0]
 8011a62:	6826      	ldr	r6, [r4, #0]
 8011a64:	6960      	ldr	r0, [r4, #20]
 8011a66:	1d1d      	adds	r5, r3, #4
 8011a68:	600d      	str	r5, [r1, #0]
 8011a6a:	0635      	lsls	r5, r6, #24
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	d501      	bpl.n	8011a74 <_printf_i+0x1cc>
 8011a70:	6018      	str	r0, [r3, #0]
 8011a72:	e002      	b.n	8011a7a <_printf_i+0x1d2>
 8011a74:	0671      	lsls	r1, r6, #25
 8011a76:	d5fb      	bpl.n	8011a70 <_printf_i+0x1c8>
 8011a78:	8018      	strh	r0, [r3, #0]
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	6123      	str	r3, [r4, #16]
 8011a7e:	4616      	mov	r6, r2
 8011a80:	e7ba      	b.n	80119f8 <_printf_i+0x150>
 8011a82:	680b      	ldr	r3, [r1, #0]
 8011a84:	1d1a      	adds	r2, r3, #4
 8011a86:	600a      	str	r2, [r1, #0]
 8011a88:	681e      	ldr	r6, [r3, #0]
 8011a8a:	6862      	ldr	r2, [r4, #4]
 8011a8c:	2100      	movs	r1, #0
 8011a8e:	4630      	mov	r0, r6
 8011a90:	f7ee fc2e 	bl	80002f0 <memchr>
 8011a94:	b108      	cbz	r0, 8011a9a <_printf_i+0x1f2>
 8011a96:	1b80      	subs	r0, r0, r6
 8011a98:	6060      	str	r0, [r4, #4]
 8011a9a:	6863      	ldr	r3, [r4, #4]
 8011a9c:	6123      	str	r3, [r4, #16]
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011aa4:	e7a8      	b.n	80119f8 <_printf_i+0x150>
 8011aa6:	6923      	ldr	r3, [r4, #16]
 8011aa8:	4632      	mov	r2, r6
 8011aaa:	4649      	mov	r1, r9
 8011aac:	4640      	mov	r0, r8
 8011aae:	47d0      	blx	sl
 8011ab0:	3001      	adds	r0, #1
 8011ab2:	d0ab      	beq.n	8011a0c <_printf_i+0x164>
 8011ab4:	6823      	ldr	r3, [r4, #0]
 8011ab6:	079b      	lsls	r3, r3, #30
 8011ab8:	d413      	bmi.n	8011ae2 <_printf_i+0x23a>
 8011aba:	68e0      	ldr	r0, [r4, #12]
 8011abc:	9b03      	ldr	r3, [sp, #12]
 8011abe:	4298      	cmp	r0, r3
 8011ac0:	bfb8      	it	lt
 8011ac2:	4618      	movlt	r0, r3
 8011ac4:	e7a4      	b.n	8011a10 <_printf_i+0x168>
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	4632      	mov	r2, r6
 8011aca:	4649      	mov	r1, r9
 8011acc:	4640      	mov	r0, r8
 8011ace:	47d0      	blx	sl
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	d09b      	beq.n	8011a0c <_printf_i+0x164>
 8011ad4:	3501      	adds	r5, #1
 8011ad6:	68e3      	ldr	r3, [r4, #12]
 8011ad8:	9903      	ldr	r1, [sp, #12]
 8011ada:	1a5b      	subs	r3, r3, r1
 8011adc:	42ab      	cmp	r3, r5
 8011ade:	dcf2      	bgt.n	8011ac6 <_printf_i+0x21e>
 8011ae0:	e7eb      	b.n	8011aba <_printf_i+0x212>
 8011ae2:	2500      	movs	r5, #0
 8011ae4:	f104 0619 	add.w	r6, r4, #25
 8011ae8:	e7f5      	b.n	8011ad6 <_printf_i+0x22e>
 8011aea:	bf00      	nop
 8011aec:	08014662 	.word	0x08014662
 8011af0:	08014673 	.word	0x08014673

08011af4 <iprintf>:
 8011af4:	b40f      	push	{r0, r1, r2, r3}
 8011af6:	4b0a      	ldr	r3, [pc, #40]	; (8011b20 <iprintf+0x2c>)
 8011af8:	b513      	push	{r0, r1, r4, lr}
 8011afa:	681c      	ldr	r4, [r3, #0]
 8011afc:	b124      	cbz	r4, 8011b08 <iprintf+0x14>
 8011afe:	69a3      	ldr	r3, [r4, #24]
 8011b00:	b913      	cbnz	r3, 8011b08 <iprintf+0x14>
 8011b02:	4620      	mov	r0, r4
 8011b04:	f001 f86c 	bl	8012be0 <__sinit>
 8011b08:	ab05      	add	r3, sp, #20
 8011b0a:	9a04      	ldr	r2, [sp, #16]
 8011b0c:	68a1      	ldr	r1, [r4, #8]
 8011b0e:	9301      	str	r3, [sp, #4]
 8011b10:	4620      	mov	r0, r4
 8011b12:	f001 fde7 	bl	80136e4 <_vfiprintf_r>
 8011b16:	b002      	add	sp, #8
 8011b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b1c:	b004      	add	sp, #16
 8011b1e:	4770      	bx	lr
 8011b20:	24000024 	.word	0x24000024

08011b24 <_puts_r>:
 8011b24:	b570      	push	{r4, r5, r6, lr}
 8011b26:	460e      	mov	r6, r1
 8011b28:	4605      	mov	r5, r0
 8011b2a:	b118      	cbz	r0, 8011b34 <_puts_r+0x10>
 8011b2c:	6983      	ldr	r3, [r0, #24]
 8011b2e:	b90b      	cbnz	r3, 8011b34 <_puts_r+0x10>
 8011b30:	f001 f856 	bl	8012be0 <__sinit>
 8011b34:	69ab      	ldr	r3, [r5, #24]
 8011b36:	68ac      	ldr	r4, [r5, #8]
 8011b38:	b913      	cbnz	r3, 8011b40 <_puts_r+0x1c>
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	f001 f850 	bl	8012be0 <__sinit>
 8011b40:	4b2c      	ldr	r3, [pc, #176]	; (8011bf4 <_puts_r+0xd0>)
 8011b42:	429c      	cmp	r4, r3
 8011b44:	d120      	bne.n	8011b88 <_puts_r+0x64>
 8011b46:	686c      	ldr	r4, [r5, #4]
 8011b48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b4a:	07db      	lsls	r3, r3, #31
 8011b4c:	d405      	bmi.n	8011b5a <_puts_r+0x36>
 8011b4e:	89a3      	ldrh	r3, [r4, #12]
 8011b50:	0598      	lsls	r0, r3, #22
 8011b52:	d402      	bmi.n	8011b5a <_puts_r+0x36>
 8011b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b56:	f001 f8e6 	bl	8012d26 <__retarget_lock_acquire_recursive>
 8011b5a:	89a3      	ldrh	r3, [r4, #12]
 8011b5c:	0719      	lsls	r1, r3, #28
 8011b5e:	d51d      	bpl.n	8011b9c <_puts_r+0x78>
 8011b60:	6923      	ldr	r3, [r4, #16]
 8011b62:	b1db      	cbz	r3, 8011b9c <_puts_r+0x78>
 8011b64:	3e01      	subs	r6, #1
 8011b66:	68a3      	ldr	r3, [r4, #8]
 8011b68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011b6c:	3b01      	subs	r3, #1
 8011b6e:	60a3      	str	r3, [r4, #8]
 8011b70:	bb39      	cbnz	r1, 8011bc2 <_puts_r+0x9e>
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	da38      	bge.n	8011be8 <_puts_r+0xc4>
 8011b76:	4622      	mov	r2, r4
 8011b78:	210a      	movs	r1, #10
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	f000 f848 	bl	8011c10 <__swbuf_r>
 8011b80:	3001      	adds	r0, #1
 8011b82:	d011      	beq.n	8011ba8 <_puts_r+0x84>
 8011b84:	250a      	movs	r5, #10
 8011b86:	e011      	b.n	8011bac <_puts_r+0x88>
 8011b88:	4b1b      	ldr	r3, [pc, #108]	; (8011bf8 <_puts_r+0xd4>)
 8011b8a:	429c      	cmp	r4, r3
 8011b8c:	d101      	bne.n	8011b92 <_puts_r+0x6e>
 8011b8e:	68ac      	ldr	r4, [r5, #8]
 8011b90:	e7da      	b.n	8011b48 <_puts_r+0x24>
 8011b92:	4b1a      	ldr	r3, [pc, #104]	; (8011bfc <_puts_r+0xd8>)
 8011b94:	429c      	cmp	r4, r3
 8011b96:	bf08      	it	eq
 8011b98:	68ec      	ldreq	r4, [r5, #12]
 8011b9a:	e7d5      	b.n	8011b48 <_puts_r+0x24>
 8011b9c:	4621      	mov	r1, r4
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	f000 f888 	bl	8011cb4 <__swsetup_r>
 8011ba4:	2800      	cmp	r0, #0
 8011ba6:	d0dd      	beq.n	8011b64 <_puts_r+0x40>
 8011ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8011bac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bae:	07da      	lsls	r2, r3, #31
 8011bb0:	d405      	bmi.n	8011bbe <_puts_r+0x9a>
 8011bb2:	89a3      	ldrh	r3, [r4, #12]
 8011bb4:	059b      	lsls	r3, r3, #22
 8011bb6:	d402      	bmi.n	8011bbe <_puts_r+0x9a>
 8011bb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bba:	f001 f8b5 	bl	8012d28 <__retarget_lock_release_recursive>
 8011bbe:	4628      	mov	r0, r5
 8011bc0:	bd70      	pop	{r4, r5, r6, pc}
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	da04      	bge.n	8011bd0 <_puts_r+0xac>
 8011bc6:	69a2      	ldr	r2, [r4, #24]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	dc06      	bgt.n	8011bda <_puts_r+0xb6>
 8011bcc:	290a      	cmp	r1, #10
 8011bce:	d004      	beq.n	8011bda <_puts_r+0xb6>
 8011bd0:	6823      	ldr	r3, [r4, #0]
 8011bd2:	1c5a      	adds	r2, r3, #1
 8011bd4:	6022      	str	r2, [r4, #0]
 8011bd6:	7019      	strb	r1, [r3, #0]
 8011bd8:	e7c5      	b.n	8011b66 <_puts_r+0x42>
 8011bda:	4622      	mov	r2, r4
 8011bdc:	4628      	mov	r0, r5
 8011bde:	f000 f817 	bl	8011c10 <__swbuf_r>
 8011be2:	3001      	adds	r0, #1
 8011be4:	d1bf      	bne.n	8011b66 <_puts_r+0x42>
 8011be6:	e7df      	b.n	8011ba8 <_puts_r+0x84>
 8011be8:	6823      	ldr	r3, [r4, #0]
 8011bea:	250a      	movs	r5, #10
 8011bec:	1c5a      	adds	r2, r3, #1
 8011bee:	6022      	str	r2, [r4, #0]
 8011bf0:	701d      	strb	r5, [r3, #0]
 8011bf2:	e7db      	b.n	8011bac <_puts_r+0x88>
 8011bf4:	08014738 	.word	0x08014738
 8011bf8:	08014758 	.word	0x08014758
 8011bfc:	08014718 	.word	0x08014718

08011c00 <puts>:
 8011c00:	4b02      	ldr	r3, [pc, #8]	; (8011c0c <puts+0xc>)
 8011c02:	4601      	mov	r1, r0
 8011c04:	6818      	ldr	r0, [r3, #0]
 8011c06:	f7ff bf8d 	b.w	8011b24 <_puts_r>
 8011c0a:	bf00      	nop
 8011c0c:	24000024 	.word	0x24000024

08011c10 <__swbuf_r>:
 8011c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c12:	460e      	mov	r6, r1
 8011c14:	4614      	mov	r4, r2
 8011c16:	4605      	mov	r5, r0
 8011c18:	b118      	cbz	r0, 8011c22 <__swbuf_r+0x12>
 8011c1a:	6983      	ldr	r3, [r0, #24]
 8011c1c:	b90b      	cbnz	r3, 8011c22 <__swbuf_r+0x12>
 8011c1e:	f000 ffdf 	bl	8012be0 <__sinit>
 8011c22:	4b21      	ldr	r3, [pc, #132]	; (8011ca8 <__swbuf_r+0x98>)
 8011c24:	429c      	cmp	r4, r3
 8011c26:	d12b      	bne.n	8011c80 <__swbuf_r+0x70>
 8011c28:	686c      	ldr	r4, [r5, #4]
 8011c2a:	69a3      	ldr	r3, [r4, #24]
 8011c2c:	60a3      	str	r3, [r4, #8]
 8011c2e:	89a3      	ldrh	r3, [r4, #12]
 8011c30:	071a      	lsls	r2, r3, #28
 8011c32:	d52f      	bpl.n	8011c94 <__swbuf_r+0x84>
 8011c34:	6923      	ldr	r3, [r4, #16]
 8011c36:	b36b      	cbz	r3, 8011c94 <__swbuf_r+0x84>
 8011c38:	6923      	ldr	r3, [r4, #16]
 8011c3a:	6820      	ldr	r0, [r4, #0]
 8011c3c:	1ac0      	subs	r0, r0, r3
 8011c3e:	6963      	ldr	r3, [r4, #20]
 8011c40:	b2f6      	uxtb	r6, r6
 8011c42:	4283      	cmp	r3, r0
 8011c44:	4637      	mov	r7, r6
 8011c46:	dc04      	bgt.n	8011c52 <__swbuf_r+0x42>
 8011c48:	4621      	mov	r1, r4
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	f000 ff34 	bl	8012ab8 <_fflush_r>
 8011c50:	bb30      	cbnz	r0, 8011ca0 <__swbuf_r+0x90>
 8011c52:	68a3      	ldr	r3, [r4, #8]
 8011c54:	3b01      	subs	r3, #1
 8011c56:	60a3      	str	r3, [r4, #8]
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	1c5a      	adds	r2, r3, #1
 8011c5c:	6022      	str	r2, [r4, #0]
 8011c5e:	701e      	strb	r6, [r3, #0]
 8011c60:	6963      	ldr	r3, [r4, #20]
 8011c62:	3001      	adds	r0, #1
 8011c64:	4283      	cmp	r3, r0
 8011c66:	d004      	beq.n	8011c72 <__swbuf_r+0x62>
 8011c68:	89a3      	ldrh	r3, [r4, #12]
 8011c6a:	07db      	lsls	r3, r3, #31
 8011c6c:	d506      	bpl.n	8011c7c <__swbuf_r+0x6c>
 8011c6e:	2e0a      	cmp	r6, #10
 8011c70:	d104      	bne.n	8011c7c <__swbuf_r+0x6c>
 8011c72:	4621      	mov	r1, r4
 8011c74:	4628      	mov	r0, r5
 8011c76:	f000 ff1f 	bl	8012ab8 <_fflush_r>
 8011c7a:	b988      	cbnz	r0, 8011ca0 <__swbuf_r+0x90>
 8011c7c:	4638      	mov	r0, r7
 8011c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011c80:	4b0a      	ldr	r3, [pc, #40]	; (8011cac <__swbuf_r+0x9c>)
 8011c82:	429c      	cmp	r4, r3
 8011c84:	d101      	bne.n	8011c8a <__swbuf_r+0x7a>
 8011c86:	68ac      	ldr	r4, [r5, #8]
 8011c88:	e7cf      	b.n	8011c2a <__swbuf_r+0x1a>
 8011c8a:	4b09      	ldr	r3, [pc, #36]	; (8011cb0 <__swbuf_r+0xa0>)
 8011c8c:	429c      	cmp	r4, r3
 8011c8e:	bf08      	it	eq
 8011c90:	68ec      	ldreq	r4, [r5, #12]
 8011c92:	e7ca      	b.n	8011c2a <__swbuf_r+0x1a>
 8011c94:	4621      	mov	r1, r4
 8011c96:	4628      	mov	r0, r5
 8011c98:	f000 f80c 	bl	8011cb4 <__swsetup_r>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d0cb      	beq.n	8011c38 <__swbuf_r+0x28>
 8011ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8011ca4:	e7ea      	b.n	8011c7c <__swbuf_r+0x6c>
 8011ca6:	bf00      	nop
 8011ca8:	08014738 	.word	0x08014738
 8011cac:	08014758 	.word	0x08014758
 8011cb0:	08014718 	.word	0x08014718

08011cb4 <__swsetup_r>:
 8011cb4:	4b32      	ldr	r3, [pc, #200]	; (8011d80 <__swsetup_r+0xcc>)
 8011cb6:	b570      	push	{r4, r5, r6, lr}
 8011cb8:	681d      	ldr	r5, [r3, #0]
 8011cba:	4606      	mov	r6, r0
 8011cbc:	460c      	mov	r4, r1
 8011cbe:	b125      	cbz	r5, 8011cca <__swsetup_r+0x16>
 8011cc0:	69ab      	ldr	r3, [r5, #24]
 8011cc2:	b913      	cbnz	r3, 8011cca <__swsetup_r+0x16>
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f000 ff8b 	bl	8012be0 <__sinit>
 8011cca:	4b2e      	ldr	r3, [pc, #184]	; (8011d84 <__swsetup_r+0xd0>)
 8011ccc:	429c      	cmp	r4, r3
 8011cce:	d10f      	bne.n	8011cf0 <__swsetup_r+0x3c>
 8011cd0:	686c      	ldr	r4, [r5, #4]
 8011cd2:	89a3      	ldrh	r3, [r4, #12]
 8011cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011cd8:	0719      	lsls	r1, r3, #28
 8011cda:	d42c      	bmi.n	8011d36 <__swsetup_r+0x82>
 8011cdc:	06dd      	lsls	r5, r3, #27
 8011cde:	d411      	bmi.n	8011d04 <__swsetup_r+0x50>
 8011ce0:	2309      	movs	r3, #9
 8011ce2:	6033      	str	r3, [r6, #0]
 8011ce4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011ce8:	81a3      	strh	r3, [r4, #12]
 8011cea:	f04f 30ff 	mov.w	r0, #4294967295
 8011cee:	e03e      	b.n	8011d6e <__swsetup_r+0xba>
 8011cf0:	4b25      	ldr	r3, [pc, #148]	; (8011d88 <__swsetup_r+0xd4>)
 8011cf2:	429c      	cmp	r4, r3
 8011cf4:	d101      	bne.n	8011cfa <__swsetup_r+0x46>
 8011cf6:	68ac      	ldr	r4, [r5, #8]
 8011cf8:	e7eb      	b.n	8011cd2 <__swsetup_r+0x1e>
 8011cfa:	4b24      	ldr	r3, [pc, #144]	; (8011d8c <__swsetup_r+0xd8>)
 8011cfc:	429c      	cmp	r4, r3
 8011cfe:	bf08      	it	eq
 8011d00:	68ec      	ldreq	r4, [r5, #12]
 8011d02:	e7e6      	b.n	8011cd2 <__swsetup_r+0x1e>
 8011d04:	0758      	lsls	r0, r3, #29
 8011d06:	d512      	bpl.n	8011d2e <__swsetup_r+0x7a>
 8011d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d0a:	b141      	cbz	r1, 8011d1e <__swsetup_r+0x6a>
 8011d0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d10:	4299      	cmp	r1, r3
 8011d12:	d002      	beq.n	8011d1a <__swsetup_r+0x66>
 8011d14:	4630      	mov	r0, r6
 8011d16:	f001 fc11 	bl	801353c <_free_r>
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	6363      	str	r3, [r4, #52]	; 0x34
 8011d1e:	89a3      	ldrh	r3, [r4, #12]
 8011d20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d24:	81a3      	strh	r3, [r4, #12]
 8011d26:	2300      	movs	r3, #0
 8011d28:	6063      	str	r3, [r4, #4]
 8011d2a:	6923      	ldr	r3, [r4, #16]
 8011d2c:	6023      	str	r3, [r4, #0]
 8011d2e:	89a3      	ldrh	r3, [r4, #12]
 8011d30:	f043 0308 	orr.w	r3, r3, #8
 8011d34:	81a3      	strh	r3, [r4, #12]
 8011d36:	6923      	ldr	r3, [r4, #16]
 8011d38:	b94b      	cbnz	r3, 8011d4e <__swsetup_r+0x9a>
 8011d3a:	89a3      	ldrh	r3, [r4, #12]
 8011d3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d44:	d003      	beq.n	8011d4e <__swsetup_r+0x9a>
 8011d46:	4621      	mov	r1, r4
 8011d48:	4630      	mov	r0, r6
 8011d4a:	f001 f813 	bl	8012d74 <__smakebuf_r>
 8011d4e:	89a0      	ldrh	r0, [r4, #12]
 8011d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011d54:	f010 0301 	ands.w	r3, r0, #1
 8011d58:	d00a      	beq.n	8011d70 <__swsetup_r+0xbc>
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	60a3      	str	r3, [r4, #8]
 8011d5e:	6963      	ldr	r3, [r4, #20]
 8011d60:	425b      	negs	r3, r3
 8011d62:	61a3      	str	r3, [r4, #24]
 8011d64:	6923      	ldr	r3, [r4, #16]
 8011d66:	b943      	cbnz	r3, 8011d7a <__swsetup_r+0xc6>
 8011d68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011d6c:	d1ba      	bne.n	8011ce4 <__swsetup_r+0x30>
 8011d6e:	bd70      	pop	{r4, r5, r6, pc}
 8011d70:	0781      	lsls	r1, r0, #30
 8011d72:	bf58      	it	pl
 8011d74:	6963      	ldrpl	r3, [r4, #20]
 8011d76:	60a3      	str	r3, [r4, #8]
 8011d78:	e7f4      	b.n	8011d64 <__swsetup_r+0xb0>
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	e7f7      	b.n	8011d6e <__swsetup_r+0xba>
 8011d7e:	bf00      	nop
 8011d80:	24000024 	.word	0x24000024
 8011d84:	08014738 	.word	0x08014738
 8011d88:	08014758 	.word	0x08014758
 8011d8c:	08014718 	.word	0x08014718

08011d90 <quorem>:
 8011d90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d94:	6903      	ldr	r3, [r0, #16]
 8011d96:	690c      	ldr	r4, [r1, #16]
 8011d98:	42a3      	cmp	r3, r4
 8011d9a:	4607      	mov	r7, r0
 8011d9c:	f2c0 8081 	blt.w	8011ea2 <quorem+0x112>
 8011da0:	3c01      	subs	r4, #1
 8011da2:	f101 0814 	add.w	r8, r1, #20
 8011da6:	f100 0514 	add.w	r5, r0, #20
 8011daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011dae:	9301      	str	r3, [sp, #4]
 8011db0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011db4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011db8:	3301      	adds	r3, #1
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011dc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011dc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8011dc8:	d331      	bcc.n	8011e2e <quorem+0x9e>
 8011dca:	f04f 0e00 	mov.w	lr, #0
 8011dce:	4640      	mov	r0, r8
 8011dd0:	46ac      	mov	ip, r5
 8011dd2:	46f2      	mov	sl, lr
 8011dd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8011dd8:	b293      	uxth	r3, r2
 8011dda:	fb06 e303 	mla	r3, r6, r3, lr
 8011dde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011de2:	b29b      	uxth	r3, r3
 8011de4:	ebaa 0303 	sub.w	r3, sl, r3
 8011de8:	0c12      	lsrs	r2, r2, #16
 8011dea:	f8dc a000 	ldr.w	sl, [ip]
 8011dee:	fb06 e202 	mla	r2, r6, r2, lr
 8011df2:	fa13 f38a 	uxtah	r3, r3, sl
 8011df6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011dfa:	fa1f fa82 	uxth.w	sl, r2
 8011dfe:	f8dc 2000 	ldr.w	r2, [ip]
 8011e02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011e06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e0a:	b29b      	uxth	r3, r3
 8011e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e10:	4581      	cmp	r9, r0
 8011e12:	f84c 3b04 	str.w	r3, [ip], #4
 8011e16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011e1a:	d2db      	bcs.n	8011dd4 <quorem+0x44>
 8011e1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011e20:	b92b      	cbnz	r3, 8011e2e <quorem+0x9e>
 8011e22:	9b01      	ldr	r3, [sp, #4]
 8011e24:	3b04      	subs	r3, #4
 8011e26:	429d      	cmp	r5, r3
 8011e28:	461a      	mov	r2, r3
 8011e2a:	d32e      	bcc.n	8011e8a <quorem+0xfa>
 8011e2c:	613c      	str	r4, [r7, #16]
 8011e2e:	4638      	mov	r0, r7
 8011e30:	f001 fa74 	bl	801331c <__mcmp>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	db24      	blt.n	8011e82 <quorem+0xf2>
 8011e38:	3601      	adds	r6, #1
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	f04f 0c00 	mov.w	ip, #0
 8011e40:	f858 2b04 	ldr.w	r2, [r8], #4
 8011e44:	f8d0 e000 	ldr.w	lr, [r0]
 8011e48:	b293      	uxth	r3, r2
 8011e4a:	ebac 0303 	sub.w	r3, ip, r3
 8011e4e:	0c12      	lsrs	r2, r2, #16
 8011e50:	fa13 f38e 	uxtah	r3, r3, lr
 8011e54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011e58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e62:	45c1      	cmp	r9, r8
 8011e64:	f840 3b04 	str.w	r3, [r0], #4
 8011e68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011e6c:	d2e8      	bcs.n	8011e40 <quorem+0xb0>
 8011e6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e76:	b922      	cbnz	r2, 8011e82 <quorem+0xf2>
 8011e78:	3b04      	subs	r3, #4
 8011e7a:	429d      	cmp	r5, r3
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	d30a      	bcc.n	8011e96 <quorem+0x106>
 8011e80:	613c      	str	r4, [r7, #16]
 8011e82:	4630      	mov	r0, r6
 8011e84:	b003      	add	sp, #12
 8011e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e8a:	6812      	ldr	r2, [r2, #0]
 8011e8c:	3b04      	subs	r3, #4
 8011e8e:	2a00      	cmp	r2, #0
 8011e90:	d1cc      	bne.n	8011e2c <quorem+0x9c>
 8011e92:	3c01      	subs	r4, #1
 8011e94:	e7c7      	b.n	8011e26 <quorem+0x96>
 8011e96:	6812      	ldr	r2, [r2, #0]
 8011e98:	3b04      	subs	r3, #4
 8011e9a:	2a00      	cmp	r2, #0
 8011e9c:	d1f0      	bne.n	8011e80 <quorem+0xf0>
 8011e9e:	3c01      	subs	r4, #1
 8011ea0:	e7eb      	b.n	8011e7a <quorem+0xea>
 8011ea2:	2000      	movs	r0, #0
 8011ea4:	e7ee      	b.n	8011e84 <quorem+0xf4>
	...

08011ea8 <_dtoa_r>:
 8011ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011eac:	ec59 8b10 	vmov	r8, r9, d0
 8011eb0:	b095      	sub	sp, #84	; 0x54
 8011eb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011eb4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8011eb6:	9107      	str	r1, [sp, #28]
 8011eb8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8011ebc:	4606      	mov	r6, r0
 8011ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8011ec0:	9310      	str	r3, [sp, #64]	; 0x40
 8011ec2:	b975      	cbnz	r5, 8011ee2 <_dtoa_r+0x3a>
 8011ec4:	2010      	movs	r0, #16
 8011ec6:	f000 ff95 	bl	8012df4 <malloc>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	6270      	str	r0, [r6, #36]	; 0x24
 8011ece:	b920      	cbnz	r0, 8011eda <_dtoa_r+0x32>
 8011ed0:	4bab      	ldr	r3, [pc, #684]	; (8012180 <_dtoa_r+0x2d8>)
 8011ed2:	21ea      	movs	r1, #234	; 0xea
 8011ed4:	48ab      	ldr	r0, [pc, #684]	; (8012184 <_dtoa_r+0x2dc>)
 8011ed6:	f001 fd9b 	bl	8013a10 <__assert_func>
 8011eda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011ede:	6005      	str	r5, [r0, #0]
 8011ee0:	60c5      	str	r5, [r0, #12]
 8011ee2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011ee4:	6819      	ldr	r1, [r3, #0]
 8011ee6:	b151      	cbz	r1, 8011efe <_dtoa_r+0x56>
 8011ee8:	685a      	ldr	r2, [r3, #4]
 8011eea:	604a      	str	r2, [r1, #4]
 8011eec:	2301      	movs	r3, #1
 8011eee:	4093      	lsls	r3, r2
 8011ef0:	608b      	str	r3, [r1, #8]
 8011ef2:	4630      	mov	r0, r6
 8011ef4:	f000 ffd4 	bl	8012ea0 <_Bfree>
 8011ef8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011efa:	2200      	movs	r2, #0
 8011efc:	601a      	str	r2, [r3, #0]
 8011efe:	f1b9 0300 	subs.w	r3, r9, #0
 8011f02:	bfbb      	ittet	lt
 8011f04:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011f08:	9303      	strlt	r3, [sp, #12]
 8011f0a:	2300      	movge	r3, #0
 8011f0c:	2201      	movlt	r2, #1
 8011f0e:	bfac      	ite	ge
 8011f10:	6023      	strge	r3, [r4, #0]
 8011f12:	6022      	strlt	r2, [r4, #0]
 8011f14:	4b9c      	ldr	r3, [pc, #624]	; (8012188 <_dtoa_r+0x2e0>)
 8011f16:	9c03      	ldr	r4, [sp, #12]
 8011f18:	43a3      	bics	r3, r4
 8011f1a:	d11a      	bne.n	8011f52 <_dtoa_r+0xaa>
 8011f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f22:	6013      	str	r3, [r2, #0]
 8011f24:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8011f28:	ea53 0308 	orrs.w	r3, r3, r8
 8011f2c:	f000 8512 	beq.w	8012954 <_dtoa_r+0xaac>
 8011f30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f32:	b953      	cbnz	r3, 8011f4a <_dtoa_r+0xa2>
 8011f34:	4b95      	ldr	r3, [pc, #596]	; (801218c <_dtoa_r+0x2e4>)
 8011f36:	e01f      	b.n	8011f78 <_dtoa_r+0xd0>
 8011f38:	4b95      	ldr	r3, [pc, #596]	; (8012190 <_dtoa_r+0x2e8>)
 8011f3a:	9300      	str	r3, [sp, #0]
 8011f3c:	3308      	adds	r3, #8
 8011f3e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011f40:	6013      	str	r3, [r2, #0]
 8011f42:	9800      	ldr	r0, [sp, #0]
 8011f44:	b015      	add	sp, #84	; 0x54
 8011f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4a:	4b90      	ldr	r3, [pc, #576]	; (801218c <_dtoa_r+0x2e4>)
 8011f4c:	9300      	str	r3, [sp, #0]
 8011f4e:	3303      	adds	r3, #3
 8011f50:	e7f5      	b.n	8011f3e <_dtoa_r+0x96>
 8011f52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011f56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f5e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011f62:	d10b      	bne.n	8011f7c <_dtoa_r+0xd4>
 8011f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f66:	2301      	movs	r3, #1
 8011f68:	6013      	str	r3, [r2, #0]
 8011f6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	f000 84ee 	beq.w	801294e <_dtoa_r+0xaa6>
 8011f72:	4888      	ldr	r0, [pc, #544]	; (8012194 <_dtoa_r+0x2ec>)
 8011f74:	6018      	str	r0, [r3, #0]
 8011f76:	1e43      	subs	r3, r0, #1
 8011f78:	9300      	str	r3, [sp, #0]
 8011f7a:	e7e2      	b.n	8011f42 <_dtoa_r+0x9a>
 8011f7c:	a913      	add	r1, sp, #76	; 0x4c
 8011f7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011f82:	aa12      	add	r2, sp, #72	; 0x48
 8011f84:	4630      	mov	r0, r6
 8011f86:	f001 fa6d 	bl	8013464 <__d2b>
 8011f8a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8011f8e:	4605      	mov	r5, r0
 8011f90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011f92:	2900      	cmp	r1, #0
 8011f94:	d047      	beq.n	8012026 <_dtoa_r+0x17e>
 8011f96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8011f98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011fa0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8011fa4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011fa8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011fac:	2400      	movs	r4, #0
 8011fae:	ec43 2b16 	vmov	d6, r2, r3
 8011fb2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8011fb6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8012168 <_dtoa_r+0x2c0>
 8011fba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011fbe:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8012170 <_dtoa_r+0x2c8>
 8011fc2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011fc6:	eeb0 7b46 	vmov.f64	d7, d6
 8011fca:	ee06 1a90 	vmov	s13, r1
 8011fce:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8011fd2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8012178 <_dtoa_r+0x2d0>
 8011fd6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011fda:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011fde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe6:	ee16 ba90 	vmov	fp, s13
 8011fea:	9411      	str	r4, [sp, #68]	; 0x44
 8011fec:	d508      	bpl.n	8012000 <_dtoa_r+0x158>
 8011fee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011ff2:	eeb4 6b47 	vcmp.f64	d6, d7
 8011ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ffa:	bf18      	it	ne
 8011ffc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012000:	f1bb 0f16 	cmp.w	fp, #22
 8012004:	d832      	bhi.n	801206c <_dtoa_r+0x1c4>
 8012006:	4b64      	ldr	r3, [pc, #400]	; (8012198 <_dtoa_r+0x2f0>)
 8012008:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801200c:	ed93 7b00 	vldr	d7, [r3]
 8012010:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012014:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801201c:	d501      	bpl.n	8012022 <_dtoa_r+0x17a>
 801201e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012022:	2300      	movs	r3, #0
 8012024:	e023      	b.n	801206e <_dtoa_r+0x1c6>
 8012026:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012028:	4401      	add	r1, r0
 801202a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801202e:	2b20      	cmp	r3, #32
 8012030:	bfc3      	ittte	gt
 8012032:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012036:	fa04 f303 	lslgt.w	r3, r4, r3
 801203a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801203e:	f1c3 0320 	rsble	r3, r3, #32
 8012042:	bfc6      	itte	gt
 8012044:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012048:	ea43 0308 	orrgt.w	r3, r3, r8
 801204c:	fa08 f303 	lslle.w	r3, r8, r3
 8012050:	ee07 3a90 	vmov	s15, r3
 8012054:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012058:	3901      	subs	r1, #1
 801205a:	ed8d 7b00 	vstr	d7, [sp]
 801205e:	9c01      	ldr	r4, [sp, #4]
 8012060:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012064:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012068:	2401      	movs	r4, #1
 801206a:	e7a0      	b.n	8011fae <_dtoa_r+0x106>
 801206c:	2301      	movs	r3, #1
 801206e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012070:	1a43      	subs	r3, r0, r1
 8012072:	1e5a      	subs	r2, r3, #1
 8012074:	bf45      	ittet	mi
 8012076:	f1c3 0301 	rsbmi	r3, r3, #1
 801207a:	9305      	strmi	r3, [sp, #20]
 801207c:	2300      	movpl	r3, #0
 801207e:	2300      	movmi	r3, #0
 8012080:	9206      	str	r2, [sp, #24]
 8012082:	bf54      	ite	pl
 8012084:	9305      	strpl	r3, [sp, #20]
 8012086:	9306      	strmi	r3, [sp, #24]
 8012088:	f1bb 0f00 	cmp.w	fp, #0
 801208c:	db18      	blt.n	80120c0 <_dtoa_r+0x218>
 801208e:	9b06      	ldr	r3, [sp, #24]
 8012090:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8012094:	445b      	add	r3, fp
 8012096:	9306      	str	r3, [sp, #24]
 8012098:	2300      	movs	r3, #0
 801209a:	9a07      	ldr	r2, [sp, #28]
 801209c:	2a09      	cmp	r2, #9
 801209e:	d849      	bhi.n	8012134 <_dtoa_r+0x28c>
 80120a0:	2a05      	cmp	r2, #5
 80120a2:	bfc4      	itt	gt
 80120a4:	3a04      	subgt	r2, #4
 80120a6:	9207      	strgt	r2, [sp, #28]
 80120a8:	9a07      	ldr	r2, [sp, #28]
 80120aa:	f1a2 0202 	sub.w	r2, r2, #2
 80120ae:	bfcc      	ite	gt
 80120b0:	2400      	movgt	r4, #0
 80120b2:	2401      	movle	r4, #1
 80120b4:	2a03      	cmp	r2, #3
 80120b6:	d848      	bhi.n	801214a <_dtoa_r+0x2a2>
 80120b8:	e8df f002 	tbb	[pc, r2]
 80120bc:	3a2c2e0b 	.word	0x3a2c2e0b
 80120c0:	9b05      	ldr	r3, [sp, #20]
 80120c2:	2200      	movs	r2, #0
 80120c4:	eba3 030b 	sub.w	r3, r3, fp
 80120c8:	9305      	str	r3, [sp, #20]
 80120ca:	920e      	str	r2, [sp, #56]	; 0x38
 80120cc:	f1cb 0300 	rsb	r3, fp, #0
 80120d0:	e7e3      	b.n	801209a <_dtoa_r+0x1f2>
 80120d2:	2200      	movs	r2, #0
 80120d4:	9208      	str	r2, [sp, #32]
 80120d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120d8:	2a00      	cmp	r2, #0
 80120da:	dc39      	bgt.n	8012150 <_dtoa_r+0x2a8>
 80120dc:	f04f 0a01 	mov.w	sl, #1
 80120e0:	46d1      	mov	r9, sl
 80120e2:	4652      	mov	r2, sl
 80120e4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80120e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80120ea:	2100      	movs	r1, #0
 80120ec:	6079      	str	r1, [r7, #4]
 80120ee:	2004      	movs	r0, #4
 80120f0:	f100 0c14 	add.w	ip, r0, #20
 80120f4:	4594      	cmp	ip, r2
 80120f6:	6879      	ldr	r1, [r7, #4]
 80120f8:	d92f      	bls.n	801215a <_dtoa_r+0x2b2>
 80120fa:	4630      	mov	r0, r6
 80120fc:	930c      	str	r3, [sp, #48]	; 0x30
 80120fe:	f000 fe8f 	bl	8012e20 <_Balloc>
 8012102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012104:	9000      	str	r0, [sp, #0]
 8012106:	4602      	mov	r2, r0
 8012108:	2800      	cmp	r0, #0
 801210a:	d149      	bne.n	80121a0 <_dtoa_r+0x2f8>
 801210c:	4b23      	ldr	r3, [pc, #140]	; (801219c <_dtoa_r+0x2f4>)
 801210e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012112:	e6df      	b.n	8011ed4 <_dtoa_r+0x2c>
 8012114:	2201      	movs	r2, #1
 8012116:	e7dd      	b.n	80120d4 <_dtoa_r+0x22c>
 8012118:	2200      	movs	r2, #0
 801211a:	9208      	str	r2, [sp, #32]
 801211c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801211e:	eb0b 0a02 	add.w	sl, fp, r2
 8012122:	f10a 0901 	add.w	r9, sl, #1
 8012126:	464a      	mov	r2, r9
 8012128:	2a01      	cmp	r2, #1
 801212a:	bfb8      	it	lt
 801212c:	2201      	movlt	r2, #1
 801212e:	e7db      	b.n	80120e8 <_dtoa_r+0x240>
 8012130:	2201      	movs	r2, #1
 8012132:	e7f2      	b.n	801211a <_dtoa_r+0x272>
 8012134:	2401      	movs	r4, #1
 8012136:	2200      	movs	r2, #0
 8012138:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801213c:	f04f 3aff 	mov.w	sl, #4294967295
 8012140:	2100      	movs	r1, #0
 8012142:	46d1      	mov	r9, sl
 8012144:	2212      	movs	r2, #18
 8012146:	9109      	str	r1, [sp, #36]	; 0x24
 8012148:	e7ce      	b.n	80120e8 <_dtoa_r+0x240>
 801214a:	2201      	movs	r2, #1
 801214c:	9208      	str	r2, [sp, #32]
 801214e:	e7f5      	b.n	801213c <_dtoa_r+0x294>
 8012150:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8012154:	46d1      	mov	r9, sl
 8012156:	4652      	mov	r2, sl
 8012158:	e7c6      	b.n	80120e8 <_dtoa_r+0x240>
 801215a:	3101      	adds	r1, #1
 801215c:	6079      	str	r1, [r7, #4]
 801215e:	0040      	lsls	r0, r0, #1
 8012160:	e7c6      	b.n	80120f0 <_dtoa_r+0x248>
 8012162:	bf00      	nop
 8012164:	f3af 8000 	nop.w
 8012168:	636f4361 	.word	0x636f4361
 801216c:	3fd287a7 	.word	0x3fd287a7
 8012170:	8b60c8b3 	.word	0x8b60c8b3
 8012174:	3fc68a28 	.word	0x3fc68a28
 8012178:	509f79fb 	.word	0x509f79fb
 801217c:	3fd34413 	.word	0x3fd34413
 8012180:	08014691 	.word	0x08014691
 8012184:	080146a8 	.word	0x080146a8
 8012188:	7ff00000 	.word	0x7ff00000
 801218c:	0801468d 	.word	0x0801468d
 8012190:	08014684 	.word	0x08014684
 8012194:	08014661 	.word	0x08014661
 8012198:	08014800 	.word	0x08014800
 801219c:	08014707 	.word	0x08014707
 80121a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80121a2:	9900      	ldr	r1, [sp, #0]
 80121a4:	6011      	str	r1, [r2, #0]
 80121a6:	f1b9 0f0e 	cmp.w	r9, #14
 80121aa:	d872      	bhi.n	8012292 <_dtoa_r+0x3ea>
 80121ac:	2c00      	cmp	r4, #0
 80121ae:	d070      	beq.n	8012292 <_dtoa_r+0x3ea>
 80121b0:	f1bb 0f00 	cmp.w	fp, #0
 80121b4:	f340 80a6 	ble.w	8012304 <_dtoa_r+0x45c>
 80121b8:	49ca      	ldr	r1, [pc, #808]	; (80124e4 <_dtoa_r+0x63c>)
 80121ba:	f00b 020f 	and.w	r2, fp, #15
 80121be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80121c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80121c6:	ed92 7b00 	vldr	d7, [r2]
 80121ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 80121ce:	f000 808d 	beq.w	80122ec <_dtoa_r+0x444>
 80121d2:	4ac5      	ldr	r2, [pc, #788]	; (80124e8 <_dtoa_r+0x640>)
 80121d4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80121d8:	ed92 6b08 	vldr	d6, [r2, #32]
 80121dc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80121e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80121e4:	f001 010f 	and.w	r1, r1, #15
 80121e8:	2203      	movs	r2, #3
 80121ea:	48bf      	ldr	r0, [pc, #764]	; (80124e8 <_dtoa_r+0x640>)
 80121ec:	2900      	cmp	r1, #0
 80121ee:	d17f      	bne.n	80122f0 <_dtoa_r+0x448>
 80121f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80121f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80121f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80121fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80121fe:	2900      	cmp	r1, #0
 8012200:	f000 80b2 	beq.w	8012368 <_dtoa_r+0x4c0>
 8012204:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012208:	ed9d 7b02 	vldr	d7, [sp, #8]
 801220c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012214:	f140 80a8 	bpl.w	8012368 <_dtoa_r+0x4c0>
 8012218:	f1b9 0f00 	cmp.w	r9, #0
 801221c:	f000 80a4 	beq.w	8012368 <_dtoa_r+0x4c0>
 8012220:	f1ba 0f00 	cmp.w	sl, #0
 8012224:	dd31      	ble.n	801228a <_dtoa_r+0x3e2>
 8012226:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801222a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801222e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012232:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012236:	3201      	adds	r2, #1
 8012238:	4650      	mov	r0, sl
 801223a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801223e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012242:	ee07 2a90 	vmov	s15, r2
 8012246:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801224a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801224e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012252:	9c03      	ldr	r4, [sp, #12]
 8012254:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012258:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801225c:	2800      	cmp	r0, #0
 801225e:	f040 8086 	bne.w	801236e <_dtoa_r+0x4c6>
 8012262:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012266:	ee36 6b47 	vsub.f64	d6, d6, d7
 801226a:	ec42 1b17 	vmov	d7, r1, r2
 801226e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012276:	f300 8272 	bgt.w	801275e <_dtoa_r+0x8b6>
 801227a:	eeb1 7b47 	vneg.f64	d7, d7
 801227e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012286:	f100 8267 	bmi.w	8012758 <_dtoa_r+0x8b0>
 801228a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801228e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012292:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012294:	2a00      	cmp	r2, #0
 8012296:	f2c0 8129 	blt.w	80124ec <_dtoa_r+0x644>
 801229a:	f1bb 0f0e 	cmp.w	fp, #14
 801229e:	f300 8125 	bgt.w	80124ec <_dtoa_r+0x644>
 80122a2:	4b90      	ldr	r3, [pc, #576]	; (80124e4 <_dtoa_r+0x63c>)
 80122a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80122a8:	ed93 6b00 	vldr	d6, [r3]
 80122ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	f280 80c3 	bge.w	801243a <_dtoa_r+0x592>
 80122b4:	f1b9 0f00 	cmp.w	r9, #0
 80122b8:	f300 80bf 	bgt.w	801243a <_dtoa_r+0x592>
 80122bc:	f040 824c 	bne.w	8012758 <_dtoa_r+0x8b0>
 80122c0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80122c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80122c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80122d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122d4:	464c      	mov	r4, r9
 80122d6:	464f      	mov	r7, r9
 80122d8:	f280 8222 	bge.w	8012720 <_dtoa_r+0x878>
 80122dc:	f8dd 8000 	ldr.w	r8, [sp]
 80122e0:	2331      	movs	r3, #49	; 0x31
 80122e2:	f808 3b01 	strb.w	r3, [r8], #1
 80122e6:	f10b 0b01 	add.w	fp, fp, #1
 80122ea:	e21e      	b.n	801272a <_dtoa_r+0x882>
 80122ec:	2202      	movs	r2, #2
 80122ee:	e77c      	b.n	80121ea <_dtoa_r+0x342>
 80122f0:	07cc      	lsls	r4, r1, #31
 80122f2:	d504      	bpl.n	80122fe <_dtoa_r+0x456>
 80122f4:	ed90 6b00 	vldr	d6, [r0]
 80122f8:	3201      	adds	r2, #1
 80122fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80122fe:	1049      	asrs	r1, r1, #1
 8012300:	3008      	adds	r0, #8
 8012302:	e773      	b.n	80121ec <_dtoa_r+0x344>
 8012304:	d02e      	beq.n	8012364 <_dtoa_r+0x4bc>
 8012306:	f1cb 0100 	rsb	r1, fp, #0
 801230a:	4a76      	ldr	r2, [pc, #472]	; (80124e4 <_dtoa_r+0x63c>)
 801230c:	f001 000f 	and.w	r0, r1, #15
 8012310:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012314:	ed92 7b00 	vldr	d7, [r2]
 8012318:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801231c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012320:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012324:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8012328:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801232c:	486e      	ldr	r0, [pc, #440]	; (80124e8 <_dtoa_r+0x640>)
 801232e:	1109      	asrs	r1, r1, #4
 8012330:	2400      	movs	r4, #0
 8012332:	2202      	movs	r2, #2
 8012334:	b939      	cbnz	r1, 8012346 <_dtoa_r+0x49e>
 8012336:	2c00      	cmp	r4, #0
 8012338:	f43f af60 	beq.w	80121fc <_dtoa_r+0x354>
 801233c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012344:	e75a      	b.n	80121fc <_dtoa_r+0x354>
 8012346:	07cf      	lsls	r7, r1, #31
 8012348:	d509      	bpl.n	801235e <_dtoa_r+0x4b6>
 801234a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801234e:	ed90 7b00 	vldr	d7, [r0]
 8012352:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012356:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801235a:	3201      	adds	r2, #1
 801235c:	2401      	movs	r4, #1
 801235e:	1049      	asrs	r1, r1, #1
 8012360:	3008      	adds	r0, #8
 8012362:	e7e7      	b.n	8012334 <_dtoa_r+0x48c>
 8012364:	2202      	movs	r2, #2
 8012366:	e749      	b.n	80121fc <_dtoa_r+0x354>
 8012368:	465f      	mov	r7, fp
 801236a:	4648      	mov	r0, r9
 801236c:	e765      	b.n	801223a <_dtoa_r+0x392>
 801236e:	ec42 1b17 	vmov	d7, r1, r2
 8012372:	4a5c      	ldr	r2, [pc, #368]	; (80124e4 <_dtoa_r+0x63c>)
 8012374:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012378:	ed12 4b02 	vldr	d4, [r2, #-8]
 801237c:	9a00      	ldr	r2, [sp, #0]
 801237e:	1814      	adds	r4, r2, r0
 8012380:	9a08      	ldr	r2, [sp, #32]
 8012382:	b352      	cbz	r2, 80123da <_dtoa_r+0x532>
 8012384:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012388:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801238c:	f8dd 8000 	ldr.w	r8, [sp]
 8012390:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012394:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012398:	ee35 7b47 	vsub.f64	d7, d5, d7
 801239c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80123a0:	ee14 2a90 	vmov	r2, s9
 80123a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80123a8:	3230      	adds	r2, #48	; 0x30
 80123aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80123ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b6:	f808 2b01 	strb.w	r2, [r8], #1
 80123ba:	d439      	bmi.n	8012430 <_dtoa_r+0x588>
 80123bc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80123c0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80123c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c8:	d472      	bmi.n	80124b0 <_dtoa_r+0x608>
 80123ca:	45a0      	cmp	r8, r4
 80123cc:	f43f af5d 	beq.w	801228a <_dtoa_r+0x3e2>
 80123d0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80123d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80123d8:	e7e0      	b.n	801239c <_dtoa_r+0x4f4>
 80123da:	f8dd 8000 	ldr.w	r8, [sp]
 80123de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80123e2:	4621      	mov	r1, r4
 80123e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80123e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80123ec:	ee14 2a90 	vmov	r2, s9
 80123f0:	3230      	adds	r2, #48	; 0x30
 80123f2:	f808 2b01 	strb.w	r2, [r8], #1
 80123f6:	45a0      	cmp	r8, r4
 80123f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80123fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012400:	d118      	bne.n	8012434 <_dtoa_r+0x58c>
 8012402:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012406:	ee37 4b05 	vadd.f64	d4, d7, d5
 801240a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012412:	dc4d      	bgt.n	80124b0 <_dtoa_r+0x608>
 8012414:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012418:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801241c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012420:	f57f af33 	bpl.w	801228a <_dtoa_r+0x3e2>
 8012424:	4688      	mov	r8, r1
 8012426:	3901      	subs	r1, #1
 8012428:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801242c:	2b30      	cmp	r3, #48	; 0x30
 801242e:	d0f9      	beq.n	8012424 <_dtoa_r+0x57c>
 8012430:	46bb      	mov	fp, r7
 8012432:	e02a      	b.n	801248a <_dtoa_r+0x5e2>
 8012434:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012438:	e7d6      	b.n	80123e8 <_dtoa_r+0x540>
 801243a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801243e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012442:	f8dd 8000 	ldr.w	r8, [sp]
 8012446:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801244a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801244e:	ee15 3a10 	vmov	r3, s10
 8012452:	3330      	adds	r3, #48	; 0x30
 8012454:	f808 3b01 	strb.w	r3, [r8], #1
 8012458:	9b00      	ldr	r3, [sp, #0]
 801245a:	eba8 0303 	sub.w	r3, r8, r3
 801245e:	4599      	cmp	r9, r3
 8012460:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012464:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012468:	d133      	bne.n	80124d2 <_dtoa_r+0x62a>
 801246a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801246e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012476:	dc1a      	bgt.n	80124ae <_dtoa_r+0x606>
 8012478:	eeb4 7b46 	vcmp.f64	d7, d6
 801247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012480:	d103      	bne.n	801248a <_dtoa_r+0x5e2>
 8012482:	ee15 3a10 	vmov	r3, s10
 8012486:	07d9      	lsls	r1, r3, #31
 8012488:	d411      	bmi.n	80124ae <_dtoa_r+0x606>
 801248a:	4629      	mov	r1, r5
 801248c:	4630      	mov	r0, r6
 801248e:	f000 fd07 	bl	8012ea0 <_Bfree>
 8012492:	2300      	movs	r3, #0
 8012494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012496:	f888 3000 	strb.w	r3, [r8]
 801249a:	f10b 0301 	add.w	r3, fp, #1
 801249e:	6013      	str	r3, [r2, #0]
 80124a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	f43f ad4d 	beq.w	8011f42 <_dtoa_r+0x9a>
 80124a8:	f8c3 8000 	str.w	r8, [r3]
 80124ac:	e549      	b.n	8011f42 <_dtoa_r+0x9a>
 80124ae:	465f      	mov	r7, fp
 80124b0:	4643      	mov	r3, r8
 80124b2:	4698      	mov	r8, r3
 80124b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80124b8:	2a39      	cmp	r2, #57	; 0x39
 80124ba:	d106      	bne.n	80124ca <_dtoa_r+0x622>
 80124bc:	9a00      	ldr	r2, [sp, #0]
 80124be:	429a      	cmp	r2, r3
 80124c0:	d1f7      	bne.n	80124b2 <_dtoa_r+0x60a>
 80124c2:	9900      	ldr	r1, [sp, #0]
 80124c4:	2230      	movs	r2, #48	; 0x30
 80124c6:	3701      	adds	r7, #1
 80124c8:	700a      	strb	r2, [r1, #0]
 80124ca:	781a      	ldrb	r2, [r3, #0]
 80124cc:	3201      	adds	r2, #1
 80124ce:	701a      	strb	r2, [r3, #0]
 80124d0:	e7ae      	b.n	8012430 <_dtoa_r+0x588>
 80124d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80124d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80124da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124de:	d1b2      	bne.n	8012446 <_dtoa_r+0x59e>
 80124e0:	e7d3      	b.n	801248a <_dtoa_r+0x5e2>
 80124e2:	bf00      	nop
 80124e4:	08014800 	.word	0x08014800
 80124e8:	080147d8 	.word	0x080147d8
 80124ec:	9908      	ldr	r1, [sp, #32]
 80124ee:	2900      	cmp	r1, #0
 80124f0:	f000 80d1 	beq.w	8012696 <_dtoa_r+0x7ee>
 80124f4:	9907      	ldr	r1, [sp, #28]
 80124f6:	2901      	cmp	r1, #1
 80124f8:	f300 80b4 	bgt.w	8012664 <_dtoa_r+0x7bc>
 80124fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80124fe:	2900      	cmp	r1, #0
 8012500:	f000 80ac 	beq.w	801265c <_dtoa_r+0x7b4>
 8012504:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012508:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801250c:	461c      	mov	r4, r3
 801250e:	930a      	str	r3, [sp, #40]	; 0x28
 8012510:	9b05      	ldr	r3, [sp, #20]
 8012512:	4413      	add	r3, r2
 8012514:	9305      	str	r3, [sp, #20]
 8012516:	9b06      	ldr	r3, [sp, #24]
 8012518:	2101      	movs	r1, #1
 801251a:	4413      	add	r3, r2
 801251c:	4630      	mov	r0, r6
 801251e:	9306      	str	r3, [sp, #24]
 8012520:	f000 fd7a 	bl	8013018 <__i2b>
 8012524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012526:	4607      	mov	r7, r0
 8012528:	f1b8 0f00 	cmp.w	r8, #0
 801252c:	dd0d      	ble.n	801254a <_dtoa_r+0x6a2>
 801252e:	9a06      	ldr	r2, [sp, #24]
 8012530:	2a00      	cmp	r2, #0
 8012532:	dd0a      	ble.n	801254a <_dtoa_r+0x6a2>
 8012534:	4542      	cmp	r2, r8
 8012536:	9905      	ldr	r1, [sp, #20]
 8012538:	bfa8      	it	ge
 801253a:	4642      	movge	r2, r8
 801253c:	1a89      	subs	r1, r1, r2
 801253e:	9105      	str	r1, [sp, #20]
 8012540:	9906      	ldr	r1, [sp, #24]
 8012542:	eba8 0802 	sub.w	r8, r8, r2
 8012546:	1a8a      	subs	r2, r1, r2
 8012548:	9206      	str	r2, [sp, #24]
 801254a:	b303      	cbz	r3, 801258e <_dtoa_r+0x6e6>
 801254c:	9a08      	ldr	r2, [sp, #32]
 801254e:	2a00      	cmp	r2, #0
 8012550:	f000 80a6 	beq.w	80126a0 <_dtoa_r+0x7f8>
 8012554:	2c00      	cmp	r4, #0
 8012556:	dd13      	ble.n	8012580 <_dtoa_r+0x6d8>
 8012558:	4639      	mov	r1, r7
 801255a:	4622      	mov	r2, r4
 801255c:	4630      	mov	r0, r6
 801255e:	930c      	str	r3, [sp, #48]	; 0x30
 8012560:	f000 fe16 	bl	8013190 <__pow5mult>
 8012564:	462a      	mov	r2, r5
 8012566:	4601      	mov	r1, r0
 8012568:	4607      	mov	r7, r0
 801256a:	4630      	mov	r0, r6
 801256c:	f000 fd6a 	bl	8013044 <__multiply>
 8012570:	4629      	mov	r1, r5
 8012572:	900a      	str	r0, [sp, #40]	; 0x28
 8012574:	4630      	mov	r0, r6
 8012576:	f000 fc93 	bl	8012ea0 <_Bfree>
 801257a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801257c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801257e:	4615      	mov	r5, r2
 8012580:	1b1a      	subs	r2, r3, r4
 8012582:	d004      	beq.n	801258e <_dtoa_r+0x6e6>
 8012584:	4629      	mov	r1, r5
 8012586:	4630      	mov	r0, r6
 8012588:	f000 fe02 	bl	8013190 <__pow5mult>
 801258c:	4605      	mov	r5, r0
 801258e:	2101      	movs	r1, #1
 8012590:	4630      	mov	r0, r6
 8012592:	f000 fd41 	bl	8013018 <__i2b>
 8012596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012598:	2b00      	cmp	r3, #0
 801259a:	4604      	mov	r4, r0
 801259c:	f340 8082 	ble.w	80126a4 <_dtoa_r+0x7fc>
 80125a0:	461a      	mov	r2, r3
 80125a2:	4601      	mov	r1, r0
 80125a4:	4630      	mov	r0, r6
 80125a6:	f000 fdf3 	bl	8013190 <__pow5mult>
 80125aa:	9b07      	ldr	r3, [sp, #28]
 80125ac:	2b01      	cmp	r3, #1
 80125ae:	4604      	mov	r4, r0
 80125b0:	dd7b      	ble.n	80126aa <_dtoa_r+0x802>
 80125b2:	2300      	movs	r3, #0
 80125b4:	930a      	str	r3, [sp, #40]	; 0x28
 80125b6:	6922      	ldr	r2, [r4, #16]
 80125b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80125bc:	6910      	ldr	r0, [r2, #16]
 80125be:	f000 fcdb 	bl	8012f78 <__hi0bits>
 80125c2:	f1c0 0020 	rsb	r0, r0, #32
 80125c6:	9b06      	ldr	r3, [sp, #24]
 80125c8:	4418      	add	r0, r3
 80125ca:	f010 001f 	ands.w	r0, r0, #31
 80125ce:	f000 808d 	beq.w	80126ec <_dtoa_r+0x844>
 80125d2:	f1c0 0220 	rsb	r2, r0, #32
 80125d6:	2a04      	cmp	r2, #4
 80125d8:	f340 8086 	ble.w	80126e8 <_dtoa_r+0x840>
 80125dc:	f1c0 001c 	rsb	r0, r0, #28
 80125e0:	9b05      	ldr	r3, [sp, #20]
 80125e2:	4403      	add	r3, r0
 80125e4:	9305      	str	r3, [sp, #20]
 80125e6:	9b06      	ldr	r3, [sp, #24]
 80125e8:	4403      	add	r3, r0
 80125ea:	4480      	add	r8, r0
 80125ec:	9306      	str	r3, [sp, #24]
 80125ee:	9b05      	ldr	r3, [sp, #20]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	dd05      	ble.n	8012600 <_dtoa_r+0x758>
 80125f4:	4629      	mov	r1, r5
 80125f6:	461a      	mov	r2, r3
 80125f8:	4630      	mov	r0, r6
 80125fa:	f000 fe23 	bl	8013244 <__lshift>
 80125fe:	4605      	mov	r5, r0
 8012600:	9b06      	ldr	r3, [sp, #24]
 8012602:	2b00      	cmp	r3, #0
 8012604:	dd05      	ble.n	8012612 <_dtoa_r+0x76a>
 8012606:	4621      	mov	r1, r4
 8012608:	461a      	mov	r2, r3
 801260a:	4630      	mov	r0, r6
 801260c:	f000 fe1a 	bl	8013244 <__lshift>
 8012610:	4604      	mov	r4, r0
 8012612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012614:	2b00      	cmp	r3, #0
 8012616:	d06b      	beq.n	80126f0 <_dtoa_r+0x848>
 8012618:	4621      	mov	r1, r4
 801261a:	4628      	mov	r0, r5
 801261c:	f000 fe7e 	bl	801331c <__mcmp>
 8012620:	2800      	cmp	r0, #0
 8012622:	da65      	bge.n	80126f0 <_dtoa_r+0x848>
 8012624:	2300      	movs	r3, #0
 8012626:	4629      	mov	r1, r5
 8012628:	220a      	movs	r2, #10
 801262a:	4630      	mov	r0, r6
 801262c:	f000 fc5a 	bl	8012ee4 <__multadd>
 8012630:	9b08      	ldr	r3, [sp, #32]
 8012632:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012636:	4605      	mov	r5, r0
 8012638:	2b00      	cmp	r3, #0
 801263a:	f000 8192 	beq.w	8012962 <_dtoa_r+0xaba>
 801263e:	4639      	mov	r1, r7
 8012640:	2300      	movs	r3, #0
 8012642:	220a      	movs	r2, #10
 8012644:	4630      	mov	r0, r6
 8012646:	f000 fc4d 	bl	8012ee4 <__multadd>
 801264a:	f1ba 0f00 	cmp.w	sl, #0
 801264e:	4607      	mov	r7, r0
 8012650:	f300 808e 	bgt.w	8012770 <_dtoa_r+0x8c8>
 8012654:	9b07      	ldr	r3, [sp, #28]
 8012656:	2b02      	cmp	r3, #2
 8012658:	dc51      	bgt.n	80126fe <_dtoa_r+0x856>
 801265a:	e089      	b.n	8012770 <_dtoa_r+0x8c8>
 801265c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801265e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012662:	e751      	b.n	8012508 <_dtoa_r+0x660>
 8012664:	f109 34ff 	add.w	r4, r9, #4294967295
 8012668:	42a3      	cmp	r3, r4
 801266a:	bfbf      	itttt	lt
 801266c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801266e:	1ae3      	sublt	r3, r4, r3
 8012670:	18d2      	addlt	r2, r2, r3
 8012672:	4613      	movlt	r3, r2
 8012674:	bfb7      	itett	lt
 8012676:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012678:	1b1c      	subge	r4, r3, r4
 801267a:	4623      	movlt	r3, r4
 801267c:	2400      	movlt	r4, #0
 801267e:	f1b9 0f00 	cmp.w	r9, #0
 8012682:	bfb5      	itete	lt
 8012684:	9a05      	ldrlt	r2, [sp, #20]
 8012686:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801268a:	eba2 0809 	sublt.w	r8, r2, r9
 801268e:	464a      	movge	r2, r9
 8012690:	bfb8      	it	lt
 8012692:	2200      	movlt	r2, #0
 8012694:	e73b      	b.n	801250e <_dtoa_r+0x666>
 8012696:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801269a:	9f08      	ldr	r7, [sp, #32]
 801269c:	461c      	mov	r4, r3
 801269e:	e743      	b.n	8012528 <_dtoa_r+0x680>
 80126a0:	461a      	mov	r2, r3
 80126a2:	e76f      	b.n	8012584 <_dtoa_r+0x6dc>
 80126a4:	9b07      	ldr	r3, [sp, #28]
 80126a6:	2b01      	cmp	r3, #1
 80126a8:	dc18      	bgt.n	80126dc <_dtoa_r+0x834>
 80126aa:	9b02      	ldr	r3, [sp, #8]
 80126ac:	b9b3      	cbnz	r3, 80126dc <_dtoa_r+0x834>
 80126ae:	9b03      	ldr	r3, [sp, #12]
 80126b0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80126b4:	b9a2      	cbnz	r2, 80126e0 <_dtoa_r+0x838>
 80126b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80126ba:	0d12      	lsrs	r2, r2, #20
 80126bc:	0512      	lsls	r2, r2, #20
 80126be:	b18a      	cbz	r2, 80126e4 <_dtoa_r+0x83c>
 80126c0:	9b05      	ldr	r3, [sp, #20]
 80126c2:	3301      	adds	r3, #1
 80126c4:	9305      	str	r3, [sp, #20]
 80126c6:	9b06      	ldr	r3, [sp, #24]
 80126c8:	3301      	adds	r3, #1
 80126ca:	9306      	str	r3, [sp, #24]
 80126cc:	2301      	movs	r3, #1
 80126ce:	930a      	str	r3, [sp, #40]	; 0x28
 80126d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	f47f af6f 	bne.w	80125b6 <_dtoa_r+0x70e>
 80126d8:	2001      	movs	r0, #1
 80126da:	e774      	b.n	80125c6 <_dtoa_r+0x71e>
 80126dc:	2300      	movs	r3, #0
 80126de:	e7f6      	b.n	80126ce <_dtoa_r+0x826>
 80126e0:	9b02      	ldr	r3, [sp, #8]
 80126e2:	e7f4      	b.n	80126ce <_dtoa_r+0x826>
 80126e4:	920a      	str	r2, [sp, #40]	; 0x28
 80126e6:	e7f3      	b.n	80126d0 <_dtoa_r+0x828>
 80126e8:	d081      	beq.n	80125ee <_dtoa_r+0x746>
 80126ea:	4610      	mov	r0, r2
 80126ec:	301c      	adds	r0, #28
 80126ee:	e777      	b.n	80125e0 <_dtoa_r+0x738>
 80126f0:	f1b9 0f00 	cmp.w	r9, #0
 80126f4:	dc37      	bgt.n	8012766 <_dtoa_r+0x8be>
 80126f6:	9b07      	ldr	r3, [sp, #28]
 80126f8:	2b02      	cmp	r3, #2
 80126fa:	dd34      	ble.n	8012766 <_dtoa_r+0x8be>
 80126fc:	46ca      	mov	sl, r9
 80126fe:	f1ba 0f00 	cmp.w	sl, #0
 8012702:	d10d      	bne.n	8012720 <_dtoa_r+0x878>
 8012704:	4621      	mov	r1, r4
 8012706:	4653      	mov	r3, sl
 8012708:	2205      	movs	r2, #5
 801270a:	4630      	mov	r0, r6
 801270c:	f000 fbea 	bl	8012ee4 <__multadd>
 8012710:	4601      	mov	r1, r0
 8012712:	4604      	mov	r4, r0
 8012714:	4628      	mov	r0, r5
 8012716:	f000 fe01 	bl	801331c <__mcmp>
 801271a:	2800      	cmp	r0, #0
 801271c:	f73f adde 	bgt.w	80122dc <_dtoa_r+0x434>
 8012720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012722:	f8dd 8000 	ldr.w	r8, [sp]
 8012726:	ea6f 0b03 	mvn.w	fp, r3
 801272a:	f04f 0900 	mov.w	r9, #0
 801272e:	4621      	mov	r1, r4
 8012730:	4630      	mov	r0, r6
 8012732:	f000 fbb5 	bl	8012ea0 <_Bfree>
 8012736:	2f00      	cmp	r7, #0
 8012738:	f43f aea7 	beq.w	801248a <_dtoa_r+0x5e2>
 801273c:	f1b9 0f00 	cmp.w	r9, #0
 8012740:	d005      	beq.n	801274e <_dtoa_r+0x8a6>
 8012742:	45b9      	cmp	r9, r7
 8012744:	d003      	beq.n	801274e <_dtoa_r+0x8a6>
 8012746:	4649      	mov	r1, r9
 8012748:	4630      	mov	r0, r6
 801274a:	f000 fba9 	bl	8012ea0 <_Bfree>
 801274e:	4639      	mov	r1, r7
 8012750:	4630      	mov	r0, r6
 8012752:	f000 fba5 	bl	8012ea0 <_Bfree>
 8012756:	e698      	b.n	801248a <_dtoa_r+0x5e2>
 8012758:	2400      	movs	r4, #0
 801275a:	4627      	mov	r7, r4
 801275c:	e7e0      	b.n	8012720 <_dtoa_r+0x878>
 801275e:	46bb      	mov	fp, r7
 8012760:	4604      	mov	r4, r0
 8012762:	4607      	mov	r7, r0
 8012764:	e5ba      	b.n	80122dc <_dtoa_r+0x434>
 8012766:	9b08      	ldr	r3, [sp, #32]
 8012768:	46ca      	mov	sl, r9
 801276a:	2b00      	cmp	r3, #0
 801276c:	f000 8100 	beq.w	8012970 <_dtoa_r+0xac8>
 8012770:	f1b8 0f00 	cmp.w	r8, #0
 8012774:	dd05      	ble.n	8012782 <_dtoa_r+0x8da>
 8012776:	4639      	mov	r1, r7
 8012778:	4642      	mov	r2, r8
 801277a:	4630      	mov	r0, r6
 801277c:	f000 fd62 	bl	8013244 <__lshift>
 8012780:	4607      	mov	r7, r0
 8012782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012784:	2b00      	cmp	r3, #0
 8012786:	d05d      	beq.n	8012844 <_dtoa_r+0x99c>
 8012788:	6879      	ldr	r1, [r7, #4]
 801278a:	4630      	mov	r0, r6
 801278c:	f000 fb48 	bl	8012e20 <_Balloc>
 8012790:	4680      	mov	r8, r0
 8012792:	b928      	cbnz	r0, 80127a0 <_dtoa_r+0x8f8>
 8012794:	4b82      	ldr	r3, [pc, #520]	; (80129a0 <_dtoa_r+0xaf8>)
 8012796:	4602      	mov	r2, r0
 8012798:	f240 21ea 	movw	r1, #746	; 0x2ea
 801279c:	f7ff bb9a 	b.w	8011ed4 <_dtoa_r+0x2c>
 80127a0:	693a      	ldr	r2, [r7, #16]
 80127a2:	3202      	adds	r2, #2
 80127a4:	0092      	lsls	r2, r2, #2
 80127a6:	f107 010c 	add.w	r1, r7, #12
 80127aa:	300c      	adds	r0, #12
 80127ac:	f000 fb2a 	bl	8012e04 <memcpy>
 80127b0:	2201      	movs	r2, #1
 80127b2:	4641      	mov	r1, r8
 80127b4:	4630      	mov	r0, r6
 80127b6:	f000 fd45 	bl	8013244 <__lshift>
 80127ba:	9b00      	ldr	r3, [sp, #0]
 80127bc:	3301      	adds	r3, #1
 80127be:	9305      	str	r3, [sp, #20]
 80127c0:	9b00      	ldr	r3, [sp, #0]
 80127c2:	4453      	add	r3, sl
 80127c4:	9309      	str	r3, [sp, #36]	; 0x24
 80127c6:	9b02      	ldr	r3, [sp, #8]
 80127c8:	f003 0301 	and.w	r3, r3, #1
 80127cc:	46b9      	mov	r9, r7
 80127ce:	9308      	str	r3, [sp, #32]
 80127d0:	4607      	mov	r7, r0
 80127d2:	9b05      	ldr	r3, [sp, #20]
 80127d4:	4621      	mov	r1, r4
 80127d6:	3b01      	subs	r3, #1
 80127d8:	4628      	mov	r0, r5
 80127da:	9302      	str	r3, [sp, #8]
 80127dc:	f7ff fad8 	bl	8011d90 <quorem>
 80127e0:	4603      	mov	r3, r0
 80127e2:	3330      	adds	r3, #48	; 0x30
 80127e4:	9006      	str	r0, [sp, #24]
 80127e6:	4649      	mov	r1, r9
 80127e8:	4628      	mov	r0, r5
 80127ea:	930a      	str	r3, [sp, #40]	; 0x28
 80127ec:	f000 fd96 	bl	801331c <__mcmp>
 80127f0:	463a      	mov	r2, r7
 80127f2:	4682      	mov	sl, r0
 80127f4:	4621      	mov	r1, r4
 80127f6:	4630      	mov	r0, r6
 80127f8:	f000 fdac 	bl	8013354 <__mdiff>
 80127fc:	68c2      	ldr	r2, [r0, #12]
 80127fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012800:	4680      	mov	r8, r0
 8012802:	bb0a      	cbnz	r2, 8012848 <_dtoa_r+0x9a0>
 8012804:	4601      	mov	r1, r0
 8012806:	4628      	mov	r0, r5
 8012808:	f000 fd88 	bl	801331c <__mcmp>
 801280c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801280e:	4602      	mov	r2, r0
 8012810:	4641      	mov	r1, r8
 8012812:	4630      	mov	r0, r6
 8012814:	920e      	str	r2, [sp, #56]	; 0x38
 8012816:	930a      	str	r3, [sp, #40]	; 0x28
 8012818:	f000 fb42 	bl	8012ea0 <_Bfree>
 801281c:	9b07      	ldr	r3, [sp, #28]
 801281e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012820:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012824:	ea43 0102 	orr.w	r1, r3, r2
 8012828:	9b08      	ldr	r3, [sp, #32]
 801282a:	430b      	orrs	r3, r1
 801282c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801282e:	d10d      	bne.n	801284c <_dtoa_r+0x9a4>
 8012830:	2b39      	cmp	r3, #57	; 0x39
 8012832:	d029      	beq.n	8012888 <_dtoa_r+0x9e0>
 8012834:	f1ba 0f00 	cmp.w	sl, #0
 8012838:	dd01      	ble.n	801283e <_dtoa_r+0x996>
 801283a:	9b06      	ldr	r3, [sp, #24]
 801283c:	3331      	adds	r3, #49	; 0x31
 801283e:	9a02      	ldr	r2, [sp, #8]
 8012840:	7013      	strb	r3, [r2, #0]
 8012842:	e774      	b.n	801272e <_dtoa_r+0x886>
 8012844:	4638      	mov	r0, r7
 8012846:	e7b8      	b.n	80127ba <_dtoa_r+0x912>
 8012848:	2201      	movs	r2, #1
 801284a:	e7e1      	b.n	8012810 <_dtoa_r+0x968>
 801284c:	f1ba 0f00 	cmp.w	sl, #0
 8012850:	db06      	blt.n	8012860 <_dtoa_r+0x9b8>
 8012852:	9907      	ldr	r1, [sp, #28]
 8012854:	ea41 0a0a 	orr.w	sl, r1, sl
 8012858:	9908      	ldr	r1, [sp, #32]
 801285a:	ea5a 0101 	orrs.w	r1, sl, r1
 801285e:	d120      	bne.n	80128a2 <_dtoa_r+0x9fa>
 8012860:	2a00      	cmp	r2, #0
 8012862:	ddec      	ble.n	801283e <_dtoa_r+0x996>
 8012864:	4629      	mov	r1, r5
 8012866:	2201      	movs	r2, #1
 8012868:	4630      	mov	r0, r6
 801286a:	9305      	str	r3, [sp, #20]
 801286c:	f000 fcea 	bl	8013244 <__lshift>
 8012870:	4621      	mov	r1, r4
 8012872:	4605      	mov	r5, r0
 8012874:	f000 fd52 	bl	801331c <__mcmp>
 8012878:	2800      	cmp	r0, #0
 801287a:	9b05      	ldr	r3, [sp, #20]
 801287c:	dc02      	bgt.n	8012884 <_dtoa_r+0x9dc>
 801287e:	d1de      	bne.n	801283e <_dtoa_r+0x996>
 8012880:	07da      	lsls	r2, r3, #31
 8012882:	d5dc      	bpl.n	801283e <_dtoa_r+0x996>
 8012884:	2b39      	cmp	r3, #57	; 0x39
 8012886:	d1d8      	bne.n	801283a <_dtoa_r+0x992>
 8012888:	9a02      	ldr	r2, [sp, #8]
 801288a:	2339      	movs	r3, #57	; 0x39
 801288c:	7013      	strb	r3, [r2, #0]
 801288e:	4643      	mov	r3, r8
 8012890:	4698      	mov	r8, r3
 8012892:	3b01      	subs	r3, #1
 8012894:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012898:	2a39      	cmp	r2, #57	; 0x39
 801289a:	d051      	beq.n	8012940 <_dtoa_r+0xa98>
 801289c:	3201      	adds	r2, #1
 801289e:	701a      	strb	r2, [r3, #0]
 80128a0:	e745      	b.n	801272e <_dtoa_r+0x886>
 80128a2:	2a00      	cmp	r2, #0
 80128a4:	dd03      	ble.n	80128ae <_dtoa_r+0xa06>
 80128a6:	2b39      	cmp	r3, #57	; 0x39
 80128a8:	d0ee      	beq.n	8012888 <_dtoa_r+0x9e0>
 80128aa:	3301      	adds	r3, #1
 80128ac:	e7c7      	b.n	801283e <_dtoa_r+0x996>
 80128ae:	9a05      	ldr	r2, [sp, #20]
 80128b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128b2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80128b6:	428a      	cmp	r2, r1
 80128b8:	d02b      	beq.n	8012912 <_dtoa_r+0xa6a>
 80128ba:	4629      	mov	r1, r5
 80128bc:	2300      	movs	r3, #0
 80128be:	220a      	movs	r2, #10
 80128c0:	4630      	mov	r0, r6
 80128c2:	f000 fb0f 	bl	8012ee4 <__multadd>
 80128c6:	45b9      	cmp	r9, r7
 80128c8:	4605      	mov	r5, r0
 80128ca:	f04f 0300 	mov.w	r3, #0
 80128ce:	f04f 020a 	mov.w	r2, #10
 80128d2:	4649      	mov	r1, r9
 80128d4:	4630      	mov	r0, r6
 80128d6:	d107      	bne.n	80128e8 <_dtoa_r+0xa40>
 80128d8:	f000 fb04 	bl	8012ee4 <__multadd>
 80128dc:	4681      	mov	r9, r0
 80128de:	4607      	mov	r7, r0
 80128e0:	9b05      	ldr	r3, [sp, #20]
 80128e2:	3301      	adds	r3, #1
 80128e4:	9305      	str	r3, [sp, #20]
 80128e6:	e774      	b.n	80127d2 <_dtoa_r+0x92a>
 80128e8:	f000 fafc 	bl	8012ee4 <__multadd>
 80128ec:	4639      	mov	r1, r7
 80128ee:	4681      	mov	r9, r0
 80128f0:	2300      	movs	r3, #0
 80128f2:	220a      	movs	r2, #10
 80128f4:	4630      	mov	r0, r6
 80128f6:	f000 faf5 	bl	8012ee4 <__multadd>
 80128fa:	4607      	mov	r7, r0
 80128fc:	e7f0      	b.n	80128e0 <_dtoa_r+0xa38>
 80128fe:	f1ba 0f00 	cmp.w	sl, #0
 8012902:	9a00      	ldr	r2, [sp, #0]
 8012904:	bfcc      	ite	gt
 8012906:	46d0      	movgt	r8, sl
 8012908:	f04f 0801 	movle.w	r8, #1
 801290c:	4490      	add	r8, r2
 801290e:	f04f 0900 	mov.w	r9, #0
 8012912:	4629      	mov	r1, r5
 8012914:	2201      	movs	r2, #1
 8012916:	4630      	mov	r0, r6
 8012918:	9302      	str	r3, [sp, #8]
 801291a:	f000 fc93 	bl	8013244 <__lshift>
 801291e:	4621      	mov	r1, r4
 8012920:	4605      	mov	r5, r0
 8012922:	f000 fcfb 	bl	801331c <__mcmp>
 8012926:	2800      	cmp	r0, #0
 8012928:	dcb1      	bgt.n	801288e <_dtoa_r+0x9e6>
 801292a:	d102      	bne.n	8012932 <_dtoa_r+0xa8a>
 801292c:	9b02      	ldr	r3, [sp, #8]
 801292e:	07db      	lsls	r3, r3, #31
 8012930:	d4ad      	bmi.n	801288e <_dtoa_r+0x9e6>
 8012932:	4643      	mov	r3, r8
 8012934:	4698      	mov	r8, r3
 8012936:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801293a:	2a30      	cmp	r2, #48	; 0x30
 801293c:	d0fa      	beq.n	8012934 <_dtoa_r+0xa8c>
 801293e:	e6f6      	b.n	801272e <_dtoa_r+0x886>
 8012940:	9a00      	ldr	r2, [sp, #0]
 8012942:	429a      	cmp	r2, r3
 8012944:	d1a4      	bne.n	8012890 <_dtoa_r+0x9e8>
 8012946:	f10b 0b01 	add.w	fp, fp, #1
 801294a:	2331      	movs	r3, #49	; 0x31
 801294c:	e778      	b.n	8012840 <_dtoa_r+0x998>
 801294e:	4b15      	ldr	r3, [pc, #84]	; (80129a4 <_dtoa_r+0xafc>)
 8012950:	f7ff bb12 	b.w	8011f78 <_dtoa_r+0xd0>
 8012954:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012956:	2b00      	cmp	r3, #0
 8012958:	f47f aaee 	bne.w	8011f38 <_dtoa_r+0x90>
 801295c:	4b12      	ldr	r3, [pc, #72]	; (80129a8 <_dtoa_r+0xb00>)
 801295e:	f7ff bb0b 	b.w	8011f78 <_dtoa_r+0xd0>
 8012962:	f1ba 0f00 	cmp.w	sl, #0
 8012966:	dc03      	bgt.n	8012970 <_dtoa_r+0xac8>
 8012968:	9b07      	ldr	r3, [sp, #28]
 801296a:	2b02      	cmp	r3, #2
 801296c:	f73f aec7 	bgt.w	80126fe <_dtoa_r+0x856>
 8012970:	f8dd 8000 	ldr.w	r8, [sp]
 8012974:	4621      	mov	r1, r4
 8012976:	4628      	mov	r0, r5
 8012978:	f7ff fa0a 	bl	8011d90 <quorem>
 801297c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012980:	f808 3b01 	strb.w	r3, [r8], #1
 8012984:	9a00      	ldr	r2, [sp, #0]
 8012986:	eba8 0202 	sub.w	r2, r8, r2
 801298a:	4592      	cmp	sl, r2
 801298c:	ddb7      	ble.n	80128fe <_dtoa_r+0xa56>
 801298e:	4629      	mov	r1, r5
 8012990:	2300      	movs	r3, #0
 8012992:	220a      	movs	r2, #10
 8012994:	4630      	mov	r0, r6
 8012996:	f000 faa5 	bl	8012ee4 <__multadd>
 801299a:	4605      	mov	r5, r0
 801299c:	e7ea      	b.n	8012974 <_dtoa_r+0xacc>
 801299e:	bf00      	nop
 80129a0:	08014707 	.word	0x08014707
 80129a4:	08014660 	.word	0x08014660
 80129a8:	08014684 	.word	0x08014684

080129ac <__sflush_r>:
 80129ac:	898a      	ldrh	r2, [r1, #12]
 80129ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b2:	4605      	mov	r5, r0
 80129b4:	0710      	lsls	r0, r2, #28
 80129b6:	460c      	mov	r4, r1
 80129b8:	d458      	bmi.n	8012a6c <__sflush_r+0xc0>
 80129ba:	684b      	ldr	r3, [r1, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	dc05      	bgt.n	80129cc <__sflush_r+0x20>
 80129c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	dc02      	bgt.n	80129cc <__sflush_r+0x20>
 80129c6:	2000      	movs	r0, #0
 80129c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129ce:	2e00      	cmp	r6, #0
 80129d0:	d0f9      	beq.n	80129c6 <__sflush_r+0x1a>
 80129d2:	2300      	movs	r3, #0
 80129d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80129d8:	682f      	ldr	r7, [r5, #0]
 80129da:	602b      	str	r3, [r5, #0]
 80129dc:	d032      	beq.n	8012a44 <__sflush_r+0x98>
 80129de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80129e0:	89a3      	ldrh	r3, [r4, #12]
 80129e2:	075a      	lsls	r2, r3, #29
 80129e4:	d505      	bpl.n	80129f2 <__sflush_r+0x46>
 80129e6:	6863      	ldr	r3, [r4, #4]
 80129e8:	1ac0      	subs	r0, r0, r3
 80129ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80129ec:	b10b      	cbz	r3, 80129f2 <__sflush_r+0x46>
 80129ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80129f0:	1ac0      	subs	r0, r0, r3
 80129f2:	2300      	movs	r3, #0
 80129f4:	4602      	mov	r2, r0
 80129f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80129f8:	6a21      	ldr	r1, [r4, #32]
 80129fa:	4628      	mov	r0, r5
 80129fc:	47b0      	blx	r6
 80129fe:	1c43      	adds	r3, r0, #1
 8012a00:	89a3      	ldrh	r3, [r4, #12]
 8012a02:	d106      	bne.n	8012a12 <__sflush_r+0x66>
 8012a04:	6829      	ldr	r1, [r5, #0]
 8012a06:	291d      	cmp	r1, #29
 8012a08:	d82c      	bhi.n	8012a64 <__sflush_r+0xb8>
 8012a0a:	4a2a      	ldr	r2, [pc, #168]	; (8012ab4 <__sflush_r+0x108>)
 8012a0c:	40ca      	lsrs	r2, r1
 8012a0e:	07d6      	lsls	r6, r2, #31
 8012a10:	d528      	bpl.n	8012a64 <__sflush_r+0xb8>
 8012a12:	2200      	movs	r2, #0
 8012a14:	6062      	str	r2, [r4, #4]
 8012a16:	04d9      	lsls	r1, r3, #19
 8012a18:	6922      	ldr	r2, [r4, #16]
 8012a1a:	6022      	str	r2, [r4, #0]
 8012a1c:	d504      	bpl.n	8012a28 <__sflush_r+0x7c>
 8012a1e:	1c42      	adds	r2, r0, #1
 8012a20:	d101      	bne.n	8012a26 <__sflush_r+0x7a>
 8012a22:	682b      	ldr	r3, [r5, #0]
 8012a24:	b903      	cbnz	r3, 8012a28 <__sflush_r+0x7c>
 8012a26:	6560      	str	r0, [r4, #84]	; 0x54
 8012a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a2a:	602f      	str	r7, [r5, #0]
 8012a2c:	2900      	cmp	r1, #0
 8012a2e:	d0ca      	beq.n	80129c6 <__sflush_r+0x1a>
 8012a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a34:	4299      	cmp	r1, r3
 8012a36:	d002      	beq.n	8012a3e <__sflush_r+0x92>
 8012a38:	4628      	mov	r0, r5
 8012a3a:	f000 fd7f 	bl	801353c <_free_r>
 8012a3e:	2000      	movs	r0, #0
 8012a40:	6360      	str	r0, [r4, #52]	; 0x34
 8012a42:	e7c1      	b.n	80129c8 <__sflush_r+0x1c>
 8012a44:	6a21      	ldr	r1, [r4, #32]
 8012a46:	2301      	movs	r3, #1
 8012a48:	4628      	mov	r0, r5
 8012a4a:	47b0      	blx	r6
 8012a4c:	1c41      	adds	r1, r0, #1
 8012a4e:	d1c7      	bne.n	80129e0 <__sflush_r+0x34>
 8012a50:	682b      	ldr	r3, [r5, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d0c4      	beq.n	80129e0 <__sflush_r+0x34>
 8012a56:	2b1d      	cmp	r3, #29
 8012a58:	d001      	beq.n	8012a5e <__sflush_r+0xb2>
 8012a5a:	2b16      	cmp	r3, #22
 8012a5c:	d101      	bne.n	8012a62 <__sflush_r+0xb6>
 8012a5e:	602f      	str	r7, [r5, #0]
 8012a60:	e7b1      	b.n	80129c6 <__sflush_r+0x1a>
 8012a62:	89a3      	ldrh	r3, [r4, #12]
 8012a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a68:	81a3      	strh	r3, [r4, #12]
 8012a6a:	e7ad      	b.n	80129c8 <__sflush_r+0x1c>
 8012a6c:	690f      	ldr	r7, [r1, #16]
 8012a6e:	2f00      	cmp	r7, #0
 8012a70:	d0a9      	beq.n	80129c6 <__sflush_r+0x1a>
 8012a72:	0793      	lsls	r3, r2, #30
 8012a74:	680e      	ldr	r6, [r1, #0]
 8012a76:	bf08      	it	eq
 8012a78:	694b      	ldreq	r3, [r1, #20]
 8012a7a:	600f      	str	r7, [r1, #0]
 8012a7c:	bf18      	it	ne
 8012a7e:	2300      	movne	r3, #0
 8012a80:	eba6 0807 	sub.w	r8, r6, r7
 8012a84:	608b      	str	r3, [r1, #8]
 8012a86:	f1b8 0f00 	cmp.w	r8, #0
 8012a8a:	dd9c      	ble.n	80129c6 <__sflush_r+0x1a>
 8012a8c:	6a21      	ldr	r1, [r4, #32]
 8012a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012a90:	4643      	mov	r3, r8
 8012a92:	463a      	mov	r2, r7
 8012a94:	4628      	mov	r0, r5
 8012a96:	47b0      	blx	r6
 8012a98:	2800      	cmp	r0, #0
 8012a9a:	dc06      	bgt.n	8012aaa <__sflush_r+0xfe>
 8012a9c:	89a3      	ldrh	r3, [r4, #12]
 8012a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012aa2:	81a3      	strh	r3, [r4, #12]
 8012aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa8:	e78e      	b.n	80129c8 <__sflush_r+0x1c>
 8012aaa:	4407      	add	r7, r0
 8012aac:	eba8 0800 	sub.w	r8, r8, r0
 8012ab0:	e7e9      	b.n	8012a86 <__sflush_r+0xda>
 8012ab2:	bf00      	nop
 8012ab4:	20400001 	.word	0x20400001

08012ab8 <_fflush_r>:
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	690b      	ldr	r3, [r1, #16]
 8012abc:	4605      	mov	r5, r0
 8012abe:	460c      	mov	r4, r1
 8012ac0:	b913      	cbnz	r3, 8012ac8 <_fflush_r+0x10>
 8012ac2:	2500      	movs	r5, #0
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	bd38      	pop	{r3, r4, r5, pc}
 8012ac8:	b118      	cbz	r0, 8012ad2 <_fflush_r+0x1a>
 8012aca:	6983      	ldr	r3, [r0, #24]
 8012acc:	b90b      	cbnz	r3, 8012ad2 <_fflush_r+0x1a>
 8012ace:	f000 f887 	bl	8012be0 <__sinit>
 8012ad2:	4b14      	ldr	r3, [pc, #80]	; (8012b24 <_fflush_r+0x6c>)
 8012ad4:	429c      	cmp	r4, r3
 8012ad6:	d11b      	bne.n	8012b10 <_fflush_r+0x58>
 8012ad8:	686c      	ldr	r4, [r5, #4]
 8012ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d0ef      	beq.n	8012ac2 <_fflush_r+0xa>
 8012ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012ae4:	07d0      	lsls	r0, r2, #31
 8012ae6:	d404      	bmi.n	8012af2 <_fflush_r+0x3a>
 8012ae8:	0599      	lsls	r1, r3, #22
 8012aea:	d402      	bmi.n	8012af2 <_fflush_r+0x3a>
 8012aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012aee:	f000 f91a 	bl	8012d26 <__retarget_lock_acquire_recursive>
 8012af2:	4628      	mov	r0, r5
 8012af4:	4621      	mov	r1, r4
 8012af6:	f7ff ff59 	bl	80129ac <__sflush_r>
 8012afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012afc:	07da      	lsls	r2, r3, #31
 8012afe:	4605      	mov	r5, r0
 8012b00:	d4e0      	bmi.n	8012ac4 <_fflush_r+0xc>
 8012b02:	89a3      	ldrh	r3, [r4, #12]
 8012b04:	059b      	lsls	r3, r3, #22
 8012b06:	d4dd      	bmi.n	8012ac4 <_fflush_r+0xc>
 8012b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012b0a:	f000 f90d 	bl	8012d28 <__retarget_lock_release_recursive>
 8012b0e:	e7d9      	b.n	8012ac4 <_fflush_r+0xc>
 8012b10:	4b05      	ldr	r3, [pc, #20]	; (8012b28 <_fflush_r+0x70>)
 8012b12:	429c      	cmp	r4, r3
 8012b14:	d101      	bne.n	8012b1a <_fflush_r+0x62>
 8012b16:	68ac      	ldr	r4, [r5, #8]
 8012b18:	e7df      	b.n	8012ada <_fflush_r+0x22>
 8012b1a:	4b04      	ldr	r3, [pc, #16]	; (8012b2c <_fflush_r+0x74>)
 8012b1c:	429c      	cmp	r4, r3
 8012b1e:	bf08      	it	eq
 8012b20:	68ec      	ldreq	r4, [r5, #12]
 8012b22:	e7da      	b.n	8012ada <_fflush_r+0x22>
 8012b24:	08014738 	.word	0x08014738
 8012b28:	08014758 	.word	0x08014758
 8012b2c:	08014718 	.word	0x08014718

08012b30 <std>:
 8012b30:	2300      	movs	r3, #0
 8012b32:	b510      	push	{r4, lr}
 8012b34:	4604      	mov	r4, r0
 8012b36:	e9c0 3300 	strd	r3, r3, [r0]
 8012b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b3e:	6083      	str	r3, [r0, #8]
 8012b40:	8181      	strh	r1, [r0, #12]
 8012b42:	6643      	str	r3, [r0, #100]	; 0x64
 8012b44:	81c2      	strh	r2, [r0, #14]
 8012b46:	6183      	str	r3, [r0, #24]
 8012b48:	4619      	mov	r1, r3
 8012b4a:	2208      	movs	r2, #8
 8012b4c:	305c      	adds	r0, #92	; 0x5c
 8012b4e:	f7fe fb85 	bl	801125c <memset>
 8012b52:	4b05      	ldr	r3, [pc, #20]	; (8012b68 <std+0x38>)
 8012b54:	6263      	str	r3, [r4, #36]	; 0x24
 8012b56:	4b05      	ldr	r3, [pc, #20]	; (8012b6c <std+0x3c>)
 8012b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8012b5a:	4b05      	ldr	r3, [pc, #20]	; (8012b70 <std+0x40>)
 8012b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012b5e:	4b05      	ldr	r3, [pc, #20]	; (8012b74 <std+0x44>)
 8012b60:	6224      	str	r4, [r4, #32]
 8012b62:	6323      	str	r3, [r4, #48]	; 0x30
 8012b64:	bd10      	pop	{r4, pc}
 8012b66:	bf00      	nop
 8012b68:	08013965 	.word	0x08013965
 8012b6c:	08013987 	.word	0x08013987
 8012b70:	080139bf 	.word	0x080139bf
 8012b74:	080139e3 	.word	0x080139e3

08012b78 <_cleanup_r>:
 8012b78:	4901      	ldr	r1, [pc, #4]	; (8012b80 <_cleanup_r+0x8>)
 8012b7a:	f000 b8af 	b.w	8012cdc <_fwalk_reent>
 8012b7e:	bf00      	nop
 8012b80:	08012ab9 	.word	0x08012ab9

08012b84 <__sfmoreglue>:
 8012b84:	b570      	push	{r4, r5, r6, lr}
 8012b86:	1e4a      	subs	r2, r1, #1
 8012b88:	2568      	movs	r5, #104	; 0x68
 8012b8a:	4355      	muls	r5, r2
 8012b8c:	460e      	mov	r6, r1
 8012b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012b92:	f000 fd23 	bl	80135dc <_malloc_r>
 8012b96:	4604      	mov	r4, r0
 8012b98:	b140      	cbz	r0, 8012bac <__sfmoreglue+0x28>
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8012ba0:	300c      	adds	r0, #12
 8012ba2:	60a0      	str	r0, [r4, #8]
 8012ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ba8:	f7fe fb58 	bl	801125c <memset>
 8012bac:	4620      	mov	r0, r4
 8012bae:	bd70      	pop	{r4, r5, r6, pc}

08012bb0 <__sfp_lock_acquire>:
 8012bb0:	4801      	ldr	r0, [pc, #4]	; (8012bb8 <__sfp_lock_acquire+0x8>)
 8012bb2:	f000 b8b8 	b.w	8012d26 <__retarget_lock_acquire_recursive>
 8012bb6:	bf00      	nop
 8012bb8:	240007fc 	.word	0x240007fc

08012bbc <__sfp_lock_release>:
 8012bbc:	4801      	ldr	r0, [pc, #4]	; (8012bc4 <__sfp_lock_release+0x8>)
 8012bbe:	f000 b8b3 	b.w	8012d28 <__retarget_lock_release_recursive>
 8012bc2:	bf00      	nop
 8012bc4:	240007fc 	.word	0x240007fc

08012bc8 <__sinit_lock_acquire>:
 8012bc8:	4801      	ldr	r0, [pc, #4]	; (8012bd0 <__sinit_lock_acquire+0x8>)
 8012bca:	f000 b8ac 	b.w	8012d26 <__retarget_lock_acquire_recursive>
 8012bce:	bf00      	nop
 8012bd0:	240007f7 	.word	0x240007f7

08012bd4 <__sinit_lock_release>:
 8012bd4:	4801      	ldr	r0, [pc, #4]	; (8012bdc <__sinit_lock_release+0x8>)
 8012bd6:	f000 b8a7 	b.w	8012d28 <__retarget_lock_release_recursive>
 8012bda:	bf00      	nop
 8012bdc:	240007f7 	.word	0x240007f7

08012be0 <__sinit>:
 8012be0:	b510      	push	{r4, lr}
 8012be2:	4604      	mov	r4, r0
 8012be4:	f7ff fff0 	bl	8012bc8 <__sinit_lock_acquire>
 8012be8:	69a3      	ldr	r3, [r4, #24]
 8012bea:	b11b      	cbz	r3, 8012bf4 <__sinit+0x14>
 8012bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bf0:	f7ff bff0 	b.w	8012bd4 <__sinit_lock_release>
 8012bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8012bfa:	4b13      	ldr	r3, [pc, #76]	; (8012c48 <__sinit+0x68>)
 8012bfc:	4a13      	ldr	r2, [pc, #76]	; (8012c4c <__sinit+0x6c>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8012c02:	42a3      	cmp	r3, r4
 8012c04:	bf04      	itt	eq
 8012c06:	2301      	moveq	r3, #1
 8012c08:	61a3      	streq	r3, [r4, #24]
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	f000 f820 	bl	8012c50 <__sfp>
 8012c10:	6060      	str	r0, [r4, #4]
 8012c12:	4620      	mov	r0, r4
 8012c14:	f000 f81c 	bl	8012c50 <__sfp>
 8012c18:	60a0      	str	r0, [r4, #8]
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	f000 f818 	bl	8012c50 <__sfp>
 8012c20:	2200      	movs	r2, #0
 8012c22:	60e0      	str	r0, [r4, #12]
 8012c24:	2104      	movs	r1, #4
 8012c26:	6860      	ldr	r0, [r4, #4]
 8012c28:	f7ff ff82 	bl	8012b30 <std>
 8012c2c:	68a0      	ldr	r0, [r4, #8]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	2109      	movs	r1, #9
 8012c32:	f7ff ff7d 	bl	8012b30 <std>
 8012c36:	68e0      	ldr	r0, [r4, #12]
 8012c38:	2202      	movs	r2, #2
 8012c3a:	2112      	movs	r1, #18
 8012c3c:	f7ff ff78 	bl	8012b30 <std>
 8012c40:	2301      	movs	r3, #1
 8012c42:	61a3      	str	r3, [r4, #24]
 8012c44:	e7d2      	b.n	8012bec <__sinit+0xc>
 8012c46:	bf00      	nop
 8012c48:	0801464c 	.word	0x0801464c
 8012c4c:	08012b79 	.word	0x08012b79

08012c50 <__sfp>:
 8012c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c52:	4607      	mov	r7, r0
 8012c54:	f7ff ffac 	bl	8012bb0 <__sfp_lock_acquire>
 8012c58:	4b1e      	ldr	r3, [pc, #120]	; (8012cd4 <__sfp+0x84>)
 8012c5a:	681e      	ldr	r6, [r3, #0]
 8012c5c:	69b3      	ldr	r3, [r6, #24]
 8012c5e:	b913      	cbnz	r3, 8012c66 <__sfp+0x16>
 8012c60:	4630      	mov	r0, r6
 8012c62:	f7ff ffbd 	bl	8012be0 <__sinit>
 8012c66:	3648      	adds	r6, #72	; 0x48
 8012c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012c6c:	3b01      	subs	r3, #1
 8012c6e:	d503      	bpl.n	8012c78 <__sfp+0x28>
 8012c70:	6833      	ldr	r3, [r6, #0]
 8012c72:	b30b      	cbz	r3, 8012cb8 <__sfp+0x68>
 8012c74:	6836      	ldr	r6, [r6, #0]
 8012c76:	e7f7      	b.n	8012c68 <__sfp+0x18>
 8012c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012c7c:	b9d5      	cbnz	r5, 8012cb4 <__sfp+0x64>
 8012c7e:	4b16      	ldr	r3, [pc, #88]	; (8012cd8 <__sfp+0x88>)
 8012c80:	60e3      	str	r3, [r4, #12]
 8012c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012c86:	6665      	str	r5, [r4, #100]	; 0x64
 8012c88:	f000 f84c 	bl	8012d24 <__retarget_lock_init_recursive>
 8012c8c:	f7ff ff96 	bl	8012bbc <__sfp_lock_release>
 8012c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012c98:	6025      	str	r5, [r4, #0]
 8012c9a:	61a5      	str	r5, [r4, #24]
 8012c9c:	2208      	movs	r2, #8
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012ca4:	f7fe fada 	bl	801125c <memset>
 8012ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cb4:	3468      	adds	r4, #104	; 0x68
 8012cb6:	e7d9      	b.n	8012c6c <__sfp+0x1c>
 8012cb8:	2104      	movs	r1, #4
 8012cba:	4638      	mov	r0, r7
 8012cbc:	f7ff ff62 	bl	8012b84 <__sfmoreglue>
 8012cc0:	4604      	mov	r4, r0
 8012cc2:	6030      	str	r0, [r6, #0]
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	d1d5      	bne.n	8012c74 <__sfp+0x24>
 8012cc8:	f7ff ff78 	bl	8012bbc <__sfp_lock_release>
 8012ccc:	230c      	movs	r3, #12
 8012cce:	603b      	str	r3, [r7, #0]
 8012cd0:	e7ee      	b.n	8012cb0 <__sfp+0x60>
 8012cd2:	bf00      	nop
 8012cd4:	0801464c 	.word	0x0801464c
 8012cd8:	ffff0001 	.word	0xffff0001

08012cdc <_fwalk_reent>:
 8012cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ce0:	4606      	mov	r6, r0
 8012ce2:	4688      	mov	r8, r1
 8012ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012ce8:	2700      	movs	r7, #0
 8012cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012cee:	f1b9 0901 	subs.w	r9, r9, #1
 8012cf2:	d505      	bpl.n	8012d00 <_fwalk_reent+0x24>
 8012cf4:	6824      	ldr	r4, [r4, #0]
 8012cf6:	2c00      	cmp	r4, #0
 8012cf8:	d1f7      	bne.n	8012cea <_fwalk_reent+0xe>
 8012cfa:	4638      	mov	r0, r7
 8012cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d00:	89ab      	ldrh	r3, [r5, #12]
 8012d02:	2b01      	cmp	r3, #1
 8012d04:	d907      	bls.n	8012d16 <_fwalk_reent+0x3a>
 8012d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	d003      	beq.n	8012d16 <_fwalk_reent+0x3a>
 8012d0e:	4629      	mov	r1, r5
 8012d10:	4630      	mov	r0, r6
 8012d12:	47c0      	blx	r8
 8012d14:	4307      	orrs	r7, r0
 8012d16:	3568      	adds	r5, #104	; 0x68
 8012d18:	e7e9      	b.n	8012cee <_fwalk_reent+0x12>
	...

08012d1c <_localeconv_r>:
 8012d1c:	4800      	ldr	r0, [pc, #0]	; (8012d20 <_localeconv_r+0x4>)
 8012d1e:	4770      	bx	lr
 8012d20:	24000178 	.word	0x24000178

08012d24 <__retarget_lock_init_recursive>:
 8012d24:	4770      	bx	lr

08012d26 <__retarget_lock_acquire_recursive>:
 8012d26:	4770      	bx	lr

08012d28 <__retarget_lock_release_recursive>:
 8012d28:	4770      	bx	lr

08012d2a <__swhatbuf_r>:
 8012d2a:	b570      	push	{r4, r5, r6, lr}
 8012d2c:	460e      	mov	r6, r1
 8012d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d32:	2900      	cmp	r1, #0
 8012d34:	b096      	sub	sp, #88	; 0x58
 8012d36:	4614      	mov	r4, r2
 8012d38:	461d      	mov	r5, r3
 8012d3a:	da07      	bge.n	8012d4c <__swhatbuf_r+0x22>
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	602b      	str	r3, [r5, #0]
 8012d40:	89b3      	ldrh	r3, [r6, #12]
 8012d42:	061a      	lsls	r2, r3, #24
 8012d44:	d410      	bmi.n	8012d68 <__swhatbuf_r+0x3e>
 8012d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012d4a:	e00e      	b.n	8012d6a <__swhatbuf_r+0x40>
 8012d4c:	466a      	mov	r2, sp
 8012d4e:	f000 fe9f 	bl	8013a90 <_fstat_r>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	dbf2      	blt.n	8012d3c <__swhatbuf_r+0x12>
 8012d56:	9a01      	ldr	r2, [sp, #4]
 8012d58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012d5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012d60:	425a      	negs	r2, r3
 8012d62:	415a      	adcs	r2, r3
 8012d64:	602a      	str	r2, [r5, #0]
 8012d66:	e7ee      	b.n	8012d46 <__swhatbuf_r+0x1c>
 8012d68:	2340      	movs	r3, #64	; 0x40
 8012d6a:	2000      	movs	r0, #0
 8012d6c:	6023      	str	r3, [r4, #0]
 8012d6e:	b016      	add	sp, #88	; 0x58
 8012d70:	bd70      	pop	{r4, r5, r6, pc}
	...

08012d74 <__smakebuf_r>:
 8012d74:	898b      	ldrh	r3, [r1, #12]
 8012d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012d78:	079d      	lsls	r5, r3, #30
 8012d7a:	4606      	mov	r6, r0
 8012d7c:	460c      	mov	r4, r1
 8012d7e:	d507      	bpl.n	8012d90 <__smakebuf_r+0x1c>
 8012d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012d84:	6023      	str	r3, [r4, #0]
 8012d86:	6123      	str	r3, [r4, #16]
 8012d88:	2301      	movs	r3, #1
 8012d8a:	6163      	str	r3, [r4, #20]
 8012d8c:	b002      	add	sp, #8
 8012d8e:	bd70      	pop	{r4, r5, r6, pc}
 8012d90:	ab01      	add	r3, sp, #4
 8012d92:	466a      	mov	r2, sp
 8012d94:	f7ff ffc9 	bl	8012d2a <__swhatbuf_r>
 8012d98:	9900      	ldr	r1, [sp, #0]
 8012d9a:	4605      	mov	r5, r0
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	f000 fc1d 	bl	80135dc <_malloc_r>
 8012da2:	b948      	cbnz	r0, 8012db8 <__smakebuf_r+0x44>
 8012da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012da8:	059a      	lsls	r2, r3, #22
 8012daa:	d4ef      	bmi.n	8012d8c <__smakebuf_r+0x18>
 8012dac:	f023 0303 	bic.w	r3, r3, #3
 8012db0:	f043 0302 	orr.w	r3, r3, #2
 8012db4:	81a3      	strh	r3, [r4, #12]
 8012db6:	e7e3      	b.n	8012d80 <__smakebuf_r+0xc>
 8012db8:	4b0d      	ldr	r3, [pc, #52]	; (8012df0 <__smakebuf_r+0x7c>)
 8012dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8012dbc:	89a3      	ldrh	r3, [r4, #12]
 8012dbe:	6020      	str	r0, [r4, #0]
 8012dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012dc4:	81a3      	strh	r3, [r4, #12]
 8012dc6:	9b00      	ldr	r3, [sp, #0]
 8012dc8:	6163      	str	r3, [r4, #20]
 8012dca:	9b01      	ldr	r3, [sp, #4]
 8012dcc:	6120      	str	r0, [r4, #16]
 8012dce:	b15b      	cbz	r3, 8012de8 <__smakebuf_r+0x74>
 8012dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	f000 fe6d 	bl	8013ab4 <_isatty_r>
 8012dda:	b128      	cbz	r0, 8012de8 <__smakebuf_r+0x74>
 8012ddc:	89a3      	ldrh	r3, [r4, #12]
 8012dde:	f023 0303 	bic.w	r3, r3, #3
 8012de2:	f043 0301 	orr.w	r3, r3, #1
 8012de6:	81a3      	strh	r3, [r4, #12]
 8012de8:	89a0      	ldrh	r0, [r4, #12]
 8012dea:	4305      	orrs	r5, r0
 8012dec:	81a5      	strh	r5, [r4, #12]
 8012dee:	e7cd      	b.n	8012d8c <__smakebuf_r+0x18>
 8012df0:	08012b79 	.word	0x08012b79

08012df4 <malloc>:
 8012df4:	4b02      	ldr	r3, [pc, #8]	; (8012e00 <malloc+0xc>)
 8012df6:	4601      	mov	r1, r0
 8012df8:	6818      	ldr	r0, [r3, #0]
 8012dfa:	f000 bbef 	b.w	80135dc <_malloc_r>
 8012dfe:	bf00      	nop
 8012e00:	24000024 	.word	0x24000024

08012e04 <memcpy>:
 8012e04:	440a      	add	r2, r1
 8012e06:	4291      	cmp	r1, r2
 8012e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e0c:	d100      	bne.n	8012e10 <memcpy+0xc>
 8012e0e:	4770      	bx	lr
 8012e10:	b510      	push	{r4, lr}
 8012e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e1a:	4291      	cmp	r1, r2
 8012e1c:	d1f9      	bne.n	8012e12 <memcpy+0xe>
 8012e1e:	bd10      	pop	{r4, pc}

08012e20 <_Balloc>:
 8012e20:	b570      	push	{r4, r5, r6, lr}
 8012e22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e24:	4604      	mov	r4, r0
 8012e26:	460d      	mov	r5, r1
 8012e28:	b976      	cbnz	r6, 8012e48 <_Balloc+0x28>
 8012e2a:	2010      	movs	r0, #16
 8012e2c:	f7ff ffe2 	bl	8012df4 <malloc>
 8012e30:	4602      	mov	r2, r0
 8012e32:	6260      	str	r0, [r4, #36]	; 0x24
 8012e34:	b920      	cbnz	r0, 8012e40 <_Balloc+0x20>
 8012e36:	4b18      	ldr	r3, [pc, #96]	; (8012e98 <_Balloc+0x78>)
 8012e38:	4818      	ldr	r0, [pc, #96]	; (8012e9c <_Balloc+0x7c>)
 8012e3a:	2166      	movs	r1, #102	; 0x66
 8012e3c:	f000 fde8 	bl	8013a10 <__assert_func>
 8012e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e44:	6006      	str	r6, [r0, #0]
 8012e46:	60c6      	str	r6, [r0, #12]
 8012e48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012e4a:	68f3      	ldr	r3, [r6, #12]
 8012e4c:	b183      	cbz	r3, 8012e70 <_Balloc+0x50>
 8012e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e50:	68db      	ldr	r3, [r3, #12]
 8012e52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012e56:	b9b8      	cbnz	r0, 8012e88 <_Balloc+0x68>
 8012e58:	2101      	movs	r1, #1
 8012e5a:	fa01 f605 	lsl.w	r6, r1, r5
 8012e5e:	1d72      	adds	r2, r6, #5
 8012e60:	0092      	lsls	r2, r2, #2
 8012e62:	4620      	mov	r0, r4
 8012e64:	f000 fb5a 	bl	801351c <_calloc_r>
 8012e68:	b160      	cbz	r0, 8012e84 <_Balloc+0x64>
 8012e6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012e6e:	e00e      	b.n	8012e8e <_Balloc+0x6e>
 8012e70:	2221      	movs	r2, #33	; 0x21
 8012e72:	2104      	movs	r1, #4
 8012e74:	4620      	mov	r0, r4
 8012e76:	f000 fb51 	bl	801351c <_calloc_r>
 8012e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e7c:	60f0      	str	r0, [r6, #12]
 8012e7e:	68db      	ldr	r3, [r3, #12]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1e4      	bne.n	8012e4e <_Balloc+0x2e>
 8012e84:	2000      	movs	r0, #0
 8012e86:	bd70      	pop	{r4, r5, r6, pc}
 8012e88:	6802      	ldr	r2, [r0, #0]
 8012e8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e8e:	2300      	movs	r3, #0
 8012e90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012e94:	e7f7      	b.n	8012e86 <_Balloc+0x66>
 8012e96:	bf00      	nop
 8012e98:	08014691 	.word	0x08014691
 8012e9c:	08014778 	.word	0x08014778

08012ea0 <_Bfree>:
 8012ea0:	b570      	push	{r4, r5, r6, lr}
 8012ea2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012ea4:	4605      	mov	r5, r0
 8012ea6:	460c      	mov	r4, r1
 8012ea8:	b976      	cbnz	r6, 8012ec8 <_Bfree+0x28>
 8012eaa:	2010      	movs	r0, #16
 8012eac:	f7ff ffa2 	bl	8012df4 <malloc>
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	6268      	str	r0, [r5, #36]	; 0x24
 8012eb4:	b920      	cbnz	r0, 8012ec0 <_Bfree+0x20>
 8012eb6:	4b09      	ldr	r3, [pc, #36]	; (8012edc <_Bfree+0x3c>)
 8012eb8:	4809      	ldr	r0, [pc, #36]	; (8012ee0 <_Bfree+0x40>)
 8012eba:	218a      	movs	r1, #138	; 0x8a
 8012ebc:	f000 fda8 	bl	8013a10 <__assert_func>
 8012ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ec4:	6006      	str	r6, [r0, #0]
 8012ec6:	60c6      	str	r6, [r0, #12]
 8012ec8:	b13c      	cbz	r4, 8012eda <_Bfree+0x3a>
 8012eca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012ecc:	6862      	ldr	r2, [r4, #4]
 8012ece:	68db      	ldr	r3, [r3, #12]
 8012ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ed4:	6021      	str	r1, [r4, #0]
 8012ed6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012eda:	bd70      	pop	{r4, r5, r6, pc}
 8012edc:	08014691 	.word	0x08014691
 8012ee0:	08014778 	.word	0x08014778

08012ee4 <__multadd>:
 8012ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee8:	690e      	ldr	r6, [r1, #16]
 8012eea:	4607      	mov	r7, r0
 8012eec:	4698      	mov	r8, r3
 8012eee:	460c      	mov	r4, r1
 8012ef0:	f101 0014 	add.w	r0, r1, #20
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	6805      	ldr	r5, [r0, #0]
 8012ef8:	b2a9      	uxth	r1, r5
 8012efa:	fb02 8101 	mla	r1, r2, r1, r8
 8012efe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012f02:	0c2d      	lsrs	r5, r5, #16
 8012f04:	fb02 c505 	mla	r5, r2, r5, ip
 8012f08:	b289      	uxth	r1, r1
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012f10:	429e      	cmp	r6, r3
 8012f12:	f840 1b04 	str.w	r1, [r0], #4
 8012f16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012f1a:	dcec      	bgt.n	8012ef6 <__multadd+0x12>
 8012f1c:	f1b8 0f00 	cmp.w	r8, #0
 8012f20:	d022      	beq.n	8012f68 <__multadd+0x84>
 8012f22:	68a3      	ldr	r3, [r4, #8]
 8012f24:	42b3      	cmp	r3, r6
 8012f26:	dc19      	bgt.n	8012f5c <__multadd+0x78>
 8012f28:	6861      	ldr	r1, [r4, #4]
 8012f2a:	4638      	mov	r0, r7
 8012f2c:	3101      	adds	r1, #1
 8012f2e:	f7ff ff77 	bl	8012e20 <_Balloc>
 8012f32:	4605      	mov	r5, r0
 8012f34:	b928      	cbnz	r0, 8012f42 <__multadd+0x5e>
 8012f36:	4602      	mov	r2, r0
 8012f38:	4b0d      	ldr	r3, [pc, #52]	; (8012f70 <__multadd+0x8c>)
 8012f3a:	480e      	ldr	r0, [pc, #56]	; (8012f74 <__multadd+0x90>)
 8012f3c:	21b5      	movs	r1, #181	; 0xb5
 8012f3e:	f000 fd67 	bl	8013a10 <__assert_func>
 8012f42:	6922      	ldr	r2, [r4, #16]
 8012f44:	3202      	adds	r2, #2
 8012f46:	f104 010c 	add.w	r1, r4, #12
 8012f4a:	0092      	lsls	r2, r2, #2
 8012f4c:	300c      	adds	r0, #12
 8012f4e:	f7ff ff59 	bl	8012e04 <memcpy>
 8012f52:	4621      	mov	r1, r4
 8012f54:	4638      	mov	r0, r7
 8012f56:	f7ff ffa3 	bl	8012ea0 <_Bfree>
 8012f5a:	462c      	mov	r4, r5
 8012f5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012f60:	3601      	adds	r6, #1
 8012f62:	f8c3 8014 	str.w	r8, [r3, #20]
 8012f66:	6126      	str	r6, [r4, #16]
 8012f68:	4620      	mov	r0, r4
 8012f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f6e:	bf00      	nop
 8012f70:	08014707 	.word	0x08014707
 8012f74:	08014778 	.word	0x08014778

08012f78 <__hi0bits>:
 8012f78:	0c03      	lsrs	r3, r0, #16
 8012f7a:	041b      	lsls	r3, r3, #16
 8012f7c:	b9d3      	cbnz	r3, 8012fb4 <__hi0bits+0x3c>
 8012f7e:	0400      	lsls	r0, r0, #16
 8012f80:	2310      	movs	r3, #16
 8012f82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012f86:	bf04      	itt	eq
 8012f88:	0200      	lsleq	r0, r0, #8
 8012f8a:	3308      	addeq	r3, #8
 8012f8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012f90:	bf04      	itt	eq
 8012f92:	0100      	lsleq	r0, r0, #4
 8012f94:	3304      	addeq	r3, #4
 8012f96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012f9a:	bf04      	itt	eq
 8012f9c:	0080      	lsleq	r0, r0, #2
 8012f9e:	3302      	addeq	r3, #2
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	db05      	blt.n	8012fb0 <__hi0bits+0x38>
 8012fa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012fa8:	f103 0301 	add.w	r3, r3, #1
 8012fac:	bf08      	it	eq
 8012fae:	2320      	moveq	r3, #32
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	4770      	bx	lr
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	e7e4      	b.n	8012f82 <__hi0bits+0xa>

08012fb8 <__lo0bits>:
 8012fb8:	6803      	ldr	r3, [r0, #0]
 8012fba:	f013 0207 	ands.w	r2, r3, #7
 8012fbe:	4601      	mov	r1, r0
 8012fc0:	d00b      	beq.n	8012fda <__lo0bits+0x22>
 8012fc2:	07da      	lsls	r2, r3, #31
 8012fc4:	d424      	bmi.n	8013010 <__lo0bits+0x58>
 8012fc6:	0798      	lsls	r0, r3, #30
 8012fc8:	bf49      	itett	mi
 8012fca:	085b      	lsrmi	r3, r3, #1
 8012fcc:	089b      	lsrpl	r3, r3, #2
 8012fce:	2001      	movmi	r0, #1
 8012fd0:	600b      	strmi	r3, [r1, #0]
 8012fd2:	bf5c      	itt	pl
 8012fd4:	600b      	strpl	r3, [r1, #0]
 8012fd6:	2002      	movpl	r0, #2
 8012fd8:	4770      	bx	lr
 8012fda:	b298      	uxth	r0, r3
 8012fdc:	b9b0      	cbnz	r0, 801300c <__lo0bits+0x54>
 8012fde:	0c1b      	lsrs	r3, r3, #16
 8012fe0:	2010      	movs	r0, #16
 8012fe2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012fe6:	bf04      	itt	eq
 8012fe8:	0a1b      	lsreq	r3, r3, #8
 8012fea:	3008      	addeq	r0, #8
 8012fec:	071a      	lsls	r2, r3, #28
 8012fee:	bf04      	itt	eq
 8012ff0:	091b      	lsreq	r3, r3, #4
 8012ff2:	3004      	addeq	r0, #4
 8012ff4:	079a      	lsls	r2, r3, #30
 8012ff6:	bf04      	itt	eq
 8012ff8:	089b      	lsreq	r3, r3, #2
 8012ffa:	3002      	addeq	r0, #2
 8012ffc:	07da      	lsls	r2, r3, #31
 8012ffe:	d403      	bmi.n	8013008 <__lo0bits+0x50>
 8013000:	085b      	lsrs	r3, r3, #1
 8013002:	f100 0001 	add.w	r0, r0, #1
 8013006:	d005      	beq.n	8013014 <__lo0bits+0x5c>
 8013008:	600b      	str	r3, [r1, #0]
 801300a:	4770      	bx	lr
 801300c:	4610      	mov	r0, r2
 801300e:	e7e8      	b.n	8012fe2 <__lo0bits+0x2a>
 8013010:	2000      	movs	r0, #0
 8013012:	4770      	bx	lr
 8013014:	2020      	movs	r0, #32
 8013016:	4770      	bx	lr

08013018 <__i2b>:
 8013018:	b510      	push	{r4, lr}
 801301a:	460c      	mov	r4, r1
 801301c:	2101      	movs	r1, #1
 801301e:	f7ff feff 	bl	8012e20 <_Balloc>
 8013022:	4602      	mov	r2, r0
 8013024:	b928      	cbnz	r0, 8013032 <__i2b+0x1a>
 8013026:	4b05      	ldr	r3, [pc, #20]	; (801303c <__i2b+0x24>)
 8013028:	4805      	ldr	r0, [pc, #20]	; (8013040 <__i2b+0x28>)
 801302a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801302e:	f000 fcef 	bl	8013a10 <__assert_func>
 8013032:	2301      	movs	r3, #1
 8013034:	6144      	str	r4, [r0, #20]
 8013036:	6103      	str	r3, [r0, #16]
 8013038:	bd10      	pop	{r4, pc}
 801303a:	bf00      	nop
 801303c:	08014707 	.word	0x08014707
 8013040:	08014778 	.word	0x08014778

08013044 <__multiply>:
 8013044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013048:	4614      	mov	r4, r2
 801304a:	690a      	ldr	r2, [r1, #16]
 801304c:	6923      	ldr	r3, [r4, #16]
 801304e:	429a      	cmp	r2, r3
 8013050:	bfb8      	it	lt
 8013052:	460b      	movlt	r3, r1
 8013054:	460d      	mov	r5, r1
 8013056:	bfbc      	itt	lt
 8013058:	4625      	movlt	r5, r4
 801305a:	461c      	movlt	r4, r3
 801305c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013060:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013064:	68ab      	ldr	r3, [r5, #8]
 8013066:	6869      	ldr	r1, [r5, #4]
 8013068:	eb0a 0709 	add.w	r7, sl, r9
 801306c:	42bb      	cmp	r3, r7
 801306e:	b085      	sub	sp, #20
 8013070:	bfb8      	it	lt
 8013072:	3101      	addlt	r1, #1
 8013074:	f7ff fed4 	bl	8012e20 <_Balloc>
 8013078:	b930      	cbnz	r0, 8013088 <__multiply+0x44>
 801307a:	4602      	mov	r2, r0
 801307c:	4b42      	ldr	r3, [pc, #264]	; (8013188 <__multiply+0x144>)
 801307e:	4843      	ldr	r0, [pc, #268]	; (801318c <__multiply+0x148>)
 8013080:	f240 115d 	movw	r1, #349	; 0x15d
 8013084:	f000 fcc4 	bl	8013a10 <__assert_func>
 8013088:	f100 0614 	add.w	r6, r0, #20
 801308c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013090:	4633      	mov	r3, r6
 8013092:	2200      	movs	r2, #0
 8013094:	4543      	cmp	r3, r8
 8013096:	d31e      	bcc.n	80130d6 <__multiply+0x92>
 8013098:	f105 0c14 	add.w	ip, r5, #20
 801309c:	f104 0314 	add.w	r3, r4, #20
 80130a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80130a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80130a8:	9202      	str	r2, [sp, #8]
 80130aa:	ebac 0205 	sub.w	r2, ip, r5
 80130ae:	3a15      	subs	r2, #21
 80130b0:	f022 0203 	bic.w	r2, r2, #3
 80130b4:	3204      	adds	r2, #4
 80130b6:	f105 0115 	add.w	r1, r5, #21
 80130ba:	458c      	cmp	ip, r1
 80130bc:	bf38      	it	cc
 80130be:	2204      	movcc	r2, #4
 80130c0:	9201      	str	r2, [sp, #4]
 80130c2:	9a02      	ldr	r2, [sp, #8]
 80130c4:	9303      	str	r3, [sp, #12]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d808      	bhi.n	80130dc <__multiply+0x98>
 80130ca:	2f00      	cmp	r7, #0
 80130cc:	dc55      	bgt.n	801317a <__multiply+0x136>
 80130ce:	6107      	str	r7, [r0, #16]
 80130d0:	b005      	add	sp, #20
 80130d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130d6:	f843 2b04 	str.w	r2, [r3], #4
 80130da:	e7db      	b.n	8013094 <__multiply+0x50>
 80130dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80130e0:	f1ba 0f00 	cmp.w	sl, #0
 80130e4:	d020      	beq.n	8013128 <__multiply+0xe4>
 80130e6:	f105 0e14 	add.w	lr, r5, #20
 80130ea:	46b1      	mov	r9, r6
 80130ec:	2200      	movs	r2, #0
 80130ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 80130f2:	f8d9 b000 	ldr.w	fp, [r9]
 80130f6:	b2a1      	uxth	r1, r4
 80130f8:	fa1f fb8b 	uxth.w	fp, fp
 80130fc:	fb0a b101 	mla	r1, sl, r1, fp
 8013100:	4411      	add	r1, r2
 8013102:	f8d9 2000 	ldr.w	r2, [r9]
 8013106:	0c24      	lsrs	r4, r4, #16
 8013108:	0c12      	lsrs	r2, r2, #16
 801310a:	fb0a 2404 	mla	r4, sl, r4, r2
 801310e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013112:	b289      	uxth	r1, r1
 8013114:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013118:	45f4      	cmp	ip, lr
 801311a:	f849 1b04 	str.w	r1, [r9], #4
 801311e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013122:	d8e4      	bhi.n	80130ee <__multiply+0xaa>
 8013124:	9901      	ldr	r1, [sp, #4]
 8013126:	5072      	str	r2, [r6, r1]
 8013128:	9a03      	ldr	r2, [sp, #12]
 801312a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801312e:	3304      	adds	r3, #4
 8013130:	f1b9 0f00 	cmp.w	r9, #0
 8013134:	d01f      	beq.n	8013176 <__multiply+0x132>
 8013136:	6834      	ldr	r4, [r6, #0]
 8013138:	f105 0114 	add.w	r1, r5, #20
 801313c:	46b6      	mov	lr, r6
 801313e:	f04f 0a00 	mov.w	sl, #0
 8013142:	880a      	ldrh	r2, [r1, #0]
 8013144:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013148:	fb09 b202 	mla	r2, r9, r2, fp
 801314c:	4492      	add	sl, r2
 801314e:	b2a4      	uxth	r4, r4
 8013150:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013154:	f84e 4b04 	str.w	r4, [lr], #4
 8013158:	f851 4b04 	ldr.w	r4, [r1], #4
 801315c:	f8be 2000 	ldrh.w	r2, [lr]
 8013160:	0c24      	lsrs	r4, r4, #16
 8013162:	fb09 2404 	mla	r4, r9, r4, r2
 8013166:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801316a:	458c      	cmp	ip, r1
 801316c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013170:	d8e7      	bhi.n	8013142 <__multiply+0xfe>
 8013172:	9a01      	ldr	r2, [sp, #4]
 8013174:	50b4      	str	r4, [r6, r2]
 8013176:	3604      	adds	r6, #4
 8013178:	e7a3      	b.n	80130c2 <__multiply+0x7e>
 801317a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801317e:	2b00      	cmp	r3, #0
 8013180:	d1a5      	bne.n	80130ce <__multiply+0x8a>
 8013182:	3f01      	subs	r7, #1
 8013184:	e7a1      	b.n	80130ca <__multiply+0x86>
 8013186:	bf00      	nop
 8013188:	08014707 	.word	0x08014707
 801318c:	08014778 	.word	0x08014778

08013190 <__pow5mult>:
 8013190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013194:	4615      	mov	r5, r2
 8013196:	f012 0203 	ands.w	r2, r2, #3
 801319a:	4606      	mov	r6, r0
 801319c:	460f      	mov	r7, r1
 801319e:	d007      	beq.n	80131b0 <__pow5mult+0x20>
 80131a0:	4c25      	ldr	r4, [pc, #148]	; (8013238 <__pow5mult+0xa8>)
 80131a2:	3a01      	subs	r2, #1
 80131a4:	2300      	movs	r3, #0
 80131a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80131aa:	f7ff fe9b 	bl	8012ee4 <__multadd>
 80131ae:	4607      	mov	r7, r0
 80131b0:	10ad      	asrs	r5, r5, #2
 80131b2:	d03d      	beq.n	8013230 <__pow5mult+0xa0>
 80131b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80131b6:	b97c      	cbnz	r4, 80131d8 <__pow5mult+0x48>
 80131b8:	2010      	movs	r0, #16
 80131ba:	f7ff fe1b 	bl	8012df4 <malloc>
 80131be:	4602      	mov	r2, r0
 80131c0:	6270      	str	r0, [r6, #36]	; 0x24
 80131c2:	b928      	cbnz	r0, 80131d0 <__pow5mult+0x40>
 80131c4:	4b1d      	ldr	r3, [pc, #116]	; (801323c <__pow5mult+0xac>)
 80131c6:	481e      	ldr	r0, [pc, #120]	; (8013240 <__pow5mult+0xb0>)
 80131c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80131cc:	f000 fc20 	bl	8013a10 <__assert_func>
 80131d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131d4:	6004      	str	r4, [r0, #0]
 80131d6:	60c4      	str	r4, [r0, #12]
 80131d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80131dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80131e0:	b94c      	cbnz	r4, 80131f6 <__pow5mult+0x66>
 80131e2:	f240 2171 	movw	r1, #625	; 0x271
 80131e6:	4630      	mov	r0, r6
 80131e8:	f7ff ff16 	bl	8013018 <__i2b>
 80131ec:	2300      	movs	r3, #0
 80131ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80131f2:	4604      	mov	r4, r0
 80131f4:	6003      	str	r3, [r0, #0]
 80131f6:	f04f 0900 	mov.w	r9, #0
 80131fa:	07eb      	lsls	r3, r5, #31
 80131fc:	d50a      	bpl.n	8013214 <__pow5mult+0x84>
 80131fe:	4639      	mov	r1, r7
 8013200:	4622      	mov	r2, r4
 8013202:	4630      	mov	r0, r6
 8013204:	f7ff ff1e 	bl	8013044 <__multiply>
 8013208:	4639      	mov	r1, r7
 801320a:	4680      	mov	r8, r0
 801320c:	4630      	mov	r0, r6
 801320e:	f7ff fe47 	bl	8012ea0 <_Bfree>
 8013212:	4647      	mov	r7, r8
 8013214:	106d      	asrs	r5, r5, #1
 8013216:	d00b      	beq.n	8013230 <__pow5mult+0xa0>
 8013218:	6820      	ldr	r0, [r4, #0]
 801321a:	b938      	cbnz	r0, 801322c <__pow5mult+0x9c>
 801321c:	4622      	mov	r2, r4
 801321e:	4621      	mov	r1, r4
 8013220:	4630      	mov	r0, r6
 8013222:	f7ff ff0f 	bl	8013044 <__multiply>
 8013226:	6020      	str	r0, [r4, #0]
 8013228:	f8c0 9000 	str.w	r9, [r0]
 801322c:	4604      	mov	r4, r0
 801322e:	e7e4      	b.n	80131fa <__pow5mult+0x6a>
 8013230:	4638      	mov	r0, r7
 8013232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013236:	bf00      	nop
 8013238:	080148c8 	.word	0x080148c8
 801323c:	08014691 	.word	0x08014691
 8013240:	08014778 	.word	0x08014778

08013244 <__lshift>:
 8013244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013248:	460c      	mov	r4, r1
 801324a:	6849      	ldr	r1, [r1, #4]
 801324c:	6923      	ldr	r3, [r4, #16]
 801324e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013252:	68a3      	ldr	r3, [r4, #8]
 8013254:	4607      	mov	r7, r0
 8013256:	4691      	mov	r9, r2
 8013258:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801325c:	f108 0601 	add.w	r6, r8, #1
 8013260:	42b3      	cmp	r3, r6
 8013262:	db0b      	blt.n	801327c <__lshift+0x38>
 8013264:	4638      	mov	r0, r7
 8013266:	f7ff fddb 	bl	8012e20 <_Balloc>
 801326a:	4605      	mov	r5, r0
 801326c:	b948      	cbnz	r0, 8013282 <__lshift+0x3e>
 801326e:	4602      	mov	r2, r0
 8013270:	4b28      	ldr	r3, [pc, #160]	; (8013314 <__lshift+0xd0>)
 8013272:	4829      	ldr	r0, [pc, #164]	; (8013318 <__lshift+0xd4>)
 8013274:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013278:	f000 fbca 	bl	8013a10 <__assert_func>
 801327c:	3101      	adds	r1, #1
 801327e:	005b      	lsls	r3, r3, #1
 8013280:	e7ee      	b.n	8013260 <__lshift+0x1c>
 8013282:	2300      	movs	r3, #0
 8013284:	f100 0114 	add.w	r1, r0, #20
 8013288:	f100 0210 	add.w	r2, r0, #16
 801328c:	4618      	mov	r0, r3
 801328e:	4553      	cmp	r3, sl
 8013290:	db33      	blt.n	80132fa <__lshift+0xb6>
 8013292:	6920      	ldr	r0, [r4, #16]
 8013294:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013298:	f104 0314 	add.w	r3, r4, #20
 801329c:	f019 091f 	ands.w	r9, r9, #31
 80132a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80132a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80132a8:	d02b      	beq.n	8013302 <__lshift+0xbe>
 80132aa:	f1c9 0e20 	rsb	lr, r9, #32
 80132ae:	468a      	mov	sl, r1
 80132b0:	2200      	movs	r2, #0
 80132b2:	6818      	ldr	r0, [r3, #0]
 80132b4:	fa00 f009 	lsl.w	r0, r0, r9
 80132b8:	4302      	orrs	r2, r0
 80132ba:	f84a 2b04 	str.w	r2, [sl], #4
 80132be:	f853 2b04 	ldr.w	r2, [r3], #4
 80132c2:	459c      	cmp	ip, r3
 80132c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80132c8:	d8f3      	bhi.n	80132b2 <__lshift+0x6e>
 80132ca:	ebac 0304 	sub.w	r3, ip, r4
 80132ce:	3b15      	subs	r3, #21
 80132d0:	f023 0303 	bic.w	r3, r3, #3
 80132d4:	3304      	adds	r3, #4
 80132d6:	f104 0015 	add.w	r0, r4, #21
 80132da:	4584      	cmp	ip, r0
 80132dc:	bf38      	it	cc
 80132de:	2304      	movcc	r3, #4
 80132e0:	50ca      	str	r2, [r1, r3]
 80132e2:	b10a      	cbz	r2, 80132e8 <__lshift+0xa4>
 80132e4:	f108 0602 	add.w	r6, r8, #2
 80132e8:	3e01      	subs	r6, #1
 80132ea:	4638      	mov	r0, r7
 80132ec:	612e      	str	r6, [r5, #16]
 80132ee:	4621      	mov	r1, r4
 80132f0:	f7ff fdd6 	bl	8012ea0 <_Bfree>
 80132f4:	4628      	mov	r0, r5
 80132f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80132fe:	3301      	adds	r3, #1
 8013300:	e7c5      	b.n	801328e <__lshift+0x4a>
 8013302:	3904      	subs	r1, #4
 8013304:	f853 2b04 	ldr.w	r2, [r3], #4
 8013308:	f841 2f04 	str.w	r2, [r1, #4]!
 801330c:	459c      	cmp	ip, r3
 801330e:	d8f9      	bhi.n	8013304 <__lshift+0xc0>
 8013310:	e7ea      	b.n	80132e8 <__lshift+0xa4>
 8013312:	bf00      	nop
 8013314:	08014707 	.word	0x08014707
 8013318:	08014778 	.word	0x08014778

0801331c <__mcmp>:
 801331c:	b530      	push	{r4, r5, lr}
 801331e:	6902      	ldr	r2, [r0, #16]
 8013320:	690c      	ldr	r4, [r1, #16]
 8013322:	1b12      	subs	r2, r2, r4
 8013324:	d10e      	bne.n	8013344 <__mcmp+0x28>
 8013326:	f100 0314 	add.w	r3, r0, #20
 801332a:	3114      	adds	r1, #20
 801332c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013330:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013334:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013338:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801333c:	42a5      	cmp	r5, r4
 801333e:	d003      	beq.n	8013348 <__mcmp+0x2c>
 8013340:	d305      	bcc.n	801334e <__mcmp+0x32>
 8013342:	2201      	movs	r2, #1
 8013344:	4610      	mov	r0, r2
 8013346:	bd30      	pop	{r4, r5, pc}
 8013348:	4283      	cmp	r3, r0
 801334a:	d3f3      	bcc.n	8013334 <__mcmp+0x18>
 801334c:	e7fa      	b.n	8013344 <__mcmp+0x28>
 801334e:	f04f 32ff 	mov.w	r2, #4294967295
 8013352:	e7f7      	b.n	8013344 <__mcmp+0x28>

08013354 <__mdiff>:
 8013354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013358:	460c      	mov	r4, r1
 801335a:	4606      	mov	r6, r0
 801335c:	4611      	mov	r1, r2
 801335e:	4620      	mov	r0, r4
 8013360:	4617      	mov	r7, r2
 8013362:	f7ff ffdb 	bl	801331c <__mcmp>
 8013366:	1e05      	subs	r5, r0, #0
 8013368:	d110      	bne.n	801338c <__mdiff+0x38>
 801336a:	4629      	mov	r1, r5
 801336c:	4630      	mov	r0, r6
 801336e:	f7ff fd57 	bl	8012e20 <_Balloc>
 8013372:	b930      	cbnz	r0, 8013382 <__mdiff+0x2e>
 8013374:	4b39      	ldr	r3, [pc, #228]	; (801345c <__mdiff+0x108>)
 8013376:	4602      	mov	r2, r0
 8013378:	f240 2132 	movw	r1, #562	; 0x232
 801337c:	4838      	ldr	r0, [pc, #224]	; (8013460 <__mdiff+0x10c>)
 801337e:	f000 fb47 	bl	8013a10 <__assert_func>
 8013382:	2301      	movs	r3, #1
 8013384:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801338c:	bfa4      	itt	ge
 801338e:	463b      	movge	r3, r7
 8013390:	4627      	movge	r7, r4
 8013392:	4630      	mov	r0, r6
 8013394:	6879      	ldr	r1, [r7, #4]
 8013396:	bfa6      	itte	ge
 8013398:	461c      	movge	r4, r3
 801339a:	2500      	movge	r5, #0
 801339c:	2501      	movlt	r5, #1
 801339e:	f7ff fd3f 	bl	8012e20 <_Balloc>
 80133a2:	b920      	cbnz	r0, 80133ae <__mdiff+0x5a>
 80133a4:	4b2d      	ldr	r3, [pc, #180]	; (801345c <__mdiff+0x108>)
 80133a6:	4602      	mov	r2, r0
 80133a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80133ac:	e7e6      	b.n	801337c <__mdiff+0x28>
 80133ae:	693e      	ldr	r6, [r7, #16]
 80133b0:	60c5      	str	r5, [r0, #12]
 80133b2:	6925      	ldr	r5, [r4, #16]
 80133b4:	f107 0114 	add.w	r1, r7, #20
 80133b8:	f104 0914 	add.w	r9, r4, #20
 80133bc:	f100 0e14 	add.w	lr, r0, #20
 80133c0:	f107 0210 	add.w	r2, r7, #16
 80133c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80133c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80133cc:	46f2      	mov	sl, lr
 80133ce:	2700      	movs	r7, #0
 80133d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80133d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80133d8:	fa1f f883 	uxth.w	r8, r3
 80133dc:	fa17 f78b 	uxtah	r7, r7, fp
 80133e0:	0c1b      	lsrs	r3, r3, #16
 80133e2:	eba7 0808 	sub.w	r8, r7, r8
 80133e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80133ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80133ee:	fa1f f888 	uxth.w	r8, r8
 80133f2:	141f      	asrs	r7, r3, #16
 80133f4:	454d      	cmp	r5, r9
 80133f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80133fa:	f84a 3b04 	str.w	r3, [sl], #4
 80133fe:	d8e7      	bhi.n	80133d0 <__mdiff+0x7c>
 8013400:	1b2b      	subs	r3, r5, r4
 8013402:	3b15      	subs	r3, #21
 8013404:	f023 0303 	bic.w	r3, r3, #3
 8013408:	3304      	adds	r3, #4
 801340a:	3415      	adds	r4, #21
 801340c:	42a5      	cmp	r5, r4
 801340e:	bf38      	it	cc
 8013410:	2304      	movcc	r3, #4
 8013412:	4419      	add	r1, r3
 8013414:	4473      	add	r3, lr
 8013416:	469e      	mov	lr, r3
 8013418:	460d      	mov	r5, r1
 801341a:	4565      	cmp	r5, ip
 801341c:	d30e      	bcc.n	801343c <__mdiff+0xe8>
 801341e:	f10c 0203 	add.w	r2, ip, #3
 8013422:	1a52      	subs	r2, r2, r1
 8013424:	f022 0203 	bic.w	r2, r2, #3
 8013428:	3903      	subs	r1, #3
 801342a:	458c      	cmp	ip, r1
 801342c:	bf38      	it	cc
 801342e:	2200      	movcc	r2, #0
 8013430:	441a      	add	r2, r3
 8013432:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013436:	b17b      	cbz	r3, 8013458 <__mdiff+0x104>
 8013438:	6106      	str	r6, [r0, #16]
 801343a:	e7a5      	b.n	8013388 <__mdiff+0x34>
 801343c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013440:	fa17 f488 	uxtah	r4, r7, r8
 8013444:	1422      	asrs	r2, r4, #16
 8013446:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801344a:	b2a4      	uxth	r4, r4
 801344c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013450:	f84e 4b04 	str.w	r4, [lr], #4
 8013454:	1417      	asrs	r7, r2, #16
 8013456:	e7e0      	b.n	801341a <__mdiff+0xc6>
 8013458:	3e01      	subs	r6, #1
 801345a:	e7ea      	b.n	8013432 <__mdiff+0xde>
 801345c:	08014707 	.word	0x08014707
 8013460:	08014778 	.word	0x08014778

08013464 <__d2b>:
 8013464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013468:	4689      	mov	r9, r1
 801346a:	2101      	movs	r1, #1
 801346c:	ec57 6b10 	vmov	r6, r7, d0
 8013470:	4690      	mov	r8, r2
 8013472:	f7ff fcd5 	bl	8012e20 <_Balloc>
 8013476:	4604      	mov	r4, r0
 8013478:	b930      	cbnz	r0, 8013488 <__d2b+0x24>
 801347a:	4602      	mov	r2, r0
 801347c:	4b25      	ldr	r3, [pc, #148]	; (8013514 <__d2b+0xb0>)
 801347e:	4826      	ldr	r0, [pc, #152]	; (8013518 <__d2b+0xb4>)
 8013480:	f240 310a 	movw	r1, #778	; 0x30a
 8013484:	f000 fac4 	bl	8013a10 <__assert_func>
 8013488:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801348c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013490:	bb35      	cbnz	r5, 80134e0 <__d2b+0x7c>
 8013492:	2e00      	cmp	r6, #0
 8013494:	9301      	str	r3, [sp, #4]
 8013496:	d028      	beq.n	80134ea <__d2b+0x86>
 8013498:	4668      	mov	r0, sp
 801349a:	9600      	str	r6, [sp, #0]
 801349c:	f7ff fd8c 	bl	8012fb8 <__lo0bits>
 80134a0:	9900      	ldr	r1, [sp, #0]
 80134a2:	b300      	cbz	r0, 80134e6 <__d2b+0x82>
 80134a4:	9a01      	ldr	r2, [sp, #4]
 80134a6:	f1c0 0320 	rsb	r3, r0, #32
 80134aa:	fa02 f303 	lsl.w	r3, r2, r3
 80134ae:	430b      	orrs	r3, r1
 80134b0:	40c2      	lsrs	r2, r0
 80134b2:	6163      	str	r3, [r4, #20]
 80134b4:	9201      	str	r2, [sp, #4]
 80134b6:	9b01      	ldr	r3, [sp, #4]
 80134b8:	61a3      	str	r3, [r4, #24]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	bf14      	ite	ne
 80134be:	2202      	movne	r2, #2
 80134c0:	2201      	moveq	r2, #1
 80134c2:	6122      	str	r2, [r4, #16]
 80134c4:	b1d5      	cbz	r5, 80134fc <__d2b+0x98>
 80134c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80134ca:	4405      	add	r5, r0
 80134cc:	f8c9 5000 	str.w	r5, [r9]
 80134d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80134d4:	f8c8 0000 	str.w	r0, [r8]
 80134d8:	4620      	mov	r0, r4
 80134da:	b003      	add	sp, #12
 80134dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80134e4:	e7d5      	b.n	8013492 <__d2b+0x2e>
 80134e6:	6161      	str	r1, [r4, #20]
 80134e8:	e7e5      	b.n	80134b6 <__d2b+0x52>
 80134ea:	a801      	add	r0, sp, #4
 80134ec:	f7ff fd64 	bl	8012fb8 <__lo0bits>
 80134f0:	9b01      	ldr	r3, [sp, #4]
 80134f2:	6163      	str	r3, [r4, #20]
 80134f4:	2201      	movs	r2, #1
 80134f6:	6122      	str	r2, [r4, #16]
 80134f8:	3020      	adds	r0, #32
 80134fa:	e7e3      	b.n	80134c4 <__d2b+0x60>
 80134fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013500:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013504:	f8c9 0000 	str.w	r0, [r9]
 8013508:	6918      	ldr	r0, [r3, #16]
 801350a:	f7ff fd35 	bl	8012f78 <__hi0bits>
 801350e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013512:	e7df      	b.n	80134d4 <__d2b+0x70>
 8013514:	08014707 	.word	0x08014707
 8013518:	08014778 	.word	0x08014778

0801351c <_calloc_r>:
 801351c:	b513      	push	{r0, r1, r4, lr}
 801351e:	434a      	muls	r2, r1
 8013520:	4611      	mov	r1, r2
 8013522:	9201      	str	r2, [sp, #4]
 8013524:	f000 f85a 	bl	80135dc <_malloc_r>
 8013528:	4604      	mov	r4, r0
 801352a:	b118      	cbz	r0, 8013534 <_calloc_r+0x18>
 801352c:	9a01      	ldr	r2, [sp, #4]
 801352e:	2100      	movs	r1, #0
 8013530:	f7fd fe94 	bl	801125c <memset>
 8013534:	4620      	mov	r0, r4
 8013536:	b002      	add	sp, #8
 8013538:	bd10      	pop	{r4, pc}
	...

0801353c <_free_r>:
 801353c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801353e:	2900      	cmp	r1, #0
 8013540:	d048      	beq.n	80135d4 <_free_r+0x98>
 8013542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013546:	9001      	str	r0, [sp, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	f1a1 0404 	sub.w	r4, r1, #4
 801354e:	bfb8      	it	lt
 8013550:	18e4      	addlt	r4, r4, r3
 8013552:	f000 fae3 	bl	8013b1c <__malloc_lock>
 8013556:	4a20      	ldr	r2, [pc, #128]	; (80135d8 <_free_r+0x9c>)
 8013558:	9801      	ldr	r0, [sp, #4]
 801355a:	6813      	ldr	r3, [r2, #0]
 801355c:	4615      	mov	r5, r2
 801355e:	b933      	cbnz	r3, 801356e <_free_r+0x32>
 8013560:	6063      	str	r3, [r4, #4]
 8013562:	6014      	str	r4, [r2, #0]
 8013564:	b003      	add	sp, #12
 8013566:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801356a:	f000 badd 	b.w	8013b28 <__malloc_unlock>
 801356e:	42a3      	cmp	r3, r4
 8013570:	d90b      	bls.n	801358a <_free_r+0x4e>
 8013572:	6821      	ldr	r1, [r4, #0]
 8013574:	1862      	adds	r2, r4, r1
 8013576:	4293      	cmp	r3, r2
 8013578:	bf04      	itt	eq
 801357a:	681a      	ldreq	r2, [r3, #0]
 801357c:	685b      	ldreq	r3, [r3, #4]
 801357e:	6063      	str	r3, [r4, #4]
 8013580:	bf04      	itt	eq
 8013582:	1852      	addeq	r2, r2, r1
 8013584:	6022      	streq	r2, [r4, #0]
 8013586:	602c      	str	r4, [r5, #0]
 8013588:	e7ec      	b.n	8013564 <_free_r+0x28>
 801358a:	461a      	mov	r2, r3
 801358c:	685b      	ldr	r3, [r3, #4]
 801358e:	b10b      	cbz	r3, 8013594 <_free_r+0x58>
 8013590:	42a3      	cmp	r3, r4
 8013592:	d9fa      	bls.n	801358a <_free_r+0x4e>
 8013594:	6811      	ldr	r1, [r2, #0]
 8013596:	1855      	adds	r5, r2, r1
 8013598:	42a5      	cmp	r5, r4
 801359a:	d10b      	bne.n	80135b4 <_free_r+0x78>
 801359c:	6824      	ldr	r4, [r4, #0]
 801359e:	4421      	add	r1, r4
 80135a0:	1854      	adds	r4, r2, r1
 80135a2:	42a3      	cmp	r3, r4
 80135a4:	6011      	str	r1, [r2, #0]
 80135a6:	d1dd      	bne.n	8013564 <_free_r+0x28>
 80135a8:	681c      	ldr	r4, [r3, #0]
 80135aa:	685b      	ldr	r3, [r3, #4]
 80135ac:	6053      	str	r3, [r2, #4]
 80135ae:	4421      	add	r1, r4
 80135b0:	6011      	str	r1, [r2, #0]
 80135b2:	e7d7      	b.n	8013564 <_free_r+0x28>
 80135b4:	d902      	bls.n	80135bc <_free_r+0x80>
 80135b6:	230c      	movs	r3, #12
 80135b8:	6003      	str	r3, [r0, #0]
 80135ba:	e7d3      	b.n	8013564 <_free_r+0x28>
 80135bc:	6825      	ldr	r5, [r4, #0]
 80135be:	1961      	adds	r1, r4, r5
 80135c0:	428b      	cmp	r3, r1
 80135c2:	bf04      	itt	eq
 80135c4:	6819      	ldreq	r1, [r3, #0]
 80135c6:	685b      	ldreq	r3, [r3, #4]
 80135c8:	6063      	str	r3, [r4, #4]
 80135ca:	bf04      	itt	eq
 80135cc:	1949      	addeq	r1, r1, r5
 80135ce:	6021      	streq	r1, [r4, #0]
 80135d0:	6054      	str	r4, [r2, #4]
 80135d2:	e7c7      	b.n	8013564 <_free_r+0x28>
 80135d4:	b003      	add	sp, #12
 80135d6:	bd30      	pop	{r4, r5, pc}
 80135d8:	24000258 	.word	0x24000258

080135dc <_malloc_r>:
 80135dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135de:	1ccd      	adds	r5, r1, #3
 80135e0:	f025 0503 	bic.w	r5, r5, #3
 80135e4:	3508      	adds	r5, #8
 80135e6:	2d0c      	cmp	r5, #12
 80135e8:	bf38      	it	cc
 80135ea:	250c      	movcc	r5, #12
 80135ec:	2d00      	cmp	r5, #0
 80135ee:	4606      	mov	r6, r0
 80135f0:	db01      	blt.n	80135f6 <_malloc_r+0x1a>
 80135f2:	42a9      	cmp	r1, r5
 80135f4:	d903      	bls.n	80135fe <_malloc_r+0x22>
 80135f6:	230c      	movs	r3, #12
 80135f8:	6033      	str	r3, [r6, #0]
 80135fa:	2000      	movs	r0, #0
 80135fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135fe:	f000 fa8d 	bl	8013b1c <__malloc_lock>
 8013602:	4921      	ldr	r1, [pc, #132]	; (8013688 <_malloc_r+0xac>)
 8013604:	680a      	ldr	r2, [r1, #0]
 8013606:	4614      	mov	r4, r2
 8013608:	b99c      	cbnz	r4, 8013632 <_malloc_r+0x56>
 801360a:	4f20      	ldr	r7, [pc, #128]	; (801368c <_malloc_r+0xb0>)
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	b923      	cbnz	r3, 801361a <_malloc_r+0x3e>
 8013610:	4621      	mov	r1, r4
 8013612:	4630      	mov	r0, r6
 8013614:	f000 f996 	bl	8013944 <_sbrk_r>
 8013618:	6038      	str	r0, [r7, #0]
 801361a:	4629      	mov	r1, r5
 801361c:	4630      	mov	r0, r6
 801361e:	f000 f991 	bl	8013944 <_sbrk_r>
 8013622:	1c43      	adds	r3, r0, #1
 8013624:	d123      	bne.n	801366e <_malloc_r+0x92>
 8013626:	230c      	movs	r3, #12
 8013628:	6033      	str	r3, [r6, #0]
 801362a:	4630      	mov	r0, r6
 801362c:	f000 fa7c 	bl	8013b28 <__malloc_unlock>
 8013630:	e7e3      	b.n	80135fa <_malloc_r+0x1e>
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	1b5b      	subs	r3, r3, r5
 8013636:	d417      	bmi.n	8013668 <_malloc_r+0x8c>
 8013638:	2b0b      	cmp	r3, #11
 801363a:	d903      	bls.n	8013644 <_malloc_r+0x68>
 801363c:	6023      	str	r3, [r4, #0]
 801363e:	441c      	add	r4, r3
 8013640:	6025      	str	r5, [r4, #0]
 8013642:	e004      	b.n	801364e <_malloc_r+0x72>
 8013644:	6863      	ldr	r3, [r4, #4]
 8013646:	42a2      	cmp	r2, r4
 8013648:	bf0c      	ite	eq
 801364a:	600b      	streq	r3, [r1, #0]
 801364c:	6053      	strne	r3, [r2, #4]
 801364e:	4630      	mov	r0, r6
 8013650:	f000 fa6a 	bl	8013b28 <__malloc_unlock>
 8013654:	f104 000b 	add.w	r0, r4, #11
 8013658:	1d23      	adds	r3, r4, #4
 801365a:	f020 0007 	bic.w	r0, r0, #7
 801365e:	1ac2      	subs	r2, r0, r3
 8013660:	d0cc      	beq.n	80135fc <_malloc_r+0x20>
 8013662:	1a1b      	subs	r3, r3, r0
 8013664:	50a3      	str	r3, [r4, r2]
 8013666:	e7c9      	b.n	80135fc <_malloc_r+0x20>
 8013668:	4622      	mov	r2, r4
 801366a:	6864      	ldr	r4, [r4, #4]
 801366c:	e7cc      	b.n	8013608 <_malloc_r+0x2c>
 801366e:	1cc4      	adds	r4, r0, #3
 8013670:	f024 0403 	bic.w	r4, r4, #3
 8013674:	42a0      	cmp	r0, r4
 8013676:	d0e3      	beq.n	8013640 <_malloc_r+0x64>
 8013678:	1a21      	subs	r1, r4, r0
 801367a:	4630      	mov	r0, r6
 801367c:	f000 f962 	bl	8013944 <_sbrk_r>
 8013680:	3001      	adds	r0, #1
 8013682:	d1dd      	bne.n	8013640 <_malloc_r+0x64>
 8013684:	e7cf      	b.n	8013626 <_malloc_r+0x4a>
 8013686:	bf00      	nop
 8013688:	24000258 	.word	0x24000258
 801368c:	2400025c 	.word	0x2400025c

08013690 <__sfputc_r>:
 8013690:	6893      	ldr	r3, [r2, #8]
 8013692:	3b01      	subs	r3, #1
 8013694:	2b00      	cmp	r3, #0
 8013696:	b410      	push	{r4}
 8013698:	6093      	str	r3, [r2, #8]
 801369a:	da08      	bge.n	80136ae <__sfputc_r+0x1e>
 801369c:	6994      	ldr	r4, [r2, #24]
 801369e:	42a3      	cmp	r3, r4
 80136a0:	db01      	blt.n	80136a6 <__sfputc_r+0x16>
 80136a2:	290a      	cmp	r1, #10
 80136a4:	d103      	bne.n	80136ae <__sfputc_r+0x1e>
 80136a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136aa:	f7fe bab1 	b.w	8011c10 <__swbuf_r>
 80136ae:	6813      	ldr	r3, [r2, #0]
 80136b0:	1c58      	adds	r0, r3, #1
 80136b2:	6010      	str	r0, [r2, #0]
 80136b4:	7019      	strb	r1, [r3, #0]
 80136b6:	4608      	mov	r0, r1
 80136b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136bc:	4770      	bx	lr

080136be <__sfputs_r>:
 80136be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136c0:	4606      	mov	r6, r0
 80136c2:	460f      	mov	r7, r1
 80136c4:	4614      	mov	r4, r2
 80136c6:	18d5      	adds	r5, r2, r3
 80136c8:	42ac      	cmp	r4, r5
 80136ca:	d101      	bne.n	80136d0 <__sfputs_r+0x12>
 80136cc:	2000      	movs	r0, #0
 80136ce:	e007      	b.n	80136e0 <__sfputs_r+0x22>
 80136d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136d4:	463a      	mov	r2, r7
 80136d6:	4630      	mov	r0, r6
 80136d8:	f7ff ffda 	bl	8013690 <__sfputc_r>
 80136dc:	1c43      	adds	r3, r0, #1
 80136de:	d1f3      	bne.n	80136c8 <__sfputs_r+0xa>
 80136e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080136e4 <_vfiprintf_r>:
 80136e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e8:	460d      	mov	r5, r1
 80136ea:	b09d      	sub	sp, #116	; 0x74
 80136ec:	4614      	mov	r4, r2
 80136ee:	4698      	mov	r8, r3
 80136f0:	4606      	mov	r6, r0
 80136f2:	b118      	cbz	r0, 80136fc <_vfiprintf_r+0x18>
 80136f4:	6983      	ldr	r3, [r0, #24]
 80136f6:	b90b      	cbnz	r3, 80136fc <_vfiprintf_r+0x18>
 80136f8:	f7ff fa72 	bl	8012be0 <__sinit>
 80136fc:	4b89      	ldr	r3, [pc, #548]	; (8013924 <_vfiprintf_r+0x240>)
 80136fe:	429d      	cmp	r5, r3
 8013700:	d11b      	bne.n	801373a <_vfiprintf_r+0x56>
 8013702:	6875      	ldr	r5, [r6, #4]
 8013704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013706:	07d9      	lsls	r1, r3, #31
 8013708:	d405      	bmi.n	8013716 <_vfiprintf_r+0x32>
 801370a:	89ab      	ldrh	r3, [r5, #12]
 801370c:	059a      	lsls	r2, r3, #22
 801370e:	d402      	bmi.n	8013716 <_vfiprintf_r+0x32>
 8013710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013712:	f7ff fb08 	bl	8012d26 <__retarget_lock_acquire_recursive>
 8013716:	89ab      	ldrh	r3, [r5, #12]
 8013718:	071b      	lsls	r3, r3, #28
 801371a:	d501      	bpl.n	8013720 <_vfiprintf_r+0x3c>
 801371c:	692b      	ldr	r3, [r5, #16]
 801371e:	b9eb      	cbnz	r3, 801375c <_vfiprintf_r+0x78>
 8013720:	4629      	mov	r1, r5
 8013722:	4630      	mov	r0, r6
 8013724:	f7fe fac6 	bl	8011cb4 <__swsetup_r>
 8013728:	b1c0      	cbz	r0, 801375c <_vfiprintf_r+0x78>
 801372a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801372c:	07dc      	lsls	r4, r3, #31
 801372e:	d50e      	bpl.n	801374e <_vfiprintf_r+0x6a>
 8013730:	f04f 30ff 	mov.w	r0, #4294967295
 8013734:	b01d      	add	sp, #116	; 0x74
 8013736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801373a:	4b7b      	ldr	r3, [pc, #492]	; (8013928 <_vfiprintf_r+0x244>)
 801373c:	429d      	cmp	r5, r3
 801373e:	d101      	bne.n	8013744 <_vfiprintf_r+0x60>
 8013740:	68b5      	ldr	r5, [r6, #8]
 8013742:	e7df      	b.n	8013704 <_vfiprintf_r+0x20>
 8013744:	4b79      	ldr	r3, [pc, #484]	; (801392c <_vfiprintf_r+0x248>)
 8013746:	429d      	cmp	r5, r3
 8013748:	bf08      	it	eq
 801374a:	68f5      	ldreq	r5, [r6, #12]
 801374c:	e7da      	b.n	8013704 <_vfiprintf_r+0x20>
 801374e:	89ab      	ldrh	r3, [r5, #12]
 8013750:	0598      	lsls	r0, r3, #22
 8013752:	d4ed      	bmi.n	8013730 <_vfiprintf_r+0x4c>
 8013754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013756:	f7ff fae7 	bl	8012d28 <__retarget_lock_release_recursive>
 801375a:	e7e9      	b.n	8013730 <_vfiprintf_r+0x4c>
 801375c:	2300      	movs	r3, #0
 801375e:	9309      	str	r3, [sp, #36]	; 0x24
 8013760:	2320      	movs	r3, #32
 8013762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013766:	f8cd 800c 	str.w	r8, [sp, #12]
 801376a:	2330      	movs	r3, #48	; 0x30
 801376c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013930 <_vfiprintf_r+0x24c>
 8013770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013774:	f04f 0901 	mov.w	r9, #1
 8013778:	4623      	mov	r3, r4
 801377a:	469a      	mov	sl, r3
 801377c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013780:	b10a      	cbz	r2, 8013786 <_vfiprintf_r+0xa2>
 8013782:	2a25      	cmp	r2, #37	; 0x25
 8013784:	d1f9      	bne.n	801377a <_vfiprintf_r+0x96>
 8013786:	ebba 0b04 	subs.w	fp, sl, r4
 801378a:	d00b      	beq.n	80137a4 <_vfiprintf_r+0xc0>
 801378c:	465b      	mov	r3, fp
 801378e:	4622      	mov	r2, r4
 8013790:	4629      	mov	r1, r5
 8013792:	4630      	mov	r0, r6
 8013794:	f7ff ff93 	bl	80136be <__sfputs_r>
 8013798:	3001      	adds	r0, #1
 801379a:	f000 80aa 	beq.w	80138f2 <_vfiprintf_r+0x20e>
 801379e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137a0:	445a      	add	r2, fp
 80137a2:	9209      	str	r2, [sp, #36]	; 0x24
 80137a4:	f89a 3000 	ldrb.w	r3, [sl]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	f000 80a2 	beq.w	80138f2 <_vfiprintf_r+0x20e>
 80137ae:	2300      	movs	r3, #0
 80137b0:	f04f 32ff 	mov.w	r2, #4294967295
 80137b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137b8:	f10a 0a01 	add.w	sl, sl, #1
 80137bc:	9304      	str	r3, [sp, #16]
 80137be:	9307      	str	r3, [sp, #28]
 80137c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137c4:	931a      	str	r3, [sp, #104]	; 0x68
 80137c6:	4654      	mov	r4, sl
 80137c8:	2205      	movs	r2, #5
 80137ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137ce:	4858      	ldr	r0, [pc, #352]	; (8013930 <_vfiprintf_r+0x24c>)
 80137d0:	f7ec fd8e 	bl	80002f0 <memchr>
 80137d4:	9a04      	ldr	r2, [sp, #16]
 80137d6:	b9d8      	cbnz	r0, 8013810 <_vfiprintf_r+0x12c>
 80137d8:	06d1      	lsls	r1, r2, #27
 80137da:	bf44      	itt	mi
 80137dc:	2320      	movmi	r3, #32
 80137de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137e2:	0713      	lsls	r3, r2, #28
 80137e4:	bf44      	itt	mi
 80137e6:	232b      	movmi	r3, #43	; 0x2b
 80137e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137ec:	f89a 3000 	ldrb.w	r3, [sl]
 80137f0:	2b2a      	cmp	r3, #42	; 0x2a
 80137f2:	d015      	beq.n	8013820 <_vfiprintf_r+0x13c>
 80137f4:	9a07      	ldr	r2, [sp, #28]
 80137f6:	4654      	mov	r4, sl
 80137f8:	2000      	movs	r0, #0
 80137fa:	f04f 0c0a 	mov.w	ip, #10
 80137fe:	4621      	mov	r1, r4
 8013800:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013804:	3b30      	subs	r3, #48	; 0x30
 8013806:	2b09      	cmp	r3, #9
 8013808:	d94e      	bls.n	80138a8 <_vfiprintf_r+0x1c4>
 801380a:	b1b0      	cbz	r0, 801383a <_vfiprintf_r+0x156>
 801380c:	9207      	str	r2, [sp, #28]
 801380e:	e014      	b.n	801383a <_vfiprintf_r+0x156>
 8013810:	eba0 0308 	sub.w	r3, r0, r8
 8013814:	fa09 f303 	lsl.w	r3, r9, r3
 8013818:	4313      	orrs	r3, r2
 801381a:	9304      	str	r3, [sp, #16]
 801381c:	46a2      	mov	sl, r4
 801381e:	e7d2      	b.n	80137c6 <_vfiprintf_r+0xe2>
 8013820:	9b03      	ldr	r3, [sp, #12]
 8013822:	1d19      	adds	r1, r3, #4
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	9103      	str	r1, [sp, #12]
 8013828:	2b00      	cmp	r3, #0
 801382a:	bfbb      	ittet	lt
 801382c:	425b      	neglt	r3, r3
 801382e:	f042 0202 	orrlt.w	r2, r2, #2
 8013832:	9307      	strge	r3, [sp, #28]
 8013834:	9307      	strlt	r3, [sp, #28]
 8013836:	bfb8      	it	lt
 8013838:	9204      	strlt	r2, [sp, #16]
 801383a:	7823      	ldrb	r3, [r4, #0]
 801383c:	2b2e      	cmp	r3, #46	; 0x2e
 801383e:	d10c      	bne.n	801385a <_vfiprintf_r+0x176>
 8013840:	7863      	ldrb	r3, [r4, #1]
 8013842:	2b2a      	cmp	r3, #42	; 0x2a
 8013844:	d135      	bne.n	80138b2 <_vfiprintf_r+0x1ce>
 8013846:	9b03      	ldr	r3, [sp, #12]
 8013848:	1d1a      	adds	r2, r3, #4
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	9203      	str	r2, [sp, #12]
 801384e:	2b00      	cmp	r3, #0
 8013850:	bfb8      	it	lt
 8013852:	f04f 33ff 	movlt.w	r3, #4294967295
 8013856:	3402      	adds	r4, #2
 8013858:	9305      	str	r3, [sp, #20]
 801385a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013940 <_vfiprintf_r+0x25c>
 801385e:	7821      	ldrb	r1, [r4, #0]
 8013860:	2203      	movs	r2, #3
 8013862:	4650      	mov	r0, sl
 8013864:	f7ec fd44 	bl	80002f0 <memchr>
 8013868:	b140      	cbz	r0, 801387c <_vfiprintf_r+0x198>
 801386a:	2340      	movs	r3, #64	; 0x40
 801386c:	eba0 000a 	sub.w	r0, r0, sl
 8013870:	fa03 f000 	lsl.w	r0, r3, r0
 8013874:	9b04      	ldr	r3, [sp, #16]
 8013876:	4303      	orrs	r3, r0
 8013878:	3401      	adds	r4, #1
 801387a:	9304      	str	r3, [sp, #16]
 801387c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013880:	482c      	ldr	r0, [pc, #176]	; (8013934 <_vfiprintf_r+0x250>)
 8013882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013886:	2206      	movs	r2, #6
 8013888:	f7ec fd32 	bl	80002f0 <memchr>
 801388c:	2800      	cmp	r0, #0
 801388e:	d03f      	beq.n	8013910 <_vfiprintf_r+0x22c>
 8013890:	4b29      	ldr	r3, [pc, #164]	; (8013938 <_vfiprintf_r+0x254>)
 8013892:	bb1b      	cbnz	r3, 80138dc <_vfiprintf_r+0x1f8>
 8013894:	9b03      	ldr	r3, [sp, #12]
 8013896:	3307      	adds	r3, #7
 8013898:	f023 0307 	bic.w	r3, r3, #7
 801389c:	3308      	adds	r3, #8
 801389e:	9303      	str	r3, [sp, #12]
 80138a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138a2:	443b      	add	r3, r7
 80138a4:	9309      	str	r3, [sp, #36]	; 0x24
 80138a6:	e767      	b.n	8013778 <_vfiprintf_r+0x94>
 80138a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80138ac:	460c      	mov	r4, r1
 80138ae:	2001      	movs	r0, #1
 80138b0:	e7a5      	b.n	80137fe <_vfiprintf_r+0x11a>
 80138b2:	2300      	movs	r3, #0
 80138b4:	3401      	adds	r4, #1
 80138b6:	9305      	str	r3, [sp, #20]
 80138b8:	4619      	mov	r1, r3
 80138ba:	f04f 0c0a 	mov.w	ip, #10
 80138be:	4620      	mov	r0, r4
 80138c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138c4:	3a30      	subs	r2, #48	; 0x30
 80138c6:	2a09      	cmp	r2, #9
 80138c8:	d903      	bls.n	80138d2 <_vfiprintf_r+0x1ee>
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d0c5      	beq.n	801385a <_vfiprintf_r+0x176>
 80138ce:	9105      	str	r1, [sp, #20]
 80138d0:	e7c3      	b.n	801385a <_vfiprintf_r+0x176>
 80138d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80138d6:	4604      	mov	r4, r0
 80138d8:	2301      	movs	r3, #1
 80138da:	e7f0      	b.n	80138be <_vfiprintf_r+0x1da>
 80138dc:	ab03      	add	r3, sp, #12
 80138de:	9300      	str	r3, [sp, #0]
 80138e0:	462a      	mov	r2, r5
 80138e2:	4b16      	ldr	r3, [pc, #88]	; (801393c <_vfiprintf_r+0x258>)
 80138e4:	a904      	add	r1, sp, #16
 80138e6:	4630      	mov	r0, r6
 80138e8:	f7fd fd52 	bl	8011390 <_printf_float>
 80138ec:	4607      	mov	r7, r0
 80138ee:	1c78      	adds	r0, r7, #1
 80138f0:	d1d6      	bne.n	80138a0 <_vfiprintf_r+0x1bc>
 80138f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80138f4:	07d9      	lsls	r1, r3, #31
 80138f6:	d405      	bmi.n	8013904 <_vfiprintf_r+0x220>
 80138f8:	89ab      	ldrh	r3, [r5, #12]
 80138fa:	059a      	lsls	r2, r3, #22
 80138fc:	d402      	bmi.n	8013904 <_vfiprintf_r+0x220>
 80138fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013900:	f7ff fa12 	bl	8012d28 <__retarget_lock_release_recursive>
 8013904:	89ab      	ldrh	r3, [r5, #12]
 8013906:	065b      	lsls	r3, r3, #25
 8013908:	f53f af12 	bmi.w	8013730 <_vfiprintf_r+0x4c>
 801390c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801390e:	e711      	b.n	8013734 <_vfiprintf_r+0x50>
 8013910:	ab03      	add	r3, sp, #12
 8013912:	9300      	str	r3, [sp, #0]
 8013914:	462a      	mov	r2, r5
 8013916:	4b09      	ldr	r3, [pc, #36]	; (801393c <_vfiprintf_r+0x258>)
 8013918:	a904      	add	r1, sp, #16
 801391a:	4630      	mov	r0, r6
 801391c:	f7fd ffc4 	bl	80118a8 <_printf_i>
 8013920:	e7e4      	b.n	80138ec <_vfiprintf_r+0x208>
 8013922:	bf00      	nop
 8013924:	08014738 	.word	0x08014738
 8013928:	08014758 	.word	0x08014758
 801392c:	08014718 	.word	0x08014718
 8013930:	080148d4 	.word	0x080148d4
 8013934:	080148de 	.word	0x080148de
 8013938:	08011391 	.word	0x08011391
 801393c:	080136bf 	.word	0x080136bf
 8013940:	080148da 	.word	0x080148da

08013944 <_sbrk_r>:
 8013944:	b538      	push	{r3, r4, r5, lr}
 8013946:	4d06      	ldr	r5, [pc, #24]	; (8013960 <_sbrk_r+0x1c>)
 8013948:	2300      	movs	r3, #0
 801394a:	4604      	mov	r4, r0
 801394c:	4608      	mov	r0, r1
 801394e:	602b      	str	r3, [r5, #0]
 8013950:	f7f0 fed6 	bl	8004700 <_sbrk>
 8013954:	1c43      	adds	r3, r0, #1
 8013956:	d102      	bne.n	801395e <_sbrk_r+0x1a>
 8013958:	682b      	ldr	r3, [r5, #0]
 801395a:	b103      	cbz	r3, 801395e <_sbrk_r+0x1a>
 801395c:	6023      	str	r3, [r4, #0]
 801395e:	bd38      	pop	{r3, r4, r5, pc}
 8013960:	24000800 	.word	0x24000800

08013964 <__sread>:
 8013964:	b510      	push	{r4, lr}
 8013966:	460c      	mov	r4, r1
 8013968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801396c:	f000 f8e2 	bl	8013b34 <_read_r>
 8013970:	2800      	cmp	r0, #0
 8013972:	bfab      	itete	ge
 8013974:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013976:	89a3      	ldrhlt	r3, [r4, #12]
 8013978:	181b      	addge	r3, r3, r0
 801397a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801397e:	bfac      	ite	ge
 8013980:	6563      	strge	r3, [r4, #84]	; 0x54
 8013982:	81a3      	strhlt	r3, [r4, #12]
 8013984:	bd10      	pop	{r4, pc}

08013986 <__swrite>:
 8013986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801398a:	461f      	mov	r7, r3
 801398c:	898b      	ldrh	r3, [r1, #12]
 801398e:	05db      	lsls	r3, r3, #23
 8013990:	4605      	mov	r5, r0
 8013992:	460c      	mov	r4, r1
 8013994:	4616      	mov	r6, r2
 8013996:	d505      	bpl.n	80139a4 <__swrite+0x1e>
 8013998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801399c:	2302      	movs	r3, #2
 801399e:	2200      	movs	r2, #0
 80139a0:	f000 f898 	bl	8013ad4 <_lseek_r>
 80139a4:	89a3      	ldrh	r3, [r4, #12]
 80139a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80139ae:	81a3      	strh	r3, [r4, #12]
 80139b0:	4632      	mov	r2, r6
 80139b2:	463b      	mov	r3, r7
 80139b4:	4628      	mov	r0, r5
 80139b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139ba:	f000 b817 	b.w	80139ec <_write_r>

080139be <__sseek>:
 80139be:	b510      	push	{r4, lr}
 80139c0:	460c      	mov	r4, r1
 80139c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139c6:	f000 f885 	bl	8013ad4 <_lseek_r>
 80139ca:	1c43      	adds	r3, r0, #1
 80139cc:	89a3      	ldrh	r3, [r4, #12]
 80139ce:	bf15      	itete	ne
 80139d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80139d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80139d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80139da:	81a3      	strheq	r3, [r4, #12]
 80139dc:	bf18      	it	ne
 80139de:	81a3      	strhne	r3, [r4, #12]
 80139e0:	bd10      	pop	{r4, pc}

080139e2 <__sclose>:
 80139e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139e6:	f000 b831 	b.w	8013a4c <_close_r>
	...

080139ec <_write_r>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	4d07      	ldr	r5, [pc, #28]	; (8013a0c <_write_r+0x20>)
 80139f0:	4604      	mov	r4, r0
 80139f2:	4608      	mov	r0, r1
 80139f4:	4611      	mov	r1, r2
 80139f6:	2200      	movs	r2, #0
 80139f8:	602a      	str	r2, [r5, #0]
 80139fa:	461a      	mov	r2, r3
 80139fc:	f7ef f8bc 	bl	8002b78 <_write>
 8013a00:	1c43      	adds	r3, r0, #1
 8013a02:	d102      	bne.n	8013a0a <_write_r+0x1e>
 8013a04:	682b      	ldr	r3, [r5, #0]
 8013a06:	b103      	cbz	r3, 8013a0a <_write_r+0x1e>
 8013a08:	6023      	str	r3, [r4, #0]
 8013a0a:	bd38      	pop	{r3, r4, r5, pc}
 8013a0c:	24000800 	.word	0x24000800

08013a10 <__assert_func>:
 8013a10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a12:	4614      	mov	r4, r2
 8013a14:	461a      	mov	r2, r3
 8013a16:	4b09      	ldr	r3, [pc, #36]	; (8013a3c <__assert_func+0x2c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	4605      	mov	r5, r0
 8013a1c:	68d8      	ldr	r0, [r3, #12]
 8013a1e:	b14c      	cbz	r4, 8013a34 <__assert_func+0x24>
 8013a20:	4b07      	ldr	r3, [pc, #28]	; (8013a40 <__assert_func+0x30>)
 8013a22:	9100      	str	r1, [sp, #0]
 8013a24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a28:	4906      	ldr	r1, [pc, #24]	; (8013a44 <__assert_func+0x34>)
 8013a2a:	462b      	mov	r3, r5
 8013a2c:	f000 f81e 	bl	8013a6c <fiprintf>
 8013a30:	f000 f89f 	bl	8013b72 <abort>
 8013a34:	4b04      	ldr	r3, [pc, #16]	; (8013a48 <__assert_func+0x38>)
 8013a36:	461c      	mov	r4, r3
 8013a38:	e7f3      	b.n	8013a22 <__assert_func+0x12>
 8013a3a:	bf00      	nop
 8013a3c:	24000024 	.word	0x24000024
 8013a40:	080148e5 	.word	0x080148e5
 8013a44:	080148f2 	.word	0x080148f2
 8013a48:	08014920 	.word	0x08014920

08013a4c <_close_r>:
 8013a4c:	b538      	push	{r3, r4, r5, lr}
 8013a4e:	4d06      	ldr	r5, [pc, #24]	; (8013a68 <_close_r+0x1c>)
 8013a50:	2300      	movs	r3, #0
 8013a52:	4604      	mov	r4, r0
 8013a54:	4608      	mov	r0, r1
 8013a56:	602b      	str	r3, [r5, #0]
 8013a58:	f7f0 fe1d 	bl	8004696 <_close>
 8013a5c:	1c43      	adds	r3, r0, #1
 8013a5e:	d102      	bne.n	8013a66 <_close_r+0x1a>
 8013a60:	682b      	ldr	r3, [r5, #0]
 8013a62:	b103      	cbz	r3, 8013a66 <_close_r+0x1a>
 8013a64:	6023      	str	r3, [r4, #0]
 8013a66:	bd38      	pop	{r3, r4, r5, pc}
 8013a68:	24000800 	.word	0x24000800

08013a6c <fiprintf>:
 8013a6c:	b40e      	push	{r1, r2, r3}
 8013a6e:	b503      	push	{r0, r1, lr}
 8013a70:	4601      	mov	r1, r0
 8013a72:	ab03      	add	r3, sp, #12
 8013a74:	4805      	ldr	r0, [pc, #20]	; (8013a8c <fiprintf+0x20>)
 8013a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a7a:	6800      	ldr	r0, [r0, #0]
 8013a7c:	9301      	str	r3, [sp, #4]
 8013a7e:	f7ff fe31 	bl	80136e4 <_vfiprintf_r>
 8013a82:	b002      	add	sp, #8
 8013a84:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a88:	b003      	add	sp, #12
 8013a8a:	4770      	bx	lr
 8013a8c:	24000024 	.word	0x24000024

08013a90 <_fstat_r>:
 8013a90:	b538      	push	{r3, r4, r5, lr}
 8013a92:	4d07      	ldr	r5, [pc, #28]	; (8013ab0 <_fstat_r+0x20>)
 8013a94:	2300      	movs	r3, #0
 8013a96:	4604      	mov	r4, r0
 8013a98:	4608      	mov	r0, r1
 8013a9a:	4611      	mov	r1, r2
 8013a9c:	602b      	str	r3, [r5, #0]
 8013a9e:	f7f0 fe06 	bl	80046ae <_fstat>
 8013aa2:	1c43      	adds	r3, r0, #1
 8013aa4:	d102      	bne.n	8013aac <_fstat_r+0x1c>
 8013aa6:	682b      	ldr	r3, [r5, #0]
 8013aa8:	b103      	cbz	r3, 8013aac <_fstat_r+0x1c>
 8013aaa:	6023      	str	r3, [r4, #0]
 8013aac:	bd38      	pop	{r3, r4, r5, pc}
 8013aae:	bf00      	nop
 8013ab0:	24000800 	.word	0x24000800

08013ab4 <_isatty_r>:
 8013ab4:	b538      	push	{r3, r4, r5, lr}
 8013ab6:	4d06      	ldr	r5, [pc, #24]	; (8013ad0 <_isatty_r+0x1c>)
 8013ab8:	2300      	movs	r3, #0
 8013aba:	4604      	mov	r4, r0
 8013abc:	4608      	mov	r0, r1
 8013abe:	602b      	str	r3, [r5, #0]
 8013ac0:	f7f0 fe05 	bl	80046ce <_isatty>
 8013ac4:	1c43      	adds	r3, r0, #1
 8013ac6:	d102      	bne.n	8013ace <_isatty_r+0x1a>
 8013ac8:	682b      	ldr	r3, [r5, #0]
 8013aca:	b103      	cbz	r3, 8013ace <_isatty_r+0x1a>
 8013acc:	6023      	str	r3, [r4, #0]
 8013ace:	bd38      	pop	{r3, r4, r5, pc}
 8013ad0:	24000800 	.word	0x24000800

08013ad4 <_lseek_r>:
 8013ad4:	b538      	push	{r3, r4, r5, lr}
 8013ad6:	4d07      	ldr	r5, [pc, #28]	; (8013af4 <_lseek_r+0x20>)
 8013ad8:	4604      	mov	r4, r0
 8013ada:	4608      	mov	r0, r1
 8013adc:	4611      	mov	r1, r2
 8013ade:	2200      	movs	r2, #0
 8013ae0:	602a      	str	r2, [r5, #0]
 8013ae2:	461a      	mov	r2, r3
 8013ae4:	f7f0 fdfe 	bl	80046e4 <_lseek>
 8013ae8:	1c43      	adds	r3, r0, #1
 8013aea:	d102      	bne.n	8013af2 <_lseek_r+0x1e>
 8013aec:	682b      	ldr	r3, [r5, #0]
 8013aee:	b103      	cbz	r3, 8013af2 <_lseek_r+0x1e>
 8013af0:	6023      	str	r3, [r4, #0]
 8013af2:	bd38      	pop	{r3, r4, r5, pc}
 8013af4:	24000800 	.word	0x24000800

08013af8 <__ascii_mbtowc>:
 8013af8:	b082      	sub	sp, #8
 8013afa:	b901      	cbnz	r1, 8013afe <__ascii_mbtowc+0x6>
 8013afc:	a901      	add	r1, sp, #4
 8013afe:	b142      	cbz	r2, 8013b12 <__ascii_mbtowc+0x1a>
 8013b00:	b14b      	cbz	r3, 8013b16 <__ascii_mbtowc+0x1e>
 8013b02:	7813      	ldrb	r3, [r2, #0]
 8013b04:	600b      	str	r3, [r1, #0]
 8013b06:	7812      	ldrb	r2, [r2, #0]
 8013b08:	1e10      	subs	r0, r2, #0
 8013b0a:	bf18      	it	ne
 8013b0c:	2001      	movne	r0, #1
 8013b0e:	b002      	add	sp, #8
 8013b10:	4770      	bx	lr
 8013b12:	4610      	mov	r0, r2
 8013b14:	e7fb      	b.n	8013b0e <__ascii_mbtowc+0x16>
 8013b16:	f06f 0001 	mvn.w	r0, #1
 8013b1a:	e7f8      	b.n	8013b0e <__ascii_mbtowc+0x16>

08013b1c <__malloc_lock>:
 8013b1c:	4801      	ldr	r0, [pc, #4]	; (8013b24 <__malloc_lock+0x8>)
 8013b1e:	f7ff b902 	b.w	8012d26 <__retarget_lock_acquire_recursive>
 8013b22:	bf00      	nop
 8013b24:	240007f8 	.word	0x240007f8

08013b28 <__malloc_unlock>:
 8013b28:	4801      	ldr	r0, [pc, #4]	; (8013b30 <__malloc_unlock+0x8>)
 8013b2a:	f7ff b8fd 	b.w	8012d28 <__retarget_lock_release_recursive>
 8013b2e:	bf00      	nop
 8013b30:	240007f8 	.word	0x240007f8

08013b34 <_read_r>:
 8013b34:	b538      	push	{r3, r4, r5, lr}
 8013b36:	4d07      	ldr	r5, [pc, #28]	; (8013b54 <_read_r+0x20>)
 8013b38:	4604      	mov	r4, r0
 8013b3a:	4608      	mov	r0, r1
 8013b3c:	4611      	mov	r1, r2
 8013b3e:	2200      	movs	r2, #0
 8013b40:	602a      	str	r2, [r5, #0]
 8013b42:	461a      	mov	r2, r3
 8013b44:	f7f0 fd8a 	bl	800465c <_read>
 8013b48:	1c43      	adds	r3, r0, #1
 8013b4a:	d102      	bne.n	8013b52 <_read_r+0x1e>
 8013b4c:	682b      	ldr	r3, [r5, #0]
 8013b4e:	b103      	cbz	r3, 8013b52 <_read_r+0x1e>
 8013b50:	6023      	str	r3, [r4, #0]
 8013b52:	bd38      	pop	{r3, r4, r5, pc}
 8013b54:	24000800 	.word	0x24000800

08013b58 <__ascii_wctomb>:
 8013b58:	b149      	cbz	r1, 8013b6e <__ascii_wctomb+0x16>
 8013b5a:	2aff      	cmp	r2, #255	; 0xff
 8013b5c:	bf85      	ittet	hi
 8013b5e:	238a      	movhi	r3, #138	; 0x8a
 8013b60:	6003      	strhi	r3, [r0, #0]
 8013b62:	700a      	strbls	r2, [r1, #0]
 8013b64:	f04f 30ff 	movhi.w	r0, #4294967295
 8013b68:	bf98      	it	ls
 8013b6a:	2001      	movls	r0, #1
 8013b6c:	4770      	bx	lr
 8013b6e:	4608      	mov	r0, r1
 8013b70:	4770      	bx	lr

08013b72 <abort>:
 8013b72:	b508      	push	{r3, lr}
 8013b74:	2006      	movs	r0, #6
 8013b76:	f000 f82b 	bl	8013bd0 <raise>
 8013b7a:	2001      	movs	r0, #1
 8013b7c:	f7f0 fd64 	bl	8004648 <_exit>

08013b80 <_raise_r>:
 8013b80:	291f      	cmp	r1, #31
 8013b82:	b538      	push	{r3, r4, r5, lr}
 8013b84:	4604      	mov	r4, r0
 8013b86:	460d      	mov	r5, r1
 8013b88:	d904      	bls.n	8013b94 <_raise_r+0x14>
 8013b8a:	2316      	movs	r3, #22
 8013b8c:	6003      	str	r3, [r0, #0]
 8013b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b92:	bd38      	pop	{r3, r4, r5, pc}
 8013b94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b96:	b112      	cbz	r2, 8013b9e <_raise_r+0x1e>
 8013b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b9c:	b94b      	cbnz	r3, 8013bb2 <_raise_r+0x32>
 8013b9e:	4620      	mov	r0, r4
 8013ba0:	f000 f830 	bl	8013c04 <_getpid_r>
 8013ba4:	462a      	mov	r2, r5
 8013ba6:	4601      	mov	r1, r0
 8013ba8:	4620      	mov	r0, r4
 8013baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013bae:	f000 b817 	b.w	8013be0 <_kill_r>
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	d00a      	beq.n	8013bcc <_raise_r+0x4c>
 8013bb6:	1c59      	adds	r1, r3, #1
 8013bb8:	d103      	bne.n	8013bc2 <_raise_r+0x42>
 8013bba:	2316      	movs	r3, #22
 8013bbc:	6003      	str	r3, [r0, #0]
 8013bbe:	2001      	movs	r0, #1
 8013bc0:	e7e7      	b.n	8013b92 <_raise_r+0x12>
 8013bc2:	2400      	movs	r4, #0
 8013bc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013bc8:	4628      	mov	r0, r5
 8013bca:	4798      	blx	r3
 8013bcc:	2000      	movs	r0, #0
 8013bce:	e7e0      	b.n	8013b92 <_raise_r+0x12>

08013bd0 <raise>:
 8013bd0:	4b02      	ldr	r3, [pc, #8]	; (8013bdc <raise+0xc>)
 8013bd2:	4601      	mov	r1, r0
 8013bd4:	6818      	ldr	r0, [r3, #0]
 8013bd6:	f7ff bfd3 	b.w	8013b80 <_raise_r>
 8013bda:	bf00      	nop
 8013bdc:	24000024 	.word	0x24000024

08013be0 <_kill_r>:
 8013be0:	b538      	push	{r3, r4, r5, lr}
 8013be2:	4d07      	ldr	r5, [pc, #28]	; (8013c00 <_kill_r+0x20>)
 8013be4:	2300      	movs	r3, #0
 8013be6:	4604      	mov	r4, r0
 8013be8:	4608      	mov	r0, r1
 8013bea:	4611      	mov	r1, r2
 8013bec:	602b      	str	r3, [r5, #0]
 8013bee:	f7f0 fd1b 	bl	8004628 <_kill>
 8013bf2:	1c43      	adds	r3, r0, #1
 8013bf4:	d102      	bne.n	8013bfc <_kill_r+0x1c>
 8013bf6:	682b      	ldr	r3, [r5, #0]
 8013bf8:	b103      	cbz	r3, 8013bfc <_kill_r+0x1c>
 8013bfa:	6023      	str	r3, [r4, #0]
 8013bfc:	bd38      	pop	{r3, r4, r5, pc}
 8013bfe:	bf00      	nop
 8013c00:	24000800 	.word	0x24000800

08013c04 <_getpid_r>:
 8013c04:	f7f0 bd08 	b.w	8004618 <_getpid>

08013c08 <atan2>:
 8013c08:	f000 b862 	b.w	8013cd0 <__ieee754_atan2>
 8013c0c:	0000      	movs	r0, r0
	...

08013c10 <sqrt>:
 8013c10:	b508      	push	{r3, lr}
 8013c12:	ed2d 8b04 	vpush	{d8-d9}
 8013c16:	eeb0 8b40 	vmov.f64	d8, d0
 8013c1a:	f000 f927 	bl	8013e6c <__ieee754_sqrt>
 8013c1e:	4b10      	ldr	r3, [pc, #64]	; (8013c60 <sqrt+0x50>)
 8013c20:	f993 3000 	ldrsb.w	r3, [r3]
 8013c24:	3301      	adds	r3, #1
 8013c26:	d011      	beq.n	8013c4c <sqrt+0x3c>
 8013c28:	eeb4 8b48 	vcmp.f64	d8, d8
 8013c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c30:	d60c      	bvs.n	8013c4c <sqrt+0x3c>
 8013c32:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8013c58 <sqrt+0x48>
 8013c36:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8013c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c3e:	d505      	bpl.n	8013c4c <sqrt+0x3c>
 8013c40:	f7fd fae2 	bl	8011208 <__errno>
 8013c44:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8013c48:	2321      	movs	r3, #33	; 0x21
 8013c4a:	6003      	str	r3, [r0, #0]
 8013c4c:	ecbd 8b04 	vpop	{d8-d9}
 8013c50:	bd08      	pop	{r3, pc}
 8013c52:	bf00      	nop
 8013c54:	f3af 8000 	nop.w
	...
 8013c60:	240001f4 	.word	0x240001f4

08013c64 <asinf>:
 8013c64:	b508      	push	{r3, lr}
 8013c66:	ed2d 8b02 	vpush	{d8}
 8013c6a:	eeb0 8a40 	vmov.f32	s16, s0
 8013c6e:	f000 f901 	bl	8013e74 <__ieee754_asinf>
 8013c72:	4b13      	ldr	r3, [pc, #76]	; (8013cc0 <asinf+0x5c>)
 8013c74:	f993 3000 	ldrsb.w	r3, [r3]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	eef0 8a40 	vmov.f32	s17, s0
 8013c7e:	d01a      	beq.n	8013cb6 <asinf+0x52>
 8013c80:	eeb4 8a48 	vcmp.f32	s16, s16
 8013c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c88:	d615      	bvs.n	8013cb6 <asinf+0x52>
 8013c8a:	eeb0 0a48 	vmov.f32	s0, s16
 8013c8e:	f000 fc53 	bl	8014538 <fabsf>
 8013c92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c96:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c9e:	dd0a      	ble.n	8013cb6 <asinf+0x52>
 8013ca0:	f7fd fab2 	bl	8011208 <__errno>
 8013ca4:	ecbd 8b02 	vpop	{d8}
 8013ca8:	2321      	movs	r3, #33	; 0x21
 8013caa:	6003      	str	r3, [r0, #0]
 8013cac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013cb0:	4804      	ldr	r0, [pc, #16]	; (8013cc4 <asinf+0x60>)
 8013cb2:	f000 bc49 	b.w	8014548 <nanf>
 8013cb6:	eeb0 0a68 	vmov.f32	s0, s17
 8013cba:	ecbd 8b02 	vpop	{d8}
 8013cbe:	bd08      	pop	{r3, pc}
 8013cc0:	240001f4 	.word	0x240001f4
 8013cc4:	08014920 	.word	0x08014920

08013cc8 <atan2f>:
 8013cc8:	f000 b9ba 	b.w	8014040 <__ieee754_atan2f>
 8013ccc:	0000      	movs	r0, r0
	...

08013cd0 <__ieee754_atan2>:
 8013cd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013cd2:	ee11 6a10 	vmov	r6, s2
 8013cd6:	ee11 0a90 	vmov	r0, s3
 8013cda:	4273      	negs	r3, r6
 8013cdc:	4f60      	ldr	r7, [pc, #384]	; (8013e60 <__ieee754_atan2+0x190>)
 8013cde:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8013ce2:	4333      	orrs	r3, r6
 8013ce4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013ce8:	42bb      	cmp	r3, r7
 8013cea:	ed8d 0b00 	vstr	d0, [sp]
 8013cee:	d80b      	bhi.n	8013d08 <__ieee754_atan2+0x38>
 8013cf0:	e9dd c500 	ldrd	ip, r5, [sp]
 8013cf4:	f1cc 0100 	rsb	r1, ip, #0
 8013cf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013cfc:	ea41 010c 	orr.w	r1, r1, ip
 8013d00:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8013d04:	42b9      	cmp	r1, r7
 8013d06:	d906      	bls.n	8013d16 <__ieee754_atan2+0x46>
 8013d08:	ed9d 7b00 	vldr	d7, [sp]
 8013d0c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8013d10:	ed8d 7b00 	vstr	d7, [sp]
 8013d14:	e054      	b.n	8013dc0 <__ieee754_atan2+0xf0>
 8013d16:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8013d1a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8013d1e:	4331      	orrs	r1, r6
 8013d20:	d104      	bne.n	8013d2c <__ieee754_atan2+0x5c>
 8013d22:	b003      	add	sp, #12
 8013d24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013d28:	f000 ba2e 	b.w	8014188 <atan>
 8013d2c:	1784      	asrs	r4, r0, #30
 8013d2e:	f004 0402 	and.w	r4, r4, #2
 8013d32:	ea53 010c 	orrs.w	r1, r3, ip
 8013d36:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8013d3a:	d109      	bne.n	8013d50 <__ieee754_atan2+0x80>
 8013d3c:	2c02      	cmp	r4, #2
 8013d3e:	d069      	beq.n	8013e14 <__ieee754_atan2+0x144>
 8013d40:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8013e28 <__ieee754_atan2+0x158>
 8013d44:	ed9d 6b00 	vldr	d6, [sp]
 8013d48:	2c03      	cmp	r4, #3
 8013d4a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8013d4e:	e7df      	b.n	8013d10 <__ieee754_atan2+0x40>
 8013d50:	ea52 0106 	orrs.w	r1, r2, r6
 8013d54:	d107      	bne.n	8013d66 <__ieee754_atan2+0x96>
 8013d56:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8013e30 <__ieee754_atan2+0x160>
 8013d5a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8013e38 <__ieee754_atan2+0x168>
 8013d5e:	2d00      	cmp	r5, #0
 8013d60:	fe26 7b07 	vselge.f64	d7, d6, d7
 8013d64:	e7d4      	b.n	8013d10 <__ieee754_atan2+0x40>
 8013d66:	42ba      	cmp	r2, r7
 8013d68:	d10f      	bne.n	8013d8a <__ieee754_atan2+0xba>
 8013d6a:	4293      	cmp	r3, r2
 8013d6c:	f104 34ff 	add.w	r4, r4, #4294967295
 8013d70:	d107      	bne.n	8013d82 <__ieee754_atan2+0xb2>
 8013d72:	2c02      	cmp	r4, #2
 8013d74:	d851      	bhi.n	8013e1a <__ieee754_atan2+0x14a>
 8013d76:	4b3b      	ldr	r3, [pc, #236]	; (8013e64 <__ieee754_atan2+0x194>)
 8013d78:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013d7c:	ed94 7b00 	vldr	d7, [r4]
 8013d80:	e7c6      	b.n	8013d10 <__ieee754_atan2+0x40>
 8013d82:	2c02      	cmp	r4, #2
 8013d84:	d84c      	bhi.n	8013e20 <__ieee754_atan2+0x150>
 8013d86:	4b38      	ldr	r3, [pc, #224]	; (8013e68 <__ieee754_atan2+0x198>)
 8013d88:	e7f6      	b.n	8013d78 <__ieee754_atan2+0xa8>
 8013d8a:	42bb      	cmp	r3, r7
 8013d8c:	d0e3      	beq.n	8013d56 <__ieee754_atan2+0x86>
 8013d8e:	1a9b      	subs	r3, r3, r2
 8013d90:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013d94:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013d98:	da16      	bge.n	8013dc8 <__ieee754_atan2+0xf8>
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	da01      	bge.n	8013da2 <__ieee754_atan2+0xd2>
 8013d9e:	323c      	adds	r2, #60	; 0x3c
 8013da0:	db17      	blt.n	8013dd2 <__ieee754_atan2+0x102>
 8013da2:	ed9d 7b00 	vldr	d7, [sp]
 8013da6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8013daa:	f000 fae7 	bl	801437c <fabs>
 8013dae:	f000 f9eb 	bl	8014188 <atan>
 8013db2:	ed8d 0b00 	vstr	d0, [sp]
 8013db6:	2c01      	cmp	r4, #1
 8013db8:	d00e      	beq.n	8013dd8 <__ieee754_atan2+0x108>
 8013dba:	2c02      	cmp	r4, #2
 8013dbc:	d014      	beq.n	8013de8 <__ieee754_atan2+0x118>
 8013dbe:	b9f4      	cbnz	r4, 8013dfe <__ieee754_atan2+0x12e>
 8013dc0:	ed9d 0b00 	vldr	d0, [sp]
 8013dc4:	b003      	add	sp, #12
 8013dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dc8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8013e30 <__ieee754_atan2+0x160>
 8013dcc:	ed8d 7b00 	vstr	d7, [sp]
 8013dd0:	e7f1      	b.n	8013db6 <__ieee754_atan2+0xe6>
 8013dd2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8013e40 <__ieee754_atan2+0x170>
 8013dd6:	e7f9      	b.n	8013dcc <__ieee754_atan2+0xfc>
 8013dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013ddc:	9901      	ldr	r1, [sp, #4]
 8013dde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013de2:	e9cd 2300 	strd	r2, r3, [sp]
 8013de6:	e7eb      	b.n	8013dc0 <__ieee754_atan2+0xf0>
 8013de8:	ed9d 6b00 	vldr	d6, [sp]
 8013dec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8013e48 <__ieee754_atan2+0x178>
 8013df0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013df4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8013e50 <__ieee754_atan2+0x180>
 8013df8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013dfc:	e788      	b.n	8013d10 <__ieee754_atan2+0x40>
 8013dfe:	ed9d 6b00 	vldr	d6, [sp]
 8013e02:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8013e48 <__ieee754_atan2+0x178>
 8013e06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013e0a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8013e50 <__ieee754_atan2+0x180>
 8013e0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8013e12:	e77d      	b.n	8013d10 <__ieee754_atan2+0x40>
 8013e14:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8013e50 <__ieee754_atan2+0x180>
 8013e18:	e77a      	b.n	8013d10 <__ieee754_atan2+0x40>
 8013e1a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8013e58 <__ieee754_atan2+0x188>
 8013e1e:	e777      	b.n	8013d10 <__ieee754_atan2+0x40>
 8013e20:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8013e40 <__ieee754_atan2+0x170>
 8013e24:	e774      	b.n	8013d10 <__ieee754_atan2+0x40>
 8013e26:	bf00      	nop
 8013e28:	54442d18 	.word	0x54442d18
 8013e2c:	c00921fb 	.word	0xc00921fb
 8013e30:	54442d18 	.word	0x54442d18
 8013e34:	3ff921fb 	.word	0x3ff921fb
 8013e38:	54442d18 	.word	0x54442d18
 8013e3c:	bff921fb 	.word	0xbff921fb
	...
 8013e48:	33145c07 	.word	0x33145c07
 8013e4c:	3ca1a626 	.word	0x3ca1a626
 8013e50:	54442d18 	.word	0x54442d18
 8013e54:	400921fb 	.word	0x400921fb
 8013e58:	54442d18 	.word	0x54442d18
 8013e5c:	3fe921fb 	.word	0x3fe921fb
 8013e60:	7ff00000 	.word	0x7ff00000
 8013e64:	08014a30 	.word	0x08014a30
 8013e68:	08014a48 	.word	0x08014a48

08013e6c <__ieee754_sqrt>:
 8013e6c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8013e70:	4770      	bx	lr
	...

08013e74 <__ieee754_asinf>:
 8013e74:	b538      	push	{r3, r4, r5, lr}
 8013e76:	ee10 5a10 	vmov	r5, s0
 8013e7a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8013e7e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013e82:	ed2d 8b04 	vpush	{d8-d9}
 8013e86:	d10c      	bne.n	8013ea2 <__ieee754_asinf+0x2e>
 8013e88:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014000 <__ieee754_asinf+0x18c>
 8013e8c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8014004 <__ieee754_asinf+0x190>
 8013e90:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013e94:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013e98:	eeb0 0a67 	vmov.f32	s0, s15
 8013e9c:	ecbd 8b04 	vpop	{d8-d9}
 8013ea0:	bd38      	pop	{r3, r4, r5, pc}
 8013ea2:	dd04      	ble.n	8013eae <__ieee754_asinf+0x3a>
 8013ea4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013ea8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8013eac:	e7f6      	b.n	8013e9c <__ieee754_asinf+0x28>
 8013eae:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013eb2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8013eb6:	da0b      	bge.n	8013ed0 <__ieee754_asinf+0x5c>
 8013eb8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8013ebc:	da52      	bge.n	8013f64 <__ieee754_asinf+0xf0>
 8013ebe:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014008 <__ieee754_asinf+0x194>
 8013ec2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8013ec6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ece:	dce5      	bgt.n	8013e9c <__ieee754_asinf+0x28>
 8013ed0:	f000 fb32 	bl	8014538 <fabsf>
 8013ed4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013ed8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8013edc:	ee20 8a08 	vmul.f32	s16, s0, s16
 8013ee0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801400c <__ieee754_asinf+0x198>
 8013ee4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8014010 <__ieee754_asinf+0x19c>
 8013ee8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8014014 <__ieee754_asinf+0x1a0>
 8013eec:	eea8 7a27 	vfma.f32	s14, s16, s15
 8013ef0:	eddf 7a49 	vldr	s15, [pc, #292]	; 8014018 <__ieee754_asinf+0x1a4>
 8013ef4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013ef8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801401c <__ieee754_asinf+0x1a8>
 8013efc:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013f00:	eddf 7a47 	vldr	s15, [pc, #284]	; 8014020 <__ieee754_asinf+0x1ac>
 8013f04:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013f08:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014024 <__ieee754_asinf+0x1b0>
 8013f0c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8013f10:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014028 <__ieee754_asinf+0x1b4>
 8013f14:	eee8 7a07 	vfma.f32	s15, s16, s14
 8013f18:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801402c <__ieee754_asinf+0x1b8>
 8013f1c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8013f20:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014030 <__ieee754_asinf+0x1bc>
 8013f24:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013f28:	eeb0 0a48 	vmov.f32	s0, s16
 8013f2c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8013f30:	f000 f924 	bl	801417c <__ieee754_sqrtf>
 8013f34:	4b3f      	ldr	r3, [pc, #252]	; (8014034 <__ieee754_asinf+0x1c0>)
 8013f36:	ee29 9a08 	vmul.f32	s18, s18, s16
 8013f3a:	429c      	cmp	r4, r3
 8013f3c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8013f40:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013f44:	dd3d      	ble.n	8013fc2 <__ieee754_asinf+0x14e>
 8013f46:	eea0 0a06 	vfma.f32	s0, s0, s12
 8013f4a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8014038 <__ieee754_asinf+0x1c4>
 8013f4e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8013f52:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014004 <__ieee754_asinf+0x190>
 8013f56:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013f5a:	2d00      	cmp	r5, #0
 8013f5c:	bfd8      	it	le
 8013f5e:	eeb1 0a40 	vnegle.f32	s0, s0
 8013f62:	e79b      	b.n	8013e9c <__ieee754_asinf+0x28>
 8013f64:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013f68:	eddf 6a28 	vldr	s13, [pc, #160]	; 801400c <__ieee754_asinf+0x198>
 8013f6c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014010 <__ieee754_asinf+0x19c>
 8013f70:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8014024 <__ieee754_asinf+0x1b0>
 8013f74:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013f78:	eddf 6a27 	vldr	s13, [pc, #156]	; 8014018 <__ieee754_asinf+0x1a4>
 8013f7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f80:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801401c <__ieee754_asinf+0x1a8>
 8013f84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013f88:	eddf 6a25 	vldr	s13, [pc, #148]	; 8014020 <__ieee754_asinf+0x1ac>
 8013f8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f90:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8014014 <__ieee754_asinf+0x1a0>
 8013f94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013f98:	eddf 6a23 	vldr	s13, [pc, #140]	; 8014028 <__ieee754_asinf+0x1b4>
 8013f9c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8013fa0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801402c <__ieee754_asinf+0x1b8>
 8013fa4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013fa8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8014030 <__ieee754_asinf+0x1bc>
 8013fac:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013fb4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8013fb8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8013fbc:	eea0 0a27 	vfma.f32	s0, s0, s15
 8013fc0:	e76c      	b.n	8013e9c <__ieee754_asinf+0x28>
 8013fc2:	ee10 3a10 	vmov	r3, s0
 8013fc6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013fca:	f023 030f 	bic.w	r3, r3, #15
 8013fce:	ee07 3a10 	vmov	s14, r3
 8013fd2:	eea7 8a47 	vfms.f32	s16, s14, s14
 8013fd6:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013fda:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013fde:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8013fe2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014000 <__ieee754_asinf+0x18c>
 8013fe6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8013fea:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8013fee:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801403c <__ieee754_asinf+0x1c8>
 8013ff2:	eeb0 6a40 	vmov.f32	s12, s0
 8013ff6:	eea7 6a66 	vfms.f32	s12, s14, s13
 8013ffa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8013ffe:	e7aa      	b.n	8013f56 <__ieee754_asinf+0xe2>
 8014000:	b33bbd2e 	.word	0xb33bbd2e
 8014004:	3fc90fdb 	.word	0x3fc90fdb
 8014008:	7149f2ca 	.word	0x7149f2ca
 801400c:	3811ef08 	.word	0x3811ef08
 8014010:	3a4f7f04 	.word	0x3a4f7f04
 8014014:	3e2aaaab 	.word	0x3e2aaaab
 8014018:	bd241146 	.word	0xbd241146
 801401c:	3e4e0aa8 	.word	0x3e4e0aa8
 8014020:	bea6b090 	.word	0xbea6b090
 8014024:	3d9dc62e 	.word	0x3d9dc62e
 8014028:	bf303361 	.word	0xbf303361
 801402c:	4001572d 	.word	0x4001572d
 8014030:	c019d139 	.word	0xc019d139
 8014034:	3f799999 	.word	0x3f799999
 8014038:	333bbd2e 	.word	0x333bbd2e
 801403c:	3f490fdb 	.word	0x3f490fdb

08014040 <__ieee754_atan2f>:
 8014040:	ee10 2a90 	vmov	r2, s1
 8014044:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014048:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801404c:	b510      	push	{r4, lr}
 801404e:	eef0 7a40 	vmov.f32	s15, s0
 8014052:	dc06      	bgt.n	8014062 <__ieee754_atan2f+0x22>
 8014054:	ee10 0a10 	vmov	r0, s0
 8014058:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801405c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014060:	dd04      	ble.n	801406c <__ieee754_atan2f+0x2c>
 8014062:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014066:	eeb0 0a67 	vmov.f32	s0, s15
 801406a:	bd10      	pop	{r4, pc}
 801406c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014070:	d103      	bne.n	801407a <__ieee754_atan2f+0x3a>
 8014072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014076:	f000 b98b 	b.w	8014390 <atanf>
 801407a:	1794      	asrs	r4, r2, #30
 801407c:	f004 0402 	and.w	r4, r4, #2
 8014080:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014084:	b93b      	cbnz	r3, 8014096 <__ieee754_atan2f+0x56>
 8014086:	2c02      	cmp	r4, #2
 8014088:	d05c      	beq.n	8014144 <__ieee754_atan2f+0x104>
 801408a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014158 <__ieee754_atan2f+0x118>
 801408e:	2c03      	cmp	r4, #3
 8014090:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8014094:	e7e7      	b.n	8014066 <__ieee754_atan2f+0x26>
 8014096:	b939      	cbnz	r1, 80140a8 <__ieee754_atan2f+0x68>
 8014098:	eddf 7a30 	vldr	s15, [pc, #192]	; 801415c <__ieee754_atan2f+0x11c>
 801409c:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8014160 <__ieee754_atan2f+0x120>
 80140a0:	2800      	cmp	r0, #0
 80140a2:	fe67 7a80 	vselge.f32	s15, s15, s0
 80140a6:	e7de      	b.n	8014066 <__ieee754_atan2f+0x26>
 80140a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80140ac:	d110      	bne.n	80140d0 <__ieee754_atan2f+0x90>
 80140ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80140b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80140b6:	d107      	bne.n	80140c8 <__ieee754_atan2f+0x88>
 80140b8:	2c02      	cmp	r4, #2
 80140ba:	d846      	bhi.n	801414a <__ieee754_atan2f+0x10a>
 80140bc:	4b29      	ldr	r3, [pc, #164]	; (8014164 <__ieee754_atan2f+0x124>)
 80140be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80140c2:	edd4 7a00 	vldr	s15, [r4]
 80140c6:	e7ce      	b.n	8014066 <__ieee754_atan2f+0x26>
 80140c8:	2c02      	cmp	r4, #2
 80140ca:	d841      	bhi.n	8014150 <__ieee754_atan2f+0x110>
 80140cc:	4b26      	ldr	r3, [pc, #152]	; (8014168 <__ieee754_atan2f+0x128>)
 80140ce:	e7f6      	b.n	80140be <__ieee754_atan2f+0x7e>
 80140d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80140d4:	d0e0      	beq.n	8014098 <__ieee754_atan2f+0x58>
 80140d6:	1a5b      	subs	r3, r3, r1
 80140d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80140dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80140e0:	da1a      	bge.n	8014118 <__ieee754_atan2f+0xd8>
 80140e2:	2a00      	cmp	r2, #0
 80140e4:	da01      	bge.n	80140ea <__ieee754_atan2f+0xaa>
 80140e6:	313c      	adds	r1, #60	; 0x3c
 80140e8:	db19      	blt.n	801411e <__ieee754_atan2f+0xde>
 80140ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80140ee:	f000 fa23 	bl	8014538 <fabsf>
 80140f2:	f000 f94d 	bl	8014390 <atanf>
 80140f6:	eef0 7a40 	vmov.f32	s15, s0
 80140fa:	2c01      	cmp	r4, #1
 80140fc:	d012      	beq.n	8014124 <__ieee754_atan2f+0xe4>
 80140fe:	2c02      	cmp	r4, #2
 8014100:	d017      	beq.n	8014132 <__ieee754_atan2f+0xf2>
 8014102:	2c00      	cmp	r4, #0
 8014104:	d0af      	beq.n	8014066 <__ieee754_atan2f+0x26>
 8014106:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801416c <__ieee754_atan2f+0x12c>
 801410a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801410e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8014170 <__ieee754_atan2f+0x130>
 8014112:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014116:	e7a6      	b.n	8014066 <__ieee754_atan2f+0x26>
 8014118:	eddf 7a10 	vldr	s15, [pc, #64]	; 801415c <__ieee754_atan2f+0x11c>
 801411c:	e7ed      	b.n	80140fa <__ieee754_atan2f+0xba>
 801411e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014174 <__ieee754_atan2f+0x134>
 8014122:	e7ea      	b.n	80140fa <__ieee754_atan2f+0xba>
 8014124:	ee17 3a90 	vmov	r3, s15
 8014128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801412c:	ee07 3a90 	vmov	s15, r3
 8014130:	e799      	b.n	8014066 <__ieee754_atan2f+0x26>
 8014132:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801416c <__ieee754_atan2f+0x12c>
 8014136:	ee77 7a80 	vadd.f32	s15, s15, s0
 801413a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014170 <__ieee754_atan2f+0x130>
 801413e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014142:	e790      	b.n	8014066 <__ieee754_atan2f+0x26>
 8014144:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014170 <__ieee754_atan2f+0x130>
 8014148:	e78d      	b.n	8014066 <__ieee754_atan2f+0x26>
 801414a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014178 <__ieee754_atan2f+0x138>
 801414e:	e78a      	b.n	8014066 <__ieee754_atan2f+0x26>
 8014150:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014174 <__ieee754_atan2f+0x134>
 8014154:	e787      	b.n	8014066 <__ieee754_atan2f+0x26>
 8014156:	bf00      	nop
 8014158:	c0490fdb 	.word	0xc0490fdb
 801415c:	3fc90fdb 	.word	0x3fc90fdb
 8014160:	bfc90fdb 	.word	0xbfc90fdb
 8014164:	08014a60 	.word	0x08014a60
 8014168:	08014a6c 	.word	0x08014a6c
 801416c:	33bbbd2e 	.word	0x33bbbd2e
 8014170:	40490fdb 	.word	0x40490fdb
 8014174:	00000000 	.word	0x00000000
 8014178:	3f490fdb 	.word	0x3f490fdb

0801417c <__ieee754_sqrtf>:
 801417c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014180:	4770      	bx	lr
 8014182:	0000      	movs	r0, r0
 8014184:	0000      	movs	r0, r0
	...

08014188 <atan>:
 8014188:	b538      	push	{r3, r4, r5, lr}
 801418a:	eeb0 7b40 	vmov.f64	d7, d0
 801418e:	ee17 5a90 	vmov	r5, s15
 8014192:	4b73      	ldr	r3, [pc, #460]	; (8014360 <atan+0x1d8>)
 8014194:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014198:	429c      	cmp	r4, r3
 801419a:	dd13      	ble.n	80141c4 <atan+0x3c>
 801419c:	4b71      	ldr	r3, [pc, #452]	; (8014364 <atan+0x1dc>)
 801419e:	429c      	cmp	r4, r3
 80141a0:	dc03      	bgt.n	80141aa <atan+0x22>
 80141a2:	d107      	bne.n	80141b4 <atan+0x2c>
 80141a4:	ee10 3a10 	vmov	r3, s0
 80141a8:	b123      	cbz	r3, 80141b4 <atan+0x2c>
 80141aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80141ae:	eeb0 0b47 	vmov.f64	d0, d7
 80141b2:	bd38      	pop	{r3, r4, r5, pc}
 80141b4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80142f0 <atan+0x168>
 80141b8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80142f8 <atan+0x170>
 80141bc:	2d00      	cmp	r5, #0
 80141be:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80141c2:	e7f4      	b.n	80141ae <atan+0x26>
 80141c4:	4b68      	ldr	r3, [pc, #416]	; (8014368 <atan+0x1e0>)
 80141c6:	429c      	cmp	r4, r3
 80141c8:	dc11      	bgt.n	80141ee <atan+0x66>
 80141ca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80141ce:	429c      	cmp	r4, r3
 80141d0:	dc0a      	bgt.n	80141e8 <atan+0x60>
 80141d2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80141d6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8014300 <atan+0x178>
 80141da:	ee30 6b06 	vadd.f64	d6, d0, d6
 80141de:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80141e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e6:	dce2      	bgt.n	80141ae <atan+0x26>
 80141e8:	f04f 33ff 	mov.w	r3, #4294967295
 80141ec:	e013      	b.n	8014216 <atan+0x8e>
 80141ee:	f000 f8c5 	bl	801437c <fabs>
 80141f2:	4b5e      	ldr	r3, [pc, #376]	; (801436c <atan+0x1e4>)
 80141f4:	429c      	cmp	r4, r3
 80141f6:	dc4f      	bgt.n	8014298 <atan+0x110>
 80141f8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80141fc:	429c      	cmp	r4, r3
 80141fe:	dc41      	bgt.n	8014284 <atan+0xfc>
 8014200:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8014204:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014208:	2300      	movs	r3, #0
 801420a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801420e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014212:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014216:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014308 <atan+0x180>
 801421a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801421e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8014222:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014310 <atan+0x188>
 8014226:	eea5 3b06 	vfma.f64	d3, d5, d6
 801422a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014318 <atan+0x190>
 801422e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014232:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014320 <atan+0x198>
 8014236:	eea6 3b05 	vfma.f64	d3, d6, d5
 801423a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014328 <atan+0x1a0>
 801423e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014242:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014330 <atan+0x1a8>
 8014246:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014338 <atan+0x1b0>
 801424a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801424e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014340 <atan+0x1b8>
 8014252:	eea5 2b06 	vfma.f64	d2, d5, d6
 8014256:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014348 <atan+0x1c0>
 801425a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801425e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014350 <atan+0x1c8>
 8014262:	eea6 2b05 	vfma.f64	d2, d6, d5
 8014266:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014358 <atan+0x1d0>
 801426a:	1c5a      	adds	r2, r3, #1
 801426c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8014270:	ee26 6b05 	vmul.f64	d6, d6, d5
 8014274:	eea3 6b04 	vfma.f64	d6, d3, d4
 8014278:	ee27 6b06 	vmul.f64	d6, d7, d6
 801427c:	d121      	bne.n	80142c2 <atan+0x13a>
 801427e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014282:	e794      	b.n	80141ae <atan+0x26>
 8014284:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8014288:	2301      	movs	r3, #1
 801428a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801428e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014292:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014296:	e7be      	b.n	8014216 <atan+0x8e>
 8014298:	4b35      	ldr	r3, [pc, #212]	; (8014370 <atan+0x1e8>)
 801429a:	429c      	cmp	r4, r3
 801429c:	da0b      	bge.n	80142b6 <atan+0x12e>
 801429e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80142a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80142a6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80142aa:	eea0 6b07 	vfma.f64	d6, d0, d7
 80142ae:	2302      	movs	r3, #2
 80142b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80142b4:	e7af      	b.n	8014216 <atan+0x8e>
 80142b6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80142ba:	2303      	movs	r3, #3
 80142bc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80142c0:	e7a9      	b.n	8014216 <atan+0x8e>
 80142c2:	4a2c      	ldr	r2, [pc, #176]	; (8014374 <atan+0x1ec>)
 80142c4:	492c      	ldr	r1, [pc, #176]	; (8014378 <atan+0x1f0>)
 80142c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80142ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80142ce:	ed93 5b00 	vldr	d5, [r3]
 80142d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80142d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80142da:	ed92 6b00 	vldr	d6, [r2]
 80142de:	2d00      	cmp	r5, #0
 80142e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80142e4:	bfb8      	it	lt
 80142e6:	eeb1 7b47 	vneglt.f64	d7, d7
 80142ea:	e760      	b.n	80141ae <atan+0x26>
 80142ec:	f3af 8000 	nop.w
 80142f0:	54442d18 	.word	0x54442d18
 80142f4:	3ff921fb 	.word	0x3ff921fb
 80142f8:	54442d18 	.word	0x54442d18
 80142fc:	bff921fb 	.word	0xbff921fb
 8014300:	8800759c 	.word	0x8800759c
 8014304:	7e37e43c 	.word	0x7e37e43c
 8014308:	e322da11 	.word	0xe322da11
 801430c:	3f90ad3a 	.word	0x3f90ad3a
 8014310:	24760deb 	.word	0x24760deb
 8014314:	3fa97b4b 	.word	0x3fa97b4b
 8014318:	a0d03d51 	.word	0xa0d03d51
 801431c:	3fb10d66 	.word	0x3fb10d66
 8014320:	c54c206e 	.word	0xc54c206e
 8014324:	3fb745cd 	.word	0x3fb745cd
 8014328:	920083ff 	.word	0x920083ff
 801432c:	3fc24924 	.word	0x3fc24924
 8014330:	5555550d 	.word	0x5555550d
 8014334:	3fd55555 	.word	0x3fd55555
 8014338:	52defd9a 	.word	0x52defd9a
 801433c:	bfadde2d 	.word	0xbfadde2d
 8014340:	2c6a6c2f 	.word	0x2c6a6c2f
 8014344:	bfa2b444 	.word	0xbfa2b444
 8014348:	af749a6d 	.word	0xaf749a6d
 801434c:	bfb3b0f2 	.word	0xbfb3b0f2
 8014350:	fe231671 	.word	0xfe231671
 8014354:	bfbc71c6 	.word	0xbfbc71c6
 8014358:	9998ebc4 	.word	0x9998ebc4
 801435c:	bfc99999 	.word	0xbfc99999
 8014360:	440fffff 	.word	0x440fffff
 8014364:	7ff00000 	.word	0x7ff00000
 8014368:	3fdbffff 	.word	0x3fdbffff
 801436c:	3ff2ffff 	.word	0x3ff2ffff
 8014370:	40038000 	.word	0x40038000
 8014374:	08014a78 	.word	0x08014a78
 8014378:	08014a98 	.word	0x08014a98

0801437c <fabs>:
 801437c:	ec51 0b10 	vmov	r0, r1, d0
 8014380:	ee10 2a10 	vmov	r2, s0
 8014384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014388:	ec43 2b10 	vmov	d0, r2, r3
 801438c:	4770      	bx	lr
	...

08014390 <atanf>:
 8014390:	b538      	push	{r3, r4, r5, lr}
 8014392:	ee10 5a10 	vmov	r5, s0
 8014396:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801439a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801439e:	eef0 7a40 	vmov.f32	s15, s0
 80143a2:	db0f      	blt.n	80143c4 <atanf+0x34>
 80143a4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80143a8:	dd04      	ble.n	80143b4 <atanf+0x24>
 80143aa:	ee70 7a00 	vadd.f32	s15, s0, s0
 80143ae:	eeb0 0a67 	vmov.f32	s0, s15
 80143b2:	bd38      	pop	{r3, r4, r5, pc}
 80143b4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80144ec <atanf+0x15c>
 80143b8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80144f0 <atanf+0x160>
 80143bc:	2d00      	cmp	r5, #0
 80143be:	fe77 7a80 	vselgt.f32	s15, s15, s0
 80143c2:	e7f4      	b.n	80143ae <atanf+0x1e>
 80143c4:	4b4b      	ldr	r3, [pc, #300]	; (80144f4 <atanf+0x164>)
 80143c6:	429c      	cmp	r4, r3
 80143c8:	dc10      	bgt.n	80143ec <atanf+0x5c>
 80143ca:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80143ce:	da0a      	bge.n	80143e6 <atanf+0x56>
 80143d0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80144f8 <atanf+0x168>
 80143d4:	ee30 7a07 	vadd.f32	s14, s0, s14
 80143d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80143dc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80143e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e4:	dce3      	bgt.n	80143ae <atanf+0x1e>
 80143e6:	f04f 33ff 	mov.w	r3, #4294967295
 80143ea:	e013      	b.n	8014414 <atanf+0x84>
 80143ec:	f000 f8a4 	bl	8014538 <fabsf>
 80143f0:	4b42      	ldr	r3, [pc, #264]	; (80144fc <atanf+0x16c>)
 80143f2:	429c      	cmp	r4, r3
 80143f4:	dc4f      	bgt.n	8014496 <atanf+0x106>
 80143f6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80143fa:	429c      	cmp	r4, r3
 80143fc:	dc41      	bgt.n	8014482 <atanf+0xf2>
 80143fe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014402:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014406:	eea0 7a27 	vfma.f32	s14, s0, s15
 801440a:	2300      	movs	r3, #0
 801440c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014410:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014414:	1c5a      	adds	r2, r3, #1
 8014416:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801441a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8014500 <atanf+0x170>
 801441e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8014504 <atanf+0x174>
 8014422:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8014508 <atanf+0x178>
 8014426:	ed9f 0a39 	vldr	s0, [pc, #228]	; 801450c <atanf+0x17c>
 801442a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801442e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014432:	eddf 5a37 	vldr	s11, [pc, #220]	; 8014510 <atanf+0x180>
 8014436:	eee6 5a07 	vfma.f32	s11, s12, s14
 801443a:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8014514 <atanf+0x184>
 801443e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014442:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014518 <atanf+0x188>
 8014446:	eee6 5a07 	vfma.f32	s11, s12, s14
 801444a:	ed9f 6a34 	vldr	s12, [pc, #208]	; 801451c <atanf+0x18c>
 801444e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014452:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014520 <atanf+0x190>
 8014456:	eee7 5a05 	vfma.f32	s11, s14, s10
 801445a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8014524 <atanf+0x194>
 801445e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014462:	eddf 5a31 	vldr	s11, [pc, #196]	; 8014528 <atanf+0x198>
 8014466:	eee5 5a07 	vfma.f32	s11, s10, s14
 801446a:	eea5 0a87 	vfma.f32	s0, s11, s14
 801446e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014472:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014476:	ee27 0a80 	vmul.f32	s0, s15, s0
 801447a:	d121      	bne.n	80144c0 <atanf+0x130>
 801447c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014480:	e795      	b.n	80143ae <atanf+0x1e>
 8014482:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014486:	ee30 7a67 	vsub.f32	s14, s0, s15
 801448a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801448e:	2301      	movs	r3, #1
 8014490:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014494:	e7be      	b.n	8014414 <atanf+0x84>
 8014496:	4b25      	ldr	r3, [pc, #148]	; (801452c <atanf+0x19c>)
 8014498:	429c      	cmp	r4, r3
 801449a:	dc0b      	bgt.n	80144b4 <atanf+0x124>
 801449c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80144a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80144a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80144a8:	2302      	movs	r3, #2
 80144aa:	ee70 6a67 	vsub.f32	s13, s0, s15
 80144ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144b2:	e7af      	b.n	8014414 <atanf+0x84>
 80144b4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80144b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80144bc:	2303      	movs	r3, #3
 80144be:	e7a9      	b.n	8014414 <atanf+0x84>
 80144c0:	4a1b      	ldr	r2, [pc, #108]	; (8014530 <atanf+0x1a0>)
 80144c2:	491c      	ldr	r1, [pc, #112]	; (8014534 <atanf+0x1a4>)
 80144c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80144c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80144cc:	ed93 7a00 	vldr	s14, [r3]
 80144d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80144d4:	2d00      	cmp	r5, #0
 80144d6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80144da:	ed92 0a00 	vldr	s0, [r2]
 80144de:	ee70 7a67 	vsub.f32	s15, s0, s15
 80144e2:	bfb8      	it	lt
 80144e4:	eef1 7a67 	vneglt.f32	s15, s15
 80144e8:	e761      	b.n	80143ae <atanf+0x1e>
 80144ea:	bf00      	nop
 80144ec:	3fc90fdb 	.word	0x3fc90fdb
 80144f0:	bfc90fdb 	.word	0xbfc90fdb
 80144f4:	3edfffff 	.word	0x3edfffff
 80144f8:	7149f2ca 	.word	0x7149f2ca
 80144fc:	3f97ffff 	.word	0x3f97ffff
 8014500:	3c8569d7 	.word	0x3c8569d7
 8014504:	3d4bda59 	.word	0x3d4bda59
 8014508:	bd15a221 	.word	0xbd15a221
 801450c:	be4ccccd 	.word	0xbe4ccccd
 8014510:	3d886b35 	.word	0x3d886b35
 8014514:	3dba2e6e 	.word	0x3dba2e6e
 8014518:	3e124925 	.word	0x3e124925
 801451c:	3eaaaaab 	.word	0x3eaaaaab
 8014520:	bd6ef16b 	.word	0xbd6ef16b
 8014524:	bd9d8795 	.word	0xbd9d8795
 8014528:	bde38e38 	.word	0xbde38e38
 801452c:	401bffff 	.word	0x401bffff
 8014530:	08014ab8 	.word	0x08014ab8
 8014534:	08014ac8 	.word	0x08014ac8

08014538 <fabsf>:
 8014538:	ee10 3a10 	vmov	r3, s0
 801453c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014540:	ee00 3a10 	vmov	s0, r3
 8014544:	4770      	bx	lr
	...

08014548 <nanf>:
 8014548:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014550 <nanf+0x8>
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop
 8014550:	7fc00000 	.word	0x7fc00000

08014554 <_init>:
 8014554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014556:	bf00      	nop
 8014558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801455a:	bc08      	pop	{r3}
 801455c:	469e      	mov	lr, r3
 801455e:	4770      	bx	lr

08014560 <_fini>:
 8014560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014562:	bf00      	nop
 8014564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014566:	bc08      	pop	{r3}
 8014568:	469e      	mov	lr, r3
 801456a:	4770      	bx	lr
